===========================================================================
org.apache.commons.lang.LocaleUtils:::CLASS
org.apache.commons.lang.LocaleUtils.cLanguagesByCountry.getClass().getName() == org.apache.commons.lang.LocaleUtils.cCountriesByLanguage.getClass().getName()
org.apache.commons.lang.LocaleUtils.cAvailableLocaleList has only one value
org.apache.commons.lang.LocaleUtils.cAvailableLocaleList != null
org.apache.commons.lang.LocaleUtils.cAvailableLocaleList[] contains no nulls and has only one value, of length 160
org.apache.commons.lang.LocaleUtils.cAvailableLocaleList[] elements != null
org.apache.commons.lang.LocaleUtils.cAvailableLocaleList[].getClass().getName() == [java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale]
org.apache.commons.lang.LocaleUtils.cAvailableLocaleList[].getClass().getName() elements == java.util.Locale.class
org.apache.commons.lang.LocaleUtils.cAvailableLocaleList.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet.getClass().getName() == java.util.Collections$UnmodifiableSet.class
org.apache.commons.lang.LocaleUtils.cLanguagesByCountry has only one value
org.apache.commons.lang.LocaleUtils.cLanguagesByCountry != null
org.apache.commons.lang.LocaleUtils.cLanguagesByCountry.getClass().getName() == java.util.Collections$SynchronizedMap.class
org.apache.commons.lang.LocaleUtils.cCountriesByLanguage has only one value
org.apache.commons.lang.LocaleUtils.cCountriesByLanguage != null
size(org.apache.commons.lang.LocaleUtils.cAvailableLocaleList[]) == 160
org.apache.commons.lang.LocaleUtils.cAvailableLocaleList.getClass().getName() != org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet.getClass().getName()
org.apache.commons.lang.LocaleUtils.cAvailableLocaleList.getClass().getName() != org.apache.commons.lang.LocaleUtils.cLanguagesByCountry.getClass().getName()
org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet.getClass().getName() != org.apache.commons.lang.LocaleUtils.cLanguagesByCountry.getClass().getName()
===========================================================================
org.apache.commons.lang.LocaleUtils:::OBJECT
this has only one value
org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet has only one value
===========================================================================
org.apache.commons.lang.LocaleUtils.LocaleUtils():::EXIT
===========================================================================
org.apache.commons.lang.LocaleUtils.availableLocaleList():::ENTER
===========================================================================
org.apache.commons.lang.LocaleUtils.availableLocaleList():::EXIT
org.apache.commons.lang.LocaleUtils.cAvailableLocaleList == return
org.apache.commons.lang.LocaleUtils.cAvailableLocaleList == orig(org.apache.commons.lang.LocaleUtils.cAvailableLocaleList)
org.apache.commons.lang.LocaleUtils.cAvailableLocaleList[] == orig(org.apache.commons.lang.LocaleUtils.cAvailableLocaleList[])
org.apache.commons.lang.LocaleUtils.cAvailableLocaleList.getClass().getName() == return.getClass().getName()
org.apache.commons.lang.LocaleUtils.cAvailableLocaleList.getClass().getName() == orig(org.apache.commons.lang.LocaleUtils.cAvailableLocaleList.getClass().getName())
org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet == orig(org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet)
org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet.getClass().getName() == orig(org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet.getClass().getName())
org.apache.commons.lang.LocaleUtils.cLanguagesByCountry == orig(org.apache.commons.lang.LocaleUtils.cLanguagesByCountry)
org.apache.commons.lang.LocaleUtils.cLanguagesByCountry.getClass().getName() == orig(org.apache.commons.lang.LocaleUtils.cLanguagesByCountry.getClass().getName())
org.apache.commons.lang.LocaleUtils.cLanguagesByCountry.getClass().getName() == orig(org.apache.commons.lang.LocaleUtils.cCountriesByLanguage.getClass().getName())
org.apache.commons.lang.LocaleUtils.cCountriesByLanguage == orig(org.apache.commons.lang.LocaleUtils.cCountriesByLanguage)
return[] contains no nulls and has only one value, of length 160
return[] elements != null
return[].getClass().getName() == [java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale]
return[].getClass().getName() elements == java.util.Locale.class
size(return[]) == 160
===========================================================================
org.apache.commons.lang.LocaleUtils.availableLocaleSet():::ENTER
===========================================================================
org.apache.commons.lang.LocaleUtils.availableLocaleSet():::EXIT
org.apache.commons.lang.LocaleUtils.cAvailableLocaleList == orig(org.apache.commons.lang.LocaleUtils.cAvailableLocaleList)
org.apache.commons.lang.LocaleUtils.cAvailableLocaleList[] == orig(org.apache.commons.lang.LocaleUtils.cAvailableLocaleList[])
org.apache.commons.lang.LocaleUtils.cAvailableLocaleList.getClass().getName() == orig(org.apache.commons.lang.LocaleUtils.cAvailableLocaleList.getClass().getName())
org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet.getClass().getName() == return.getClass().getName()
org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet.getClass().getName() == orig(org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet.getClass().getName())
org.apache.commons.lang.LocaleUtils.cLanguagesByCountry == orig(org.apache.commons.lang.LocaleUtils.cLanguagesByCountry)
org.apache.commons.lang.LocaleUtils.cLanguagesByCountry.getClass().getName() == orig(org.apache.commons.lang.LocaleUtils.cLanguagesByCountry.getClass().getName())
org.apache.commons.lang.LocaleUtils.cLanguagesByCountry.getClass().getName() == orig(org.apache.commons.lang.LocaleUtils.cCountriesByLanguage.getClass().getName())
org.apache.commons.lang.LocaleUtils.cCountriesByLanguage == orig(org.apache.commons.lang.LocaleUtils.cCountriesByLanguage)
org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet has only one value
return has only one value
===========================================================================
org.apache.commons.lang.LocaleUtils.countriesByLanguage(java.lang.String):::ENTER
org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet has only one value
languageCode.toString == "de"
===========================================================================
org.apache.commons.lang.LocaleUtils.countriesByLanguage(java.lang.String):::EXIT
org.apache.commons.lang.LocaleUtils.cAvailableLocaleList == orig(org.apache.commons.lang.LocaleUtils.cAvailableLocaleList)
org.apache.commons.lang.LocaleUtils.cAvailableLocaleList[] == orig(org.apache.commons.lang.LocaleUtils.cAvailableLocaleList[])
org.apache.commons.lang.LocaleUtils.cAvailableLocaleList.getClass().getName() == orig(org.apache.commons.lang.LocaleUtils.cAvailableLocaleList.getClass().getName())
org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet == orig(org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet)
org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet.getClass().getName() == orig(org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet.getClass().getName())
org.apache.commons.lang.LocaleUtils.cLanguagesByCountry == orig(org.apache.commons.lang.LocaleUtils.cLanguagesByCountry)
org.apache.commons.lang.LocaleUtils.cLanguagesByCountry.getClass().getName() == orig(org.apache.commons.lang.LocaleUtils.cLanguagesByCountry.getClass().getName())
org.apache.commons.lang.LocaleUtils.cLanguagesByCountry.getClass().getName() == orig(org.apache.commons.lang.LocaleUtils.cCountriesByLanguage.getClass().getName())
org.apache.commons.lang.LocaleUtils.cCountriesByLanguage == orig(org.apache.commons.lang.LocaleUtils.cCountriesByLanguage)
languageCode.toString == orig(languageCode.toString)
org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet has only one value
languageCode.toString == "de"
return[].getClass().getName() elements == java.util.Locale.class
return[].getClass().getName() one of { [], [java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale, java.util.Locale] }
size(return[]) one of { 0, 5 }
===========================================================================
org.apache.commons.lang.LocaleUtils.isAvailableLocale(java.util.Locale):::ENTER
locale != null
===========================================================================
org.apache.commons.lang.LocaleUtils.isAvailableLocale(java.util.Locale):::EXIT
org.apache.commons.lang.LocaleUtils.cAvailableLocaleList == orig(org.apache.commons.lang.LocaleUtils.cAvailableLocaleList)
org.apache.commons.lang.LocaleUtils.cAvailableLocaleList[] == orig(org.apache.commons.lang.LocaleUtils.cAvailableLocaleList[])
org.apache.commons.lang.LocaleUtils.cAvailableLocaleList.getClass().getName() == orig(org.apache.commons.lang.LocaleUtils.cAvailableLocaleList.getClass().getName())
org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet == orig(org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet)
org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet.getClass().getName() == orig(org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet.getClass().getName())
org.apache.commons.lang.LocaleUtils.cLanguagesByCountry == orig(org.apache.commons.lang.LocaleUtils.cLanguagesByCountry)
org.apache.commons.lang.LocaleUtils.cLanguagesByCountry.getClass().getName() == orig(org.apache.commons.lang.LocaleUtils.cLanguagesByCountry.getClass().getName())
org.apache.commons.lang.LocaleUtils.cLanguagesByCountry.getClass().getName() == orig(org.apache.commons.lang.LocaleUtils.cCountriesByLanguage.getClass().getName())
org.apache.commons.lang.LocaleUtils.cCountriesByLanguage == orig(org.apache.commons.lang.LocaleUtils.cCountriesByLanguage)
(return == false)  ==>  (org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet has only one value)
===========================================================================
org.apache.commons.lang.LocaleUtils.isAvailableLocale(java.util.Locale):::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.lang.LocaleUtils.isAvailableLocale(java.util.Locale):::EXIT;condition="not(return == true)"
org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet has only one value
return == false
===========================================================================
org.apache.commons.lang.LocaleUtils.languagesByCountry(java.lang.String):::ENTER
org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet has only one value
countryCode.toString one of { "CH", "GB", "ZZ" }
===========================================================================
org.apache.commons.lang.LocaleUtils.languagesByCountry(java.lang.String):::EXIT
org.apache.commons.lang.LocaleUtils.cAvailableLocaleList == orig(org.apache.commons.lang.LocaleUtils.cAvailableLocaleList)
org.apache.commons.lang.LocaleUtils.cAvailableLocaleList[] == orig(org.apache.commons.lang.LocaleUtils.cAvailableLocaleList[])
org.apache.commons.lang.LocaleUtils.cAvailableLocaleList.getClass().getName() == orig(org.apache.commons.lang.LocaleUtils.cAvailableLocaleList.getClass().getName())
org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet == orig(org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet)
org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet.getClass().getName() == orig(org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet.getClass().getName())
org.apache.commons.lang.LocaleUtils.cLanguagesByCountry == orig(org.apache.commons.lang.LocaleUtils.cLanguagesByCountry)
org.apache.commons.lang.LocaleUtils.cLanguagesByCountry.getClass().getName() == orig(org.apache.commons.lang.LocaleUtils.cLanguagesByCountry.getClass().getName())
org.apache.commons.lang.LocaleUtils.cLanguagesByCountry.getClass().getName() == orig(org.apache.commons.lang.LocaleUtils.cCountriesByLanguage.getClass().getName())
org.apache.commons.lang.LocaleUtils.cCountriesByLanguage == orig(org.apache.commons.lang.LocaleUtils.cCountriesByLanguage)
countryCode.toString == orig(countryCode.toString)
org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet has only one value
countryCode.toString one of { "CH", "GB", "ZZ" }
return[].getClass().getName() elements == java.util.Locale.class
size(return[]) one of { 0, 1, 3 }
org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet.getClass().getName() != return.getClass().getName()
org.apache.commons.lang.LocaleUtils.cLanguagesByCountry.getClass().getName() != return.getClass().getName()
===========================================================================
org.apache.commons.lang.LocaleUtils.localeLookupList(java.util.Locale):::ENTER
org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet has only one value
===========================================================================
org.apache.commons.lang.LocaleUtils.localeLookupList(java.util.Locale):::EXIT
org.apache.commons.lang.LocaleUtils.cAvailableLocaleList == orig(org.apache.commons.lang.LocaleUtils.cAvailableLocaleList)
org.apache.commons.lang.LocaleUtils.cAvailableLocaleList[] == orig(org.apache.commons.lang.LocaleUtils.cAvailableLocaleList[])
org.apache.commons.lang.LocaleUtils.cAvailableLocaleList.getClass().getName() == return.getClass().getName()
org.apache.commons.lang.LocaleUtils.cAvailableLocaleList.getClass().getName() == orig(org.apache.commons.lang.LocaleUtils.cAvailableLocaleList.getClass().getName())
org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet == orig(org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet)
org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet.getClass().getName() == orig(org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet.getClass().getName())
org.apache.commons.lang.LocaleUtils.cLanguagesByCountry == orig(org.apache.commons.lang.LocaleUtils.cLanguagesByCountry)
org.apache.commons.lang.LocaleUtils.cLanguagesByCountry.getClass().getName() == orig(org.apache.commons.lang.LocaleUtils.cLanguagesByCountry.getClass().getName())
org.apache.commons.lang.LocaleUtils.cLanguagesByCountry.getClass().getName() == orig(org.apache.commons.lang.LocaleUtils.cCountriesByLanguage.getClass().getName())
org.apache.commons.lang.LocaleUtils.cCountriesByLanguage == orig(org.apache.commons.lang.LocaleUtils.cCountriesByLanguage)
org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet has only one value
return[].getClass().getName() elements == java.util.Locale.class
===========================================================================
org.apache.commons.lang.LocaleUtils.localeLookupList(java.util.Locale, java.util.Locale):::ENTER
org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet has only one value
org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet != null
===========================================================================
org.apache.commons.lang.LocaleUtils.localeLookupList(java.util.Locale, java.util.Locale):::EXIT
org.apache.commons.lang.LocaleUtils.cAvailableLocaleList == orig(org.apache.commons.lang.LocaleUtils.cAvailableLocaleList)
org.apache.commons.lang.LocaleUtils.cAvailableLocaleList[] == orig(org.apache.commons.lang.LocaleUtils.cAvailableLocaleList[])
org.apache.commons.lang.LocaleUtils.cAvailableLocaleList.getClass().getName() == return.getClass().getName()
org.apache.commons.lang.LocaleUtils.cAvailableLocaleList.getClass().getName() == orig(org.apache.commons.lang.LocaleUtils.cAvailableLocaleList.getClass().getName())
org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet == orig(org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet)
org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet.getClass().getName() == orig(org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet.getClass().getName())
org.apache.commons.lang.LocaleUtils.cLanguagesByCountry == orig(org.apache.commons.lang.LocaleUtils.cLanguagesByCountry)
org.apache.commons.lang.LocaleUtils.cLanguagesByCountry.getClass().getName() == orig(org.apache.commons.lang.LocaleUtils.cLanguagesByCountry.getClass().getName())
org.apache.commons.lang.LocaleUtils.cLanguagesByCountry.getClass().getName() == orig(org.apache.commons.lang.LocaleUtils.cCountriesByLanguage.getClass().getName())
org.apache.commons.lang.LocaleUtils.cCountriesByLanguage == orig(org.apache.commons.lang.LocaleUtils.cCountriesByLanguage)
org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet has only one value
org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet != null
return != null
return[] elements != null
return[].getClass().getName() elements == java.util.Locale.class
===========================================================================
org.apache.commons.lang.LocaleUtils.toLocale(java.lang.String):::ENTER
org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet has only one value
===========================================================================
org.apache.commons.lang.LocaleUtils.toLocale(java.lang.String):::EXIT108
===========================================================================
org.apache.commons.lang.LocaleUtils.toLocale(java.lang.String):::EXIT119
str.toString one of { "us_EN", "us_ZH" }
===========================================================================
org.apache.commons.lang.LocaleUtils.toLocale(java.lang.String):::EXIT124
str.toString one of { "us_EN_A", "us_EN_SFsafdFDsdfF", "us_EN_a" }
===========================================================================
org.apache.commons.lang.LocaleUtils.toLocale(java.lang.String):::EXIT96
return == null
orig(str) == null
===========================================================================
org.apache.commons.lang.LocaleUtils.toLocale(java.lang.String):::EXIT
org.apache.commons.lang.LocaleUtils.cAvailableLocaleList == orig(org.apache.commons.lang.LocaleUtils.cAvailableLocaleList)
org.apache.commons.lang.LocaleUtils.cAvailableLocaleList[] == orig(org.apache.commons.lang.LocaleUtils.cAvailableLocaleList[])
org.apache.commons.lang.LocaleUtils.cAvailableLocaleList.getClass().getName() == orig(org.apache.commons.lang.LocaleUtils.cAvailableLocaleList.getClass().getName())
org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet == orig(org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet)
org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet.getClass().getName() == orig(org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet.getClass().getName())
org.apache.commons.lang.LocaleUtils.cLanguagesByCountry == orig(org.apache.commons.lang.LocaleUtils.cLanguagesByCountry)
org.apache.commons.lang.LocaleUtils.cLanguagesByCountry.getClass().getName() == orig(org.apache.commons.lang.LocaleUtils.cLanguagesByCountry.getClass().getName())
org.apache.commons.lang.LocaleUtils.cLanguagesByCountry.getClass().getName() == orig(org.apache.commons.lang.LocaleUtils.cCountriesByLanguage.getClass().getName())
org.apache.commons.lang.LocaleUtils.cCountriesByLanguage == orig(org.apache.commons.lang.LocaleUtils.cCountriesByLanguage)
str.toString == orig(str.toString)
org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet has only one value
===========================================================================
org.apache.commons.lang.LocaleUtilsTest:::CLASS
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN has only one value
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN != null
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US has only one value
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US != null
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US_ZZZZ has only one value
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US_ZZZZ != null
org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR has only one value
org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR != null
org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR_CA has only one value
org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR_CA != null
org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ has only one value
org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ != null
org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ_ZZ has only one value
org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ_ZZ != null
===========================================================================
org.apache.commons.lang.LocaleUtilsTest:::OBJECT
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtilsTest has only one value
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtilsTest != null
===========================================================================
org.apache.commons.lang.LocaleUtilsTest.LocaleUtilsTest(java.lang.String):::ENTER
name != null
===========================================================================
org.apache.commons.lang.LocaleUtilsTest.LocaleUtilsTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == null
===========================================================================
org.apache.commons.lang.LocaleUtilsTest.assertCountriesByLanguage(java.lang.String, java.lang.String[]):::ENTER
this has only one value
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == null
language == null
countries has only one value
countries.getClass().getName() == java.lang.String[].class
countries[] == []
countries[].toString == []
===========================================================================
org.apache.commons.lang.LocaleUtilsTest.assertCountriesByLanguage(java.lang.String, java.lang.String[]):::EXIT
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US_ZZZZ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US_ZZZZ)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR_CA == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR_CA)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ_ZZ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ_ZZ)
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtilsTest == orig(org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtilsTest)
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == orig(org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils)
countries[] == orig(countries[])
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == null
countries[] == []
countries[].toString == []
===========================================================================
org.apache.commons.lang.LocaleUtilsTest.assertLanguageByCountry(java.lang.String, java.lang.String[]):::ENTER
this has only one value
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == null
country.toString one of { "CH", "GB", "ZZ" }
languages.getClass().getName() == java.lang.String[].class
size(languages[]) one of { 0, 1, 3 }
===========================================================================
org.apache.commons.lang.LocaleUtilsTest.assertLanguageByCountry(java.lang.String, java.lang.String[]):::EXIT
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US_ZZZZ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US_ZZZZ)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR_CA == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR_CA)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ_ZZ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ_ZZ)
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtilsTest == orig(org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtilsTest)
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == orig(org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils)
country.toString == orig(country.toString)
languages[] == orig(languages[])
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == null
country.toString one of { "CH", "GB", "ZZ" }
===========================================================================
org.apache.commons.lang.LocaleUtilsTest.assertLocaleLookupList(java.util.Locale, java.util.Locale, java.util.Locale[]):::ENTER
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == null
expected != null
expected.getClass().getName() == java.util.Locale[].class
expected[] elements != null
===========================================================================
org.apache.commons.lang.LocaleUtilsTest.assertLocaleLookupList(java.util.Locale, java.util.Locale, java.util.Locale[]):::EXIT
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US_ZZZZ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US_ZZZZ)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR_CA == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR_CA)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ_ZZ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ_ZZ)
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtilsTest == orig(org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtilsTest)
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == orig(org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils)
expected[] == orig(expected[])
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == null
expected[] elements != null
===========================================================================
org.apache.commons.lang.LocaleUtilsTest.assertUnmodifiableCollection(java.util.Collection):::ENTER
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtilsTest has only one value
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtilsTest != null
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == null
coll != null
===========================================================================
org.apache.commons.lang.LocaleUtilsTest.assertUnmodifiableCollection(java.util.Collection):::EXIT
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US_ZZZZ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US_ZZZZ)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR_CA == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR_CA)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ_ZZ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ_ZZ)
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtilsTest == orig(org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtilsTest)
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == orig(org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils)
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtilsTest has only one value
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtilsTest != null
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == null
===========================================================================
org.apache.commons.lang.LocaleUtilsTest.assertValidToLocale(java.lang.String):::ENTER
this has only one value
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == null
===========================================================================
org.apache.commons.lang.LocaleUtilsTest.assertValidToLocale(java.lang.String):::EXIT
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US_ZZZZ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US_ZZZZ)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR_CA == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR_CA)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ_ZZ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ_ZZ)
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtilsTest == orig(org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtilsTest)
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == orig(org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils)
language.toString == orig(language.toString)
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == null
===========================================================================
org.apache.commons.lang.LocaleUtilsTest.assertValidToLocale(java.lang.String, java.lang.String, java.lang.String):::ENTER
this has only one value
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == null
localeString.toString one of { "us_EN", "us_ZH" }
language has only one value
language.toString == "us"
country.toString one of { "EN", "ZH" }
===========================================================================
org.apache.commons.lang.LocaleUtilsTest.assertValidToLocale(java.lang.String, java.lang.String, java.lang.String):::EXIT
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US_ZZZZ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US_ZZZZ)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR_CA == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR_CA)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ_ZZ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ_ZZ)
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtilsTest == orig(org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtilsTest)
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == orig(org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils)
localeString.toString == orig(localeString.toString)
language.toString == orig(language.toString)
country.toString == orig(country.toString)
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == null
localeString.toString one of { "us_EN", "us_ZH" }
language.toString == "us"
country.toString one of { "EN", "ZH" }
===========================================================================
org.apache.commons.lang.LocaleUtilsTest.assertValidToLocale(java.lang.String, java.lang.String, java.lang.String, java.lang.String):::ENTER
this has only one value
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == null
localeString.toString one of { "us_EN_A", "us_EN_SFsafdFDsdfF", "us_EN_a" }
language has only one value
language.toString == "us"
country has only one value
country.toString == "EN"
variant.toString one of { "A", "SFsafdFDsdfF", "a" }
===========================================================================
org.apache.commons.lang.LocaleUtilsTest.assertValidToLocale(java.lang.String, java.lang.String, java.lang.String, java.lang.String):::EXIT
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US_ZZZZ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US_ZZZZ)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR_CA == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR_CA)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ_ZZ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ_ZZ)
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtilsTest == orig(org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtilsTest)
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == orig(org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils)
localeString.toString == orig(localeString.toString)
language.toString == orig(language.toString)
country.toString == orig(country.toString)
variant.toString == orig(variant.toString)
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == null
localeString.toString one of { "us_EN_A", "us_EN_SFsafdFDsdfF", "us_EN_a" }
language.toString == "us"
country.toString == "EN"
variant.toString one of { "A", "SFsafdFDsdfF", "a" }
===========================================================================
org.apache.commons.lang.LocaleUtilsTest.class$(java.lang.String):::ENTER
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == null
x0.toString one of { "org.apache.commons.lang.LocaleUtils", "org.apache.commons.lang.LocaleUtilsTest" }
===========================================================================
org.apache.commons.lang.LocaleUtilsTest.class$(java.lang.String):::EXIT
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US_ZZZZ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US_ZZZZ)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR_CA == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR_CA)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ_ZZ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ_ZZ)
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtilsTest == orig(org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtilsTest)
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == orig(org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils)
x0.toString == orig(x0.toString)
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == null
x0.toString one of { "org.apache.commons.lang.LocaleUtils", "org.apache.commons.lang.LocaleUtilsTest" }
===========================================================================
org.apache.commons.lang.LocaleUtilsTest.setUp():::ENTER
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == null
===========================================================================
org.apache.commons.lang.LocaleUtilsTest.setUp():::EXIT
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US_ZZZZ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US_ZZZZ)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR_CA == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR_CA)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ_ZZ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ_ZZ)
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtilsTest == orig(org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtilsTest)
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == orig(org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils)
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == null
===========================================================================
org.apache.commons.lang.LocaleUtilsTest.suite():::ENTER
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == null
===========================================================================
org.apache.commons.lang.LocaleUtilsTest.suite():::EXIT
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US_ZZZZ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US_ZZZZ)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR_CA == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR_CA)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ_ZZ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ_ZZ)
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == orig(org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils)
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtilsTest has only one value
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == null
return.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.apache.commons.lang.LocaleUtilsTest.testAvailableLocaleList():::ENTER
this has only one value
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == null
===========================================================================
org.apache.commons.lang.LocaleUtilsTest.testAvailableLocaleList():::EXIT
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US_ZZZZ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US_ZZZZ)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR_CA == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR_CA)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ_ZZ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ_ZZ)
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtilsTest == orig(org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtilsTest)
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == orig(org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils)
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == null
===========================================================================
org.apache.commons.lang.LocaleUtilsTest.testAvailableLocaleSet():::ENTER
this has only one value
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == null
===========================================================================
org.apache.commons.lang.LocaleUtilsTest.testAvailableLocaleSet():::EXIT
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US_ZZZZ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US_ZZZZ)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR_CA == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR_CA)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ_ZZ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ_ZZ)
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtilsTest == orig(org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtilsTest)
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == orig(org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils)
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == null
===========================================================================
org.apache.commons.lang.LocaleUtilsTest.testConstructor():::ENTER
this has only one value
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == null
===========================================================================
org.apache.commons.lang.LocaleUtilsTest.testConstructor():::EXIT
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US_ZZZZ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US_ZZZZ)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR_CA == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR_CA)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ_ZZ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ_ZZ)
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtilsTest == orig(org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtilsTest)
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils has only one value
===========================================================================
org.apache.commons.lang.LocaleUtilsTest.testIsAvailableLocale():::ENTER
this has only one value
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == null
===========================================================================
org.apache.commons.lang.LocaleUtilsTest.testIsAvailableLocale():::EXIT
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US_ZZZZ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US_ZZZZ)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR_CA == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR_CA)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ_ZZ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ_ZZ)
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtilsTest == orig(org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtilsTest)
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == orig(org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils)
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == null
===========================================================================
org.apache.commons.lang.LocaleUtilsTest.testLanguagesByCountry():::ENTER
this has only one value
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == null
===========================================================================
org.apache.commons.lang.LocaleUtilsTest.testLanguagesByCountry():::EXIT
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US_ZZZZ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US_ZZZZ)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR_CA == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR_CA)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ_ZZ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ_ZZ)
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtilsTest == orig(org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtilsTest)
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == orig(org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils)
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == null
===========================================================================
org.apache.commons.lang.LocaleUtilsTest.testLocaleLookupList_Locale():::ENTER
this has only one value
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == null
===========================================================================
org.apache.commons.lang.LocaleUtilsTest.testLocaleLookupList_Locale():::EXIT
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US_ZZZZ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US_ZZZZ)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR_CA == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR_CA)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ_ZZ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ_ZZ)
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtilsTest == orig(org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtilsTest)
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == orig(org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils)
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == null
===========================================================================
org.apache.commons.lang.LocaleUtilsTest.testLocaleLookupList_LocaleLocale():::ENTER
this has only one value
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == null
===========================================================================
org.apache.commons.lang.LocaleUtilsTest.testLocaleLookupList_LocaleLocale():::EXIT
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US_ZZZZ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US_ZZZZ)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR_CA == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR_CA)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ_ZZ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ_ZZ)
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtilsTest == orig(org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtilsTest)
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == orig(org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils)
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == null
===========================================================================
org.apache.commons.lang.LocaleUtilsTest.testToLocale_1Part():::ENTER
this has only one value
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == null
===========================================================================
org.apache.commons.lang.LocaleUtilsTest.testToLocale_1Part():::EXIT
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US_ZZZZ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US_ZZZZ)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR_CA == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR_CA)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ_ZZ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ_ZZ)
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtilsTest == orig(org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtilsTest)
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == orig(org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils)
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == null
===========================================================================
org.apache.commons.lang.LocaleUtilsTest.testToLocale_2Part():::ENTER
this has only one value
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == null
===========================================================================
org.apache.commons.lang.LocaleUtilsTest.testToLocale_2Part():::EXIT
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US_ZZZZ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US_ZZZZ)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR_CA == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR_CA)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ_ZZ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ_ZZ)
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtilsTest == orig(org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtilsTest)
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == orig(org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils)
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == null
===========================================================================
org.apache.commons.lang.LocaleUtilsTest.testToLocale_3Part():::ENTER
this has only one value
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == null
===========================================================================
org.apache.commons.lang.LocaleUtilsTest.testToLocale_3Part():::EXIT
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US_ZZZZ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_EN_US_ZZZZ)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR_CA == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_FR_CA)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ)
org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ_ZZ == orig(org.apache.commons.lang.LocaleUtilsTest.LOCALE_QQ_ZZ)
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtilsTest == orig(org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtilsTest)
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == orig(org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils)
org.apache.commons.lang.LocaleUtilsTest.class$org$apache$commons$lang$LocaleUtils == null
===========================================================================
org.apache.commons.lang.SystemUtils:::CLASS
org.apache.commons.lang.SystemUtils.JAVA_VERSION == org.apache.commons.lang.SystemUtils.JAVA_VERSION_TRIMMED
org.apache.commons.lang.SystemUtils.OS_NAME_WINDOWS_PREFIX has only one value
org.apache.commons.lang.SystemUtils.OS_NAME_WINDOWS_PREFIX.toString == "Windows"
org.apache.commons.lang.SystemUtils.USER_HOME_KEY has only one value
org.apache.commons.lang.SystemUtils.USER_HOME_KEY.toString == "user.home"
org.apache.commons.lang.SystemUtils.USER_DIR_KEY has only one value
org.apache.commons.lang.SystemUtils.USER_DIR_KEY.toString == "user.dir"
org.apache.commons.lang.SystemUtils.JAVA_IO_TMPDIR_KEY has only one value
org.apache.commons.lang.SystemUtils.JAVA_IO_TMPDIR_KEY.toString == "java.io.tmpdir"
org.apache.commons.lang.SystemUtils.JAVA_HOME_KEY has only one value
org.apache.commons.lang.SystemUtils.JAVA_HOME_KEY.toString == "java.home"
org.apache.commons.lang.SystemUtils.AWT_TOOLKIT has only one value
org.apache.commons.lang.SystemUtils.AWT_TOOLKIT.toString == "sun.awt.X11.XToolkit"
org.apache.commons.lang.SystemUtils.FILE_ENCODING has only one value
org.apache.commons.lang.SystemUtils.FILE_ENCODING.toString == "UTF-8"
org.apache.commons.lang.SystemUtils.FILE_SEPARATOR has only one value
org.apache.commons.lang.SystemUtils.FILE_SEPARATOR.toString == "/"
org.apache.commons.lang.SystemUtils.JAVA_AWT_FONTS == null
org.apache.commons.lang.SystemUtils.JAVA_AWT_GRAPHICSENV has only one value
org.apache.commons.lang.SystemUtils.JAVA_AWT_GRAPHICSENV.toString == "sun.awt.X11GraphicsEnvironment"
org.apache.commons.lang.SystemUtils.JAVA_AWT_HEADLESS == null
org.apache.commons.lang.SystemUtils.JAVA_AWT_PRINTERJOB has only one value
org.apache.commons.lang.SystemUtils.JAVA_AWT_PRINTERJOB.toString == "sun.print.PSPrinterJob"
org.apache.commons.lang.SystemUtils.JAVA_CLASS_PATH has only one value
org.apache.commons.lang.SystemUtils.JAVA_CLASS_PATH.toString == "/home/users/byang/daikon-5.7.2/daikon.jar:/home/users/byang/defects4j/framework/projects/lib/junit-4.11.jar:/home/users/byang/launcher/:target/classes:target/tests:target/test-classes:/home/users/byang/daikon-5.7.2/java/ChicoryPremain.jar"
org.apache.commons.lang.SystemUtils.JAVA_CLASS_VERSION has only one value
org.apache.commons.lang.SystemUtils.JAVA_CLASS_VERSION.toString == "52.0"
org.apache.commons.lang.SystemUtils.JAVA_COMPILER == null
org.apache.commons.lang.SystemUtils.JAVA_ENDORSED_DIRS has only one value
org.apache.commons.lang.SystemUtils.JAVA_ENDORSED_DIRS.toString == "/usr/lib/jvm/java-8-oracle/jre/lib/endorsed"
org.apache.commons.lang.SystemUtils.JAVA_EXT_DIRS has only one value
org.apache.commons.lang.SystemUtils.JAVA_EXT_DIRS.toString == "/usr/lib/jvm/java-8-oracle/jre/lib/ext:/usr/java/packages/lib/ext"
org.apache.commons.lang.SystemUtils.JAVA_HOME has only one value
org.apache.commons.lang.SystemUtils.JAVA_HOME.toString == "/usr/lib/jvm/java-8-oracle/jre"
org.apache.commons.lang.SystemUtils.JAVA_IO_TMPDIR has only one value
org.apache.commons.lang.SystemUtils.JAVA_IO_TMPDIR.toString == "/tmp"
org.apache.commons.lang.SystemUtils.JAVA_LIBRARY_PATH has only one value
org.apache.commons.lang.SystemUtils.JAVA_LIBRARY_PATH.toString == "/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib"
org.apache.commons.lang.SystemUtils.JAVA_RUNTIME_NAME has only one value
org.apache.commons.lang.SystemUtils.JAVA_RUNTIME_NAME.toString == "Java(TM) SE Runtime Environment"
org.apache.commons.lang.SystemUtils.JAVA_RUNTIME_VERSION has only one value
org.apache.commons.lang.SystemUtils.JAVA_RUNTIME_VERSION.toString == "1.8.0_201-b09"
org.apache.commons.lang.SystemUtils.JAVA_SPECIFICATION_NAME has only one value
org.apache.commons.lang.SystemUtils.JAVA_SPECIFICATION_NAME.toString == "Java Platform API Specification"
org.apache.commons.lang.SystemUtils.JAVA_SPECIFICATION_VENDOR has only one value
org.apache.commons.lang.SystemUtils.JAVA_SPECIFICATION_VENDOR.toString == "Oracle Corporation"
org.apache.commons.lang.SystemUtils.JAVA_SPECIFICATION_VERSION has only one value
org.apache.commons.lang.SystemUtils.JAVA_SPECIFICATION_VERSION.toString == "1.8"
org.apache.commons.lang.SystemUtils.JAVA_UTIL_PREFS_PREFERENCES_FACTORY == null
org.apache.commons.lang.SystemUtils.JAVA_VENDOR has only one value
org.apache.commons.lang.SystemUtils.JAVA_VENDOR.toString == "Oracle Corporation"
org.apache.commons.lang.SystemUtils.JAVA_VENDOR_URL has only one value
org.apache.commons.lang.SystemUtils.JAVA_VENDOR_URL.toString == "http://java.oracle.com/"
org.apache.commons.lang.SystemUtils.JAVA_VERSION has only one value
org.apache.commons.lang.SystemUtils.JAVA_VERSION.toString == "1.8.0_201"
org.apache.commons.lang.SystemUtils.JAVA_VM_INFO has only one value
org.apache.commons.lang.SystemUtils.JAVA_VM_INFO.toString == "mixed mode"
org.apache.commons.lang.SystemUtils.JAVA_VM_NAME has only one value
org.apache.commons.lang.SystemUtils.JAVA_VM_NAME.toString == "Java HotSpot(TM) 64-Bit Server VM"
org.apache.commons.lang.SystemUtils.JAVA_VM_SPECIFICATION_NAME has only one value
org.apache.commons.lang.SystemUtils.JAVA_VM_SPECIFICATION_NAME.toString == "Java Virtual Machine Specification"
org.apache.commons.lang.SystemUtils.JAVA_VM_SPECIFICATION_VENDOR has only one value
org.apache.commons.lang.SystemUtils.JAVA_VM_SPECIFICATION_VENDOR.toString == "Oracle Corporation"
org.apache.commons.lang.SystemUtils.JAVA_VM_SPECIFICATION_VERSION has only one value
org.apache.commons.lang.SystemUtils.JAVA_VM_SPECIFICATION_VERSION.toString == "1.8"
org.apache.commons.lang.SystemUtils.JAVA_VM_VENDOR has only one value
org.apache.commons.lang.SystemUtils.JAVA_VM_VENDOR.toString == "Oracle Corporation"
org.apache.commons.lang.SystemUtils.JAVA_VM_VERSION has only one value
org.apache.commons.lang.SystemUtils.JAVA_VM_VERSION.toString == "25.201-b09"
org.apache.commons.lang.SystemUtils.LINE_SEPARATOR has only one value
org.apache.commons.lang.SystemUtils.LINE_SEPARATOR.toString == "\n"
org.apache.commons.lang.SystemUtils.OS_ARCH has only one value
org.apache.commons.lang.SystemUtils.OS_ARCH.toString == "amd64"
org.apache.commons.lang.SystemUtils.OS_NAME has only one value
org.apache.commons.lang.SystemUtils.OS_NAME.toString == "Linux"
org.apache.commons.lang.SystemUtils.OS_VERSION has only one value
org.apache.commons.lang.SystemUtils.OS_VERSION.toString == "4.15.0-45-generic"
org.apache.commons.lang.SystemUtils.PATH_SEPARATOR has only one value
org.apache.commons.lang.SystemUtils.PATH_SEPARATOR.toString == ":"
org.apache.commons.lang.SystemUtils.USER_COUNTRY has only one value
org.apache.commons.lang.SystemUtils.USER_COUNTRY.toString == "US"
org.apache.commons.lang.SystemUtils.USER_DIR has only one value
org.apache.commons.lang.SystemUtils.USER_DIR.toString == "/home/users/byang/Lang/57/PatchHDRepair1"
org.apache.commons.lang.SystemUtils.USER_HOME has only one value
org.apache.commons.lang.SystemUtils.USER_HOME.toString == "/home/users/byang"
org.apache.commons.lang.SystemUtils.USER_LANGUAGE has only one value
org.apache.commons.lang.SystemUtils.USER_LANGUAGE.toString == "en"
org.apache.commons.lang.SystemUtils.USER_NAME has only one value
org.apache.commons.lang.SystemUtils.USER_NAME.toString == "byang"
org.apache.commons.lang.SystemUtils.USER_TIMEZONE has only one value
org.apache.commons.lang.SystemUtils.USER_TIMEZONE.toString == "America/Los_Angeles"
org.apache.commons.lang.SystemUtils.JAVA_VERSION_TRIMMED.toString == "1.8.0_201"
org.apache.commons.lang.SystemUtils.JAVA_VERSION_FLOAT == 1.8
org.apache.commons.lang.SystemUtils.JAVA_VERSION_INT == 180
org.apache.commons.lang.SystemUtils.IS_JAVA_1_1 == false
org.apache.commons.lang.SystemUtils.IS_JAVA_1_2 == false
org.apache.commons.lang.SystemUtils.IS_JAVA_1_3 == false
org.apache.commons.lang.SystemUtils.IS_JAVA_1_4 == false
org.apache.commons.lang.SystemUtils.IS_JAVA_1_5 == false
org.apache.commons.lang.SystemUtils.IS_JAVA_1_6 == false
org.apache.commons.lang.SystemUtils.IS_OS_AIX == false
org.apache.commons.lang.SystemUtils.IS_OS_HP_UX == false
org.apache.commons.lang.SystemUtils.IS_OS_IRIX == false
org.apache.commons.lang.SystemUtils.IS_OS_LINUX == true
org.apache.commons.lang.SystemUtils.IS_OS_MAC == false
org.apache.commons.lang.SystemUtils.IS_OS_MAC_OSX == false
org.apache.commons.lang.SystemUtils.IS_OS_OS2 == false
org.apache.commons.lang.SystemUtils.IS_OS_SOLARIS == false
org.apache.commons.lang.SystemUtils.IS_OS_SUN_OS == false
org.apache.commons.lang.SystemUtils.IS_OS_UNIX == true
org.apache.commons.lang.SystemUtils.IS_OS_WINDOWS == false
org.apache.commons.lang.SystemUtils.IS_OS_WINDOWS_2000 == false
org.apache.commons.lang.SystemUtils.IS_OS_WINDOWS_95 == false
org.apache.commons.lang.SystemUtils.IS_OS_WINDOWS_98 == false
org.apache.commons.lang.SystemUtils.IS_OS_WINDOWS_ME == false
org.apache.commons.lang.SystemUtils.IS_OS_WINDOWS_NT == false
org.apache.commons.lang.SystemUtils.IS_OS_WINDOWS_XP == false
===========================================================================
org.apache.commons.lang.SystemUtils.getJavaVersionAsFloat():::EXIT1127
===========================================================================
org.apache.commons.lang.SystemUtils.getJavaVersionAsFloat():::EXIT
return == 1.8
===========================================================================
org.apache.commons.lang.SystemUtils.getJavaVersionAsInt():::EXIT1159
===========================================================================
org.apache.commons.lang.SystemUtils.getJavaVersionAsInt():::EXIT
return == 180
===========================================================================
org.apache.commons.lang.SystemUtils.getJavaVersionMatches(java.lang.String):::ENTER
===========================================================================
org.apache.commons.lang.SystemUtils.getJavaVersionMatches(java.lang.String):::EXIT1192
===========================================================================
org.apache.commons.lang.SystemUtils.getJavaVersionMatches(java.lang.String):::EXIT1192;condition="not(return == true)"
===========================================================================
org.apache.commons.lang.SystemUtils.getJavaVersionMatches(java.lang.String):::EXIT
versionPrefix.toString == orig(versionPrefix.toString)
return == false
===========================================================================
org.apache.commons.lang.SystemUtils.getJavaVersionMatches(java.lang.String):::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.lang.SystemUtils.getJavaVersionTrimmed():::EXIT1175
===========================================================================
org.apache.commons.lang.SystemUtils.getJavaVersionTrimmed():::EXIT
return has only one value
return.toString == "1.8.0_201"
===========================================================================
org.apache.commons.lang.SystemUtils.getOSMatches(java.lang.String):::ENTER
===========================================================================
org.apache.commons.lang.SystemUtils.getOSMatches(java.lang.String):::EXIT1205
(return == true)  ==>  (orig(osNamePrefix) has only one value)
(return == true)  ==>  (osNamePrefix.toString == "Linux")
===========================================================================
org.apache.commons.lang.SystemUtils.getOSMatches(java.lang.String):::EXIT1205;condition="return == true"
===========================================================================
org.apache.commons.lang.SystemUtils.getOSMatches(java.lang.String):::EXIT1205;condition="not(return == true)"
===========================================================================
org.apache.commons.lang.SystemUtils.getOSMatches(java.lang.String):::EXIT
osNamePrefix.toString == orig(osNamePrefix.toString)
(return == true)  ==>  (orig(osNamePrefix) has only one value)
(return == true)  ==>  (osNamePrefix.toString == "Linux")
===========================================================================
org.apache.commons.lang.SystemUtils.getOSMatches(java.lang.String):::EXIT;condition="return == true"
osNamePrefix.toString == "Linux"
return == true
orig(osNamePrefix) has only one value
===========================================================================
org.apache.commons.lang.SystemUtils.getOSMatches(java.lang.String):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang.SystemUtils.getOSMatches(java.lang.String, java.lang.String):::ENTER
osNamePrefix.toString one of { "Windows", "Windows 9" }
===========================================================================
org.apache.commons.lang.SystemUtils.getOSMatches(java.lang.String, java.lang.String):::EXIT1219
===========================================================================
org.apache.commons.lang.SystemUtils.getOSMatches(java.lang.String, java.lang.String):::EXIT1219;condition="not(return == true)"
===========================================================================
org.apache.commons.lang.SystemUtils.getOSMatches(java.lang.String, java.lang.String):::EXIT
osNamePrefix.toString == orig(osNamePrefix.toString)
osVersionPrefix.toString == orig(osVersionPrefix.toString)
osNamePrefix.toString one of { "Windows", "Windows 9" }
return == false
===========================================================================
org.apache.commons.lang.SystemUtils.getOSMatches(java.lang.String, java.lang.String):::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.lang.SystemUtils.getSystemProperty(java.lang.String):::ENTER
property != null
===========================================================================
org.apache.commons.lang.SystemUtils.getSystemProperty(java.lang.String):::EXIT1235
===========================================================================
org.apache.commons.lang.SystemUtils.getSystemProperty(java.lang.String):::EXIT
property.toString == orig(property.toString)
===========================================================================
org.apache.commons.lang.SystemUtils.isJavaVersionAtLeast(float):::ENTER
requiredVersion == 1.4
===========================================================================
org.apache.commons.lang.SystemUtils.isJavaVersionAtLeast(float):::EXIT
org.apache.commons.lang.SystemUtils.OS_NAME_WINDOWS_PREFIX == orig(org.apache.commons.lang.SystemUtils.OS_NAME_WINDOWS_PREFIX)
org.apache.commons.lang.SystemUtils.OS_NAME_WINDOWS_PREFIX.toString == orig(org.apache.commons.lang.SystemUtils.OS_NAME_WINDOWS_PREFIX.toString)
org.apache.commons.lang.SystemUtils.USER_HOME_KEY == orig(org.apache.commons.lang.SystemUtils.USER_HOME_KEY)
org.apache.commons.lang.SystemUtils.USER_HOME_KEY.toString == orig(org.apache.commons.lang.SystemUtils.USER_HOME_KEY.toString)
org.apache.commons.lang.SystemUtils.USER_DIR_KEY == orig(org.apache.commons.lang.SystemUtils.USER_DIR_KEY)
org.apache.commons.lang.SystemUtils.USER_DIR_KEY.toString == orig(org.apache.commons.lang.SystemUtils.USER_DIR_KEY.toString)
org.apache.commons.lang.SystemUtils.JAVA_IO_TMPDIR_KEY == orig(org.apache.commons.lang.SystemUtils.JAVA_IO_TMPDIR_KEY)
org.apache.commons.lang.SystemUtils.JAVA_IO_TMPDIR_KEY.toString == orig(org.apache.commons.lang.SystemUtils.JAVA_IO_TMPDIR_KEY.toString)
org.apache.commons.lang.SystemUtils.JAVA_HOME_KEY == orig(org.apache.commons.lang.SystemUtils.JAVA_HOME_KEY)
org.apache.commons.lang.SystemUtils.JAVA_HOME_KEY.toString == orig(org.apache.commons.lang.SystemUtils.JAVA_HOME_KEY.toString)
org.apache.commons.lang.SystemUtils.AWT_TOOLKIT == orig(org.apache.commons.lang.SystemUtils.AWT_TOOLKIT)
org.apache.commons.lang.SystemUtils.AWT_TOOLKIT.toString == orig(org.apache.commons.lang.SystemUtils.AWT_TOOLKIT.toString)
org.apache.commons.lang.SystemUtils.FILE_ENCODING == orig(org.apache.commons.lang.SystemUtils.FILE_ENCODING)
org.apache.commons.lang.SystemUtils.FILE_ENCODING.toString == orig(org.apache.commons.lang.SystemUtils.FILE_ENCODING.toString)
org.apache.commons.lang.SystemUtils.FILE_SEPARATOR == orig(org.apache.commons.lang.SystemUtils.FILE_SEPARATOR)
org.apache.commons.lang.SystemUtils.FILE_SEPARATOR.toString == orig(org.apache.commons.lang.SystemUtils.FILE_SEPARATOR.toString)
org.apache.commons.lang.SystemUtils.JAVA_AWT_FONTS == orig(org.apache.commons.lang.SystemUtils.JAVA_AWT_FONTS)
org.apache.commons.lang.SystemUtils.JAVA_AWT_GRAPHICSENV == orig(org.apache.commons.lang.SystemUtils.JAVA_AWT_GRAPHICSENV)
org.apache.commons.lang.SystemUtils.JAVA_AWT_GRAPHICSENV.toString == orig(org.apache.commons.lang.SystemUtils.JAVA_AWT_GRAPHICSENV.toString)
org.apache.commons.lang.SystemUtils.JAVA_AWT_HEADLESS == orig(org.apache.commons.lang.SystemUtils.JAVA_AWT_HEADLESS)
org.apache.commons.lang.SystemUtils.JAVA_AWT_PRINTERJOB == orig(org.apache.commons.lang.SystemUtils.JAVA_AWT_PRINTERJOB)
org.apache.commons.lang.SystemUtils.JAVA_AWT_PRINTERJOB.toString == orig(org.apache.commons.lang.SystemUtils.JAVA_AWT_PRINTERJOB.toString)
org.apache.commons.lang.SystemUtils.JAVA_CLASS_PATH == orig(org.apache.commons.lang.SystemUtils.JAVA_CLASS_PATH)
org.apache.commons.lang.SystemUtils.JAVA_CLASS_PATH.toString == orig(org.apache.commons.lang.SystemUtils.JAVA_CLASS_PATH.toString)
org.apache.commons.lang.SystemUtils.JAVA_CLASS_VERSION == orig(org.apache.commons.lang.SystemUtils.JAVA_CLASS_VERSION)
org.apache.commons.lang.SystemUtils.JAVA_CLASS_VERSION.toString == orig(org.apache.commons.lang.SystemUtils.JAVA_CLASS_VERSION.toString)
org.apache.commons.lang.SystemUtils.JAVA_COMPILER == orig(org.apache.commons.lang.SystemUtils.JAVA_COMPILER)
org.apache.commons.lang.SystemUtils.JAVA_ENDORSED_DIRS == orig(org.apache.commons.lang.SystemUtils.JAVA_ENDORSED_DIRS)
org.apache.commons.lang.SystemUtils.JAVA_ENDORSED_DIRS.toString == orig(org.apache.commons.lang.SystemUtils.JAVA_ENDORSED_DIRS.toString)
org.apache.commons.lang.SystemUtils.JAVA_EXT_DIRS == orig(org.apache.commons.lang.SystemUtils.JAVA_EXT_DIRS)
org.apache.commons.lang.SystemUtils.JAVA_EXT_DIRS.toString == orig(org.apache.commons.lang.SystemUtils.JAVA_EXT_DIRS.toString)
org.apache.commons.lang.SystemUtils.JAVA_HOME == orig(org.apache.commons.lang.SystemUtils.JAVA_HOME)
org.apache.commons.lang.SystemUtils.JAVA_HOME.toString == orig(org.apache.commons.lang.SystemUtils.JAVA_HOME.toString)
org.apache.commons.lang.SystemUtils.JAVA_IO_TMPDIR == orig(org.apache.commons.lang.SystemUtils.JAVA_IO_TMPDIR)
org.apache.commons.lang.SystemUtils.JAVA_IO_TMPDIR.toString == orig(org.apache.commons.lang.SystemUtils.JAVA_IO_TMPDIR.toString)
org.apache.commons.lang.SystemUtils.JAVA_LIBRARY_PATH == orig(org.apache.commons.lang.SystemUtils.JAVA_LIBRARY_PATH)
org.apache.commons.lang.SystemUtils.JAVA_LIBRARY_PATH.toString == orig(org.apache.commons.lang.SystemUtils.JAVA_LIBRARY_PATH.toString)
org.apache.commons.lang.SystemUtils.JAVA_RUNTIME_NAME == orig(org.apache.commons.lang.SystemUtils.JAVA_RUNTIME_NAME)
org.apache.commons.lang.SystemUtils.JAVA_RUNTIME_NAME.toString == orig(org.apache.commons.lang.SystemUtils.JAVA_RUNTIME_NAME.toString)
org.apache.commons.lang.SystemUtils.JAVA_RUNTIME_VERSION == orig(org.apache.commons.lang.SystemUtils.JAVA_RUNTIME_VERSION)
org.apache.commons.lang.SystemUtils.JAVA_RUNTIME_VERSION.toString == orig(org.apache.commons.lang.SystemUtils.JAVA_RUNTIME_VERSION.toString)
org.apache.commons.lang.SystemUtils.JAVA_SPECIFICATION_NAME == orig(org.apache.commons.lang.SystemUtils.JAVA_SPECIFICATION_NAME)
org.apache.commons.lang.SystemUtils.JAVA_SPECIFICATION_NAME.toString == orig(org.apache.commons.lang.SystemUtils.JAVA_SPECIFICATION_NAME.toString)
org.apache.commons.lang.SystemUtils.JAVA_SPECIFICATION_VENDOR == orig(org.apache.commons.lang.SystemUtils.JAVA_SPECIFICATION_VENDOR)
org.apache.commons.lang.SystemUtils.JAVA_SPECIFICATION_VENDOR.toString == orig(org.apache.commons.lang.SystemUtils.JAVA_SPECIFICATION_VENDOR.toString)
org.apache.commons.lang.SystemUtils.JAVA_SPECIFICATION_VERSION == orig(org.apache.commons.lang.SystemUtils.JAVA_SPECIFICATION_VERSION)
org.apache.commons.lang.SystemUtils.JAVA_SPECIFICATION_VERSION.toString == orig(org.apache.commons.lang.SystemUtils.JAVA_SPECIFICATION_VERSION.toString)
org.apache.commons.lang.SystemUtils.JAVA_UTIL_PREFS_PREFERENCES_FACTORY == orig(org.apache.commons.lang.SystemUtils.JAVA_UTIL_PREFS_PREFERENCES_FACTORY)
org.apache.commons.lang.SystemUtils.JAVA_VENDOR == orig(org.apache.commons.lang.SystemUtils.JAVA_VENDOR)
org.apache.commons.lang.SystemUtils.JAVA_VENDOR.toString == orig(org.apache.commons.lang.SystemUtils.JAVA_VENDOR.toString)
org.apache.commons.lang.SystemUtils.JAVA_VENDOR_URL == orig(org.apache.commons.lang.SystemUtils.JAVA_VENDOR_URL)
org.apache.commons.lang.SystemUtils.JAVA_VENDOR_URL.toString == orig(org.apache.commons.lang.SystemUtils.JAVA_VENDOR_URL.toString)
org.apache.commons.lang.SystemUtils.JAVA_VERSION == orig(org.apache.commons.lang.SystemUtils.JAVA_VERSION)
org.apache.commons.lang.SystemUtils.JAVA_VERSION == orig(org.apache.commons.lang.SystemUtils.JAVA_VERSION_TRIMMED)
org.apache.commons.lang.SystemUtils.JAVA_VERSION.toString == orig(org.apache.commons.lang.SystemUtils.JAVA_VERSION.toString)
org.apache.commons.lang.SystemUtils.JAVA_VM_INFO == orig(org.apache.commons.lang.SystemUtils.JAVA_VM_INFO)
org.apache.commons.lang.SystemUtils.JAVA_VM_INFO.toString == orig(org.apache.commons.lang.SystemUtils.JAVA_VM_INFO.toString)
org.apache.commons.lang.SystemUtils.JAVA_VM_NAME == orig(org.apache.commons.lang.SystemUtils.JAVA_VM_NAME)
org.apache.commons.lang.SystemUtils.JAVA_VM_NAME.toString == orig(org.apache.commons.lang.SystemUtils.JAVA_VM_NAME.toString)
org.apache.commons.lang.SystemUtils.JAVA_VM_SPECIFICATION_NAME == orig(org.apache.commons.lang.SystemUtils.JAVA_VM_SPECIFICATION_NAME)
org.apache.commons.lang.SystemUtils.JAVA_VM_SPECIFICATION_NAME.toString == orig(org.apache.commons.lang.SystemUtils.JAVA_VM_SPECIFICATION_NAME.toString)
org.apache.commons.lang.SystemUtils.JAVA_VM_SPECIFICATION_VENDOR == orig(org.apache.commons.lang.SystemUtils.JAVA_VM_SPECIFICATION_VENDOR)
org.apache.commons.lang.SystemUtils.JAVA_VM_SPECIFICATION_VENDOR.toString == orig(org.apache.commons.lang.SystemUtils.JAVA_VM_SPECIFICATION_VENDOR.toString)
org.apache.commons.lang.SystemUtils.JAVA_VM_SPECIFICATION_VERSION == orig(org.apache.commons.lang.SystemUtils.JAVA_VM_SPECIFICATION_VERSION)
org.apache.commons.lang.SystemUtils.JAVA_VM_SPECIFICATION_VERSION.toString == orig(org.apache.commons.lang.SystemUtils.JAVA_VM_SPECIFICATION_VERSION.toString)
org.apache.commons.lang.SystemUtils.JAVA_VM_VENDOR == orig(org.apache.commons.lang.SystemUtils.JAVA_VM_VENDOR)
org.apache.commons.lang.SystemUtils.JAVA_VM_VENDOR.toString == orig(org.apache.commons.lang.SystemUtils.JAVA_VM_VENDOR.toString)
org.apache.commons.lang.SystemUtils.JAVA_VM_VERSION == orig(org.apache.commons.lang.SystemUtils.JAVA_VM_VERSION)
org.apache.commons.lang.SystemUtils.JAVA_VM_VERSION.toString == orig(org.apache.commons.lang.SystemUtils.JAVA_VM_VERSION.toString)
org.apache.commons.lang.SystemUtils.LINE_SEPARATOR == orig(org.apache.commons.lang.SystemUtils.LINE_SEPARATOR)
org.apache.commons.lang.SystemUtils.LINE_SEPARATOR.toString == orig(org.apache.commons.lang.SystemUtils.LINE_SEPARATOR.toString)
org.apache.commons.lang.SystemUtils.OS_ARCH == orig(org.apache.commons.lang.SystemUtils.OS_ARCH)
org.apache.commons.lang.SystemUtils.OS_ARCH.toString == orig(org.apache.commons.lang.SystemUtils.OS_ARCH.toString)
org.apache.commons.lang.SystemUtils.OS_NAME == orig(org.apache.commons.lang.SystemUtils.OS_NAME)
org.apache.commons.lang.SystemUtils.OS_NAME.toString == orig(org.apache.commons.lang.SystemUtils.OS_NAME.toString)
org.apache.commons.lang.SystemUtils.OS_VERSION == orig(org.apache.commons.lang.SystemUtils.OS_VERSION)
org.apache.commons.lang.SystemUtils.OS_VERSION.toString == orig(org.apache.commons.lang.SystemUtils.OS_VERSION.toString)
org.apache.commons.lang.SystemUtils.PATH_SEPARATOR == orig(org.apache.commons.lang.SystemUtils.PATH_SEPARATOR)
org.apache.commons.lang.SystemUtils.PATH_SEPARATOR.toString == orig(org.apache.commons.lang.SystemUtils.PATH_SEPARATOR.toString)
org.apache.commons.lang.SystemUtils.USER_COUNTRY == orig(org.apache.commons.lang.SystemUtils.USER_COUNTRY)
org.apache.commons.lang.SystemUtils.USER_COUNTRY.toString == orig(org.apache.commons.lang.SystemUtils.USER_COUNTRY.toString)
org.apache.commons.lang.SystemUtils.USER_DIR == orig(org.apache.commons.lang.SystemUtils.USER_DIR)
org.apache.commons.lang.SystemUtils.USER_DIR.toString == orig(org.apache.commons.lang.SystemUtils.USER_DIR.toString)
org.apache.commons.lang.SystemUtils.USER_HOME == orig(org.apache.commons.lang.SystemUtils.USER_HOME)
org.apache.commons.lang.SystemUtils.USER_HOME.toString == orig(org.apache.commons.lang.SystemUtils.USER_HOME.toString)
org.apache.commons.lang.SystemUtils.USER_LANGUAGE == orig(org.apache.commons.lang.SystemUtils.USER_LANGUAGE)
org.apache.commons.lang.SystemUtils.USER_LANGUAGE.toString == orig(org.apache.commons.lang.SystemUtils.USER_LANGUAGE.toString)
org.apache.commons.lang.SystemUtils.USER_NAME == orig(org.apache.commons.lang.SystemUtils.USER_NAME)
org.apache.commons.lang.SystemUtils.USER_NAME.toString == orig(org.apache.commons.lang.SystemUtils.USER_NAME.toString)
org.apache.commons.lang.SystemUtils.USER_TIMEZONE == orig(org.apache.commons.lang.SystemUtils.USER_TIMEZONE)
org.apache.commons.lang.SystemUtils.USER_TIMEZONE.toString == orig(org.apache.commons.lang.SystemUtils.USER_TIMEZONE.toString)
org.apache.commons.lang.SystemUtils.JAVA_VERSION_TRIMMED.toString == orig(org.apache.commons.lang.SystemUtils.JAVA_VERSION_TRIMMED.toString)
org.apache.commons.lang.SystemUtils.JAVA_VERSION_FLOAT == orig(org.apache.commons.lang.SystemUtils.JAVA_VERSION_FLOAT)
org.apache.commons.lang.SystemUtils.JAVA_VERSION_INT == orig(org.apache.commons.lang.SystemUtils.JAVA_VERSION_INT)
org.apache.commons.lang.SystemUtils.IS_JAVA_1_1 == orig(org.apache.commons.lang.SystemUtils.IS_JAVA_1_1)
org.apache.commons.lang.SystemUtils.IS_JAVA_1_2 == orig(org.apache.commons.lang.SystemUtils.IS_JAVA_1_2)
org.apache.commons.lang.SystemUtils.IS_JAVA_1_3 == orig(org.apache.commons.lang.SystemUtils.IS_JAVA_1_3)
org.apache.commons.lang.SystemUtils.IS_JAVA_1_4 == orig(org.apache.commons.lang.SystemUtils.IS_JAVA_1_4)
org.apache.commons.lang.SystemUtils.IS_JAVA_1_5 == orig(org.apache.commons.lang.SystemUtils.IS_JAVA_1_5)
org.apache.commons.lang.SystemUtils.IS_JAVA_1_6 == orig(org.apache.commons.lang.SystemUtils.IS_JAVA_1_6)
org.apache.commons.lang.SystemUtils.IS_OS_AIX == orig(org.apache.commons.lang.SystemUtils.IS_OS_AIX)
org.apache.commons.lang.SystemUtils.IS_OS_HP_UX == orig(org.apache.commons.lang.SystemUtils.IS_OS_HP_UX)
org.apache.commons.lang.SystemUtils.IS_OS_IRIX == orig(org.apache.commons.lang.SystemUtils.IS_OS_IRIX)
org.apache.commons.lang.SystemUtils.IS_OS_LINUX == orig(org.apache.commons.lang.SystemUtils.IS_OS_LINUX)
org.apache.commons.lang.SystemUtils.IS_OS_MAC == orig(org.apache.commons.lang.SystemUtils.IS_OS_MAC)
org.apache.commons.lang.SystemUtils.IS_OS_MAC_OSX == orig(org.apache.commons.lang.SystemUtils.IS_OS_MAC_OSX)
org.apache.commons.lang.SystemUtils.IS_OS_OS2 == orig(org.apache.commons.lang.SystemUtils.IS_OS_OS2)
org.apache.commons.lang.SystemUtils.IS_OS_SOLARIS == orig(org.apache.commons.lang.SystemUtils.IS_OS_SOLARIS)
org.apache.commons.lang.SystemUtils.IS_OS_SUN_OS == orig(org.apache.commons.lang.SystemUtils.IS_OS_SUN_OS)
org.apache.commons.lang.SystemUtils.IS_OS_UNIX == orig(org.apache.commons.lang.SystemUtils.IS_OS_UNIX)
org.apache.commons.lang.SystemUtils.IS_OS_WINDOWS == orig(org.apache.commons.lang.SystemUtils.IS_OS_WINDOWS)
org.apache.commons.lang.SystemUtils.IS_OS_WINDOWS_2000 == orig(org.apache.commons.lang.SystemUtils.IS_OS_WINDOWS_2000)
org.apache.commons.lang.SystemUtils.IS_OS_WINDOWS_95 == orig(org.apache.commons.lang.SystemUtils.IS_OS_WINDOWS_95)
org.apache.commons.lang.SystemUtils.IS_OS_WINDOWS_98 == orig(org.apache.commons.lang.SystemUtils.IS_OS_WINDOWS_98)
org.apache.commons.lang.SystemUtils.IS_OS_WINDOWS_ME == orig(org.apache.commons.lang.SystemUtils.IS_OS_WINDOWS_ME)
org.apache.commons.lang.SystemUtils.IS_OS_WINDOWS_NT == orig(org.apache.commons.lang.SystemUtils.IS_OS_WINDOWS_NT)
org.apache.commons.lang.SystemUtils.IS_OS_WINDOWS_XP == orig(org.apache.commons.lang.SystemUtils.IS_OS_WINDOWS_XP)
return == true
===========================================================================
org.apache.commons.lang.SystemUtils.isJavaVersionAtLeast(float):::EXIT;condition="return == true"
