===========================================================================
org.apache.commons.lang3.ArrayUtils:::CLASS
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY != null
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() == java.lang.Object[].class
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[].getClass().getName() == []
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY != null
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() == java.lang.Class[].class
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY[].getClass().getName() == []
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY != null
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() == java.lang.String[].class
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY[].getClass().getName() == []
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY[].toString == []
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY != null
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY != null
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() == java.lang.Long[].class
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY[].getClass().getName() == []
org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY != null
org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY != null
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() == java.lang.Integer[].class
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY[].getClass().getName() == []
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY != null
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY != null
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() == java.lang.Short[].class
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY[].getClass().getName() == []
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY != null
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY != null
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName() == java.lang.Byte[].class
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY[].getClass().getName() == []
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY != null
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY != null
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName() == java.lang.Double[].class
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY[].getClass().getName() == []
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY != null
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY != null
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName() == java.lang.Float[].class
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY[].getClass().getName() == []
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY != null
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY != null
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName() == java.lang.Boolean[].class
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY[].getClass().getName() == []
org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY != null
org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY != null
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName() == java.lang.Character[].class
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY[].getClass().getName() == []
===========================================================================
org.apache.commons.lang3.ArrayUtils.clone(java.lang.Object[]):::ENTER
array.getClass().getName() == org.apache.commons.lang3.text.translate.CharSequenceTranslator[].class
size(array[]) one of { 2, 3, 4 }
===========================================================================
org.apache.commons.lang3.ArrayUtils.clone(java.lang.Object[]):::EXIT323
===========================================================================
org.apache.commons.lang3.ArrayUtils.clone(java.lang.Object[]):::EXIT
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY[])
array[] == orig(array[])
return.getClass().getName() == org.apache.commons.lang3.text.translate.CharSequenceTranslator[].class
size(return[]) one of { 2, 3, 4 }
===========================================================================
org.apache.commons.lang3.ArrayUtils.isEmpty(char[]):::ENTER
array has only one value
array[] == [44, 34, 13, 10]
array[] sorted by >
size(array[]) == 4
===========================================================================
org.apache.commons.lang3.ArrayUtils.isEmpty(char[]):::EXIT
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY[])
array[] == orig(array[])
array[] == [44, 34, 13, 10]
array[] sorted by >
return == false
===========================================================================
org.apache.commons.lang3.ArrayUtils.isEmpty(char[]):::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.ClassUtils:::CLASS
org.apache.commons.lang3.ClassUtils.PACKAGE_SEPARATOR has only one value
org.apache.commons.lang3.ClassUtils.PACKAGE_SEPARATOR.toString == "."
org.apache.commons.lang3.ClassUtils.INNER_CLASS_SEPARATOR has only one value
org.apache.commons.lang3.ClassUtils.INNER_CLASS_SEPARATOR.toString == "$"
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap has only one value
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap.getClass().getName() == java.util.HashMap.class
org.apache.commons.lang3.ClassUtils.wrapperPrimitiveMap has only one value
org.apache.commons.lang3.ClassUtils.wrapperPrimitiveMap.getClass().getName() == java.util.HashMap.class
org.apache.commons.lang3.ClassUtils.abbreviationMap has only one value
org.apache.commons.lang3.ClassUtils.abbreviationMap.getClass().getName() == java.util.HashMap.class
org.apache.commons.lang3.ClassUtils.reverseAbbreviationMap has only one value
org.apache.commons.lang3.ClassUtils.reverseAbbreviationMap.getClass().getName() == java.util.HashMap.class
===========================================================================
org.apache.commons.lang3.ClassUtils.addAbbreviation(java.lang.String, java.lang.String):::ENTER
===========================================================================
org.apache.commons.lang3.ClassUtils.addAbbreviation(java.lang.String, java.lang.String):::EXIT
primitive.toString == orig(primitive.toString)
abbreviation.toString == orig(abbreviation.toString)
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class, java.lang.Class):::ENTER
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class, java.lang.Class):::EXIT
org.apache.commons.lang3.ClassUtils.PACKAGE_SEPARATOR == orig(org.apache.commons.lang3.ClassUtils.PACKAGE_SEPARATOR)
org.apache.commons.lang3.ClassUtils.PACKAGE_SEPARATOR.toString == orig(org.apache.commons.lang3.ClassUtils.PACKAGE_SEPARATOR.toString)
org.apache.commons.lang3.ClassUtils.INNER_CLASS_SEPARATOR == orig(org.apache.commons.lang3.ClassUtils.INNER_CLASS_SEPARATOR)
org.apache.commons.lang3.ClassUtils.INNER_CLASS_SEPARATOR.toString == orig(org.apache.commons.lang3.ClassUtils.INNER_CLASS_SEPARATOR.toString)
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap == orig(org.apache.commons.lang3.ClassUtils.primitiveWrapperMap)
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap.getClass().getName() == orig(org.apache.commons.lang3.ClassUtils.primitiveWrapperMap.getClass().getName())
org.apache.commons.lang3.ClassUtils.wrapperPrimitiveMap == orig(org.apache.commons.lang3.ClassUtils.wrapperPrimitiveMap)
org.apache.commons.lang3.ClassUtils.wrapperPrimitiveMap.getClass().getName() == orig(org.apache.commons.lang3.ClassUtils.wrapperPrimitiveMap.getClass().getName())
org.apache.commons.lang3.ClassUtils.abbreviationMap == orig(org.apache.commons.lang3.ClassUtils.abbreviationMap)
org.apache.commons.lang3.ClassUtils.abbreviationMap.getClass().getName() == orig(org.apache.commons.lang3.ClassUtils.abbreviationMap.getClass().getName())
org.apache.commons.lang3.ClassUtils.reverseAbbreviationMap == orig(org.apache.commons.lang3.ClassUtils.reverseAbbreviationMap)
org.apache.commons.lang3.ClassUtils.reverseAbbreviationMap.getClass().getName() == orig(org.apache.commons.lang3.ClassUtils.reverseAbbreviationMap.getClass().getName())
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class, java.lang.Class):::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class, java.lang.Class):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class, java.lang.Class, boolean):::ENTER
autoboxing == true
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class, java.lang.Class, boolean):::EXIT640
return == true
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class, java.lang.Class, boolean):::EXIT640;condition="return == true"
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class, java.lang.Class, boolean):::EXIT647
return == true
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class, java.lang.Class, boolean):::EXIT647;condition="return == true"
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class, java.lang.Class, boolean):::EXIT652
return == true
orig(cls) has only one value
orig(toClass) has only one value
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class, java.lang.Class, boolean):::EXIT652;condition="return == true"
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class, java.lang.Class, boolean):::EXIT662
return == true
orig(cls) has only one value
orig(toClass) has only one value
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class, java.lang.Class, boolean):::EXIT662;condition="return == true"
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class, java.lang.Class, boolean):::EXIT665
return == true
orig(cls) has only one value
orig(toClass) has only one value
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class, java.lang.Class, boolean):::EXIT665;condition="return == true"
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class, java.lang.Class, boolean):::EXIT671
return == true
orig(cls) has only one value
orig(toClass) has only one value
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class, java.lang.Class, boolean):::EXIT671;condition="return == true"
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class, java.lang.Class, boolean):::EXIT677
return == true
orig(cls) has only one value
orig(toClass) has only one value
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class, java.lang.Class, boolean):::EXIT677;condition="return == true"
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class, java.lang.Class, boolean):::EXIT686
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class, java.lang.Class, boolean):::EXIT686;condition="return == true"
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class, java.lang.Class, boolean):::EXIT686;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class, java.lang.Class, boolean):::EXIT
org.apache.commons.lang3.ClassUtils.PACKAGE_SEPARATOR == orig(org.apache.commons.lang3.ClassUtils.PACKAGE_SEPARATOR)
org.apache.commons.lang3.ClassUtils.PACKAGE_SEPARATOR.toString == orig(org.apache.commons.lang3.ClassUtils.PACKAGE_SEPARATOR.toString)
org.apache.commons.lang3.ClassUtils.INNER_CLASS_SEPARATOR == orig(org.apache.commons.lang3.ClassUtils.INNER_CLASS_SEPARATOR)
org.apache.commons.lang3.ClassUtils.INNER_CLASS_SEPARATOR.toString == orig(org.apache.commons.lang3.ClassUtils.INNER_CLASS_SEPARATOR.toString)
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap == orig(org.apache.commons.lang3.ClassUtils.primitiveWrapperMap)
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap.getClass().getName() == orig(org.apache.commons.lang3.ClassUtils.primitiveWrapperMap.getClass().getName())
org.apache.commons.lang3.ClassUtils.wrapperPrimitiveMap == orig(org.apache.commons.lang3.ClassUtils.wrapperPrimitiveMap)
org.apache.commons.lang3.ClassUtils.wrapperPrimitiveMap.getClass().getName() == orig(org.apache.commons.lang3.ClassUtils.wrapperPrimitiveMap.getClass().getName())
org.apache.commons.lang3.ClassUtils.abbreviationMap == orig(org.apache.commons.lang3.ClassUtils.abbreviationMap)
org.apache.commons.lang3.ClassUtils.abbreviationMap.getClass().getName() == orig(org.apache.commons.lang3.ClassUtils.abbreviationMap.getClass().getName())
org.apache.commons.lang3.ClassUtils.reverseAbbreviationMap == orig(org.apache.commons.lang3.ClassUtils.reverseAbbreviationMap)
org.apache.commons.lang3.ClassUtils.reverseAbbreviationMap.getClass().getName() == orig(org.apache.commons.lang3.ClassUtils.reverseAbbreviationMap.getClass().getName())
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class, java.lang.Class, boolean):::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class, java.lang.Class, boolean):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.ClassUtils.primitiveToWrapper(java.lang.Class):::ENTER
cls has only one value
===========================================================================
org.apache.commons.lang3.ClassUtils.primitiveToWrapper(java.lang.Class):::EXIT
org.apache.commons.lang3.ClassUtils.PACKAGE_SEPARATOR == orig(org.apache.commons.lang3.ClassUtils.PACKAGE_SEPARATOR)
org.apache.commons.lang3.ClassUtils.PACKAGE_SEPARATOR.toString == orig(org.apache.commons.lang3.ClassUtils.PACKAGE_SEPARATOR.toString)
org.apache.commons.lang3.ClassUtils.INNER_CLASS_SEPARATOR == orig(org.apache.commons.lang3.ClassUtils.INNER_CLASS_SEPARATOR)
org.apache.commons.lang3.ClassUtils.INNER_CLASS_SEPARATOR.toString == orig(org.apache.commons.lang3.ClassUtils.INNER_CLASS_SEPARATOR.toString)
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap == orig(org.apache.commons.lang3.ClassUtils.primitiveWrapperMap)
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap.getClass().getName() == orig(org.apache.commons.lang3.ClassUtils.primitiveWrapperMap.getClass().getName())
org.apache.commons.lang3.ClassUtils.wrapperPrimitiveMap == orig(org.apache.commons.lang3.ClassUtils.wrapperPrimitiveMap)
org.apache.commons.lang3.ClassUtils.wrapperPrimitiveMap.getClass().getName() == orig(org.apache.commons.lang3.ClassUtils.wrapperPrimitiveMap.getClass().getName())
org.apache.commons.lang3.ClassUtils.abbreviationMap == orig(org.apache.commons.lang3.ClassUtils.abbreviationMap)
org.apache.commons.lang3.ClassUtils.abbreviationMap.getClass().getName() == orig(org.apache.commons.lang3.ClassUtils.abbreviationMap.getClass().getName())
org.apache.commons.lang3.ClassUtils.reverseAbbreviationMap == orig(org.apache.commons.lang3.ClassUtils.reverseAbbreviationMap)
org.apache.commons.lang3.ClassUtils.reverseAbbreviationMap.getClass().getName() == orig(org.apache.commons.lang3.ClassUtils.reverseAbbreviationMap.getClass().getName())
return has only one value
===========================================================================
org.apache.commons.lang3.ClassUtils.wrapperToPrimitive(java.lang.Class):::ENTER
cls has only one value
===========================================================================
org.apache.commons.lang3.ClassUtils.wrapperToPrimitive(java.lang.Class):::EXIT
org.apache.commons.lang3.ClassUtils.PACKAGE_SEPARATOR == orig(org.apache.commons.lang3.ClassUtils.PACKAGE_SEPARATOR)
org.apache.commons.lang3.ClassUtils.PACKAGE_SEPARATOR.toString == orig(org.apache.commons.lang3.ClassUtils.PACKAGE_SEPARATOR.toString)
org.apache.commons.lang3.ClassUtils.INNER_CLASS_SEPARATOR == orig(org.apache.commons.lang3.ClassUtils.INNER_CLASS_SEPARATOR)
org.apache.commons.lang3.ClassUtils.INNER_CLASS_SEPARATOR.toString == orig(org.apache.commons.lang3.ClassUtils.INNER_CLASS_SEPARATOR.toString)
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap == orig(org.apache.commons.lang3.ClassUtils.primitiveWrapperMap)
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap.getClass().getName() == orig(org.apache.commons.lang3.ClassUtils.primitiveWrapperMap.getClass().getName())
org.apache.commons.lang3.ClassUtils.wrapperPrimitiveMap == orig(org.apache.commons.lang3.ClassUtils.wrapperPrimitiveMap)
org.apache.commons.lang3.ClassUtils.wrapperPrimitiveMap.getClass().getName() == orig(org.apache.commons.lang3.ClassUtils.wrapperPrimitiveMap.getClass().getName())
org.apache.commons.lang3.ClassUtils.abbreviationMap == orig(org.apache.commons.lang3.ClassUtils.abbreviationMap)
org.apache.commons.lang3.ClassUtils.abbreviationMap.getClass().getName() == orig(org.apache.commons.lang3.ClassUtils.abbreviationMap.getClass().getName())
org.apache.commons.lang3.ClassUtils.reverseAbbreviationMap == orig(org.apache.commons.lang3.ClassUtils.reverseAbbreviationMap)
org.apache.commons.lang3.ClassUtils.reverseAbbreviationMap.getClass().getName() == orig(org.apache.commons.lang3.ClassUtils.reverseAbbreviationMap.getClass().getName())
return has only one value
===========================================================================
org.apache.commons.lang3.JavaVersion:::CLASS
org.apache.commons.lang3.JavaVersion.JAVA_0_9 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_1 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_2 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_3 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_4 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_5 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_6 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_7 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_8 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == 1.5
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == "0.9"
org.apache.commons.lang3.JavaVersion.$VALUES has only one value
org.apache.commons.lang3.JavaVersion.$VALUES.getClass().getName() == org.apache.commons.lang3.JavaVersion[].class
org.apache.commons.lang3.JavaVersion.$VALUES[] contains no nulls and has only one value, of length 9
org.apache.commons.lang3.JavaVersion.$VALUES[] elements != null
org.apache.commons.lang3.JavaVersion.$VALUES[].getClass().getName() == [org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion]
org.apache.commons.lang3.JavaVersion.$VALUES[].getClass().getName() elements == org.apache.commons.lang3.JavaVersion.class
org.apache.commons.lang3.JavaVersion.$VALUES[].value == [1.5, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8]
org.apache.commons.lang3.JavaVersion.$VALUES[].name contains no nulls and has only one value, of length 9
org.apache.commons.lang3.JavaVersion.$VALUES[].name elements != null
org.apache.commons.lang3.JavaVersion.$VALUES[].name.toString == [0.9, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8]
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == 1.1
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == "1.1"
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == 1.2
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == "1.2"
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == 1.3
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == "1.3"
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == 1.4
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == "1.4"
org.apache.commons.lang3.JavaVersion.JAVA_1_5.value == 1.5
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == "1.5"
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == 1.6
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == "1.6"
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == 1.7
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == "1.7"
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == 1.8
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == "1.8"
size(org.apache.commons.lang3.JavaVersion.$VALUES[]) == 9
===========================================================================
org.apache.commons.lang3.JavaVersion:::OBJECT
===========================================================================
org.apache.commons.lang3.JavaVersion.JavaVersion(java.lang.String, int, float, java.lang.String):::ENTER
===========================================================================
org.apache.commons.lang3.JavaVersion.JavaVersion(java.lang.String, int, float, java.lang.String):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.lang3.JavaVersion.atLeast(org.apache.commons.lang3.JavaVersion):::ENTER
this has only one value
this.value == 1.8
this.name has only one value
this.name.toString == "1.8"
requiredVersion has only one value
requiredVersion.value == 1.5
requiredVersion.name has only one value
requiredVersion.name.toString == "1.5"
===========================================================================
org.apache.commons.lang3.JavaVersion.atLeast(org.apache.commons.lang3.JavaVersion):::EXIT
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.$VALUES == orig(org.apache.commons.lang3.JavaVersion.$VALUES)
org.apache.commons.lang3.JavaVersion.$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.$VALUES.getClass().getName())
org.apache.commons.lang3.JavaVersion.$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.$VALUES[])
org.apache.commons.lang3.JavaVersion.$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.$VALUES[].value)
org.apache.commons.lang3.JavaVersion.$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
this.value == orig(this.value)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
requiredVersion.value == orig(requiredVersion.value)
requiredVersion.name == orig(requiredVersion.name)
requiredVersion.name.toString == orig(requiredVersion.name.toString)
this.value == 1.8
this.name has only one value
this.name.toString == "1.8"
requiredVersion.value == 1.5
requiredVersion.name has only one value
requiredVersion.name.toString == "1.5"
return == true
===========================================================================
org.apache.commons.lang3.JavaVersion.atLeast(org.apache.commons.lang3.JavaVersion):::EXIT;condition="return == true"
===========================================================================
org.apache.commons.lang3.JavaVersion.get(java.lang.String):::ENTER
nom has only one value
nom.toString == "1.8"
===========================================================================
org.apache.commons.lang3.JavaVersion.get(java.lang.String):::EXIT149
===========================================================================
org.apache.commons.lang3.JavaVersion.get(java.lang.String):::EXIT
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.$VALUES == orig(org.apache.commons.lang3.JavaVersion.$VALUES)
org.apache.commons.lang3.JavaVersion.$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.$VALUES.getClass().getName())
org.apache.commons.lang3.JavaVersion.$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.$VALUES[])
org.apache.commons.lang3.JavaVersion.$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.$VALUES[].value)
org.apache.commons.lang3.JavaVersion.$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
nom.toString == orig(nom.toString)
nom.toString == "1.8"
return has only one value
return.value == 1.8
return.name has only one value
return.name.toString == "1.8"
===========================================================================
org.apache.commons.lang3.StringEscapeUtils$CsvEscaper:::CLASS
org.apache.commons.lang3.StringEscapeUtils$CsvEscaper.CSV_QUOTE_STR has only one value
org.apache.commons.lang3.StringEscapeUtils$CsvEscaper.CSV_QUOTE_STR != null
org.apache.commons.lang3.StringEscapeUtils$CsvEscaper.CSV_QUOTE_STR.toString == "\""
org.apache.commons.lang3.StringEscapeUtils$CsvEscaper.CSV_SEARCH_CHARS has only one value
org.apache.commons.lang3.StringEscapeUtils$CsvEscaper.CSV_SEARCH_CHARS != null
org.apache.commons.lang3.StringEscapeUtils$CsvEscaper.CSV_SEARCH_CHARS[] == [44, 34, 13, 10]
org.apache.commons.lang3.StringEscapeUtils$CsvEscaper.CSV_SEARCH_CHARS[] sorted by >
size(org.apache.commons.lang3.StringEscapeUtils$CsvEscaper.CSV_SEARCH_CHARS[]) == 4
===========================================================================
org.apache.commons.lang3.StringEscapeUtils$CsvEscaper:::OBJECT
this has only one value
===========================================================================
org.apache.commons.lang3.StringEscapeUtils$CsvEscaper.CsvEscaper():::EXIT
===========================================================================
org.apache.commons.lang3.StringEscapeUtils$CsvEscaper.translate(java.lang.CharSequence, int, java.io.Writer):::ENTER
input.getClass().getName() == java.lang.String.class
index == 0
out.getClass().getName() == java.io.StringWriter.class
===========================================================================
org.apache.commons.lang3.StringEscapeUtils$CsvEscaper.translate(java.lang.CharSequence, int, java.io.Writer):::EXIT
org.apache.commons.lang3.StringEscapeUtils$CsvEscaper.CSV_QUOTE_STR == orig(org.apache.commons.lang3.StringEscapeUtils$CsvEscaper.CSV_QUOTE_STR)
org.apache.commons.lang3.StringEscapeUtils$CsvEscaper.CSV_QUOTE_STR.toString == orig(org.apache.commons.lang3.StringEscapeUtils$CsvEscaper.CSV_QUOTE_STR.toString)
org.apache.commons.lang3.StringEscapeUtils$CsvEscaper.CSV_SEARCH_CHARS == orig(org.apache.commons.lang3.StringEscapeUtils$CsvEscaper.CSV_SEARCH_CHARS)
org.apache.commons.lang3.StringEscapeUtils$CsvEscaper.CSV_SEARCH_CHARS[] == orig(org.apache.commons.lang3.StringEscapeUtils$CsvEscaper.CSV_SEARCH_CHARS[])
return == 7
===========================================================================
org.apache.commons.lang3.StringEscapeUtils$CsvUnescaper:::CLASS
org.apache.commons.lang3.StringEscapeUtils$CsvUnescaper.CSV_QUOTE_STR has only one value
org.apache.commons.lang3.StringEscapeUtils$CsvUnescaper.CSV_QUOTE_STR != null
org.apache.commons.lang3.StringEscapeUtils$CsvUnescaper.CSV_QUOTE_STR.toString == "\""
org.apache.commons.lang3.StringEscapeUtils$CsvUnescaper.CSV_SEARCH_CHARS has only one value
org.apache.commons.lang3.StringEscapeUtils$CsvUnescaper.CSV_SEARCH_CHARS != null
org.apache.commons.lang3.StringEscapeUtils$CsvUnescaper.CSV_SEARCH_CHARS[] == [44, 34, 13, 10]
org.apache.commons.lang3.StringEscapeUtils$CsvUnescaper.CSV_SEARCH_CHARS[] sorted by >
size(org.apache.commons.lang3.StringEscapeUtils$CsvUnescaper.CSV_SEARCH_CHARS[]) == 4
===========================================================================
org.apache.commons.lang3.StringEscapeUtils$CsvUnescaper:::OBJECT
this has only one value
===========================================================================
org.apache.commons.lang3.StringEscapeUtils$CsvUnescaper.CsvUnescaper():::EXIT
===========================================================================
org.apache.commons.lang3.StringEscapeUtils$CsvUnescaper.translate(java.lang.CharSequence, int, java.io.Writer):::ENTER
input != null
input.getClass().getName() == java.lang.String.class
index == 0
out != null
out.getClass().getName() == java.io.StringWriter.class
===========================================================================
org.apache.commons.lang3.StringEscapeUtils$CsvUnescaper.translate(java.lang.CharSequence, int, java.io.Writer):::EXIT285
return == 7
orig(input) has only one value
===========================================================================
org.apache.commons.lang3.StringEscapeUtils$CsvUnescaper.translate(java.lang.CharSequence, int, java.io.Writer):::EXIT297
return one of { 9, 10 }
===========================================================================
org.apache.commons.lang3.StringEscapeUtils$CsvUnescaper.translate(java.lang.CharSequence, int, java.io.Writer):::EXIT
org.apache.commons.lang3.StringEscapeUtils$CsvUnescaper.CSV_QUOTE_STR == orig(org.apache.commons.lang3.StringEscapeUtils$CsvUnescaper.CSV_QUOTE_STR)
org.apache.commons.lang3.StringEscapeUtils$CsvUnescaper.CSV_QUOTE_STR.toString == orig(org.apache.commons.lang3.StringEscapeUtils$CsvUnescaper.CSV_QUOTE_STR.toString)
org.apache.commons.lang3.StringEscapeUtils$CsvUnescaper.CSV_SEARCH_CHARS == orig(org.apache.commons.lang3.StringEscapeUtils$CsvUnescaper.CSV_SEARCH_CHARS)
org.apache.commons.lang3.StringEscapeUtils$CsvUnescaper.CSV_SEARCH_CHARS[] == orig(org.apache.commons.lang3.StringEscapeUtils$CsvUnescaper.CSV_SEARCH_CHARS[])
(return == 7)  ==>  (orig(input) has only one value)
return one of { 7, 9, 10 }
===========================================================================
org.apache.commons.lang3.StringEscapeUtils:::CLASS
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_JAVA has only one value
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_JAVA != null
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_JAVA.getClass().getName() == org.apache.commons.lang3.text.translate.AggregateTranslator.class
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_ECMASCRIPT has only one value
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_ECMASCRIPT != null
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_ECMASCRIPT.getClass().getName() == org.apache.commons.lang3.text.translate.AggregateTranslator.class
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_XML has only one value
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_XML != null
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_XML.getClass().getName() == org.apache.commons.lang3.text.translate.AggregateTranslator.class
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML3 has only one value
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML3 != null
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML3.getClass().getName() == org.apache.commons.lang3.text.translate.AggregateTranslator.class
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML4 has only one value
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML4 != null
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML4.getClass().getName() == org.apache.commons.lang3.text.translate.AggregateTranslator.class
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_CSV has only one value
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_CSV != null
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_CSV.getClass().getName() == org.apache.commons.lang3.StringEscapeUtils$CsvEscaper.class
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_JAVA has only one value
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_JAVA != null
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_JAVA.getClass().getName() == org.apache.commons.lang3.text.translate.AggregateTranslator.class
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_ECMASCRIPT has only one value
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_ECMASCRIPT != null
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_ECMASCRIPT.getClass().getName() == org.apache.commons.lang3.text.translate.AggregateTranslator.class
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML3 has only one value
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML3 != null
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML3.getClass().getName() == org.apache.commons.lang3.text.translate.AggregateTranslator.class
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML4 has only one value
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML4 != null
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML4.getClass().getName() == org.apache.commons.lang3.text.translate.AggregateTranslator.class
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_XML has only one value
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_XML != null
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_XML.getClass().getName() == org.apache.commons.lang3.text.translate.AggregateTranslator.class
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_CSV has only one value
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_CSV != null
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_CSV.getClass().getName() == org.apache.commons.lang3.StringEscapeUtils$CsvUnescaper.class
===========================================================================
org.apache.commons.lang3.StringEscapeUtils.escapeCsv(java.lang.String):::ENTER
===========================================================================
org.apache.commons.lang3.StringEscapeUtils.escapeCsv(java.lang.String):::EXIT
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_JAVA == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_JAVA)
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_JAVA.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_JAVA.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_ECMASCRIPT == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_ECMASCRIPT)
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_ECMASCRIPT.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_ECMASCRIPT.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_XML == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_XML)
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_XML.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_XML.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML3 == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML3)
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML3.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML3.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML4 == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML4)
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML4.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML4.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_CSV == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_CSV)
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_CSV.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_CSV.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_JAVA == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_JAVA)
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_JAVA.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_JAVA.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_ECMASCRIPT == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_ECMASCRIPT)
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_ECMASCRIPT.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_ECMASCRIPT.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML3 == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML3)
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML3.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML3.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML4 == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML4)
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML4.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML4.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_XML == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_XML)
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_XML.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_XML.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_CSV == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_CSV)
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_CSV.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_CSV.getClass().getName())
input.toString == orig(input.toString)
===========================================================================
org.apache.commons.lang3.StringEscapeUtils.escapeEcmaScript(java.lang.String):::ENTER
input.toString one of { "He didn't say, \"stop!\"", "document.getElementById(\"test\").value = '<script>alert('aaa');</script>';" }
===========================================================================
org.apache.commons.lang3.StringEscapeUtils.escapeEcmaScript(java.lang.String):::EXIT
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_JAVA == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_JAVA)
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_JAVA.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_JAVA.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_ECMASCRIPT == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_ECMASCRIPT)
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_ECMASCRIPT.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_ECMASCRIPT.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_XML == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_XML)
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_XML.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_XML.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML3 == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML3)
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML3.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML3.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML4 == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML4)
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML4.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML4.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_CSV == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_CSV)
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_CSV.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_CSV.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_JAVA == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_JAVA)
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_JAVA.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_JAVA.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_ECMASCRIPT == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_ECMASCRIPT)
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_ECMASCRIPT.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_ECMASCRIPT.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML3 == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML3)
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML3.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML3.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML4 == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML4)
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML4.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML4.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_XML == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_XML)
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_XML.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_XML.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_CSV == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_CSV)
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_CSV.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_CSV.getClass().getName())
input.toString == orig(input.toString)
input.toString one of { "He didn't say, \"stop!\"", "document.getElementById(\"test\").value = '<script>alert('aaa');</script>';" }
return.toString one of { "He didn\\'t say, \\\"stop!\\\"", "document.getElementById(\\\"test\\\").value = \\'<script>alert(\\'aaa\\');<\\/script>\\';" }
===========================================================================
org.apache.commons.lang3.StringEscapeUtils.escapeHtml4(java.lang.String):::ENTER
===========================================================================
org.apache.commons.lang3.StringEscapeUtils.escapeHtml4(java.lang.String):::EXIT
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_JAVA == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_JAVA)
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_JAVA.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_JAVA.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_ECMASCRIPT == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_ECMASCRIPT)
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_ECMASCRIPT.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_ECMASCRIPT.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_XML == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_XML)
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_XML.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_XML.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML3 == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML3)
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML3.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML3.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML4 == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML4)
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML4.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML4.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_CSV == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_CSV)
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_CSV.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_CSV.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_JAVA == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_JAVA)
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_JAVA.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_JAVA.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_ECMASCRIPT == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_ECMASCRIPT)
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_ECMASCRIPT.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_ECMASCRIPT.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML3 == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML3)
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML3.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML3.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML4 == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML4)
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML4.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML4.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_XML == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_XML)
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_XML.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_XML.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_CSV == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_CSV)
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_CSV.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_CSV.getClass().getName())
input.toString == orig(input.toString)
===========================================================================
org.apache.commons.lang3.StringEscapeUtils.escapeJava(java.lang.String):::ENTER
===========================================================================
org.apache.commons.lang3.StringEscapeUtils.escapeJava(java.lang.String):::EXIT
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_JAVA == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_JAVA)
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_JAVA.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_JAVA.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_ECMASCRIPT == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_ECMASCRIPT)
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_ECMASCRIPT.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_ECMASCRIPT.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_XML == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_XML)
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_XML.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_XML.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML3 == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML3)
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML3.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML3.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML4 == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML4)
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML4.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML4.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_CSV == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_CSV)
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_CSV.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_CSV.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_JAVA == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_JAVA)
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_JAVA.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_JAVA.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_ECMASCRIPT == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_ECMASCRIPT)
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_ECMASCRIPT.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_ECMASCRIPT.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML3 == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML3)
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML3.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML3.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML4 == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML4)
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML4.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML4.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_XML == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_XML)
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_XML.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_XML.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_CSV == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_CSV)
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_CSV.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_CSV.getClass().getName())
input.toString == orig(input.toString)
===========================================================================
org.apache.commons.lang3.StringEscapeUtils.escapeXml(java.lang.String):::ENTER
===========================================================================
org.apache.commons.lang3.StringEscapeUtils.escapeXml(java.lang.String):::EXIT
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_JAVA == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_JAVA)
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_JAVA.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_JAVA.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_ECMASCRIPT == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_ECMASCRIPT)
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_ECMASCRIPT.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_ECMASCRIPT.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_XML == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_XML)
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_XML.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_XML.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML3 == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML3)
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML3.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML3.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML4 == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML4)
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML4.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML4.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_CSV == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_CSV)
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_CSV.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_CSV.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_JAVA == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_JAVA)
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_JAVA.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_JAVA.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_ECMASCRIPT == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_ECMASCRIPT)
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_ECMASCRIPT.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_ECMASCRIPT.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML3 == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML3)
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML3.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML3.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML4 == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML4)
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML4.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML4.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_XML == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_XML)
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_XML.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_XML.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_CSV == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_CSV)
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_CSV.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_CSV.getClass().getName())
input.toString == orig(input.toString)
===========================================================================
org.apache.commons.lang3.StringEscapeUtils.unescapeCsv(java.lang.String):::ENTER
===========================================================================
org.apache.commons.lang3.StringEscapeUtils.unescapeCsv(java.lang.String):::EXIT
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_JAVA == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_JAVA)
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_JAVA.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_JAVA.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_ECMASCRIPT == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_ECMASCRIPT)
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_ECMASCRIPT.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_ECMASCRIPT.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_XML == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_XML)
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_XML.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_XML.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML3 == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML3)
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML3.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML3.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML4 == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML4)
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML4.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML4.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_CSV == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_CSV)
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_CSV.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_CSV.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_JAVA == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_JAVA)
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_JAVA.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_JAVA.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_ECMASCRIPT == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_ECMASCRIPT)
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_ECMASCRIPT.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_ECMASCRIPT.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML3 == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML3)
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML3.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML3.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML4 == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML4)
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML4.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML4.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_XML == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_XML)
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_XML.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_XML.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_CSV == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_CSV)
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_CSV.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_CSV.getClass().getName())
input.toString == orig(input.toString)
===========================================================================
org.apache.commons.lang3.StringEscapeUtils.unescapeHtml4(java.lang.String):::ENTER
===========================================================================
org.apache.commons.lang3.StringEscapeUtils.unescapeHtml4(java.lang.String):::EXIT
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_JAVA == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_JAVA)
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_JAVA.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_JAVA.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_ECMASCRIPT == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_ECMASCRIPT)
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_ECMASCRIPT.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_ECMASCRIPT.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_XML == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_XML)
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_XML.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_XML.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML3 == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML3)
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML3.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML3.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML4 == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML4)
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML4.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML4.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_CSV == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_CSV)
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_CSV.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_CSV.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_JAVA == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_JAVA)
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_JAVA.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_JAVA.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_ECMASCRIPT == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_ECMASCRIPT)
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_ECMASCRIPT.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_ECMASCRIPT.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML3 == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML3)
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML3.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML3.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML4 == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML4)
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML4.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML4.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_XML == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_XML)
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_XML.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_XML.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_CSV == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_CSV)
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_CSV.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_CSV.getClass().getName())
input.toString == orig(input.toString)
===========================================================================
org.apache.commons.lang3.StringEscapeUtils.unescapeJava(java.lang.String):::ENTER
===========================================================================
org.apache.commons.lang3.StringEscapeUtils.unescapeJava(java.lang.String):::EXIT
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_JAVA == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_JAVA)
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_JAVA.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_JAVA.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_ECMASCRIPT == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_ECMASCRIPT)
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_ECMASCRIPT.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_ECMASCRIPT.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_XML == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_XML)
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_XML.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_XML.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML3 == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML3)
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML3.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML3.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML4 == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML4)
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML4.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML4.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_CSV == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_CSV)
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_CSV.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_CSV.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_JAVA == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_JAVA)
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_JAVA.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_JAVA.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_ECMASCRIPT == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_ECMASCRIPT)
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_ECMASCRIPT.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_ECMASCRIPT.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML3 == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML3)
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML3.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML3.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML4 == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML4)
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML4.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML4.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_XML == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_XML)
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_XML.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_XML.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_CSV == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_CSV)
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_CSV.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_CSV.getClass().getName())
input.toString == orig(input.toString)
===========================================================================
org.apache.commons.lang3.StringEscapeUtils.unescapeXml(java.lang.String):::ENTER
===========================================================================
org.apache.commons.lang3.StringEscapeUtils.unescapeXml(java.lang.String):::EXIT
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_JAVA == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_JAVA)
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_JAVA.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_JAVA.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_ECMASCRIPT == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_ECMASCRIPT)
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_ECMASCRIPT.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_ECMASCRIPT.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_XML == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_XML)
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_XML.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_XML.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML3 == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML3)
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML3.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML3.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML4 == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML4)
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML4.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML4.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_CSV == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_CSV)
org.apache.commons.lang3.StringEscapeUtils.ESCAPE_CSV.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.ESCAPE_CSV.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_JAVA == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_JAVA)
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_JAVA.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_JAVA.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_ECMASCRIPT == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_ECMASCRIPT)
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_ECMASCRIPT.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_ECMASCRIPT.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML3 == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML3)
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML3.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML3.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML4 == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML4)
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML4.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML4.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_XML == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_XML)
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_XML.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_XML.getClass().getName())
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_CSV == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_CSV)
org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_CSV.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_CSV.getClass().getName())
input.toString == orig(input.toString)
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest:::CLASS
org.apache.commons.lang3.StringEscapeUtilsTest.FOO has only one value
org.apache.commons.lang3.StringEscapeUtilsTest.FOO != null
org.apache.commons.lang3.StringEscapeUtilsTest.FOO.toString == "foo"
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES has only one value
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES != null
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES.getClass().getName() == java.lang.String[][].class
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[] contains no nulls and has only one value, of length 11
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[] elements != null
size(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[]) == 11
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest:::OBJECT
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest.StringEscapeUtilsTest():::EXIT
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest.assertEscapeJava(java.lang.String, java.lang.String):::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest.assertEscapeJava(java.lang.String, java.lang.String):::EXIT
org.apache.commons.lang3.StringEscapeUtilsTest.FOO == orig(org.apache.commons.lang3.StringEscapeUtilsTest.FOO)
org.apache.commons.lang3.StringEscapeUtilsTest.FOO.toString == orig(org.apache.commons.lang3.StringEscapeUtilsTest.FOO.toString)
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES)
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES.getClass().getName())
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[] == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[])
escaped.toString == orig(escaped.toString)
original.toString == orig(original.toString)
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest.assertEscapeJava(java.lang.String, java.lang.String, java.lang.String):::ENTER
this has only one value
expected != null
original != null
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest.assertEscapeJava(java.lang.String, java.lang.String, java.lang.String):::EXIT
org.apache.commons.lang3.StringEscapeUtilsTest.FOO == orig(org.apache.commons.lang3.StringEscapeUtilsTest.FOO)
org.apache.commons.lang3.StringEscapeUtilsTest.FOO.toString == orig(org.apache.commons.lang3.StringEscapeUtilsTest.FOO.toString)
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES)
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES.getClass().getName())
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[] == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[])
expected.toString == orig(expected.toString)
original.toString == orig(original.toString)
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest.assertUnescapeJava(java.lang.String, java.lang.String):::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest.assertUnescapeJava(java.lang.String, java.lang.String):::EXIT
org.apache.commons.lang3.StringEscapeUtilsTest.FOO == orig(org.apache.commons.lang3.StringEscapeUtilsTest.FOO)
org.apache.commons.lang3.StringEscapeUtilsTest.FOO.toString == orig(org.apache.commons.lang3.StringEscapeUtilsTest.FOO.toString)
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES)
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES.getClass().getName())
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[] == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[])
unescaped.toString == orig(unescaped.toString)
original.toString == orig(original.toString)
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest.assertUnescapeJava(java.lang.String, java.lang.String, java.lang.String):::ENTER
this has only one value
message.toString one of { "Unicode as final character", "lowercase Unicode", "uppercase Unicode" }
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest.assertUnescapeJava(java.lang.String, java.lang.String, java.lang.String):::EXIT
org.apache.commons.lang3.StringEscapeUtilsTest.FOO == orig(org.apache.commons.lang3.StringEscapeUtilsTest.FOO)
org.apache.commons.lang3.StringEscapeUtilsTest.FOO.toString == orig(org.apache.commons.lang3.StringEscapeUtilsTest.FOO.toString)
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES)
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES.getClass().getName())
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[] == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[])
message.toString == orig(message.toString)
unescaped.toString == orig(unescaped.toString)
original.toString == orig(original.toString)
message.toString one of { "Unicode as final character", "lowercase Unicode", "uppercase Unicode" }
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest.checkCsvEscapeWriter(java.lang.String, java.lang.String):::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest.checkCsvEscapeWriter(java.lang.String, java.lang.String):::EXIT
org.apache.commons.lang3.StringEscapeUtilsTest.FOO == orig(org.apache.commons.lang3.StringEscapeUtilsTest.FOO)
org.apache.commons.lang3.StringEscapeUtilsTest.FOO.toString == orig(org.apache.commons.lang3.StringEscapeUtilsTest.FOO.toString)
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES)
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES.getClass().getName())
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[] == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[])
expected.toString == orig(expected.toString)
value.toString == orig(value.toString)
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest.checkCsvUnescapeWriter(java.lang.String, java.lang.String):::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest.checkCsvUnescapeWriter(java.lang.String, java.lang.String):::EXIT
org.apache.commons.lang3.StringEscapeUtilsTest.FOO == orig(org.apache.commons.lang3.StringEscapeUtilsTest.FOO)
org.apache.commons.lang3.StringEscapeUtilsTest.FOO.toString == orig(org.apache.commons.lang3.StringEscapeUtilsTest.FOO.toString)
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES)
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES.getClass().getName())
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[] == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[])
expected.toString == orig(expected.toString)
value.toString == orig(value.toString)
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeCsvString():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeCsvString():::EXIT
org.apache.commons.lang3.StringEscapeUtilsTest.FOO == orig(org.apache.commons.lang3.StringEscapeUtilsTest.FOO)
org.apache.commons.lang3.StringEscapeUtilsTest.FOO.toString == orig(org.apache.commons.lang3.StringEscapeUtilsTest.FOO.toString)
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES)
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES.getClass().getName())
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[] == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[])
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeCsvWriter():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeCsvWriter():::EXIT
org.apache.commons.lang3.StringEscapeUtilsTest.FOO == orig(org.apache.commons.lang3.StringEscapeUtilsTest.FOO)
org.apache.commons.lang3.StringEscapeUtilsTest.FOO.toString == orig(org.apache.commons.lang3.StringEscapeUtilsTest.FOO.toString)
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES)
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES.getClass().getName())
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[] == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[])
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeEcmaScript():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeEcmaScript():::EXIT
org.apache.commons.lang3.StringEscapeUtilsTest.FOO == orig(org.apache.commons.lang3.StringEscapeUtilsTest.FOO)
org.apache.commons.lang3.StringEscapeUtilsTest.FOO.toString == orig(org.apache.commons.lang3.StringEscapeUtilsTest.FOO.toString)
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES)
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES.getClass().getName())
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[] == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[])
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeHiragana():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeHiragana():::EXIT
org.apache.commons.lang3.StringEscapeUtilsTest.FOO == orig(org.apache.commons.lang3.StringEscapeUtilsTest.FOO)
org.apache.commons.lang3.StringEscapeUtilsTest.FOO.toString == orig(org.apache.commons.lang3.StringEscapeUtilsTest.FOO.toString)
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES)
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES.getClass().getName())
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[] == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[])
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeHtml():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeHtml():::EXIT
org.apache.commons.lang3.StringEscapeUtilsTest.FOO == orig(org.apache.commons.lang3.StringEscapeUtilsTest.FOO)
org.apache.commons.lang3.StringEscapeUtilsTest.FOO.toString == orig(org.apache.commons.lang3.StringEscapeUtilsTest.FOO.toString)
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES)
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES.getClass().getName())
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[] == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[])
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeHtmlHighUnicode():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeHtmlHighUnicode():::EXIT
org.apache.commons.lang3.StringEscapeUtilsTest.FOO == orig(org.apache.commons.lang3.StringEscapeUtilsTest.FOO)
org.apache.commons.lang3.StringEscapeUtilsTest.FOO.toString == orig(org.apache.commons.lang3.StringEscapeUtilsTest.FOO.toString)
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES)
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES.getClass().getName())
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[] == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[])
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeHtmlVersions():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeHtmlVersions():::EXIT
org.apache.commons.lang3.StringEscapeUtilsTest.FOO == orig(org.apache.commons.lang3.StringEscapeUtilsTest.FOO)
org.apache.commons.lang3.StringEscapeUtilsTest.FOO.toString == orig(org.apache.commons.lang3.StringEscapeUtilsTest.FOO.toString)
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES)
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES.getClass().getName())
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[] == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[])
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeJava():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeJava():::EXIT
org.apache.commons.lang3.StringEscapeUtilsTest.FOO == orig(org.apache.commons.lang3.StringEscapeUtilsTest.FOO)
org.apache.commons.lang3.StringEscapeUtilsTest.FOO.toString == orig(org.apache.commons.lang3.StringEscapeUtilsTest.FOO.toString)
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES)
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES.getClass().getName())
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[] == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[])
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeJavaWithSlash():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeJavaWithSlash():::EXIT
org.apache.commons.lang3.StringEscapeUtilsTest.FOO == orig(org.apache.commons.lang3.StringEscapeUtilsTest.FOO)
org.apache.commons.lang3.StringEscapeUtilsTest.FOO.toString == orig(org.apache.commons.lang3.StringEscapeUtilsTest.FOO.toString)
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES)
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES.getClass().getName())
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[] == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[])
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeXml():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeXml():::EXIT
org.apache.commons.lang3.StringEscapeUtilsTest.FOO == orig(org.apache.commons.lang3.StringEscapeUtilsTest.FOO)
org.apache.commons.lang3.StringEscapeUtilsTest.FOO.toString == orig(org.apache.commons.lang3.StringEscapeUtilsTest.FOO.toString)
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES)
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES.getClass().getName())
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[] == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[])
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeXmlSupplementaryCharacters():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeXmlSupplementaryCharacters():::EXIT
org.apache.commons.lang3.StringEscapeUtilsTest.FOO == orig(org.apache.commons.lang3.StringEscapeUtilsTest.FOO)
org.apache.commons.lang3.StringEscapeUtilsTest.FOO.toString == orig(org.apache.commons.lang3.StringEscapeUtilsTest.FOO.toString)
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES)
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES.getClass().getName())
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[] == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[])
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest.testLang313():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest.testLang313():::EXIT
org.apache.commons.lang3.StringEscapeUtilsTest.FOO == orig(org.apache.commons.lang3.StringEscapeUtilsTest.FOO)
org.apache.commons.lang3.StringEscapeUtilsTest.FOO.toString == orig(org.apache.commons.lang3.StringEscapeUtilsTest.FOO.toString)
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES)
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES.getClass().getName())
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[] == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[])
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest.testLang720():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest.testLang720():::EXIT
org.apache.commons.lang3.StringEscapeUtilsTest.FOO == orig(org.apache.commons.lang3.StringEscapeUtilsTest.FOO)
org.apache.commons.lang3.StringEscapeUtilsTest.FOO.toString == orig(org.apache.commons.lang3.StringEscapeUtilsTest.FOO.toString)
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES)
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES.getClass().getName())
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[] == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[])
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest.testStandaloneAmphersand():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest.testStandaloneAmphersand():::EXIT
org.apache.commons.lang3.StringEscapeUtilsTest.FOO == orig(org.apache.commons.lang3.StringEscapeUtilsTest.FOO)
org.apache.commons.lang3.StringEscapeUtilsTest.FOO.toString == orig(org.apache.commons.lang3.StringEscapeUtilsTest.FOO.toString)
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES)
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES.getClass().getName())
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[] == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[])
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeCsvString():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeCsvString():::EXIT
org.apache.commons.lang3.StringEscapeUtilsTest.FOO == orig(org.apache.commons.lang3.StringEscapeUtilsTest.FOO)
org.apache.commons.lang3.StringEscapeUtilsTest.FOO.toString == orig(org.apache.commons.lang3.StringEscapeUtilsTest.FOO.toString)
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES)
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES.getClass().getName())
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[] == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[])
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeCsvWriter():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeCsvWriter():::EXIT
org.apache.commons.lang3.StringEscapeUtilsTest.FOO == orig(org.apache.commons.lang3.StringEscapeUtilsTest.FOO)
org.apache.commons.lang3.StringEscapeUtilsTest.FOO.toString == orig(org.apache.commons.lang3.StringEscapeUtilsTest.FOO.toString)
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES)
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES.getClass().getName())
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[] == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[])
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeHexCharsHtml():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeHexCharsHtml():::EXIT
org.apache.commons.lang3.StringEscapeUtilsTest.FOO == orig(org.apache.commons.lang3.StringEscapeUtilsTest.FOO)
org.apache.commons.lang3.StringEscapeUtilsTest.FOO.toString == orig(org.apache.commons.lang3.StringEscapeUtilsTest.FOO.toString)
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES)
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES.getClass().getName())
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[] == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[])
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeHtml4():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeHtml4():::EXIT
org.apache.commons.lang3.StringEscapeUtilsTest.FOO == orig(org.apache.commons.lang3.StringEscapeUtilsTest.FOO)
org.apache.commons.lang3.StringEscapeUtilsTest.FOO.toString == orig(org.apache.commons.lang3.StringEscapeUtilsTest.FOO.toString)
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES)
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES.getClass().getName())
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[] == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[])
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeJava():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeJava():::EXIT
org.apache.commons.lang3.StringEscapeUtilsTest.FOO == orig(org.apache.commons.lang3.StringEscapeUtilsTest.FOO)
org.apache.commons.lang3.StringEscapeUtilsTest.FOO.toString == orig(org.apache.commons.lang3.StringEscapeUtilsTest.FOO.toString)
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES)
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES.getClass().getName())
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[] == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[])
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeUnknownEntity():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeUnknownEntity():::EXIT
org.apache.commons.lang3.StringEscapeUtilsTest.FOO == orig(org.apache.commons.lang3.StringEscapeUtilsTest.FOO)
org.apache.commons.lang3.StringEscapeUtilsTest.FOO.toString == orig(org.apache.commons.lang3.StringEscapeUtilsTest.FOO.toString)
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES)
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES.getClass().getName())
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[] == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[])
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeXmlSupplementaryCharacters():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeXmlSupplementaryCharacters():::EXIT
org.apache.commons.lang3.StringEscapeUtilsTest.FOO == orig(org.apache.commons.lang3.StringEscapeUtilsTest.FOO)
org.apache.commons.lang3.StringEscapeUtilsTest.FOO.toString == orig(org.apache.commons.lang3.StringEscapeUtilsTest.FOO.toString)
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES)
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES.getClass().getName() == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES.getClass().getName())
org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[] == orig(org.apache.commons.lang3.StringEscapeUtilsTest.HTML_ESCAPES[])
===========================================================================
org.apache.commons.lang3.StringUtils:::CLASS
===========================================================================
org.apache.commons.lang3.StringUtils.containsAny(java.lang.CharSequence, char[]):::ENTER
cs.getClass().getName() == java.lang.String.class
searchChars has only one value
searchChars[] == [44, 34, 13, 10]
searchChars[] sorted by >
size(searchChars[]) == 4
===========================================================================
org.apache.commons.lang3.StringUtils.containsAny(java.lang.CharSequence, char[]):::EXIT1502
return == true
===========================================================================
org.apache.commons.lang3.StringUtils.containsAny(java.lang.CharSequence, char[]):::EXIT1502;condition="return == true"
===========================================================================
org.apache.commons.lang3.StringUtils.containsAny(java.lang.CharSequence, char[]):::EXIT1507
return == false
===========================================================================
org.apache.commons.lang3.StringUtils.containsAny(java.lang.CharSequence, char[]):::EXIT1507;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.StringUtils.containsAny(java.lang.CharSequence, char[]):::EXIT
searchChars[] == orig(searchChars[])
searchChars[] == [44, 34, 13, 10]
searchChars[] sorted by >
===========================================================================
org.apache.commons.lang3.StringUtils.containsAny(java.lang.CharSequence, char[]):::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.lang3.StringUtils.containsAny(java.lang.CharSequence, char[]):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.StringUtils.containsNone(java.lang.CharSequence, char[]):::ENTER
cs.getClass().getName() == java.lang.String.class
searchChars has only one value
searchChars[] == [44, 34, 13, 10]
searchChars[] sorted by >
size(searchChars[]) == 4
===========================================================================
org.apache.commons.lang3.StringUtils.containsNone(java.lang.CharSequence, char[]):::EXIT1758
return == false
===========================================================================
org.apache.commons.lang3.StringUtils.containsNone(java.lang.CharSequence, char[]):::EXIT1758;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.StringUtils.containsNone(java.lang.CharSequence, char[]):::EXIT1763
return == true
orig(cs) has only one value
===========================================================================
org.apache.commons.lang3.StringUtils.containsNone(java.lang.CharSequence, char[]):::EXIT1763;condition="return == true"
===========================================================================
org.apache.commons.lang3.StringUtils.containsNone(java.lang.CharSequence, char[]):::EXIT
searchChars[] == orig(searchChars[])
(return == true)  ==>  (orig(cs) has only one value)
searchChars[] == [44, 34, 13, 10]
searchChars[] sorted by >
===========================================================================
org.apache.commons.lang3.StringUtils.containsNone(java.lang.CharSequence, char[]):::EXIT;condition="return == true"
return == true
orig(cs) has only one value
===========================================================================
org.apache.commons.lang3.StringUtils.containsNone(java.lang.CharSequence, char[]):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.StringUtils.isEmpty(java.lang.CharSequence):::ENTER
cs != null
cs.getClass().getName() == java.lang.String.class
===========================================================================
org.apache.commons.lang3.StringUtils.isEmpty(java.lang.CharSequence):::EXIT
return == false
===========================================================================
org.apache.commons.lang3.StringUtils.isEmpty(java.lang.CharSequence):::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.StringUtils.replace(java.lang.String, java.lang.String, java.lang.String):::ENTER
text != null
searchString != null
searchString.toString one of { "\"", "\"\"" }
replacement != null
replacement.toString one of { "\"", "\"\"" }
===========================================================================
org.apache.commons.lang3.StringUtils.replace(java.lang.String, java.lang.String, java.lang.String):::EXIT
text.toString == orig(text.toString)
searchString.toString == orig(searchString.toString)
replacement.toString == orig(replacement.toString)
searchString.toString one of { "\"", "\"\"" }
replacement.toString one of { "\"", "\"\"" }
return != null
===========================================================================
org.apache.commons.lang3.StringUtils.replace(java.lang.String, java.lang.String, java.lang.String, int):::ENTER
text != null
searchString != null
searchString.toString one of { "\"", "\"\"" }
replacement != null
replacement.toString one of { "\"", "\"\"" }
max == -1
===========================================================================
org.apache.commons.lang3.StringUtils.replace(java.lang.String, java.lang.String, java.lang.String, int):::EXIT4381
text.toString one of { "foo\nbar", "foo\rbar", "foo,bar" }
return.toString one of { "foo\nbar", "foo\rbar", "foo,bar" }
===========================================================================
org.apache.commons.lang3.StringUtils.replace(java.lang.String, java.lang.String, java.lang.String, int):::EXIT4397
text.toString one of { "foo\"\"bar", "foo\"bar" }
return.toString one of { "foo\"\"bar", "foo\"bar" }
===========================================================================
org.apache.commons.lang3.StringUtils.replace(java.lang.String, java.lang.String, java.lang.String, int):::EXIT
text.toString == orig(text.toString)
searchString.toString == orig(searchString.toString)
replacement.toString == orig(replacement.toString)
searchString.toString one of { "\"", "\"\"" }
replacement.toString one of { "\"", "\"\"" }
return != null
===========================================================================
org.apache.commons.lang3.SystemUtils:::CLASS
org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX has only one value
org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX.toString == "Windows"
org.apache.commons.lang3.SystemUtils.USER_HOME_KEY has only one value
org.apache.commons.lang3.SystemUtils.USER_HOME_KEY.toString == "user.home"
org.apache.commons.lang3.SystemUtils.USER_DIR_KEY has only one value
org.apache.commons.lang3.SystemUtils.USER_DIR_KEY.toString == "user.dir"
org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY has only one value
org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY.toString == "java.io.tmpdir"
org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY has only one value
org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY.toString == "java.home"
org.apache.commons.lang3.SystemUtils.AWT_TOOLKIT has only one value
org.apache.commons.lang3.SystemUtils.AWT_TOOLKIT.toString == "sun.awt.X11.XToolkit"
org.apache.commons.lang3.SystemUtils.FILE_ENCODING has only one value
org.apache.commons.lang3.SystemUtils.FILE_ENCODING.toString == "UTF-8"
org.apache.commons.lang3.SystemUtils.FILE_SEPARATOR has only one value
org.apache.commons.lang3.SystemUtils.FILE_SEPARATOR.toString == "/"
org.apache.commons.lang3.SystemUtils.JAVA_AWT_FONTS == null
org.apache.commons.lang3.SystemUtils.JAVA_AWT_GRAPHICSENV has only one value
org.apache.commons.lang3.SystemUtils.JAVA_AWT_GRAPHICSENV.toString == "sun.awt.X11GraphicsEnvironment"
org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS == null
org.apache.commons.lang3.SystemUtils.JAVA_AWT_PRINTERJOB has only one value
org.apache.commons.lang3.SystemUtils.JAVA_AWT_PRINTERJOB.toString == "sun.print.PSPrinterJob"
org.apache.commons.lang3.SystemUtils.JAVA_CLASS_PATH has only one value
org.apache.commons.lang3.SystemUtils.JAVA_CLASS_PATH.toString == "/home/users/byang/daikon-5.7.2/daikon.jar:/home/users/byang/defects4j/framework/projects/lib/junit-4.11.jar:/home/users/byang/launcher/:target/classes:target/tests:target/test-classes:/home/users/byang/daikon-5.7.2/java/ChicoryPremain.jar"
org.apache.commons.lang3.SystemUtils.JAVA_CLASS_VERSION has only one value
org.apache.commons.lang3.SystemUtils.JAVA_CLASS_VERSION.toString == "52.0"
org.apache.commons.lang3.SystemUtils.JAVA_COMPILER == null
org.apache.commons.lang3.SystemUtils.JAVA_ENDORSED_DIRS has only one value
org.apache.commons.lang3.SystemUtils.JAVA_ENDORSED_DIRS.toString == "/usr/lib/jvm/java-8-oracle/jre/lib/endorsed"
org.apache.commons.lang3.SystemUtils.JAVA_EXT_DIRS has only one value
org.apache.commons.lang3.SystemUtils.JAVA_EXT_DIRS.toString == "/usr/lib/jvm/java-8-oracle/jre/lib/ext:/usr/java/packages/lib/ext"
org.apache.commons.lang3.SystemUtils.JAVA_HOME has only one value
org.apache.commons.lang3.SystemUtils.JAVA_HOME.toString == "/usr/lib/jvm/java-8-oracle/jre"
org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR has only one value
org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR.toString == "/tmp"
org.apache.commons.lang3.SystemUtils.JAVA_LIBRARY_PATH has only one value
org.apache.commons.lang3.SystemUtils.JAVA_LIBRARY_PATH.toString == "/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib"
org.apache.commons.lang3.SystemUtils.JAVA_RUNTIME_NAME has only one value
org.apache.commons.lang3.SystemUtils.JAVA_RUNTIME_NAME.toString == "Java(TM) SE Runtime Environment"
org.apache.commons.lang3.SystemUtils.JAVA_RUNTIME_VERSION has only one value
org.apache.commons.lang3.SystemUtils.JAVA_RUNTIME_VERSION.toString == "1.8.0_201-b09"
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_NAME has only one value
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_NAME.toString == "Java Platform API Specification"
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VENDOR has only one value
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VENDOR.toString == "Oracle Corporation"
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION has only one value
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION.toString == "1.8"
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION_AS_ENUM has only one value
org.apache.commons.lang3.JavaVersion.JAVA_0_9 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_1 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_2 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_3 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_4 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_5 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_6 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_7 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_8 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == 1.5
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == "0.9"
org.apache.commons.lang3.JavaVersion.$VALUES has only one value
org.apache.commons.lang3.JavaVersion.$VALUES.getClass().getName() == org.apache.commons.lang3.JavaVersion[].class
org.apache.commons.lang3.JavaVersion.$VALUES[] contains no nulls and has only one value, of length 9
org.apache.commons.lang3.JavaVersion.$VALUES[] elements != null
org.apache.commons.lang3.JavaVersion.$VALUES[].getClass().getName() == [org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion]
org.apache.commons.lang3.JavaVersion.$VALUES[].getClass().getName() elements == org.apache.commons.lang3.JavaVersion.class
org.apache.commons.lang3.JavaVersion.$VALUES[].value == [1.5, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8]
org.apache.commons.lang3.JavaVersion.$VALUES[].name contains no nulls and has only one value, of length 9
org.apache.commons.lang3.JavaVersion.$VALUES[].name elements != null
org.apache.commons.lang3.JavaVersion.$VALUES[].name.toString == [0.9, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8]
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == 1.1
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == "1.1"
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == 1.2
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == "1.2"
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == 1.3
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == "1.3"
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == 1.4
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == "1.4"
org.apache.commons.lang3.JavaVersion.JAVA_1_5.value == 1.5
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == "1.5"
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == 1.6
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == "1.6"
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == 1.7
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == "1.7"
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == 1.8
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == "1.8"
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION_AS_ENUM.value == 1.8
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION_AS_ENUM.name has only one value
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION_AS_ENUM.name.toString == "1.8"
org.apache.commons.lang3.SystemUtils.JAVA_UTIL_PREFS_PREFERENCES_FACTORY == null
org.apache.commons.lang3.SystemUtils.JAVA_VENDOR has only one value
org.apache.commons.lang3.SystemUtils.JAVA_VENDOR.toString == "Oracle Corporation"
org.apache.commons.lang3.SystemUtils.JAVA_VENDOR_URL has only one value
org.apache.commons.lang3.SystemUtils.JAVA_VENDOR_URL.toString == "http://java.oracle.com/"
org.apache.commons.lang3.SystemUtils.JAVA_VERSION has only one value
org.apache.commons.lang3.SystemUtils.JAVA_VERSION.toString == "1.8.0_201"
org.apache.commons.lang3.SystemUtils.JAVA_VM_INFO has only one value
org.apache.commons.lang3.SystemUtils.JAVA_VM_INFO.toString == "mixed mode"
org.apache.commons.lang3.SystemUtils.JAVA_VM_NAME has only one value
org.apache.commons.lang3.SystemUtils.JAVA_VM_NAME.toString == "Java HotSpot(TM) 64-Bit Server VM"
org.apache.commons.lang3.SystemUtils.JAVA_VM_SPECIFICATION_NAME has only one value
org.apache.commons.lang3.SystemUtils.JAVA_VM_SPECIFICATION_NAME.toString == "Java Virtual Machine Specification"
org.apache.commons.lang3.SystemUtils.JAVA_VM_SPECIFICATION_VENDOR has only one value
org.apache.commons.lang3.SystemUtils.JAVA_VM_SPECIFICATION_VENDOR.toString == "Oracle Corporation"
org.apache.commons.lang3.SystemUtils.JAVA_VM_SPECIFICATION_VERSION has only one value
org.apache.commons.lang3.SystemUtils.JAVA_VM_SPECIFICATION_VERSION.toString == "1.8"
org.apache.commons.lang3.SystemUtils.JAVA_VM_VENDOR has only one value
org.apache.commons.lang3.SystemUtils.JAVA_VM_VENDOR.toString == "Oracle Corporation"
org.apache.commons.lang3.SystemUtils.JAVA_VM_VERSION has only one value
org.apache.commons.lang3.SystemUtils.JAVA_VM_VERSION.toString == "25.201-b09"
org.apache.commons.lang3.SystemUtils.LINE_SEPARATOR has only one value
org.apache.commons.lang3.SystemUtils.LINE_SEPARATOR.toString == "\n"
org.apache.commons.lang3.SystemUtils.OS_ARCH has only one value
org.apache.commons.lang3.SystemUtils.OS_ARCH.toString == "amd64"
org.apache.commons.lang3.SystemUtils.OS_NAME has only one value
org.apache.commons.lang3.SystemUtils.OS_NAME.toString == "Linux"
org.apache.commons.lang3.SystemUtils.OS_VERSION has only one value
org.apache.commons.lang3.SystemUtils.OS_VERSION.toString == "4.15.0-45-generic"
org.apache.commons.lang3.SystemUtils.PATH_SEPARATOR has only one value
org.apache.commons.lang3.SystemUtils.PATH_SEPARATOR.toString == ":"
org.apache.commons.lang3.SystemUtils.USER_COUNTRY has only one value
org.apache.commons.lang3.SystemUtils.USER_COUNTRY.toString == "US"
org.apache.commons.lang3.SystemUtils.USER_DIR has only one value
org.apache.commons.lang3.SystemUtils.USER_DIR.toString == "/home/users/byang/Lang/6/f"
org.apache.commons.lang3.SystemUtils.USER_HOME has only one value
org.apache.commons.lang3.SystemUtils.USER_HOME.toString == "/home/users/byang"
org.apache.commons.lang3.SystemUtils.USER_LANGUAGE has only one value
org.apache.commons.lang3.SystemUtils.USER_LANGUAGE.toString == "en"
org.apache.commons.lang3.SystemUtils.USER_NAME has only one value
org.apache.commons.lang3.SystemUtils.USER_NAME.toString == "byang"
org.apache.commons.lang3.SystemUtils.USER_TIMEZONE has only one value
org.apache.commons.lang3.SystemUtils.USER_TIMEZONE.toString == "America/Los_Angeles"
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == false
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_2 == false
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_3 == false
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_4 == false
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_5 == false
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_6 == false
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_7 == false
org.apache.commons.lang3.SystemUtils.IS_OS_AIX == false
org.apache.commons.lang3.SystemUtils.IS_OS_HP_UX == false
org.apache.commons.lang3.SystemUtils.IS_OS_IRIX == false
org.apache.commons.lang3.SystemUtils.IS_OS_LINUX == true
org.apache.commons.lang3.SystemUtils.IS_OS_MAC == false
org.apache.commons.lang3.SystemUtils.IS_OS_MAC_OSX == false
org.apache.commons.lang3.SystemUtils.IS_OS_FREE_BSD == false
org.apache.commons.lang3.SystemUtils.IS_OS_OPEN_BSD == false
org.apache.commons.lang3.SystemUtils.IS_OS_NET_BSD == false
org.apache.commons.lang3.SystemUtils.IS_OS_OS2 == false
org.apache.commons.lang3.SystemUtils.IS_OS_SOLARIS == false
org.apache.commons.lang3.SystemUtils.IS_OS_SUN_OS == false
org.apache.commons.lang3.SystemUtils.IS_OS_UNIX == true
org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS == false
org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_2000 == false
org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_2003 == false
org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_2008 == false
org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_95 == false
org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_98 == false
org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_ME == false
org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_NT == false
org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_XP == false
org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_VISTA == false
org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_7 == false
org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_8 == false
size(org.apache.commons.lang3.JavaVersion.$VALUES[]) == 9
===========================================================================
org.apache.commons.lang3.SystemUtils.getJavaVersionMatches(java.lang.String):::ENTER
===========================================================================
org.apache.commons.lang3.SystemUtils.getJavaVersionMatches(java.lang.String):::EXIT
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.$VALUES == orig(org.apache.commons.lang3.JavaVersion.$VALUES)
org.apache.commons.lang3.JavaVersion.$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.$VALUES.getClass().getName())
org.apache.commons.lang3.JavaVersion.$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.$VALUES[])
org.apache.commons.lang3.JavaVersion.$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.$VALUES[].value)
org.apache.commons.lang3.JavaVersion.$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
versionPrefix.toString == orig(versionPrefix.toString)
return == false
===========================================================================
org.apache.commons.lang3.SystemUtils.getJavaVersionMatches(java.lang.String):::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.SystemUtils.getOSMatches(java.lang.String, java.lang.String):::ENTER
osNamePrefix.toString one of { "Windows", "Windows 9", "Windows Server 2008" }
===========================================================================
org.apache.commons.lang3.SystemUtils.getOSMatches(java.lang.String, java.lang.String):::EXIT
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.$VALUES == orig(org.apache.commons.lang3.JavaVersion.$VALUES)
org.apache.commons.lang3.JavaVersion.$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.$VALUES.getClass().getName())
org.apache.commons.lang3.JavaVersion.$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.$VALUES[])
org.apache.commons.lang3.JavaVersion.$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.$VALUES[].value)
org.apache.commons.lang3.JavaVersion.$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
osNamePrefix.toString == orig(osNamePrefix.toString)
osVersionPrefix.toString == orig(osVersionPrefix.toString)
osNamePrefix.toString one of { "Windows", "Windows 9", "Windows Server 2008" }
return == false
===========================================================================
org.apache.commons.lang3.SystemUtils.getOSMatches(java.lang.String, java.lang.String):::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.SystemUtils.getOSMatchesName(java.lang.String):::ENTER
===========================================================================
org.apache.commons.lang3.SystemUtils.getOSMatchesName(java.lang.String):::EXIT
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.$VALUES == orig(org.apache.commons.lang3.JavaVersion.$VALUES)
org.apache.commons.lang3.JavaVersion.$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.$VALUES.getClass().getName())
org.apache.commons.lang3.JavaVersion.$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.$VALUES[])
org.apache.commons.lang3.JavaVersion.$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.$VALUES[].value)
org.apache.commons.lang3.JavaVersion.$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
osNamePrefix.toString == orig(osNamePrefix.toString)
(return == true)  ==>  (orig(osNamePrefix) has only one value)
(return == true)  ==>  (osNamePrefix.toString == "Linux")
===========================================================================
org.apache.commons.lang3.SystemUtils.getOSMatchesName(java.lang.String):::EXIT;condition="return == true"
osNamePrefix.toString == "Linux"
return == true
orig(osNamePrefix) has only one value
===========================================================================
org.apache.commons.lang3.SystemUtils.getOSMatchesName(java.lang.String):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.SystemUtils.getSystemProperty(java.lang.String):::ENTER
===========================================================================
org.apache.commons.lang3.SystemUtils.getSystemProperty(java.lang.String):::EXIT1321
===========================================================================
org.apache.commons.lang3.SystemUtils.getSystemProperty(java.lang.String):::EXIT
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.$VALUES == orig(org.apache.commons.lang3.JavaVersion.$VALUES)
org.apache.commons.lang3.JavaVersion.$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.$VALUES.getClass().getName())
org.apache.commons.lang3.JavaVersion.$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.$VALUES[])
org.apache.commons.lang3.JavaVersion.$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.$VALUES[].value)
org.apache.commons.lang3.JavaVersion.$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
property.toString == orig(property.toString)
===========================================================================
org.apache.commons.lang3.SystemUtils.isJavaVersionAtLeast(org.apache.commons.lang3.JavaVersion):::ENTER
requiredVersion has only one value
requiredVersion.value == 1.5
requiredVersion.name has only one value
requiredVersion.name.toString == "1.5"
===========================================================================
org.apache.commons.lang3.SystemUtils.isJavaVersionAtLeast(org.apache.commons.lang3.JavaVersion):::EXIT
org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX == orig(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX)
org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX.toString == orig(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX.toString)
org.apache.commons.lang3.SystemUtils.USER_HOME_KEY == orig(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY)
org.apache.commons.lang3.SystemUtils.USER_HOME_KEY.toString == orig(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY.toString)
org.apache.commons.lang3.SystemUtils.USER_DIR_KEY == orig(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY)
org.apache.commons.lang3.SystemUtils.USER_DIR_KEY.toString == orig(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY.toString)
org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY == orig(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY)
org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY.toString)
org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY == orig(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY)
org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY.toString)
org.apache.commons.lang3.SystemUtils.AWT_TOOLKIT == orig(org.apache.commons.lang3.SystemUtils.AWT_TOOLKIT)
org.apache.commons.lang3.SystemUtils.AWT_TOOLKIT.toString == orig(org.apache.commons.lang3.SystemUtils.AWT_TOOLKIT.toString)
org.apache.commons.lang3.SystemUtils.FILE_ENCODING == orig(org.apache.commons.lang3.SystemUtils.FILE_ENCODING)
org.apache.commons.lang3.SystemUtils.FILE_ENCODING.toString == orig(org.apache.commons.lang3.SystemUtils.FILE_ENCODING.toString)
org.apache.commons.lang3.SystemUtils.FILE_SEPARATOR == orig(org.apache.commons.lang3.SystemUtils.FILE_SEPARATOR)
org.apache.commons.lang3.SystemUtils.FILE_SEPARATOR.toString == orig(org.apache.commons.lang3.SystemUtils.FILE_SEPARATOR.toString)
org.apache.commons.lang3.SystemUtils.JAVA_AWT_FONTS == orig(org.apache.commons.lang3.SystemUtils.JAVA_AWT_FONTS)
org.apache.commons.lang3.SystemUtils.JAVA_AWT_GRAPHICSENV == orig(org.apache.commons.lang3.SystemUtils.JAVA_AWT_GRAPHICSENV)
org.apache.commons.lang3.SystemUtils.JAVA_AWT_GRAPHICSENV.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_AWT_GRAPHICSENV.toString)
org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS == orig(org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS)
org.apache.commons.lang3.SystemUtils.JAVA_AWT_PRINTERJOB == orig(org.apache.commons.lang3.SystemUtils.JAVA_AWT_PRINTERJOB)
org.apache.commons.lang3.SystemUtils.JAVA_AWT_PRINTERJOB.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_AWT_PRINTERJOB.toString)
org.apache.commons.lang3.SystemUtils.JAVA_CLASS_PATH == orig(org.apache.commons.lang3.SystemUtils.JAVA_CLASS_PATH)
org.apache.commons.lang3.SystemUtils.JAVA_CLASS_PATH.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_CLASS_PATH.toString)
org.apache.commons.lang3.SystemUtils.JAVA_CLASS_VERSION == orig(org.apache.commons.lang3.SystemUtils.JAVA_CLASS_VERSION)
org.apache.commons.lang3.SystemUtils.JAVA_CLASS_VERSION.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_CLASS_VERSION.toString)
org.apache.commons.lang3.SystemUtils.JAVA_COMPILER == orig(org.apache.commons.lang3.SystemUtils.JAVA_COMPILER)
org.apache.commons.lang3.SystemUtils.JAVA_ENDORSED_DIRS == orig(org.apache.commons.lang3.SystemUtils.JAVA_ENDORSED_DIRS)
org.apache.commons.lang3.SystemUtils.JAVA_ENDORSED_DIRS.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_ENDORSED_DIRS.toString)
org.apache.commons.lang3.SystemUtils.JAVA_EXT_DIRS == orig(org.apache.commons.lang3.SystemUtils.JAVA_EXT_DIRS)
org.apache.commons.lang3.SystemUtils.JAVA_EXT_DIRS.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_EXT_DIRS.toString)
org.apache.commons.lang3.SystemUtils.JAVA_HOME == orig(org.apache.commons.lang3.SystemUtils.JAVA_HOME)
org.apache.commons.lang3.SystemUtils.JAVA_HOME.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_HOME.toString)
org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR == orig(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR)
org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR.toString)
org.apache.commons.lang3.SystemUtils.JAVA_LIBRARY_PATH == orig(org.apache.commons.lang3.SystemUtils.JAVA_LIBRARY_PATH)
org.apache.commons.lang3.SystemUtils.JAVA_LIBRARY_PATH.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_LIBRARY_PATH.toString)
org.apache.commons.lang3.SystemUtils.JAVA_RUNTIME_NAME == orig(org.apache.commons.lang3.SystemUtils.JAVA_RUNTIME_NAME)
org.apache.commons.lang3.SystemUtils.JAVA_RUNTIME_NAME.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_RUNTIME_NAME.toString)
org.apache.commons.lang3.SystemUtils.JAVA_RUNTIME_VERSION == orig(org.apache.commons.lang3.SystemUtils.JAVA_RUNTIME_VERSION)
org.apache.commons.lang3.SystemUtils.JAVA_RUNTIME_VERSION.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_RUNTIME_VERSION.toString)
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_NAME == orig(org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_NAME)
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_NAME.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_NAME.toString)
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VENDOR == orig(org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VENDOR)
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VENDOR.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VENDOR.toString)
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION == orig(org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION)
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION.toString)
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION_AS_ENUM == orig(org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION_AS_ENUM)
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.$VALUES == orig(org.apache.commons.lang3.JavaVersion.$VALUES)
org.apache.commons.lang3.JavaVersion.$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.$VALUES.getClass().getName())
org.apache.commons.lang3.JavaVersion.$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.$VALUES[])
org.apache.commons.lang3.JavaVersion.$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.$VALUES[].value)
org.apache.commons.lang3.JavaVersion.$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION_AS_ENUM.value == orig(org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION_AS_ENUM.value)
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION_AS_ENUM.name == orig(org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION_AS_ENUM.name)
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION_AS_ENUM.name.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION_AS_ENUM.name.toString)
org.apache.commons.lang3.SystemUtils.JAVA_UTIL_PREFS_PREFERENCES_FACTORY == orig(org.apache.commons.lang3.SystemUtils.JAVA_UTIL_PREFS_PREFERENCES_FACTORY)
org.apache.commons.lang3.SystemUtils.JAVA_VENDOR == orig(org.apache.commons.lang3.SystemUtils.JAVA_VENDOR)
org.apache.commons.lang3.SystemUtils.JAVA_VENDOR.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_VENDOR.toString)
org.apache.commons.lang3.SystemUtils.JAVA_VENDOR_URL == orig(org.apache.commons.lang3.SystemUtils.JAVA_VENDOR_URL)
org.apache.commons.lang3.SystemUtils.JAVA_VENDOR_URL.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_VENDOR_URL.toString)
org.apache.commons.lang3.SystemUtils.JAVA_VERSION == orig(org.apache.commons.lang3.SystemUtils.JAVA_VERSION)
org.apache.commons.lang3.SystemUtils.JAVA_VERSION.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_VERSION.toString)
org.apache.commons.lang3.SystemUtils.JAVA_VM_INFO == orig(org.apache.commons.lang3.SystemUtils.JAVA_VM_INFO)
org.apache.commons.lang3.SystemUtils.JAVA_VM_INFO.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_VM_INFO.toString)
org.apache.commons.lang3.SystemUtils.JAVA_VM_NAME == orig(org.apache.commons.lang3.SystemUtils.JAVA_VM_NAME)
org.apache.commons.lang3.SystemUtils.JAVA_VM_NAME.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_VM_NAME.toString)
org.apache.commons.lang3.SystemUtils.JAVA_VM_SPECIFICATION_NAME == orig(org.apache.commons.lang3.SystemUtils.JAVA_VM_SPECIFICATION_NAME)
org.apache.commons.lang3.SystemUtils.JAVA_VM_SPECIFICATION_NAME.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_VM_SPECIFICATION_NAME.toString)
org.apache.commons.lang3.SystemUtils.JAVA_VM_SPECIFICATION_VENDOR == orig(org.apache.commons.lang3.SystemUtils.JAVA_VM_SPECIFICATION_VENDOR)
org.apache.commons.lang3.SystemUtils.JAVA_VM_SPECIFICATION_VENDOR.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_VM_SPECIFICATION_VENDOR.toString)
org.apache.commons.lang3.SystemUtils.JAVA_VM_SPECIFICATION_VERSION == orig(org.apache.commons.lang3.SystemUtils.JAVA_VM_SPECIFICATION_VERSION)
org.apache.commons.lang3.SystemUtils.JAVA_VM_SPECIFICATION_VERSION.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_VM_SPECIFICATION_VERSION.toString)
org.apache.commons.lang3.SystemUtils.JAVA_VM_VENDOR == orig(org.apache.commons.lang3.SystemUtils.JAVA_VM_VENDOR)
org.apache.commons.lang3.SystemUtils.JAVA_VM_VENDOR.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_VM_VENDOR.toString)
org.apache.commons.lang3.SystemUtils.JAVA_VM_VERSION == orig(org.apache.commons.lang3.SystemUtils.JAVA_VM_VERSION)
org.apache.commons.lang3.SystemUtils.JAVA_VM_VERSION.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_VM_VERSION.toString)
org.apache.commons.lang3.SystemUtils.LINE_SEPARATOR == orig(org.apache.commons.lang3.SystemUtils.LINE_SEPARATOR)
org.apache.commons.lang3.SystemUtils.LINE_SEPARATOR.toString == orig(org.apache.commons.lang3.SystemUtils.LINE_SEPARATOR.toString)
org.apache.commons.lang3.SystemUtils.OS_ARCH == orig(org.apache.commons.lang3.SystemUtils.OS_ARCH)
org.apache.commons.lang3.SystemUtils.OS_ARCH.toString == orig(org.apache.commons.lang3.SystemUtils.OS_ARCH.toString)
org.apache.commons.lang3.SystemUtils.OS_NAME == orig(org.apache.commons.lang3.SystemUtils.OS_NAME)
org.apache.commons.lang3.SystemUtils.OS_NAME.toString == orig(org.apache.commons.lang3.SystemUtils.OS_NAME.toString)
org.apache.commons.lang3.SystemUtils.OS_VERSION == orig(org.apache.commons.lang3.SystemUtils.OS_VERSION)
org.apache.commons.lang3.SystemUtils.OS_VERSION.toString == orig(org.apache.commons.lang3.SystemUtils.OS_VERSION.toString)
org.apache.commons.lang3.SystemUtils.PATH_SEPARATOR == orig(org.apache.commons.lang3.SystemUtils.PATH_SEPARATOR)
org.apache.commons.lang3.SystemUtils.PATH_SEPARATOR.toString == orig(org.apache.commons.lang3.SystemUtils.PATH_SEPARATOR.toString)
org.apache.commons.lang3.SystemUtils.USER_COUNTRY == orig(org.apache.commons.lang3.SystemUtils.USER_COUNTRY)
org.apache.commons.lang3.SystemUtils.USER_COUNTRY.toString == orig(org.apache.commons.lang3.SystemUtils.USER_COUNTRY.toString)
org.apache.commons.lang3.SystemUtils.USER_DIR == orig(org.apache.commons.lang3.SystemUtils.USER_DIR)
org.apache.commons.lang3.SystemUtils.USER_DIR.toString == orig(org.apache.commons.lang3.SystemUtils.USER_DIR.toString)
org.apache.commons.lang3.SystemUtils.USER_HOME == orig(org.apache.commons.lang3.SystemUtils.USER_HOME)
org.apache.commons.lang3.SystemUtils.USER_HOME.toString == orig(org.apache.commons.lang3.SystemUtils.USER_HOME.toString)
org.apache.commons.lang3.SystemUtils.USER_LANGUAGE == orig(org.apache.commons.lang3.SystemUtils.USER_LANGUAGE)
org.apache.commons.lang3.SystemUtils.USER_LANGUAGE.toString == orig(org.apache.commons.lang3.SystemUtils.USER_LANGUAGE.toString)
org.apache.commons.lang3.SystemUtils.USER_NAME == orig(org.apache.commons.lang3.SystemUtils.USER_NAME)
org.apache.commons.lang3.SystemUtils.USER_NAME.toString == orig(org.apache.commons.lang3.SystemUtils.USER_NAME.toString)
org.apache.commons.lang3.SystemUtils.USER_TIMEZONE == orig(org.apache.commons.lang3.SystemUtils.USER_TIMEZONE)
org.apache.commons.lang3.SystemUtils.USER_TIMEZONE.toString == orig(org.apache.commons.lang3.SystemUtils.USER_TIMEZONE.toString)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == orig(org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_2 == orig(org.apache.commons.lang3.SystemUtils.IS_JAVA_1_2)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_3 == orig(org.apache.commons.lang3.SystemUtils.IS_JAVA_1_3)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_4 == orig(org.apache.commons.lang3.SystemUtils.IS_JAVA_1_4)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_5 == orig(org.apache.commons.lang3.SystemUtils.IS_JAVA_1_5)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_6 == orig(org.apache.commons.lang3.SystemUtils.IS_JAVA_1_6)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_7 == orig(org.apache.commons.lang3.SystemUtils.IS_JAVA_1_7)
org.apache.commons.lang3.SystemUtils.IS_OS_AIX == orig(org.apache.commons.lang3.SystemUtils.IS_OS_AIX)
org.apache.commons.lang3.SystemUtils.IS_OS_HP_UX == orig(org.apache.commons.lang3.SystemUtils.IS_OS_HP_UX)
org.apache.commons.lang3.SystemUtils.IS_OS_IRIX == orig(org.apache.commons.lang3.SystemUtils.IS_OS_IRIX)
org.apache.commons.lang3.SystemUtils.IS_OS_LINUX == orig(org.apache.commons.lang3.SystemUtils.IS_OS_LINUX)
org.apache.commons.lang3.SystemUtils.IS_OS_MAC == orig(org.apache.commons.lang3.SystemUtils.IS_OS_MAC)
org.apache.commons.lang3.SystemUtils.IS_OS_MAC_OSX == orig(org.apache.commons.lang3.SystemUtils.IS_OS_MAC_OSX)
org.apache.commons.lang3.SystemUtils.IS_OS_FREE_BSD == orig(org.apache.commons.lang3.SystemUtils.IS_OS_FREE_BSD)
org.apache.commons.lang3.SystemUtils.IS_OS_OPEN_BSD == orig(org.apache.commons.lang3.SystemUtils.IS_OS_OPEN_BSD)
org.apache.commons.lang3.SystemUtils.IS_OS_NET_BSD == orig(org.apache.commons.lang3.SystemUtils.IS_OS_NET_BSD)
org.apache.commons.lang3.SystemUtils.IS_OS_OS2 == orig(org.apache.commons.lang3.SystemUtils.IS_OS_OS2)
org.apache.commons.lang3.SystemUtils.IS_OS_SOLARIS == orig(org.apache.commons.lang3.SystemUtils.IS_OS_SOLARIS)
org.apache.commons.lang3.SystemUtils.IS_OS_SUN_OS == orig(org.apache.commons.lang3.SystemUtils.IS_OS_SUN_OS)
org.apache.commons.lang3.SystemUtils.IS_OS_UNIX == orig(org.apache.commons.lang3.SystemUtils.IS_OS_UNIX)
org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS == orig(org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS)
org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_2000 == orig(org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_2000)
org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_2003 == orig(org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_2003)
org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_2008 == orig(org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_2008)
org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_95 == orig(org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_95)
org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_98 == orig(org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_98)
org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_ME == orig(org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_ME)
org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_NT == orig(org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_NT)
org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_XP == orig(org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_XP)
org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_VISTA == orig(org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_VISTA)
org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_7 == orig(org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_7)
org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_8 == orig(org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_8)
requiredVersion.value == orig(requiredVersion.value)
requiredVersion.name == orig(requiredVersion.name)
requiredVersion.name.toString == orig(requiredVersion.name.toString)
requiredVersion.value == 1.5
requiredVersion.name has only one value
requiredVersion.name.toString == "1.5"
return == true
===========================================================================
org.apache.commons.lang3.SystemUtils.isJavaVersionAtLeast(org.apache.commons.lang3.JavaVersion):::EXIT;condition="return == true"
===========================================================================
org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(java.lang.String, java.lang.String):::ENTER
version has only one value
version.toString == "1.8"
===========================================================================
org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(java.lang.String, java.lang.String):::EXIT1407
===========================================================================
org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(java.lang.String, java.lang.String):::EXIT1407;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(java.lang.String, java.lang.String):::EXIT
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.$VALUES == orig(org.apache.commons.lang3.JavaVersion.$VALUES)
org.apache.commons.lang3.JavaVersion.$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.$VALUES.getClass().getName())
org.apache.commons.lang3.JavaVersion.$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.$VALUES[])
org.apache.commons.lang3.JavaVersion.$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.$VALUES[].value)
org.apache.commons.lang3.JavaVersion.$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
version.toString == orig(version.toString)
versionPrefix.toString == orig(versionPrefix.toString)
version.toString == "1.8"
return == false
===========================================================================
org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(java.lang.String, java.lang.String):::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSMatch(java.lang.String, java.lang.String, java.lang.String, java.lang.String):::ENTER
osName has only one value
osName.toString == "Linux"
osVersion has only one value
osVersion.toString == "4.15.0-45-generic"
osNamePrefix.toString one of { "Windows", "Windows 9", "Windows Server 2008" }
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSMatch(java.lang.String, java.lang.String, java.lang.String, java.lang.String):::EXIT1426
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSMatch(java.lang.String, java.lang.String, java.lang.String, java.lang.String):::EXIT1426;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSMatch(java.lang.String, java.lang.String, java.lang.String, java.lang.String):::EXIT
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.$VALUES == orig(org.apache.commons.lang3.JavaVersion.$VALUES)
org.apache.commons.lang3.JavaVersion.$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.$VALUES.getClass().getName())
org.apache.commons.lang3.JavaVersion.$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.$VALUES[])
org.apache.commons.lang3.JavaVersion.$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.$VALUES[].value)
org.apache.commons.lang3.JavaVersion.$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
osName.toString == orig(osName.toString)
osVersion.toString == orig(osVersion.toString)
osNamePrefix.toString == orig(osNamePrefix.toString)
osVersionPrefix.toString == orig(osVersionPrefix.toString)
osName.toString == "Linux"
osVersion.toString == "4.15.0-45-generic"
osNamePrefix.toString one of { "Windows", "Windows 9", "Windows Server 2008" }
return == false
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSMatch(java.lang.String, java.lang.String, java.lang.String, java.lang.String):::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSNameMatch(java.lang.String, java.lang.String):::ENTER
osName has only one value
osName.toString == "Linux"
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSNameMatch(java.lang.String, java.lang.String):::EXIT1443
(return == true)  ==>  (orig(osNamePrefix) has only one value)
(return == true)  ==>  (osNamePrefix.toString == "Linux")
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSNameMatch(java.lang.String, java.lang.String):::EXIT1443;condition="return == true"
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSNameMatch(java.lang.String, java.lang.String):::EXIT1443;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSNameMatch(java.lang.String, java.lang.String):::EXIT
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.$VALUES == orig(org.apache.commons.lang3.JavaVersion.$VALUES)
org.apache.commons.lang3.JavaVersion.$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.$VALUES.getClass().getName())
org.apache.commons.lang3.JavaVersion.$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.$VALUES[])
org.apache.commons.lang3.JavaVersion.$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.$VALUES[].value)
org.apache.commons.lang3.JavaVersion.$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
osName.toString == orig(osName.toString)
osNamePrefix.toString == orig(osNamePrefix.toString)
(return == true)  ==>  (orig(osNamePrefix) has only one value)
(return == true)  ==>  (osNamePrefix.toString == "Linux")
osName.toString == "Linux"
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSNameMatch(java.lang.String, java.lang.String):::EXIT;condition="return == true"
osNamePrefix.toString == "Linux"
return == true
orig(osNamePrefix) has only one value
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSNameMatch(java.lang.String, java.lang.String):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.reflect.AAClass$BBClass:::OBJECT
this has only one value
org.apache.commons.lang3.reflect.AAClass.this has only one value
===========================================================================
org.apache.commons.lang3.reflect.AAClass$BBClass.BBClass(org.apache.commons.lang3.reflect.AAClass):::ENTER
org.apache.commons.lang3.reflect.AAClass.this has only one value
===========================================================================
org.apache.commons.lang3.reflect.AAClass$BBClass.BBClass(org.apache.commons.lang3.reflect.AAClass):::EXIT
org.apache.commons.lang3.reflect.AAClass.this == orig(org.apache.commons.lang3.reflect.AAClass.this)
===========================================================================
org.apache.commons.lang3.reflect.AAClass:::OBJECT
this has only one value
===========================================================================
org.apache.commons.lang3.reflect.AAClass.AAClass():::EXIT
===========================================================================
org.apache.commons.lang3.reflect.AClass:::OBJECT
this has only one value
this.bClass == null
this.cClass == null
this.dClass == null
this.eClass == null
this.fClass == null
this.gClass == null
===========================================================================
org.apache.commons.lang3.reflect.AClass.AClass(org.apache.commons.lang3.reflect.AAClass):::ENTER
enclosingInstance has only one value
===========================================================================
org.apache.commons.lang3.reflect.AClass.AClass(org.apache.commons.lang3.reflect.AAClass):::EXIT
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.getClosestParentType(java.lang.Class, java.lang.Class):::ENTER
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.getClosestParentType(java.lang.Class, java.lang.Class):::EXIT828
return.getClass().getName() == sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl.class
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.getClosestParentType(java.lang.Class, java.lang.Class):::EXIT834
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.getClosestParentType(java.lang.Class, java.lang.Class):::EXIT
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(java.lang.reflect.WildcardType):::ENTER
wildcardType.getClass().getName() == sun.reflect.generics.reflectiveObjects.WildcardTypeImpl.class
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(java.lang.reflect.WildcardType):::EXIT
return.getClass().getName() == java.lang.reflect.Type[].class
size(return[]) == 1
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(java.lang.reflect.WildcardType):::ENTER
wildcardType.getClass().getName() == sun.reflect.generics.reflectiveObjects.WildcardTypeImpl.class
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(java.lang.reflect.WildcardType):::EXIT
return.getClass().getName() == java.lang.reflect.Type[].class
return[] elements != null
size(return[]) == 1
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.getRawType(java.lang.reflect.ParameterizedType):::ENTER
parameterizedType.getClass().getName() == sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl.class
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.getRawType(java.lang.reflect.ParameterizedType):::EXIT
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(java.lang.Class, java.lang.Class, java.util.Map):::ENTER
subtypeVarAssigns.getClass().getName() == java.util.HashMap.class
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(java.lang.Class, java.lang.Class, java.util.Map):::EXIT676
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(java.lang.Class, java.lang.Class, java.util.Map):::EXIT680
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(java.lang.Class, java.lang.Class, java.util.Map):::EXIT
return.getClass().getName() == java.util.HashMap.class
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(java.lang.reflect.ParameterizedType, java.lang.Class, java.util.Map):::ENTER
parameterizedType.getClass().getName() == sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl.class
subtypeVarAssigns.getClass().getName() == java.util.HashMap.class
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(java.lang.reflect.ParameterizedType, java.lang.Class, java.util.Map):::EXIT635
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(java.lang.reflect.ParameterizedType, java.lang.Class, java.util.Map):::EXIT639
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(java.lang.reflect.ParameterizedType, java.lang.Class, java.util.Map):::EXIT
return.getClass().getName() == java.util.HashMap.class
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(java.lang.reflect.Type, java.lang.Class, java.util.Map):::ENTER
subtypeVarAssigns.getClass().getName() == java.util.HashMap.class
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(java.lang.reflect.Type, java.lang.Class, java.util.Map):::EXIT548
orig(type.getClass().getName()) == java.lang.Class.class
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(java.lang.reflect.Type, java.lang.Class, java.util.Map):::EXIT552
orig(type.getClass().getName()) == sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl.class
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(java.lang.reflect.Type, java.lang.Class, java.util.Map):::EXIT
return.getClass().getName() == java.util.HashMap.class
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.Class):::ENTER
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.Class):::EXIT115
return == true
orig(type) == null
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.Class):::EXIT115;condition="return == true"
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.Class):::EXIT121
return == false
orig(type.getClass().getName()) == java.lang.Class.class
orig(toClass) == null
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.Class):::EXIT121;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.Class):::EXIT126
return == true
orig(type.getClass().getName()) == java.lang.Class.class
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.Class):::EXIT126;condition="return == true"
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.Class):::EXIT131
orig(type.getClass().getName()) == java.lang.Class.class
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.Class):::EXIT131;condition="return == true"
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.Class):::EXIT131;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.Class):::EXIT136
return == true
orig(type.getClass().getName()) == sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl.class
orig(toClass) has only one value
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.Class):::EXIT136;condition="return == true"
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.Class):::EXIT155
return == true
orig(type.getClass().getName()) == sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl.class
orig(toClass) has only one value
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.Class):::EXIT155;condition="return == true"
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.Class):::EXIT
(return == false)  ==>  (orig(type.getClass().getName()) == java.lang.Class.class)
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.Class):::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.Class):::EXIT;condition="not(return == true)"
return == false
orig(type.getClass().getName()) == java.lang.Class.class
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.GenericArrayType, java.util.Map):::ENTER
toGenericArrayType.getClass().getName() == sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl.class
typeVarAssigns == null
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.GenericArrayType, java.util.Map):::EXIT274
return == true
orig(type.getClass().getName()) == sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl.class
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.GenericArrayType, java.util.Map):::EXIT274;condition="return == true"
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.GenericArrayType, java.util.Map):::EXIT283
return == true
orig(type.getClass().getName()) == java.lang.Class.class
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.GenericArrayType, java.util.Map):::EXIT283;condition="return == true"
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.GenericArrayType, java.util.Map):::EXIT289
orig(type.getClass().getName()) == sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl.class
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.GenericArrayType, java.util.Map):::EXIT289;condition="return == true"
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.GenericArrayType, java.util.Map):::EXIT289;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.GenericArrayType, java.util.Map):::EXIT
(return == false)  ==>  (orig(type.getClass().getName()) == sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl.class)
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.GenericArrayType, java.util.Map):::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.GenericArrayType, java.util.Map):::EXIT;condition="not(return == true)"
return == false
orig(type.getClass().getName()) == sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl.class
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.ParameterizedType, java.util.Map):::ENTER
toParameterizedType.getClass().getName() == sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl.class
typeVarAssigns == null
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.ParameterizedType, java.util.Map):::EXIT193
return == true
orig(type.getClass().getName()) == sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl.class
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.ParameterizedType, java.util.Map):::EXIT193;condition="return == true"
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.ParameterizedType, java.util.Map):::EXIT211
return == true
orig(type) has only one value
orig(type.getClass().getName()) == java.lang.Class.class
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.ParameterizedType, java.util.Map):::EXIT211;condition="return == true"
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.ParameterizedType, java.util.Map):::EXIT230
return == false
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.ParameterizedType, java.util.Map):::EXIT230;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.ParameterizedType, java.util.Map):::EXIT234
return == true
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.ParameterizedType, java.util.Map):::EXIT234;condition="return == true"
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.ParameterizedType, java.util.Map):::EXIT
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.ParameterizedType, java.util.Map):::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.ParameterizedType, java.util.Map):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.Type):::ENTER
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.Type):::EXIT
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.Type):::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.Type):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.Type, java.util.Map):::ENTER
typeVarAssigns == null
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.Type, java.util.Map):::EXIT80
(return == false)  ==>  (orig(type.getClass().getName()) == java.lang.Class.class)
orig(toType.getClass().getName()) == java.lang.Class.class
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.Type, java.util.Map):::EXIT80;condition="return == true"
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.Type, java.util.Map):::EXIT80;condition="not(return == true)"
orig(type.getClass().getName()) == java.lang.Class.class
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.Type, java.util.Map):::EXIT84
orig(toType.getClass().getName()) == sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl.class
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.Type, java.util.Map):::EXIT84;condition="return == true"
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.Type, java.util.Map):::EXIT84;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.Type, java.util.Map):::EXIT88
(return == false)  ==>  (orig(type.getClass().getName()) == sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl.class)
orig(toType.getClass().getName()) == sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl.class
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.Type, java.util.Map):::EXIT88;condition="return == true"
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.Type, java.util.Map):::EXIT88;condition="not(return == true)"
orig(type.getClass().getName()) == sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl.class
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.Type, java.util.Map):::EXIT92
orig(toType.getClass().getName()) == sun.reflect.generics.reflectiveObjects.WildcardTypeImpl.class
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.Type, java.util.Map):::EXIT92;condition="return == true"
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.Type, java.util.Map):::EXIT92;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.Type, java.util.Map):::EXIT
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.Type, java.util.Map):::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.Type, java.util.Map):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.WildcardType, java.util.Map):::ENTER
toWildcardType.getClass().getName() == sun.reflect.generics.reflectiveObjects.WildcardTypeImpl.class
typeVarAssigns == null
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.WildcardType, java.util.Map):::EXIT371
return == false
orig(type.getClass().getName()) == sun.reflect.generics.reflectiveObjects.WildcardTypeImpl.class
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.WildcardType, java.util.Map):::EXIT371;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.WildcardType, java.util.Map):::EXIT386
return == false
orig(type.getClass().getName()) == sun.reflect.generics.reflectiveObjects.WildcardTypeImpl.class
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.WildcardType, java.util.Map):::EXIT386;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.WildcardType, java.util.Map):::EXIT391
return == true
orig(type.getClass().getName()) == sun.reflect.generics.reflectiveObjects.WildcardTypeImpl.class
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.WildcardType, java.util.Map):::EXIT391;condition="return == true"
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.WildcardType, java.util.Map):::EXIT399
return == false
orig(type) has only one value
orig(type.getClass().getName()) == java.lang.Class.class
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.WildcardType, java.util.Map):::EXIT399;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.WildcardType, java.util.Map):::EXIT408
return == false
orig(type) has only one value
orig(type.getClass().getName()) == java.lang.Class.class
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.WildcardType, java.util.Map):::EXIT408;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.WildcardType, java.util.Map):::EXIT412
return == true
orig(type.getClass().getName()) == java.lang.Class.class
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.WildcardType, java.util.Map):::EXIT412;condition="return == true"
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.WildcardType, java.util.Map):::EXIT
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.WildcardType, java.util.Map):::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.WildcardType, java.util.Map):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(java.lang.reflect.Type[]):::ENTER
bounds.getClass().getName() == java.lang.reflect.Type[].class
bounds[] elements != null
size(bounds[]) == 1
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(java.lang.reflect.Type[]):::EXIT878
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(java.lang.reflect.Type[]):::EXIT
bounds[] == orig(bounds[])
bounds[] elements != null
return.getClass().getName() == java.lang.reflect.Type[].class
return[] elements != null
size(return[]) == 1
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.substituteTypeVariables(java.lang.reflect.Type, java.util.Map):::ENTER
type.getClass().getName() == java.lang.Class.class
typeVarAssigns == null
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.substituteTypeVariables(java.lang.reflect.Type, java.util.Map):::EXIT483
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.substituteTypeVariables(java.lang.reflect.Type, java.util.Map):::EXIT
return.getClass().getName() == java.lang.Class.class
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.unrollVariableAssignments(java.lang.reflect.TypeVariable, java.util.Map):::ENTER
var.getClass().getName() == sun.reflect.generics.reflectiveObjects.TypeVariableImpl.class
typeVarAssigns.getClass().getName() == java.util.HashMap.class
===========================================================================
org.apache.commons.lang3.reflect.TypeUtils.unrollVariableAssignments(java.lang.reflect.TypeVariable, java.util.Map):::EXIT
===========================================================================
org.apache.commons.lang3.reflect.TypeUtilsTest:::OBJECT
this has only one value
this.dis == null
this.dat == null
org.apache.commons.lang3.reflect.TypeUtilsTest.stringComparable == null
org.apache.commons.lang3.reflect.TypeUtilsTest.uriComparable == null
org.apache.commons.lang3.reflect.TypeUtilsTest.intComparable.getClass().getName() == java.lang.Integer.class
org.apache.commons.lang3.reflect.TypeUtilsTest.longComparable == null
org.apache.commons.lang3.reflect.TypeUtilsTest.uri == null
this.da == null
this.uhder == null
this.ding == null
this.tester == null
this.tester2 == null
this.dat2 == null
this.dat3 == null
this.intWildcardComparable == null
this.iterable == null
===========================================================================
org.apache.commons.lang3.reflect.TypeUtilsTest.TypeUtilsTest():::EXIT
org.apache.commons.lang3.reflect.TypeUtilsTest.intComparable == null
===========================================================================
org.apache.commons.lang3.reflect.TypeUtilsTest.delegateBooleanAssertion(java.lang.reflect.Type[], int, int, boolean):::ENTER
org.apache.commons.lang3.reflect.TypeUtilsTest.intComparable == null
types has only one value
types.getClass().getName() == java.lang.reflect.Type[].class
types[] contains no nulls and has only one value, of length 14
types[] elements != null
i2 >= 0
i1 >= 0
size(types[]) == 14
===========================================================================
org.apache.commons.lang3.reflect.TypeUtilsTest.delegateBooleanAssertion(java.lang.reflect.Type[], int, int, boolean):::EXIT
this.dis == orig(this.dis)
this.dat == orig(this.dat)
org.apache.commons.lang3.reflect.TypeUtilsTest.stringComparable == orig(org.apache.commons.lang3.reflect.TypeUtilsTest.stringComparable)
org.apache.commons.lang3.reflect.TypeUtilsTest.uriComparable == orig(org.apache.commons.lang3.reflect.TypeUtilsTest.uriComparable)
org.apache.commons.lang3.reflect.TypeUtilsTest.intComparable == orig(org.apache.commons.lang3.reflect.TypeUtilsTest.intComparable)
org.apache.commons.lang3.reflect.TypeUtilsTest.longComparable == orig(org.apache.commons.lang3.reflect.TypeUtilsTest.longComparable)
org.apache.commons.lang3.reflect.TypeUtilsTest.uri == orig(org.apache.commons.lang3.reflect.TypeUtilsTest.uri)
this.da == orig(this.da)
this.uhder == orig(this.uhder)
this.ding == orig(this.ding)
this.tester == orig(this.tester)
this.tester2 == orig(this.tester2)
this.dat2 == orig(this.dat2)
this.dat3 == orig(this.dat3)
this.intWildcardComparable == orig(this.intWildcardComparable)
this.iterable == orig(this.iterable)
types[] == orig(types[])
org.apache.commons.lang3.reflect.TypeUtilsTest.intComparable == null
types[] contains no nulls and has only one value, of length 14
types[] elements != null
===========================================================================
org.apache.commons.lang3.reflect.TypeUtilsTest.testIsAssignable():::ENTER
org.apache.commons.lang3.reflect.TypeUtilsTest.intComparable == null
===========================================================================
org.apache.commons.lang3.reflect.TypeUtilsTest.testIsAssignable():::EXIT
this.dis == orig(this.dis)
this.dat == orig(this.dat)
org.apache.commons.lang3.reflect.TypeUtilsTest.stringComparable == orig(org.apache.commons.lang3.reflect.TypeUtilsTest.stringComparable)
org.apache.commons.lang3.reflect.TypeUtilsTest.uriComparable == orig(org.apache.commons.lang3.reflect.TypeUtilsTest.uriComparable)
org.apache.commons.lang3.reflect.TypeUtilsTest.longComparable == orig(org.apache.commons.lang3.reflect.TypeUtilsTest.longComparable)
org.apache.commons.lang3.reflect.TypeUtilsTest.uri == orig(org.apache.commons.lang3.reflect.TypeUtilsTest.uri)
this.da == orig(this.da)
this.uhder == orig(this.uhder)
this.ding == orig(this.ding)
this.tester == orig(this.tester)
this.tester2 == orig(this.tester2)
this.dat2 == orig(this.dat2)
this.dat3 == orig(this.dat3)
this.intWildcardComparable == orig(this.intWildcardComparable)
this.iterable == orig(this.iterable)
org.apache.commons.lang3.reflect.TypeUtilsTest.intComparable has only one value
===========================================================================
org.apache.commons.lang3.text.translate.AggregateTranslator:::OBJECT
this.translators != null
this.translators.getClass().getName() == org.apache.commons.lang3.text.translate.CharSequenceTranslator[].class
this.translators[] elements != null
size(this.translators[]) one of { 2, 3, 4 }
===========================================================================
org.apache.commons.lang3.text.translate.AggregateTranslator.AggregateTranslator(org.apache.commons.lang3.text.translate.CharSequenceTranslator[]):::ENTER
translators.getClass().getName() == org.apache.commons.lang3.text.translate.CharSequenceTranslator[].class
size(translators[]) one of { 2, 3, 4 }
===========================================================================
org.apache.commons.lang3.text.translate.AggregateTranslator.AggregateTranslator(org.apache.commons.lang3.text.translate.CharSequenceTranslator[]):::EXIT
translators[] == orig(translators[])
===========================================================================
org.apache.commons.lang3.text.translate.AggregateTranslator.translate(java.lang.CharSequence, int, java.io.Writer):::ENTER
input != null
input.getClass().getName() == java.lang.String.class
index >= 0
out != null
out.getClass().getName() == java.io.StringWriter.class
===========================================================================
org.apache.commons.lang3.text.translate.AggregateTranslator.translate(java.lang.CharSequence, int, java.io.Writer):::EXIT54
===========================================================================
org.apache.commons.lang3.text.translate.AggregateTranslator.translate(java.lang.CharSequence, int, java.io.Writer):::EXIT57
return == 0
===========================================================================
org.apache.commons.lang3.text.translate.AggregateTranslator.translate(java.lang.CharSequence, int, java.io.Writer):::EXIT
this.translators == orig(this.translators)
this.translators.getClass().getName() == orig(this.translators.getClass().getName())
this.translators[] == orig(this.translators[])
return >= 0
===========================================================================
org.apache.commons.lang3.text.translate.CharSequenceTranslator:::OBJECT
===========================================================================
org.apache.commons.lang3.text.translate.CharSequenceTranslator.CharSequenceTranslator():::EXIT
===========================================================================
org.apache.commons.lang3.text.translate.CharSequenceTranslator.hex(int):::ENTER
===========================================================================
org.apache.commons.lang3.text.translate.CharSequenceTranslator.hex(int):::EXIT
return != null
===========================================================================
org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(java.lang.CharSequence):::ENTER
input.getClass().getName() == java.lang.String.class
===========================================================================
org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(java.lang.CharSequence):::EXIT55
return == null
orig(input) == null
===========================================================================
org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(java.lang.CharSequence):::EXIT60
return != null
orig(input) != null
===========================================================================
org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(java.lang.CharSequence):::EXIT
(return != null)  <==>  (orig(input) != null)
(return != null)  ==>  (orig(input.getClass().getName()) == java.lang.String.class)
(return == null)  <==>  (orig(input) == null)
===========================================================================
org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(java.lang.CharSequence, java.io.Writer):::ENTER
input.getClass().getName() == java.lang.String.class
out != null
out.getClass().getName() == java.io.StringWriter.class
===========================================================================
org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(java.lang.CharSequence, java.io.Writer):::EXIT80
orig(input) == null
===========================================================================
org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(java.lang.CharSequence, java.io.Writer):::EXIT98
orig(input) != null
===========================================================================
org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(java.lang.CharSequence, java.io.Writer):::EXIT
(orig(input) != null)  ==>  (orig(input.getClass().getName()) == java.lang.String.class)
===========================================================================
org.apache.commons.lang3.text.translate.CharSequenceTranslator.with(org.apache.commons.lang3.text.translate.CharSequenceTranslator[]):::ENTER
translators.getClass().getName() == org.apache.commons.lang3.text.translate.CharSequenceTranslator[].class
size(translators[]) == 1
===========================================================================
org.apache.commons.lang3.text.translate.CharSequenceTranslator.with(org.apache.commons.lang3.text.translate.CharSequenceTranslator[]):::EXIT
translators[] == orig(translators[])
return.getClass().getName() == org.apache.commons.lang3.text.translate.AggregateTranslator.class
===========================================================================
org.apache.commons.lang3.text.translate.CodePointTranslator:::OBJECT
===========================================================================
org.apache.commons.lang3.text.translate.CodePointTranslator.CodePointTranslator():::EXIT
===========================================================================
org.apache.commons.lang3.text.translate.CodePointTranslator.translate(java.lang.CharSequence, int, java.io.Writer):::ENTER
input != null
input.getClass().getName() == java.lang.String.class
index >= 0
out != null
out.getClass().getName() == java.io.StringWriter.class
===========================================================================
org.apache.commons.lang3.text.translate.CodePointTranslator.translate(java.lang.CharSequence, int, java.io.Writer):::EXIT40
return == 1
===========================================================================
org.apache.commons.lang3.text.translate.CodePointTranslator.translate(java.lang.CharSequence, int, java.io.Writer):::EXIT42
return == 0
===========================================================================
org.apache.commons.lang3.text.translate.CodePointTranslator.translate(java.lang.CharSequence, int, java.io.Writer):::EXIT
return one of { 0, 1 }
===========================================================================
org.apache.commons.lang3.text.translate.EntityArrays:::CLASS
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE has only one value
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE != null
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE.getClass().getName() == java.lang.String[][].class
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE[] contains no nulls and has only one value, of length 96
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE[] elements != null
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE has only one value
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE != null
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE.getClass().getName() == java.lang.String[][].class
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE[] contains no nulls and has only one value, of length 96
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE[] elements != null
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE has only one value
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE != null
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE.getClass().getName() == java.lang.String[][].class
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE[] contains no nulls and has only one value, of length 151
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE[] elements != null
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE has only one value
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE != null
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE.getClass().getName() == java.lang.String[][].class
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE[] contains no nulls and has only one value, of length 151
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE[] elements != null
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE has only one value
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE != null
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE.getClass().getName() == java.lang.String[][].class
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE[] contains no nulls and has only one value, of length 4
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE[] elements != null
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE has only one value
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE != null
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE.getClass().getName() == java.lang.String[][].class
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE[] contains no nulls and has only one value, of length 4
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE[] elements != null
org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE has only one value
org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE != null
org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE.getClass().getName() == java.lang.String[][].class
org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE[] contains no nulls and has only one value, of length 1
org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE[] elements has only one value
org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE[] elements != null
org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE has only one value
org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE != null
org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE.getClass().getName() == java.lang.String[][].class
org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE[] contains no nulls and has only one value, of length 1
org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE[] elements has only one value
org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE[] elements != null
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE has only one value
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE != null
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE.getClass().getName() == java.lang.String[][].class
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE[] contains no nulls and has only one value, of length 5
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE[] elements != null
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE has only one value
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE != null
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE.getClass().getName() == java.lang.String[][].class
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE[] contains no nulls and has only one value, of length 5
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE[] elements != null
size(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE[]) == 96
size(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE[]) == 96
size(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE[]) == 151
size(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE[]) == 151
size(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE[]) == 4
size(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE[]) == 4
size(org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE[]) == 1
size(org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE[]) == 1
size(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE[]) == 5
size(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE[]) == 5
===========================================================================
org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE():::ENTER
===========================================================================
org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE():::EXIT
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE[])
return has only one value
return.getClass().getName() == java.lang.String[][].class
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
size(return[]) == 1
===========================================================================
org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE():::ENTER
===========================================================================
org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE():::EXIT
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE[])
return has only one value
return.getClass().getName() == java.lang.String[][].class
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
size(return[]) == 1
===========================================================================
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE():::ENTER
===========================================================================
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE():::EXIT
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE[])
return.getClass().getName() == java.lang.String[][].class
return[] contains no nulls and has only one value, of length 4
size(return[]) == 4
===========================================================================
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE():::ENTER
===========================================================================
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE():::EXIT
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE[])
return.getClass().getName() == java.lang.String[][].class
return[] contains no nulls and has only one value, of length 4
size(return[]) == 4
===========================================================================
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE():::ENTER
===========================================================================
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE():::EXIT
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE[])
return has only one value
return.getClass().getName() == java.lang.String[][].class
return[] contains no nulls and has only one value, of length 151
size(return[]) == 151
===========================================================================
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE():::ENTER
===========================================================================
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE():::EXIT
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE[])
return has only one value
return.getClass().getName() == java.lang.String[][].class
return[] contains no nulls and has only one value, of length 151
size(return[]) == 151
===========================================================================
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE():::ENTER
===========================================================================
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE():::EXIT
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE[])
return.getClass().getName() == java.lang.String[][].class
return[] contains no nulls and has only one value, of length 96
size(return[]) == 96
===========================================================================
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE():::ENTER
===========================================================================
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE():::EXIT
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE[])
return.getClass().getName() == java.lang.String[][].class
return[] contains no nulls and has only one value, of length 96
size(return[]) == 96
===========================================================================
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE():::ENTER
===========================================================================
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE():::EXIT
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE[])
return.getClass().getName() == java.lang.String[][].class
return[] contains no nulls and has only one value, of length 5
size(return[]) == 5
===========================================================================
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE():::ENTER
===========================================================================
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE():::EXIT
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE[])
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE)
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE.getClass().getName() == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE.getClass().getName())
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE[] == orig(org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE[])
return has only one value
return.getClass().getName() == java.lang.String[][].class
return[] contains no nulls and has only one value, of length 5
size(return[]) == 5
===========================================================================
org.apache.commons.lang3.text.translate.EntityArrays.invert(java.lang.String[][]):::ENTER
array.getClass().getName() == java.lang.String[][].class
===========================================================================
org.apache.commons.lang3.text.translate.EntityArrays.invert(java.lang.String[][]):::EXIT
array[] == orig(array[])
return.getClass().getName() == java.lang.String[][].class
===========================================================================
org.apache.commons.lang3.text.translate.LookupTranslator:::OBJECT
this.lookupMap != null
this.shortest >= 1
this.longest >= 1
===========================================================================
org.apache.commons.lang3.text.translate.LookupTranslator.LookupTranslator(java.lang.CharSequence[][]):::ENTER
lookup != null
lookup.getClass().getName() == java.lang.String[][].class
lookup[] elements != null
===========================================================================
org.apache.commons.lang3.text.translate.LookupTranslator.LookupTranslator(java.lang.CharSequence[][]):::EXIT
lookup[] == orig(lookup[])
lookup[] elements != null
===========================================================================
org.apache.commons.lang3.text.translate.LookupTranslator.translate(java.lang.CharSequence, int, java.io.Writer):::ENTER
input != null
input.getClass().getName() == java.lang.String.class
index >= 0
out != null
out.getClass().getName() == java.io.StringWriter.class
===========================================================================
org.apache.commons.lang3.text.translate.LookupTranslator.translate(java.lang.CharSequence, int, java.io.Writer):::EXIT75
return >= 1
===========================================================================
org.apache.commons.lang3.text.translate.LookupTranslator.translate(java.lang.CharSequence, int, java.io.Writer):::EXIT78
return == 0
===========================================================================
org.apache.commons.lang3.text.translate.LookupTranslator.translate(java.lang.CharSequence, int, java.io.Writer):::EXIT
this.lookupMap == orig(this.lookupMap)
this.shortest == orig(this.shortest)
this.longest == orig(this.longest)
return >= 0
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityEscaper:::OBJECT
this.below one of { 0, 70, 127 }
this.above one of { 70, 76, 2147483647 }
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityEscaper.NumericEntityEscaper():::EXIT
this.below == 0
this.above == 2147483647
this.between == true
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityEscaper.NumericEntityEscaper(int, int, boolean):::ENTER
below one of { 0, 70, 127 }
above one of { 70, 76, 2147483647 }
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityEscaper.NumericEntityEscaper(int, int, boolean):::EXIT
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityEscaper.above(int):::ENTER
codepoint == 70
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityEscaper.above(int):::EXIT
return has only one value
return.below == 0
return.above == 70
return.between == false
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityEscaper.below(int):::ENTER
codepoint == 70
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityEscaper.below(int):::EXIT
return has only one value
return.below == 70
return.above == 2147483647
return.between == false
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityEscaper.between(int, int):::ENTER
codepointLow one of { 70, 127 }
codepointHigh one of { 76, 2147483647 }
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityEscaper.between(int, int):::EXIT
return.below one of { 70, 127 }
return.above one of { 76, 2147483647 }
return.between == true
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityEscaper.outsideOf(int, int):::ENTER
codepointLow one of { 0, 70 }
codepointHigh one of { 70, 2147483647 }
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityEscaper.outsideOf(int, int):::EXIT
return.below one of { 0, 70 }
return.above one of { 70, 2147483647 }
return.between == false
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityEscaper.translate(int, java.io.Writer):::ENTER
out != null
out.getClass().getName() == java.io.StringWriter.class
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityEscaper.translate(int, java.io.Writer):::EXIT106
this.below == 70
this.above == 76
this.between == true
return == false
orig(this) has only one value
orig(codepoint) one of { 65, 68, 90 }
orig(out) has only one value
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityEscaper.translate(int, java.io.Writer):::EXIT106;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityEscaper.translate(int, java.io.Writer):::EXIT110
this.below one of { 0, 70 }
this.above one of { 70, 2147483647 }
this.between == false
return == false
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityEscaper.translate(int, java.io.Writer):::EXIT110;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityEscaper.translate(int, java.io.Writer):::EXIT117
return == true
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityEscaper.translate(int, java.io.Writer):::EXIT117;condition="return == true"
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityEscaper.translate(int, java.io.Writer):::EXIT
this.below == orig(this.below)
this.above == orig(this.above)
this.between == orig(this.between)
(return == false)  ==>  (this.below one of { 0, 70 })
(return == true)  ==>  (this.below one of { 0, 70, 127 })
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityEscaper.translate(int, java.io.Writer):::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityEscaper.translate(int, java.io.Writer):::EXIT;condition="not(return == true)"
this.below one of { 0, 70 }
return == false
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityEscaperTest:::OBJECT
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityEscaperTest.NumericEntityEscaperTest():::EXIT
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityEscaperTest.testAbove():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityEscaperTest.testAbove():::EXIT
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityEscaperTest.testBelow():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityEscaperTest.testBelow():::EXIT
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityEscaperTest.testBetween():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityEscaperTest.testBetween():::EXIT
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityEscaperTest.testSupplementary():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityEscaperTest.testSupplementary():::EXIT
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION:::CLASS
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.semiColonRequired has only one value
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.semiColonOptional has only one value
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.errorIfNoSemiColon has only one value
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.$VALUES has only one value
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.$VALUES.getClass().getName() == org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION[].class
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.$VALUES[] contains no nulls and has only one value, of length 3
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.$VALUES[].getClass().getName() == [org.apache.commons.lang3.text.translate.NumericEntityUnescaper.OPTION, org.apache.commons.lang3.text.translate.NumericEntityUnescaper.OPTION, org.apache.commons.lang3.text.translate.NumericEntityUnescaper.OPTION]
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.$VALUES[].getClass().getName() elements == org.apache.commons.lang3.text.translate.NumericEntityUnescaper.OPTION.class
size(org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.$VALUES[]) == 3
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION:::OBJECT
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.OPTION(java.lang.String, int):::ENTER
$hidden$1.toString one of { "errorIfNoSemiColon", "semiColonOptional", "semiColonRequired" }
$hidden$2 one of { 0, 1, 2 }
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.OPTION(java.lang.String, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
$hidden$1.toString one of { "errorIfNoSemiColon", "semiColonOptional", "semiColonRequired" }
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.values():::ENTER
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.values():::EXIT
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.semiColonRequired == orig(org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.semiColonRequired)
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.semiColonOptional == orig(org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.semiColonOptional)
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.errorIfNoSemiColon == orig(org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.errorIfNoSemiColon)
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.$VALUES == orig(org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.$VALUES)
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.$VALUES.getClass().getName() == orig(org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.$VALUES.getClass().getName())
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.$VALUES[] == orig(org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.$VALUES[])
return has only one value
return.getClass().getName() == org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION[].class
return[] contains no nulls and has only one value, of length 3
size(return[]) == 3
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityUnescaper:::OBJECT
this.options != null
this.options.getClass().getName() == java.util.RegularEnumSet.class
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityUnescaper.NumericEntityUnescaper(org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION[]):::ENTER
options.getClass().getName() == org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION[].class
size(options[]) one of { 0, 1 }
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityUnescaper.NumericEntityUnescaper(org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION[]):::EXIT
options[] == orig(options[])
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityUnescaper.isSet(org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION):::ENTER
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.semiColonRequired has only one value
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.semiColonOptional has only one value
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.errorIfNoSemiColon has only one value
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.$VALUES has only one value
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.$VALUES.getClass().getName() == org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION[].class
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.$VALUES[] contains no nulls and has only one value, of length 3
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.$VALUES[].getClass().getName() == [org.apache.commons.lang3.text.translate.NumericEntityUnescaper.OPTION, org.apache.commons.lang3.text.translate.NumericEntityUnescaper.OPTION, org.apache.commons.lang3.text.translate.NumericEntityUnescaper.OPTION]
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.$VALUES[].getClass().getName() elements == org.apache.commons.lang3.text.translate.NumericEntityUnescaper.OPTION.class
size(org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.$VALUES[]) == 3
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityUnescaper.isSet(org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION):::EXIT
this.options == orig(this.options)
this.options.getClass().getName() == orig(this.options.getClass().getName())
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.semiColonRequired == orig(org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.semiColonRequired)
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.semiColonOptional == orig(org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.semiColonOptional)
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.errorIfNoSemiColon == orig(org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.errorIfNoSemiColon)
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.$VALUES == orig(org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.$VALUES)
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.$VALUES.getClass().getName() == orig(org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.$VALUES.getClass().getName())
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.$VALUES[] == orig(org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.$VALUES[])
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.semiColonRequired has only one value
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.semiColonOptional has only one value
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.errorIfNoSemiColon has only one value
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.$VALUES has only one value
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.$VALUES.getClass().getName() == org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION[].class
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.$VALUES[] contains no nulls and has only one value, of length 3
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.$VALUES[].getClass().getName() == [org.apache.commons.lang3.text.translate.NumericEntityUnescaper.OPTION, org.apache.commons.lang3.text.translate.NumericEntityUnescaper.OPTION, org.apache.commons.lang3.text.translate.NumericEntityUnescaper.OPTION]
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.$VALUES[].getClass().getName() elements == org.apache.commons.lang3.text.translate.NumericEntityUnescaper.OPTION.class
size(org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.$VALUES[]) == 3
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityUnescaper.isSet(org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION):::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityUnescaper.isSet(org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityUnescaper.translate(java.lang.CharSequence, int, java.io.Writer):::ENTER
input != null
input.getClass().getName() == java.lang.String.class
index >= 0
out != null
out.getClass().getName() == java.io.StringWriter.class
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityUnescaper.translate(java.lang.CharSequence, int, java.io.Writer):::EXIT109
return == 0
orig(index) == 5
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityUnescaper.translate(java.lang.CharSequence, int, java.io.Writer):::EXIT124
this.options has only one value
return == 0
orig(this) has only one value
orig(input) has only one value
orig(index) == 5
orig(out) has only one value
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityUnescaper.translate(java.lang.CharSequence, int, java.io.Writer):::EXIT135
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityUnescaper.translate(java.lang.CharSequence, int, java.io.Writer):::EXIT137
return == 0
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityUnescaper.translate(java.lang.CharSequence, int, java.io.Writer):::EXIT92
this.options has only one value
return == 0
orig(this) has only one value
orig(index) == 5
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityUnescaper.translate(java.lang.CharSequence, int, java.io.Writer):::EXIT
this.options == orig(this.options)
this.options.getClass().getName() == orig(this.options.getClass().getName())
return >= 0
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest:::OBJECT
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest.NumericEntityUnescaperTest():::EXIT
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest.testOutOfBounds():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest.testOutOfBounds():::EXIT
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest.testSupplementaryUnescaping():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest.testSupplementaryUnescaping():::EXIT
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest.testUnfinishedEntity():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest.testUnfinishedEntity():::EXIT
===========================================================================
org.apache.commons.lang3.text.translate.OctalUnescaper:::CLASS
org.apache.commons.lang3.text.translate.OctalUnescaper.OCTAL_MAX == 377
===========================================================================
org.apache.commons.lang3.text.translate.OctalUnescaper:::OBJECT
===========================================================================
org.apache.commons.lang3.text.translate.OctalUnescaper.OctalUnescaper():::EXIT
===========================================================================
org.apache.commons.lang3.text.translate.OctalUnescaper.translate(java.lang.CharSequence, int, java.io.Writer):::ENTER
input != null
input.getClass().getName() == java.lang.String.class
index >= 0
out != null
out.getClass().getName() == java.io.StringWriter.class
===========================================================================
org.apache.commons.lang3.text.translate.OctalUnescaper.translate(java.lang.CharSequence, int, java.io.Writer):::EXIT56
return one of { 2, 3, 4 }
orig(this) has only one value
orig(index) == 0
===========================================================================
org.apache.commons.lang3.text.translate.OctalUnescaper.translate(java.lang.CharSequence, int, java.io.Writer):::EXIT58
return == 0
===========================================================================
org.apache.commons.lang3.text.translate.OctalUnescaper.translate(java.lang.CharSequence, int, java.io.Writer):::EXIT
org.apache.commons.lang3.text.translate.OctalUnescaper.OCTAL_MAX == orig(org.apache.commons.lang3.text.translate.OctalUnescaper.OCTAL_MAX)
(return one of { 2, 3, 4 })  ==>  (orig(index) == 0)
(return one of { 2, 3, 4 })  ==>  (orig(this) has only one value)
return >= 0
===========================================================================
org.apache.commons.lang3.text.translate.OctalUnescaperTest:::OBJECT
this has only one value
===========================================================================
org.apache.commons.lang3.text.translate.OctalUnescaperTest.OctalUnescaperTest():::EXIT
===========================================================================
org.apache.commons.lang3.text.translate.OctalUnescaperTest.testBetween():::ENTER
===========================================================================
org.apache.commons.lang3.text.translate.OctalUnescaperTest.testBetween():::EXIT
===========================================================================
org.apache.commons.lang3.text.translate.UnicodeEscaper:::OBJECT
this.below one of { 0, 32, 70 }
===========================================================================
org.apache.commons.lang3.text.translate.UnicodeEscaper.UnicodeEscaper(int, int, boolean):::ENTER
below one of { 0, 32, 70 }
===========================================================================
org.apache.commons.lang3.text.translate.UnicodeEscaper.UnicodeEscaper(int, int, boolean):::EXIT
===========================================================================
org.apache.commons.lang3.text.translate.UnicodeEscaper.above(int):::ENTER
codepoint == 70
===========================================================================
org.apache.commons.lang3.text.translate.UnicodeEscaper.above(int):::EXIT
return has only one value
return.below == 0
return.above == 70
return.between == false
===========================================================================
org.apache.commons.lang3.text.translate.UnicodeEscaper.below(int):::ENTER
codepoint == 70
===========================================================================
org.apache.commons.lang3.text.translate.UnicodeEscaper.below(int):::EXIT
return has only one value
return.below == 70
return.above == 2147483647
return.between == false
===========================================================================
org.apache.commons.lang3.text.translate.UnicodeEscaper.between(int, int):::ENTER
codepointLow == 70
codepointHigh == 76
===========================================================================
org.apache.commons.lang3.text.translate.UnicodeEscaper.between(int, int):::EXIT
return has only one value
return.below == 70
return.above == 76
return.between == true
===========================================================================
org.apache.commons.lang3.text.translate.UnicodeEscaper.outsideOf(int, int):::ENTER
codepointLow one of { 0, 32, 70 }
codepointHigh one of { 70, 127, 2147483647 }
===========================================================================
org.apache.commons.lang3.text.translate.UnicodeEscaper.outsideOf(int, int):::EXIT
return.below one of { 0, 32, 70 }
return.above one of { 70, 127, 2147483647 }
return.between == false
===========================================================================
org.apache.commons.lang3.text.translate.UnicodeEscaper.translate(int, java.io.Writer):::ENTER
out != null
out.getClass().getName() == java.io.StringWriter.class
===========================================================================
org.apache.commons.lang3.text.translate.UnicodeEscaper.translate(int, java.io.Writer):::EXIT106
this.below == 70
this.above == 76
this.between == true
return == false
orig(this) has only one value
orig(codepoint) one of { 65, 68, 90 }
orig(out) has only one value
===========================================================================
org.apache.commons.lang3.text.translate.UnicodeEscaper.translate(int, java.io.Writer):::EXIT106;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.text.translate.UnicodeEscaper.translate(int, java.io.Writer):::EXIT110
this.above one of { 70, 127, 2147483647 }
this.between == false
return == false
===========================================================================
org.apache.commons.lang3.text.translate.UnicodeEscaper.translate(int, java.io.Writer):::EXIT110;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.text.translate.UnicodeEscaper.translate(int, java.io.Writer):::EXIT128
return == true
===========================================================================
org.apache.commons.lang3.text.translate.UnicodeEscaper.translate(int, java.io.Writer):::EXIT128;condition="return == true"
===========================================================================
org.apache.commons.lang3.text.translate.UnicodeEscaper.translate(int, java.io.Writer):::EXIT
this.below == orig(this.below)
this.above == orig(this.above)
this.between == orig(this.between)
===========================================================================
org.apache.commons.lang3.text.translate.UnicodeEscaper.translate(int, java.io.Writer):::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.lang3.text.translate.UnicodeEscaper.translate(int, java.io.Writer):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.text.translate.UnicodeEscaperTest:::OBJECT
===========================================================================
org.apache.commons.lang3.text.translate.UnicodeEscaperTest.UnicodeEscaperTest():::EXIT
===========================================================================
org.apache.commons.lang3.text.translate.UnicodeEscaperTest.testAbove():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.translate.UnicodeEscaperTest.testAbove():::EXIT
===========================================================================
org.apache.commons.lang3.text.translate.UnicodeEscaperTest.testBelow():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.translate.UnicodeEscaperTest.testBelow():::EXIT
===========================================================================
org.apache.commons.lang3.text.translate.UnicodeEscaperTest.testBetween():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.translate.UnicodeEscaperTest.testBetween():::EXIT
===========================================================================
org.apache.commons.lang3.text.translate.UnicodeUnescaper:::OBJECT
===========================================================================
org.apache.commons.lang3.text.translate.UnicodeUnescaper.UnicodeUnescaper():::EXIT
===========================================================================
org.apache.commons.lang3.text.translate.UnicodeUnescaper.translate(java.lang.CharSequence, int, java.io.Writer):::ENTER
input != null
input.getClass().getName() == java.lang.String.class
index >= 0
out != null
out.getClass().getName() == java.io.StringWriter.class
===========================================================================
org.apache.commons.lang3.text.translate.UnicodeUnescaper.translate(java.lang.CharSequence, int, java.io.Writer):::EXIT58
return one of { 6, 7, 13 }
orig(index) == 0
===========================================================================
org.apache.commons.lang3.text.translate.UnicodeUnescaper.translate(java.lang.CharSequence, int, java.io.Writer):::EXIT64
return == 0
===========================================================================
org.apache.commons.lang3.text.translate.UnicodeUnescaper.translate(java.lang.CharSequence, int, java.io.Writer):::EXIT
(return one of { 6, 7, 13 })  ==>  (orig(index) == 0)
return >= 0
===========================================================================
org.apache.commons.lang3.text.translate.UnicodeUnescaperTest:::OBJECT
===========================================================================
org.apache.commons.lang3.text.translate.UnicodeUnescaperTest.UnicodeUnescaperTest():::EXIT
===========================================================================
org.apache.commons.lang3.text.translate.UnicodeUnescaperTest.testLessThanFour():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.translate.UnicodeUnescaperTest.testLessThanFour():::EXIT
===========================================================================
org.apache.commons.lang3.text.translate.UnicodeUnescaperTest.testUPlus():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.translate.UnicodeUnescaperTest.testUPlus():::EXIT
===========================================================================
org.apache.commons.lang3.text.translate.UnicodeUnescaperTest.testUuuuu():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.translate.UnicodeUnescaperTest.testUuuuu():::EXIT
