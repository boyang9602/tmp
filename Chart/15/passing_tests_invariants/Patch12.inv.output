===========================================================================
org.jfree.chart.ChartColor:::CLASS
org.jfree.chart.ChartColor.VERY_DARK_RED has only one value
org.jfree.chart.ChartColor.DARK_RED has only one value
org.jfree.chart.ChartColor.LIGHT_RED has only one value
org.jfree.chart.ChartColor.VERY_LIGHT_RED has only one value
org.jfree.chart.ChartColor.VERY_DARK_YELLOW has only one value
org.jfree.chart.ChartColor.DARK_YELLOW has only one value
org.jfree.chart.ChartColor.LIGHT_YELLOW has only one value
org.jfree.chart.ChartColor.VERY_LIGHT_YELLOW has only one value
org.jfree.chart.ChartColor.VERY_DARK_GREEN has only one value
org.jfree.chart.ChartColor.DARK_GREEN has only one value
org.jfree.chart.ChartColor.LIGHT_GREEN has only one value
org.jfree.chart.ChartColor.VERY_LIGHT_GREEN has only one value
org.jfree.chart.ChartColor.VERY_DARK_CYAN has only one value
org.jfree.chart.ChartColor.DARK_CYAN has only one value
org.jfree.chart.ChartColor.LIGHT_CYAN has only one value
org.jfree.chart.ChartColor.VERY_LIGHT_CYAN has only one value
org.jfree.chart.ChartColor.VERY_DARK_BLUE has only one value
org.jfree.chart.ChartColor.DARK_BLUE has only one value
org.jfree.chart.ChartColor.LIGHT_BLUE has only one value
org.jfree.chart.ChartColor.VERY_LIGHT_BLUE has only one value
org.jfree.chart.ChartColor.VERY_DARK_MAGENTA has only one value
org.jfree.chart.ChartColor.DARK_MAGENTA has only one value
org.jfree.chart.ChartColor.LIGHT_MAGENTA has only one value
org.jfree.chart.ChartColor.VERY_LIGHT_MAGENTA has only one value
===========================================================================
org.jfree.chart.ChartColor.createDefaultPaintArray():::ENTER
===========================================================================
org.jfree.chart.ChartColor.createDefaultPaintArray():::EXIT
org.jfree.chart.ChartColor.VERY_DARK_RED == orig(org.jfree.chart.ChartColor.VERY_DARK_RED)
org.jfree.chart.ChartColor.DARK_RED == orig(org.jfree.chart.ChartColor.DARK_RED)
org.jfree.chart.ChartColor.LIGHT_RED == orig(org.jfree.chart.ChartColor.LIGHT_RED)
org.jfree.chart.ChartColor.VERY_LIGHT_RED == orig(org.jfree.chart.ChartColor.VERY_LIGHT_RED)
org.jfree.chart.ChartColor.VERY_DARK_YELLOW == orig(org.jfree.chart.ChartColor.VERY_DARK_YELLOW)
org.jfree.chart.ChartColor.DARK_YELLOW == orig(org.jfree.chart.ChartColor.DARK_YELLOW)
org.jfree.chart.ChartColor.LIGHT_YELLOW == orig(org.jfree.chart.ChartColor.LIGHT_YELLOW)
org.jfree.chart.ChartColor.VERY_LIGHT_YELLOW == orig(org.jfree.chart.ChartColor.VERY_LIGHT_YELLOW)
org.jfree.chart.ChartColor.VERY_DARK_GREEN == orig(org.jfree.chart.ChartColor.VERY_DARK_GREEN)
org.jfree.chart.ChartColor.DARK_GREEN == orig(org.jfree.chart.ChartColor.DARK_GREEN)
org.jfree.chart.ChartColor.LIGHT_GREEN == orig(org.jfree.chart.ChartColor.LIGHT_GREEN)
org.jfree.chart.ChartColor.VERY_LIGHT_GREEN == orig(org.jfree.chart.ChartColor.VERY_LIGHT_GREEN)
org.jfree.chart.ChartColor.VERY_DARK_CYAN == orig(org.jfree.chart.ChartColor.VERY_DARK_CYAN)
org.jfree.chart.ChartColor.DARK_CYAN == orig(org.jfree.chart.ChartColor.DARK_CYAN)
org.jfree.chart.ChartColor.LIGHT_CYAN == orig(org.jfree.chart.ChartColor.LIGHT_CYAN)
org.jfree.chart.ChartColor.VERY_LIGHT_CYAN == orig(org.jfree.chart.ChartColor.VERY_LIGHT_CYAN)
org.jfree.chart.ChartColor.VERY_DARK_BLUE == orig(org.jfree.chart.ChartColor.VERY_DARK_BLUE)
org.jfree.chart.ChartColor.DARK_BLUE == orig(org.jfree.chart.ChartColor.DARK_BLUE)
org.jfree.chart.ChartColor.LIGHT_BLUE == orig(org.jfree.chart.ChartColor.LIGHT_BLUE)
org.jfree.chart.ChartColor.VERY_LIGHT_BLUE == orig(org.jfree.chart.ChartColor.VERY_LIGHT_BLUE)
org.jfree.chart.ChartColor.VERY_DARK_MAGENTA == orig(org.jfree.chart.ChartColor.VERY_DARK_MAGENTA)
org.jfree.chart.ChartColor.DARK_MAGENTA == orig(org.jfree.chart.ChartColor.DARK_MAGENTA)
org.jfree.chart.ChartColor.LIGHT_MAGENTA == orig(org.jfree.chart.ChartColor.LIGHT_MAGENTA)
org.jfree.chart.ChartColor.VERY_LIGHT_MAGENTA == orig(org.jfree.chart.ChartColor.VERY_LIGHT_MAGENTA)
return has only one value
return.getClass().getName() == java.awt.Paint[].class
return[] contains no nulls and has only one value, of length 34
size(return[]) == 34
===========================================================================
org.jfree.chart.ChartFactory.createPieChart(java.lang.String, org.jfree.data.general.PieDataset, boolean, boolean, boolean):::ENTER
title has only one value
title.toString == "Test"
dataset has only one value
dataset.getClass().getName() == org.jfree.data.general.DefaultPieDataset.class
legend == true
tooltips == false
urls == false
===========================================================================
org.jfree.chart.ChartFactory.createPieChart(java.lang.String, org.jfree.data.general.PieDataset, boolean, boolean, boolean):::EXIT
title.toString == orig(title.toString)
org.jfree.chart.JFreeChart.INFO.libraries.getClass().getName() == org.jfree.chart.JFreeChart.INFO.optionalLibraries.getClass().getName()
org.jfree.chart.JFreeChart.INFO.libraries.getClass().getName() == return.subtitles.getClass().getName()
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName() == return.borderPaint.getClass().getName()
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName() == org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT.getClass().getName()
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName() == return.title.paint.getClass().getName()
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName() == org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName()
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName() == org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName()
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName() == return.plot.noDataMessagePaint.getClass().getName()
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName() == return.plot.outlinePaint.getClass().getName()
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName() == return.plot.backgroundPaint.getClass().getName()
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName() == return.backgroundPaint.getClass().getName()
return.borderStroke.getClass().getName() == org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName()
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName() == return.plot.outlineStroke.getClass().getName()
title.toString == "Test"
return has only one value
org.jfree.chart.JFreeChart.INFO has only one value
org.jfree.chart.JFreeChart.INFO.logo == null
org.jfree.chart.JFreeChart.INFO.licenceText has only one value
org.jfree.chart.JFreeChart.INFO.licenceText.toString == "GNU LESSER GENERAL PUBLIC LICENSE\n\nVersion 2.1, February 1999\n\nCopyright (C) 1991, 1999 Free Software Foundation, Inc.\n59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\nEveryone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.\n\n[This is the first released version of the Lesser GPL.  It also counts as the successor of the GNU Library Public License, version 2, hence the version number 2.1.]\n\nPreamble\n\nThe licenses for most software are designed to take away your freedom to share and change it. By contrast, the GNU General Public Licenses are intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users.\n\nThis license, the Lesser General Public License, applies to some specially designated software packages--typically libraries--of the Free Software Foundation and other authors who decide to use it. You can use it too, but we suggest you first think carefully about whether this license or the ordinary General Public License is the better strategy to use in any particular case, based on the explanations below.\n\nWhen we speak of free software, we are referring to freedom of use, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish); that you receive source code or can get it if you want it; that you can change the software and use pieces of it in new free programs; and that you are informed that you can do these things.\n\nTo protect your rights, we need to make restrictions that forbid distributors to deny you these rights or to ask you to surrender these rights. These restrictions translate to certain responsibilities for you if you distribute copies of the library or if you modify it.\n\nFor example, if you distribute copies of the library, whether gratis or for a fee, you must give the recipients all the rights that we gave you. You must make sure that they, too, receive or can get the source code. If you link other code with the library, you must provide complete object files to the recipients, so that they can relink them with the library after making changes to the library and recompiling it. And you must show them these terms so they know their rights.\n\nWe protect your rights with a two-step method: (1) we copyright the library, and (2) we offer you this license, which gives you legal permission to copy, distribute and/or modify the library.\n\nTo protect each distributor, we want to make it very clear that there is no warranty for the free library. Also, if the library is modified by someone else and passed on, the recipients should know that what they have is not the original version, so that the original author's reputation will not be affected by problems that might be introduced by others.\n\nFinally, software patents pose a constant threat to the existence of any free program. We wish to make sure that a company cannot effectively restrict the users of a free program by obtaining a restrictive license from a patent holder. Therefore, we insist that any patent license obtained for a version of the library must be consistent with the full freedom of use specified in this license.\n\nMost GNU software, including some libraries, is covered by the ordinary GNU General Public License. This license, the GNU Lesser General Public License, applies to certain designated libraries, and is quite different from the ordinary General Public License. We use this license for certain libraries in order to permit linking those libraries into non-free programs.\n\nWhen a program is linked with a library, whether statically or using a shared library, the combination of the two is legally speaking a combined work, a derivative of the original library. The ordinary General Public License therefore permits such linking only if the entire combination fits its criteria of freedom. The Lesser General Public License permits more lax criteria for linking other code with the library.\n\nWe call this license the \"Lesser\" General Public License because it does Less to protect the user's freedom than the ordinary General Public License. It also provides other free software developers Less of an advantage over competing non-free programs. These disadvantages are the reason we use the ordinary General Public License for many libraries. However, the Lesser license provides advantages in certain special circumstances.\n\nFor example, on rare occasions, there may be a special need to encourage the widest possible use of a certain library, so that it becomes a de-facto standard. To achieve this, non-free programs must be allowed to use the library. A more frequent case is that a free library does the same job as widely used non-free libraries. In this case, there is little to gain by limiting the free library to free software only, so we use the Lesser General Public License.\n\nIn other cases, permission to use a particular library in non-free programs enables a greater number of people to use a large body of free software. For example, permission to use the GNU C Library in non-free programs enables many more people to use the whole GNU operating system, as well as its variant, the GNU/Linux operating system.\n\nAlthough the Lesser General Public License is Less protective of the users' freedom, it does ensure that the user of a program that is linked with the Library has the freedom and the wherewithal to run that program using a modified version of the Library.\n\nThe precise terms and conditions for copying, distribution and modification follow. Pay close attention to the difference between a \"work based on the library\" and a \"work that uses the library\". The former contains code derived from the library, whereas the latter must be combined with the library in order to run.\n\nTERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n0. This License Agreement applies to any software library or other program which contains a notice placed by the copyright holder or other authorized party saying it may be distributed under the terms of this Lesser General Public License (also called \"this License\"). Each licensee is addressed as \"you\".\nA \"library\" means a collection of software functions and/or data prepared so as to be conveniently linked with application programs (which use some of those functions and data) to form executables.\n\nThe \"Library\", below, refers to any such software library or work which has been distributed under these terms. A \"work based on the Library\" means either the Library or any derivative work under copyright law: that is to say, a work containing the Library or a portion of it, either verbatim or with modifications and/or translated straightforwardly into another language. (Hereinafter, translation is included without limitation in the term \"modification\".)\n\n\"Source code\" for a work means the preferred form of the work for making modifications to it. For a library, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the library.\n\nActivities other than copying, distribution and modification are not covered by this License; they are outside its scope. The act of running a program using the Library is not restricted, and output from such a program is covered only if its contents constitute a work based on the Library (independent of the use of the Library in a tool for writing it). Whether that is true depends on what the Library does and what the program that uses the Library does.\n1. You may copy and distribute verbatim copies of the Library's complete source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and distribute a copy of this License along with the Library.\n\nYou may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee.\n\n2. You may modify your copy or copies of the Library or any portion of it, thus forming a work based on the Library, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions:\n\n*    a) The modified work must itself be a software library.\n*    b) You must cause the files modified to carry prominent notices stating that you changed the files and the date of any change.\n*    c) You must cause the whole of the work to be licensed at no charge to all third parties under the terms of this License.\n*    d) If a facility in the modified Library refers to a function or a table of data to be supplied by an application program that uses the facility, other than as an argument passed when the facility is invoked, then you must make a good faith effort to ensure that, in the event an application does not supply such function or table, the facility still operates, and performs whatever part of its purpose remains meaningful.\n\n(For example, a function in a library to compute square roots has a purpose that is entirely well-defined independent of the application. Therefore, Subsection 2d requires that any application-supplied function or table used by this function must be optional: if the application does not supply it, the square root function must still compute square roots.)\n\nThese requirements apply to the modified work as a whole. If identifiable sections of that work are not derived from the Library, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works. But when you distribute the same sections as part of a whole which is a work based on the Library, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Library.\n\nIn addition, mere aggregation of another work not based on the Library with the Library (or with a work based on the Library) on a volume of a storage or distribution medium does not bring the other work under the scope of this License.\n\n3. You may opt to apply the terms of the ordinary GNU General Public License instead of this License to a given copy of the Library. To do this, you must alter all the notices that refer to this License, so that they refer to the ordinary GNU General Public License, version 2, instead of to this License. (If a newer version than version 2 of the ordinary GNU General Public License has appeared, then you can specify that version instead if you wish.) Do not make any other change in these notices.\n\nOnce this change is made in a given copy, it is irreversible for that copy, so the ordinary GNU General Public License applies to all subsequent copies and derivative works made from that copy.\n\nThis option is useful when you wish to copy part of the code of the Library into a program that is not a library.\n\n4. You may copy and distribute the Library (or a portion or derivative of it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange.\n\nIf distribution of object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place satisfies the requirement to distribute the source code, even though third parties are not compelled to copy the source along with the object code.\n\n5. A program that contains no derivative of any portion of the Library, but is designed to work with the Library by being compiled or linked with it, is called a \"work that uses the Library\". Such a work, in isolation, is not a derivative work of the Library, and therefore falls outside the scope of this License.\n\nHowever, linking a \"work that uses the Library\" with the Library creates an executable that is a derivative of the Library (because it contains portions of the Library), rather than a \"work that uses the library\". The executable is therefore covered by this License. Section 6 states terms for distribution of such executables.\n\nWhen a \"work that uses the Library\" uses material from a header file that is part of the Library, the object code for the work may be a derivative work of the Library even though the source code is not. Whether this is true is especially significant if the work can be linked without the Library, or if the work is itself a library. The threshold for this to be true is not precisely defined by law.\n\nIf such an object file uses only numerical parameters, data structure layouts and accessors, and small macros and small inline functions (ten lines or less in length), then the use of the object file is unrestricted, regardless of whether it is legally a derivative work. (Executables containing this object code plus portions of the Library will still fall under Section 6.)\n\nOtherwise, if the work is a derivative of the Library, you may distribute the object code for the work under the terms of Section 6. Any executables containing that work also fall under Section 6, whether or not they are linked directly with the Library itself.\n\n6. As an exception to the Sections above, you may also combine or link a \"work that uses the Library\" with the Library to produce a work containing portions of the Library, and distribute that work under terms of your choice, provided that the terms permit modification of the work for the customer's own use and reverse engineering for debugging such modifications.\n\nYou must give prominent notice with each copy of the work that the Library is used in it and that the Library and its use are covered by this License. You must supply a copy of this License. If the work during execution displays copyright notices, you must include the copyright notice for the Library among them, as well as a reference directing the user to the copy of this License. Also, you must do one of these things:\n\n*    a) Accompany the work with the complete corresponding machine-readable source code for the Library including whatever changes were used in the work (which must be distributed under Sections 1 and 2 above); and, if the work is an executable linked with the Library, with the complete machine-readable \"work that uses the Library\", as object code and/or source code, so that the user can modify the Library and then relink to produce a modified executable containing the modified Library. (It is understood that the user who changes the contents of definitions files in the Library will not necessarily be able to recompile the application to use the modified definitions.)\n*    b) Use a suitable shared library mechanism for linking with the Library. A suitable mechanism is one that (1) uses at run time a copy of the library already present on the user's computer system, rather than copying library functions into the executable, and (2) will operate properly with a modified version of the library, if the user installs one, as long as the modified version is interface-compatible with the version that the work was made with.\n*    c) Accompany the work with a written offer, valid for at least three years, to give the same user the materials specified in Subsection 6a, above, for a charge no more than the cost of performing this distribution.\n*    d) If distribution of the work is made by offering access to copy from a designated place, offer equivalent access to copy the above specified materials from the same place.\n*    e) Verify that the user has already received a copy of these materials or that you have already sent this user a copy.\n\nFor an executable, the required form of the \"work that uses the Library\" must include any data and utility programs needed for reproducing the executable from it. However, as a special exception, the materials to be distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable.\n\nIt may happen that this requirement contradicts the license restrictions of other proprietary libraries that do not normally accompany the operating system. Such a contradiction means you cannot use both them and the Library together in an executable that you distribute.\n\n7. You may place library facilities that are a work based on the Library side-by-side in a single library together with other library facilities not covered by this License, and distribute such a combined library, provided that the separate distribution of the work based on the Library and of the other library facilities is otherwise permitted, and provided that you do these two things:\n\n*    a) Accompany the combined library with a copy of the same work based on the Library, uncombined with any other library facilities. This must be distributed under the terms of the Sections above.\n*    b) Give prominent notice with the combined library of the fact that part of it is a work based on the Library, and explaining where to find the accompanying uncombined form of the same work.\n\n8. You may not copy, modify, sublicense, link with, or distribute the Library except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense, link with, or distribute the Library is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance.\n\n9. You are not required to accept this License, since you have not signed it. However, nothing else grants you permission to modify or distribute the Library or its derivative works. These actions are prohibited by law if you do not accept this License. Therefore, by modifying or distributing the Library (or any work based on the Library), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Library or works based on it.\n\n10. Each time you redistribute the Library (or any work based on the Library), the recipient automatically receives a license from the original licensor to copy, distribute, link with or modify the Library subject to these terms and conditions. You may not impose any further restrictions on the recipients' exercise of the rights granted herein. You are not responsible for enforcing compliance by third parties with this License.\n\n11. If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Library at all. For example, if a patent license would not permit royalty-free redistribution of the Library by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Library.\n\nIf any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply, and the section as a whole is intended to apply in other circumstances.\n\nIt is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system which is implemented by public license practices. Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice.\n\nThis section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License.\n\n12. If the distribution and/or use of the Library is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Library under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded. In such case, this License incorporates the limitation as if written in the body of this License.\n\n13. The Free Software Foundation may publish revised and/or new versions of the Lesser General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.\n\nEach version is given a distinguishing version number. If the Library specifies a version number of this License which applies to it and \"any later version\", you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation. If the Library does not specify a license version number, you may choose any version ever published by the Free Software Foundation.\n\n14. If you wish to incorporate parts of the Library into other free programs whose distribution conditions are incompatible with these, write to the author to ask for permission. For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this. Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally.\n\nNO WARRANTY\n\n15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE LIBRARY \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE LIBRARY IS WITH YOU. SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n\nEND OF TERMS AND CONDITIONS\n\n\nHow to Apply These Terms to Your New Libraries\n\nIf you develop a new library, and you want it to be of the greatest possible use to the public, we recommend making it free software that everyone can redistribute and change. You can do so by permitting redistribution under these terms (or, alternatively, under the terms of the ordinary General Public License).\n\nTo apply these terms, attach the following notices to the library.  It is safest to attach them to the start of each source file to most effectively convey the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.\n\n<one line to give the library's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.\n\nThis library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\nAlso add information on how to contact you by electronic and paper mail.\n\nYou should also get your employer (if you work as a programmer) or your school, if any, to sign a \"copyright disclaimer\" for the library, if necessary.  Here is a sample; alter the names:\n\nYoyodyne, Inc., hereby disclaims all copyright interest in the library `Frob' (a library for tweaking knobs) written by James Random Hacker.\n\n<signature of Ty Coon>, 1 April 1990\nTy Coon, President of Vice\n\nThat's all there is to it!\n"
org.jfree.chart.JFreeChart.INFO.contributors has only one value
org.jfree.chart.JFreeChart.INFO.contributors[] contains no nulls and has only one value, of length 85
org.jfree.chart.JFreeChart.INFO.contributors[].getClass().getName() == [org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor]
org.jfree.chart.JFreeChart.INFO.contributors[].getClass().getName() elements == org.jfree.chart.ui.Contributor.class
org.jfree.chart.JFreeChart.INFO.contributors.getClass().getName() == java.util.Arrays$ArrayList.class
org.jfree.chart.JFreeChart.INFO.copyright has only one value
org.jfree.chart.JFreeChart.INFO.copyright.toString == "(C)opyright 2000-2007, by Object Refinery Limited and Contributors"
org.jfree.chart.JFreeChart.INFO.libraries has only one value
org.jfree.chart.JFreeChart.INFO.libraries[] == []
org.jfree.chart.JFreeChart.INFO.libraries[].getClass().getName() == []
org.jfree.chart.JFreeChart.INFO.libraries.getClass().getName() == java.util.ArrayList.class
org.jfree.chart.JFreeChart.INFO.optionalLibraries has only one value
org.jfree.chart.JFreeChart.INFO.optionalLibraries[] == []
org.jfree.chart.JFreeChart.INFO.optionalLibraries[].getClass().getName() == []
org.jfree.chart.JFreeChart.INFO.name has only one value
org.jfree.chart.JFreeChart.INFO.name.toString == "JFreeChart"
org.jfree.chart.JFreeChart.INFO.version has only one value
org.jfree.chart.JFreeChart.INFO.version.toString == "1.2.0-pre"
org.jfree.chart.JFreeChart.INFO.licenceName has only one value
org.jfree.chart.JFreeChart.INFO.licenceName.toString == "LGPL"
org.jfree.chart.JFreeChart.INFO.info has only one value
org.jfree.chart.JFreeChart.INFO.info.toString == "http://www.jfree.org/jfreechart/index.html"
org.jfree.chart.JFreeChart.DEFAULT_TITLE_FONT has only one value
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT has only one value
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName() == java.awt.Color.class
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_IMAGE == null
return.renderingHints has only one value
return.borderVisible == false
return.borderStroke has only one value
return.borderPaint has only one value
return.padding has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS has only one value
return.padding.unitType has only one value
return.padding.top == 0.0
return.padding.left == 0.0
return.padding.bottom == 0.0
return.padding.right == 0.0
return.title has only one value
org.jfree.chart.title.TextTitle.DEFAULT_FONT has only one value
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT has only one value
return.title.text has only one value
return.title.text.toString == "Test"
return.title.font has only one value
return.title.textAlignment has only one value
return.title.paint has only one value
return.title.backgroundPaint == null
return.title.toolTipText == null
return.title.urlText == null
return.title.content == null
return.title.expandToFitSpace == false
org.jfree.chart.title.Title.DEFAULT_POSITION has only one value
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT has only one value
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT has only one value
org.jfree.chart.title.Title.DEFAULT_PADDING has only one value
return.title.position has only one value
return.title.horizontalAlignment has only one value
return.title.verticalAlignment has only one value
return.title.listenerList has only one value
return.title.notify == true
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener has only one value
return.title.id == null
return.title.margin has only one value
return.title.frame has only one value
return.title.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class
return.title.padding has only one value
return.title.width == 0.0
return.title.height == 0.0
return.title.bounds has only one value
return.title.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
return.subtitles has only one value
return.subtitles[] contains no nulls and has only one value, of length 1
return.subtitles[] elements has only one value
return.subtitles[].getClass().getName() == [org.jfree.chart.title.LegendTitle]
return.subtitles[].getClass().getName() elements == org.jfree.chart.title.LegendTitle.class
return.plot has only one value
return.plot.getClass().getName() == org.jfree.chart.plot.PiePlot.class
org.jfree.chart.plot.Plot.ZERO has only one value
org.jfree.chart.plot.Plot.ZERO.getClass().getName() == java.lang.Integer.class
org.jfree.chart.plot.Plot.DEFAULT_INSETS has only one value
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE has only one value
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName() == java.awt.BasicStroke.class
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT has only one value
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT has only one value
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX has only one value
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName() == java.awt.geom.Rectangle2D$Double.class
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE has only one value
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == java.awt.geom.Ellipse2D$Double.class
return.plot.parent == null
return.plot.datasetGroup == null
return.plot.noDataMessage == null
return.plot.noDataMessageFont has only one value
return.plot.noDataMessagePaint has only one value
return.plot.insets has only one value
return.plot.outlineVisible == true
return.plot.outlineStroke has only one value
return.plot.outlinePaint has only one value
return.plot.backgroundPaint has only one value
return.plot.backgroundImage == null
return.plot.backgroundImageAlignment == 15
return.plot.backgroundImageAlpha == 0.5
return.plot.foregroundAlpha == 1.0
return.plot.backgroundAlpha == 1.0
return.plot.drawingSupplier has only one value
return.plot.drawingSupplier.getClass().getName() == org.jfree.chart.plot.DefaultDrawingSupplier.class
return.plot.listenerList has only one value
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener has only one value
return.backgroundPaint has only one value
return.backgroundImage == null
return.backgroundImageAlignment == 15
return.backgroundImageAlpha == 0.5
return.changeListeners has only one value
return.progressListeners has only one value
return.notify == true
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartChangeListener == null
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartProgressListener == null
size(org.jfree.chart.JFreeChart.INFO.contributors[]) == 85
size(return.subtitles[]) == 1
===========================================================================
org.jfree.chart.ChartFactory.createPieChart3D(java.lang.String, org.jfree.data.general.PieDataset, boolean, boolean, boolean):::ENTER
title has only one value
title.toString == "Pie Chart"
dataset.getClass().getName() == org.jfree.data.general.DefaultPieDataset.class
legend == true
tooltips == true
urls == false
===========================================================================
org.jfree.chart.ChartFactory.createPieChart3D(java.lang.String, org.jfree.data.general.PieDataset, boolean, boolean, boolean):::EXIT
title.toString == orig(title.toString)
org.jfree.chart.JFreeChart.INFO.libraries.getClass().getName() == org.jfree.chart.JFreeChart.INFO.optionalLibraries.getClass().getName()
org.jfree.chart.JFreeChart.INFO.libraries.getClass().getName() == return.subtitles.getClass().getName()
org.jfree.chart.JFreeChart.DEFAULT_TITLE_FONT == return.title.font
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT == return.backgroundPaint
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName() == return.borderPaint.getClass().getName()
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName() == org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT.getClass().getName()
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName() == return.title.paint.getClass().getName()
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName() == org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName()
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName() == org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName()
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName() == return.plot.noDataMessagePaint.getClass().getName()
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName() == return.plot.outlinePaint.getClass().getName()
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName() == return.plot.backgroundPaint.getClass().getName()
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName() == return.backgroundPaint.getClass().getName()
return.borderStroke.getClass().getName() == org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName()
return.borderPaint == org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT
return.padding == org.jfree.chart.util.RectangleInsets.ZERO_INSETS
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == return.title.margin
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT == return.title.paint
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT == return.plot.noDataMessagePaint
return.title.text == orig(title)
return.title.textAlignment == org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT
org.jfree.chart.title.Title.DEFAULT_POSITION == return.title.position
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT == return.title.horizontalAlignment
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT == return.title.verticalAlignment
org.jfree.chart.title.Title.DEFAULT_PADDING == return.title.padding
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE == return.plot.outlineStroke
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName() == return.plot.outlineStroke.getClass().getName()
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT == return.plot.outlinePaint
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT == return.plot.backgroundPaint
title.toString == "Pie Chart"
org.jfree.chart.JFreeChart.INFO has only one value
org.jfree.chart.JFreeChart.INFO.logo == null
org.jfree.chart.JFreeChart.INFO.licenceText has only one value
org.jfree.chart.JFreeChart.INFO.licenceText.toString == "GNU LESSER GENERAL PUBLIC LICENSE\n\nVersion 2.1, February 1999\n\nCopyright (C) 1991, 1999 Free Software Foundation, Inc.\n59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\nEveryone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.\n\n[This is the first released version of the Lesser GPL.  It also counts as the successor of the GNU Library Public License, version 2, hence the version number 2.1.]\n\nPreamble\n\nThe licenses for most software are designed to take away your freedom to share and change it. By contrast, the GNU General Public Licenses are intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users.\n\nThis license, the Lesser General Public License, applies to some specially designated software packages--typically libraries--of the Free Software Foundation and other authors who decide to use it. You can use it too, but we suggest you first think carefully about whether this license or the ordinary General Public License is the better strategy to use in any particular case, based on the explanations below.\n\nWhen we speak of free software, we are referring to freedom of use, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish); that you receive source code or can get it if you want it; that you can change the software and use pieces of it in new free programs; and that you are informed that you can do these things.\n\nTo protect your rights, we need to make restrictions that forbid distributors to deny you these rights or to ask you to surrender these rights. These restrictions translate to certain responsibilities for you if you distribute copies of the library or if you modify it.\n\nFor example, if you distribute copies of the library, whether gratis or for a fee, you must give the recipients all the rights that we gave you. You must make sure that they, too, receive or can get the source code. If you link other code with the library, you must provide complete object files to the recipients, so that they can relink them with the library after making changes to the library and recompiling it. And you must show them these terms so they know their rights.\n\nWe protect your rights with a two-step method: (1) we copyright the library, and (2) we offer you this license, which gives you legal permission to copy, distribute and/or modify the library.\n\nTo protect each distributor, we want to make it very clear that there is no warranty for the free library. Also, if the library is modified by someone else and passed on, the recipients should know that what they have is not the original version, so that the original author's reputation will not be affected by problems that might be introduced by others.\n\nFinally, software patents pose a constant threat to the existence of any free program. We wish to make sure that a company cannot effectively restrict the users of a free program by obtaining a restrictive license from a patent holder. Therefore, we insist that any patent license obtained for a version of the library must be consistent with the full freedom of use specified in this license.\n\nMost GNU software, including some libraries, is covered by the ordinary GNU General Public License. This license, the GNU Lesser General Public License, applies to certain designated libraries, and is quite different from the ordinary General Public License. We use this license for certain libraries in order to permit linking those libraries into non-free programs.\n\nWhen a program is linked with a library, whether statically or using a shared library, the combination of the two is legally speaking a combined work, a derivative of the original library. The ordinary General Public License therefore permits such linking only if the entire combination fits its criteria of freedom. The Lesser General Public License permits more lax criteria for linking other code with the library.\n\nWe call this license the \"Lesser\" General Public License because it does Less to protect the user's freedom than the ordinary General Public License. It also provides other free software developers Less of an advantage over competing non-free programs. These disadvantages are the reason we use the ordinary General Public License for many libraries. However, the Lesser license provides advantages in certain special circumstances.\n\nFor example, on rare occasions, there may be a special need to encourage the widest possible use of a certain library, so that it becomes a de-facto standard. To achieve this, non-free programs must be allowed to use the library. A more frequent case is that a free library does the same job as widely used non-free libraries. In this case, there is little to gain by limiting the free library to free software only, so we use the Lesser General Public License.\n\nIn other cases, permission to use a particular library in non-free programs enables a greater number of people to use a large body of free software. For example, permission to use the GNU C Library in non-free programs enables many more people to use the whole GNU operating system, as well as its variant, the GNU/Linux operating system.\n\nAlthough the Lesser General Public License is Less protective of the users' freedom, it does ensure that the user of a program that is linked with the Library has the freedom and the wherewithal to run that program using a modified version of the Library.\n\nThe precise terms and conditions for copying, distribution and modification follow. Pay close attention to the difference between a \"work based on the library\" and a \"work that uses the library\". The former contains code derived from the library, whereas the latter must be combined with the library in order to run.\n\nTERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n0. This License Agreement applies to any software library or other program which contains a notice placed by the copyright holder or other authorized party saying it may be distributed under the terms of this Lesser General Public License (also called \"this License\"). Each licensee is addressed as \"you\".\nA \"library\" means a collection of software functions and/or data prepared so as to be conveniently linked with application programs (which use some of those functions and data) to form executables.\n\nThe \"Library\", below, refers to any such software library or work which has been distributed under these terms. A \"work based on the Library\" means either the Library or any derivative work under copyright law: that is to say, a work containing the Library or a portion of it, either verbatim or with modifications and/or translated straightforwardly into another language. (Hereinafter, translation is included without limitation in the term \"modification\".)\n\n\"Source code\" for a work means the preferred form of the work for making modifications to it. For a library, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the library.\n\nActivities other than copying, distribution and modification are not covered by this License; they are outside its scope. The act of running a program using the Library is not restricted, and output from such a program is covered only if its contents constitute a work based on the Library (independent of the use of the Library in a tool for writing it). Whether that is true depends on what the Library does and what the program that uses the Library does.\n1. You may copy and distribute verbatim copies of the Library's complete source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and distribute a copy of this License along with the Library.\n\nYou may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee.\n\n2. You may modify your copy or copies of the Library or any portion of it, thus forming a work based on the Library, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions:\n\n*    a) The modified work must itself be a software library.\n*    b) You must cause the files modified to carry prominent notices stating that you changed the files and the date of any change.\n*    c) You must cause the whole of the work to be licensed at no charge to all third parties under the terms of this License.\n*    d) If a facility in the modified Library refers to a function or a table of data to be supplied by an application program that uses the facility, other than as an argument passed when the facility is invoked, then you must make a good faith effort to ensure that, in the event an application does not supply such function or table, the facility still operates, and performs whatever part of its purpose remains meaningful.\n\n(For example, a function in a library to compute square roots has a purpose that is entirely well-defined independent of the application. Therefore, Subsection 2d requires that any application-supplied function or table used by this function must be optional: if the application does not supply it, the square root function must still compute square roots.)\n\nThese requirements apply to the modified work as a whole. If identifiable sections of that work are not derived from the Library, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works. But when you distribute the same sections as part of a whole which is a work based on the Library, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Library.\n\nIn addition, mere aggregation of another work not based on the Library with the Library (or with a work based on the Library) on a volume of a storage or distribution medium does not bring the other work under the scope of this License.\n\n3. You may opt to apply the terms of the ordinary GNU General Public License instead of this License to a given copy of the Library. To do this, you must alter all the notices that refer to this License, so that they refer to the ordinary GNU General Public License, version 2, instead of to this License. (If a newer version than version 2 of the ordinary GNU General Public License has appeared, then you can specify that version instead if you wish.) Do not make any other change in these notices.\n\nOnce this change is made in a given copy, it is irreversible for that copy, so the ordinary GNU General Public License applies to all subsequent copies and derivative works made from that copy.\n\nThis option is useful when you wish to copy part of the code of the Library into a program that is not a library.\n\n4. You may copy and distribute the Library (or a portion or derivative of it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange.\n\nIf distribution of object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place satisfies the requirement to distribute the source code, even though third parties are not compelled to copy the source along with the object code.\n\n5. A program that contains no derivative of any portion of the Library, but is designed to work with the Library by being compiled or linked with it, is called a \"work that uses the Library\". Such a work, in isolation, is not a derivative work of the Library, and therefore falls outside the scope of this License.\n\nHowever, linking a \"work that uses the Library\" with the Library creates an executable that is a derivative of the Library (because it contains portions of the Library), rather than a \"work that uses the library\". The executable is therefore covered by this License. Section 6 states terms for distribution of such executables.\n\nWhen a \"work that uses the Library\" uses material from a header file that is part of the Library, the object code for the work may be a derivative work of the Library even though the source code is not. Whether this is true is especially significant if the work can be linked without the Library, or if the work is itself a library. The threshold for this to be true is not precisely defined by law.\n\nIf such an object file uses only numerical parameters, data structure layouts and accessors, and small macros and small inline functions (ten lines or less in length), then the use of the object file is unrestricted, regardless of whether it is legally a derivative work. (Executables containing this object code plus portions of the Library will still fall under Section 6.)\n\nOtherwise, if the work is a derivative of the Library, you may distribute the object code for the work under the terms of Section 6. Any executables containing that work also fall under Section 6, whether or not they are linked directly with the Library itself.\n\n6. As an exception to the Sections above, you may also combine or link a \"work that uses the Library\" with the Library to produce a work containing portions of the Library, and distribute that work under terms of your choice, provided that the terms permit modification of the work for the customer's own use and reverse engineering for debugging such modifications.\n\nYou must give prominent notice with each copy of the work that the Library is used in it and that the Library and its use are covered by this License. You must supply a copy of this License. If the work during execution displays copyright notices, you must include the copyright notice for the Library among them, as well as a reference directing the user to the copy of this License. Also, you must do one of these things:\n\n*    a) Accompany the work with the complete corresponding machine-readable source code for the Library including whatever changes were used in the work (which must be distributed under Sections 1 and 2 above); and, if the work is an executable linked with the Library, with the complete machine-readable \"work that uses the Library\", as object code and/or source code, so that the user can modify the Library and then relink to produce a modified executable containing the modified Library. (It is understood that the user who changes the contents of definitions files in the Library will not necessarily be able to recompile the application to use the modified definitions.)\n*    b) Use a suitable shared library mechanism for linking with the Library. A suitable mechanism is one that (1) uses at run time a copy of the library already present on the user's computer system, rather than copying library functions into the executable, and (2) will operate properly with a modified version of the library, if the user installs one, as long as the modified version is interface-compatible with the version that the work was made with.\n*    c) Accompany the work with a written offer, valid for at least three years, to give the same user the materials specified in Subsection 6a, above, for a charge no more than the cost of performing this distribution.\n*    d) If distribution of the work is made by offering access to copy from a designated place, offer equivalent access to copy the above specified materials from the same place.\n*    e) Verify that the user has already received a copy of these materials or that you have already sent this user a copy.\n\nFor an executable, the required form of the \"work that uses the Library\" must include any data and utility programs needed for reproducing the executable from it. However, as a special exception, the materials to be distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable.\n\nIt may happen that this requirement contradicts the license restrictions of other proprietary libraries that do not normally accompany the operating system. Such a contradiction means you cannot use both them and the Library together in an executable that you distribute.\n\n7. You may place library facilities that are a work based on the Library side-by-side in a single library together with other library facilities not covered by this License, and distribute such a combined library, provided that the separate distribution of the work based on the Library and of the other library facilities is otherwise permitted, and provided that you do these two things:\n\n*    a) Accompany the combined library with a copy of the same work based on the Library, uncombined with any other library facilities. This must be distributed under the terms of the Sections above.\n*    b) Give prominent notice with the combined library of the fact that part of it is a work based on the Library, and explaining where to find the accompanying uncombined form of the same work.\n\n8. You may not copy, modify, sublicense, link with, or distribute the Library except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense, link with, or distribute the Library is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance.\n\n9. You are not required to accept this License, since you have not signed it. However, nothing else grants you permission to modify or distribute the Library or its derivative works. These actions are prohibited by law if you do not accept this License. Therefore, by modifying or distributing the Library (or any work based on the Library), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Library or works based on it.\n\n10. Each time you redistribute the Library (or any work based on the Library), the recipient automatically receives a license from the original licensor to copy, distribute, link with or modify the Library subject to these terms and conditions. You may not impose any further restrictions on the recipients' exercise of the rights granted herein. You are not responsible for enforcing compliance by third parties with this License.\n\n11. If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Library at all. For example, if a patent license would not permit royalty-free redistribution of the Library by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Library.\n\nIf any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply, and the section as a whole is intended to apply in other circumstances.\n\nIt is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system which is implemented by public license practices. Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice.\n\nThis section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License.\n\n12. If the distribution and/or use of the Library is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Library under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded. In such case, this License incorporates the limitation as if written in the body of this License.\n\n13. The Free Software Foundation may publish revised and/or new versions of the Lesser General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.\n\nEach version is given a distinguishing version number. If the Library specifies a version number of this License which applies to it and \"any later version\", you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation. If the Library does not specify a license version number, you may choose any version ever published by the Free Software Foundation.\n\n14. If you wish to incorporate parts of the Library into other free programs whose distribution conditions are incompatible with these, write to the author to ask for permission. For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this. Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally.\n\nNO WARRANTY\n\n15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE LIBRARY \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE LIBRARY IS WITH YOU. SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n\nEND OF TERMS AND CONDITIONS\n\n\nHow to Apply These Terms to Your New Libraries\n\nIf you develop a new library, and you want it to be of the greatest possible use to the public, we recommend making it free software that everyone can redistribute and change. You can do so by permitting redistribution under these terms (or, alternatively, under the terms of the ordinary General Public License).\n\nTo apply these terms, attach the following notices to the library.  It is safest to attach them to the start of each source file to most effectively convey the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.\n\n<one line to give the library's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.\n\nThis library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\nAlso add information on how to contact you by electronic and paper mail.\n\nYou should also get your employer (if you work as a programmer) or your school, if any, to sign a \"copyright disclaimer\" for the library, if necessary.  Here is a sample; alter the names:\n\nYoyodyne, Inc., hereby disclaims all copyright interest in the library `Frob' (a library for tweaking knobs) written by James Random Hacker.\n\n<signature of Ty Coon>, 1 April 1990\nTy Coon, President of Vice\n\nThat's all there is to it!\n"
org.jfree.chart.JFreeChart.INFO.contributors has only one value
org.jfree.chart.JFreeChart.INFO.contributors[] contains no nulls and has only one value, of length 85
org.jfree.chart.JFreeChart.INFO.contributors[].getClass().getName() == [org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor]
org.jfree.chart.JFreeChart.INFO.contributors[].getClass().getName() elements == org.jfree.chart.ui.Contributor.class
org.jfree.chart.JFreeChart.INFO.contributors.getClass().getName() == java.util.Arrays$ArrayList.class
org.jfree.chart.JFreeChart.INFO.copyright has only one value
org.jfree.chart.JFreeChart.INFO.copyright.toString == "(C)opyright 2000-2007, by Object Refinery Limited and Contributors"
org.jfree.chart.JFreeChart.INFO.libraries has only one value
org.jfree.chart.JFreeChart.INFO.libraries[] == []
org.jfree.chart.JFreeChart.INFO.libraries[].getClass().getName() == []
org.jfree.chart.JFreeChart.INFO.libraries.getClass().getName() == java.util.ArrayList.class
org.jfree.chart.JFreeChart.INFO.optionalLibraries has only one value
org.jfree.chart.JFreeChart.INFO.optionalLibraries[] == []
org.jfree.chart.JFreeChart.INFO.optionalLibraries[].getClass().getName() == []
org.jfree.chart.JFreeChart.INFO.name has only one value
org.jfree.chart.JFreeChart.INFO.name.toString == "JFreeChart"
org.jfree.chart.JFreeChart.INFO.version has only one value
org.jfree.chart.JFreeChart.INFO.version.toString == "1.2.0-pre"
org.jfree.chart.JFreeChart.INFO.licenceName has only one value
org.jfree.chart.JFreeChart.INFO.licenceName.toString == "LGPL"
org.jfree.chart.JFreeChart.INFO.info has only one value
org.jfree.chart.JFreeChart.INFO.info.toString == "http://www.jfree.org/jfreechart/index.html"
org.jfree.chart.JFreeChart.DEFAULT_TITLE_FONT has only one value
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT has only one value
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName() == java.awt.Color.class
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_IMAGE == null
return.borderVisible == false
org.jfree.chart.util.RectangleInsets.ZERO_INSETS has only one value
return.padding.unitType has only one value
return.padding.top == 0.0
return.padding.left == 0.0
return.padding.bottom == 0.0
return.padding.right == 0.0
org.jfree.chart.title.TextTitle.DEFAULT_FONT has only one value
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT has only one value
return.title.text.toString == "Pie Chart"
return.title.backgroundPaint == null
return.title.toolTipText == null
return.title.urlText == null
return.title.content == null
return.title.expandToFitSpace == false
org.jfree.chart.title.Title.DEFAULT_POSITION has only one value
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT has only one value
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT has only one value
org.jfree.chart.title.Title.DEFAULT_PADDING has only one value
return.title.notify == true
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener has only one value
return.title.id == null
return.title.frame has only one value
return.title.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class
return.title.width == 0.0
return.title.height == 0.0
return.title.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
return.subtitles[].getClass().getName() == [org.jfree.chart.title.LegendTitle]
return.subtitles[].getClass().getName() elements == org.jfree.chart.title.LegendTitle.class
return.plot.getClass().getName() == org.jfree.chart.plot.PiePlot3D.class
org.jfree.chart.plot.Plot.ZERO has only one value
org.jfree.chart.plot.Plot.ZERO.getClass().getName() == java.lang.Integer.class
org.jfree.chart.plot.Plot.DEFAULT_INSETS has only one value
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE has only one value
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName() == java.awt.BasicStroke.class
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT has only one value
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT has only one value
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX has only one value
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName() == java.awt.geom.Rectangle2D$Double.class
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE has only one value
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == java.awt.geom.Ellipse2D$Double.class
return.plot.parent == null
return.plot.datasetGroup == null
return.plot.noDataMessage == null
return.plot.outlineVisible == true
return.plot.backgroundImage == null
return.plot.backgroundImageAlignment == 15
return.plot.backgroundImageAlpha == 0.5
return.plot.foregroundAlpha == 1.0
return.plot.backgroundAlpha == 1.0
return.plot.drawingSupplier.getClass().getName() == org.jfree.chart.plot.DefaultDrawingSupplier.class
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener has only one value
return.backgroundImage == null
return.backgroundImageAlignment == 15
return.backgroundImageAlpha == 0.5
return.notify == true
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartChangeListener == null
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartProgressListener == null
size(org.jfree.chart.JFreeChart.INFO.contributors[]) == 85
size(return.subtitles[]) == 1
===========================================================================
org.jfree.chart.JFreeChart:::CLASS
org.jfree.chart.JFreeChart.INFO has only one value
org.jfree.chart.JFreeChart.INFO != null
org.jfree.chart.JFreeChart.INFO.logo == null
org.jfree.chart.JFreeChart.INFO.licenceText has only one value
org.jfree.chart.JFreeChart.INFO.licenceText != null
org.jfree.chart.JFreeChart.INFO.licenceText.toString == "GNU LESSER GENERAL PUBLIC LICENSE\n\nVersion 2.1, February 1999\n\nCopyright (C) 1991, 1999 Free Software Foundation, Inc.\n59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\nEveryone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.\n\n[This is the first released version of the Lesser GPL.  It also counts as the successor of the GNU Library Public License, version 2, hence the version number 2.1.]\n\nPreamble\n\nThe licenses for most software are designed to take away your freedom to share and change it. By contrast, the GNU General Public Licenses are intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users.\n\nThis license, the Lesser General Public License, applies to some specially designated software packages--typically libraries--of the Free Software Foundation and other authors who decide to use it. You can use it too, but we suggest you first think carefully about whether this license or the ordinary General Public License is the better strategy to use in any particular case, based on the explanations below.\n\nWhen we speak of free software, we are referring to freedom of use, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish); that you receive source code or can get it if you want it; that you can change the software and use pieces of it in new free programs; and that you are informed that you can do these things.\n\nTo protect your rights, we need to make restrictions that forbid distributors to deny you these rights or to ask you to surrender these rights. These restrictions translate to certain responsibilities for you if you distribute copies of the library or if you modify it.\n\nFor example, if you distribute copies of the library, whether gratis or for a fee, you must give the recipients all the rights that we gave you. You must make sure that they, too, receive or can get the source code. If you link other code with the library, you must provide complete object files to the recipients, so that they can relink them with the library after making changes to the library and recompiling it. And you must show them these terms so they know their rights.\n\nWe protect your rights with a two-step method: (1) we copyright the library, and (2) we offer you this license, which gives you legal permission to copy, distribute and/or modify the library.\n\nTo protect each distributor, we want to make it very clear that there is no warranty for the free library. Also, if the library is modified by someone else and passed on, the recipients should know that what they have is not the original version, so that the original author's reputation will not be affected by problems that might be introduced by others.\n\nFinally, software patents pose a constant threat to the existence of any free program. We wish to make sure that a company cannot effectively restrict the users of a free program by obtaining a restrictive license from a patent holder. Therefore, we insist that any patent license obtained for a version of the library must be consistent with the full freedom of use specified in this license.\n\nMost GNU software, including some libraries, is covered by the ordinary GNU General Public License. This license, the GNU Lesser General Public License, applies to certain designated libraries, and is quite different from the ordinary General Public License. We use this license for certain libraries in order to permit linking those libraries into non-free programs.\n\nWhen a program is linked with a library, whether statically or using a shared library, the combination of the two is legally speaking a combined work, a derivative of the original library. The ordinary General Public License therefore permits such linking only if the entire combination fits its criteria of freedom. The Lesser General Public License permits more lax criteria for linking other code with the library.\n\nWe call this license the \"Lesser\" General Public License because it does Less to protect the user's freedom than the ordinary General Public License. It also provides other free software developers Less of an advantage over competing non-free programs. These disadvantages are the reason we use the ordinary General Public License for many libraries. However, the Lesser license provides advantages in certain special circumstances.\n\nFor example, on rare occasions, there may be a special need to encourage the widest possible use of a certain library, so that it becomes a de-facto standard. To achieve this, non-free programs must be allowed to use the library. A more frequent case is that a free library does the same job as widely used non-free libraries. In this case, there is little to gain by limiting the free library to free software only, so we use the Lesser General Public License.\n\nIn other cases, permission to use a particular library in non-free programs enables a greater number of people to use a large body of free software. For example, permission to use the GNU C Library in non-free programs enables many more people to use the whole GNU operating system, as well as its variant, the GNU/Linux operating system.\n\nAlthough the Lesser General Public License is Less protective of the users' freedom, it does ensure that the user of a program that is linked with the Library has the freedom and the wherewithal to run that program using a modified version of the Library.\n\nThe precise terms and conditions for copying, distribution and modification follow. Pay close attention to the difference between a \"work based on the library\" and a \"work that uses the library\". The former contains code derived from the library, whereas the latter must be combined with the library in order to run.\n\nTERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n0. This License Agreement applies to any software library or other program which contains a notice placed by the copyright holder or other authorized party saying it may be distributed under the terms of this Lesser General Public License (also called \"this License\"). Each licensee is addressed as \"you\".\nA \"library\" means a collection of software functions and/or data prepared so as to be conveniently linked with application programs (which use some of those functions and data) to form executables.\n\nThe \"Library\", below, refers to any such software library or work which has been distributed under these terms. A \"work based on the Library\" means either the Library or any derivative work under copyright law: that is to say, a work containing the Library or a portion of it, either verbatim or with modifications and/or translated straightforwardly into another language. (Hereinafter, translation is included without limitation in the term \"modification\".)\n\n\"Source code\" for a work means the preferred form of the work for making modifications to it. For a library, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the library.\n\nActivities other than copying, distribution and modification are not covered by this License; they are outside its scope. The act of running a program using the Library is not restricted, and output from such a program is covered only if its contents constitute a work based on the Library (independent of the use of the Library in a tool for writing it). Whether that is true depends on what the Library does and what the program that uses the Library does.\n1. You may copy and distribute verbatim copies of the Library's complete source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and distribute a copy of this License along with the Library.\n\nYou may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee.\n\n2. You may modify your copy or copies of the Library or any portion of it, thus forming a work based on the Library, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions:\n\n*    a) The modified work must itself be a software library.\n*    b) You must cause the files modified to carry prominent notices stating that you changed the files and the date of any change.\n*    c) You must cause the whole of the work to be licensed at no charge to all third parties under the terms of this License.\n*    d) If a facility in the modified Library refers to a function or a table of data to be supplied by an application program that uses the facility, other than as an argument passed when the facility is invoked, then you must make a good faith effort to ensure that, in the event an application does not supply such function or table, the facility still operates, and performs whatever part of its purpose remains meaningful.\n\n(For example, a function in a library to compute square roots has a purpose that is entirely well-defined independent of the application. Therefore, Subsection 2d requires that any application-supplied function or table used by this function must be optional: if the application does not supply it, the square root function must still compute square roots.)\n\nThese requirements apply to the modified work as a whole. If identifiable sections of that work are not derived from the Library, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works. But when you distribute the same sections as part of a whole which is a work based on the Library, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Library.\n\nIn addition, mere aggregation of another work not based on the Library with the Library (or with a work based on the Library) on a volume of a storage or distribution medium does not bring the other work under the scope of this License.\n\n3. You may opt to apply the terms of the ordinary GNU General Public License instead of this License to a given copy of the Library. To do this, you must alter all the notices that refer to this License, so that they refer to the ordinary GNU General Public License, version 2, instead of to this License. (If a newer version than version 2 of the ordinary GNU General Public License has appeared, then you can specify that version instead if you wish.) Do not make any other change in these notices.\n\nOnce this change is made in a given copy, it is irreversible for that copy, so the ordinary GNU General Public License applies to all subsequent copies and derivative works made from that copy.\n\nThis option is useful when you wish to copy part of the code of the Library into a program that is not a library.\n\n4. You may copy and distribute the Library (or a portion or derivative of it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange.\n\nIf distribution of object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place satisfies the requirement to distribute the source code, even though third parties are not compelled to copy the source along with the object code.\n\n5. A program that contains no derivative of any portion of the Library, but is designed to work with the Library by being compiled or linked with it, is called a \"work that uses the Library\". Such a work, in isolation, is not a derivative work of the Library, and therefore falls outside the scope of this License.\n\nHowever, linking a \"work that uses the Library\" with the Library creates an executable that is a derivative of the Library (because it contains portions of the Library), rather than a \"work that uses the library\". The executable is therefore covered by this License. Section 6 states terms for distribution of such executables.\n\nWhen a \"work that uses the Library\" uses material from a header file that is part of the Library, the object code for the work may be a derivative work of the Library even though the source code is not. Whether this is true is especially significant if the work can be linked without the Library, or if the work is itself a library. The threshold for this to be true is not precisely defined by law.\n\nIf such an object file uses only numerical parameters, data structure layouts and accessors, and small macros and small inline functions (ten lines or less in length), then the use of the object file is unrestricted, regardless of whether it is legally a derivative work. (Executables containing this object code plus portions of the Library will still fall under Section 6.)\n\nOtherwise, if the work is a derivative of the Library, you may distribute the object code for the work under the terms of Section 6. Any executables containing that work also fall under Section 6, whether or not they are linked directly with the Library itself.\n\n6. As an exception to the Sections above, you may also combine or link a \"work that uses the Library\" with the Library to produce a work containing portions of the Library, and distribute that work under terms of your choice, provided that the terms permit modification of the work for the customer's own use and reverse engineering for debugging such modifications.\n\nYou must give prominent notice with each copy of the work that the Library is used in it and that the Library and its use are covered by this License. You must supply a copy of this License. If the work during execution displays copyright notices, you must include the copyright notice for the Library among them, as well as a reference directing the user to the copy of this License. Also, you must do one of these things:\n\n*    a) Accompany the work with the complete corresponding machine-readable source code for the Library including whatever changes were used in the work (which must be distributed under Sections 1 and 2 above); and, if the work is an executable linked with the Library, with the complete machine-readable \"work that uses the Library\", as object code and/or source code, so that the user can modify the Library and then relink to produce a modified executable containing the modified Library. (It is understood that the user who changes the contents of definitions files in the Library will not necessarily be able to recompile the application to use the modified definitions.)\n*    b) Use a suitable shared library mechanism for linking with the Library. A suitable mechanism is one that (1) uses at run time a copy of the library already present on the user's computer system, rather than copying library functions into the executable, and (2) will operate properly with a modified version of the library, if the user installs one, as long as the modified version is interface-compatible with the version that the work was made with.\n*    c) Accompany the work with a written offer, valid for at least three years, to give the same user the materials specified in Subsection 6a, above, for a charge no more than the cost of performing this distribution.\n*    d) If distribution of the work is made by offering access to copy from a designated place, offer equivalent access to copy the above specified materials from the same place.\n*    e) Verify that the user has already received a copy of these materials or that you have already sent this user a copy.\n\nFor an executable, the required form of the \"work that uses the Library\" must include any data and utility programs needed for reproducing the executable from it. However, as a special exception, the materials to be distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable.\n\nIt may happen that this requirement contradicts the license restrictions of other proprietary libraries that do not normally accompany the operating system. Such a contradiction means you cannot use both them and the Library together in an executable that you distribute.\n\n7. You may place library facilities that are a work based on the Library side-by-side in a single library together with other library facilities not covered by this License, and distribute such a combined library, provided that the separate distribution of the work based on the Library and of the other library facilities is otherwise permitted, and provided that you do these two things:\n\n*    a) Accompany the combined library with a copy of the same work based on the Library, uncombined with any other library facilities. This must be distributed under the terms of the Sections above.\n*    b) Give prominent notice with the combined library of the fact that part of it is a work based on the Library, and explaining where to find the accompanying uncombined form of the same work.\n\n8. You may not copy, modify, sublicense, link with, or distribute the Library except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense, link with, or distribute the Library is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance.\n\n9. You are not required to accept this License, since you have not signed it. However, nothing else grants you permission to modify or distribute the Library or its derivative works. These actions are prohibited by law if you do not accept this License. Therefore, by modifying or distributing the Library (or any work based on the Library), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Library or works based on it.\n\n10. Each time you redistribute the Library (or any work based on the Library), the recipient automatically receives a license from the original licensor to copy, distribute, link with or modify the Library subject to these terms and conditions. You may not impose any further restrictions on the recipients' exercise of the rights granted herein. You are not responsible for enforcing compliance by third parties with this License.\n\n11. If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Library at all. For example, if a patent license would not permit royalty-free redistribution of the Library by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Library.\n\nIf any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply, and the section as a whole is intended to apply in other circumstances.\n\nIt is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system which is implemented by public license practices. Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice.\n\nThis section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License.\n\n12. If the distribution and/or use of the Library is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Library under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded. In such case, this License incorporates the limitation as if written in the body of this License.\n\n13. The Free Software Foundation may publish revised and/or new versions of the Lesser General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.\n\nEach version is given a distinguishing version number. If the Library specifies a version number of this License which applies to it and \"any later version\", you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation. If the Library does not specify a license version number, you may choose any version ever published by the Free Software Foundation.\n\n14. If you wish to incorporate parts of the Library into other free programs whose distribution conditions are incompatible with these, write to the author to ask for permission. For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this. Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally.\n\nNO WARRANTY\n\n15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE LIBRARY \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE LIBRARY IS WITH YOU. SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n\nEND OF TERMS AND CONDITIONS\n\n\nHow to Apply These Terms to Your New Libraries\n\nIf you develop a new library, and you want it to be of the greatest possible use to the public, we recommend making it free software that everyone can redistribute and change. You can do so by permitting redistribution under these terms (or, alternatively, under the terms of the ordinary General Public License).\n\nTo apply these terms, attach the following notices to the library.  It is safest to attach them to the start of each source file to most effectively convey the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.\n\n<one line to give the library's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.\n\nThis library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\nAlso add information on how to contact you by electronic and paper mail.\n\nYou should also get your employer (if you work as a programmer) or your school, if any, to sign a \"copyright disclaimer\" for the library, if necessary.  Here is a sample; alter the names:\n\nYoyodyne, Inc., hereby disclaims all copyright interest in the library `Frob' (a library for tweaking knobs) written by James Random Hacker.\n\n<signature of Ty Coon>, 1 April 1990\nTy Coon, President of Vice\n\nThat's all there is to it!\n"
org.jfree.chart.JFreeChart.INFO.contributors has only one value
org.jfree.chart.JFreeChart.INFO.contributors != null
org.jfree.chart.JFreeChart.INFO.contributors[] contains no nulls and has only one value, of length 85
org.jfree.chart.JFreeChart.INFO.contributors[] elements != null
org.jfree.chart.JFreeChart.INFO.contributors[].getClass().getName() == [org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor]
org.jfree.chart.JFreeChart.INFO.contributors[].getClass().getName() elements == org.jfree.chart.ui.Contributor.class
org.jfree.chart.JFreeChart.INFO.contributors.getClass().getName() == java.util.Arrays$ArrayList.class
org.jfree.chart.JFreeChart.INFO.copyright has only one value
org.jfree.chart.JFreeChart.INFO.copyright != null
org.jfree.chart.JFreeChart.INFO.copyright.toString == "(C)opyright 2000-2007, by Object Refinery Limited and Contributors"
org.jfree.chart.JFreeChart.INFO.libraries has only one value
org.jfree.chart.JFreeChart.INFO.libraries != null
org.jfree.chart.JFreeChart.INFO.libraries[] == []
org.jfree.chart.JFreeChart.INFO.libraries[].getClass().getName() == []
org.jfree.chart.JFreeChart.INFO.libraries.getClass().getName() == java.util.ArrayList.class
org.jfree.chart.JFreeChart.INFO.optionalLibraries has only one value
org.jfree.chart.JFreeChart.INFO.optionalLibraries != null
org.jfree.chart.JFreeChart.INFO.optionalLibraries[] == []
org.jfree.chart.JFreeChart.INFO.optionalLibraries[].getClass().getName() == []
org.jfree.chart.JFreeChart.INFO.optionalLibraries.getClass().getName() == java.util.ArrayList.class
org.jfree.chart.JFreeChart.INFO.name has only one value
org.jfree.chart.JFreeChart.INFO.name != null
org.jfree.chart.JFreeChart.INFO.name.toString == "JFreeChart"
org.jfree.chart.JFreeChart.INFO.version has only one value
org.jfree.chart.JFreeChart.INFO.version != null
org.jfree.chart.JFreeChart.INFO.version.toString == "1.2.0-pre"
org.jfree.chart.JFreeChart.INFO.licenceName has only one value
org.jfree.chart.JFreeChart.INFO.licenceName != null
org.jfree.chart.JFreeChart.INFO.licenceName.toString == "LGPL"
org.jfree.chart.JFreeChart.INFO.info has only one value
org.jfree.chart.JFreeChart.INFO.info != null
org.jfree.chart.JFreeChart.INFO.info.toString == "http://www.jfree.org/jfreechart/index.html"
org.jfree.chart.JFreeChart.DEFAULT_TITLE_FONT has only one value
org.jfree.chart.JFreeChart.DEFAULT_TITLE_FONT != null
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT has only one value
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT != null
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName() == java.awt.Color.class
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_IMAGE == null
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartChangeListener == null
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartProgressListener == null
size(org.jfree.chart.JFreeChart.INFO.contributors[]) == 85
===========================================================================
org.jfree.chart.JFreeChart:::OBJECT
this.renderingHints != null
this.borderVisible == false
this.borderStroke != null
this.borderStroke.getClass().getName() == java.awt.BasicStroke.class
this.borderPaint has only one value
this.borderPaint != null
this.borderPaint.getClass().getName() == java.awt.Color.class
this.padding has only one value
this.padding != null
org.jfree.chart.util.RectangleInsets.ZERO_INSETS has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS != null
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType != null
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == 0.0
this.padding.unitType has only one value
this.padding.unitType != null
org.jfree.chart.util.UnitType.ABSOLUTE has only one value
org.jfree.chart.util.UnitType.ABSOLUTE != null
org.jfree.chart.util.UnitType.RELATIVE has only one value
org.jfree.chart.util.UnitType.RELATIVE != null
this.padding.unitType.name has only one value
this.padding.unitType.name != null
this.padding.unitType.name.toString == "UnitType.ABSOLUTE"
this.padding.top == 0.0
this.padding.left == 0.0
this.padding.bottom == 0.0
this.padding.right == 0.0
this.title != null
org.jfree.chart.title.TextTitle.DEFAULT_FONT has only one value
org.jfree.chart.title.TextTitle.DEFAULT_FONT != null
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT has only one value
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT != null
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT.getClass().getName() == java.awt.Color.class
this.title.text != null
this.title.text.toString one of { "Pie Chart", "Test" }
this.title.font has only one value
this.title.font != null
this.title.textAlignment has only one value
this.title.textAlignment != null
org.jfree.chart.util.HorizontalAlignment.LEFT has only one value
org.jfree.chart.util.HorizontalAlignment.LEFT != null
org.jfree.chart.util.HorizontalAlignment.RIGHT has only one value
org.jfree.chart.util.HorizontalAlignment.RIGHT != null
org.jfree.chart.util.HorizontalAlignment.CENTER has only one value
org.jfree.chart.util.HorizontalAlignment.CENTER != null
this.title.textAlignment.name has only one value
this.title.textAlignment.name != null
this.title.textAlignment.name.toString == "HorizontalAlignment.CENTER"
this.title.paint has only one value
this.title.paint != null
this.title.paint.getClass().getName() == java.awt.Color.class
this.title.backgroundPaint == null
this.title.toolTipText == null
this.title.urlText == null
this.title.content.lines != null
this.title.content.lines[] elements != null
this.title.content.lines[].getClass().getName() == [org.jfree.chart.text.TextLine]
this.title.content.lines[].getClass().getName() elements == org.jfree.chart.text.TextLine.class
this.title.content.lines.getClass().getName() == java.util.ArrayList.class
this.title.content.lineAlignment has only one value
this.title.content.lineAlignment != null
this.title.expandToFitSpace == false
org.jfree.chart.title.Title.DEFAULT_POSITION has only one value
org.jfree.chart.title.Title.DEFAULT_POSITION != null
org.jfree.chart.util.RectangleEdge.TOP has only one value
org.jfree.chart.util.RectangleEdge.TOP != null
org.jfree.chart.util.RectangleEdge.BOTTOM has only one value
org.jfree.chart.util.RectangleEdge.BOTTOM != null
org.jfree.chart.util.RectangleEdge.LEFT has only one value
org.jfree.chart.util.RectangleEdge.LEFT != null
org.jfree.chart.util.RectangleEdge.RIGHT has only one value
org.jfree.chart.util.RectangleEdge.RIGHT != null
org.jfree.chart.title.Title.DEFAULT_POSITION.name has only one value
org.jfree.chart.title.Title.DEFAULT_POSITION.name != null
org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString == "RectangleEdge.TOP"
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT has only one value
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT != null
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name has only one value
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name != null
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString == "HorizontalAlignment.CENTER"
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT has only one value
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT != null
org.jfree.chart.util.VerticalAlignment.TOP has only one value
org.jfree.chart.util.VerticalAlignment.TOP != null
org.jfree.chart.util.VerticalAlignment.BOTTOM has only one value
org.jfree.chart.util.VerticalAlignment.BOTTOM != null
org.jfree.chart.util.VerticalAlignment.CENTER has only one value
org.jfree.chart.util.VerticalAlignment.CENTER != null
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name has only one value
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name != null
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString == "VerticalAlignment.CENTER"
org.jfree.chart.title.Title.DEFAULT_PADDING has only one value
org.jfree.chart.title.Title.DEFAULT_PADDING != null
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType has only one value
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType != null
org.jfree.chart.title.Title.DEFAULT_PADDING.top == 1.0
org.jfree.chart.title.Title.DEFAULT_PADDING.left == 1.0
org.jfree.chart.title.Title.DEFAULT_PADDING.bottom == 1.0
org.jfree.chart.title.Title.DEFAULT_PADDING.right == 1.0
this.title.position has only one value
this.title.position != null
this.title.position.name has only one value
this.title.position.name != null
this.title.position.name.toString == "RectangleEdge.TOP"
this.title.horizontalAlignment has only one value
this.title.horizontalAlignment != null
this.title.horizontalAlignment.name has only one value
this.title.horizontalAlignment.name != null
this.title.horizontalAlignment.name.toString == "HorizontalAlignment.CENTER"
this.title.verticalAlignment has only one value
this.title.verticalAlignment != null
this.title.verticalAlignment.name has only one value
this.title.verticalAlignment.name != null
this.title.verticalAlignment.name.toString == "VerticalAlignment.CENTER"
this.title.listenerList != null
this.title.notify == true
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener has only one value
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener != null
this.title.id == null
this.title.margin has only one value
this.title.margin != null
this.title.margin.unitType has only one value
this.title.margin.unitType != null
this.title.margin.top == 0.0
this.title.margin.left == 0.0
this.title.margin.bottom == 0.0
this.title.margin.right == 0.0
this.title.frame has only one value
this.title.frame != null
this.title.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class
this.title.padding has only one value
this.title.padding != null
this.title.padding.unitType has only one value
this.title.padding.unitType != null
this.title.padding.top == 1.0
this.title.padding.left == 1.0
this.title.padding.bottom == 1.0
this.title.padding.right == 1.0
this.title.width == 0.0
this.title.height == 0.0
this.title.bounds != null
this.title.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
this.subtitles != null
this.subtitles[] elements != null
this.subtitles[].getClass().getName() == [org.jfree.chart.title.LegendTitle]
this.subtitles[].getClass().getName() elements == org.jfree.chart.title.LegendTitle.class
this.subtitles.getClass().getName() == java.util.ArrayList.class
this.plot != null
org.jfree.chart.plot.Plot.ZERO has only one value
org.jfree.chart.plot.Plot.ZERO != null
org.jfree.chart.plot.Plot.ZERO.getClass().getName() == java.lang.Integer.class
org.jfree.chart.plot.Plot.DEFAULT_INSETS has only one value
org.jfree.chart.plot.Plot.DEFAULT_INSETS != null
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType has only one value
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType != null
org.jfree.chart.plot.Plot.DEFAULT_INSETS.top == 4.0
org.jfree.chart.plot.Plot.DEFAULT_INSETS.left == 8.0
org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom == 4.0
org.jfree.chart.plot.Plot.DEFAULT_INSETS.right == 8.0
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE has only one value
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE != null
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName() == java.awt.BasicStroke.class
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT has only one value
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT != null
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName() == java.awt.Color.class
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT has only one value
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT != null
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName() == java.awt.Color.class
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX has only one value
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX != null
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName() == java.awt.geom.Rectangle2D$Double.class
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE has only one value
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE != null
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == java.awt.geom.Ellipse2D$Double.class
this.plot.parent == null
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener has only one value
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener != null
this.plot.datasetGroup == null
this.plot.noDataMessage == null
this.plot.noDataMessageFont != null
this.plot.noDataMessagePaint has only one value
this.plot.noDataMessagePaint != null
this.plot.noDataMessagePaint.getClass().getName() == java.awt.Color.class
this.plot.insets != null
this.plot.insets.unitType has only one value
this.plot.insets.unitType != null
this.plot.insets.top == 0.0
this.plot.insets.left == 5.0
this.plot.insets.bottom == 5.0
this.plot.insets.right == 5.0
this.plot.outlineVisible == true
this.plot.outlineStroke has only one value
this.plot.outlineStroke != null
this.plot.outlineStroke.getClass().getName() == java.awt.BasicStroke.class
this.plot.outlinePaint has only one value
this.plot.outlinePaint != null
this.plot.outlinePaint.getClass().getName() == java.awt.Color.class
this.plot.backgroundPaint has only one value
this.plot.backgroundPaint != null
this.plot.backgroundPaint.getClass().getName() == java.awt.Color.class
this.plot.backgroundImage == null
this.plot.backgroundImageAlignment == 15
this.plot.backgroundImageAlpha == 0.5
this.plot.foregroundAlpha == 1.0
this.plot.backgroundAlpha == 1.0
this.plot.drawingSupplier != null
this.plot.drawingSupplier.getClass().getName() == org.jfree.chart.plot.DefaultDrawingSupplier.class
this.plot.listenerList != null
this.backgroundPaint has only one value
this.backgroundPaint != null
this.backgroundPaint.getClass().getName() == java.awt.Color.class
this.backgroundImage == null
this.backgroundImageAlignment == 15
this.backgroundImageAlpha == 0.5
this.changeListeners != null
this.progressListeners != null
this.notify == true
size(this.title.content.lines[]) == 1
size(this.subtitles[]) == 1
===========================================================================
org.jfree.chart.JFreeChart.JFreeChart(java.lang.String, java.awt.Font, org.jfree.chart.plot.Plot, boolean):::ENTER
title.toString one of { "Pie Chart", "Test" }
titleFont has only one value
org.jfree.chart.plot.Plot.ZERO has only one value
org.jfree.chart.plot.Plot.ZERO.getClass().getName() == java.lang.Integer.class
org.jfree.chart.plot.Plot.DEFAULT_INSETS has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS has only one value
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType has only one value
org.jfree.chart.plot.Plot.DEFAULT_INSETS.top == 4.0
org.jfree.chart.plot.Plot.DEFAULT_INSETS.left == 8.0
org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom == 4.0
org.jfree.chart.plot.Plot.DEFAULT_INSETS.right == 8.0
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE has only one value
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName() == java.awt.BasicStroke.class
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT has only one value
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName() == java.awt.Color.class
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT has only one value
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName() == java.awt.Color.class
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX has only one value
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName() == java.awt.geom.Rectangle2D$Double.class
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE has only one value
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == java.awt.geom.Ellipse2D$Double.class
plot.parent == null
plot.datasetGroup == null
plot.noDataMessage == null
plot.noDataMessagePaint has only one value
plot.noDataMessagePaint.getClass().getName() == java.awt.Color.class
plot.insets.unitType has only one value
plot.insets.top == 0.0
plot.insets.left == 5.0
plot.insets.bottom == 5.0
plot.insets.right == 5.0
plot.outlineVisible == true
plot.outlineStroke has only one value
plot.outlineStroke.getClass().getName() == java.awt.BasicStroke.class
plot.outlinePaint has only one value
plot.outlinePaint.getClass().getName() == java.awt.Color.class
plot.backgroundPaint has only one value
plot.backgroundPaint.getClass().getName() == java.awt.Color.class
plot.backgroundImage == null
plot.backgroundImageAlignment == 15
plot.backgroundImageAlpha == 0.5
plot.foregroundAlpha == 1.0
plot.backgroundAlpha == 1.0
plot.drawingSupplier.getClass().getName() == org.jfree.chart.plot.DefaultDrawingSupplier.class
createLegend == true
===========================================================================
org.jfree.chart.JFreeChart.JFreeChart(java.lang.String, java.awt.Font, org.jfree.chart.plot.Plot, boolean):::EXIT
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.plot.Plot.ZERO == orig(org.jfree.chart.plot.Plot.ZERO)
org.jfree.chart.plot.Plot.ZERO.getClass().getName() == orig(org.jfree.chart.plot.Plot.ZERO.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_INSETS == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.top == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.top)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.left == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.left)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.right == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.right)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName())
title.toString == orig(title.toString)
plot.parent == orig(plot.parent)
plot.datasetGroup == orig(plot.datasetGroup)
plot.noDataMessage == orig(plot.noDataMessage)
plot.noDataMessageFont == orig(plot.noDataMessageFont)
plot.noDataMessagePaint == orig(plot.noDataMessagePaint)
plot.noDataMessagePaint.getClass().getName() == orig(plot.noDataMessagePaint.getClass().getName())
plot.insets == orig(plot.insets)
plot.insets.unitType == orig(plot.insets.unitType)
plot.insets.top == orig(plot.insets.top)
plot.insets.left == orig(plot.insets.left)
plot.insets.bottom == orig(plot.insets.bottom)
plot.insets.right == orig(plot.insets.right)
plot.outlineVisible == orig(plot.outlineVisible)
plot.outlineStroke == orig(plot.outlineStroke)
plot.outlineStroke.getClass().getName() == orig(plot.outlineStroke.getClass().getName())
plot.outlinePaint == orig(plot.outlinePaint)
plot.outlinePaint.getClass().getName() == orig(plot.outlinePaint.getClass().getName())
plot.backgroundPaint == orig(plot.backgroundPaint)
plot.backgroundPaint.getClass().getName() == orig(plot.backgroundPaint.getClass().getName())
plot.backgroundImage == orig(plot.backgroundImage)
plot.backgroundImageAlignment == orig(plot.backgroundImageAlignment)
plot.backgroundImageAlpha == orig(plot.backgroundImageAlpha)
plot.foregroundAlpha == orig(plot.foregroundAlpha)
plot.backgroundAlpha == orig(plot.backgroundAlpha)
plot.drawingSupplier == orig(plot.drawingSupplier)
plot.drawingSupplier.getClass().getName() == orig(plot.drawingSupplier.getClass().getName())
plot.listenerList == orig(plot.listenerList)
this.title.content == null
title.toString one of { "Pie Chart", "Test" }
plot.parent == null
plot.datasetGroup == null
plot.noDataMessage == null
plot.noDataMessagePaint has only one value
plot.noDataMessagePaint.getClass().getName() == java.awt.Color.class
plot.insets.unitType has only one value
plot.insets.top == 0.0
plot.insets.left == 5.0
plot.insets.bottom == 5.0
plot.insets.right == 5.0
plot.outlineVisible == true
plot.outlineStroke has only one value
plot.outlineStroke.getClass().getName() == java.awt.BasicStroke.class
plot.outlinePaint has only one value
plot.outlinePaint.getClass().getName() == java.awt.Color.class
plot.backgroundPaint has only one value
plot.backgroundPaint.getClass().getName() == java.awt.Color.class
plot.backgroundImage == null
plot.backgroundImageAlignment == 15
plot.backgroundImageAlpha == 0.5
plot.foregroundAlpha == 1.0
plot.backgroundAlpha == 1.0
plot.drawingSupplier.getClass().getName() == org.jfree.chart.plot.DefaultDrawingSupplier.class
===========================================================================
org.jfree.chart.JFreeChart.createAlignedRectangle2D(org.jfree.chart.util.Size2D, java.awt.geom.Rectangle2D, org.jfree.chart.util.HorizontalAlignment, org.jfree.chart.util.VerticalAlignment):::ENTER
dimensions.height one of { 0.0, 22.953125, 43.9375 }
frame.getClass().getName() == java.awt.geom.Rectangle2D$Double.class
hAlign has only one value
org.jfree.chart.util.HorizontalAlignment.LEFT.name has only one value
org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString == "HorizontalAlignment.LEFT"
org.jfree.chart.util.HorizontalAlignment.RIGHT.name has only one value
org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString == "HorizontalAlignment.RIGHT"
org.jfree.chart.util.HorizontalAlignment.CENTER.name has only one value
org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString == "HorizontalAlignment.CENTER"
hAlign.name has only one value
hAlign.name.toString == "HorizontalAlignment.CENTER"
org.jfree.chart.util.VerticalAlignment.TOP.name has only one value
org.jfree.chart.util.VerticalAlignment.TOP.name.toString == "VerticalAlignment.TOP"
org.jfree.chart.util.VerticalAlignment.BOTTOM.name has only one value
org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString == "VerticalAlignment.BOTTOM"
org.jfree.chart.util.VerticalAlignment.CENTER.name has only one value
org.jfree.chart.util.VerticalAlignment.CENTER.name.toString == "VerticalAlignment.CENTER"
vAlign.name.toString one of { "VerticalAlignment.BOTTOM", "VerticalAlignment.TOP" }
===========================================================================
org.jfree.chart.JFreeChart.createAlignedRectangle2D(org.jfree.chart.util.Size2D, java.awt.geom.Rectangle2D, org.jfree.chart.util.HorizontalAlignment, org.jfree.chart.util.VerticalAlignment):::EXIT
org.jfree.chart.JFreeChart.INFO == orig(org.jfree.chart.JFreeChart.INFO)
org.jfree.chart.JFreeChart.INFO.logo == orig(org.jfree.chart.JFreeChart.INFO.logo)
org.jfree.chart.JFreeChart.INFO.licenceText == orig(org.jfree.chart.JFreeChart.INFO.licenceText)
org.jfree.chart.JFreeChart.INFO.licenceText.toString == orig(org.jfree.chart.JFreeChart.INFO.licenceText.toString)
org.jfree.chart.JFreeChart.INFO.contributors == orig(org.jfree.chart.JFreeChart.INFO.contributors)
org.jfree.chart.JFreeChart.INFO.contributors[] == orig(org.jfree.chart.JFreeChart.INFO.contributors[])
org.jfree.chart.JFreeChart.INFO.contributors.getClass().getName() == orig(org.jfree.chart.JFreeChart.INFO.contributors.getClass().getName())
org.jfree.chart.JFreeChart.INFO.copyright == orig(org.jfree.chart.JFreeChart.INFO.copyright)
org.jfree.chart.JFreeChart.INFO.copyright.toString == orig(org.jfree.chart.JFreeChart.INFO.copyright.toString)
org.jfree.chart.JFreeChart.INFO.libraries == orig(org.jfree.chart.JFreeChart.INFO.libraries)
org.jfree.chart.JFreeChart.INFO.libraries[] == orig(org.jfree.chart.JFreeChart.INFO.libraries[])
org.jfree.chart.JFreeChart.INFO.libraries.getClass().getName() == orig(org.jfree.chart.JFreeChart.INFO.libraries.getClass().getName())
org.jfree.chart.JFreeChart.INFO.optionalLibraries == orig(org.jfree.chart.JFreeChart.INFO.optionalLibraries)
org.jfree.chart.JFreeChart.INFO.optionalLibraries[] == orig(org.jfree.chart.JFreeChart.INFO.optionalLibraries[])
org.jfree.chart.JFreeChart.INFO.optionalLibraries.getClass().getName() == orig(org.jfree.chart.JFreeChart.INFO.optionalLibraries.getClass().getName())
org.jfree.chart.JFreeChart.INFO.name == orig(org.jfree.chart.JFreeChart.INFO.name)
org.jfree.chart.JFreeChart.INFO.name.toString == orig(org.jfree.chart.JFreeChart.INFO.name.toString)
org.jfree.chart.JFreeChart.INFO.version == orig(org.jfree.chart.JFreeChart.INFO.version)
org.jfree.chart.JFreeChart.INFO.version.toString == orig(org.jfree.chart.JFreeChart.INFO.version.toString)
org.jfree.chart.JFreeChart.INFO.licenceName == orig(org.jfree.chart.JFreeChart.INFO.licenceName)
org.jfree.chart.JFreeChart.INFO.licenceName.toString == orig(org.jfree.chart.JFreeChart.INFO.licenceName.toString)
org.jfree.chart.JFreeChart.INFO.info == orig(org.jfree.chart.JFreeChart.INFO.info)
org.jfree.chart.JFreeChart.INFO.info.toString == orig(org.jfree.chart.JFreeChart.INFO.info.toString)
org.jfree.chart.JFreeChart.DEFAULT_TITLE_FONT == orig(org.jfree.chart.JFreeChart.DEFAULT_TITLE_FONT)
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT == orig(org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT)
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName() == orig(org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_IMAGE == orig(org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_IMAGE)
this.renderingHints == orig(this.renderingHints)
this.borderVisible == orig(this.borderVisible)
this.borderStroke == orig(this.borderStroke)
this.borderStroke.getClass().getName() == orig(this.borderStroke.getClass().getName())
this.borderPaint == orig(this.borderPaint)
this.borderPaint.getClass().getName() == orig(this.borderPaint.getClass().getName())
this.padding == orig(this.padding)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.padding.unitType == orig(this.padding.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.title == orig(this.title)
org.jfree.chart.title.TextTitle.DEFAULT_FONT == orig(org.jfree.chart.title.TextTitle.DEFAULT_FONT)
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT == orig(org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT)
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT.getClass().getName() == orig(org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT.getClass().getName())
this.title.text == orig(this.title.text)
this.title.text.toString == orig(this.title.text.toString)
this.title.font == orig(this.title.font)
this.title.textAlignment == orig(this.title.textAlignment)
org.jfree.chart.util.HorizontalAlignment.LEFT == orig(org.jfree.chart.util.HorizontalAlignment.LEFT)
org.jfree.chart.util.HorizontalAlignment.RIGHT == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT)
org.jfree.chart.util.HorizontalAlignment.CENTER == orig(org.jfree.chart.util.HorizontalAlignment.CENTER)
this.title.textAlignment.name == orig(this.title.textAlignment.name)
this.title.textAlignment.name.toString == orig(this.title.textAlignment.name.toString)
this.title.paint == orig(this.title.paint)
this.title.paint.getClass().getName() == orig(this.title.paint.getClass().getName())
this.title.backgroundPaint == orig(this.title.backgroundPaint)
this.title.toolTipText == orig(this.title.toolTipText)
this.title.urlText == orig(this.title.urlText)
this.title.content == orig(this.title.content)
this.title.content.lines == orig(this.title.content.lines)
this.title.content.lines[] == orig(this.title.content.lines[])
this.title.content.lines.getClass().getName() == orig(this.title.content.lines.getClass().getName())
this.title.content.lineAlignment == orig(this.title.content.lineAlignment)
this.title.expandToFitSpace == orig(this.title.expandToFitSpace)
org.jfree.chart.title.Title.DEFAULT_POSITION == orig(org.jfree.chart.title.Title.DEFAULT_POSITION)
org.jfree.chart.util.RectangleEdge.TOP == orig(org.jfree.chart.util.RectangleEdge.TOP)
org.jfree.chart.util.RectangleEdge.BOTTOM == orig(org.jfree.chart.util.RectangleEdge.BOTTOM)
org.jfree.chart.util.RectangleEdge.LEFT == orig(org.jfree.chart.util.RectangleEdge.LEFT)
org.jfree.chart.util.RectangleEdge.RIGHT == orig(org.jfree.chart.util.RectangleEdge.RIGHT)
org.jfree.chart.title.Title.DEFAULT_POSITION.name == orig(org.jfree.chart.title.Title.DEFAULT_POSITION.name)
org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT)
org.jfree.chart.util.VerticalAlignment.TOP == orig(org.jfree.chart.util.VerticalAlignment.TOP)
org.jfree.chart.util.VerticalAlignment.BOTTOM == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM)
org.jfree.chart.util.VerticalAlignment.CENTER == orig(org.jfree.chart.util.VerticalAlignment.CENTER)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString)
org.jfree.chart.title.Title.DEFAULT_PADDING == orig(org.jfree.chart.title.Title.DEFAULT_PADDING)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType)
org.jfree.chart.title.Title.DEFAULT_PADDING.top == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.top)
org.jfree.chart.title.Title.DEFAULT_PADDING.left == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.left)
org.jfree.chart.title.Title.DEFAULT_PADDING.bottom == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.bottom)
org.jfree.chart.title.Title.DEFAULT_PADDING.right == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.right)
this.title.position == orig(this.title.position)
this.title.position.name == orig(this.title.position.name)
this.title.position.name.toString == orig(this.title.position.name.toString)
this.title.horizontalAlignment == orig(this.title.horizontalAlignment)
this.title.horizontalAlignment.name == orig(this.title.horizontalAlignment.name)
this.title.horizontalAlignment.name.toString == orig(this.title.horizontalAlignment.name.toString)
this.title.verticalAlignment == orig(this.title.verticalAlignment)
this.title.verticalAlignment.name == orig(this.title.verticalAlignment.name)
this.title.verticalAlignment.name.toString == orig(this.title.verticalAlignment.name.toString)
this.title.listenerList == orig(this.title.listenerList)
this.title.notify == orig(this.title.notify)
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener == orig(org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener)
this.title.id == orig(this.title.id)
this.title.margin == orig(this.title.margin)
this.title.margin.unitType == orig(this.title.margin.unitType)
this.title.margin.top == orig(this.title.margin.top)
this.title.margin.left == orig(this.title.margin.left)
this.title.margin.bottom == orig(this.title.margin.bottom)
this.title.margin.right == orig(this.title.margin.right)
this.title.frame == orig(this.title.frame)
this.title.frame.getClass().getName() == orig(this.title.frame.getClass().getName())
this.title.padding == orig(this.title.padding)
this.title.padding.unitType == orig(this.title.padding.unitType)
this.title.padding.top == orig(this.title.padding.top)
this.title.padding.left == orig(this.title.padding.left)
this.title.padding.bottom == orig(this.title.padding.bottom)
this.title.padding.right == orig(this.title.padding.right)
this.title.width == orig(this.title.width)
this.title.height == orig(this.title.height)
this.title.bounds == orig(this.title.bounds)
this.title.bounds.getClass().getName() == orig(this.title.bounds.getClass().getName())
this.subtitles == orig(this.subtitles)
this.subtitles[] == orig(this.subtitles[])
this.subtitles.getClass().getName() == orig(this.subtitles.getClass().getName())
this.plot == orig(this.plot)
this.plot.getClass().getName() == orig(this.plot.getClass().getName())
org.jfree.chart.plot.Plot.ZERO == orig(org.jfree.chart.plot.Plot.ZERO)
org.jfree.chart.plot.Plot.ZERO.getClass().getName() == orig(org.jfree.chart.plot.Plot.ZERO.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_INSETS == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.top == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.top)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.left == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.left)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.right == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.right)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName())
this.plot.parent == orig(this.plot.parent)
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener == orig(org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener)
this.plot.datasetGroup == orig(this.plot.datasetGroup)
this.plot.noDataMessage == orig(this.plot.noDataMessage)
this.plot.noDataMessageFont == orig(this.plot.noDataMessageFont)
this.plot.noDataMessagePaint == orig(this.plot.noDataMessagePaint)
this.plot.noDataMessagePaint.getClass().getName() == orig(this.plot.noDataMessagePaint.getClass().getName())
this.plot.insets == orig(this.plot.insets)
this.plot.insets.unitType == orig(this.plot.insets.unitType)
this.plot.insets.top == orig(this.plot.insets.top)
this.plot.insets.left == orig(this.plot.insets.left)
this.plot.insets.bottom == orig(this.plot.insets.bottom)
this.plot.insets.right == orig(this.plot.insets.right)
this.plot.outlineVisible == orig(this.plot.outlineVisible)
this.plot.outlineStroke == orig(this.plot.outlineStroke)
this.plot.outlineStroke.getClass().getName() == orig(this.plot.outlineStroke.getClass().getName())
this.plot.outlinePaint == orig(this.plot.outlinePaint)
this.plot.outlinePaint.getClass().getName() == orig(this.plot.outlinePaint.getClass().getName())
this.plot.backgroundPaint == orig(this.plot.backgroundPaint)
this.plot.backgroundPaint.getClass().getName() == orig(this.plot.backgroundPaint.getClass().getName())
this.plot.backgroundImage == orig(this.plot.backgroundImage)
this.plot.backgroundImageAlignment == orig(this.plot.backgroundImageAlignment)
this.plot.backgroundImageAlpha == orig(this.plot.backgroundImageAlpha)
this.plot.foregroundAlpha == orig(this.plot.foregroundAlpha)
this.plot.backgroundAlpha == orig(this.plot.backgroundAlpha)
this.plot.drawingSupplier == orig(this.plot.drawingSupplier)
this.plot.drawingSupplier.getClass().getName() == orig(this.plot.drawingSupplier.getClass().getName())
this.plot.listenerList == orig(this.plot.listenerList)
this.backgroundPaint == orig(this.backgroundPaint)
this.backgroundPaint.getClass().getName() == orig(this.backgroundPaint.getClass().getName())
this.backgroundImage == orig(this.backgroundImage)
this.backgroundImageAlignment == orig(this.backgroundImageAlignment)
this.backgroundImageAlpha == orig(this.backgroundImageAlpha)
this.changeListeners == orig(this.changeListeners)
this.progressListeners == orig(this.progressListeners)
this.notify == orig(this.notify)
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartChangeListener == orig(org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartChangeListener)
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartProgressListener == orig(org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartProgressListener)
dimensions.width == orig(dimensions.width)
dimensions.height == orig(dimensions.height)
org.jfree.chart.util.HorizontalAlignment.LEFT.name == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name)
org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString)
org.jfree.chart.util.HorizontalAlignment.CENTER.name == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name)
org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString)
hAlign.name == orig(hAlign.name)
hAlign.name.toString == orig(hAlign.name.toString)
org.jfree.chart.util.VerticalAlignment.TOP.name == orig(org.jfree.chart.util.VerticalAlignment.TOP.name)
org.jfree.chart.util.VerticalAlignment.TOP.name.toString == orig(org.jfree.chart.util.VerticalAlignment.TOP.name.toString)
org.jfree.chart.util.VerticalAlignment.BOTTOM.name == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM.name)
org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString)
org.jfree.chart.util.VerticalAlignment.CENTER.name == orig(org.jfree.chart.util.VerticalAlignment.CENTER.name)
org.jfree.chart.util.VerticalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.VerticalAlignment.CENTER.name.toString)
vAlign.name == orig(vAlign.name)
vAlign.name.toString == orig(vAlign.name.toString)
dimensions.height one of { 0.0, 22.953125, 43.9375 }
org.jfree.chart.util.HorizontalAlignment.LEFT.name has only one value
org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString == "HorizontalAlignment.LEFT"
org.jfree.chart.util.HorizontalAlignment.RIGHT.name has only one value
org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString == "HorizontalAlignment.RIGHT"
org.jfree.chart.util.HorizontalAlignment.CENTER.name has only one value
org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString == "HorizontalAlignment.CENTER"
hAlign.name has only one value
hAlign.name.toString == "HorizontalAlignment.CENTER"
org.jfree.chart.util.VerticalAlignment.TOP.name has only one value
org.jfree.chart.util.VerticalAlignment.TOP.name.toString == "VerticalAlignment.TOP"
org.jfree.chart.util.VerticalAlignment.BOTTOM.name has only one value
org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString == "VerticalAlignment.BOTTOM"
org.jfree.chart.util.VerticalAlignment.CENTER.name has only one value
org.jfree.chart.util.VerticalAlignment.CENTER.name.toString == "VerticalAlignment.CENTER"
vAlign.name.toString one of { "VerticalAlignment.BOTTOM", "VerticalAlignment.TOP" }
return.getClass().getName() == java.awt.geom.Rectangle2D$Double.class
===========================================================================
org.jfree.chart.JFreeChart.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Point2D, org.jfree.chart.ChartRenderingInfo):::ENTER
this.title.content == null
g2.getClass().getName() == sun.java2d.SunGraphics2D.class
chartArea.getClass().getName() == java.awt.geom.Rectangle2D$Double.class
anchor == null
info == null
===========================================================================
org.jfree.chart.JFreeChart.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Point2D, org.jfree.chart.ChartRenderingInfo):::EXIT
org.jfree.chart.JFreeChart.INFO == orig(org.jfree.chart.JFreeChart.INFO)
org.jfree.chart.JFreeChart.INFO.logo == orig(org.jfree.chart.JFreeChart.INFO.logo)
org.jfree.chart.JFreeChart.INFO.licenceText == orig(org.jfree.chart.JFreeChart.INFO.licenceText)
org.jfree.chart.JFreeChart.INFO.licenceText.toString == orig(org.jfree.chart.JFreeChart.INFO.licenceText.toString)
org.jfree.chart.JFreeChart.INFO.contributors == orig(org.jfree.chart.JFreeChart.INFO.contributors)
org.jfree.chart.JFreeChart.INFO.contributors[] == orig(org.jfree.chart.JFreeChart.INFO.contributors[])
org.jfree.chart.JFreeChart.INFO.contributors.getClass().getName() == orig(org.jfree.chart.JFreeChart.INFO.contributors.getClass().getName())
org.jfree.chart.JFreeChart.INFO.copyright == orig(org.jfree.chart.JFreeChart.INFO.copyright)
org.jfree.chart.JFreeChart.INFO.copyright.toString == orig(org.jfree.chart.JFreeChart.INFO.copyright.toString)
org.jfree.chart.JFreeChart.INFO.libraries == orig(org.jfree.chart.JFreeChart.INFO.libraries)
org.jfree.chart.JFreeChart.INFO.libraries[] == orig(org.jfree.chart.JFreeChart.INFO.libraries[])
org.jfree.chart.JFreeChart.INFO.libraries.getClass().getName() == orig(org.jfree.chart.JFreeChart.INFO.libraries.getClass().getName())
org.jfree.chart.JFreeChart.INFO.optionalLibraries == orig(org.jfree.chart.JFreeChart.INFO.optionalLibraries)
org.jfree.chart.JFreeChart.INFO.optionalLibraries[] == orig(org.jfree.chart.JFreeChart.INFO.optionalLibraries[])
org.jfree.chart.JFreeChart.INFO.optionalLibraries.getClass().getName() == orig(org.jfree.chart.JFreeChart.INFO.optionalLibraries.getClass().getName())
org.jfree.chart.JFreeChart.INFO.name == orig(org.jfree.chart.JFreeChart.INFO.name)
org.jfree.chart.JFreeChart.INFO.name.toString == orig(org.jfree.chart.JFreeChart.INFO.name.toString)
org.jfree.chart.JFreeChart.INFO.version == orig(org.jfree.chart.JFreeChart.INFO.version)
org.jfree.chart.JFreeChart.INFO.version.toString == orig(org.jfree.chart.JFreeChart.INFO.version.toString)
org.jfree.chart.JFreeChart.INFO.licenceName == orig(org.jfree.chart.JFreeChart.INFO.licenceName)
org.jfree.chart.JFreeChart.INFO.licenceName.toString == orig(org.jfree.chart.JFreeChart.INFO.licenceName.toString)
org.jfree.chart.JFreeChart.INFO.info == orig(org.jfree.chart.JFreeChart.INFO.info)
org.jfree.chart.JFreeChart.INFO.info.toString == orig(org.jfree.chart.JFreeChart.INFO.info.toString)
org.jfree.chart.JFreeChart.DEFAULT_TITLE_FONT == orig(org.jfree.chart.JFreeChart.DEFAULT_TITLE_FONT)
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT == orig(org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT)
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName() == orig(org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_IMAGE == orig(org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_IMAGE)
this.renderingHints == orig(this.renderingHints)
this.borderVisible == orig(this.borderVisible)
this.borderStroke == orig(this.borderStroke)
this.borderStroke.getClass().getName() == orig(this.borderStroke.getClass().getName())
this.borderPaint == orig(this.borderPaint)
this.borderPaint.getClass().getName() == orig(this.borderPaint.getClass().getName())
this.padding == orig(this.padding)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.padding.unitType == orig(this.padding.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.title == orig(this.title)
org.jfree.chart.title.TextTitle.DEFAULT_FONT == orig(org.jfree.chart.title.TextTitle.DEFAULT_FONT)
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT == orig(org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT)
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT.getClass().getName() == orig(org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT.getClass().getName())
this.title.text == orig(this.title.text)
this.title.text.toString == orig(this.title.text.toString)
this.title.font == orig(this.title.font)
this.title.textAlignment == orig(this.title.textAlignment)
org.jfree.chart.util.HorizontalAlignment.LEFT == orig(org.jfree.chart.util.HorizontalAlignment.LEFT)
org.jfree.chart.util.HorizontalAlignment.RIGHT == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT)
org.jfree.chart.util.HorizontalAlignment.CENTER == orig(org.jfree.chart.util.HorizontalAlignment.CENTER)
this.title.textAlignment.name == orig(this.title.textAlignment.name)
this.title.textAlignment.name.toString == orig(this.title.textAlignment.name.toString)
this.title.paint == orig(this.title.paint)
this.title.paint.getClass().getName() == orig(this.title.paint.getClass().getName())
this.title.backgroundPaint == orig(this.title.backgroundPaint)
this.title.toolTipText == orig(this.title.toolTipText)
this.title.urlText == orig(this.title.urlText)
this.title.expandToFitSpace == orig(this.title.expandToFitSpace)
org.jfree.chart.title.Title.DEFAULT_POSITION == orig(org.jfree.chart.title.Title.DEFAULT_POSITION)
org.jfree.chart.util.RectangleEdge.TOP == orig(org.jfree.chart.util.RectangleEdge.TOP)
org.jfree.chart.util.RectangleEdge.BOTTOM == orig(org.jfree.chart.util.RectangleEdge.BOTTOM)
org.jfree.chart.util.RectangleEdge.LEFT == orig(org.jfree.chart.util.RectangleEdge.LEFT)
org.jfree.chart.util.RectangleEdge.RIGHT == orig(org.jfree.chart.util.RectangleEdge.RIGHT)
org.jfree.chart.title.Title.DEFAULT_POSITION.name == orig(org.jfree.chart.title.Title.DEFAULT_POSITION.name)
org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT)
org.jfree.chart.util.VerticalAlignment.TOP == orig(org.jfree.chart.util.VerticalAlignment.TOP)
org.jfree.chart.util.VerticalAlignment.BOTTOM == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM)
org.jfree.chart.util.VerticalAlignment.CENTER == orig(org.jfree.chart.util.VerticalAlignment.CENTER)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString)
org.jfree.chart.title.Title.DEFAULT_PADDING == orig(org.jfree.chart.title.Title.DEFAULT_PADDING)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType)
org.jfree.chart.title.Title.DEFAULT_PADDING.top == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.top)
org.jfree.chart.title.Title.DEFAULT_PADDING.left == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.left)
org.jfree.chart.title.Title.DEFAULT_PADDING.bottom == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.bottom)
org.jfree.chart.title.Title.DEFAULT_PADDING.right == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.right)
this.title.position == orig(this.title.position)
this.title.position.name == orig(this.title.position.name)
this.title.position.name.toString == orig(this.title.position.name.toString)
this.title.horizontalAlignment == orig(this.title.horizontalAlignment)
this.title.horizontalAlignment.name == orig(this.title.horizontalAlignment.name)
this.title.horizontalAlignment.name.toString == orig(this.title.horizontalAlignment.name.toString)
this.title.verticalAlignment == orig(this.title.verticalAlignment)
this.title.verticalAlignment.name == orig(this.title.verticalAlignment.name)
this.title.verticalAlignment.name.toString == orig(this.title.verticalAlignment.name.toString)
this.title.listenerList == orig(this.title.listenerList)
this.title.notify == orig(this.title.notify)
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener == orig(org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener)
this.title.id == orig(this.title.id)
this.title.margin == orig(this.title.margin)
this.title.margin.unitType == orig(this.title.margin.unitType)
this.title.margin.top == orig(this.title.margin.top)
this.title.margin.left == orig(this.title.margin.left)
this.title.margin.bottom == orig(this.title.margin.bottom)
this.title.margin.right == orig(this.title.margin.right)
this.title.frame == orig(this.title.frame)
this.title.frame.getClass().getName() == orig(this.title.frame.getClass().getName())
this.title.padding == orig(this.title.padding)
this.title.padding.unitType == orig(this.title.padding.unitType)
this.title.padding.top == orig(this.title.padding.top)
this.title.padding.left == orig(this.title.padding.left)
this.title.padding.bottom == orig(this.title.padding.bottom)
this.title.padding.right == orig(this.title.padding.right)
this.title.width == orig(this.title.width)
this.title.height == orig(this.title.height)
this.title.bounds == orig(this.title.bounds)
this.title.bounds.getClass().getName() == orig(this.title.bounds.getClass().getName())
this.subtitles == orig(this.subtitles)
this.subtitles[] == orig(this.subtitles[])
this.subtitles.getClass().getName() == orig(this.subtitles.getClass().getName())
this.plot == orig(this.plot)
this.plot.getClass().getName() == orig(this.plot.getClass().getName())
org.jfree.chart.plot.Plot.ZERO == orig(org.jfree.chart.plot.Plot.ZERO)
org.jfree.chart.plot.Plot.ZERO.getClass().getName() == orig(org.jfree.chart.plot.Plot.ZERO.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_INSETS == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.top == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.top)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.left == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.left)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.right == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.right)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName())
this.plot.parent == orig(this.plot.parent)
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener == orig(org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener)
this.plot.datasetGroup == orig(this.plot.datasetGroup)
this.plot.noDataMessage == orig(this.plot.noDataMessage)
this.plot.noDataMessageFont == orig(this.plot.noDataMessageFont)
this.plot.noDataMessagePaint == orig(this.plot.noDataMessagePaint)
this.plot.noDataMessagePaint.getClass().getName() == orig(this.plot.noDataMessagePaint.getClass().getName())
this.plot.insets == orig(this.plot.insets)
this.plot.insets.unitType == orig(this.plot.insets.unitType)
this.plot.insets.top == orig(this.plot.insets.top)
this.plot.insets.left == orig(this.plot.insets.left)
this.plot.insets.bottom == orig(this.plot.insets.bottom)
this.plot.insets.right == orig(this.plot.insets.right)
this.plot.outlineVisible == orig(this.plot.outlineVisible)
this.plot.outlineStroke == orig(this.plot.outlineStroke)
this.plot.outlineStroke.getClass().getName() == orig(this.plot.outlineStroke.getClass().getName())
this.plot.outlinePaint == orig(this.plot.outlinePaint)
this.plot.outlinePaint.getClass().getName() == orig(this.plot.outlinePaint.getClass().getName())
this.plot.backgroundPaint == orig(this.plot.backgroundPaint)
this.plot.backgroundPaint.getClass().getName() == orig(this.plot.backgroundPaint.getClass().getName())
this.plot.backgroundImage == orig(this.plot.backgroundImage)
this.plot.backgroundImageAlignment == orig(this.plot.backgroundImageAlignment)
this.plot.backgroundImageAlpha == orig(this.plot.backgroundImageAlpha)
this.plot.foregroundAlpha == orig(this.plot.foregroundAlpha)
this.plot.backgroundAlpha == orig(this.plot.backgroundAlpha)
this.plot.drawingSupplier == orig(this.plot.drawingSupplier)
this.plot.drawingSupplier.getClass().getName() == orig(this.plot.drawingSupplier.getClass().getName())
this.plot.listenerList == orig(this.plot.listenerList)
this.backgroundPaint == orig(this.backgroundPaint)
this.backgroundPaint.getClass().getName() == orig(this.backgroundPaint.getClass().getName())
this.backgroundImage == orig(this.backgroundImage)
this.backgroundImageAlignment == orig(this.backgroundImageAlignment)
this.backgroundImageAlpha == orig(this.backgroundImageAlpha)
this.changeListeners == orig(this.changeListeners)
this.progressListeners == orig(this.progressListeners)
this.notify == orig(this.notify)
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartChangeListener == orig(org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartChangeListener)
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartProgressListener == orig(org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartProgressListener)
===========================================================================
org.jfree.chart.JFreeChart.drawTitle(org.jfree.chart.title.Title, java.awt.Graphics2D, java.awt.geom.Rectangle2D, boolean):::ENTER
t.position.name.toString one of { "RectangleEdge.BOTTOM", "RectangleEdge.TOP" }
t.horizontalAlignment has only one value
t.horizontalAlignment.name has only one value
t.horizontalAlignment.name.toString == "HorizontalAlignment.CENTER"
t.verticalAlignment has only one value
t.verticalAlignment.name has only one value
t.verticalAlignment.name.toString == "VerticalAlignment.CENTER"
t.notify == true
t.id == null
t.margin.unitType has only one value
t.margin.top one of { 0.0, 1.0 }
t.margin.left one of { 0.0, 1.0 }
t.margin.bottom one of { 0.0, 1.0 }
t.margin.right one of { 0.0, 1.0 }
t.padding has only one value
t.padding.unitType has only one value
t.padding.top == 1.0
t.padding.left == 1.0
t.padding.bottom == 1.0
t.padding.right == 1.0
t.width == 0.0
t.height == 0.0
t.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
g2.getClass().getName() == sun.java2d.SunGraphics2D.class
area.getClass().getName() == java.awt.geom.Rectangle2D$Double.class
entities == false
===========================================================================
org.jfree.chart.JFreeChart.drawTitle(org.jfree.chart.title.Title, java.awt.Graphics2D, java.awt.geom.Rectangle2D, boolean):::EXIT1346
===========================================================================
org.jfree.chart.JFreeChart.drawTitle(org.jfree.chart.title.Title, java.awt.Graphics2D, java.awt.geom.Rectangle2D, boolean):::EXIT
org.jfree.chart.JFreeChart.INFO == orig(org.jfree.chart.JFreeChart.INFO)
org.jfree.chart.JFreeChart.INFO.logo == orig(org.jfree.chart.JFreeChart.INFO.logo)
org.jfree.chart.JFreeChart.INFO.licenceText == orig(org.jfree.chart.JFreeChart.INFO.licenceText)
org.jfree.chart.JFreeChart.INFO.licenceText.toString == orig(org.jfree.chart.JFreeChart.INFO.licenceText.toString)
org.jfree.chart.JFreeChart.INFO.contributors == orig(org.jfree.chart.JFreeChart.INFO.contributors)
org.jfree.chart.JFreeChart.INFO.contributors[] == orig(org.jfree.chart.JFreeChart.INFO.contributors[])
org.jfree.chart.JFreeChart.INFO.contributors.getClass().getName() == orig(org.jfree.chart.JFreeChart.INFO.contributors.getClass().getName())
org.jfree.chart.JFreeChart.INFO.copyright == orig(org.jfree.chart.JFreeChart.INFO.copyright)
org.jfree.chart.JFreeChart.INFO.copyright.toString == orig(org.jfree.chart.JFreeChart.INFO.copyright.toString)
org.jfree.chart.JFreeChart.INFO.libraries == orig(org.jfree.chart.JFreeChart.INFO.libraries)
org.jfree.chart.JFreeChart.INFO.libraries[] == orig(org.jfree.chart.JFreeChart.INFO.libraries[])
org.jfree.chart.JFreeChart.INFO.libraries.getClass().getName() == orig(org.jfree.chart.JFreeChart.INFO.libraries.getClass().getName())
org.jfree.chart.JFreeChart.INFO.optionalLibraries == orig(org.jfree.chart.JFreeChart.INFO.optionalLibraries)
org.jfree.chart.JFreeChart.INFO.optionalLibraries[] == orig(org.jfree.chart.JFreeChart.INFO.optionalLibraries[])
org.jfree.chart.JFreeChart.INFO.optionalLibraries.getClass().getName() == orig(org.jfree.chart.JFreeChart.INFO.optionalLibraries.getClass().getName())
org.jfree.chart.JFreeChart.INFO.name == orig(org.jfree.chart.JFreeChart.INFO.name)
org.jfree.chart.JFreeChart.INFO.name.toString == orig(org.jfree.chart.JFreeChart.INFO.name.toString)
org.jfree.chart.JFreeChart.INFO.version == orig(org.jfree.chart.JFreeChart.INFO.version)
org.jfree.chart.JFreeChart.INFO.version.toString == orig(org.jfree.chart.JFreeChart.INFO.version.toString)
org.jfree.chart.JFreeChart.INFO.licenceName == orig(org.jfree.chart.JFreeChart.INFO.licenceName)
org.jfree.chart.JFreeChart.INFO.licenceName.toString == orig(org.jfree.chart.JFreeChart.INFO.licenceName.toString)
org.jfree.chart.JFreeChart.INFO.info == orig(org.jfree.chart.JFreeChart.INFO.info)
org.jfree.chart.JFreeChart.INFO.info.toString == orig(org.jfree.chart.JFreeChart.INFO.info.toString)
org.jfree.chart.JFreeChart.DEFAULT_TITLE_FONT == orig(org.jfree.chart.JFreeChart.DEFAULT_TITLE_FONT)
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT == orig(org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT)
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName() == orig(org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_IMAGE == orig(org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_IMAGE)
this.renderingHints == orig(this.renderingHints)
this.borderVisible == orig(this.borderVisible)
this.borderStroke == orig(this.borderStroke)
this.borderStroke.getClass().getName() == orig(this.borderStroke.getClass().getName())
this.borderPaint == orig(this.borderPaint)
this.borderPaint.getClass().getName() == orig(this.borderPaint.getClass().getName())
this.padding == orig(this.padding)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.padding.unitType == orig(this.padding.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.title == orig(this.title)
org.jfree.chart.title.TextTitle.DEFAULT_FONT == orig(org.jfree.chart.title.TextTitle.DEFAULT_FONT)
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT == orig(org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT)
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT.getClass().getName() == orig(org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT.getClass().getName())
this.title.text == orig(this.title.text)
this.title.text.toString == orig(this.title.text.toString)
this.title.font == orig(this.title.font)
this.title.textAlignment == orig(this.title.textAlignment)
org.jfree.chart.util.HorizontalAlignment.LEFT == orig(org.jfree.chart.util.HorizontalAlignment.LEFT)
org.jfree.chart.util.HorizontalAlignment.RIGHT == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT)
org.jfree.chart.util.HorizontalAlignment.CENTER == orig(org.jfree.chart.util.HorizontalAlignment.CENTER)
this.title.textAlignment.name == orig(this.title.textAlignment.name)
this.title.textAlignment.name.toString == orig(this.title.textAlignment.name.toString)
this.title.paint == orig(this.title.paint)
this.title.paint.getClass().getName() == orig(this.title.paint.getClass().getName())
this.title.backgroundPaint == orig(this.title.backgroundPaint)
this.title.toolTipText == orig(this.title.toolTipText)
this.title.urlText == orig(this.title.urlText)
this.title.content.lines == orig(this.title.content.lines)
this.title.content.lines[].getClass().getName() == orig(this.title.content.lines[].getClass().getName())
this.title.content.lines.getClass().getName() == orig(this.title.content.lines.getClass().getName())
this.title.content.lineAlignment == orig(this.title.content.lineAlignment)
this.title.expandToFitSpace == orig(this.title.expandToFitSpace)
org.jfree.chart.title.Title.DEFAULT_POSITION == orig(org.jfree.chart.title.Title.DEFAULT_POSITION)
org.jfree.chart.util.RectangleEdge.TOP == orig(org.jfree.chart.util.RectangleEdge.TOP)
org.jfree.chart.util.RectangleEdge.BOTTOM == orig(org.jfree.chart.util.RectangleEdge.BOTTOM)
org.jfree.chart.util.RectangleEdge.LEFT == orig(org.jfree.chart.util.RectangleEdge.LEFT)
org.jfree.chart.util.RectangleEdge.RIGHT == orig(org.jfree.chart.util.RectangleEdge.RIGHT)
org.jfree.chart.title.Title.DEFAULT_POSITION.name == orig(org.jfree.chart.title.Title.DEFAULT_POSITION.name)
org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT)
org.jfree.chart.util.VerticalAlignment.TOP == orig(org.jfree.chart.util.VerticalAlignment.TOP)
org.jfree.chart.util.VerticalAlignment.BOTTOM == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM)
org.jfree.chart.util.VerticalAlignment.CENTER == orig(org.jfree.chart.util.VerticalAlignment.CENTER)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString)
org.jfree.chart.title.Title.DEFAULT_PADDING == orig(org.jfree.chart.title.Title.DEFAULT_PADDING)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType)
org.jfree.chart.title.Title.DEFAULT_PADDING.top == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.top)
org.jfree.chart.title.Title.DEFAULT_PADDING.left == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.left)
org.jfree.chart.title.Title.DEFAULT_PADDING.bottom == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.bottom)
org.jfree.chart.title.Title.DEFAULT_PADDING.right == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.right)
this.title.position == orig(this.title.position)
this.title.position.name == orig(this.title.position.name)
this.title.position.name.toString == orig(this.title.position.name.toString)
this.title.horizontalAlignment == orig(this.title.horizontalAlignment)
this.title.horizontalAlignment.name == orig(this.title.horizontalAlignment.name)
this.title.horizontalAlignment.name.toString == orig(this.title.horizontalAlignment.name.toString)
this.title.verticalAlignment == orig(this.title.verticalAlignment)
this.title.verticalAlignment.name == orig(this.title.verticalAlignment.name)
this.title.verticalAlignment.name.toString == orig(this.title.verticalAlignment.name.toString)
this.title.listenerList == orig(this.title.listenerList)
this.title.notify == orig(this.title.notify)
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener == orig(org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener)
this.title.id == orig(this.title.id)
this.title.margin == orig(this.title.margin)
this.title.margin.unitType == orig(this.title.margin.unitType)
this.title.margin.top == orig(this.title.margin.top)
this.title.margin.left == orig(this.title.margin.left)
this.title.margin.bottom == orig(this.title.margin.bottom)
this.title.margin.right == orig(this.title.margin.right)
this.title.frame == orig(this.title.frame)
this.title.frame.getClass().getName() == orig(this.title.frame.getClass().getName())
this.title.padding == orig(this.title.padding)
this.title.padding.unitType == orig(this.title.padding.unitType)
this.title.padding.top == orig(this.title.padding.top)
this.title.padding.left == orig(this.title.padding.left)
this.title.padding.bottom == orig(this.title.padding.bottom)
this.title.padding.right == orig(this.title.padding.right)
this.title.width == orig(this.title.width)
this.title.height == orig(this.title.height)
this.title.bounds == orig(this.title.bounds)
this.title.bounds.getClass().getName() == orig(this.title.bounds.getClass().getName())
this.subtitles == orig(this.subtitles)
this.subtitles[] == orig(this.subtitles[])
this.subtitles.getClass().getName() == orig(this.subtitles.getClass().getName())
this.plot == orig(this.plot)
this.plot.getClass().getName() == orig(this.plot.getClass().getName())
org.jfree.chart.plot.Plot.ZERO == orig(org.jfree.chart.plot.Plot.ZERO)
org.jfree.chart.plot.Plot.ZERO.getClass().getName() == orig(org.jfree.chart.plot.Plot.ZERO.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_INSETS == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.top == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.top)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.left == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.left)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.right == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.right)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName())
this.plot.parent == orig(this.plot.parent)
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener == orig(org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener)
this.plot.datasetGroup == orig(this.plot.datasetGroup)
this.plot.noDataMessage == orig(this.plot.noDataMessage)
this.plot.noDataMessageFont == orig(this.plot.noDataMessageFont)
this.plot.noDataMessagePaint == orig(this.plot.noDataMessagePaint)
this.plot.noDataMessagePaint.getClass().getName() == orig(this.plot.noDataMessagePaint.getClass().getName())
this.plot.insets == orig(this.plot.insets)
this.plot.insets.unitType == orig(this.plot.insets.unitType)
this.plot.insets.top == orig(this.plot.insets.top)
this.plot.insets.left == orig(this.plot.insets.left)
this.plot.insets.bottom == orig(this.plot.insets.bottom)
this.plot.insets.right == orig(this.plot.insets.right)
this.plot.outlineVisible == orig(this.plot.outlineVisible)
this.plot.outlineStroke == orig(this.plot.outlineStroke)
this.plot.outlineStroke.getClass().getName() == orig(this.plot.outlineStroke.getClass().getName())
this.plot.outlinePaint == orig(this.plot.outlinePaint)
this.plot.outlinePaint.getClass().getName() == orig(this.plot.outlinePaint.getClass().getName())
this.plot.backgroundPaint == orig(this.plot.backgroundPaint)
this.plot.backgroundPaint.getClass().getName() == orig(this.plot.backgroundPaint.getClass().getName())
this.plot.backgroundImage == orig(this.plot.backgroundImage)
this.plot.backgroundImageAlignment == orig(this.plot.backgroundImageAlignment)
this.plot.backgroundImageAlpha == orig(this.plot.backgroundImageAlpha)
this.plot.foregroundAlpha == orig(this.plot.foregroundAlpha)
this.plot.backgroundAlpha == orig(this.plot.backgroundAlpha)
this.plot.drawingSupplier == orig(this.plot.drawingSupplier)
this.plot.drawingSupplier.getClass().getName() == orig(this.plot.drawingSupplier.getClass().getName())
this.plot.listenerList == orig(this.plot.listenerList)
this.backgroundPaint == orig(this.backgroundPaint)
this.backgroundPaint.getClass().getName() == orig(this.backgroundPaint.getClass().getName())
this.backgroundImage == orig(this.backgroundImage)
this.backgroundImageAlignment == orig(this.backgroundImageAlignment)
this.backgroundImageAlpha == orig(this.backgroundImageAlpha)
this.changeListeners == orig(this.changeListeners)
this.progressListeners == orig(this.progressListeners)
this.notify == orig(this.notify)
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartChangeListener == orig(org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartChangeListener)
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartProgressListener == orig(org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartProgressListener)
t.position == orig(t.position)
t.position.name == orig(t.position.name)
t.position.name.toString == orig(t.position.name.toString)
t.horizontalAlignment == orig(t.horizontalAlignment)
t.horizontalAlignment.name == orig(t.horizontalAlignment.name)
t.horizontalAlignment.name.toString == orig(t.horizontalAlignment.name.toString)
t.verticalAlignment == orig(t.verticalAlignment)
t.verticalAlignment.name == orig(t.verticalAlignment.name)
t.verticalAlignment.name.toString == orig(t.verticalAlignment.name.toString)
t.listenerList == orig(t.listenerList)
t.notify == orig(t.notify)
t.id == orig(t.id)
t.margin == orig(t.margin)
t.margin.unitType == orig(t.margin.unitType)
t.margin.top == orig(t.margin.top)
t.margin.left == orig(t.margin.left)
t.margin.bottom == orig(t.margin.bottom)
t.margin.right == orig(t.margin.right)
t.frame == orig(t.frame)
t.frame.getClass().getName() == orig(t.frame.getClass().getName())
t.padding == orig(t.padding)
t.padding.unitType == orig(t.padding.unitType)
t.padding.top == orig(t.padding.top)
t.padding.left == orig(t.padding.left)
t.padding.bottom == orig(t.padding.bottom)
t.padding.right == orig(t.padding.right)
t.width == orig(t.width)
t.height == orig(t.height)
t.bounds == orig(t.bounds)
t.bounds.getClass().getName() == orig(t.bounds.getClass().getName())
t.position.name.toString one of { "RectangleEdge.BOTTOM", "RectangleEdge.TOP" }
t.horizontalAlignment has only one value
t.horizontalAlignment.name has only one value
t.horizontalAlignment.name.toString == "HorizontalAlignment.CENTER"
t.verticalAlignment has only one value
t.verticalAlignment.name has only one value
t.verticalAlignment.name.toString == "VerticalAlignment.CENTER"
t.notify == true
t.id == null
t.margin.unitType has only one value
t.margin.top one of { 0.0, 1.0 }
t.margin.left one of { 0.0, 1.0 }
t.margin.bottom one of { 0.0, 1.0 }
t.margin.right one of { 0.0, 1.0 }
t.padding has only one value
t.padding.unitType has only one value
t.padding.top == 1.0
t.padding.left == 1.0
t.padding.bottom == 1.0
t.padding.right == 1.0
t.width == 0.0
t.height == 0.0
t.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
return == null
this.title.content.lines[] == orig(this.title.content.lines[]) (elementwise)
this.title.content.lines[] is the reverse of orig(this.title.content.lines[])
this.title.content.lines[].getClass().getName() == orig(this.title.content.lines[].getClass().getName()) (elementwise)
===========================================================================
org.jfree.chart.JFreeChart.fireChartChanged():::ENTER
===========================================================================
org.jfree.chart.JFreeChart.fireChartChanged():::EXIT
org.jfree.chart.JFreeChart.INFO == orig(org.jfree.chart.JFreeChart.INFO)
org.jfree.chart.JFreeChart.INFO.logo == orig(org.jfree.chart.JFreeChart.INFO.logo)
org.jfree.chart.JFreeChart.INFO.licenceText == orig(org.jfree.chart.JFreeChart.INFO.licenceText)
org.jfree.chart.JFreeChart.INFO.licenceText.toString == orig(org.jfree.chart.JFreeChart.INFO.licenceText.toString)
org.jfree.chart.JFreeChart.INFO.contributors == orig(org.jfree.chart.JFreeChart.INFO.contributors)
org.jfree.chart.JFreeChart.INFO.contributors[] == orig(org.jfree.chart.JFreeChart.INFO.contributors[])
org.jfree.chart.JFreeChart.INFO.contributors.getClass().getName() == orig(org.jfree.chart.JFreeChart.INFO.contributors.getClass().getName())
org.jfree.chart.JFreeChart.INFO.copyright == orig(org.jfree.chart.JFreeChart.INFO.copyright)
org.jfree.chart.JFreeChart.INFO.copyright.toString == orig(org.jfree.chart.JFreeChart.INFO.copyright.toString)
org.jfree.chart.JFreeChart.INFO.libraries == orig(org.jfree.chart.JFreeChart.INFO.libraries)
org.jfree.chart.JFreeChart.INFO.libraries[] == orig(org.jfree.chart.JFreeChart.INFO.libraries[])
org.jfree.chart.JFreeChart.INFO.libraries.getClass().getName() == orig(org.jfree.chart.JFreeChart.INFO.libraries.getClass().getName())
org.jfree.chart.JFreeChart.INFO.optionalLibraries == orig(org.jfree.chart.JFreeChart.INFO.optionalLibraries)
org.jfree.chart.JFreeChart.INFO.optionalLibraries[] == orig(org.jfree.chart.JFreeChart.INFO.optionalLibraries[])
org.jfree.chart.JFreeChart.INFO.optionalLibraries.getClass().getName() == orig(org.jfree.chart.JFreeChart.INFO.optionalLibraries.getClass().getName())
org.jfree.chart.JFreeChart.INFO.name == orig(org.jfree.chart.JFreeChart.INFO.name)
org.jfree.chart.JFreeChart.INFO.name.toString == orig(org.jfree.chart.JFreeChart.INFO.name.toString)
org.jfree.chart.JFreeChart.INFO.version == orig(org.jfree.chart.JFreeChart.INFO.version)
org.jfree.chart.JFreeChart.INFO.version.toString == orig(org.jfree.chart.JFreeChart.INFO.version.toString)
org.jfree.chart.JFreeChart.INFO.licenceName == orig(org.jfree.chart.JFreeChart.INFO.licenceName)
org.jfree.chart.JFreeChart.INFO.licenceName.toString == orig(org.jfree.chart.JFreeChart.INFO.licenceName.toString)
org.jfree.chart.JFreeChart.INFO.info == orig(org.jfree.chart.JFreeChart.INFO.info)
org.jfree.chart.JFreeChart.INFO.info.toString == orig(org.jfree.chart.JFreeChart.INFO.info.toString)
org.jfree.chart.JFreeChart.DEFAULT_TITLE_FONT == orig(org.jfree.chart.JFreeChart.DEFAULT_TITLE_FONT)
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT == orig(org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT)
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName() == orig(org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_IMAGE == orig(org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_IMAGE)
this.renderingHints == orig(this.renderingHints)
this.borderVisible == orig(this.borderVisible)
this.borderStroke == orig(this.borderStroke)
this.borderStroke.getClass().getName() == orig(this.borderStroke.getClass().getName())
this.borderPaint == orig(this.borderPaint)
this.borderPaint.getClass().getName() == orig(this.borderPaint.getClass().getName())
this.padding == orig(this.padding)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.padding.unitType == orig(this.padding.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.title == orig(this.title)
org.jfree.chart.title.TextTitle.DEFAULT_FONT == orig(org.jfree.chart.title.TextTitle.DEFAULT_FONT)
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT == orig(org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT)
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT.getClass().getName() == orig(org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT.getClass().getName())
this.title.text == orig(this.title.text)
this.title.text.toString == orig(this.title.text.toString)
this.title.font == orig(this.title.font)
this.title.textAlignment == orig(this.title.textAlignment)
org.jfree.chart.util.HorizontalAlignment.LEFT == orig(org.jfree.chart.util.HorizontalAlignment.LEFT)
org.jfree.chart.util.HorizontalAlignment.RIGHT == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT)
org.jfree.chart.util.HorizontalAlignment.CENTER == orig(org.jfree.chart.util.HorizontalAlignment.CENTER)
this.title.textAlignment.name == orig(this.title.textAlignment.name)
this.title.textAlignment.name.toString == orig(this.title.textAlignment.name.toString)
this.title.paint == orig(this.title.paint)
this.title.paint.getClass().getName() == orig(this.title.paint.getClass().getName())
this.title.backgroundPaint == orig(this.title.backgroundPaint)
this.title.toolTipText == orig(this.title.toolTipText)
this.title.urlText == orig(this.title.urlText)
this.title.content == orig(this.title.content)
this.title.content.lines == orig(this.title.content.lines)
this.title.content.lines[] == orig(this.title.content.lines[])
this.title.content.lines.getClass().getName() == orig(this.title.content.lines.getClass().getName())
this.title.content.lineAlignment == orig(this.title.content.lineAlignment)
this.title.expandToFitSpace == orig(this.title.expandToFitSpace)
org.jfree.chart.title.Title.DEFAULT_POSITION == orig(org.jfree.chart.title.Title.DEFAULT_POSITION)
org.jfree.chart.util.RectangleEdge.TOP == orig(org.jfree.chart.util.RectangleEdge.TOP)
org.jfree.chart.util.RectangleEdge.BOTTOM == orig(org.jfree.chart.util.RectangleEdge.BOTTOM)
org.jfree.chart.util.RectangleEdge.LEFT == orig(org.jfree.chart.util.RectangleEdge.LEFT)
org.jfree.chart.util.RectangleEdge.RIGHT == orig(org.jfree.chart.util.RectangleEdge.RIGHT)
org.jfree.chart.title.Title.DEFAULT_POSITION.name == orig(org.jfree.chart.title.Title.DEFAULT_POSITION.name)
org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT)
org.jfree.chart.util.VerticalAlignment.TOP == orig(org.jfree.chart.util.VerticalAlignment.TOP)
org.jfree.chart.util.VerticalAlignment.BOTTOM == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM)
org.jfree.chart.util.VerticalAlignment.CENTER == orig(org.jfree.chart.util.VerticalAlignment.CENTER)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString)
org.jfree.chart.title.Title.DEFAULT_PADDING == orig(org.jfree.chart.title.Title.DEFAULT_PADDING)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType)
org.jfree.chart.title.Title.DEFAULT_PADDING.top == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.top)
org.jfree.chart.title.Title.DEFAULT_PADDING.left == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.left)
org.jfree.chart.title.Title.DEFAULT_PADDING.bottom == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.bottom)
org.jfree.chart.title.Title.DEFAULT_PADDING.right == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.right)
this.title.position == orig(this.title.position)
this.title.position.name == orig(this.title.position.name)
this.title.position.name.toString == orig(this.title.position.name.toString)
this.title.horizontalAlignment == orig(this.title.horizontalAlignment)
this.title.horizontalAlignment.name == orig(this.title.horizontalAlignment.name)
this.title.horizontalAlignment.name.toString == orig(this.title.horizontalAlignment.name.toString)
this.title.verticalAlignment == orig(this.title.verticalAlignment)
this.title.verticalAlignment.name == orig(this.title.verticalAlignment.name)
this.title.verticalAlignment.name.toString == orig(this.title.verticalAlignment.name.toString)
this.title.listenerList == orig(this.title.listenerList)
this.title.notify == orig(this.title.notify)
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener == orig(org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener)
this.title.id == orig(this.title.id)
this.title.margin == orig(this.title.margin)
this.title.margin.unitType == orig(this.title.margin.unitType)
this.title.margin.top == orig(this.title.margin.top)
this.title.margin.left == orig(this.title.margin.left)
this.title.margin.bottom == orig(this.title.margin.bottom)
this.title.margin.right == orig(this.title.margin.right)
this.title.frame == orig(this.title.frame)
this.title.frame.getClass().getName() == orig(this.title.frame.getClass().getName())
this.title.padding == orig(this.title.padding)
this.title.padding.unitType == orig(this.title.padding.unitType)
this.title.padding.top == orig(this.title.padding.top)
this.title.padding.left == orig(this.title.padding.left)
this.title.padding.bottom == orig(this.title.padding.bottom)
this.title.padding.right == orig(this.title.padding.right)
this.title.width == orig(this.title.width)
this.title.height == orig(this.title.height)
this.title.bounds == orig(this.title.bounds)
this.title.bounds.getClass().getName() == orig(this.title.bounds.getClass().getName())
this.subtitles == orig(this.subtitles)
this.subtitles[] == orig(this.subtitles[])
this.subtitles.getClass().getName() == orig(this.subtitles.getClass().getName())
this.plot == orig(this.plot)
this.plot.getClass().getName() == orig(this.plot.getClass().getName())
org.jfree.chart.plot.Plot.ZERO == orig(org.jfree.chart.plot.Plot.ZERO)
org.jfree.chart.plot.Plot.ZERO.getClass().getName() == orig(org.jfree.chart.plot.Plot.ZERO.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_INSETS == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.top == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.top)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.left == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.left)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.right == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.right)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName())
this.plot.parent == orig(this.plot.parent)
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener == orig(org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener)
this.plot.datasetGroup == orig(this.plot.datasetGroup)
this.plot.noDataMessage == orig(this.plot.noDataMessage)
this.plot.noDataMessageFont == orig(this.plot.noDataMessageFont)
this.plot.noDataMessagePaint == orig(this.plot.noDataMessagePaint)
this.plot.noDataMessagePaint.getClass().getName() == orig(this.plot.noDataMessagePaint.getClass().getName())
this.plot.insets == orig(this.plot.insets)
this.plot.insets.unitType == orig(this.plot.insets.unitType)
this.plot.insets.top == orig(this.plot.insets.top)
this.plot.insets.left == orig(this.plot.insets.left)
this.plot.insets.bottom == orig(this.plot.insets.bottom)
this.plot.insets.right == orig(this.plot.insets.right)
this.plot.outlineVisible == orig(this.plot.outlineVisible)
this.plot.outlineStroke == orig(this.plot.outlineStroke)
this.plot.outlineStroke.getClass().getName() == orig(this.plot.outlineStroke.getClass().getName())
this.plot.outlinePaint == orig(this.plot.outlinePaint)
this.plot.outlinePaint.getClass().getName() == orig(this.plot.outlinePaint.getClass().getName())
this.plot.backgroundPaint == orig(this.plot.backgroundPaint)
this.plot.backgroundPaint.getClass().getName() == orig(this.plot.backgroundPaint.getClass().getName())
this.plot.backgroundImage == orig(this.plot.backgroundImage)
this.plot.backgroundImageAlignment == orig(this.plot.backgroundImageAlignment)
this.plot.backgroundImageAlpha == orig(this.plot.backgroundImageAlpha)
this.plot.foregroundAlpha == orig(this.plot.foregroundAlpha)
this.plot.backgroundAlpha == orig(this.plot.backgroundAlpha)
this.plot.drawingSupplier == orig(this.plot.drawingSupplier)
this.plot.drawingSupplier.getClass().getName() == orig(this.plot.drawingSupplier.getClass().getName())
this.plot.listenerList == orig(this.plot.listenerList)
this.backgroundPaint == orig(this.backgroundPaint)
this.backgroundPaint.getClass().getName() == orig(this.backgroundPaint.getClass().getName())
this.backgroundImage == orig(this.backgroundImage)
this.backgroundImageAlignment == orig(this.backgroundImageAlignment)
this.backgroundImageAlpha == orig(this.backgroundImageAlpha)
this.changeListeners == orig(this.changeListeners)
this.progressListeners == orig(this.progressListeners)
this.notify == orig(this.notify)
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartChangeListener == orig(org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartChangeListener)
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartProgressListener == orig(org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartProgressListener)
===========================================================================
org.jfree.chart.JFreeChart.getPlot():::ENTER
this has only one value
this.renderingHints has only one value
this.borderStroke has only one value
this.title has only one value
this.title.text has only one value
this.title.text.toString == "Test"
this.title.content == null
this.title.listenerList has only one value
this.title.bounds has only one value
this.subtitles has only one value
this.subtitles[] contains no nulls and has only one value, of length 1
this.subtitles[] elements has only one value
this.plot has only one value
this.plot.getClass().getName() == org.jfree.chart.plot.PiePlot.class
this.plot.noDataMessageFont has only one value
this.plot.insets has only one value
this.plot.drawingSupplier has only one value
this.plot.listenerList has only one value
this.changeListeners has only one value
this.progressListeners has only one value
===========================================================================
org.jfree.chart.JFreeChart.getPlot():::EXIT
org.jfree.chart.JFreeChart.INFO == orig(org.jfree.chart.JFreeChart.INFO)
org.jfree.chart.JFreeChart.INFO.logo == orig(org.jfree.chart.JFreeChart.INFO.logo)
org.jfree.chart.JFreeChart.INFO.licenceText == orig(org.jfree.chart.JFreeChart.INFO.licenceText)
org.jfree.chart.JFreeChart.INFO.licenceText.toString == orig(org.jfree.chart.JFreeChart.INFO.licenceText.toString)
org.jfree.chart.JFreeChart.INFO.contributors == orig(org.jfree.chart.JFreeChart.INFO.contributors)
org.jfree.chart.JFreeChart.INFO.contributors[] == orig(org.jfree.chart.JFreeChart.INFO.contributors[])
org.jfree.chart.JFreeChart.INFO.contributors.getClass().getName() == orig(org.jfree.chart.JFreeChart.INFO.contributors.getClass().getName())
org.jfree.chart.JFreeChart.INFO.copyright == orig(org.jfree.chart.JFreeChart.INFO.copyright)
org.jfree.chart.JFreeChart.INFO.copyright.toString == orig(org.jfree.chart.JFreeChart.INFO.copyright.toString)
org.jfree.chart.JFreeChart.INFO.libraries == orig(org.jfree.chart.JFreeChart.INFO.libraries)
org.jfree.chart.JFreeChart.INFO.libraries[] == orig(org.jfree.chart.JFreeChart.INFO.libraries[])
org.jfree.chart.JFreeChart.INFO.libraries.getClass().getName() == orig(org.jfree.chart.JFreeChart.INFO.libraries.getClass().getName())
org.jfree.chart.JFreeChart.INFO.optionalLibraries == orig(org.jfree.chart.JFreeChart.INFO.optionalLibraries)
org.jfree.chart.JFreeChart.INFO.optionalLibraries[] == orig(org.jfree.chart.JFreeChart.INFO.optionalLibraries[])
org.jfree.chart.JFreeChart.INFO.optionalLibraries.getClass().getName() == orig(org.jfree.chart.JFreeChart.INFO.optionalLibraries.getClass().getName())
org.jfree.chart.JFreeChart.INFO.name == orig(org.jfree.chart.JFreeChart.INFO.name)
org.jfree.chart.JFreeChart.INFO.name.toString == orig(org.jfree.chart.JFreeChart.INFO.name.toString)
org.jfree.chart.JFreeChart.INFO.version == orig(org.jfree.chart.JFreeChart.INFO.version)
org.jfree.chart.JFreeChart.INFO.version.toString == orig(org.jfree.chart.JFreeChart.INFO.version.toString)
org.jfree.chart.JFreeChart.INFO.licenceName == orig(org.jfree.chart.JFreeChart.INFO.licenceName)
org.jfree.chart.JFreeChart.INFO.licenceName.toString == orig(org.jfree.chart.JFreeChart.INFO.licenceName.toString)
org.jfree.chart.JFreeChart.INFO.info == orig(org.jfree.chart.JFreeChart.INFO.info)
org.jfree.chart.JFreeChart.INFO.info.toString == orig(org.jfree.chart.JFreeChart.INFO.info.toString)
org.jfree.chart.JFreeChart.DEFAULT_TITLE_FONT == orig(org.jfree.chart.JFreeChart.DEFAULT_TITLE_FONT)
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT == orig(org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT)
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName() == orig(org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_IMAGE == orig(org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_IMAGE)
this.renderingHints == orig(this.renderingHints)
this.borderVisible == orig(this.borderVisible)
this.borderStroke == orig(this.borderStroke)
this.borderStroke.getClass().getName() == orig(this.borderStroke.getClass().getName())
this.borderPaint == orig(this.borderPaint)
this.borderPaint.getClass().getName() == orig(this.borderPaint.getClass().getName())
this.padding == orig(this.padding)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.padding.unitType == orig(this.padding.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.title == orig(this.title)
org.jfree.chart.title.TextTitle.DEFAULT_FONT == orig(org.jfree.chart.title.TextTitle.DEFAULT_FONT)
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT == orig(org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT)
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT.getClass().getName() == orig(org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT.getClass().getName())
this.title.text == orig(this.title.text)
this.title.text.toString == orig(this.title.text.toString)
this.title.font == orig(this.title.font)
this.title.textAlignment == orig(this.title.textAlignment)
org.jfree.chart.util.HorizontalAlignment.LEFT == orig(org.jfree.chart.util.HorizontalAlignment.LEFT)
org.jfree.chart.util.HorizontalAlignment.RIGHT == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT)
org.jfree.chart.util.HorizontalAlignment.CENTER == orig(org.jfree.chart.util.HorizontalAlignment.CENTER)
this.title.textAlignment.name == orig(this.title.textAlignment.name)
this.title.textAlignment.name.toString == orig(this.title.textAlignment.name.toString)
this.title.paint == orig(this.title.paint)
this.title.paint.getClass().getName() == orig(this.title.paint.getClass().getName())
this.title.backgroundPaint == orig(this.title.backgroundPaint)
this.title.toolTipText == orig(this.title.toolTipText)
this.title.urlText == orig(this.title.urlText)
this.title.content == orig(this.title.content)
this.title.expandToFitSpace == orig(this.title.expandToFitSpace)
org.jfree.chart.title.Title.DEFAULT_POSITION == orig(org.jfree.chart.title.Title.DEFAULT_POSITION)
org.jfree.chart.util.RectangleEdge.TOP == orig(org.jfree.chart.util.RectangleEdge.TOP)
org.jfree.chart.util.RectangleEdge.BOTTOM == orig(org.jfree.chart.util.RectangleEdge.BOTTOM)
org.jfree.chart.util.RectangleEdge.LEFT == orig(org.jfree.chart.util.RectangleEdge.LEFT)
org.jfree.chart.util.RectangleEdge.RIGHT == orig(org.jfree.chart.util.RectangleEdge.RIGHT)
org.jfree.chart.title.Title.DEFAULT_POSITION.name == orig(org.jfree.chart.title.Title.DEFAULT_POSITION.name)
org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT)
org.jfree.chart.util.VerticalAlignment.TOP == orig(org.jfree.chart.util.VerticalAlignment.TOP)
org.jfree.chart.util.VerticalAlignment.BOTTOM == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM)
org.jfree.chart.util.VerticalAlignment.CENTER == orig(org.jfree.chart.util.VerticalAlignment.CENTER)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString)
org.jfree.chart.title.Title.DEFAULT_PADDING == orig(org.jfree.chart.title.Title.DEFAULT_PADDING)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType)
org.jfree.chart.title.Title.DEFAULT_PADDING.top == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.top)
org.jfree.chart.title.Title.DEFAULT_PADDING.left == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.left)
org.jfree.chart.title.Title.DEFAULT_PADDING.bottom == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.bottom)
org.jfree.chart.title.Title.DEFAULT_PADDING.right == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.right)
this.title.position == orig(this.title.position)
this.title.position.name == orig(this.title.position.name)
this.title.position.name.toString == orig(this.title.position.name.toString)
this.title.horizontalAlignment == orig(this.title.horizontalAlignment)
this.title.horizontalAlignment.name == orig(this.title.horizontalAlignment.name)
this.title.horizontalAlignment.name.toString == orig(this.title.horizontalAlignment.name.toString)
this.title.verticalAlignment == orig(this.title.verticalAlignment)
this.title.verticalAlignment.name == orig(this.title.verticalAlignment.name)
this.title.verticalAlignment.name.toString == orig(this.title.verticalAlignment.name.toString)
this.title.listenerList == orig(this.title.listenerList)
this.title.notify == orig(this.title.notify)
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener == orig(org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener)
this.title.id == orig(this.title.id)
this.title.margin == orig(this.title.margin)
this.title.margin.unitType == orig(this.title.margin.unitType)
this.title.margin.top == orig(this.title.margin.top)
this.title.margin.left == orig(this.title.margin.left)
this.title.margin.bottom == orig(this.title.margin.bottom)
this.title.margin.right == orig(this.title.margin.right)
this.title.frame == orig(this.title.frame)
this.title.frame.getClass().getName() == orig(this.title.frame.getClass().getName())
this.title.padding == orig(this.title.padding)
this.title.padding.unitType == orig(this.title.padding.unitType)
this.title.padding.top == orig(this.title.padding.top)
this.title.padding.left == orig(this.title.padding.left)
this.title.padding.bottom == orig(this.title.padding.bottom)
this.title.padding.right == orig(this.title.padding.right)
this.title.width == orig(this.title.width)
this.title.height == orig(this.title.height)
this.title.bounds == orig(this.title.bounds)
this.title.bounds.getClass().getName() == orig(this.title.bounds.getClass().getName())
this.subtitles == orig(this.subtitles)
this.subtitles[] == orig(this.subtitles[])
this.subtitles.getClass().getName() == orig(this.subtitles.getClass().getName())
this.plot == orig(this.plot)
this.plot.getClass().getName() == orig(this.plot.getClass().getName())
org.jfree.chart.plot.Plot.ZERO == orig(org.jfree.chart.plot.Plot.ZERO)
org.jfree.chart.plot.Plot.ZERO.getClass().getName() == orig(org.jfree.chart.plot.Plot.ZERO.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_INSETS == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.top == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.top)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.left == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.left)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.right == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.right)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName())
this.plot.parent == orig(this.plot.parent)
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener == orig(org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener)
this.plot.datasetGroup == orig(this.plot.datasetGroup)
this.plot.noDataMessage == orig(this.plot.noDataMessage)
this.plot.noDataMessageFont == orig(this.plot.noDataMessageFont)
this.plot.noDataMessagePaint == orig(this.plot.noDataMessagePaint)
this.plot.noDataMessagePaint.getClass().getName() == orig(this.plot.noDataMessagePaint.getClass().getName())
this.plot.insets == orig(this.plot.insets)
this.plot.insets.unitType == orig(this.plot.insets.unitType)
this.plot.insets.top == orig(this.plot.insets.top)
this.plot.insets.left == orig(this.plot.insets.left)
this.plot.insets.bottom == orig(this.plot.insets.bottom)
this.plot.insets.right == orig(this.plot.insets.right)
this.plot.outlineVisible == orig(this.plot.outlineVisible)
this.plot.outlineStroke == orig(this.plot.outlineStroke)
this.plot.outlineStroke.getClass().getName() == orig(this.plot.outlineStroke.getClass().getName())
this.plot.outlinePaint == orig(this.plot.outlinePaint)
this.plot.outlinePaint.getClass().getName() == orig(this.plot.outlinePaint.getClass().getName())
this.plot.backgroundPaint == orig(this.plot.backgroundPaint)
this.plot.backgroundPaint.getClass().getName() == orig(this.plot.backgroundPaint.getClass().getName())
this.plot.backgroundImage == orig(this.plot.backgroundImage)
this.plot.backgroundImageAlignment == orig(this.plot.backgroundImageAlignment)
this.plot.backgroundImageAlpha == orig(this.plot.backgroundImageAlpha)
this.plot.foregroundAlpha == orig(this.plot.foregroundAlpha)
this.plot.backgroundAlpha == orig(this.plot.backgroundAlpha)
this.plot.drawingSupplier == orig(this.plot.drawingSupplier)
this.plot.drawingSupplier.getClass().getName() == orig(this.plot.drawingSupplier.getClass().getName())
this.plot.listenerList == orig(this.plot.listenerList)
this.backgroundPaint == orig(this.backgroundPaint)
this.backgroundPaint.getClass().getName() == orig(this.backgroundPaint.getClass().getName())
this.backgroundImage == orig(this.backgroundImage)
this.backgroundImageAlignment == orig(this.backgroundImageAlignment)
this.backgroundImageAlpha == orig(this.backgroundImageAlpha)
this.changeListeners == orig(this.changeListeners)
this.progressListeners == orig(this.progressListeners)
this.notify == orig(this.notify)
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartChangeListener == orig(org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartChangeListener)
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartProgressListener == orig(org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartProgressListener)
this.renderingHints has only one value
this.borderStroke has only one value
this.title has only one value
this.title.text has only one value
this.title.text.toString == "Test"
this.title.content == null
this.title.listenerList has only one value
this.title.bounds has only one value
this.subtitles has only one value
this.subtitles[] contains no nulls and has only one value, of length 1
this.subtitles[] elements has only one value
this.plot has only one value
this.plot.getClass().getName() == org.jfree.chart.plot.PiePlot.class
this.plot.noDataMessageFont has only one value
this.plot.insets has only one value
this.plot.drawingSupplier has only one value
this.plot.listenerList has only one value
this.changeListeners has only one value
this.progressListeners has only one value
return has only one value
return.getClass().getName() == org.jfree.chart.plot.PiePlot.class
return.parent == null
return.datasetGroup == null
return.noDataMessage == null
return.noDataMessageFont has only one value
return.noDataMessagePaint has only one value
return.noDataMessagePaint.getClass().getName() == java.awt.Color.class
return.insets has only one value
return.insets.unitType has only one value
return.insets.top == 0.0
return.insets.left == 5.0
return.insets.bottom == 5.0
return.insets.right == 5.0
return.outlineVisible == true
return.outlineStroke has only one value
return.outlineStroke.getClass().getName() == java.awt.BasicStroke.class
return.outlinePaint has only one value
return.outlinePaint.getClass().getName() == java.awt.Color.class
return.backgroundPaint has only one value
return.backgroundPaint.getClass().getName() == java.awt.Color.class
return.backgroundImage == null
return.backgroundImageAlignment == 15
return.backgroundImageAlpha == 0.5
return.foregroundAlpha == 1.0
return.backgroundAlpha == 1.0
return.drawingSupplier has only one value
return.drawingSupplier.getClass().getName() == org.jfree.chart.plot.DefaultDrawingSupplier.class
return.listenerList has only one value
===========================================================================
org.jfree.chart.JFreeChart.isBorderVisible():::ENTER
this.title.content == null
===========================================================================
org.jfree.chart.JFreeChart.isBorderVisible():::EXIT
org.jfree.chart.JFreeChart.INFO == orig(org.jfree.chart.JFreeChart.INFO)
org.jfree.chart.JFreeChart.INFO.logo == orig(org.jfree.chart.JFreeChart.INFO.logo)
org.jfree.chart.JFreeChart.INFO.licenceText == orig(org.jfree.chart.JFreeChart.INFO.licenceText)
org.jfree.chart.JFreeChart.INFO.licenceText.toString == orig(org.jfree.chart.JFreeChart.INFO.licenceText.toString)
org.jfree.chart.JFreeChart.INFO.contributors == orig(org.jfree.chart.JFreeChart.INFO.contributors)
org.jfree.chart.JFreeChart.INFO.contributors[] == orig(org.jfree.chart.JFreeChart.INFO.contributors[])
org.jfree.chart.JFreeChart.INFO.contributors.getClass().getName() == orig(org.jfree.chart.JFreeChart.INFO.contributors.getClass().getName())
org.jfree.chart.JFreeChart.INFO.copyright == orig(org.jfree.chart.JFreeChart.INFO.copyright)
org.jfree.chart.JFreeChart.INFO.copyright.toString == orig(org.jfree.chart.JFreeChart.INFO.copyright.toString)
org.jfree.chart.JFreeChart.INFO.libraries == orig(org.jfree.chart.JFreeChart.INFO.libraries)
org.jfree.chart.JFreeChart.INFO.libraries[] == orig(org.jfree.chart.JFreeChart.INFO.libraries[])
org.jfree.chart.JFreeChart.INFO.libraries.getClass().getName() == orig(org.jfree.chart.JFreeChart.INFO.libraries.getClass().getName())
org.jfree.chart.JFreeChart.INFO.optionalLibraries == orig(org.jfree.chart.JFreeChart.INFO.optionalLibraries)
org.jfree.chart.JFreeChart.INFO.optionalLibraries[] == orig(org.jfree.chart.JFreeChart.INFO.optionalLibraries[])
org.jfree.chart.JFreeChart.INFO.optionalLibraries.getClass().getName() == orig(org.jfree.chart.JFreeChart.INFO.optionalLibraries.getClass().getName())
org.jfree.chart.JFreeChart.INFO.name == orig(org.jfree.chart.JFreeChart.INFO.name)
org.jfree.chart.JFreeChart.INFO.name.toString == orig(org.jfree.chart.JFreeChart.INFO.name.toString)
org.jfree.chart.JFreeChart.INFO.version == orig(org.jfree.chart.JFreeChart.INFO.version)
org.jfree.chart.JFreeChart.INFO.version.toString == orig(org.jfree.chart.JFreeChart.INFO.version.toString)
org.jfree.chart.JFreeChart.INFO.licenceName == orig(org.jfree.chart.JFreeChart.INFO.licenceName)
org.jfree.chart.JFreeChart.INFO.licenceName.toString == orig(org.jfree.chart.JFreeChart.INFO.licenceName.toString)
org.jfree.chart.JFreeChart.INFO.info == orig(org.jfree.chart.JFreeChart.INFO.info)
org.jfree.chart.JFreeChart.INFO.info.toString == orig(org.jfree.chart.JFreeChart.INFO.info.toString)
org.jfree.chart.JFreeChart.DEFAULT_TITLE_FONT == orig(org.jfree.chart.JFreeChart.DEFAULT_TITLE_FONT)
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT == orig(org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT)
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName() == orig(org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_IMAGE == orig(org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_IMAGE)
this.renderingHints == orig(this.renderingHints)
this.borderVisible == orig(this.borderVisible)
this.borderStroke == orig(this.borderStroke)
this.borderStroke.getClass().getName() == orig(this.borderStroke.getClass().getName())
this.borderPaint == orig(this.borderPaint)
this.borderPaint.getClass().getName() == orig(this.borderPaint.getClass().getName())
this.padding == orig(this.padding)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.padding.unitType == orig(this.padding.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.title == orig(this.title)
org.jfree.chart.title.TextTitle.DEFAULT_FONT == orig(org.jfree.chart.title.TextTitle.DEFAULT_FONT)
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT == orig(org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT)
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT.getClass().getName() == orig(org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT.getClass().getName())
this.title.text == orig(this.title.text)
this.title.text.toString == orig(this.title.text.toString)
this.title.font == orig(this.title.font)
this.title.textAlignment == orig(this.title.textAlignment)
org.jfree.chart.util.HorizontalAlignment.LEFT == orig(org.jfree.chart.util.HorizontalAlignment.LEFT)
org.jfree.chart.util.HorizontalAlignment.RIGHT == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT)
org.jfree.chart.util.HorizontalAlignment.CENTER == orig(org.jfree.chart.util.HorizontalAlignment.CENTER)
this.title.textAlignment.name == orig(this.title.textAlignment.name)
this.title.textAlignment.name.toString == orig(this.title.textAlignment.name.toString)
this.title.paint == orig(this.title.paint)
this.title.paint.getClass().getName() == orig(this.title.paint.getClass().getName())
this.title.backgroundPaint == orig(this.title.backgroundPaint)
this.title.toolTipText == orig(this.title.toolTipText)
this.title.urlText == orig(this.title.urlText)
this.title.content == orig(this.title.content)
this.title.expandToFitSpace == orig(this.title.expandToFitSpace)
org.jfree.chart.title.Title.DEFAULT_POSITION == orig(org.jfree.chart.title.Title.DEFAULT_POSITION)
org.jfree.chart.util.RectangleEdge.TOP == orig(org.jfree.chart.util.RectangleEdge.TOP)
org.jfree.chart.util.RectangleEdge.BOTTOM == orig(org.jfree.chart.util.RectangleEdge.BOTTOM)
org.jfree.chart.util.RectangleEdge.LEFT == orig(org.jfree.chart.util.RectangleEdge.LEFT)
org.jfree.chart.util.RectangleEdge.RIGHT == orig(org.jfree.chart.util.RectangleEdge.RIGHT)
org.jfree.chart.title.Title.DEFAULT_POSITION.name == orig(org.jfree.chart.title.Title.DEFAULT_POSITION.name)
org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT)
org.jfree.chart.util.VerticalAlignment.TOP == orig(org.jfree.chart.util.VerticalAlignment.TOP)
org.jfree.chart.util.VerticalAlignment.BOTTOM == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM)
org.jfree.chart.util.VerticalAlignment.CENTER == orig(org.jfree.chart.util.VerticalAlignment.CENTER)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString)
org.jfree.chart.title.Title.DEFAULT_PADDING == orig(org.jfree.chart.title.Title.DEFAULT_PADDING)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType)
org.jfree.chart.title.Title.DEFAULT_PADDING.top == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.top)
org.jfree.chart.title.Title.DEFAULT_PADDING.left == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.left)
org.jfree.chart.title.Title.DEFAULT_PADDING.bottom == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.bottom)
org.jfree.chart.title.Title.DEFAULT_PADDING.right == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.right)
this.title.position == orig(this.title.position)
this.title.position.name == orig(this.title.position.name)
this.title.position.name.toString == orig(this.title.position.name.toString)
this.title.horizontalAlignment == orig(this.title.horizontalAlignment)
this.title.horizontalAlignment.name == orig(this.title.horizontalAlignment.name)
this.title.horizontalAlignment.name.toString == orig(this.title.horizontalAlignment.name.toString)
this.title.verticalAlignment == orig(this.title.verticalAlignment)
this.title.verticalAlignment.name == orig(this.title.verticalAlignment.name)
this.title.verticalAlignment.name.toString == orig(this.title.verticalAlignment.name.toString)
this.title.listenerList == orig(this.title.listenerList)
this.title.notify == orig(this.title.notify)
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener == orig(org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener)
this.title.id == orig(this.title.id)
this.title.margin == orig(this.title.margin)
this.title.margin.unitType == orig(this.title.margin.unitType)
this.title.margin.top == orig(this.title.margin.top)
this.title.margin.left == orig(this.title.margin.left)
this.title.margin.bottom == orig(this.title.margin.bottom)
this.title.margin.right == orig(this.title.margin.right)
this.title.frame == orig(this.title.frame)
this.title.frame.getClass().getName() == orig(this.title.frame.getClass().getName())
this.title.padding == orig(this.title.padding)
this.title.padding.unitType == orig(this.title.padding.unitType)
this.title.padding.top == orig(this.title.padding.top)
this.title.padding.left == orig(this.title.padding.left)
this.title.padding.bottom == orig(this.title.padding.bottom)
this.title.padding.right == orig(this.title.padding.right)
this.title.width == orig(this.title.width)
this.title.height == orig(this.title.height)
this.title.bounds == orig(this.title.bounds)
this.title.bounds.getClass().getName() == orig(this.title.bounds.getClass().getName())
this.subtitles == orig(this.subtitles)
this.subtitles[] == orig(this.subtitles[])
this.subtitles.getClass().getName() == orig(this.subtitles.getClass().getName())
this.plot == orig(this.plot)
this.plot.getClass().getName() == orig(this.plot.getClass().getName())
org.jfree.chart.plot.Plot.ZERO == orig(org.jfree.chart.plot.Plot.ZERO)
org.jfree.chart.plot.Plot.ZERO.getClass().getName() == orig(org.jfree.chart.plot.Plot.ZERO.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_INSETS == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.top == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.top)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.left == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.left)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.right == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.right)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName())
this.plot.parent == orig(this.plot.parent)
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener == orig(org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener)
this.plot.datasetGroup == orig(this.plot.datasetGroup)
this.plot.noDataMessage == orig(this.plot.noDataMessage)
this.plot.noDataMessageFont == orig(this.plot.noDataMessageFont)
this.plot.noDataMessagePaint == orig(this.plot.noDataMessagePaint)
this.plot.noDataMessagePaint.getClass().getName() == orig(this.plot.noDataMessagePaint.getClass().getName())
this.plot.insets == orig(this.plot.insets)
this.plot.insets.unitType == orig(this.plot.insets.unitType)
this.plot.insets.top == orig(this.plot.insets.top)
this.plot.insets.left == orig(this.plot.insets.left)
this.plot.insets.bottom == orig(this.plot.insets.bottom)
this.plot.insets.right == orig(this.plot.insets.right)
this.plot.outlineVisible == orig(this.plot.outlineVisible)
this.plot.outlineStroke == orig(this.plot.outlineStroke)
this.plot.outlineStroke.getClass().getName() == orig(this.plot.outlineStroke.getClass().getName())
this.plot.outlinePaint == orig(this.plot.outlinePaint)
this.plot.outlinePaint.getClass().getName() == orig(this.plot.outlinePaint.getClass().getName())
this.plot.backgroundPaint == orig(this.plot.backgroundPaint)
this.plot.backgroundPaint.getClass().getName() == orig(this.plot.backgroundPaint.getClass().getName())
this.plot.backgroundImage == orig(this.plot.backgroundImage)
this.plot.backgroundImageAlignment == orig(this.plot.backgroundImageAlignment)
this.plot.backgroundImageAlpha == orig(this.plot.backgroundImageAlpha)
this.plot.foregroundAlpha == orig(this.plot.foregroundAlpha)
this.plot.backgroundAlpha == orig(this.plot.backgroundAlpha)
this.plot.drawingSupplier == orig(this.plot.drawingSupplier)
this.plot.drawingSupplier.getClass().getName() == orig(this.plot.drawingSupplier.getClass().getName())
this.plot.listenerList == orig(this.plot.listenerList)
this.backgroundPaint == orig(this.backgroundPaint)
this.backgroundPaint.getClass().getName() == orig(this.backgroundPaint.getClass().getName())
this.backgroundImage == orig(this.backgroundImage)
this.backgroundImageAlignment == orig(this.backgroundImageAlignment)
this.backgroundImageAlpha == orig(this.backgroundImageAlpha)
this.changeListeners == orig(this.changeListeners)
this.progressListeners == orig(this.progressListeners)
this.notify == orig(this.notify)
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartChangeListener == orig(org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartChangeListener)
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartProgressListener == orig(org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartProgressListener)
this.title.content == null
return == false
===========================================================================
org.jfree.chart.JFreeChart.isBorderVisible():::EXIT;condition="not(return == true)"
===========================================================================
org.jfree.chart.JFreeChart.notifyListeners(org.jfree.chart.event.ChartChangeEvent):::ENTER
event.type has only one value
org.jfree.chart.event.ChartChangeEventType.GENERAL has only one value
org.jfree.chart.event.ChartChangeEventType.NEW_DATASET has only one value
org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED has only one value
event.type.name has only one value
event.type.name.toString == "ChartChangeEventType.GENERAL"
event.chart.renderingHints has only one value
event.chart.borderVisible == false
event.chart.borderStroke has only one value
event.chart.borderStroke.getClass().getName() == java.awt.BasicStroke.class
event.chart.borderPaint has only one value
event.chart.borderPaint.getClass().getName() == java.awt.Color.class
event.chart.padding has only one value
event.chart.title has only one value
event.chart.subtitles has only one value
event.chart.subtitles[] contains no nulls and has only one value, of length 1
event.chart.subtitles[] elements has only one value
event.chart.subtitles[].getClass().getName() == [org.jfree.chart.title.LegendTitle]
event.chart.subtitles[].getClass().getName() elements == org.jfree.chart.title.LegendTitle.class
event.chart.subtitles.getClass().getName() == java.util.ArrayList.class
event.chart.plot has only one value
event.chart.plot.getClass().getName() == org.jfree.chart.plot.PiePlot.class
event.chart.backgroundPaint has only one value
event.chart.backgroundPaint.getClass().getName() == java.awt.Color.class
event.chart.backgroundImage == null
event.chart.backgroundImageAlignment == 15
event.chart.backgroundImageAlpha == 0.5
event.chart.changeListeners has only one value
event.chart.progressListeners has only one value
event.chart.notify == true
size(event.chart.subtitles[]) == 1
===========================================================================
org.jfree.chart.JFreeChart.notifyListeners(org.jfree.chart.event.ChartChangeEvent):::EXIT
org.jfree.chart.JFreeChart.INFO == orig(org.jfree.chart.JFreeChart.INFO)
org.jfree.chart.JFreeChart.INFO.logo == orig(org.jfree.chart.JFreeChart.INFO.logo)
org.jfree.chart.JFreeChart.INFO.licenceText == orig(org.jfree.chart.JFreeChart.INFO.licenceText)
org.jfree.chart.JFreeChart.INFO.licenceText.toString == orig(org.jfree.chart.JFreeChart.INFO.licenceText.toString)
org.jfree.chart.JFreeChart.INFO.contributors == orig(org.jfree.chart.JFreeChart.INFO.contributors)
org.jfree.chart.JFreeChart.INFO.contributors[] == orig(org.jfree.chart.JFreeChart.INFO.contributors[])
org.jfree.chart.JFreeChart.INFO.contributors.getClass().getName() == orig(org.jfree.chart.JFreeChart.INFO.contributors.getClass().getName())
org.jfree.chart.JFreeChart.INFO.copyright == orig(org.jfree.chart.JFreeChart.INFO.copyright)
org.jfree.chart.JFreeChart.INFO.copyright.toString == orig(org.jfree.chart.JFreeChart.INFO.copyright.toString)
org.jfree.chart.JFreeChart.INFO.libraries == orig(org.jfree.chart.JFreeChart.INFO.libraries)
org.jfree.chart.JFreeChart.INFO.libraries[] == orig(org.jfree.chart.JFreeChart.INFO.libraries[])
org.jfree.chart.JFreeChart.INFO.libraries.getClass().getName() == orig(org.jfree.chart.JFreeChart.INFO.libraries.getClass().getName())
org.jfree.chart.JFreeChart.INFO.optionalLibraries == orig(org.jfree.chart.JFreeChart.INFO.optionalLibraries)
org.jfree.chart.JFreeChart.INFO.optionalLibraries[] == orig(org.jfree.chart.JFreeChart.INFO.optionalLibraries[])
org.jfree.chart.JFreeChart.INFO.optionalLibraries.getClass().getName() == orig(org.jfree.chart.JFreeChart.INFO.optionalLibraries.getClass().getName())
org.jfree.chart.JFreeChart.INFO.name == orig(org.jfree.chart.JFreeChart.INFO.name)
org.jfree.chart.JFreeChart.INFO.name.toString == orig(org.jfree.chart.JFreeChart.INFO.name.toString)
org.jfree.chart.JFreeChart.INFO.version == orig(org.jfree.chart.JFreeChart.INFO.version)
org.jfree.chart.JFreeChart.INFO.version.toString == orig(org.jfree.chart.JFreeChart.INFO.version.toString)
org.jfree.chart.JFreeChart.INFO.licenceName == orig(org.jfree.chart.JFreeChart.INFO.licenceName)
org.jfree.chart.JFreeChart.INFO.licenceName.toString == orig(org.jfree.chart.JFreeChart.INFO.licenceName.toString)
org.jfree.chart.JFreeChart.INFO.info == orig(org.jfree.chart.JFreeChart.INFO.info)
org.jfree.chart.JFreeChart.INFO.info.toString == orig(org.jfree.chart.JFreeChart.INFO.info.toString)
org.jfree.chart.JFreeChart.DEFAULT_TITLE_FONT == orig(org.jfree.chart.JFreeChart.DEFAULT_TITLE_FONT)
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT == orig(org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT)
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName() == orig(org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_IMAGE == orig(org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_IMAGE)
this.renderingHints == orig(this.renderingHints)
this.borderVisible == orig(this.borderVisible)
this.borderStroke == orig(this.borderStroke)
this.borderStroke.getClass().getName() == orig(this.borderStroke.getClass().getName())
this.borderPaint == orig(this.borderPaint)
this.borderPaint.getClass().getName() == orig(this.borderPaint.getClass().getName())
this.padding == orig(this.padding)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.padding.unitType == orig(this.padding.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.title == orig(this.title)
org.jfree.chart.title.TextTitle.DEFAULT_FONT == orig(org.jfree.chart.title.TextTitle.DEFAULT_FONT)
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT == orig(org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT)
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT.getClass().getName() == orig(org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT.getClass().getName())
this.title.text == orig(this.title.text)
this.title.text.toString == orig(this.title.text.toString)
this.title.font == orig(this.title.font)
this.title.textAlignment == orig(this.title.textAlignment)
org.jfree.chart.util.HorizontalAlignment.LEFT == orig(org.jfree.chart.util.HorizontalAlignment.LEFT)
org.jfree.chart.util.HorizontalAlignment.RIGHT == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT)
org.jfree.chart.util.HorizontalAlignment.CENTER == orig(org.jfree.chart.util.HorizontalAlignment.CENTER)
this.title.textAlignment.name == orig(this.title.textAlignment.name)
this.title.textAlignment.name.toString == orig(this.title.textAlignment.name.toString)
this.title.paint == orig(this.title.paint)
this.title.paint.getClass().getName() == orig(this.title.paint.getClass().getName())
this.title.backgroundPaint == orig(this.title.backgroundPaint)
this.title.toolTipText == orig(this.title.toolTipText)
this.title.urlText == orig(this.title.urlText)
this.title.content == orig(this.title.content)
this.title.content.lines == orig(this.title.content.lines)
this.title.content.lines[] == orig(this.title.content.lines[])
this.title.content.lines.getClass().getName() == orig(this.title.content.lines.getClass().getName())
this.title.content.lineAlignment == orig(this.title.content.lineAlignment)
this.title.expandToFitSpace == orig(this.title.expandToFitSpace)
org.jfree.chart.title.Title.DEFAULT_POSITION == orig(org.jfree.chart.title.Title.DEFAULT_POSITION)
org.jfree.chart.util.RectangleEdge.TOP == orig(org.jfree.chart.util.RectangleEdge.TOP)
org.jfree.chart.util.RectangleEdge.BOTTOM == orig(org.jfree.chart.util.RectangleEdge.BOTTOM)
org.jfree.chart.util.RectangleEdge.LEFT == orig(org.jfree.chart.util.RectangleEdge.LEFT)
org.jfree.chart.util.RectangleEdge.RIGHT == orig(org.jfree.chart.util.RectangleEdge.RIGHT)
org.jfree.chart.title.Title.DEFAULT_POSITION.name == orig(org.jfree.chart.title.Title.DEFAULT_POSITION.name)
org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT)
org.jfree.chart.util.VerticalAlignment.TOP == orig(org.jfree.chart.util.VerticalAlignment.TOP)
org.jfree.chart.util.VerticalAlignment.BOTTOM == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM)
org.jfree.chart.util.VerticalAlignment.CENTER == orig(org.jfree.chart.util.VerticalAlignment.CENTER)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString)
org.jfree.chart.title.Title.DEFAULT_PADDING == orig(org.jfree.chart.title.Title.DEFAULT_PADDING)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType)
org.jfree.chart.title.Title.DEFAULT_PADDING.top == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.top)
org.jfree.chart.title.Title.DEFAULT_PADDING.left == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.left)
org.jfree.chart.title.Title.DEFAULT_PADDING.bottom == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.bottom)
org.jfree.chart.title.Title.DEFAULT_PADDING.right == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.right)
this.title.position == orig(this.title.position)
this.title.position.name == orig(this.title.position.name)
this.title.position.name.toString == orig(this.title.position.name.toString)
this.title.horizontalAlignment == orig(this.title.horizontalAlignment)
this.title.horizontalAlignment.name == orig(this.title.horizontalAlignment.name)
this.title.horizontalAlignment.name.toString == orig(this.title.horizontalAlignment.name.toString)
this.title.verticalAlignment == orig(this.title.verticalAlignment)
this.title.verticalAlignment.name == orig(this.title.verticalAlignment.name)
this.title.verticalAlignment.name.toString == orig(this.title.verticalAlignment.name.toString)
this.title.listenerList == orig(this.title.listenerList)
this.title.notify == orig(this.title.notify)
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener == orig(org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener)
this.title.id == orig(this.title.id)
this.title.margin == orig(this.title.margin)
this.title.margin.unitType == orig(this.title.margin.unitType)
this.title.margin.top == orig(this.title.margin.top)
this.title.margin.left == orig(this.title.margin.left)
this.title.margin.bottom == orig(this.title.margin.bottom)
this.title.margin.right == orig(this.title.margin.right)
this.title.frame == orig(this.title.frame)
this.title.frame.getClass().getName() == orig(this.title.frame.getClass().getName())
this.title.padding == orig(this.title.padding)
this.title.padding.unitType == orig(this.title.padding.unitType)
this.title.padding.top == orig(this.title.padding.top)
this.title.padding.left == orig(this.title.padding.left)
this.title.padding.bottom == orig(this.title.padding.bottom)
this.title.padding.right == orig(this.title.padding.right)
this.title.width == orig(this.title.width)
this.title.height == orig(this.title.height)
this.title.bounds == orig(this.title.bounds)
this.title.bounds.getClass().getName() == orig(this.title.bounds.getClass().getName())
this.subtitles == orig(this.subtitles)
this.subtitles[] == orig(this.subtitles[])
this.subtitles.getClass().getName() == orig(this.subtitles.getClass().getName())
this.plot == orig(this.plot)
this.plot.getClass().getName() == orig(this.plot.getClass().getName())
org.jfree.chart.plot.Plot.ZERO == orig(org.jfree.chart.plot.Plot.ZERO)
org.jfree.chart.plot.Plot.ZERO.getClass().getName() == orig(org.jfree.chart.plot.Plot.ZERO.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_INSETS == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.top == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.top)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.left == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.left)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.right == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.right)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName())
this.plot.parent == orig(this.plot.parent)
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener == orig(org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener)
this.plot.datasetGroup == orig(this.plot.datasetGroup)
this.plot.noDataMessage == orig(this.plot.noDataMessage)
this.plot.noDataMessageFont == orig(this.plot.noDataMessageFont)
this.plot.noDataMessagePaint == orig(this.plot.noDataMessagePaint)
this.plot.noDataMessagePaint.getClass().getName() == orig(this.plot.noDataMessagePaint.getClass().getName())
this.plot.insets == orig(this.plot.insets)
this.plot.insets.unitType == orig(this.plot.insets.unitType)
this.plot.insets.top == orig(this.plot.insets.top)
this.plot.insets.left == orig(this.plot.insets.left)
this.plot.insets.bottom == orig(this.plot.insets.bottom)
this.plot.insets.right == orig(this.plot.insets.right)
this.plot.outlineVisible == orig(this.plot.outlineVisible)
this.plot.outlineStroke == orig(this.plot.outlineStroke)
this.plot.outlineStroke.getClass().getName() == orig(this.plot.outlineStroke.getClass().getName())
this.plot.outlinePaint == orig(this.plot.outlinePaint)
this.plot.outlinePaint.getClass().getName() == orig(this.plot.outlinePaint.getClass().getName())
this.plot.backgroundPaint == orig(this.plot.backgroundPaint)
this.plot.backgroundPaint.getClass().getName() == orig(this.plot.backgroundPaint.getClass().getName())
this.plot.backgroundImage == orig(this.plot.backgroundImage)
this.plot.backgroundImageAlignment == orig(this.plot.backgroundImageAlignment)
this.plot.backgroundImageAlpha == orig(this.plot.backgroundImageAlpha)
this.plot.foregroundAlpha == orig(this.plot.foregroundAlpha)
this.plot.backgroundAlpha == orig(this.plot.backgroundAlpha)
this.plot.drawingSupplier == orig(this.plot.drawingSupplier)
this.plot.drawingSupplier.getClass().getName() == orig(this.plot.drawingSupplier.getClass().getName())
this.plot.listenerList == orig(this.plot.listenerList)
this.backgroundPaint == orig(this.backgroundPaint)
this.backgroundPaint.getClass().getName() == orig(this.backgroundPaint.getClass().getName())
this.backgroundImage == orig(this.backgroundImage)
this.backgroundImageAlignment == orig(this.backgroundImageAlignment)
this.backgroundImageAlpha == orig(this.backgroundImageAlpha)
this.changeListeners == orig(this.changeListeners)
this.progressListeners == orig(this.progressListeners)
this.notify == orig(this.notify)
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartChangeListener == orig(org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartChangeListener)
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartProgressListener == orig(org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartProgressListener)
event.type == orig(event.type)
org.jfree.chart.event.ChartChangeEventType.GENERAL == orig(org.jfree.chart.event.ChartChangeEventType.GENERAL)
org.jfree.chart.event.ChartChangeEventType.NEW_DATASET == orig(org.jfree.chart.event.ChartChangeEventType.NEW_DATASET)
org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED == orig(org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED)
event.type.name == orig(event.type.name)
event.type.name.toString == orig(event.type.name.toString)
event.chart == orig(event.chart)
event.chart.renderingHints == orig(event.chart.renderingHints)
event.chart.borderVisible == orig(event.chart.borderVisible)
event.chart.borderStroke == orig(event.chart.borderStroke)
event.chart.borderStroke.getClass().getName() == orig(event.chart.borderStroke.getClass().getName())
event.chart.borderPaint == orig(event.chart.borderPaint)
event.chart.borderPaint.getClass().getName() == orig(event.chart.borderPaint.getClass().getName())
event.chart.padding == orig(event.chart.padding)
event.chart.title == orig(event.chart.title)
event.chart.subtitles == orig(event.chart.subtitles)
event.chart.subtitles[] == orig(event.chart.subtitles[])
event.chart.subtitles.getClass().getName() == orig(event.chart.subtitles.getClass().getName())
event.chart.plot == orig(event.chart.plot)
event.chart.plot.getClass().getName() == orig(event.chart.plot.getClass().getName())
event.chart.backgroundPaint == orig(event.chart.backgroundPaint)
event.chart.backgroundPaint.getClass().getName() == orig(event.chart.backgroundPaint.getClass().getName())
event.chart.backgroundImage == orig(event.chart.backgroundImage)
event.chart.backgroundImageAlignment == orig(event.chart.backgroundImageAlignment)
event.chart.backgroundImageAlpha == orig(event.chart.backgroundImageAlpha)
event.chart.changeListeners == orig(event.chart.changeListeners)
event.chart.progressListeners == orig(event.chart.progressListeners)
event.chart.notify == orig(event.chart.notify)
event.type has only one value
org.jfree.chart.event.ChartChangeEventType.GENERAL has only one value
org.jfree.chart.event.ChartChangeEventType.NEW_DATASET has only one value
org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED has only one value
event.type.name has only one value
event.type.name.toString == "ChartChangeEventType.GENERAL"
event.chart.renderingHints has only one value
event.chart.borderVisible == false
event.chart.borderStroke has only one value
event.chart.borderStroke.getClass().getName() == java.awt.BasicStroke.class
event.chart.borderPaint has only one value
event.chart.borderPaint.getClass().getName() == java.awt.Color.class
event.chart.padding has only one value
event.chart.title has only one value
event.chart.subtitles has only one value
event.chart.subtitles[] contains no nulls and has only one value, of length 1
event.chart.subtitles[] elements has only one value
event.chart.subtitles[].getClass().getName() == [org.jfree.chart.title.LegendTitle]
event.chart.subtitles[].getClass().getName() elements == org.jfree.chart.title.LegendTitle.class
event.chart.subtitles.getClass().getName() == java.util.ArrayList.class
event.chart.plot has only one value
event.chart.plot.getClass().getName() == org.jfree.chart.plot.PiePlot.class
event.chart.backgroundPaint has only one value
event.chart.backgroundPaint.getClass().getName() == java.awt.Color.class
event.chart.backgroundImage == null
event.chart.backgroundImageAlignment == 15
event.chart.backgroundImageAlpha == 0.5
event.chart.changeListeners has only one value
event.chart.progressListeners has only one value
event.chart.notify == true
size(event.chart.subtitles[]) == 1
===========================================================================
org.jfree.chart.JFreeChart.notifyListeners(org.jfree.chart.event.ChartProgressEvent):::ENTER
event.type one of { 1, 2 }
event.percent == 0
event.chart.borderVisible == false
event.chart.borderStroke.getClass().getName() == java.awt.BasicStroke.class
event.chart.borderPaint has only one value
event.chart.borderPaint.getClass().getName() == java.awt.Color.class
event.chart.padding has only one value
event.chart.subtitles[].getClass().getName() == [org.jfree.chart.title.LegendTitle]
event.chart.subtitles[].getClass().getName() elements == org.jfree.chart.title.LegendTitle.class
event.chart.subtitles.getClass().getName() == java.util.ArrayList.class
event.chart.backgroundPaint has only one value
event.chart.backgroundPaint.getClass().getName() == java.awt.Color.class
event.chart.backgroundImage == null
event.chart.backgroundImageAlignment == 15
event.chart.backgroundImageAlpha == 0.5
event.chart.notify == true
size(event.chart.subtitles[]) == 1
===========================================================================
org.jfree.chart.JFreeChart.notifyListeners(org.jfree.chart.event.ChartProgressEvent):::EXIT
org.jfree.chart.JFreeChart.INFO == orig(org.jfree.chart.JFreeChart.INFO)
org.jfree.chart.JFreeChart.INFO.logo == orig(org.jfree.chart.JFreeChart.INFO.logo)
org.jfree.chart.JFreeChart.INFO.licenceText == orig(org.jfree.chart.JFreeChart.INFO.licenceText)
org.jfree.chart.JFreeChart.INFO.licenceText.toString == orig(org.jfree.chart.JFreeChart.INFO.licenceText.toString)
org.jfree.chart.JFreeChart.INFO.contributors == orig(org.jfree.chart.JFreeChart.INFO.contributors)
org.jfree.chart.JFreeChart.INFO.contributors[] == orig(org.jfree.chart.JFreeChart.INFO.contributors[])
org.jfree.chart.JFreeChart.INFO.contributors.getClass().getName() == orig(org.jfree.chart.JFreeChart.INFO.contributors.getClass().getName())
org.jfree.chart.JFreeChart.INFO.copyright == orig(org.jfree.chart.JFreeChart.INFO.copyright)
org.jfree.chart.JFreeChart.INFO.copyright.toString == orig(org.jfree.chart.JFreeChart.INFO.copyright.toString)
org.jfree.chart.JFreeChart.INFO.libraries == orig(org.jfree.chart.JFreeChart.INFO.libraries)
org.jfree.chart.JFreeChart.INFO.libraries[] == orig(org.jfree.chart.JFreeChart.INFO.libraries[])
org.jfree.chart.JFreeChart.INFO.libraries.getClass().getName() == orig(org.jfree.chart.JFreeChart.INFO.libraries.getClass().getName())
org.jfree.chart.JFreeChart.INFO.optionalLibraries == orig(org.jfree.chart.JFreeChart.INFO.optionalLibraries)
org.jfree.chart.JFreeChart.INFO.optionalLibraries[] == orig(org.jfree.chart.JFreeChart.INFO.optionalLibraries[])
org.jfree.chart.JFreeChart.INFO.optionalLibraries.getClass().getName() == orig(org.jfree.chart.JFreeChart.INFO.optionalLibraries.getClass().getName())
org.jfree.chart.JFreeChart.INFO.name == orig(org.jfree.chart.JFreeChart.INFO.name)
org.jfree.chart.JFreeChart.INFO.name.toString == orig(org.jfree.chart.JFreeChart.INFO.name.toString)
org.jfree.chart.JFreeChart.INFO.version == orig(org.jfree.chart.JFreeChart.INFO.version)
org.jfree.chart.JFreeChart.INFO.version.toString == orig(org.jfree.chart.JFreeChart.INFO.version.toString)
org.jfree.chart.JFreeChart.INFO.licenceName == orig(org.jfree.chart.JFreeChart.INFO.licenceName)
org.jfree.chart.JFreeChart.INFO.licenceName.toString == orig(org.jfree.chart.JFreeChart.INFO.licenceName.toString)
org.jfree.chart.JFreeChart.INFO.info == orig(org.jfree.chart.JFreeChart.INFO.info)
org.jfree.chart.JFreeChart.INFO.info.toString == orig(org.jfree.chart.JFreeChart.INFO.info.toString)
org.jfree.chart.JFreeChart.DEFAULT_TITLE_FONT == orig(org.jfree.chart.JFreeChart.DEFAULT_TITLE_FONT)
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT == orig(org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT)
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName() == orig(org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_IMAGE == orig(org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_IMAGE)
this.renderingHints == orig(this.renderingHints)
this.borderVisible == orig(this.borderVisible)
this.borderStroke == orig(this.borderStroke)
this.borderStroke.getClass().getName() == orig(this.borderStroke.getClass().getName())
this.borderPaint == orig(this.borderPaint)
this.borderPaint.getClass().getName() == orig(this.borderPaint.getClass().getName())
this.padding == orig(this.padding)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.padding.unitType == orig(this.padding.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.title == orig(this.title)
org.jfree.chart.title.TextTitle.DEFAULT_FONT == orig(org.jfree.chart.title.TextTitle.DEFAULT_FONT)
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT == orig(org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT)
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT.getClass().getName() == orig(org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT.getClass().getName())
this.title.text == orig(this.title.text)
this.title.text.toString == orig(this.title.text.toString)
this.title.font == orig(this.title.font)
this.title.textAlignment == orig(this.title.textAlignment)
org.jfree.chart.util.HorizontalAlignment.LEFT == orig(org.jfree.chart.util.HorizontalAlignment.LEFT)
org.jfree.chart.util.HorizontalAlignment.RIGHT == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT)
org.jfree.chart.util.HorizontalAlignment.CENTER == orig(org.jfree.chart.util.HorizontalAlignment.CENTER)
this.title.textAlignment.name == orig(this.title.textAlignment.name)
this.title.textAlignment.name.toString == orig(this.title.textAlignment.name.toString)
this.title.paint == orig(this.title.paint)
this.title.paint.getClass().getName() == orig(this.title.paint.getClass().getName())
this.title.backgroundPaint == orig(this.title.backgroundPaint)
this.title.toolTipText == orig(this.title.toolTipText)
this.title.urlText == orig(this.title.urlText)
this.title.content == orig(this.title.content)
this.title.content.lines == orig(this.title.content.lines)
this.title.content.lines[] == orig(this.title.content.lines[])
this.title.content.lines.getClass().getName() == orig(this.title.content.lines.getClass().getName())
this.title.content.lineAlignment == orig(this.title.content.lineAlignment)
this.title.expandToFitSpace == orig(this.title.expandToFitSpace)
org.jfree.chart.title.Title.DEFAULT_POSITION == orig(org.jfree.chart.title.Title.DEFAULT_POSITION)
org.jfree.chart.util.RectangleEdge.TOP == orig(org.jfree.chart.util.RectangleEdge.TOP)
org.jfree.chart.util.RectangleEdge.BOTTOM == orig(org.jfree.chart.util.RectangleEdge.BOTTOM)
org.jfree.chart.util.RectangleEdge.LEFT == orig(org.jfree.chart.util.RectangleEdge.LEFT)
org.jfree.chart.util.RectangleEdge.RIGHT == orig(org.jfree.chart.util.RectangleEdge.RIGHT)
org.jfree.chart.title.Title.DEFAULT_POSITION.name == orig(org.jfree.chart.title.Title.DEFAULT_POSITION.name)
org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT)
org.jfree.chart.util.VerticalAlignment.TOP == orig(org.jfree.chart.util.VerticalAlignment.TOP)
org.jfree.chart.util.VerticalAlignment.BOTTOM == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM)
org.jfree.chart.util.VerticalAlignment.CENTER == orig(org.jfree.chart.util.VerticalAlignment.CENTER)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString)
org.jfree.chart.title.Title.DEFAULT_PADDING == orig(org.jfree.chart.title.Title.DEFAULT_PADDING)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType)
org.jfree.chart.title.Title.DEFAULT_PADDING.top == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.top)
org.jfree.chart.title.Title.DEFAULT_PADDING.left == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.left)
org.jfree.chart.title.Title.DEFAULT_PADDING.bottom == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.bottom)
org.jfree.chart.title.Title.DEFAULT_PADDING.right == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.right)
this.title.position == orig(this.title.position)
this.title.position.name == orig(this.title.position.name)
this.title.position.name.toString == orig(this.title.position.name.toString)
this.title.horizontalAlignment == orig(this.title.horizontalAlignment)
this.title.horizontalAlignment.name == orig(this.title.horizontalAlignment.name)
this.title.horizontalAlignment.name.toString == orig(this.title.horizontalAlignment.name.toString)
this.title.verticalAlignment == orig(this.title.verticalAlignment)
this.title.verticalAlignment.name == orig(this.title.verticalAlignment.name)
this.title.verticalAlignment.name.toString == orig(this.title.verticalAlignment.name.toString)
this.title.listenerList == orig(this.title.listenerList)
this.title.notify == orig(this.title.notify)
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener == orig(org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener)
this.title.id == orig(this.title.id)
this.title.margin == orig(this.title.margin)
this.title.margin.unitType == orig(this.title.margin.unitType)
this.title.margin.top == orig(this.title.margin.top)
this.title.margin.left == orig(this.title.margin.left)
this.title.margin.bottom == orig(this.title.margin.bottom)
this.title.margin.right == orig(this.title.margin.right)
this.title.frame == orig(this.title.frame)
this.title.frame.getClass().getName() == orig(this.title.frame.getClass().getName())
this.title.padding == orig(this.title.padding)
this.title.padding.unitType == orig(this.title.padding.unitType)
this.title.padding.top == orig(this.title.padding.top)
this.title.padding.left == orig(this.title.padding.left)
this.title.padding.bottom == orig(this.title.padding.bottom)
this.title.padding.right == orig(this.title.padding.right)
this.title.width == orig(this.title.width)
this.title.height == orig(this.title.height)
this.title.bounds == orig(this.title.bounds)
this.title.bounds.getClass().getName() == orig(this.title.bounds.getClass().getName())
this.subtitles == orig(this.subtitles)
this.subtitles[] == orig(this.subtitles[])
this.subtitles.getClass().getName() == orig(this.subtitles.getClass().getName())
this.plot == orig(this.plot)
this.plot.getClass().getName() == orig(this.plot.getClass().getName())
org.jfree.chart.plot.Plot.ZERO == orig(org.jfree.chart.plot.Plot.ZERO)
org.jfree.chart.plot.Plot.ZERO.getClass().getName() == orig(org.jfree.chart.plot.Plot.ZERO.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_INSETS == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.top == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.top)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.left == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.left)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.right == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.right)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName())
this.plot.parent == orig(this.plot.parent)
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener == orig(org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener)
this.plot.datasetGroup == orig(this.plot.datasetGroup)
this.plot.noDataMessage == orig(this.plot.noDataMessage)
this.plot.noDataMessageFont == orig(this.plot.noDataMessageFont)
this.plot.noDataMessagePaint == orig(this.plot.noDataMessagePaint)
this.plot.noDataMessagePaint.getClass().getName() == orig(this.plot.noDataMessagePaint.getClass().getName())
this.plot.insets == orig(this.plot.insets)
this.plot.insets.unitType == orig(this.plot.insets.unitType)
this.plot.insets.top == orig(this.plot.insets.top)
this.plot.insets.left == orig(this.plot.insets.left)
this.plot.insets.bottom == orig(this.plot.insets.bottom)
this.plot.insets.right == orig(this.plot.insets.right)
this.plot.outlineVisible == orig(this.plot.outlineVisible)
this.plot.outlineStroke == orig(this.plot.outlineStroke)
this.plot.outlineStroke.getClass().getName() == orig(this.plot.outlineStroke.getClass().getName())
this.plot.outlinePaint == orig(this.plot.outlinePaint)
this.plot.outlinePaint.getClass().getName() == orig(this.plot.outlinePaint.getClass().getName())
this.plot.backgroundPaint == orig(this.plot.backgroundPaint)
this.plot.backgroundPaint.getClass().getName() == orig(this.plot.backgroundPaint.getClass().getName())
this.plot.backgroundImage == orig(this.plot.backgroundImage)
this.plot.backgroundImageAlignment == orig(this.plot.backgroundImageAlignment)
this.plot.backgroundImageAlpha == orig(this.plot.backgroundImageAlpha)
this.plot.foregroundAlpha == orig(this.plot.foregroundAlpha)
this.plot.backgroundAlpha == orig(this.plot.backgroundAlpha)
this.plot.drawingSupplier == orig(this.plot.drawingSupplier)
this.plot.drawingSupplier.getClass().getName() == orig(this.plot.drawingSupplier.getClass().getName())
this.plot.listenerList == orig(this.plot.listenerList)
this.backgroundPaint == orig(this.backgroundPaint)
this.backgroundPaint.getClass().getName() == orig(this.backgroundPaint.getClass().getName())
this.backgroundImage == orig(this.backgroundImage)
this.backgroundImageAlignment == orig(this.backgroundImageAlignment)
this.backgroundImageAlpha == orig(this.backgroundImageAlpha)
this.changeListeners == orig(this.changeListeners)
this.progressListeners == orig(this.progressListeners)
this.notify == orig(this.notify)
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartChangeListener == orig(org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartChangeListener)
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartProgressListener == orig(org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartProgressListener)
event.type == orig(event.type)
event.percent == orig(event.percent)
event.chart == orig(event.chart)
event.chart.renderingHints == orig(event.chart.renderingHints)
event.chart.borderVisible == orig(event.chart.borderVisible)
event.chart.borderStroke == orig(event.chart.borderStroke)
event.chart.borderStroke.getClass().getName() == orig(event.chart.borderStroke.getClass().getName())
event.chart.borderPaint == orig(event.chart.borderPaint)
event.chart.borderPaint.getClass().getName() == orig(event.chart.borderPaint.getClass().getName())
event.chart.padding == orig(event.chart.padding)
event.chart.title == orig(event.chart.title)
event.chart.subtitles == orig(event.chart.subtitles)
event.chart.subtitles[] == orig(event.chart.subtitles[])
event.chart.subtitles.getClass().getName() == orig(event.chart.subtitles.getClass().getName())
event.chart.plot == orig(event.chart.plot)
event.chart.plot.getClass().getName() == orig(event.chart.plot.getClass().getName())
event.chart.backgroundPaint == orig(event.chart.backgroundPaint)
event.chart.backgroundPaint.getClass().getName() == orig(event.chart.backgroundPaint.getClass().getName())
event.chart.backgroundImage == orig(event.chart.backgroundImage)
event.chart.backgroundImageAlignment == orig(event.chart.backgroundImageAlignment)
event.chart.backgroundImageAlpha == orig(event.chart.backgroundImageAlpha)
event.chart.changeListeners == orig(event.chart.changeListeners)
event.chart.progressListeners == orig(event.chart.progressListeners)
event.chart.notify == orig(event.chart.notify)
event.type one of { 1, 2 }
event.percent == 0
event.chart.borderVisible == false
event.chart.borderStroke.getClass().getName() == java.awt.BasicStroke.class
event.chart.borderPaint has only one value
event.chart.borderPaint.getClass().getName() == java.awt.Color.class
event.chart.padding has only one value
event.chart.subtitles[].getClass().getName() == [org.jfree.chart.title.LegendTitle]
event.chart.subtitles[].getClass().getName() elements == org.jfree.chart.title.LegendTitle.class
event.chart.subtitles.getClass().getName() == java.util.ArrayList.class
event.chart.backgroundPaint has only one value
event.chart.backgroundPaint.getClass().getName() == java.awt.Color.class
event.chart.backgroundImage == null
event.chart.backgroundImageAlignment == 15
event.chart.backgroundImageAlpha == 0.5
event.chart.notify == true
size(event.chart.subtitles[]) == 1
===========================================================================
org.jfree.chart.JFreeChart.plotChanged(org.jfree.chart.event.PlotChangeEvent):::ENTER
this has only one value
this.renderingHints has only one value
this.borderStroke has only one value
this.title has only one value
this.title.text has only one value
this.title.text.toString == "Test"
this.title.content == null
this.title.listenerList has only one value
this.title.bounds has only one value
this.subtitles has only one value
this.subtitles[] contains no nulls and has only one value, of length 1
this.subtitles[] elements has only one value
this.plot has only one value
this.plot.getClass().getName() == org.jfree.chart.plot.PiePlot.class
this.plot.noDataMessageFont has only one value
this.plot.insets has only one value
this.plot.drawingSupplier has only one value
this.plot.listenerList has only one value
this.changeListeners has only one value
this.progressListeners has only one value
event has only one value
event.plot has only one value
event.plot.getClass().getName() == org.jfree.chart.plot.PiePlot.class
event.plot.parent == null
event.plot.datasetGroup == null
event.plot.noDataMessage == null
event.plot.noDataMessageFont has only one value
event.plot.noDataMessagePaint has only one value
event.plot.noDataMessagePaint.getClass().getName() == java.awt.Color.class
event.plot.insets has only one value
event.plot.outlineVisible == true
event.plot.outlineStroke has only one value
event.plot.outlineStroke.getClass().getName() == java.awt.BasicStroke.class
event.plot.outlinePaint has only one value
event.plot.outlinePaint.getClass().getName() == java.awt.Color.class
event.plot.backgroundPaint has only one value
event.plot.backgroundPaint.getClass().getName() == java.awt.Color.class
event.plot.backgroundImage == null
event.plot.backgroundImageAlignment == 15
event.plot.backgroundImageAlpha == 0.5
event.plot.foregroundAlpha == 1.0
event.plot.backgroundAlpha == 1.0
event.plot.drawingSupplier has only one value
event.plot.drawingSupplier.getClass().getName() == org.jfree.chart.plot.DefaultDrawingSupplier.class
event.plot.listenerList has only one value
event.type has only one value
org.jfree.chart.event.ChartChangeEventType.GENERAL has only one value
org.jfree.chart.event.ChartChangeEventType.NEW_DATASET has only one value
org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED has only one value
event.type.name has only one value
event.type.name.toString == "ChartChangeEventType.GENERAL"
event.chart == null
===========================================================================
org.jfree.chart.JFreeChart.plotChanged(org.jfree.chart.event.PlotChangeEvent):::EXIT
org.jfree.chart.JFreeChart.INFO == orig(org.jfree.chart.JFreeChart.INFO)
org.jfree.chart.JFreeChart.INFO.logo == orig(org.jfree.chart.JFreeChart.INFO.logo)
org.jfree.chart.JFreeChart.INFO.licenceText == orig(org.jfree.chart.JFreeChart.INFO.licenceText)
org.jfree.chart.JFreeChart.INFO.licenceText.toString == orig(org.jfree.chart.JFreeChart.INFO.licenceText.toString)
org.jfree.chart.JFreeChart.INFO.contributors == orig(org.jfree.chart.JFreeChart.INFO.contributors)
org.jfree.chart.JFreeChart.INFO.contributors[] == orig(org.jfree.chart.JFreeChart.INFO.contributors[])
org.jfree.chart.JFreeChart.INFO.contributors.getClass().getName() == orig(org.jfree.chart.JFreeChart.INFO.contributors.getClass().getName())
org.jfree.chart.JFreeChart.INFO.copyright == orig(org.jfree.chart.JFreeChart.INFO.copyright)
org.jfree.chart.JFreeChart.INFO.copyright.toString == orig(org.jfree.chart.JFreeChart.INFO.copyright.toString)
org.jfree.chart.JFreeChart.INFO.libraries == orig(org.jfree.chart.JFreeChart.INFO.libraries)
org.jfree.chart.JFreeChart.INFO.libraries[] == orig(org.jfree.chart.JFreeChart.INFO.libraries[])
org.jfree.chart.JFreeChart.INFO.libraries.getClass().getName() == orig(org.jfree.chart.JFreeChart.INFO.libraries.getClass().getName())
org.jfree.chart.JFreeChart.INFO.optionalLibraries == orig(org.jfree.chart.JFreeChart.INFO.optionalLibraries)
org.jfree.chart.JFreeChart.INFO.optionalLibraries[] == orig(org.jfree.chart.JFreeChart.INFO.optionalLibraries[])
org.jfree.chart.JFreeChart.INFO.optionalLibraries.getClass().getName() == orig(org.jfree.chart.JFreeChart.INFO.optionalLibraries.getClass().getName())
org.jfree.chart.JFreeChart.INFO.name == orig(org.jfree.chart.JFreeChart.INFO.name)
org.jfree.chart.JFreeChart.INFO.name.toString == orig(org.jfree.chart.JFreeChart.INFO.name.toString)
org.jfree.chart.JFreeChart.INFO.version == orig(org.jfree.chart.JFreeChart.INFO.version)
org.jfree.chart.JFreeChart.INFO.version.toString == orig(org.jfree.chart.JFreeChart.INFO.version.toString)
org.jfree.chart.JFreeChart.INFO.licenceName == orig(org.jfree.chart.JFreeChart.INFO.licenceName)
org.jfree.chart.JFreeChart.INFO.licenceName.toString == orig(org.jfree.chart.JFreeChart.INFO.licenceName.toString)
org.jfree.chart.JFreeChart.INFO.info == orig(org.jfree.chart.JFreeChart.INFO.info)
org.jfree.chart.JFreeChart.INFO.info.toString == orig(org.jfree.chart.JFreeChart.INFO.info.toString)
org.jfree.chart.JFreeChart.DEFAULT_TITLE_FONT == orig(org.jfree.chart.JFreeChart.DEFAULT_TITLE_FONT)
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT == orig(org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT)
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName() == orig(org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_IMAGE == orig(org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_IMAGE)
this.renderingHints == orig(this.renderingHints)
this.borderVisible == orig(this.borderVisible)
this.borderStroke == orig(this.borderStroke)
this.borderStroke.getClass().getName() == orig(this.borderStroke.getClass().getName())
this.borderPaint == orig(this.borderPaint)
this.borderPaint.getClass().getName() == orig(this.borderPaint.getClass().getName())
this.padding == orig(this.padding)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.padding.unitType == orig(this.padding.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.title == orig(this.title)
org.jfree.chart.title.TextTitle.DEFAULT_FONT == orig(org.jfree.chart.title.TextTitle.DEFAULT_FONT)
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT == orig(org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT)
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT.getClass().getName() == orig(org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT.getClass().getName())
this.title.text == orig(this.title.text)
this.title.text.toString == orig(this.title.text.toString)
this.title.font == orig(this.title.font)
this.title.textAlignment == orig(this.title.textAlignment)
org.jfree.chart.util.HorizontalAlignment.LEFT == orig(org.jfree.chart.util.HorizontalAlignment.LEFT)
org.jfree.chart.util.HorizontalAlignment.RIGHT == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT)
org.jfree.chart.util.HorizontalAlignment.CENTER == orig(org.jfree.chart.util.HorizontalAlignment.CENTER)
this.title.textAlignment.name == orig(this.title.textAlignment.name)
this.title.textAlignment.name.toString == orig(this.title.textAlignment.name.toString)
this.title.paint == orig(this.title.paint)
this.title.paint.getClass().getName() == orig(this.title.paint.getClass().getName())
this.title.backgroundPaint == orig(this.title.backgroundPaint)
this.title.toolTipText == orig(this.title.toolTipText)
this.title.urlText == orig(this.title.urlText)
this.title.content == orig(this.title.content)
this.title.expandToFitSpace == orig(this.title.expandToFitSpace)
org.jfree.chart.title.Title.DEFAULT_POSITION == orig(org.jfree.chart.title.Title.DEFAULT_POSITION)
org.jfree.chart.util.RectangleEdge.TOP == orig(org.jfree.chart.util.RectangleEdge.TOP)
org.jfree.chart.util.RectangleEdge.BOTTOM == orig(org.jfree.chart.util.RectangleEdge.BOTTOM)
org.jfree.chart.util.RectangleEdge.LEFT == orig(org.jfree.chart.util.RectangleEdge.LEFT)
org.jfree.chart.util.RectangleEdge.RIGHT == orig(org.jfree.chart.util.RectangleEdge.RIGHT)
org.jfree.chart.title.Title.DEFAULT_POSITION.name == orig(org.jfree.chart.title.Title.DEFAULT_POSITION.name)
org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT)
org.jfree.chart.util.VerticalAlignment.TOP == orig(org.jfree.chart.util.VerticalAlignment.TOP)
org.jfree.chart.util.VerticalAlignment.BOTTOM == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM)
org.jfree.chart.util.VerticalAlignment.CENTER == orig(org.jfree.chart.util.VerticalAlignment.CENTER)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString)
org.jfree.chart.title.Title.DEFAULT_PADDING == orig(org.jfree.chart.title.Title.DEFAULT_PADDING)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType)
org.jfree.chart.title.Title.DEFAULT_PADDING.top == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.top)
org.jfree.chart.title.Title.DEFAULT_PADDING.left == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.left)
org.jfree.chart.title.Title.DEFAULT_PADDING.bottom == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.bottom)
org.jfree.chart.title.Title.DEFAULT_PADDING.right == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.right)
this.title.position == orig(this.title.position)
this.title.position.name == orig(this.title.position.name)
this.title.position.name.toString == orig(this.title.position.name.toString)
this.title.horizontalAlignment == orig(this.title.horizontalAlignment)
this.title.horizontalAlignment.name == orig(this.title.horizontalAlignment.name)
this.title.horizontalAlignment.name.toString == orig(this.title.horizontalAlignment.name.toString)
this.title.verticalAlignment == orig(this.title.verticalAlignment)
this.title.verticalAlignment.name == orig(this.title.verticalAlignment.name)
this.title.verticalAlignment.name.toString == orig(this.title.verticalAlignment.name.toString)
this.title.listenerList == orig(this.title.listenerList)
this.title.notify == orig(this.title.notify)
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener == orig(org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener)
this.title.id == orig(this.title.id)
this.title.margin == orig(this.title.margin)
this.title.margin.unitType == orig(this.title.margin.unitType)
this.title.margin.top == orig(this.title.margin.top)
this.title.margin.left == orig(this.title.margin.left)
this.title.margin.bottom == orig(this.title.margin.bottom)
this.title.margin.right == orig(this.title.margin.right)
this.title.frame == orig(this.title.frame)
this.title.frame.getClass().getName() == orig(this.title.frame.getClass().getName())
this.title.padding == orig(this.title.padding)
this.title.padding.unitType == orig(this.title.padding.unitType)
this.title.padding.top == orig(this.title.padding.top)
this.title.padding.left == orig(this.title.padding.left)
this.title.padding.bottom == orig(this.title.padding.bottom)
this.title.padding.right == orig(this.title.padding.right)
this.title.width == orig(this.title.width)
this.title.height == orig(this.title.height)
this.title.bounds == orig(this.title.bounds)
this.title.bounds.getClass().getName() == orig(this.title.bounds.getClass().getName())
this.subtitles == orig(this.subtitles)
this.subtitles[] == orig(this.subtitles[])
this.subtitles.getClass().getName() == orig(this.subtitles.getClass().getName())
this.plot == orig(this.plot)
this.plot.getClass().getName() == orig(this.plot.getClass().getName())
org.jfree.chart.plot.Plot.ZERO == orig(org.jfree.chart.plot.Plot.ZERO)
org.jfree.chart.plot.Plot.ZERO.getClass().getName() == orig(org.jfree.chart.plot.Plot.ZERO.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_INSETS == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.top == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.top)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.left == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.left)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.right == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.right)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName())
this.plot.parent == orig(this.plot.parent)
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener == orig(org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener)
this.plot.datasetGroup == orig(this.plot.datasetGroup)
this.plot.noDataMessage == orig(this.plot.noDataMessage)
this.plot.noDataMessageFont == orig(this.plot.noDataMessageFont)
this.plot.noDataMessagePaint == orig(this.plot.noDataMessagePaint)
this.plot.noDataMessagePaint.getClass().getName() == orig(this.plot.noDataMessagePaint.getClass().getName())
this.plot.insets == orig(this.plot.insets)
this.plot.insets.unitType == orig(this.plot.insets.unitType)
this.plot.insets.top == orig(this.plot.insets.top)
this.plot.insets.left == orig(this.plot.insets.left)
this.plot.insets.bottom == orig(this.plot.insets.bottom)
this.plot.insets.right == orig(this.plot.insets.right)
this.plot.outlineVisible == orig(this.plot.outlineVisible)
this.plot.outlineStroke == orig(this.plot.outlineStroke)
this.plot.outlineStroke.getClass().getName() == orig(this.plot.outlineStroke.getClass().getName())
this.plot.outlinePaint == orig(this.plot.outlinePaint)
this.plot.outlinePaint.getClass().getName() == orig(this.plot.outlinePaint.getClass().getName())
this.plot.backgroundPaint == orig(this.plot.backgroundPaint)
this.plot.backgroundPaint.getClass().getName() == orig(this.plot.backgroundPaint.getClass().getName())
this.plot.backgroundImage == orig(this.plot.backgroundImage)
this.plot.backgroundImageAlignment == orig(this.plot.backgroundImageAlignment)
this.plot.backgroundImageAlpha == orig(this.plot.backgroundImageAlpha)
this.plot.foregroundAlpha == orig(this.plot.foregroundAlpha)
this.plot.backgroundAlpha == orig(this.plot.backgroundAlpha)
this.plot.drawingSupplier == orig(this.plot.drawingSupplier)
this.plot.drawingSupplier.getClass().getName() == orig(this.plot.drawingSupplier.getClass().getName())
this.plot.listenerList == orig(this.plot.listenerList)
this.backgroundPaint == orig(this.backgroundPaint)
this.backgroundPaint.getClass().getName() == orig(this.backgroundPaint.getClass().getName())
this.backgroundImage == orig(this.backgroundImage)
this.backgroundImageAlignment == orig(this.backgroundImageAlignment)
this.backgroundImageAlpha == orig(this.backgroundImageAlpha)
this.changeListeners == orig(this.changeListeners)
this.progressListeners == orig(this.progressListeners)
this.notify == orig(this.notify)
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartChangeListener == orig(org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartChangeListener)
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartProgressListener == orig(org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartProgressListener)
event.plot == orig(event.plot)
event.plot.getClass().getName() == orig(event.plot.getClass().getName())
event.plot.parent == orig(event.plot.parent)
event.plot.datasetGroup == orig(event.plot.datasetGroup)
event.plot.noDataMessage == orig(event.plot.noDataMessage)
event.plot.noDataMessageFont == orig(event.plot.noDataMessageFont)
event.plot.noDataMessagePaint == orig(event.plot.noDataMessagePaint)
event.plot.noDataMessagePaint.getClass().getName() == orig(event.plot.noDataMessagePaint.getClass().getName())
event.plot.insets == orig(event.plot.insets)
event.plot.outlineVisible == orig(event.plot.outlineVisible)
event.plot.outlineStroke == orig(event.plot.outlineStroke)
event.plot.outlineStroke.getClass().getName() == orig(event.plot.outlineStroke.getClass().getName())
event.plot.outlinePaint == orig(event.plot.outlinePaint)
event.plot.outlinePaint.getClass().getName() == orig(event.plot.outlinePaint.getClass().getName())
event.plot.backgroundPaint == orig(event.plot.backgroundPaint)
event.plot.backgroundPaint.getClass().getName() == orig(event.plot.backgroundPaint.getClass().getName())
event.plot.backgroundImage == orig(event.plot.backgroundImage)
event.plot.backgroundImageAlignment == orig(event.plot.backgroundImageAlignment)
event.plot.backgroundImageAlpha == orig(event.plot.backgroundImageAlpha)
event.plot.foregroundAlpha == orig(event.plot.foregroundAlpha)
event.plot.backgroundAlpha == orig(event.plot.backgroundAlpha)
event.plot.drawingSupplier == orig(event.plot.drawingSupplier)
event.plot.drawingSupplier.getClass().getName() == orig(event.plot.drawingSupplier.getClass().getName())
event.plot.listenerList == orig(event.plot.listenerList)
event.type == orig(event.type)
org.jfree.chart.event.ChartChangeEventType.GENERAL == orig(org.jfree.chart.event.ChartChangeEventType.GENERAL)
org.jfree.chart.event.ChartChangeEventType.NEW_DATASET == orig(org.jfree.chart.event.ChartChangeEventType.NEW_DATASET)
org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED == orig(org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED)
event.type.name == orig(event.type.name)
event.type.name.toString == orig(event.type.name.toString)
this.renderingHints has only one value
this.borderStroke has only one value
this.title has only one value
this.title.text has only one value
this.title.text.toString == "Test"
this.title.content == null
this.title.listenerList has only one value
this.title.bounds has only one value
this.subtitles has only one value
this.subtitles[] contains no nulls and has only one value, of length 1
this.subtitles[] elements has only one value
this.plot has only one value
this.plot.getClass().getName() == org.jfree.chart.plot.PiePlot.class
this.plot.noDataMessageFont has only one value
this.plot.insets has only one value
this.plot.drawingSupplier has only one value
this.plot.listenerList has only one value
this.changeListeners has only one value
this.progressListeners has only one value
event.plot has only one value
event.plot.getClass().getName() == org.jfree.chart.plot.PiePlot.class
event.plot.parent == null
event.plot.datasetGroup == null
event.plot.noDataMessage == null
event.plot.noDataMessageFont has only one value
event.plot.noDataMessagePaint has only one value
event.plot.noDataMessagePaint.getClass().getName() == java.awt.Color.class
event.plot.insets has only one value
event.plot.outlineVisible == true
event.plot.outlineStroke has only one value
event.plot.outlineStroke.getClass().getName() == java.awt.BasicStroke.class
event.plot.outlinePaint has only one value
event.plot.outlinePaint.getClass().getName() == java.awt.Color.class
event.plot.backgroundPaint has only one value
event.plot.backgroundPaint.getClass().getName() == java.awt.Color.class
event.plot.backgroundImage == null
event.plot.backgroundImageAlignment == 15
event.plot.backgroundImageAlpha == 0.5
event.plot.foregroundAlpha == 1.0
event.plot.backgroundAlpha == 1.0
event.plot.drawingSupplier has only one value
event.plot.drawingSupplier.getClass().getName() == org.jfree.chart.plot.DefaultDrawingSupplier.class
event.plot.listenerList has only one value
event.type has only one value
org.jfree.chart.event.ChartChangeEventType.GENERAL has only one value
org.jfree.chart.event.ChartChangeEventType.NEW_DATASET has only one value
org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED has only one value
event.type.name has only one value
event.type.name.toString == "ChartChangeEventType.GENERAL"
event.chart has only one value
event.chart.renderingHints has only one value
event.chart.borderVisible == false
event.chart.borderStroke has only one value
event.chart.borderStroke.getClass().getName() == java.awt.BasicStroke.class
event.chart.borderPaint has only one value
event.chart.borderPaint.getClass().getName() == java.awt.Color.class
event.chart.padding has only one value
event.chart.title has only one value
event.chart.subtitles has only one value
event.chart.subtitles[] contains no nulls and has only one value, of length 1
event.chart.subtitles[] elements has only one value
event.chart.subtitles[].getClass().getName() == [org.jfree.chart.title.LegendTitle]
event.chart.subtitles[].getClass().getName() elements == org.jfree.chart.title.LegendTitle.class
event.chart.subtitles.getClass().getName() == java.util.ArrayList.class
event.chart.plot has only one value
event.chart.plot.getClass().getName() == org.jfree.chart.plot.PiePlot.class
event.chart.backgroundPaint has only one value
event.chart.backgroundPaint.getClass().getName() == java.awt.Color.class
event.chart.backgroundImage == null
event.chart.backgroundImageAlignment == 15
event.chart.backgroundImageAlpha == 0.5
event.chart.changeListeners has only one value
event.chart.progressListeners has only one value
event.chart.notify == true
size(event.chart.subtitles[]) == 1
===========================================================================
org.jfree.chart.JFreeChartInfo:::OBJECT
this has only one value
this.logo == null
this.licenceText has only one value
this.licenceText.toString == "GNU LESSER GENERAL PUBLIC LICENSE\n\nVersion 2.1, February 1999\n\nCopyright (C) 1991, 1999 Free Software Foundation, Inc.\n59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\nEveryone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.\n\n[This is the first released version of the Lesser GPL.  It also counts as the successor of the GNU Library Public License, version 2, hence the version number 2.1.]\n\nPreamble\n\nThe licenses for most software are designed to take away your freedom to share and change it. By contrast, the GNU General Public Licenses are intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users.\n\nThis license, the Lesser General Public License, applies to some specially designated software packages--typically libraries--of the Free Software Foundation and other authors who decide to use it. You can use it too, but we suggest you first think carefully about whether this license or the ordinary General Public License is the better strategy to use in any particular case, based on the explanations below.\n\nWhen we speak of free software, we are referring to freedom of use, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish); that you receive source code or can get it if you want it; that you can change the software and use pieces of it in new free programs; and that you are informed that you can do these things.\n\nTo protect your rights, we need to make restrictions that forbid distributors to deny you these rights or to ask you to surrender these rights. These restrictions translate to certain responsibilities for you if you distribute copies of the library or if you modify it.\n\nFor example, if you distribute copies of the library, whether gratis or for a fee, you must give the recipients all the rights that we gave you. You must make sure that they, too, receive or can get the source code. If you link other code with the library, you must provide complete object files to the recipients, so that they can relink them with the library after making changes to the library and recompiling it. And you must show them these terms so they know their rights.\n\nWe protect your rights with a two-step method: (1) we copyright the library, and (2) we offer you this license, which gives you legal permission to copy, distribute and/or modify the library.\n\nTo protect each distributor, we want to make it very clear that there is no warranty for the free library. Also, if the library is modified by someone else and passed on, the recipients should know that what they have is not the original version, so that the original author's reputation will not be affected by problems that might be introduced by others.\n\nFinally, software patents pose a constant threat to the existence of any free program. We wish to make sure that a company cannot effectively restrict the users of a free program by obtaining a restrictive license from a patent holder. Therefore, we insist that any patent license obtained for a version of the library must be consistent with the full freedom of use specified in this license.\n\nMost GNU software, including some libraries, is covered by the ordinary GNU General Public License. This license, the GNU Lesser General Public License, applies to certain designated libraries, and is quite different from the ordinary General Public License. We use this license for certain libraries in order to permit linking those libraries into non-free programs.\n\nWhen a program is linked with a library, whether statically or using a shared library, the combination of the two is legally speaking a combined work, a derivative of the original library. The ordinary General Public License therefore permits such linking only if the entire combination fits its criteria of freedom. The Lesser General Public License permits more lax criteria for linking other code with the library.\n\nWe call this license the \"Lesser\" General Public License because it does Less to protect the user's freedom than the ordinary General Public License. It also provides other free software developers Less of an advantage over competing non-free programs. These disadvantages are the reason we use the ordinary General Public License for many libraries. However, the Lesser license provides advantages in certain special circumstances.\n\nFor example, on rare occasions, there may be a special need to encourage the widest possible use of a certain library, so that it becomes a de-facto standard. To achieve this, non-free programs must be allowed to use the library. A more frequent case is that a free library does the same job as widely used non-free libraries. In this case, there is little to gain by limiting the free library to free software only, so we use the Lesser General Public License.\n\nIn other cases, permission to use a particular library in non-free programs enables a greater number of people to use a large body of free software. For example, permission to use the GNU C Library in non-free programs enables many more people to use the whole GNU operating system, as well as its variant, the GNU/Linux operating system.\n\nAlthough the Lesser General Public License is Less protective of the users' freedom, it does ensure that the user of a program that is linked with the Library has the freedom and the wherewithal to run that program using a modified version of the Library.\n\nThe precise terms and conditions for copying, distribution and modification follow. Pay close attention to the difference between a \"work based on the library\" and a \"work that uses the library\". The former contains code derived from the library, whereas the latter must be combined with the library in order to run.\n\nTERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n0. This License Agreement applies to any software library or other program which contains a notice placed by the copyright holder or other authorized party saying it may be distributed under the terms of this Lesser General Public License (also called \"this License\"). Each licensee is addressed as \"you\".\nA \"library\" means a collection of software functions and/or data prepared so as to be conveniently linked with application programs (which use some of those functions and data) to form executables.\n\nThe \"Library\", below, refers to any such software library or work which has been distributed under these terms. A \"work based on the Library\" means either the Library or any derivative work under copyright law: that is to say, a work containing the Library or a portion of it, either verbatim or with modifications and/or translated straightforwardly into another language. (Hereinafter, translation is included without limitation in the term \"modification\".)\n\n\"Source code\" for a work means the preferred form of the work for making modifications to it. For a library, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the library.\n\nActivities other than copying, distribution and modification are not covered by this License; they are outside its scope. The act of running a program using the Library is not restricted, and output from such a program is covered only if its contents constitute a work based on the Library (independent of the use of the Library in a tool for writing it). Whether that is true depends on what the Library does and what the program that uses the Library does.\n1. You may copy and distribute verbatim copies of the Library's complete source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and distribute a copy of this License along with the Library.\n\nYou may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee.\n\n2. You may modify your copy or copies of the Library or any portion of it, thus forming a work based on the Library, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions:\n\n*    a) The modified work must itself be a software library.\n*    b) You must cause the files modified to carry prominent notices stating that you changed the files and the date of any change.\n*    c) You must cause the whole of the work to be licensed at no charge to all third parties under the terms of this License.\n*    d) If a facility in the modified Library refers to a function or a table of data to be supplied by an application program that uses the facility, other than as an argument passed when the facility is invoked, then you must make a good faith effort to ensure that, in the event an application does not supply such function or table, the facility still operates, and performs whatever part of its purpose remains meaningful.\n\n(For example, a function in a library to compute square roots has a purpose that is entirely well-defined independent of the application. Therefore, Subsection 2d requires that any application-supplied function or table used by this function must be optional: if the application does not supply it, the square root function must still compute square roots.)\n\nThese requirements apply to the modified work as a whole. If identifiable sections of that work are not derived from the Library, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works. But when you distribute the same sections as part of a whole which is a work based on the Library, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Library.\n\nIn addition, mere aggregation of another work not based on the Library with the Library (or with a work based on the Library) on a volume of a storage or distribution medium does not bring the other work under the scope of this License.\n\n3. You may opt to apply the terms of the ordinary GNU General Public License instead of this License to a given copy of the Library. To do this, you must alter all the notices that refer to this License, so that they refer to the ordinary GNU General Public License, version 2, instead of to this License. (If a newer version than version 2 of the ordinary GNU General Public License has appeared, then you can specify that version instead if you wish.) Do not make any other change in these notices.\n\nOnce this change is made in a given copy, it is irreversible for that copy, so the ordinary GNU General Public License applies to all subsequent copies and derivative works made from that copy.\n\nThis option is useful when you wish to copy part of the code of the Library into a program that is not a library.\n\n4. You may copy and distribute the Library (or a portion or derivative of it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange.\n\nIf distribution of object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place satisfies the requirement to distribute the source code, even though third parties are not compelled to copy the source along with the object code.\n\n5. A program that contains no derivative of any portion of the Library, but is designed to work with the Library by being compiled or linked with it, is called a \"work that uses the Library\". Such a work, in isolation, is not a derivative work of the Library, and therefore falls outside the scope of this License.\n\nHowever, linking a \"work that uses the Library\" with the Library creates an executable that is a derivative of the Library (because it contains portions of the Library), rather than a \"work that uses the library\". The executable is therefore covered by this License. Section 6 states terms for distribution of such executables.\n\nWhen a \"work that uses the Library\" uses material from a header file that is part of the Library, the object code for the work may be a derivative work of the Library even though the source code is not. Whether this is true is especially significant if the work can be linked without the Library, or if the work is itself a library. The threshold for this to be true is not precisely defined by law.\n\nIf such an object file uses only numerical parameters, data structure layouts and accessors, and small macros and small inline functions (ten lines or less in length), then the use of the object file is unrestricted, regardless of whether it is legally a derivative work. (Executables containing this object code plus portions of the Library will still fall under Section 6.)\n\nOtherwise, if the work is a derivative of the Library, you may distribute the object code for the work under the terms of Section 6. Any executables containing that work also fall under Section 6, whether or not they are linked directly with the Library itself.\n\n6. As an exception to the Sections above, you may also combine or link a \"work that uses the Library\" with the Library to produce a work containing portions of the Library, and distribute that work under terms of your choice, provided that the terms permit modification of the work for the customer's own use and reverse engineering for debugging such modifications.\n\nYou must give prominent notice with each copy of the work that the Library is used in it and that the Library and its use are covered by this License. You must supply a copy of this License. If the work during execution displays copyright notices, you must include the copyright notice for the Library among them, as well as a reference directing the user to the copy of this License. Also, you must do one of these things:\n\n*    a) Accompany the work with the complete corresponding machine-readable source code for the Library including whatever changes were used in the work (which must be distributed under Sections 1 and 2 above); and, if the work is an executable linked with the Library, with the complete machine-readable \"work that uses the Library\", as object code and/or source code, so that the user can modify the Library and then relink to produce a modified executable containing the modified Library. (It is understood that the user who changes the contents of definitions files in the Library will not necessarily be able to recompile the application to use the modified definitions.)\n*    b) Use a suitable shared library mechanism for linking with the Library. A suitable mechanism is one that (1) uses at run time a copy of the library already present on the user's computer system, rather than copying library functions into the executable, and (2) will operate properly with a modified version of the library, if the user installs one, as long as the modified version is interface-compatible with the version that the work was made with.\n*    c) Accompany the work with a written offer, valid for at least three years, to give the same user the materials specified in Subsection 6a, above, for a charge no more than the cost of performing this distribution.\n*    d) If distribution of the work is made by offering access to copy from a designated place, offer equivalent access to copy the above specified materials from the same place.\n*    e) Verify that the user has already received a copy of these materials or that you have already sent this user a copy.\n\nFor an executable, the required form of the \"work that uses the Library\" must include any data and utility programs needed for reproducing the executable from it. However, as a special exception, the materials to be distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable.\n\nIt may happen that this requirement contradicts the license restrictions of other proprietary libraries that do not normally accompany the operating system. Such a contradiction means you cannot use both them and the Library together in an executable that you distribute.\n\n7. You may place library facilities that are a work based on the Library side-by-side in a single library together with other library facilities not covered by this License, and distribute such a combined library, provided that the separate distribution of the work based on the Library and of the other library facilities is otherwise permitted, and provided that you do these two things:\n\n*    a) Accompany the combined library with a copy of the same work based on the Library, uncombined with any other library facilities. This must be distributed under the terms of the Sections above.\n*    b) Give prominent notice with the combined library of the fact that part of it is a work based on the Library, and explaining where to find the accompanying uncombined form of the same work.\n\n8. You may not copy, modify, sublicense, link with, or distribute the Library except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense, link with, or distribute the Library is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance.\n\n9. You are not required to accept this License, since you have not signed it. However, nothing else grants you permission to modify or distribute the Library or its derivative works. These actions are prohibited by law if you do not accept this License. Therefore, by modifying or distributing the Library (or any work based on the Library), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Library or works based on it.\n\n10. Each time you redistribute the Library (or any work based on the Library), the recipient automatically receives a license from the original licensor to copy, distribute, link with or modify the Library subject to these terms and conditions. You may not impose any further restrictions on the recipients' exercise of the rights granted herein. You are not responsible for enforcing compliance by third parties with this License.\n\n11. If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Library at all. For example, if a patent license would not permit royalty-free redistribution of the Library by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Library.\n\nIf any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply, and the section as a whole is intended to apply in other circumstances.\n\nIt is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system which is implemented by public license practices. Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice.\n\nThis section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License.\n\n12. If the distribution and/or use of the Library is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Library under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded. In such case, this License incorporates the limitation as if written in the body of this License.\n\n13. The Free Software Foundation may publish revised and/or new versions of the Lesser General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.\n\nEach version is given a distinguishing version number. If the Library specifies a version number of this License which applies to it and \"any later version\", you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation. If the Library does not specify a license version number, you may choose any version ever published by the Free Software Foundation.\n\n14. If you wish to incorporate parts of the Library into other free programs whose distribution conditions are incompatible with these, write to the author to ask for permission. For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this. Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally.\n\nNO WARRANTY\n\n15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE LIBRARY \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE LIBRARY IS WITH YOU. SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n\nEND OF TERMS AND CONDITIONS\n\n\nHow to Apply These Terms to Your New Libraries\n\nIf you develop a new library, and you want it to be of the greatest possible use to the public, we recommend making it free software that everyone can redistribute and change. You can do so by permitting redistribution under these terms (or, alternatively, under the terms of the ordinary General Public License).\n\nTo apply these terms, attach the following notices to the library.  It is safest to attach them to the start of each source file to most effectively convey the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.\n\n<one line to give the library's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.\n\nThis library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\nAlso add information on how to contact you by electronic and paper mail.\n\nYou should also get your employer (if you work as a programmer) or your school, if any, to sign a \"copyright disclaimer\" for the library, if necessary.  Here is a sample; alter the names:\n\nYoyodyne, Inc., hereby disclaims all copyright interest in the library `Frob' (a library for tweaking knobs) written by James Random Hacker.\n\n<signature of Ty Coon>, 1 April 1990\nTy Coon, President of Vice\n\nThat's all there is to it!\n"
this.contributors has only one value
this.contributors[] contains no nulls and has only one value, of length 85
this.contributors[].getClass().getName() == [org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor]
this.contributors[].getClass().getName() elements == org.jfree.chart.ui.Contributor.class
this.contributors.getClass().getName() == java.util.Arrays$ArrayList.class
this.copyright has only one value
this.copyright.toString == "(C)opyright 2000-2007, by Object Refinery Limited and Contributors"
this.libraries has only one value
this.libraries[] == []
this.libraries[].getClass().getName() == []
this.libraries.getClass().getName() == java.util.ArrayList.class
this.optionalLibraries has only one value
this.optionalLibraries[] == []
this.optionalLibraries[].getClass().getName() == []
this.name has only one value
this.name.toString == "JFreeChart"
this.version has only one value
this.version.toString == "1.2.0-pre"
this.licenceName has only one value
this.licenceName.toString == "LGPL"
this.info has only one value
this.info.toString == "http://www.jfree.org/jfreechart/index.html"
size(this.contributors[]) == 85
===========================================================================
org.jfree.chart.JFreeChartInfo.JFreeChartInfo():::EXIT
===========================================================================
org.jfree.chart.LegendItem:::CLASS
org.jfree.chart.LegendItem.UNUSED_SHAPE has only one value
org.jfree.chart.LegendItem.UNUSED_SHAPE != null
org.jfree.chart.LegendItem.UNUSED_SHAPE.getClass().getName() == java.awt.geom.Line2D$Float.class
org.jfree.chart.LegendItem.UNUSED_STROKE has only one value
org.jfree.chart.LegendItem.UNUSED_STROKE != null
org.jfree.chart.LegendItem.UNUSED_STROKE.getClass().getName() == java.awt.BasicStroke.class
===========================================================================
org.jfree.chart.LegendItem:::OBJECT
this.dataset.getClass().getName() == org.jfree.data.general.DefaultPieDataset.class
this.seriesKey == null
this.datasetIndex == 0
this.series == 0
this.label != null
this.label.toString one of { "Section 1", "Section 2", "Section 3" }
this.attributedLabel == null
this.description != null
this.description.toString one of { "Section 1", "Section 2", "Section 3" }
this.toolTipText == null
this.urlText == null
this.shapeVisible == true
this.shape has only one value
this.shape != null
this.shape.getClass().getName() == java.awt.geom.Ellipse2D$Double.class
this.shapeFilled == true
this.fillPaint != null
this.fillPaint.getClass().getName() == java.awt.Color.class
this.fillPaintTransformer != null
this.fillPaintTransformer.getClass().getName() == org.jfree.chart.util.StandardGradientPaintTransformer.class
this.shapeOutlineVisible == true
this.outlinePaint has only one value
this.outlinePaint != null
this.outlinePaint.getClass().getName() == java.awt.Color.class
this.outlineStroke has only one value
this.outlineStroke != null
this.outlineStroke.getClass().getName() == java.awt.BasicStroke.class
this.lineVisible == false
this.line != null
this.line.getClass().getName() == java.awt.geom.Line2D$Float.class
this.lineStroke != null
this.lineStroke.getClass().getName() == java.awt.BasicStroke.class
this.linePaint has only one value
this.linePaint != null
this.linePaint.getClass().getName() == java.awt.Color.class
===========================================================================
org.jfree.chart.LegendItem.LegendItem(java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean, java.awt.Shape, boolean, java.awt.Paint, boolean, java.awt.Paint, java.awt.Stroke, boolean, java.awt.Shape, java.awt.Stroke, java.awt.Paint):::ENTER
label.toString one of { "Section 1", "Section 2", "Section 3" }
description.toString one of { "Section 1", "Section 2", "Section 3" }
toolTipText == null
urlText == null
shapeVisible == true
shape has only one value
shape.getClass().getName() == java.awt.geom.Ellipse2D$Double.class
shapeFilled == true
fillPaint.getClass().getName() == java.awt.Color.class
shapeOutlineVisible == true
outlinePaint has only one value
outlinePaint.getClass().getName() == java.awt.Color.class
outlineStroke has only one value
outlineStroke.getClass().getName() == java.awt.BasicStroke.class
lineVisible == false
line.getClass().getName() == java.awt.geom.Line2D$Float.class
lineStroke.getClass().getName() == java.awt.BasicStroke.class
linePaint has only one value
linePaint.getClass().getName() == java.awt.Color.class
===========================================================================
org.jfree.chart.LegendItem.LegendItem(java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean, java.awt.Shape, boolean, java.awt.Paint, boolean, java.awt.Paint, java.awt.Stroke, boolean, java.awt.Shape, java.awt.Stroke, java.awt.Paint):::EXIT
label.toString == orig(label.toString)
description.toString == orig(description.toString)
this.dataset == null
label.toString one of { "Section 1", "Section 2", "Section 3" }
description.toString one of { "Section 1", "Section 2", "Section 3" }
===========================================================================
org.jfree.chart.LegendItem.getDataset():::ENTER
this.dataset has only one value
===========================================================================
org.jfree.chart.LegendItem.getDataset():::EXIT
this.dataset == orig(this.dataset)
this.dataset.getClass().getName() == orig(this.dataset.getClass().getName())
this.seriesKey == orig(this.seriesKey)
this.datasetIndex == orig(this.datasetIndex)
this.series == orig(this.series)
this.label == orig(this.label)
this.label.toString == orig(this.label.toString)
this.attributedLabel == orig(this.attributedLabel)
this.description == orig(this.description)
this.description.toString == orig(this.description.toString)
this.toolTipText == orig(this.toolTipText)
this.urlText == orig(this.urlText)
this.shapeVisible == orig(this.shapeVisible)
this.shape == orig(this.shape)
this.shape.getClass().getName() == orig(this.shape.getClass().getName())
this.shapeFilled == orig(this.shapeFilled)
this.fillPaint == orig(this.fillPaint)
this.fillPaint.getClass().getName() == orig(this.fillPaint.getClass().getName())
this.fillPaintTransformer == orig(this.fillPaintTransformer)
this.fillPaintTransformer.getClass().getName() == orig(this.fillPaintTransformer.getClass().getName())
this.shapeOutlineVisible == orig(this.shapeOutlineVisible)
this.outlinePaint == orig(this.outlinePaint)
this.outlinePaint.getClass().getName() == orig(this.outlinePaint.getClass().getName())
this.outlineStroke == orig(this.outlineStroke)
this.outlineStroke.getClass().getName() == orig(this.outlineStroke.getClass().getName())
this.lineVisible == orig(this.lineVisible)
this.line == orig(this.line)
this.line.getClass().getName() == orig(this.line.getClass().getName())
this.lineStroke == orig(this.lineStroke)
this.lineStroke.getClass().getName() == orig(this.lineStroke.getClass().getName())
this.linePaint == orig(this.linePaint)
this.linePaint.getClass().getName() == orig(this.linePaint.getClass().getName())
org.jfree.chart.LegendItem.UNUSED_SHAPE == orig(org.jfree.chart.LegendItem.UNUSED_SHAPE)
org.jfree.chart.LegendItem.UNUSED_SHAPE.getClass().getName() == orig(org.jfree.chart.LegendItem.UNUSED_SHAPE.getClass().getName())
org.jfree.chart.LegendItem.UNUSED_STROKE == orig(org.jfree.chart.LegendItem.UNUSED_STROKE)
org.jfree.chart.LegendItem.UNUSED_STROKE.getClass().getName() == orig(org.jfree.chart.LegendItem.UNUSED_STROKE.getClass().getName())
this.dataset has only one value
return has only one value
return.getClass().getName() == org.jfree.data.general.DefaultPieDataset.class
===========================================================================
org.jfree.chart.LegendItem.getFillPaint():::ENTER
this.dataset has only one value
===========================================================================
org.jfree.chart.LegendItem.getFillPaint():::EXIT
this.dataset == orig(this.dataset)
this.dataset.getClass().getName() == orig(this.dataset.getClass().getName())
this.seriesKey == orig(this.seriesKey)
this.datasetIndex == orig(this.datasetIndex)
this.series == orig(this.series)
this.label == orig(this.label)
this.label.toString == orig(this.label.toString)
this.attributedLabel == orig(this.attributedLabel)
this.description == orig(this.description)
this.description.toString == orig(this.description.toString)
this.toolTipText == orig(this.toolTipText)
this.urlText == orig(this.urlText)
this.shapeVisible == orig(this.shapeVisible)
this.shape == orig(this.shape)
this.shape.getClass().getName() == orig(this.shape.getClass().getName())
this.shapeFilled == orig(this.shapeFilled)
this.fillPaint == orig(this.fillPaint)
this.fillPaint.getClass().getName() == orig(this.fillPaint.getClass().getName())
this.fillPaintTransformer == orig(this.fillPaintTransformer)
this.fillPaintTransformer.getClass().getName() == orig(this.fillPaintTransformer.getClass().getName())
this.shapeOutlineVisible == orig(this.shapeOutlineVisible)
this.outlinePaint == orig(this.outlinePaint)
this.outlinePaint.getClass().getName() == orig(this.outlinePaint.getClass().getName())
this.outlineStroke == orig(this.outlineStroke)
this.outlineStroke.getClass().getName() == orig(this.outlineStroke.getClass().getName())
this.lineVisible == orig(this.lineVisible)
this.line == orig(this.line)
this.line.getClass().getName() == orig(this.line.getClass().getName())
this.lineStroke == orig(this.lineStroke)
this.lineStroke.getClass().getName() == orig(this.lineStroke.getClass().getName())
this.linePaint == orig(this.linePaint)
this.linePaint.getClass().getName() == orig(this.linePaint.getClass().getName())
org.jfree.chart.LegendItem.UNUSED_SHAPE == orig(org.jfree.chart.LegendItem.UNUSED_SHAPE)
org.jfree.chart.LegendItem.UNUSED_SHAPE.getClass().getName() == orig(org.jfree.chart.LegendItem.UNUSED_SHAPE.getClass().getName())
org.jfree.chart.LegendItem.UNUSED_STROKE == orig(org.jfree.chart.LegendItem.UNUSED_STROKE)
org.jfree.chart.LegendItem.UNUSED_STROKE.getClass().getName() == orig(org.jfree.chart.LegendItem.UNUSED_STROKE.getClass().getName())
this.dataset has only one value
return.getClass().getName() == java.awt.Color.class
===========================================================================
org.jfree.chart.LegendItem.getFillPaintTransformer():::ENTER
this.dataset has only one value
===========================================================================
org.jfree.chart.LegendItem.getFillPaintTransformer():::EXIT
this.dataset == orig(this.dataset)
this.dataset.getClass().getName() == orig(this.dataset.getClass().getName())
this.seriesKey == orig(this.seriesKey)
this.datasetIndex == orig(this.datasetIndex)
this.series == orig(this.series)
this.label == orig(this.label)
this.label.toString == orig(this.label.toString)
this.attributedLabel == orig(this.attributedLabel)
this.description == orig(this.description)
this.description.toString == orig(this.description.toString)
this.toolTipText == orig(this.toolTipText)
this.urlText == orig(this.urlText)
this.shapeVisible == orig(this.shapeVisible)
this.shape == orig(this.shape)
this.shape.getClass().getName() == orig(this.shape.getClass().getName())
this.shapeFilled == orig(this.shapeFilled)
this.fillPaint == orig(this.fillPaint)
this.fillPaint.getClass().getName() == orig(this.fillPaint.getClass().getName())
this.fillPaintTransformer == orig(this.fillPaintTransformer)
this.fillPaintTransformer.getClass().getName() == orig(this.fillPaintTransformer.getClass().getName())
this.shapeOutlineVisible == orig(this.shapeOutlineVisible)
this.outlinePaint == orig(this.outlinePaint)
this.outlinePaint.getClass().getName() == orig(this.outlinePaint.getClass().getName())
this.outlineStroke == orig(this.outlineStroke)
this.outlineStroke.getClass().getName() == orig(this.outlineStroke.getClass().getName())
this.lineVisible == orig(this.lineVisible)
this.line == orig(this.line)
this.line.getClass().getName() == orig(this.line.getClass().getName())
this.lineStroke == orig(this.lineStroke)
this.lineStroke.getClass().getName() == orig(this.lineStroke.getClass().getName())
this.linePaint == orig(this.linePaint)
this.linePaint.getClass().getName() == orig(this.linePaint.getClass().getName())
org.jfree.chart.LegendItem.UNUSED_SHAPE == orig(org.jfree.chart.LegendItem.UNUSED_SHAPE)
org.jfree.chart.LegendItem.UNUSED_SHAPE.getClass().getName() == orig(org.jfree.chart.LegendItem.UNUSED_SHAPE.getClass().getName())
org.jfree.chart.LegendItem.UNUSED_STROKE == orig(org.jfree.chart.LegendItem.UNUSED_STROKE)
org.jfree.chart.LegendItem.UNUSED_STROKE.getClass().getName() == orig(org.jfree.chart.LegendItem.UNUSED_STROKE.getClass().getName())
this.dataset has only one value
return.getClass().getName() == org.jfree.chart.util.StandardGradientPaintTransformer.class
===========================================================================
org.jfree.chart.LegendItem.getLabel():::ENTER
this.dataset has only one value
===========================================================================
org.jfree.chart.LegendItem.getLabel():::EXIT
this.dataset == orig(this.dataset)
this.dataset.getClass().getName() == orig(this.dataset.getClass().getName())
this.seriesKey == orig(this.seriesKey)
this.datasetIndex == orig(this.datasetIndex)
this.series == orig(this.series)
this.label == orig(this.label)
this.label.toString == orig(this.label.toString)
this.attributedLabel == orig(this.attributedLabel)
this.description == orig(this.description)
this.description.toString == orig(this.description.toString)
this.toolTipText == orig(this.toolTipText)
this.urlText == orig(this.urlText)
this.shapeVisible == orig(this.shapeVisible)
this.shape == orig(this.shape)
this.shape.getClass().getName() == orig(this.shape.getClass().getName())
this.shapeFilled == orig(this.shapeFilled)
this.fillPaint == orig(this.fillPaint)
this.fillPaint.getClass().getName() == orig(this.fillPaint.getClass().getName())
this.fillPaintTransformer == orig(this.fillPaintTransformer)
this.fillPaintTransformer.getClass().getName() == orig(this.fillPaintTransformer.getClass().getName())
this.shapeOutlineVisible == orig(this.shapeOutlineVisible)
this.outlinePaint == orig(this.outlinePaint)
this.outlinePaint.getClass().getName() == orig(this.outlinePaint.getClass().getName())
this.outlineStroke == orig(this.outlineStroke)
this.outlineStroke.getClass().getName() == orig(this.outlineStroke.getClass().getName())
this.lineVisible == orig(this.lineVisible)
this.line == orig(this.line)
this.line.getClass().getName() == orig(this.line.getClass().getName())
this.lineStroke == orig(this.lineStroke)
this.lineStroke.getClass().getName() == orig(this.lineStroke.getClass().getName())
this.linePaint == orig(this.linePaint)
this.linePaint.getClass().getName() == orig(this.linePaint.getClass().getName())
org.jfree.chart.LegendItem.UNUSED_SHAPE == orig(org.jfree.chart.LegendItem.UNUSED_SHAPE)
org.jfree.chart.LegendItem.UNUSED_SHAPE.getClass().getName() == orig(org.jfree.chart.LegendItem.UNUSED_SHAPE.getClass().getName())
org.jfree.chart.LegendItem.UNUSED_STROKE == orig(org.jfree.chart.LegendItem.UNUSED_STROKE)
org.jfree.chart.LegendItem.UNUSED_STROKE.getClass().getName() == orig(org.jfree.chart.LegendItem.UNUSED_STROKE.getClass().getName())
this.dataset has only one value
return.toString one of { "Section 1", "Section 2", "Section 3" }
===========================================================================
org.jfree.chart.LegendItem.getLine():::ENTER
this.dataset has only one value
===========================================================================
org.jfree.chart.LegendItem.getLine():::EXIT
this.dataset == orig(this.dataset)
this.dataset.getClass().getName() == orig(this.dataset.getClass().getName())
this.seriesKey == orig(this.seriesKey)
this.datasetIndex == orig(this.datasetIndex)
this.series == orig(this.series)
this.label == orig(this.label)
this.label.toString == orig(this.label.toString)
this.attributedLabel == orig(this.attributedLabel)
this.description == orig(this.description)
this.description.toString == orig(this.description.toString)
this.toolTipText == orig(this.toolTipText)
this.urlText == orig(this.urlText)
this.shapeVisible == orig(this.shapeVisible)
this.shape == orig(this.shape)
this.shape.getClass().getName() == orig(this.shape.getClass().getName())
this.shapeFilled == orig(this.shapeFilled)
this.fillPaint == orig(this.fillPaint)
this.fillPaint.getClass().getName() == orig(this.fillPaint.getClass().getName())
this.fillPaintTransformer == orig(this.fillPaintTransformer)
this.fillPaintTransformer.getClass().getName() == orig(this.fillPaintTransformer.getClass().getName())
this.shapeOutlineVisible == orig(this.shapeOutlineVisible)
this.outlinePaint == orig(this.outlinePaint)
this.outlinePaint.getClass().getName() == orig(this.outlinePaint.getClass().getName())
this.outlineStroke == orig(this.outlineStroke)
this.outlineStroke.getClass().getName() == orig(this.outlineStroke.getClass().getName())
this.lineVisible == orig(this.lineVisible)
this.line == orig(this.line)
this.line.getClass().getName() == orig(this.line.getClass().getName())
this.lineStroke == orig(this.lineStroke)
this.lineStroke.getClass().getName() == orig(this.lineStroke.getClass().getName())
this.linePaint == orig(this.linePaint)
this.linePaint.getClass().getName() == orig(this.linePaint.getClass().getName())
org.jfree.chart.LegendItem.UNUSED_SHAPE == orig(org.jfree.chart.LegendItem.UNUSED_SHAPE)
org.jfree.chart.LegendItem.UNUSED_SHAPE.getClass().getName() == orig(org.jfree.chart.LegendItem.UNUSED_SHAPE.getClass().getName())
org.jfree.chart.LegendItem.UNUSED_STROKE == orig(org.jfree.chart.LegendItem.UNUSED_STROKE)
org.jfree.chart.LegendItem.UNUSED_STROKE.getClass().getName() == orig(org.jfree.chart.LegendItem.UNUSED_STROKE.getClass().getName())
this.dataset has only one value
return.getClass().getName() == java.awt.geom.Line2D$Float.class
===========================================================================
org.jfree.chart.LegendItem.getLinePaint():::ENTER
this.dataset has only one value
===========================================================================
org.jfree.chart.LegendItem.getLinePaint():::EXIT
this.dataset == orig(this.dataset)
this.dataset.getClass().getName() == orig(this.dataset.getClass().getName())
this.seriesKey == orig(this.seriesKey)
this.datasetIndex == orig(this.datasetIndex)
this.series == orig(this.series)
this.label == orig(this.label)
this.label.toString == orig(this.label.toString)
this.attributedLabel == orig(this.attributedLabel)
this.description == orig(this.description)
this.description.toString == orig(this.description.toString)
this.toolTipText == orig(this.toolTipText)
this.urlText == orig(this.urlText)
this.shapeVisible == orig(this.shapeVisible)
this.shape == orig(this.shape)
this.shape.getClass().getName() == orig(this.shape.getClass().getName())
this.shapeFilled == orig(this.shapeFilled)
this.fillPaint == orig(this.fillPaint)
this.fillPaint.getClass().getName() == orig(this.fillPaint.getClass().getName())
this.fillPaintTransformer == orig(this.fillPaintTransformer)
this.fillPaintTransformer.getClass().getName() == orig(this.fillPaintTransformer.getClass().getName())
this.shapeOutlineVisible == orig(this.shapeOutlineVisible)
this.outlinePaint == orig(this.outlinePaint)
this.outlinePaint.getClass().getName() == orig(this.outlinePaint.getClass().getName())
this.outlineStroke == orig(this.outlineStroke)
this.outlineStroke.getClass().getName() == orig(this.outlineStroke.getClass().getName())
this.lineVisible == orig(this.lineVisible)
this.line == orig(this.line)
this.line.getClass().getName() == orig(this.line.getClass().getName())
this.lineStroke == orig(this.lineStroke)
this.lineStroke.getClass().getName() == orig(this.lineStroke.getClass().getName())
this.linePaint == orig(this.linePaint)
this.linePaint.getClass().getName() == orig(this.linePaint.getClass().getName())
org.jfree.chart.LegendItem.UNUSED_SHAPE == orig(org.jfree.chart.LegendItem.UNUSED_SHAPE)
org.jfree.chart.LegendItem.UNUSED_SHAPE.getClass().getName() == orig(org.jfree.chart.LegendItem.UNUSED_SHAPE.getClass().getName())
org.jfree.chart.LegendItem.UNUSED_STROKE == orig(org.jfree.chart.LegendItem.UNUSED_STROKE)
org.jfree.chart.LegendItem.UNUSED_STROKE.getClass().getName() == orig(org.jfree.chart.LegendItem.UNUSED_STROKE.getClass().getName())
this.dataset has only one value
return has only one value
return.getClass().getName() == java.awt.Color.class
===========================================================================
org.jfree.chart.LegendItem.getLineStroke():::ENTER
this.dataset has only one value
===========================================================================
org.jfree.chart.LegendItem.getLineStroke():::EXIT
this.dataset == orig(this.dataset)
this.dataset.getClass().getName() == orig(this.dataset.getClass().getName())
this.seriesKey == orig(this.seriesKey)
this.datasetIndex == orig(this.datasetIndex)
this.series == orig(this.series)
this.label == orig(this.label)
this.label.toString == orig(this.label.toString)
this.attributedLabel == orig(this.attributedLabel)
this.description == orig(this.description)
this.description.toString == orig(this.description.toString)
this.toolTipText == orig(this.toolTipText)
this.urlText == orig(this.urlText)
this.shapeVisible == orig(this.shapeVisible)
this.shape == orig(this.shape)
this.shape.getClass().getName() == orig(this.shape.getClass().getName())
this.shapeFilled == orig(this.shapeFilled)
this.fillPaint == orig(this.fillPaint)
this.fillPaint.getClass().getName() == orig(this.fillPaint.getClass().getName())
this.fillPaintTransformer == orig(this.fillPaintTransformer)
this.fillPaintTransformer.getClass().getName() == orig(this.fillPaintTransformer.getClass().getName())
this.shapeOutlineVisible == orig(this.shapeOutlineVisible)
this.outlinePaint == orig(this.outlinePaint)
this.outlinePaint.getClass().getName() == orig(this.outlinePaint.getClass().getName())
this.outlineStroke == orig(this.outlineStroke)
this.outlineStroke.getClass().getName() == orig(this.outlineStroke.getClass().getName())
this.lineVisible == orig(this.lineVisible)
this.line == orig(this.line)
this.line.getClass().getName() == orig(this.line.getClass().getName())
this.lineStroke == orig(this.lineStroke)
this.lineStroke.getClass().getName() == orig(this.lineStroke.getClass().getName())
this.linePaint == orig(this.linePaint)
this.linePaint.getClass().getName() == orig(this.linePaint.getClass().getName())
org.jfree.chart.LegendItem.UNUSED_SHAPE == orig(org.jfree.chart.LegendItem.UNUSED_SHAPE)
org.jfree.chart.LegendItem.UNUSED_SHAPE.getClass().getName() == orig(org.jfree.chart.LegendItem.UNUSED_SHAPE.getClass().getName())
org.jfree.chart.LegendItem.UNUSED_STROKE == orig(org.jfree.chart.LegendItem.UNUSED_STROKE)
org.jfree.chart.LegendItem.UNUSED_STROKE.getClass().getName() == orig(org.jfree.chart.LegendItem.UNUSED_STROKE.getClass().getName())
this.dataset has only one value
return.getClass().getName() == java.awt.BasicStroke.class
===========================================================================
org.jfree.chart.LegendItem.getOutlinePaint():::ENTER
this.dataset has only one value
===========================================================================
org.jfree.chart.LegendItem.getOutlinePaint():::EXIT
this.dataset == orig(this.dataset)
this.dataset.getClass().getName() == orig(this.dataset.getClass().getName())
this.seriesKey == orig(this.seriesKey)
this.datasetIndex == orig(this.datasetIndex)
this.series == orig(this.series)
this.label == orig(this.label)
this.label.toString == orig(this.label.toString)
this.attributedLabel == orig(this.attributedLabel)
this.description == orig(this.description)
this.description.toString == orig(this.description.toString)
this.toolTipText == orig(this.toolTipText)
this.urlText == orig(this.urlText)
this.shapeVisible == orig(this.shapeVisible)
this.shape == orig(this.shape)
this.shape.getClass().getName() == orig(this.shape.getClass().getName())
this.shapeFilled == orig(this.shapeFilled)
this.fillPaint == orig(this.fillPaint)
this.fillPaint.getClass().getName() == orig(this.fillPaint.getClass().getName())
this.fillPaintTransformer == orig(this.fillPaintTransformer)
this.fillPaintTransformer.getClass().getName() == orig(this.fillPaintTransformer.getClass().getName())
this.shapeOutlineVisible == orig(this.shapeOutlineVisible)
this.outlinePaint == orig(this.outlinePaint)
this.outlinePaint.getClass().getName() == orig(this.outlinePaint.getClass().getName())
this.outlineStroke == orig(this.outlineStroke)
this.outlineStroke.getClass().getName() == orig(this.outlineStroke.getClass().getName())
this.lineVisible == orig(this.lineVisible)
this.line == orig(this.line)
this.line.getClass().getName() == orig(this.line.getClass().getName())
this.lineStroke == orig(this.lineStroke)
this.lineStroke.getClass().getName() == orig(this.lineStroke.getClass().getName())
this.linePaint == orig(this.linePaint)
this.linePaint.getClass().getName() == orig(this.linePaint.getClass().getName())
org.jfree.chart.LegendItem.UNUSED_SHAPE == orig(org.jfree.chart.LegendItem.UNUSED_SHAPE)
org.jfree.chart.LegendItem.UNUSED_SHAPE.getClass().getName() == orig(org.jfree.chart.LegendItem.UNUSED_SHAPE.getClass().getName())
org.jfree.chart.LegendItem.UNUSED_STROKE == orig(org.jfree.chart.LegendItem.UNUSED_STROKE)
org.jfree.chart.LegendItem.UNUSED_STROKE.getClass().getName() == orig(org.jfree.chart.LegendItem.UNUSED_STROKE.getClass().getName())
this.dataset has only one value
return has only one value
return.getClass().getName() == java.awt.Color.class
===========================================================================
org.jfree.chart.LegendItem.getOutlineStroke():::ENTER
this.dataset has only one value
===========================================================================
org.jfree.chart.LegendItem.getOutlineStroke():::EXIT
this.dataset == orig(this.dataset)
this.dataset.getClass().getName() == orig(this.dataset.getClass().getName())
this.seriesKey == orig(this.seriesKey)
this.datasetIndex == orig(this.datasetIndex)
this.series == orig(this.series)
this.label == orig(this.label)
this.label.toString == orig(this.label.toString)
this.attributedLabel == orig(this.attributedLabel)
this.description == orig(this.description)
this.description.toString == orig(this.description.toString)
this.toolTipText == orig(this.toolTipText)
this.urlText == orig(this.urlText)
this.shapeVisible == orig(this.shapeVisible)
this.shape == orig(this.shape)
this.shape.getClass().getName() == orig(this.shape.getClass().getName())
this.shapeFilled == orig(this.shapeFilled)
this.fillPaint == orig(this.fillPaint)
this.fillPaint.getClass().getName() == orig(this.fillPaint.getClass().getName())
this.fillPaintTransformer == orig(this.fillPaintTransformer)
this.fillPaintTransformer.getClass().getName() == orig(this.fillPaintTransformer.getClass().getName())
this.shapeOutlineVisible == orig(this.shapeOutlineVisible)
this.outlinePaint == orig(this.outlinePaint)
this.outlinePaint.getClass().getName() == orig(this.outlinePaint.getClass().getName())
this.outlineStroke == orig(this.outlineStroke)
this.outlineStroke.getClass().getName() == orig(this.outlineStroke.getClass().getName())
this.lineVisible == orig(this.lineVisible)
this.line == orig(this.line)
this.line.getClass().getName() == orig(this.line.getClass().getName())
this.lineStroke == orig(this.lineStroke)
this.lineStroke.getClass().getName() == orig(this.lineStroke.getClass().getName())
this.linePaint == orig(this.linePaint)
this.linePaint.getClass().getName() == orig(this.linePaint.getClass().getName())
org.jfree.chart.LegendItem.UNUSED_SHAPE == orig(org.jfree.chart.LegendItem.UNUSED_SHAPE)
org.jfree.chart.LegendItem.UNUSED_SHAPE.getClass().getName() == orig(org.jfree.chart.LegendItem.UNUSED_SHAPE.getClass().getName())
org.jfree.chart.LegendItem.UNUSED_STROKE == orig(org.jfree.chart.LegendItem.UNUSED_STROKE)
org.jfree.chart.LegendItem.UNUSED_STROKE.getClass().getName() == orig(org.jfree.chart.LegendItem.UNUSED_STROKE.getClass().getName())
this.dataset has only one value
return has only one value
return.getClass().getName() == java.awt.BasicStroke.class
===========================================================================
org.jfree.chart.LegendItem.getSeriesKey():::ENTER
this.dataset has only one value
===========================================================================
org.jfree.chart.LegendItem.getSeriesKey():::EXIT
this.dataset == orig(this.dataset)
this.dataset.getClass().getName() == orig(this.dataset.getClass().getName())
this.seriesKey == orig(this.seriesKey)
this.datasetIndex == orig(this.datasetIndex)
this.series == orig(this.series)
this.label == orig(this.label)
this.label.toString == orig(this.label.toString)
this.attributedLabel == orig(this.attributedLabel)
this.description == orig(this.description)
this.description.toString == orig(this.description.toString)
this.toolTipText == orig(this.toolTipText)
this.urlText == orig(this.urlText)
this.shapeVisible == orig(this.shapeVisible)
this.shape == orig(this.shape)
this.shape.getClass().getName() == orig(this.shape.getClass().getName())
this.shapeFilled == orig(this.shapeFilled)
this.fillPaint == orig(this.fillPaint)
this.fillPaint.getClass().getName() == orig(this.fillPaint.getClass().getName())
this.fillPaintTransformer == orig(this.fillPaintTransformer)
this.fillPaintTransformer.getClass().getName() == orig(this.fillPaintTransformer.getClass().getName())
this.shapeOutlineVisible == orig(this.shapeOutlineVisible)
this.outlinePaint == orig(this.outlinePaint)
this.outlinePaint.getClass().getName() == orig(this.outlinePaint.getClass().getName())
this.outlineStroke == orig(this.outlineStroke)
this.outlineStroke.getClass().getName() == orig(this.outlineStroke.getClass().getName())
this.lineVisible == orig(this.lineVisible)
this.line == orig(this.line)
this.line.getClass().getName() == orig(this.line.getClass().getName())
this.lineStroke == orig(this.lineStroke)
this.lineStroke.getClass().getName() == orig(this.lineStroke.getClass().getName())
this.linePaint == orig(this.linePaint)
this.linePaint.getClass().getName() == orig(this.linePaint.getClass().getName())
org.jfree.chart.LegendItem.UNUSED_SHAPE == orig(org.jfree.chart.LegendItem.UNUSED_SHAPE)
org.jfree.chart.LegendItem.UNUSED_SHAPE.getClass().getName() == orig(org.jfree.chart.LegendItem.UNUSED_SHAPE.getClass().getName())
org.jfree.chart.LegendItem.UNUSED_STROKE == orig(org.jfree.chart.LegendItem.UNUSED_STROKE)
org.jfree.chart.LegendItem.UNUSED_STROKE.getClass().getName() == orig(org.jfree.chart.LegendItem.UNUSED_STROKE.getClass().getName())
this.dataset has only one value
return == null
===========================================================================
org.jfree.chart.LegendItem.getShape():::ENTER
this.dataset has only one value
===========================================================================
org.jfree.chart.LegendItem.getShape():::EXIT
this.dataset == orig(this.dataset)
this.dataset.getClass().getName() == orig(this.dataset.getClass().getName())
this.seriesKey == orig(this.seriesKey)
this.datasetIndex == orig(this.datasetIndex)
this.series == orig(this.series)
this.label == orig(this.label)
this.label.toString == orig(this.label.toString)
this.attributedLabel == orig(this.attributedLabel)
this.description == orig(this.description)
this.description.toString == orig(this.description.toString)
this.toolTipText == orig(this.toolTipText)
this.urlText == orig(this.urlText)
this.shapeVisible == orig(this.shapeVisible)
this.shape == orig(this.shape)
this.shape.getClass().getName() == orig(this.shape.getClass().getName())
this.shapeFilled == orig(this.shapeFilled)
this.fillPaint == orig(this.fillPaint)
this.fillPaint.getClass().getName() == orig(this.fillPaint.getClass().getName())
this.fillPaintTransformer == orig(this.fillPaintTransformer)
this.fillPaintTransformer.getClass().getName() == orig(this.fillPaintTransformer.getClass().getName())
this.shapeOutlineVisible == orig(this.shapeOutlineVisible)
this.outlinePaint == orig(this.outlinePaint)
this.outlinePaint.getClass().getName() == orig(this.outlinePaint.getClass().getName())
this.outlineStroke == orig(this.outlineStroke)
this.outlineStroke.getClass().getName() == orig(this.outlineStroke.getClass().getName())
this.lineVisible == orig(this.lineVisible)
this.line == orig(this.line)
this.line.getClass().getName() == orig(this.line.getClass().getName())
this.lineStroke == orig(this.lineStroke)
this.lineStroke.getClass().getName() == orig(this.lineStroke.getClass().getName())
this.linePaint == orig(this.linePaint)
this.linePaint.getClass().getName() == orig(this.linePaint.getClass().getName())
org.jfree.chart.LegendItem.UNUSED_SHAPE == orig(org.jfree.chart.LegendItem.UNUSED_SHAPE)
org.jfree.chart.LegendItem.UNUSED_SHAPE.getClass().getName() == orig(org.jfree.chart.LegendItem.UNUSED_SHAPE.getClass().getName())
org.jfree.chart.LegendItem.UNUSED_STROKE == orig(org.jfree.chart.LegendItem.UNUSED_STROKE)
org.jfree.chart.LegendItem.UNUSED_STROKE.getClass().getName() == orig(org.jfree.chart.LegendItem.UNUSED_STROKE.getClass().getName())
this.dataset has only one value
return has only one value
return.getClass().getName() == java.awt.geom.Ellipse2D$Double.class
===========================================================================
org.jfree.chart.LegendItem.getToolTipText():::ENTER
this.dataset has only one value
===========================================================================
org.jfree.chart.LegendItem.getToolTipText():::EXIT
this.dataset == orig(this.dataset)
this.dataset.getClass().getName() == orig(this.dataset.getClass().getName())
this.seriesKey == orig(this.seriesKey)
this.datasetIndex == orig(this.datasetIndex)
this.series == orig(this.series)
this.label == orig(this.label)
this.label.toString == orig(this.label.toString)
this.attributedLabel == orig(this.attributedLabel)
this.description == orig(this.description)
this.description.toString == orig(this.description.toString)
this.toolTipText == orig(this.toolTipText)
this.urlText == orig(this.urlText)
this.shapeVisible == orig(this.shapeVisible)
this.shape == orig(this.shape)
this.shape.getClass().getName() == orig(this.shape.getClass().getName())
this.shapeFilled == orig(this.shapeFilled)
this.fillPaint == orig(this.fillPaint)
this.fillPaint.getClass().getName() == orig(this.fillPaint.getClass().getName())
this.fillPaintTransformer == orig(this.fillPaintTransformer)
this.fillPaintTransformer.getClass().getName() == orig(this.fillPaintTransformer.getClass().getName())
this.shapeOutlineVisible == orig(this.shapeOutlineVisible)
this.outlinePaint == orig(this.outlinePaint)
this.outlinePaint.getClass().getName() == orig(this.outlinePaint.getClass().getName())
this.outlineStroke == orig(this.outlineStroke)
this.outlineStroke.getClass().getName() == orig(this.outlineStroke.getClass().getName())
this.lineVisible == orig(this.lineVisible)
this.line == orig(this.line)
this.line.getClass().getName() == orig(this.line.getClass().getName())
this.lineStroke == orig(this.lineStroke)
this.lineStroke.getClass().getName() == orig(this.lineStroke.getClass().getName())
this.linePaint == orig(this.linePaint)
this.linePaint.getClass().getName() == orig(this.linePaint.getClass().getName())
org.jfree.chart.LegendItem.UNUSED_SHAPE == orig(org.jfree.chart.LegendItem.UNUSED_SHAPE)
org.jfree.chart.LegendItem.UNUSED_SHAPE.getClass().getName() == orig(org.jfree.chart.LegendItem.UNUSED_SHAPE.getClass().getName())
org.jfree.chart.LegendItem.UNUSED_STROKE == orig(org.jfree.chart.LegendItem.UNUSED_STROKE)
org.jfree.chart.LegendItem.UNUSED_STROKE.getClass().getName() == orig(org.jfree.chart.LegendItem.UNUSED_STROKE.getClass().getName())
this.dataset has only one value
return == null
===========================================================================
org.jfree.chart.LegendItem.getURLText():::ENTER
this.dataset has only one value
===========================================================================
org.jfree.chart.LegendItem.getURLText():::EXIT
this.dataset == orig(this.dataset)
this.dataset.getClass().getName() == orig(this.dataset.getClass().getName())
this.seriesKey == orig(this.seriesKey)
this.datasetIndex == orig(this.datasetIndex)
this.series == orig(this.series)
this.label == orig(this.label)
this.label.toString == orig(this.label.toString)
this.attributedLabel == orig(this.attributedLabel)
this.description == orig(this.description)
this.description.toString == orig(this.description.toString)
this.toolTipText == orig(this.toolTipText)
this.urlText == orig(this.urlText)
this.shapeVisible == orig(this.shapeVisible)
this.shape == orig(this.shape)
this.shape.getClass().getName() == orig(this.shape.getClass().getName())
this.shapeFilled == orig(this.shapeFilled)
this.fillPaint == orig(this.fillPaint)
this.fillPaint.getClass().getName() == orig(this.fillPaint.getClass().getName())
this.fillPaintTransformer == orig(this.fillPaintTransformer)
this.fillPaintTransformer.getClass().getName() == orig(this.fillPaintTransformer.getClass().getName())
this.shapeOutlineVisible == orig(this.shapeOutlineVisible)
this.outlinePaint == orig(this.outlinePaint)
this.outlinePaint.getClass().getName() == orig(this.outlinePaint.getClass().getName())
this.outlineStroke == orig(this.outlineStroke)
this.outlineStroke.getClass().getName() == orig(this.outlineStroke.getClass().getName())
this.lineVisible == orig(this.lineVisible)
this.line == orig(this.line)
this.line.getClass().getName() == orig(this.line.getClass().getName())
this.lineStroke == orig(this.lineStroke)
this.lineStroke.getClass().getName() == orig(this.lineStroke.getClass().getName())
this.linePaint == orig(this.linePaint)
this.linePaint.getClass().getName() == orig(this.linePaint.getClass().getName())
org.jfree.chart.LegendItem.UNUSED_SHAPE == orig(org.jfree.chart.LegendItem.UNUSED_SHAPE)
org.jfree.chart.LegendItem.UNUSED_SHAPE.getClass().getName() == orig(org.jfree.chart.LegendItem.UNUSED_SHAPE.getClass().getName())
org.jfree.chart.LegendItem.UNUSED_STROKE == orig(org.jfree.chart.LegendItem.UNUSED_STROKE)
org.jfree.chart.LegendItem.UNUSED_STROKE.getClass().getName() == orig(org.jfree.chart.LegendItem.UNUSED_STROKE.getClass().getName())
this.dataset has only one value
return == null
===========================================================================
org.jfree.chart.LegendItem.isLineVisible():::ENTER
this.dataset has only one value
===========================================================================
org.jfree.chart.LegendItem.isLineVisible():::EXIT
this.dataset == orig(this.dataset)
this.dataset.getClass().getName() == orig(this.dataset.getClass().getName())
this.seriesKey == orig(this.seriesKey)
this.datasetIndex == orig(this.datasetIndex)
this.series == orig(this.series)
this.label == orig(this.label)
this.label.toString == orig(this.label.toString)
this.attributedLabel == orig(this.attributedLabel)
this.description == orig(this.description)
this.description.toString == orig(this.description.toString)
this.toolTipText == orig(this.toolTipText)
this.urlText == orig(this.urlText)
this.shapeVisible == orig(this.shapeVisible)
this.shape == orig(this.shape)
this.shape.getClass().getName() == orig(this.shape.getClass().getName())
this.shapeFilled == orig(this.shapeFilled)
this.fillPaint == orig(this.fillPaint)
this.fillPaint.getClass().getName() == orig(this.fillPaint.getClass().getName())
this.fillPaintTransformer == orig(this.fillPaintTransformer)
this.fillPaintTransformer.getClass().getName() == orig(this.fillPaintTransformer.getClass().getName())
this.shapeOutlineVisible == orig(this.shapeOutlineVisible)
this.outlinePaint == orig(this.outlinePaint)
this.outlinePaint.getClass().getName() == orig(this.outlinePaint.getClass().getName())
this.outlineStroke == orig(this.outlineStroke)
this.outlineStroke.getClass().getName() == orig(this.outlineStroke.getClass().getName())
this.lineVisible == orig(this.lineVisible)
this.line == orig(this.line)
this.line.getClass().getName() == orig(this.line.getClass().getName())
this.lineStroke == orig(this.lineStroke)
this.lineStroke.getClass().getName() == orig(this.lineStroke.getClass().getName())
this.linePaint == orig(this.linePaint)
this.linePaint.getClass().getName() == orig(this.linePaint.getClass().getName())
org.jfree.chart.LegendItem.UNUSED_SHAPE == orig(org.jfree.chart.LegendItem.UNUSED_SHAPE)
org.jfree.chart.LegendItem.UNUSED_SHAPE.getClass().getName() == orig(org.jfree.chart.LegendItem.UNUSED_SHAPE.getClass().getName())
org.jfree.chart.LegendItem.UNUSED_STROKE == orig(org.jfree.chart.LegendItem.UNUSED_STROKE)
org.jfree.chart.LegendItem.UNUSED_STROKE.getClass().getName() == orig(org.jfree.chart.LegendItem.UNUSED_STROKE.getClass().getName())
this.dataset has only one value
return == false
===========================================================================
org.jfree.chart.LegendItem.isLineVisible():::EXIT;condition="not(return == true)"
===========================================================================
org.jfree.chart.LegendItem.isShapeFilled():::ENTER
this.dataset has only one value
===========================================================================
org.jfree.chart.LegendItem.isShapeFilled():::EXIT
this.dataset == orig(this.dataset)
this.dataset.getClass().getName() == orig(this.dataset.getClass().getName())
this.seriesKey == orig(this.seriesKey)
this.datasetIndex == orig(this.datasetIndex)
this.series == orig(this.series)
this.label == orig(this.label)
this.label.toString == orig(this.label.toString)
this.attributedLabel == orig(this.attributedLabel)
this.description == orig(this.description)
this.description.toString == orig(this.description.toString)
this.toolTipText == orig(this.toolTipText)
this.urlText == orig(this.urlText)
this.shapeVisible == orig(this.shapeVisible)
this.shape == orig(this.shape)
this.shape.getClass().getName() == orig(this.shape.getClass().getName())
this.shapeFilled == orig(this.shapeFilled)
this.fillPaint == orig(this.fillPaint)
this.fillPaint.getClass().getName() == orig(this.fillPaint.getClass().getName())
this.fillPaintTransformer == orig(this.fillPaintTransformer)
this.fillPaintTransformer.getClass().getName() == orig(this.fillPaintTransformer.getClass().getName())
this.shapeOutlineVisible == orig(this.shapeOutlineVisible)
this.outlinePaint == orig(this.outlinePaint)
this.outlinePaint.getClass().getName() == orig(this.outlinePaint.getClass().getName())
this.outlineStroke == orig(this.outlineStroke)
this.outlineStroke.getClass().getName() == orig(this.outlineStroke.getClass().getName())
this.lineVisible == orig(this.lineVisible)
this.line == orig(this.line)
this.line.getClass().getName() == orig(this.line.getClass().getName())
this.lineStroke == orig(this.lineStroke)
this.lineStroke.getClass().getName() == orig(this.lineStroke.getClass().getName())
this.linePaint == orig(this.linePaint)
this.linePaint.getClass().getName() == orig(this.linePaint.getClass().getName())
org.jfree.chart.LegendItem.UNUSED_SHAPE == orig(org.jfree.chart.LegendItem.UNUSED_SHAPE)
org.jfree.chart.LegendItem.UNUSED_SHAPE.getClass().getName() == orig(org.jfree.chart.LegendItem.UNUSED_SHAPE.getClass().getName())
org.jfree.chart.LegendItem.UNUSED_STROKE == orig(org.jfree.chart.LegendItem.UNUSED_STROKE)
org.jfree.chart.LegendItem.UNUSED_STROKE.getClass().getName() == orig(org.jfree.chart.LegendItem.UNUSED_STROKE.getClass().getName())
this.dataset has only one value
return == true
===========================================================================
org.jfree.chart.LegendItem.isShapeFilled():::EXIT;condition="return == true"
===========================================================================
org.jfree.chart.LegendItem.isShapeOutlineVisible():::ENTER
this.dataset has only one value
===========================================================================
org.jfree.chart.LegendItem.isShapeOutlineVisible():::EXIT
this.dataset == orig(this.dataset)
this.dataset.getClass().getName() == orig(this.dataset.getClass().getName())
this.seriesKey == orig(this.seriesKey)
this.datasetIndex == orig(this.datasetIndex)
this.series == orig(this.series)
this.label == orig(this.label)
this.label.toString == orig(this.label.toString)
this.attributedLabel == orig(this.attributedLabel)
this.description == orig(this.description)
this.description.toString == orig(this.description.toString)
this.toolTipText == orig(this.toolTipText)
this.urlText == orig(this.urlText)
this.shapeVisible == orig(this.shapeVisible)
this.shape == orig(this.shape)
this.shape.getClass().getName() == orig(this.shape.getClass().getName())
this.shapeFilled == orig(this.shapeFilled)
this.fillPaint == orig(this.fillPaint)
this.fillPaint.getClass().getName() == orig(this.fillPaint.getClass().getName())
this.fillPaintTransformer == orig(this.fillPaintTransformer)
this.fillPaintTransformer.getClass().getName() == orig(this.fillPaintTransformer.getClass().getName())
this.shapeOutlineVisible == orig(this.shapeOutlineVisible)
this.outlinePaint == orig(this.outlinePaint)
this.outlinePaint.getClass().getName() == orig(this.outlinePaint.getClass().getName())
this.outlineStroke == orig(this.outlineStroke)
this.outlineStroke.getClass().getName() == orig(this.outlineStroke.getClass().getName())
this.lineVisible == orig(this.lineVisible)
this.line == orig(this.line)
this.line.getClass().getName() == orig(this.line.getClass().getName())
this.lineStroke == orig(this.lineStroke)
this.lineStroke.getClass().getName() == orig(this.lineStroke.getClass().getName())
this.linePaint == orig(this.linePaint)
this.linePaint.getClass().getName() == orig(this.linePaint.getClass().getName())
org.jfree.chart.LegendItem.UNUSED_SHAPE == orig(org.jfree.chart.LegendItem.UNUSED_SHAPE)
org.jfree.chart.LegendItem.UNUSED_SHAPE.getClass().getName() == orig(org.jfree.chart.LegendItem.UNUSED_SHAPE.getClass().getName())
org.jfree.chart.LegendItem.UNUSED_STROKE == orig(org.jfree.chart.LegendItem.UNUSED_STROKE)
org.jfree.chart.LegendItem.UNUSED_STROKE.getClass().getName() == orig(org.jfree.chart.LegendItem.UNUSED_STROKE.getClass().getName())
this.dataset has only one value
return == true
===========================================================================
org.jfree.chart.LegendItem.isShapeOutlineVisible():::EXIT;condition="return == true"
===========================================================================
org.jfree.chart.LegendItem.isShapeVisible():::ENTER
this.dataset has only one value
===========================================================================
org.jfree.chart.LegendItem.isShapeVisible():::EXIT
this.dataset == orig(this.dataset)
this.dataset.getClass().getName() == orig(this.dataset.getClass().getName())
this.seriesKey == orig(this.seriesKey)
this.datasetIndex == orig(this.datasetIndex)
this.series == orig(this.series)
this.label == orig(this.label)
this.label.toString == orig(this.label.toString)
this.attributedLabel == orig(this.attributedLabel)
this.description == orig(this.description)
this.description.toString == orig(this.description.toString)
this.toolTipText == orig(this.toolTipText)
this.urlText == orig(this.urlText)
this.shapeVisible == orig(this.shapeVisible)
this.shape == orig(this.shape)
this.shape.getClass().getName() == orig(this.shape.getClass().getName())
this.shapeFilled == orig(this.shapeFilled)
this.fillPaint == orig(this.fillPaint)
this.fillPaint.getClass().getName() == orig(this.fillPaint.getClass().getName())
this.fillPaintTransformer == orig(this.fillPaintTransformer)
this.fillPaintTransformer.getClass().getName() == orig(this.fillPaintTransformer.getClass().getName())
this.shapeOutlineVisible == orig(this.shapeOutlineVisible)
this.outlinePaint == orig(this.outlinePaint)
this.outlinePaint.getClass().getName() == orig(this.outlinePaint.getClass().getName())
this.outlineStroke == orig(this.outlineStroke)
this.outlineStroke.getClass().getName() == orig(this.outlineStroke.getClass().getName())
this.lineVisible == orig(this.lineVisible)
this.line == orig(this.line)
this.line.getClass().getName() == orig(this.line.getClass().getName())
this.lineStroke == orig(this.lineStroke)
this.lineStroke.getClass().getName() == orig(this.lineStroke.getClass().getName())
this.linePaint == orig(this.linePaint)
this.linePaint.getClass().getName() == orig(this.linePaint.getClass().getName())
org.jfree.chart.LegendItem.UNUSED_SHAPE == orig(org.jfree.chart.LegendItem.UNUSED_SHAPE)
org.jfree.chart.LegendItem.UNUSED_SHAPE.getClass().getName() == orig(org.jfree.chart.LegendItem.UNUSED_SHAPE.getClass().getName())
org.jfree.chart.LegendItem.UNUSED_STROKE == orig(org.jfree.chart.LegendItem.UNUSED_STROKE)
org.jfree.chart.LegendItem.UNUSED_STROKE.getClass().getName() == orig(org.jfree.chart.LegendItem.UNUSED_STROKE.getClass().getName())
this.dataset has only one value
return == true
===========================================================================
org.jfree.chart.LegendItem.isShapeVisible():::EXIT;condition="return == true"
===========================================================================
org.jfree.chart.LegendItem.setDataset(org.jfree.data.general.Dataset):::ENTER
this.dataset == null
dataset has only one value
dataset.getClass().getName() == org.jfree.data.general.DefaultPieDataset.class
===========================================================================
org.jfree.chart.LegendItem.setDataset(org.jfree.data.general.Dataset):::EXIT
this.seriesKey == orig(this.seriesKey)
this.datasetIndex == orig(this.datasetIndex)
this.series == orig(this.series)
this.label == orig(this.label)
this.label.toString == orig(this.label.toString)
this.attributedLabel == orig(this.attributedLabel)
this.description == orig(this.description)
this.description.toString == orig(this.description.toString)
this.toolTipText == orig(this.toolTipText)
this.urlText == orig(this.urlText)
this.shapeVisible == orig(this.shapeVisible)
this.shape == orig(this.shape)
this.shape.getClass().getName() == orig(this.shape.getClass().getName())
this.shapeFilled == orig(this.shapeFilled)
this.fillPaint == orig(this.fillPaint)
this.fillPaint.getClass().getName() == orig(this.fillPaint.getClass().getName())
this.fillPaintTransformer == orig(this.fillPaintTransformer)
this.fillPaintTransformer.getClass().getName() == orig(this.fillPaintTransformer.getClass().getName())
this.shapeOutlineVisible == orig(this.shapeOutlineVisible)
this.outlinePaint == orig(this.outlinePaint)
this.outlinePaint.getClass().getName() == orig(this.outlinePaint.getClass().getName())
this.outlineStroke == orig(this.outlineStroke)
this.outlineStroke.getClass().getName() == orig(this.outlineStroke.getClass().getName())
this.lineVisible == orig(this.lineVisible)
this.line == orig(this.line)
this.line.getClass().getName() == orig(this.line.getClass().getName())
this.lineStroke == orig(this.lineStroke)
this.lineStroke.getClass().getName() == orig(this.lineStroke.getClass().getName())
this.linePaint == orig(this.linePaint)
this.linePaint.getClass().getName() == orig(this.linePaint.getClass().getName())
org.jfree.chart.LegendItem.UNUSED_SHAPE == orig(org.jfree.chart.LegendItem.UNUSED_SHAPE)
org.jfree.chart.LegendItem.UNUSED_SHAPE.getClass().getName() == orig(org.jfree.chart.LegendItem.UNUSED_SHAPE.getClass().getName())
org.jfree.chart.LegendItem.UNUSED_STROKE == orig(org.jfree.chart.LegendItem.UNUSED_STROKE)
org.jfree.chart.LegendItem.UNUSED_STROKE.getClass().getName() == orig(org.jfree.chart.LegendItem.UNUSED_STROKE.getClass().getName())
this.dataset has only one value
===========================================================================
org.jfree.chart.LegendItemCollection:::CLASS
===========================================================================
org.jfree.chart.LegendItemCollection:::OBJECT
this.items != null
this.items[] elements != null
this.items[].getClass().getName() elements == org.jfree.chart.LegendItem.class
this.items.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.jfree.chart.LegendItemCollection.LegendItemCollection():::EXIT
this.items[] == []
this.items[].getClass().getName() == []
===========================================================================
org.jfree.chart.LegendItemCollection.add(org.jfree.chart.LegendItem):::ENTER
this has only one value
this.items has only one value
item.dataset has only one value
item.dataset.getClass().getName() == org.jfree.data.general.DefaultPieDataset.class
item.seriesKey == null
item.datasetIndex == 0
item.series == 0
item.label.toString one of { "Section 1", "Section 2", "Section 3" }
item.attributedLabel == null
item.description.toString one of { "Section 1", "Section 2", "Section 3" }
item.toolTipText == null
item.urlText == null
item.shapeVisible == true
item.shape has only one value
item.shape.getClass().getName() == java.awt.geom.Ellipse2D$Double.class
item.shapeFilled == true
item.fillPaint.getClass().getName() == java.awt.Color.class
item.fillPaintTransformer.getClass().getName() == org.jfree.chart.util.StandardGradientPaintTransformer.class
item.shapeOutlineVisible == true
item.outlinePaint has only one value
item.outlinePaint.getClass().getName() == java.awt.Color.class
item.outlineStroke has only one value
item.outlineStroke.getClass().getName() == java.awt.BasicStroke.class
item.lineVisible == false
item.line.getClass().getName() == java.awt.geom.Line2D$Float.class
item.lineStroke.getClass().getName() == java.awt.BasicStroke.class
item.linePaint has only one value
item.linePaint.getClass().getName() == java.awt.Color.class
org.jfree.chart.LegendItem.UNUSED_SHAPE has only one value
org.jfree.chart.LegendItem.UNUSED_SHAPE.getClass().getName() == java.awt.geom.Line2D$Float.class
org.jfree.chart.LegendItem.UNUSED_STROKE has only one value
org.jfree.chart.LegendItem.UNUSED_STROKE.getClass().getName() == java.awt.BasicStroke.class
size(this.items[]) one of { 0, 1, 2 }
===========================================================================
org.jfree.chart.LegendItemCollection.add(org.jfree.chart.LegendItem):::EXIT
this.items == orig(this.items)
this.items.getClass().getName() == orig(this.items.getClass().getName())
item.dataset == orig(item.dataset)
item.dataset.getClass().getName() == orig(item.dataset.getClass().getName())
item.seriesKey == orig(item.seriesKey)
item.datasetIndex == orig(item.datasetIndex)
item.series == orig(item.series)
item.label == orig(item.label)
item.label.toString == orig(item.label.toString)
item.attributedLabel == orig(item.attributedLabel)
item.description == orig(item.description)
item.description.toString == orig(item.description.toString)
item.toolTipText == orig(item.toolTipText)
item.urlText == orig(item.urlText)
item.shapeVisible == orig(item.shapeVisible)
item.shape == orig(item.shape)
item.shape.getClass().getName() == orig(item.shape.getClass().getName())
item.shapeFilled == orig(item.shapeFilled)
item.fillPaint == orig(item.fillPaint)
item.fillPaint.getClass().getName() == orig(item.fillPaint.getClass().getName())
item.fillPaintTransformer == orig(item.fillPaintTransformer)
item.fillPaintTransformer.getClass().getName() == orig(item.fillPaintTransformer.getClass().getName())
item.shapeOutlineVisible == orig(item.shapeOutlineVisible)
item.outlinePaint == orig(item.outlinePaint)
item.outlinePaint.getClass().getName() == orig(item.outlinePaint.getClass().getName())
item.outlineStroke == orig(item.outlineStroke)
item.outlineStroke.getClass().getName() == orig(item.outlineStroke.getClass().getName())
item.lineVisible == orig(item.lineVisible)
item.line == orig(item.line)
item.line.getClass().getName() == orig(item.line.getClass().getName())
item.lineStroke == orig(item.lineStroke)
item.lineStroke.getClass().getName() == orig(item.lineStroke.getClass().getName())
item.linePaint == orig(item.linePaint)
item.linePaint.getClass().getName() == orig(item.linePaint.getClass().getName())
org.jfree.chart.LegendItem.UNUSED_SHAPE == orig(org.jfree.chart.LegendItem.UNUSED_SHAPE)
org.jfree.chart.LegendItem.UNUSED_SHAPE.getClass().getName() == orig(org.jfree.chart.LegendItem.UNUSED_SHAPE.getClass().getName())
org.jfree.chart.LegendItem.UNUSED_STROKE == orig(org.jfree.chart.LegendItem.UNUSED_STROKE)
org.jfree.chart.LegendItem.UNUSED_STROKE.getClass().getName() == orig(org.jfree.chart.LegendItem.UNUSED_STROKE.getClass().getName())
size(this.items[])-1 == orig(size(this.items[]))
this.items has only one value
item.dataset has only one value
item.dataset.getClass().getName() == org.jfree.data.general.DefaultPieDataset.class
item.seriesKey == null
item.datasetIndex == 0
item.series == 0
item.label.toString one of { "Section 1", "Section 2", "Section 3" }
item.attributedLabel == null
item.description.toString one of { "Section 1", "Section 2", "Section 3" }
item.toolTipText == null
item.urlText == null
item.shapeVisible == true
item.shape has only one value
item.shape.getClass().getName() == java.awt.geom.Ellipse2D$Double.class
item.shapeFilled == true
item.fillPaint.getClass().getName() == java.awt.Color.class
item.fillPaintTransformer.getClass().getName() == org.jfree.chart.util.StandardGradientPaintTransformer.class
item.shapeOutlineVisible == true
item.outlinePaint has only one value
item.outlinePaint.getClass().getName() == java.awt.Color.class
item.outlineStroke has only one value
item.outlineStroke.getClass().getName() == java.awt.BasicStroke.class
item.lineVisible == false
item.line.getClass().getName() == java.awt.geom.Line2D$Float.class
item.lineStroke.getClass().getName() == java.awt.BasicStroke.class
item.linePaint has only one value
item.linePaint.getClass().getName() == java.awt.Color.class
org.jfree.chart.LegendItem.UNUSED_SHAPE has only one value
org.jfree.chart.LegendItem.UNUSED_SHAPE.getClass().getName() == java.awt.geom.Line2D$Float.class
org.jfree.chart.LegendItem.UNUSED_STROKE has only one value
org.jfree.chart.LegendItem.UNUSED_STROKE.getClass().getName() == java.awt.BasicStroke.class
size(this.items[]) one of { 1, 2, 3 }
===========================================================================
org.jfree.chart.LegendItemCollection.get(int):::ENTER
this has only one value
this.items has only one value
this.items[] contains no nulls and has only one value, of length 3
this.items[].getClass().getName() == [org.jfree.chart.LegendItem, org.jfree.chart.LegendItem, org.jfree.chart.LegendItem]
index one of { 0, 1, 2 }
size(this.items[]) == 3
===========================================================================
org.jfree.chart.LegendItemCollection.get(int):::EXIT
this.items == orig(this.items)
this.items[] == orig(this.items[])
this.items.getClass().getName() == orig(this.items.getClass().getName())
this.items has only one value
this.items[] contains no nulls and has only one value, of length 3
this.items[].getClass().getName() == [org.jfree.chart.LegendItem, org.jfree.chart.LegendItem, org.jfree.chart.LegendItem]
return.dataset has only one value
return.dataset.getClass().getName() == org.jfree.data.general.DefaultPieDataset.class
return.seriesKey == null
return.datasetIndex == 0
return.series == 0
return.label.toString one of { "Section 1", "Section 2", "Section 3" }
return.attributedLabel == null
return.description.toString one of { "Section 1", "Section 2", "Section 3" }
return.toolTipText == null
return.urlText == null
return.shapeVisible == true
return.shape has only one value
return.shape.getClass().getName() == java.awt.geom.Ellipse2D$Double.class
return.shapeFilled == true
return.fillPaint.getClass().getName() == java.awt.Color.class
return.fillPaintTransformer.getClass().getName() == org.jfree.chart.util.StandardGradientPaintTransformer.class
return.shapeOutlineVisible == true
return.outlinePaint has only one value
return.outlinePaint.getClass().getName() == java.awt.Color.class
return.outlineStroke has only one value
return.outlineStroke.getClass().getName() == java.awt.BasicStroke.class
return.lineVisible == false
return.line.getClass().getName() == java.awt.geom.Line2D$Float.class
return.lineStroke.getClass().getName() == java.awt.BasicStroke.class
return.linePaint has only one value
return.linePaint.getClass().getName() == java.awt.Color.class
org.jfree.chart.LegendItem.UNUSED_SHAPE has only one value
org.jfree.chart.LegendItem.UNUSED_SHAPE.getClass().getName() == java.awt.geom.Line2D$Float.class
org.jfree.chart.LegendItem.UNUSED_STROKE has only one value
org.jfree.chart.LegendItem.UNUSED_STROKE.getClass().getName() == java.awt.BasicStroke.class
size(this.items[]) == 3
===========================================================================
org.jfree.chart.LegendItemCollection.getItemCount():::ENTER
this.items[].getClass().getName() one of { [], [org.jfree.chart.LegendItem, org.jfree.chart.LegendItem, org.jfree.chart.LegendItem] }
size(this.items[]) one of { 0, 3 }
===========================================================================
org.jfree.chart.LegendItemCollection.getItemCount():::EXIT
this.items == orig(this.items)
this.items[] == orig(this.items[])
this.items.getClass().getName() == orig(this.items.getClass().getName())
this.items[].getClass().getName() one of { [], [org.jfree.chart.LegendItem, org.jfree.chart.LegendItem, org.jfree.chart.LegendItem] }
return one of { 0, 3 }
size(this.items[]) one of { 0, 3 }
===========================================================================
org.jfree.chart.PaintMap:::OBJECT
this.store != null
this.store.getClass().getName() == java.util.HashMap.class
===========================================================================
org.jfree.chart.PaintMap.PaintMap():::EXIT
===========================================================================
org.jfree.chart.PaintMap.getPaint(java.lang.Comparable):::ENTER
key.getClass().getName() == java.lang.String.class
===========================================================================
org.jfree.chart.PaintMap.getPaint(java.lang.Comparable):::EXIT
this.store == orig(this.store)
this.store.getClass().getName() == orig(this.store.getClass().getName())
return == null
===========================================================================
org.jfree.chart.PaintMap.put(java.lang.Comparable, java.awt.Paint):::ENTER
this has only one value
this.store has only one value
key.getClass().getName() == java.lang.String.class
paint.getClass().getName() == java.awt.Color.class
===========================================================================
org.jfree.chart.PaintMap.put(java.lang.Comparable, java.awt.Paint):::EXIT
this.store == orig(this.store)
this.store.getClass().getName() == orig(this.store.getClass().getName())
this.store has only one value
===========================================================================
org.jfree.chart.StrokeMap:::OBJECT
this.store.getClass().getName() == java.util.TreeMap.class
===========================================================================
org.jfree.chart.StrokeMap.StrokeMap():::EXIT
===========================================================================
org.jfree.chart.StrokeMap.getStroke(java.lang.Comparable):::ENTER
this has only one value
this.store has only one value
key.getClass().getName() == java.lang.String.class
===========================================================================
org.jfree.chart.StrokeMap.getStroke(java.lang.Comparable):::EXIT
this.store == orig(this.store)
this.store.getClass().getName() == orig(this.store.getClass().getName())
this.store has only one value
return == null
===========================================================================
org.jfree.chart.block.AbstractBlock:::CLASS
===========================================================================
org.jfree.chart.block.AbstractBlock:::OBJECT
this.id == null
this.margin != null
org.jfree.chart.util.RectangleInsets.ZERO_INSETS has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS != null
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType != null
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == 0.0
this.margin.unitType has only one value
this.margin.unitType != null
org.jfree.chart.util.UnitType.ABSOLUTE has only one value
org.jfree.chart.util.UnitType.ABSOLUTE != null
org.jfree.chart.util.UnitType.RELATIVE has only one value
org.jfree.chart.util.UnitType.RELATIVE != null
this.margin.unitType.name has only one value
this.margin.unitType.name != null
this.margin.unitType.name.toString == "UnitType.ABSOLUTE"
this.margin.top one of { 0.0, 1.0 }
this.margin.left one of { 0.0, 1.0 }
this.margin.bottom one of { 0.0, 1.0 }
this.margin.right one of { 0.0, 1.0 }
this.frame != null
this.padding != null
this.padding.unitType has only one value
this.padding.unitType != null
this.padding.unitType.name has only one value
this.padding.unitType.name != null
this.padding.unitType.name.toString == "UnitType.ABSOLUTE"
this.padding.top one of { 0.0, 1.0, 2.0 }
this.padding.left one of { 0.0, 1.0, 2.0 }
this.padding.bottom one of { 0.0, 1.0, 2.0 }
this.padding.right one of { 0.0, 1.0, 2.0 }
this.width == 0.0
this.height == 0.0
this.bounds != null
===========================================================================
org.jfree.chart.block.AbstractBlock.AbstractBlock():::EXIT
this.margin has only one value
this.margin.top == 0.0
this.margin.left == 0.0
this.margin.bottom == 0.0
this.margin.right == 0.0
this.frame has only one value
this.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class
this.padding has only one value
this.padding.top == 0.0
this.padding.left == 0.0
this.padding.bottom == 0.0
this.padding.right == 0.0
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
===========================================================================
org.jfree.chart.block.AbstractBlock.calculateTotalHeight(double):::ENTER
===========================================================================
org.jfree.chart.block.AbstractBlock.calculateTotalHeight(double):::EXIT
this.id == orig(this.id)
this.margin == orig(this.margin)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.margin.unitType == orig(this.margin.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
===========================================================================
org.jfree.chart.block.AbstractBlock.calculateTotalWidth(double):::ENTER
===========================================================================
org.jfree.chart.block.AbstractBlock.calculateTotalWidth(double):::EXIT
this.id == orig(this.id)
this.margin == orig(this.margin)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.margin.unitType == orig(this.margin.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
===========================================================================
org.jfree.chart.block.AbstractBlock.drawBorder(java.awt.Graphics2D, java.awt.geom.Rectangle2D):::ENTER
this.margin has only one value
this.margin.top == 0.0
this.margin.left == 0.0
this.margin.bottom == 0.0
this.margin.right == 0.0
this.frame has only one value
this.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class
g2 != null
g2.getClass().getName() == sun.java2d.SunGraphics2D.class
area != null
area.getClass().getName() == java.awt.geom.Rectangle2D$Double.class
===========================================================================
org.jfree.chart.block.AbstractBlock.drawBorder(java.awt.Graphics2D, java.awt.geom.Rectangle2D):::EXIT
this.id == orig(this.id)
this.margin == orig(this.margin)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.margin.unitType == orig(this.margin.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
this.margin has only one value
this.margin.top == 0.0
this.margin.left == 0.0
this.margin.bottom == 0.0
this.margin.right == 0.0
this.frame has only one value
this.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class
===========================================================================
org.jfree.chart.block.AbstractBlock.getBounds():::ENTER
this.margin has only one value
this.margin.top == 0.0
this.margin.left == 0.0
this.margin.bottom == 0.0
this.margin.right == 0.0
this.frame has only one value
this.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class
this.padding.top one of { 0.0, 2.0 }
this.padding.left one of { 0.0, 2.0 }
this.padding.bottom one of { 0.0, 2.0 }
this.padding.right one of { 0.0, 2.0 }
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Double.class
===========================================================================
org.jfree.chart.block.AbstractBlock.getBounds():::EXIT
this.id == orig(this.id)
this.margin == orig(this.margin)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.margin.unitType == orig(this.margin.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
this.margin has only one value
this.margin.top == 0.0
this.margin.left == 0.0
this.margin.bottom == 0.0
this.margin.right == 0.0
this.frame has only one value
this.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class
this.padding.top one of { 0.0, 2.0 }
this.padding.left one of { 0.0, 2.0 }
this.padding.bottom one of { 0.0, 2.0 }
this.padding.right one of { 0.0, 2.0 }
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Double.class
return != null
return.getClass().getName() == java.awt.geom.Rectangle2D$Double.class
===========================================================================
org.jfree.chart.block.AbstractBlock.getFrame():::ENTER
this.margin.top == 1.0
this.margin.left == 1.0
this.margin.bottom == 1.0
this.margin.right == 1.0
this.frame.getClass().getName() == org.jfree.chart.block.LineBorder.class
this.padding has only one value
this.padding.top == 1.0
this.padding.left == 1.0
this.padding.bottom == 1.0
this.padding.right == 1.0
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
===========================================================================
org.jfree.chart.block.AbstractBlock.getFrame():::EXIT
this.id == orig(this.id)
this.margin == orig(this.margin)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.margin.unitType == orig(this.margin.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
this.margin.top == 1.0
this.margin.left == 1.0
this.margin.bottom == 1.0
this.margin.right == 1.0
this.frame.getClass().getName() == org.jfree.chart.block.LineBorder.class
this.padding has only one value
this.padding.top == 1.0
this.padding.left == 1.0
this.padding.bottom == 1.0
this.padding.right == 1.0
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
return.getClass().getName() == org.jfree.chart.block.LineBorder.class
===========================================================================
org.jfree.chart.block.AbstractBlock.setBounds(java.awt.geom.Rectangle2D):::ENTER
this.margin has only one value
this.margin.top == 0.0
this.margin.left == 0.0
this.margin.bottom == 0.0
this.margin.right == 0.0
this.frame has only one value
this.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class
this.padding.top one of { 0.0, 2.0 }
this.padding.left one of { 0.0, 2.0 }
this.padding.bottom one of { 0.0, 2.0 }
this.padding.right one of { 0.0, 2.0 }
bounds != null
bounds.getClass().getName() == java.awt.geom.Rectangle2D$Double.class
===========================================================================
org.jfree.chart.block.AbstractBlock.setBounds(java.awt.geom.Rectangle2D):::EXIT
this.id == orig(this.id)
this.margin == orig(this.margin)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.margin.unitType == orig(this.margin.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.margin has only one value
this.margin.top == 0.0
this.margin.left == 0.0
this.margin.bottom == 0.0
this.margin.right == 0.0
this.frame has only one value
this.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class
this.padding.top one of { 0.0, 2.0 }
this.padding.left one of { 0.0, 2.0 }
this.padding.bottom one of { 0.0, 2.0 }
this.padding.right one of { 0.0, 2.0 }
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Double.class
===========================================================================
org.jfree.chart.block.AbstractBlock.setFrame(org.jfree.chart.block.BlockFrame):::ENTER
this.margin.top == 1.0
this.margin.left == 1.0
this.margin.bottom == 1.0
this.margin.right == 1.0
this.frame has only one value
this.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class
this.padding has only one value
this.padding.top == 1.0
this.padding.left == 1.0
this.padding.bottom == 1.0
this.padding.right == 1.0
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
frame.getClass().getName() == org.jfree.chart.block.LineBorder.class
===========================================================================
org.jfree.chart.block.AbstractBlock.setFrame(org.jfree.chart.block.BlockFrame):::EXIT
this.id == orig(this.id)
this.margin == orig(this.margin)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.margin.unitType == orig(this.margin.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
this.margin.top == 1.0
this.margin.left == 1.0
this.margin.bottom == 1.0
this.margin.right == 1.0
this.frame.getClass().getName() == org.jfree.chart.block.LineBorder.class
this.padding has only one value
this.padding.top == 1.0
this.padding.left == 1.0
this.padding.bottom == 1.0
this.padding.right == 1.0
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
===========================================================================
org.jfree.chart.block.AbstractBlock.setMargin(org.jfree.chart.util.RectangleInsets):::ENTER
this.margin has only one value
this.margin.top == 0.0
this.margin.left == 0.0
this.margin.bottom == 0.0
this.margin.right == 0.0
this.frame has only one value
this.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class
this.padding has only one value
this.padding.top == 1.0
this.padding.left == 1.0
this.padding.bottom == 1.0
this.padding.right == 1.0
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
margin.unitType has only one value
margin.unitType.name has only one value
margin.unitType.name.toString == "UnitType.ABSOLUTE"
margin.top == 1.0
margin.left == 1.0
margin.bottom == 1.0
margin.right == 1.0
===========================================================================
org.jfree.chart.block.AbstractBlock.setMargin(org.jfree.chart.util.RectangleInsets):::EXIT
this.id == orig(this.id)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.margin.unitType == orig(this.margin.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
margin.unitType == orig(margin.unitType)
margin.unitType.name == orig(margin.unitType.name)
margin.unitType.name.toString == orig(margin.unitType.name.toString)
margin.top == orig(margin.top)
margin.left == orig(margin.left)
margin.bottom == orig(margin.bottom)
margin.right == orig(margin.right)
this.margin.top == 1.0
this.margin.left == 1.0
this.margin.bottom == 1.0
this.margin.right == 1.0
this.frame has only one value
this.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class
this.padding has only one value
this.padding.top == 1.0
this.padding.left == 1.0
this.padding.bottom == 1.0
this.padding.right == 1.0
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
margin.unitType has only one value
margin.unitType.name has only one value
margin.unitType.name.toString == "UnitType.ABSOLUTE"
margin.top == 1.0
margin.left == 1.0
margin.bottom == 1.0
margin.right == 1.0
===========================================================================
org.jfree.chart.block.AbstractBlock.setPadding(double, double, double, double):::ENTER
this.margin has only one value
this.margin.top == 0.0
this.margin.left == 0.0
this.margin.bottom == 0.0
this.margin.right == 0.0
this.frame has only one value
this.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class
this.padding has only one value
this.padding.top == 0.0
this.padding.left == 0.0
this.padding.bottom == 0.0
this.padding.right == 0.0
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
top == 2.0
left == 2.0
bottom == 2.0
right == 2.0
===========================================================================
org.jfree.chart.block.AbstractBlock.setPadding(double, double, double, double):::EXIT
this.id == orig(this.id)
this.margin == orig(this.margin)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.margin.unitType == orig(this.margin.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
this.margin has only one value
this.margin.top == 0.0
this.margin.left == 0.0
this.margin.bottom == 0.0
this.margin.right == 0.0
this.frame has only one value
this.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class
this.padding.top == 2.0
this.padding.left == 2.0
this.padding.bottom == 2.0
this.padding.right == 2.0
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
===========================================================================
org.jfree.chart.block.AbstractBlock.setPadding(org.jfree.chart.util.RectangleInsets):::ENTER
this.margin has only one value
this.margin.top == 0.0
this.margin.left == 0.0
this.margin.bottom == 0.0
this.margin.right == 0.0
this.frame has only one value
this.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class
this.padding.top one of { 0.0, 2.0 }
this.padding.left one of { 0.0, 2.0 }
this.padding.bottom one of { 0.0, 2.0 }
this.padding.right one of { 0.0, 2.0 }
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
padding != null
padding.unitType has only one value
padding.unitType != null
padding.unitType.name has only one value
padding.unitType.name != null
padding.unitType.name.toString == "UnitType.ABSOLUTE"
padding.top one of { 1.0, 2.0 }
padding.left one of { 1.0, 2.0 }
padding.bottom one of { 1.0, 2.0 }
padding.right one of { 1.0, 2.0 }
===========================================================================
org.jfree.chart.block.AbstractBlock.setPadding(org.jfree.chart.util.RectangleInsets):::EXIT
this.id == orig(this.id)
this.margin == orig(this.margin)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.margin.unitType == orig(this.margin.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
padding.unitType == orig(padding.unitType)
padding.unitType.name == orig(padding.unitType.name)
padding.unitType.name.toString == orig(padding.unitType.name.toString)
padding.top == orig(padding.top)
padding.left == orig(padding.left)
padding.bottom == orig(padding.bottom)
padding.right == orig(padding.right)
this.margin has only one value
this.margin.top == 0.0
this.margin.left == 0.0
this.margin.bottom == 0.0
this.margin.right == 0.0
this.frame has only one value
this.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class
this.padding.top one of { 1.0, 2.0 }
this.padding.left one of { 1.0, 2.0 }
this.padding.bottom one of { 1.0, 2.0 }
this.padding.right one of { 1.0, 2.0 }
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
padding.unitType has only one value
padding.unitType != null
padding.unitType.name has only one value
padding.unitType.name != null
padding.unitType.name.toString == "UnitType.ABSOLUTE"
padding.top one of { 1.0, 2.0 }
padding.left one of { 1.0, 2.0 }
padding.bottom one of { 1.0, 2.0 }
padding.right one of { 1.0, 2.0 }
this.padding.top >= orig(this.padding.top)
this.padding.left >= orig(this.padding.left)
this.padding.bottom >= orig(this.padding.bottom)
this.padding.right >= orig(this.padding.right)
===========================================================================
org.jfree.chart.block.AbstractBlock.toContentConstraint(org.jfree.chart.block.RectangleConstraint):::ENTER
c != null
org.jfree.chart.block.RectangleConstraint.NONE has only one value
org.jfree.chart.block.RectangleConstraint.NONE != null
org.jfree.chart.block.RectangleConstraint.NONE.width == 0.0
org.jfree.chart.block.RectangleConstraint.NONE.widthRange == null
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType has only one value
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType != null
org.jfree.chart.block.RectangleConstraint.NONE.height == 0.0
org.jfree.chart.block.RectangleConstraint.NONE.heightRange == null
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType has only one value
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType != null
c.width one of { 0.0, 200.0 }
c.widthRange.lower == 0.0
c.widthRange.upper == 200.0
c.widthConstraintType != null
org.jfree.chart.block.LengthConstraintType.NONE has only one value
org.jfree.chart.block.LengthConstraintType.NONE != null
org.jfree.chart.block.LengthConstraintType.RANGE has only one value
org.jfree.chart.block.LengthConstraintType.RANGE != null
org.jfree.chart.block.LengthConstraintType.FIXED has only one value
org.jfree.chart.block.LengthConstraintType.FIXED != null
c.widthConstraintType.name != null
c.widthConstraintType.name.toString one of { "LengthConstraintType.NONE", "RectangleConstraintType.RANGE" }
c.height one of { 0.0, 77.046875, 100.0 }
c.heightRange.lower == 0.0
c.heightRange.upper one of { 77.046875, 100.0 }
c.heightConstraintType != null
c.heightConstraintType.name != null
c.heightConstraintType.name.toString one of { "LengthConstraintType.NONE", "RectangleConstraintType.RANGE" }
===========================================================================
org.jfree.chart.block.AbstractBlock.toContentConstraint(org.jfree.chart.block.RectangleConstraint):::EXIT420
this.margin has only one value
this.margin.top == 0.0
this.margin.left == 0.0
this.margin.bottom == 0.0
this.margin.right == 0.0
this.frame has only one value
this.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class
this.padding.top one of { 0.0, 2.0 }
this.padding.left one of { 0.0, 2.0 }
this.padding.bottom one of { 0.0, 2.0 }
this.padding.right one of { 0.0, 2.0 }
c.width == 0.0
c.widthRange == null
c.widthConstraintType has only one value
c.widthConstraintType.name has only one value
c.widthConstraintType.name.toString == "LengthConstraintType.NONE"
c.height == 0.0
c.heightRange == null
c.heightConstraintType has only one value
c.heightConstraintType.name has only one value
c.heightConstraintType.name.toString == "LengthConstraintType.NONE"
return has only one value
return.width == 0.0
return.widthRange == null
return.widthConstraintType has only one value
return.widthConstraintType.name has only one value
return.widthConstraintType.name.toString == "LengthConstraintType.NONE"
return.height == 0.0
return.heightRange == null
return.heightConstraintType has only one value
return.heightConstraintType.name has only one value
return.heightConstraintType.name.toString == "LengthConstraintType.NONE"
orig(c) has only one value
===========================================================================
org.jfree.chart.block.AbstractBlock.toContentConstraint(org.jfree.chart.block.RectangleConstraint):::EXIT430
this.padding has only one value
this.padding.top == 1.0
this.padding.left == 1.0
this.padding.bottom == 1.0
this.padding.right == 1.0
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
c.width == 200.0
c.widthConstraintType has only one value
c.widthConstraintType.name has only one value
c.widthConstraintType.name.toString == "RectangleConstraintType.RANGE"
c.height one of { 77.046875, 100.0 }
c.heightConstraintType has only one value
c.heightConstraintType.name has only one value
c.heightConstraintType.name.toString == "RectangleConstraintType.RANGE"
return.width one of { 194.0, 198.0 }
return.widthConstraintType has only one value
return.widthConstraintType.name has only one value
return.widthConstraintType.name.toString == "RectangleConstraintType.RANGE"
return.height one of { 71.046875, 98.0 }
return.heightConstraintType has only one value
return.heightConstraintType.name has only one value
return.heightConstraintType.name.toString == "RectangleConstraintType.RANGE"
===========================================================================
org.jfree.chart.block.AbstractBlock.toContentConstraint(org.jfree.chart.block.RectangleConstraint):::EXIT
this.id == orig(this.id)
this.margin == orig(this.margin)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.margin.unitType == orig(this.margin.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
org.jfree.chart.block.RectangleConstraint.NONE == orig(org.jfree.chart.block.RectangleConstraint.NONE)
org.jfree.chart.block.RectangleConstraint.NONE.width == orig(org.jfree.chart.block.RectangleConstraint.NONE.width)
org.jfree.chart.block.RectangleConstraint.NONE.widthRange == orig(org.jfree.chart.block.RectangleConstraint.NONE.widthRange)
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType == orig(org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType)
org.jfree.chart.block.RectangleConstraint.NONE.height == orig(org.jfree.chart.block.RectangleConstraint.NONE.height)
org.jfree.chart.block.RectangleConstraint.NONE.heightRange == orig(org.jfree.chart.block.RectangleConstraint.NONE.heightRange)
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType == orig(org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType)
c.width == orig(c.width)
c.widthRange == orig(c.widthRange)
c.widthRange.lower == orig(c.widthRange.lower)
c.widthRange.upper == orig(c.widthRange.upper)
c.widthConstraintType == orig(c.widthConstraintType)
org.jfree.chart.block.LengthConstraintType.NONE == orig(org.jfree.chart.block.LengthConstraintType.NONE)
org.jfree.chart.block.LengthConstraintType.RANGE == orig(org.jfree.chart.block.LengthConstraintType.RANGE)
org.jfree.chart.block.LengthConstraintType.FIXED == orig(org.jfree.chart.block.LengthConstraintType.FIXED)
c.widthConstraintType.name == orig(c.widthConstraintType.name)
c.widthConstraintType.name.toString == orig(c.widthConstraintType.name.toString)
c.height == orig(c.height)
c.heightRange == orig(c.heightRange)
c.heightRange.lower == orig(c.heightRange.lower)
c.heightRange.upper == orig(c.heightRange.upper)
c.heightConstraintType == orig(c.heightConstraintType)
c.heightConstraintType.name == orig(c.heightConstraintType.name)
c.heightConstraintType.name.toString == orig(c.heightConstraintType.name.toString)
(this.padding.top == 1.0)  <==>  (c.height one of { 77.046875, 100.0 })
(this.padding.top == 1.0)  <==>  (c.heightConstraintType.name.toString == "RectangleConstraintType.RANGE")
(this.padding.top == 1.0)  <==>  (c.width == 200.0)
(this.padding.top == 1.0)  <==>  (c.widthConstraintType.name.toString == "RectangleConstraintType.RANGE")
(this.padding.top == 1.0)  <==>  (return.height one of { 71.046875, 98.0 })
(this.padding.top == 1.0)  <==>  (return.heightConstraintType.name.toString == "RectangleConstraintType.RANGE")
(this.padding.top == 1.0)  <==>  (return.width one of { 194.0, 198.0 })
(this.padding.top == 1.0)  <==>  (return.widthConstraintType.name.toString == "RectangleConstraintType.RANGE")
(this.padding.top == 1.0)  <==>  (this.padding.bottom == 1.0)
(this.padding.top == 1.0)  <==>  (this.padding.left == 1.0)
(this.padding.top == 1.0)  <==>  (this.padding.right == 1.0)
(this.padding.top == 1.0)  ==>  (c.heightRange.upper one of { 77.046875, 100.0 })
(this.padding.top == 1.0)  ==>  (return.heightRange.upper one of { 71.046875, 98.0 })
(this.padding.top == 1.0)  ==>  (return.widthRange.upper one of { 194.0, 198.0 })
(this.padding.top == 1.0)  ==>  (this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class)
(this.padding.top == 1.0)  ==>  (this.margin.bottom one of { 0.0, 1.0 })
(this.padding.top == 1.0)  ==>  (this.margin.left one of { 0.0, 1.0 })
(this.padding.top == 1.0)  ==>  (this.margin.right one of { 0.0, 1.0 })
(this.padding.top == 1.0)  ==>  (this.margin.top one of { 0.0, 1.0 })
(this.padding.top == 1.0)  ==>  (this.padding has only one value)
(this.padding.top one of { 0.0, 2.0 })  <==>  (c.height == 0.0)
(this.padding.top one of { 0.0, 2.0 })  <==>  (c.heightConstraintType.name.toString == "LengthConstraintType.NONE")
(this.padding.top one of { 0.0, 2.0 })  <==>  (c.heightRange == null)
(this.padding.top one of { 0.0, 2.0 })  <==>  (c.width == 0.0)
(this.padding.top one of { 0.0, 2.0 })  <==>  (c.widthConstraintType.name.toString == "LengthConstraintType.NONE")
(this.padding.top one of { 0.0, 2.0 })  <==>  (c.widthRange == null)
(this.padding.top one of { 0.0, 2.0 })  <==>  (return.height == 0.0)
(this.padding.top one of { 0.0, 2.0 })  <==>  (return.heightConstraintType.name.toString == "LengthConstraintType.NONE")
(this.padding.top one of { 0.0, 2.0 })  <==>  (return.heightRange == null)
(this.padding.top one of { 0.0, 2.0 })  <==>  (return.width == 0.0)
(this.padding.top one of { 0.0, 2.0 })  <==>  (return.widthConstraintType.name.toString == "LengthConstraintType.NONE")
(this.padding.top one of { 0.0, 2.0 })  <==>  (return.widthRange == null)
(this.padding.top one of { 0.0, 2.0 })  <==>  (this.padding.bottom one of { 0.0, 2.0 })
(this.padding.top one of { 0.0, 2.0 })  <==>  (this.padding.left one of { 0.0, 2.0 })
(this.padding.top one of { 0.0, 2.0 })  <==>  (this.padding.right one of { 0.0, 2.0 })
(this.padding.top one of { 0.0, 2.0 })  ==>  (orig(c) has only one value)
(this.padding.top one of { 0.0, 2.0 })  ==>  (return has only one value)
(this.padding.top one of { 0.0, 2.0 })  ==>  (this.frame has only one value)
(this.padding.top one of { 0.0, 2.0 })  ==>  (this.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class)
(this.padding.top one of { 0.0, 2.0 })  ==>  (this.margin has only one value)
(this.padding.top one of { 0.0, 2.0 })  ==>  (this.margin.bottom == 0.0)
(this.padding.top one of { 0.0, 2.0 })  ==>  (this.margin.left == 0.0)
(this.padding.top one of { 0.0, 2.0 })  ==>  (this.margin.right == 0.0)
(this.padding.top one of { 0.0, 2.0 })  ==>  (this.margin.top == 0.0)
org.jfree.chart.block.RectangleConstraint.NONE has only one value
org.jfree.chart.block.RectangleConstraint.NONE != null
org.jfree.chart.block.RectangleConstraint.NONE.width == 0.0
org.jfree.chart.block.RectangleConstraint.NONE.widthRange == null
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType has only one value
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType != null
org.jfree.chart.block.RectangleConstraint.NONE.height == 0.0
org.jfree.chart.block.RectangleConstraint.NONE.heightRange == null
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType has only one value
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType != null
c.width one of { 0.0, 200.0 }
c.widthRange.lower == 0.0
c.widthRange.upper == 200.0
c.widthConstraintType != null
org.jfree.chart.block.LengthConstraintType.NONE has only one value
org.jfree.chart.block.LengthConstraintType.NONE != null
org.jfree.chart.block.LengthConstraintType.RANGE has only one value
org.jfree.chart.block.LengthConstraintType.RANGE != null
org.jfree.chart.block.LengthConstraintType.FIXED has only one value
org.jfree.chart.block.LengthConstraintType.FIXED != null
c.widthConstraintType.name != null
c.widthConstraintType.name.toString one of { "LengthConstraintType.NONE", "RectangleConstraintType.RANGE" }
c.height one of { 0.0, 77.046875, 100.0 }
c.heightRange.lower == 0.0
c.heightRange.upper one of { 77.046875, 100.0 }
c.heightConstraintType != null
c.heightConstraintType.name != null
c.heightConstraintType.name.toString one of { "LengthConstraintType.NONE", "RectangleConstraintType.RANGE" }
return != null
return.width one of { 0.0, 194.0, 198.0 }
return.widthRange.lower == 0.0
return.widthRange.upper one of { 194.0, 198.0 }
return.widthConstraintType != null
return.widthConstraintType.name != null
return.widthConstraintType.name.toString one of { "LengthConstraintType.NONE", "RectangleConstraintType.RANGE" }
return.height one of { 0.0, 71.046875, 98.0 }
return.heightRange.lower == 0.0
return.heightRange.upper one of { 71.046875, 98.0 }
return.heightConstraintType != null
return.heightConstraintType.name != null
return.heightConstraintType.name.toString one of { "LengthConstraintType.NONE", "RectangleConstraintType.RANGE" }
===========================================================================
org.jfree.chart.block.AbstractBlock.trimBorder(java.awt.geom.Rectangle2D):::ENTER
this.margin has only one value
this.margin.top == 0.0
this.margin.left == 0.0
this.margin.bottom == 0.0
this.margin.right == 0.0
this.frame has only one value
this.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class
area != null
area.getClass().getName() == java.awt.geom.Rectangle2D$Double.class
===========================================================================
org.jfree.chart.block.AbstractBlock.trimBorder(java.awt.geom.Rectangle2D):::EXIT
this.id == orig(this.id)
this.margin == orig(this.margin)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.margin.unitType == orig(this.margin.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
this.margin has only one value
this.margin.top == 0.0
this.margin.left == 0.0
this.margin.bottom == 0.0
this.margin.right == 0.0
this.frame has only one value
this.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class
return != null
return.getClass().getName() == java.awt.geom.Rectangle2D$Double.class
===========================================================================
org.jfree.chart.block.AbstractBlock.trimMargin(java.awt.geom.Rectangle2D):::ENTER
area != null
area.getClass().getName() == java.awt.geom.Rectangle2D$Double.class
===========================================================================
org.jfree.chart.block.AbstractBlock.trimMargin(java.awt.geom.Rectangle2D):::EXIT
this.id == orig(this.id)
this.margin == orig(this.margin)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.margin.unitType == orig(this.margin.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
return != null
return.getClass().getName() == java.awt.geom.Rectangle2D$Double.class
===========================================================================
org.jfree.chart.block.AbstractBlock.trimPadding(java.awt.geom.Rectangle2D):::ENTER
area != null
area.getClass().getName() == java.awt.geom.Rectangle2D$Double.class
===========================================================================
org.jfree.chart.block.AbstractBlock.trimPadding(java.awt.geom.Rectangle2D):::EXIT
this.id == orig(this.id)
this.margin == orig(this.margin)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.margin.unitType == orig(this.margin.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
return != null
return.getClass().getName() == java.awt.geom.Rectangle2D$Double.class
===========================================================================
org.jfree.chart.block.AbstractBlock.trimToContentHeight(double):::ENTER
this.padding has only one value
this.padding.top == 1.0
this.padding.left == 1.0
this.padding.bottom == 1.0
this.padding.right == 1.0
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
fixedHeight one of { 77.046875, 100.0 }
===========================================================================
org.jfree.chart.block.AbstractBlock.trimToContentHeight(double):::EXIT
this.id == orig(this.id)
this.margin == orig(this.margin)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.margin.unitType == orig(this.margin.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
this.padding has only one value
this.padding.top == 1.0
this.padding.left == 1.0
this.padding.bottom == 1.0
this.padding.right == 1.0
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
return one of { 71.046875, 98.0 }
===========================================================================
org.jfree.chart.block.AbstractBlock.trimToContentHeight(org.jfree.data.Range):::ENTER
this.padding has only one value
this.padding.top == 1.0
this.padding.left == 1.0
this.padding.bottom == 1.0
this.padding.right == 1.0
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
r.lower == 0.0
r.upper one of { 77.046875, 100.0 }
===========================================================================
org.jfree.chart.block.AbstractBlock.trimToContentHeight(org.jfree.data.Range):::EXIT463
===========================================================================
org.jfree.chart.block.AbstractBlock.trimToContentHeight(org.jfree.data.Range):::EXIT
this.id == orig(this.id)
this.margin == orig(this.margin)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.margin.unitType == orig(this.margin.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
r.lower == orig(r.lower)
r.upper == orig(r.upper)
this.padding has only one value
this.padding.top == 1.0
this.padding.left == 1.0
this.padding.bottom == 1.0
this.padding.right == 1.0
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
r.lower == 0.0
r.upper one of { 77.046875, 100.0 }
return.lower == 0.0
return.upper one of { 71.046875, 98.0 }
===========================================================================
org.jfree.chart.block.AbstractBlock.trimToContentWidth(double):::ENTER
this.padding has only one value
this.padding.top == 1.0
this.padding.left == 1.0
this.padding.bottom == 1.0
this.padding.right == 1.0
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
fixedWidth == 200.0
===========================================================================
org.jfree.chart.block.AbstractBlock.trimToContentWidth(double):::EXIT
this.id == orig(this.id)
this.margin == orig(this.margin)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.margin.unitType == orig(this.margin.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
this.padding has only one value
this.padding.top == 1.0
this.padding.left == 1.0
this.padding.bottom == 1.0
this.padding.right == 1.0
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
return one of { 194.0, 198.0 }
===========================================================================
org.jfree.chart.block.AbstractBlock.trimToContentWidth(org.jfree.data.Range):::ENTER
this.padding has only one value
this.padding.top == 1.0
this.padding.left == 1.0
this.padding.bottom == 1.0
this.padding.right == 1.0
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
r.lower == 0.0
r.upper == 200.0
===========================================================================
org.jfree.chart.block.AbstractBlock.trimToContentWidth(org.jfree.data.Range):::EXIT448
===========================================================================
org.jfree.chart.block.AbstractBlock.trimToContentWidth(org.jfree.data.Range):::EXIT
this.id == orig(this.id)
this.margin == orig(this.margin)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.margin.unitType == orig(this.margin.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
r.lower == orig(r.lower)
r.upper == orig(r.upper)
this.padding has only one value
this.padding.top == 1.0
this.padding.left == 1.0
this.padding.bottom == 1.0
this.padding.right == 1.0
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
r.lower == 0.0
r.upper == 200.0
return.lower == 0.0
return.upper one of { 194.0, 198.0 }
===========================================================================
org.jfree.chart.block.BlockBorder:::CLASS
org.jfree.chart.block.BlockBorder.NONE has only one value
org.jfree.chart.block.BlockBorder.NONE != null
org.jfree.chart.block.BlockBorder.NONE.insets has only one value
org.jfree.chart.block.BlockBorder.NONE.insets != null
org.jfree.chart.block.BlockBorder.NONE.paint has only one value
org.jfree.chart.block.BlockBorder.NONE.paint != null
org.jfree.chart.block.BlockBorder.NONE.paint.getClass().getName() == java.awt.Color.class
org.jfree.chart.util.RectangleInsets.ZERO_INSETS has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS != null
org.jfree.chart.block.BlockBorder.NONE.insets.unitType has only one value
org.jfree.chart.block.BlockBorder.NONE.insets.unitType != null
org.jfree.chart.block.BlockBorder.NONE.insets.top == 0.0
org.jfree.chart.block.BlockBorder.NONE.insets.left == 0.0
org.jfree.chart.block.BlockBorder.NONE.insets.bottom == 0.0
org.jfree.chart.block.BlockBorder.NONE.insets.right == 0.0
===========================================================================
org.jfree.chart.block.BlockBorder:::OBJECT
org.jfree.chart.block.BlockBorder.NONE.paint.getClass().getName() == this.paint.getClass().getName()
this.insets.unitType == org.jfree.chart.util.UnitType.ABSOLUTE
this has only one value
this.insets has only one value
this.insets != null
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType != null
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == 0.0
org.jfree.chart.util.UnitType.ABSOLUTE has only one value
org.jfree.chart.util.UnitType.ABSOLUTE != null
org.jfree.chart.util.UnitType.RELATIVE has only one value
org.jfree.chart.util.UnitType.RELATIVE != null
this.insets.unitType.name has only one value
this.insets.unitType.name != null
this.insets.unitType.name.toString == "UnitType.ABSOLUTE"
this.insets.top == 0.0
this.insets.left == 0.0
this.insets.bottom == 0.0
this.insets.right == 0.0
this.paint has only one value
this.paint != null
this.paint.getClass().getName() == java.awt.Color.class
===========================================================================
org.jfree.chart.block.BlockBorder.BlockBorder(org.jfree.chart.util.RectangleInsets, java.awt.Paint):::ENTER
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == org.jfree.chart.util.UnitType.ABSOLUTE
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == insets.top
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == insets.left
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == insets.bottom
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == insets.right
insets.unitType == org.jfree.chart.util.UnitType.ABSOLUTE
insets has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == 0.0
org.jfree.chart.util.UnitType.ABSOLUTE has only one value
org.jfree.chart.util.UnitType.RELATIVE has only one value
insets.unitType.name has only one value
insets.unitType.name.toString == "UnitType.ABSOLUTE"
paint has only one value
paint.getClass().getName() == java.awt.Color.class
===========================================================================
org.jfree.chart.block.BlockBorder.BlockBorder(org.jfree.chart.util.RectangleInsets, java.awt.Paint):::EXIT
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
this.insets == orig(insets)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == org.jfree.chart.util.UnitType.ABSOLUTE
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == this.insets.top
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == insets.top
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(insets.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == this.insets.left
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == insets.left
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(insets.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == this.insets.bottom
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == insets.bottom
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(insets.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == this.insets.right
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == insets.right
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(insets.right)
org.jfree.chart.util.UnitType.ABSOLUTE == insets.unitType
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(insets.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.insets.unitType.name == insets.unitType.name
this.paint == orig(paint)
insets.unitType.name == orig(insets.unitType.name)
insets.unitType.name.toString == orig(insets.unitType.name.toString)
insets.unitType.name has only one value
insets.unitType.name.toString == "UnitType.ABSOLUTE"
===========================================================================
org.jfree.chart.block.BlockBorder.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D):::ENTER
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == org.jfree.chart.util.UnitType.ABSOLUTE
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == this.insets.top
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == this.insets.left
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == this.insets.bottom
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == this.insets.right
g2 != null
g2.getClass().getName() == sun.java2d.SunGraphics2D.class
area != null
area.getClass().getName() == java.awt.geom.Rectangle2D$Double.class
org.jfree.chart.block.BlockBorder.NONE.paint.getClass().getName() != g2.getClass().getName()
org.jfree.chart.block.BlockBorder.NONE.paint.getClass().getName() != area.getClass().getName()
g2.getClass().getName() != area.getClass().getName()
===========================================================================
org.jfree.chart.block.BlockBorder.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D):::EXIT
org.jfree.chart.block.BlockBorder.NONE == orig(org.jfree.chart.block.BlockBorder.NONE)
org.jfree.chart.block.BlockBorder.NONE.insets == orig(org.jfree.chart.block.BlockBorder.NONE.insets)
org.jfree.chart.block.BlockBorder.NONE.paint == orig(org.jfree.chart.block.BlockBorder.NONE.paint)
org.jfree.chart.block.BlockBorder.NONE.paint.getClass().getName() == orig(org.jfree.chart.block.BlockBorder.NONE.paint.getClass().getName())
org.jfree.chart.block.BlockBorder.NONE.paint.getClass().getName() == orig(this.paint.getClass().getName())
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.block.BlockBorder.NONE.insets.unitType == orig(org.jfree.chart.block.BlockBorder.NONE.insets.unitType)
org.jfree.chart.block.BlockBorder.NONE.insets.top == orig(org.jfree.chart.block.BlockBorder.NONE.insets.top)
org.jfree.chart.block.BlockBorder.NONE.insets.left == orig(org.jfree.chart.block.BlockBorder.NONE.insets.left)
org.jfree.chart.block.BlockBorder.NONE.insets.bottom == orig(org.jfree.chart.block.BlockBorder.NONE.insets.bottom)
org.jfree.chart.block.BlockBorder.NONE.insets.right == orig(org.jfree.chart.block.BlockBorder.NONE.insets.right)
this.insets == orig(this.insets)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == org.jfree.chart.util.UnitType.ABSOLUTE
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == this.insets.top
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(this.insets.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == this.insets.left
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(this.insets.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == this.insets.bottom
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(this.insets.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == this.insets.right
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(this.insets.right)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(this.insets.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.insets.unitType.name == orig(this.insets.unitType.name)
this.insets.unitType.name.toString == orig(this.insets.unitType.name.toString)
this.paint == orig(this.paint)
org.jfree.chart.block.BlockBorder.NONE.paint.getClass().getName() != orig(g2.getClass().getName())
org.jfree.chart.block.BlockBorder.NONE.paint.getClass().getName() != orig(area.getClass().getName())
===========================================================================
org.jfree.chart.block.BlockBorder.getInsets():::ENTER
===========================================================================
org.jfree.chart.block.BlockBorder.getInsets():::EXIT
org.jfree.chart.block.BlockBorder.NONE == orig(org.jfree.chart.block.BlockBorder.NONE)
org.jfree.chart.block.BlockBorder.NONE.insets == orig(org.jfree.chart.block.BlockBorder.NONE.insets)
org.jfree.chart.block.BlockBorder.NONE.paint == orig(org.jfree.chart.block.BlockBorder.NONE.paint)
org.jfree.chart.block.BlockBorder.NONE.paint.getClass().getName() == orig(org.jfree.chart.block.BlockBorder.NONE.paint.getClass().getName())
org.jfree.chart.block.BlockBorder.NONE.paint.getClass().getName() == orig(this.paint.getClass().getName())
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.block.BlockBorder.NONE.insets.unitType == orig(org.jfree.chart.block.BlockBorder.NONE.insets.unitType)
org.jfree.chart.block.BlockBorder.NONE.insets.top == orig(org.jfree.chart.block.BlockBorder.NONE.insets.top)
org.jfree.chart.block.BlockBorder.NONE.insets.left == orig(org.jfree.chart.block.BlockBorder.NONE.insets.left)
org.jfree.chart.block.BlockBorder.NONE.insets.bottom == orig(org.jfree.chart.block.BlockBorder.NONE.insets.bottom)
org.jfree.chart.block.BlockBorder.NONE.insets.right == orig(org.jfree.chart.block.BlockBorder.NONE.insets.right)
this.insets == orig(this.insets)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(this.insets.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.insets.unitType.name == orig(this.insets.unitType.name)
this.insets.unitType.name.toString == orig(this.insets.unitType.name.toString)
this.insets.top == orig(this.insets.top)
this.insets.left == orig(this.insets.left)
this.insets.bottom == orig(this.insets.bottom)
this.insets.right == orig(this.insets.right)
this.paint == orig(this.paint)
return has only one value
return != null
return.unitType has only one value
return.unitType != null
return.unitType.name has only one value
return.unitType.name != null
return.unitType.name.toString == "UnitType.ABSOLUTE"
return.top == 0.0
return.left == 0.0
return.bottom == 0.0
return.right == 0.0
===========================================================================
org.jfree.chart.block.BlockContainer:::CLASS
===========================================================================
org.jfree.chart.block.BlockContainer:::OBJECT
this.blocks != null
this.blocks[] elements != null
this.blocks.getClass().getName() == java.util.ArrayList.class
this.arrangement != null
this.id == null
this.margin has only one value
this.margin != null
org.jfree.chart.util.RectangleInsets.ZERO_INSETS has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS != null
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType != null
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == 0.0
this.margin.unitType has only one value
this.margin.unitType != null
org.jfree.chart.util.UnitType.ABSOLUTE has only one value
org.jfree.chart.util.UnitType.ABSOLUTE != null
org.jfree.chart.util.UnitType.RELATIVE has only one value
org.jfree.chart.util.UnitType.RELATIVE != null
this.margin.unitType.name has only one value
this.margin.unitType.name != null
this.margin.unitType.name.toString == "UnitType.ABSOLUTE"
this.margin.top == 0.0
this.margin.left == 0.0
this.margin.bottom == 0.0
this.margin.right == 0.0
this.frame has only one value
this.frame != null
this.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class
this.padding has only one value
this.padding != null
this.padding.unitType has only one value
this.padding.unitType != null
this.padding.unitType.name has only one value
this.padding.unitType.name != null
this.padding.unitType.name.toString == "UnitType.ABSOLUTE"
this.padding.top == 0.0
this.padding.left == 0.0
this.padding.bottom == 0.0
this.padding.right == 0.0
this.width == 0.0
this.height == 0.0
this.bounds != null
===========================================================================
org.jfree.chart.block.BlockContainer.BlockContainer(org.jfree.chart.block.Arrangement):::ENTER
===========================================================================
org.jfree.chart.block.BlockContainer.BlockContainer(org.jfree.chart.block.Arrangement):::EXIT
this.blocks[] == []
this.blocks[].getClass().getName() == []
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
===========================================================================
org.jfree.chart.block.BlockContainer.add(org.jfree.chart.block.Block):::ENTER
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
size(this.blocks[]) one of { 0, 1, 2 }
===========================================================================
org.jfree.chart.block.BlockContainer.add(org.jfree.chart.block.Block):::EXIT
this.blocks == orig(this.blocks)
this.blocks.getClass().getName() == orig(this.blocks.getClass().getName())
this.arrangement == orig(this.arrangement)
this.arrangement.getClass().getName() == orig(this.arrangement.getClass().getName())
this.id == orig(this.id)
this.margin == orig(this.margin)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.margin.unitType == orig(this.margin.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
size(this.blocks[])-1 == orig(size(this.blocks[]))
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
size(this.blocks[]) one of { 1, 2, 3 }
===========================================================================
org.jfree.chart.block.BlockContainer.add(org.jfree.chart.block.Block, java.lang.Object):::ENTER
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
block != null
key.getClass().getName() == org.jfree.chart.util.RectangleEdge.class
size(this.blocks[]) one of { 0, 1, 2 }
===========================================================================
org.jfree.chart.block.BlockContainer.add(org.jfree.chart.block.Block, java.lang.Object):::EXIT
this.blocks == orig(this.blocks)
this.blocks.getClass().getName() == orig(this.blocks.getClass().getName())
this.arrangement == orig(this.arrangement)
this.arrangement.getClass().getName() == orig(this.arrangement.getClass().getName())
this.id == orig(this.id)
this.margin == orig(this.margin)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.margin.unitType == orig(this.margin.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
size(this.blocks[])-1 == orig(size(this.blocks[]))
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
size(this.blocks[]) one of { 1, 2, 3 }
===========================================================================
org.jfree.chart.block.BlockContainer.arrange(java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint):::ENTER
g2 has only one value
g2 != null
g2.getClass().getName() == sun.java2d.SunGraphics2D.class
constraint != null
org.jfree.chart.block.RectangleConstraint.NONE has only one value
org.jfree.chart.block.RectangleConstraint.NONE != null
org.jfree.chart.block.RectangleConstraint.NONE.width == 0.0
org.jfree.chart.block.RectangleConstraint.NONE.widthRange == null
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType has only one value
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType != null
org.jfree.chart.block.RectangleConstraint.NONE.height == 0.0
org.jfree.chart.block.RectangleConstraint.NONE.heightRange == null
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType has only one value
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType != null
constraint.width one of { 0.0, 194.0 }
constraint.widthRange.lower == 0.0
constraint.widthRange.upper == 194.0
constraint.widthConstraintType != null
org.jfree.chart.block.LengthConstraintType.NONE has only one value
org.jfree.chart.block.LengthConstraintType.NONE != null
org.jfree.chart.block.LengthConstraintType.RANGE has only one value
org.jfree.chart.block.LengthConstraintType.RANGE != null
org.jfree.chart.block.LengthConstraintType.FIXED has only one value
org.jfree.chart.block.LengthConstraintType.FIXED != null
constraint.widthConstraintType.name != null
constraint.widthConstraintType.name.toString one of { "LengthConstraintType.NONE", "RectangleConstraintType.RANGE" }
constraint.height one of { 0.0, 71.046875 }
constraint.heightRange.lower == 0.0
constraint.heightRange.upper == 71.046875
constraint.heightConstraintType != null
constraint.heightConstraintType.name != null
constraint.heightConstraintType.name.toString one of { "LengthConstraintType.NONE", "RectangleConstraintType.RANGE" }
size(this.blocks[]) one of { 1, 2, 3 }
===========================================================================
org.jfree.chart.block.BlockContainer.arrange(java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint):::EXIT
this.blocks == orig(this.blocks)
this.blocks[] == orig(this.blocks[])
this.blocks.getClass().getName() == orig(this.blocks.getClass().getName())
this.arrangement == orig(this.arrangement)
this.arrangement.getClass().getName() == orig(this.arrangement.getClass().getName())
this.id == orig(this.id)
this.margin == orig(this.margin)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.margin.unitType == orig(this.margin.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
org.jfree.chart.block.RectangleConstraint.NONE == orig(org.jfree.chart.block.RectangleConstraint.NONE)
org.jfree.chart.block.RectangleConstraint.NONE.width == orig(org.jfree.chart.block.RectangleConstraint.NONE.width)
org.jfree.chart.block.RectangleConstraint.NONE.widthRange == orig(org.jfree.chart.block.RectangleConstraint.NONE.widthRange)
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType == orig(org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType)
org.jfree.chart.block.RectangleConstraint.NONE.height == orig(org.jfree.chart.block.RectangleConstraint.NONE.height)
org.jfree.chart.block.RectangleConstraint.NONE.heightRange == orig(org.jfree.chart.block.RectangleConstraint.NONE.heightRange)
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType == orig(org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType)
constraint.width == orig(constraint.width)
constraint.widthRange == orig(constraint.widthRange)
constraint.widthRange.lower == orig(constraint.widthRange.lower)
constraint.widthRange.upper == orig(constraint.widthRange.upper)
constraint.widthConstraintType == orig(constraint.widthConstraintType)
org.jfree.chart.block.LengthConstraintType.NONE == orig(org.jfree.chart.block.LengthConstraintType.NONE)
org.jfree.chart.block.LengthConstraintType.RANGE == orig(org.jfree.chart.block.LengthConstraintType.RANGE)
org.jfree.chart.block.LengthConstraintType.FIXED == orig(org.jfree.chart.block.LengthConstraintType.FIXED)
constraint.widthConstraintType.name == orig(constraint.widthConstraintType.name)
constraint.widthConstraintType.name.toString == orig(constraint.widthConstraintType.name.toString)
constraint.height == orig(constraint.height)
constraint.heightRange == orig(constraint.heightRange)
constraint.heightRange.lower == orig(constraint.heightRange.lower)
constraint.heightRange.upper == orig(constraint.heightRange.upper)
constraint.heightConstraintType == orig(constraint.heightConstraintType)
constraint.heightConstraintType.name == orig(constraint.heightConstraintType.name)
constraint.heightConstraintType.name.toString == orig(constraint.heightConstraintType.name.toString)
org.jfree.chart.block.RectangleConstraint.NONE has only one value
org.jfree.chart.block.RectangleConstraint.NONE != null
org.jfree.chart.block.RectangleConstraint.NONE.width == 0.0
org.jfree.chart.block.RectangleConstraint.NONE.widthRange == null
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType has only one value
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType != null
org.jfree.chart.block.RectangleConstraint.NONE.height == 0.0
org.jfree.chart.block.RectangleConstraint.NONE.heightRange == null
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType has only one value
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType != null
constraint.width one of { 0.0, 194.0 }
constraint.widthRange.lower == 0.0
constraint.widthRange.upper == 194.0
constraint.widthConstraintType != null
org.jfree.chart.block.LengthConstraintType.NONE has only one value
org.jfree.chart.block.LengthConstraintType.NONE != null
org.jfree.chart.block.LengthConstraintType.RANGE has only one value
org.jfree.chart.block.LengthConstraintType.RANGE != null
org.jfree.chart.block.LengthConstraintType.FIXED has only one value
org.jfree.chart.block.LengthConstraintType.FIXED != null
constraint.widthConstraintType.name != null
constraint.widthConstraintType.name.toString one of { "LengthConstraintType.NONE", "RectangleConstraintType.RANGE" }
constraint.height one of { 0.0, 71.046875 }
constraint.heightRange.lower == 0.0
constraint.heightRange.upper == 71.046875
constraint.heightConstraintType != null
constraint.heightConstraintType.name != null
constraint.heightConstraintType.name.toString one of { "LengthConstraintType.NONE", "RectangleConstraintType.RANGE" }
return != null
return.width one of { 75.0, 194.0 }
return.height one of { 17.96875, 37.9375 }
size(this.blocks[]) one of { 1, 2, 3 }
===========================================================================
org.jfree.chart.block.BlockContainer.clear():::ENTER
this.blocks[] == []
this.blocks[].getClass().getName() == []
this.arrangement.getClass().getName() == org.jfree.chart.block.FlowArrangement.class
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
===========================================================================
org.jfree.chart.block.BlockContainer.clear():::EXIT
this.blocks == orig(this.blocks)
this.blocks[] == orig(this.blocks[])
this.blocks.getClass().getName() == orig(this.blocks.getClass().getName())
this.arrangement == orig(this.arrangement)
this.arrangement.getClass().getName() == orig(this.arrangement.getClass().getName())
this.id == orig(this.id)
this.margin == orig(this.margin)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.margin.unitType == orig(this.margin.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
this.blocks[] == []
this.blocks[].getClass().getName() == []
this.arrangement.getClass().getName() == org.jfree.chart.block.FlowArrangement.class
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
===========================================================================
org.jfree.chart.block.BlockContainer.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.lang.Object):::ENTER
g2.getClass().getName() == sun.java2d.SunGraphics2D.class
area.getClass().getName() == java.awt.geom.Rectangle2D$Double.class
params.getClass().getName() == org.jfree.chart.block.BlockParams.class
===========================================================================
org.jfree.chart.block.BlockContainer.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.lang.Object):::EXIT
this.blocks == orig(this.blocks)
this.blocks[] == orig(this.blocks[])
this.blocks.getClass().getName() == orig(this.blocks.getClass().getName())
this.arrangement == orig(this.arrangement)
this.arrangement.getClass().getName() == orig(this.arrangement.getClass().getName())
this.id == orig(this.id)
this.margin == orig(this.margin)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.margin.unitType == orig(this.margin.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
return == null
===========================================================================
org.jfree.chart.block.BlockContainer.getBlocks():::ENTER
this.blocks[].getClass().getName() one of { [org.jfree.chart.block.BlockContainer, org.jfree.chart.block.BlockContainer, org.jfree.chart.block.BlockContainer], [org.jfree.chart.title.LegendItemBlockContainer] }
size(this.blocks[]) one of { 1, 3 }
===========================================================================
org.jfree.chart.block.BlockContainer.getBlocks():::EXIT
this.blocks == orig(this.blocks)
this.blocks[] == orig(this.blocks[])
this.blocks.getClass().getName() == orig(this.blocks.getClass().getName())
this.arrangement == orig(this.arrangement)
this.arrangement.getClass().getName() == orig(this.arrangement.getClass().getName())
this.id == orig(this.id)
this.margin == orig(this.margin)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.margin.unitType == orig(this.margin.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
this.blocks[].getClass().getName() one of { [org.jfree.chart.block.BlockContainer, org.jfree.chart.block.BlockContainer, org.jfree.chart.block.BlockContainer], [org.jfree.chart.title.LegendItemBlockContainer] }
return[].getClass().getName() one of { [org.jfree.chart.block.BlockContainer, org.jfree.chart.block.BlockContainer, org.jfree.chart.block.BlockContainer], [org.jfree.chart.title.LegendItemBlockContainer] }
return.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
size(this.blocks[]) one of { 1, 3 }
size(return[]) one of { 1, 3 }
===========================================================================
org.jfree.chart.block.BlockContainer.isEmpty():::ENTER
this.blocks[].getClass().getName() elements == org.jfree.chart.block.BlockContainer.class
this.blocks[].getClass().getName() one of { [], [org.jfree.chart.block.BlockContainer, org.jfree.chart.block.BlockContainer, org.jfree.chart.block.BlockContainer] }
this.arrangement.getClass().getName() == org.jfree.chart.block.FlowArrangement.class
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
size(this.blocks[]) one of { 0, 3 }
===========================================================================
org.jfree.chart.block.BlockContainer.isEmpty():::EXIT
this.blocks == orig(this.blocks)
this.blocks[] == orig(this.blocks[])
this.blocks.getClass().getName() == orig(this.blocks.getClass().getName())
this.arrangement == orig(this.arrangement)
this.arrangement.getClass().getName() == orig(this.arrangement.getClass().getName())
this.id == orig(this.id)
this.margin == orig(this.margin)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.margin.unitType == orig(this.margin.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
(this.blocks[] == [])  <==>  (return == true)
(this.blocks[] == [])  <==>  (this.blocks[].getClass().getName() == [])
(this.blocks[] contains no nulls and has only one value, of length 3)  <==>  (return == false)
(this.blocks[] contains no nulls and has only one value, of length 3)  <==>  (size(this.blocks[]) == 3)
(this.blocks[] contains no nulls and has only one value, of length 3)  <==>  (this.blocks[].getClass().getName() == [org.jfree.chart.block.BlockContainer, org.jfree.chart.block.BlockContainer, org.jfree.chart.block.BlockContainer])
(this.blocks[] contains no nulls and has only one value, of length 3)  ==>  (this.blocks[].getClass().getName() elements == org.jfree.chart.block.BlockContainer.class)
this.blocks[].getClass().getName() elements == org.jfree.chart.block.BlockContainer.class
this.blocks[].getClass().getName() one of { [], [org.jfree.chart.block.BlockContainer, org.jfree.chart.block.BlockContainer, org.jfree.chart.block.BlockContainer] }
this.arrangement.getClass().getName() == org.jfree.chart.block.FlowArrangement.class
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
size(this.blocks[]) one of { 0, 3 }
===========================================================================
org.jfree.chart.block.BlockContainer.isEmpty():::EXIT;condition="return == true"
this.blocks has only one value
this.blocks[] == []
this.blocks[].getClass().getName() == []
this.arrangement has only one value
this.bounds has only one value
return == true
orig(this) has only one value
===========================================================================
org.jfree.chart.block.BlockContainer.isEmpty():::EXIT;condition="not(return == true)"
this.blocks has only one value
this.blocks[] contains no nulls and has only one value, of length 3
this.blocks[].getClass().getName() == [org.jfree.chart.block.BlockContainer, org.jfree.chart.block.BlockContainer, org.jfree.chart.block.BlockContainer]
this.arrangement has only one value
this.bounds has only one value
return == false
orig(this) has only one value
size(this.blocks[]) == 3
===========================================================================
org.jfree.chart.block.BlockContainer.setArrangement(org.jfree.chart.block.Arrangement):::ENTER
this.blocks[] == []
this.blocks[].getClass().getName() == []
this.arrangement.getClass().getName() == org.jfree.chart.block.FlowArrangement.class
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
arrangement.getClass().getName() == org.jfree.chart.block.FlowArrangement.class
===========================================================================
org.jfree.chart.block.BlockContainer.setArrangement(org.jfree.chart.block.Arrangement):::EXIT
this.blocks == orig(this.blocks)
this.blocks[] == orig(this.blocks[])
this.blocks.getClass().getName() == orig(this.blocks.getClass().getName())
this.arrangement == orig(this.arrangement)
this.arrangement.getClass().getName() == orig(this.arrangement.getClass().getName())
this.id == orig(this.id)
this.margin == orig(this.margin)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.margin.unitType == orig(this.margin.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
this.blocks[] == []
this.blocks[].getClass().getName() == []
this.arrangement.getClass().getName() == org.jfree.chart.block.FlowArrangement.class
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
===========================================================================
org.jfree.chart.block.BlockParams:::OBJECT
this.generateEntities == false
this.translateX == 0.0
this.translateY == 0.0
===========================================================================
org.jfree.chart.block.BlockParams.BlockParams():::EXIT
===========================================================================
org.jfree.chart.block.BlockParams.getGenerateEntities():::ENTER
===========================================================================
org.jfree.chart.block.BlockParams.getGenerateEntities():::EXIT
this.generateEntities == orig(this.generateEntities)
this.translateX == orig(this.translateX)
this.translateY == orig(this.translateY)
return == false
===========================================================================
org.jfree.chart.block.BlockParams.getGenerateEntities():::EXIT;condition="not(return == true)"
===========================================================================
org.jfree.chart.block.BlockParams.setGenerateEntities(boolean):::ENTER
generate == false
===========================================================================
org.jfree.chart.block.BlockParams.setGenerateEntities(boolean):::EXIT
this.generateEntities == orig(this.generateEntities)
this.translateX == orig(this.translateX)
this.translateY == orig(this.translateY)
===========================================================================
org.jfree.chart.block.BlockResult:::OBJECT
this.entities == null
===========================================================================
org.jfree.chart.block.BlockResult.BlockResult():::EXIT
===========================================================================
org.jfree.chart.block.BlockResult.getEntityCollection():::ENTER
===========================================================================
org.jfree.chart.block.BlockResult.getEntityCollection():::EXIT
this.entities == orig(this.entities)
return == null
===========================================================================
org.jfree.chart.block.BorderArrangement:::CLASS
===========================================================================
org.jfree.chart.block.BorderArrangement:::OBJECT
this.centerBlock.getClass().getName() == org.jfree.chart.block.LabelBlock.class
this.topBlock == null
this.bottomBlock == null
this.leftBlock.getClass().getName() == org.jfree.chart.title.LegendGraphic.class
this.rightBlock == null
===========================================================================
org.jfree.chart.block.BorderArrangement.BorderArrangement():::EXIT
this.centerBlock == null
this.leftBlock == null
===========================================================================
org.jfree.chart.block.BorderArrangement.add(org.jfree.chart.block.Block, java.lang.Object):::ENTER
this.centerBlock == null
key.getClass().getName() == org.jfree.chart.util.RectangleEdge.class
===========================================================================
org.jfree.chart.block.BorderArrangement.add(org.jfree.chart.block.Block, java.lang.Object):::EXIT
this.topBlock == orig(this.topBlock)
this.bottomBlock == orig(this.bottomBlock)
this.leftBlock.getClass().getName() == orig(this.leftBlock.getClass().getName())
this.rightBlock == orig(this.rightBlock)
===========================================================================
org.jfree.chart.block.BorderArrangement.arrange(org.jfree.chart.block.BlockContainer, java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint):::ENTER
container.blocks[].getClass().getName() == [org.jfree.chart.title.LegendGraphic, org.jfree.chart.block.LabelBlock]
container.blocks.getClass().getName() == java.util.ArrayList.class
container.arrangement.getClass().getName() == org.jfree.chart.block.BorderArrangement.class
container.id == null
container.margin has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS has only one value
container.margin.unitType has only one value
container.margin.top == 0.0
container.margin.left == 0.0
container.margin.bottom == 0.0
container.margin.right == 0.0
container.frame has only one value
container.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class
container.padding has only one value
container.padding.unitType has only one value
container.padding.top == 0.0
container.padding.left == 0.0
container.padding.bottom == 0.0
container.padding.right == 0.0
container.width == 0.0
container.height == 0.0
g2 has only one value
g2.getClass().getName() == sun.java2d.SunGraphics2D.class
constraint has only one value
org.jfree.chart.block.RectangleConstraint.NONE has only one value
org.jfree.chart.block.RectangleConstraint.NONE.width == 0.0
org.jfree.chart.block.RectangleConstraint.NONE.widthRange == null
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType has only one value
org.jfree.chart.block.RectangleConstraint.NONE.height == 0.0
org.jfree.chart.block.RectangleConstraint.NONE.heightRange == null
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType has only one value
constraint.width == 0.0
constraint.widthRange == null
constraint.widthConstraintType has only one value
org.jfree.chart.block.LengthConstraintType.NONE has only one value
org.jfree.chart.block.LengthConstraintType.RANGE has only one value
org.jfree.chart.block.LengthConstraintType.FIXED has only one value
constraint.widthConstraintType.name has only one value
constraint.widthConstraintType.name.toString == "LengthConstraintType.NONE"
constraint.height == 0.0
constraint.heightRange == null
constraint.heightConstraintType has only one value
constraint.heightConstraintType.name has only one value
constraint.heightConstraintType.name.toString == "LengthConstraintType.NONE"
size(container.blocks[]) == 2
===========================================================================
org.jfree.chart.block.BorderArrangement.arrange(org.jfree.chart.block.BlockContainer, java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint):::EXIT
this.centerBlock == orig(this.centerBlock)
this.centerBlock.getClass().getName() == orig(this.centerBlock.getClass().getName())
this.topBlock == orig(this.topBlock)
this.bottomBlock == orig(this.bottomBlock)
this.leftBlock == orig(this.leftBlock)
this.leftBlock.getClass().getName() == orig(this.leftBlock.getClass().getName())
this.rightBlock == orig(this.rightBlock)
container.blocks == orig(container.blocks)
container.blocks[] == orig(container.blocks[])
container.blocks.getClass().getName() == orig(container.blocks.getClass().getName())
container.arrangement == orig(container.arrangement)
container.arrangement.getClass().getName() == orig(container.arrangement.getClass().getName())
container.id == orig(container.id)
container.margin == orig(container.margin)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
container.margin.unitType == orig(container.margin.unitType)
container.margin.top == orig(container.margin.top)
container.margin.left == orig(container.margin.left)
container.margin.bottom == orig(container.margin.bottom)
container.margin.right == orig(container.margin.right)
container.frame == orig(container.frame)
container.frame.getClass().getName() == orig(container.frame.getClass().getName())
container.padding == orig(container.padding)
container.padding.unitType == orig(container.padding.unitType)
container.padding.top == orig(container.padding.top)
container.padding.left == orig(container.padding.left)
container.padding.bottom == orig(container.padding.bottom)
container.padding.right == orig(container.padding.right)
container.width == orig(container.width)
container.height == orig(container.height)
container.bounds == orig(container.bounds)
container.bounds.getClass().getName() == orig(container.bounds.getClass().getName())
org.jfree.chart.block.RectangleConstraint.NONE == orig(org.jfree.chart.block.RectangleConstraint.NONE)
org.jfree.chart.block.RectangleConstraint.NONE.width == orig(org.jfree.chart.block.RectangleConstraint.NONE.width)
org.jfree.chart.block.RectangleConstraint.NONE.widthRange == orig(org.jfree.chart.block.RectangleConstraint.NONE.widthRange)
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType == orig(org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType)
org.jfree.chart.block.RectangleConstraint.NONE.height == orig(org.jfree.chart.block.RectangleConstraint.NONE.height)
org.jfree.chart.block.RectangleConstraint.NONE.heightRange == orig(org.jfree.chart.block.RectangleConstraint.NONE.heightRange)
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType == orig(org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType)
constraint.width == orig(constraint.width)
constraint.widthRange == orig(constraint.widthRange)
constraint.widthConstraintType == orig(constraint.widthConstraintType)
org.jfree.chart.block.LengthConstraintType.NONE == orig(org.jfree.chart.block.LengthConstraintType.NONE)
org.jfree.chart.block.LengthConstraintType.RANGE == orig(org.jfree.chart.block.LengthConstraintType.RANGE)
org.jfree.chart.block.LengthConstraintType.FIXED == orig(org.jfree.chart.block.LengthConstraintType.FIXED)
constraint.widthConstraintType.name == orig(constraint.widthConstraintType.name)
constraint.widthConstraintType.name.toString == orig(constraint.widthConstraintType.name.toString)
constraint.height == orig(constraint.height)
constraint.heightRange == orig(constraint.heightRange)
constraint.heightConstraintType == orig(constraint.heightConstraintType)
constraint.heightConstraintType.name == orig(constraint.heightConstraintType.name)
constraint.heightConstraintType.name.toString == orig(constraint.heightConstraintType.name.toString)
container.blocks[].getClass().getName() == [org.jfree.chart.title.LegendGraphic, org.jfree.chart.block.LabelBlock]
container.blocks.getClass().getName() == java.util.ArrayList.class
container.arrangement.getClass().getName() == org.jfree.chart.block.BorderArrangement.class
container.id == null
container.margin has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS has only one value
container.margin.unitType has only one value
container.margin.top == 0.0
container.margin.left == 0.0
container.margin.bottom == 0.0
container.margin.right == 0.0
container.frame has only one value
container.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class
container.padding has only one value
container.padding.unitType has only one value
container.padding.top == 0.0
container.padding.left == 0.0
container.padding.bottom == 0.0
container.padding.right == 0.0
container.width == 0.0
container.height == 0.0
org.jfree.chart.block.RectangleConstraint.NONE has only one value
org.jfree.chart.block.RectangleConstraint.NONE.width == 0.0
org.jfree.chart.block.RectangleConstraint.NONE.widthRange == null
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType has only one value
org.jfree.chart.block.RectangleConstraint.NONE.height == 0.0
org.jfree.chart.block.RectangleConstraint.NONE.heightRange == null
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType has only one value
constraint.width == 0.0
constraint.widthRange == null
constraint.widthConstraintType has only one value
org.jfree.chart.block.LengthConstraintType.NONE has only one value
org.jfree.chart.block.LengthConstraintType.RANGE has only one value
org.jfree.chart.block.LengthConstraintType.FIXED has only one value
constraint.widthConstraintType.name has only one value
constraint.widthConstraintType.name.toString == "LengthConstraintType.NONE"
constraint.height == 0.0
constraint.heightRange == null
constraint.heightConstraintType has only one value
constraint.heightConstraintType.name has only one value
constraint.heightConstraintType.name.toString == "LengthConstraintType.NONE"
return.width == 75.0
return.height == 17.96875
size(container.blocks[]) == 2
===========================================================================
org.jfree.chart.block.BorderArrangement.arrangeNN(org.jfree.chart.block.BlockContainer, java.awt.Graphics2D):::ENTER
container.blocks[].getClass().getName() == [org.jfree.chart.title.LegendGraphic, org.jfree.chart.block.LabelBlock]
container.blocks.getClass().getName() == java.util.ArrayList.class
container.arrangement.getClass().getName() == org.jfree.chart.block.BorderArrangement.class
container.id == null
container.margin has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS has only one value
container.margin.unitType has only one value
container.margin.top == 0.0
container.margin.left == 0.0
container.margin.bottom == 0.0
container.margin.right == 0.0
container.frame has only one value
container.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class
container.padding has only one value
container.padding.unitType has only one value
container.padding.top == 0.0
container.padding.left == 0.0
container.padding.bottom == 0.0
container.padding.right == 0.0
container.width == 0.0
container.height == 0.0
g2 has only one value
g2.getClass().getName() == sun.java2d.SunGraphics2D.class
size(container.blocks[]) == 2
===========================================================================
org.jfree.chart.block.BorderArrangement.arrangeNN(org.jfree.chart.block.BlockContainer, java.awt.Graphics2D):::EXIT
this.centerBlock == orig(this.centerBlock)
this.centerBlock.getClass().getName() == orig(this.centerBlock.getClass().getName())
this.topBlock == orig(this.topBlock)
this.bottomBlock == orig(this.bottomBlock)
this.leftBlock == orig(this.leftBlock)
this.leftBlock.getClass().getName() == orig(this.leftBlock.getClass().getName())
this.rightBlock == orig(this.rightBlock)
container.blocks == orig(container.blocks)
container.blocks[] == orig(container.blocks[])
container.blocks.getClass().getName() == orig(container.blocks.getClass().getName())
container.arrangement == orig(container.arrangement)
container.arrangement.getClass().getName() == orig(container.arrangement.getClass().getName())
container.id == orig(container.id)
container.margin == orig(container.margin)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
container.margin.unitType == orig(container.margin.unitType)
container.margin.top == orig(container.margin.top)
container.margin.left == orig(container.margin.left)
container.margin.bottom == orig(container.margin.bottom)
container.margin.right == orig(container.margin.right)
container.frame == orig(container.frame)
container.frame.getClass().getName() == orig(container.frame.getClass().getName())
container.padding == orig(container.padding)
container.padding.unitType == orig(container.padding.unitType)
container.padding.top == orig(container.padding.top)
container.padding.left == orig(container.padding.left)
container.padding.bottom == orig(container.padding.bottom)
container.padding.right == orig(container.padding.right)
container.width == orig(container.width)
container.height == orig(container.height)
container.bounds == orig(container.bounds)
container.bounds.getClass().getName() == orig(container.bounds.getClass().getName())
container.blocks[].getClass().getName() == [org.jfree.chart.title.LegendGraphic, org.jfree.chart.block.LabelBlock]
container.blocks.getClass().getName() == java.util.ArrayList.class
container.arrangement.getClass().getName() == org.jfree.chart.block.BorderArrangement.class
container.id == null
container.margin has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS has only one value
container.margin.unitType has only one value
container.margin.top == 0.0
container.margin.left == 0.0
container.margin.bottom == 0.0
container.margin.right == 0.0
container.frame has only one value
container.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class
container.padding has only one value
container.padding.unitType has only one value
container.padding.top == 0.0
container.padding.left == 0.0
container.padding.bottom == 0.0
container.padding.right == 0.0
container.width == 0.0
container.height == 0.0
return.width == 75.0
return.height == 17.96875
size(container.blocks[]) == 2
===========================================================================
org.jfree.chart.block.CenterArrangement:::CLASS
===========================================================================
org.jfree.chart.block.CenterArrangement:::OBJECT
===========================================================================
org.jfree.chart.block.CenterArrangement.CenterArrangement():::EXIT
===========================================================================
org.jfree.chart.block.CenterArrangement.add(org.jfree.chart.block.Block, java.lang.Object):::ENTER
block.getClass().getName() == org.jfree.chart.title.LegendItemBlockContainer.class
key == null
===========================================================================
org.jfree.chart.block.CenterArrangement.add(org.jfree.chart.block.Block, java.lang.Object):::EXIT
===========================================================================
org.jfree.chart.block.CenterArrangement.arrange(org.jfree.chart.block.BlockContainer, java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint):::ENTER
container.blocks[].getClass().getName() == [org.jfree.chart.title.LegendItemBlockContainer]
container.blocks[].getClass().getName() elements == org.jfree.chart.title.LegendItemBlockContainer.class
container.blocks.getClass().getName() == java.util.ArrayList.class
container.arrangement.getClass().getName() == org.jfree.chart.block.CenterArrangement.class
container.id == null
container.margin has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS has only one value
container.margin.unitType has only one value
container.margin.top == 0.0
container.margin.left == 0.0
container.margin.bottom == 0.0
container.margin.right == 0.0
container.frame has only one value
container.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class
container.padding has only one value
container.padding.unitType has only one value
container.padding.top == 0.0
container.padding.left == 0.0
container.padding.bottom == 0.0
container.padding.right == 0.0
container.width == 0.0
container.height == 0.0
g2 has only one value
g2.getClass().getName() == sun.java2d.SunGraphics2D.class
constraint has only one value
org.jfree.chart.block.RectangleConstraint.NONE has only one value
org.jfree.chart.block.RectangleConstraint.NONE.width == 0.0
org.jfree.chart.block.RectangleConstraint.NONE.widthRange == null
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType has only one value
org.jfree.chart.block.RectangleConstraint.NONE.height == 0.0
org.jfree.chart.block.RectangleConstraint.NONE.heightRange == null
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType has only one value
constraint.width == 0.0
constraint.widthRange == null
constraint.widthConstraintType has only one value
org.jfree.chart.block.LengthConstraintType.NONE has only one value
org.jfree.chart.block.LengthConstraintType.RANGE has only one value
org.jfree.chart.block.LengthConstraintType.FIXED has only one value
constraint.widthConstraintType.name has only one value
constraint.widthConstraintType.name.toString == "LengthConstraintType.NONE"
constraint.height == 0.0
constraint.heightRange == null
constraint.heightConstraintType has only one value
constraint.heightConstraintType.name has only one value
constraint.heightConstraintType.name.toString == "LengthConstraintType.NONE"
size(container.blocks[]) == 1
===========================================================================
org.jfree.chart.block.CenterArrangement.arrange(org.jfree.chart.block.BlockContainer, java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint):::EXIT99
===========================================================================
org.jfree.chart.block.CenterArrangement.arrange(org.jfree.chart.block.BlockContainer, java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint):::EXIT
container.blocks == orig(container.blocks)
container.blocks[] == orig(container.blocks[])
container.blocks.getClass().getName() == orig(container.blocks.getClass().getName())
container.arrangement == orig(container.arrangement)
container.arrangement.getClass().getName() == orig(container.arrangement.getClass().getName())
container.id == orig(container.id)
container.margin == orig(container.margin)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
container.margin.unitType == orig(container.margin.unitType)
container.margin.top == orig(container.margin.top)
container.margin.left == orig(container.margin.left)
container.margin.bottom == orig(container.margin.bottom)
container.margin.right == orig(container.margin.right)
container.frame == orig(container.frame)
container.frame.getClass().getName() == orig(container.frame.getClass().getName())
container.padding == orig(container.padding)
container.padding.unitType == orig(container.padding.unitType)
container.padding.top == orig(container.padding.top)
container.padding.left == orig(container.padding.left)
container.padding.bottom == orig(container.padding.bottom)
container.padding.right == orig(container.padding.right)
container.width == orig(container.width)
container.height == orig(container.height)
container.bounds == orig(container.bounds)
container.bounds.getClass().getName() == orig(container.bounds.getClass().getName())
org.jfree.chart.block.RectangleConstraint.NONE == orig(org.jfree.chart.block.RectangleConstraint.NONE)
org.jfree.chart.block.RectangleConstraint.NONE.width == orig(org.jfree.chart.block.RectangleConstraint.NONE.width)
org.jfree.chart.block.RectangleConstraint.NONE.widthRange == orig(org.jfree.chart.block.RectangleConstraint.NONE.widthRange)
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType == orig(org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType)
org.jfree.chart.block.RectangleConstraint.NONE.height == orig(org.jfree.chart.block.RectangleConstraint.NONE.height)
org.jfree.chart.block.RectangleConstraint.NONE.heightRange == orig(org.jfree.chart.block.RectangleConstraint.NONE.heightRange)
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType == orig(org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType)
constraint.width == orig(constraint.width)
constraint.widthRange == orig(constraint.widthRange)
constraint.widthConstraintType == orig(constraint.widthConstraintType)
org.jfree.chart.block.LengthConstraintType.NONE == orig(org.jfree.chart.block.LengthConstraintType.NONE)
org.jfree.chart.block.LengthConstraintType.RANGE == orig(org.jfree.chart.block.LengthConstraintType.RANGE)
org.jfree.chart.block.LengthConstraintType.FIXED == orig(org.jfree.chart.block.LengthConstraintType.FIXED)
constraint.widthConstraintType.name == orig(constraint.widthConstraintType.name)
constraint.widthConstraintType.name.toString == orig(constraint.widthConstraintType.name.toString)
constraint.height == orig(constraint.height)
constraint.heightRange == orig(constraint.heightRange)
constraint.heightConstraintType == orig(constraint.heightConstraintType)
constraint.heightConstraintType.name == orig(constraint.heightConstraintType.name)
constraint.heightConstraintType.name.toString == orig(constraint.heightConstraintType.name.toString)
container.blocks[].getClass().getName() == [org.jfree.chart.title.LegendItemBlockContainer]
container.blocks[].getClass().getName() elements == org.jfree.chart.title.LegendItemBlockContainer.class
container.blocks.getClass().getName() == java.util.ArrayList.class
container.arrangement.getClass().getName() == org.jfree.chart.block.CenterArrangement.class
container.id == null
container.margin has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS has only one value
container.margin.unitType has only one value
container.margin.top == 0.0
container.margin.left == 0.0
container.margin.bottom == 0.0
container.margin.right == 0.0
container.frame has only one value
container.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class
container.padding has only one value
container.padding.unitType has only one value
container.padding.top == 0.0
container.padding.left == 0.0
container.padding.bottom == 0.0
container.padding.right == 0.0
container.width == 0.0
container.height == 0.0
org.jfree.chart.block.RectangleConstraint.NONE has only one value
org.jfree.chart.block.RectangleConstraint.NONE.width == 0.0
org.jfree.chart.block.RectangleConstraint.NONE.widthRange == null
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType has only one value
org.jfree.chart.block.RectangleConstraint.NONE.height == 0.0
org.jfree.chart.block.RectangleConstraint.NONE.heightRange == null
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType has only one value
constraint.width == 0.0
constraint.widthRange == null
constraint.widthConstraintType has only one value
org.jfree.chart.block.LengthConstraintType.NONE has only one value
org.jfree.chart.block.LengthConstraintType.RANGE has only one value
org.jfree.chart.block.LengthConstraintType.FIXED has only one value
constraint.widthConstraintType.name has only one value
constraint.widthConstraintType.name.toString == "LengthConstraintType.NONE"
constraint.height == 0.0
constraint.heightRange == null
constraint.heightConstraintType has only one value
constraint.heightConstraintType.name has only one value
constraint.heightConstraintType.name.toString == "LengthConstraintType.NONE"
return.width == 75.0
return.height == 17.96875
size(container.blocks[]) == 1
===========================================================================
org.jfree.chart.block.CenterArrangement.arrangeNN(org.jfree.chart.block.BlockContainer, java.awt.Graphics2D):::ENTER
container.blocks[].getClass().getName() == [org.jfree.chart.title.LegendItemBlockContainer]
container.blocks[].getClass().getName() elements == org.jfree.chart.title.LegendItemBlockContainer.class
container.blocks.getClass().getName() == java.util.ArrayList.class
container.arrangement.getClass().getName() == org.jfree.chart.block.CenterArrangement.class
container.id == null
container.margin has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS has only one value
container.margin.unitType has only one value
container.margin.top == 0.0
container.margin.left == 0.0
container.margin.bottom == 0.0
container.margin.right == 0.0
container.frame has only one value
container.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class
container.padding has only one value
container.padding.unitType has only one value
container.padding.top == 0.0
container.padding.left == 0.0
container.padding.bottom == 0.0
container.padding.right == 0.0
container.width == 0.0
container.height == 0.0
g2 has only one value
g2.getClass().getName() == sun.java2d.SunGraphics2D.class
size(container.blocks[]) == 1
===========================================================================
org.jfree.chart.block.CenterArrangement.arrangeNN(org.jfree.chart.block.BlockContainer, java.awt.Graphics2D):::EXIT
container.blocks == orig(container.blocks)
container.blocks[] == orig(container.blocks[])
container.blocks.getClass().getName() == orig(container.blocks.getClass().getName())
container.arrangement == orig(container.arrangement)
container.arrangement.getClass().getName() == orig(container.arrangement.getClass().getName())
container.id == orig(container.id)
container.margin == orig(container.margin)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
container.margin.unitType == orig(container.margin.unitType)
container.margin.top == orig(container.margin.top)
container.margin.left == orig(container.margin.left)
container.margin.bottom == orig(container.margin.bottom)
container.margin.right == orig(container.margin.right)
container.frame == orig(container.frame)
container.frame.getClass().getName() == orig(container.frame.getClass().getName())
container.padding == orig(container.padding)
container.padding.unitType == orig(container.padding.unitType)
container.padding.top == orig(container.padding.top)
container.padding.left == orig(container.padding.left)
container.padding.bottom == orig(container.padding.bottom)
container.padding.right == orig(container.padding.right)
container.width == orig(container.width)
container.height == orig(container.height)
container.bounds == orig(container.bounds)
container.bounds.getClass().getName() == orig(container.bounds.getClass().getName())
container.blocks[].getClass().getName() == [org.jfree.chart.title.LegendItemBlockContainer]
container.blocks[].getClass().getName() elements == org.jfree.chart.title.LegendItemBlockContainer.class
container.blocks.getClass().getName() == java.util.ArrayList.class
container.arrangement.getClass().getName() == org.jfree.chart.block.CenterArrangement.class
container.id == null
container.margin has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS has only one value
container.margin.unitType has only one value
container.margin.top == 0.0
container.margin.left == 0.0
container.margin.bottom == 0.0
container.margin.right == 0.0
container.frame has only one value
container.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class
container.padding has only one value
container.padding.unitType has only one value
container.padding.top == 0.0
container.padding.left == 0.0
container.padding.bottom == 0.0
container.padding.right == 0.0
container.width == 0.0
container.height == 0.0
return.width == 75.0
return.height == 17.96875
size(container.blocks[]) == 1
===========================================================================
org.jfree.chart.block.ColumnArrangement:::CLASS
===========================================================================
org.jfree.chart.block.ColumnArrangement:::OBJECT
this.horizontalAlignment == null
org.jfree.chart.util.HorizontalAlignment.LEFT has only one value
org.jfree.chart.util.HorizontalAlignment.RIGHT has only one value
org.jfree.chart.util.HorizontalAlignment.CENTER has only one value
org.jfree.chart.util.HorizontalAlignment.LEFT.name has only one value
org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString == "HorizontalAlignment.LEFT"
org.jfree.chart.util.HorizontalAlignment.RIGHT.name has only one value
org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString == "HorizontalAlignment.RIGHT"
org.jfree.chart.util.HorizontalAlignment.CENTER.name has only one value
org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString == "HorizontalAlignment.CENTER"
this.verticalAlignment == null
org.jfree.chart.util.VerticalAlignment.TOP has only one value
org.jfree.chart.util.VerticalAlignment.BOTTOM has only one value
org.jfree.chart.util.VerticalAlignment.CENTER has only one value
org.jfree.chart.util.VerticalAlignment.TOP.name has only one value
org.jfree.chart.util.VerticalAlignment.TOP.name.toString == "VerticalAlignment.TOP"
org.jfree.chart.util.VerticalAlignment.BOTTOM.name has only one value
org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString == "VerticalAlignment.BOTTOM"
org.jfree.chart.util.VerticalAlignment.CENTER.name has only one value
org.jfree.chart.util.VerticalAlignment.CENTER.name.toString == "VerticalAlignment.CENTER"
this.horizontalGap == 0.0
this.verticalGap == 0.0
===========================================================================
org.jfree.chart.block.ColumnArrangement.ColumnArrangement():::EXIT
===========================================================================
org.jfree.chart.block.FlowArrangement:::CLASS
===========================================================================
org.jfree.chart.block.FlowArrangement:::OBJECT
org.jfree.chart.util.HorizontalAlignment.CENTER.name == this.horizontalAlignment.name
org.jfree.chart.util.VerticalAlignment.CENTER.name == this.verticalAlignment.name
this.horizontalAlignment has only one value
this.horizontalAlignment != null
org.jfree.chart.util.HorizontalAlignment.LEFT has only one value
org.jfree.chart.util.HorizontalAlignment.LEFT != null
org.jfree.chart.util.HorizontalAlignment.RIGHT has only one value
org.jfree.chart.util.HorizontalAlignment.RIGHT != null
org.jfree.chart.util.HorizontalAlignment.CENTER has only one value
org.jfree.chart.util.HorizontalAlignment.CENTER != null
org.jfree.chart.util.HorizontalAlignment.LEFT.name has only one value
org.jfree.chart.util.HorizontalAlignment.LEFT.name != null
org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString == "HorizontalAlignment.LEFT"
org.jfree.chart.util.HorizontalAlignment.RIGHT.name has only one value
org.jfree.chart.util.HorizontalAlignment.RIGHT.name != null
org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString == "HorizontalAlignment.RIGHT"
org.jfree.chart.util.HorizontalAlignment.CENTER.name has only one value
org.jfree.chart.util.HorizontalAlignment.CENTER.name != null
org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString == "HorizontalAlignment.CENTER"
this.horizontalAlignment.name.toString == "HorizontalAlignment.CENTER"
this.verticalAlignment has only one value
this.verticalAlignment != null
org.jfree.chart.util.VerticalAlignment.TOP has only one value
org.jfree.chart.util.VerticalAlignment.TOP != null
org.jfree.chart.util.VerticalAlignment.BOTTOM has only one value
org.jfree.chart.util.VerticalAlignment.BOTTOM != null
org.jfree.chart.util.VerticalAlignment.CENTER has only one value
org.jfree.chart.util.VerticalAlignment.CENTER != null
org.jfree.chart.util.VerticalAlignment.TOP.name has only one value
org.jfree.chart.util.VerticalAlignment.TOP.name != null
org.jfree.chart.util.VerticalAlignment.TOP.name.toString == "VerticalAlignment.TOP"
org.jfree.chart.util.VerticalAlignment.BOTTOM.name has only one value
org.jfree.chart.util.VerticalAlignment.BOTTOM.name != null
org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString == "VerticalAlignment.BOTTOM"
org.jfree.chart.util.VerticalAlignment.CENTER.name has only one value
org.jfree.chart.util.VerticalAlignment.CENTER.name != null
org.jfree.chart.util.VerticalAlignment.CENTER.name.toString == "VerticalAlignment.CENTER"
this.verticalAlignment.name.toString == "VerticalAlignment.CENTER"
this.horizontalGap == 2.0
this.verticalGap == 2.0
===========================================================================
org.jfree.chart.block.FlowArrangement.FlowArrangement():::EXIT
this.horizontalAlignment == org.jfree.chart.util.HorizontalAlignment.CENTER
this.verticalAlignment == org.jfree.chart.util.VerticalAlignment.CENTER
===========================================================================
org.jfree.chart.block.FlowArrangement.FlowArrangement(org.jfree.chart.util.HorizontalAlignment, org.jfree.chart.util.VerticalAlignment, double, double):::ENTER
hAlign == org.jfree.chart.util.HorizontalAlignment.CENTER
org.jfree.chart.util.HorizontalAlignment.CENTER.name == hAlign.name
vAlign == org.jfree.chart.util.VerticalAlignment.CENTER
org.jfree.chart.util.VerticalAlignment.CENTER.name == vAlign.name
org.jfree.chart.util.HorizontalAlignment.LEFT has only one value
org.jfree.chart.util.HorizontalAlignment.RIGHT has only one value
org.jfree.chart.util.HorizontalAlignment.CENTER has only one value
org.jfree.chart.util.HorizontalAlignment.LEFT.name has only one value
org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString == "HorizontalAlignment.LEFT"
org.jfree.chart.util.HorizontalAlignment.RIGHT.name has only one value
org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString == "HorizontalAlignment.RIGHT"
org.jfree.chart.util.HorizontalAlignment.CENTER.name has only one value
org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString == "HorizontalAlignment.CENTER"
hAlign.name.toString == "HorizontalAlignment.CENTER"
org.jfree.chart.util.VerticalAlignment.TOP has only one value
org.jfree.chart.util.VerticalAlignment.BOTTOM has only one value
org.jfree.chart.util.VerticalAlignment.CENTER has only one value
org.jfree.chart.util.VerticalAlignment.TOP.name has only one value
org.jfree.chart.util.VerticalAlignment.TOP.name.toString == "VerticalAlignment.TOP"
org.jfree.chart.util.VerticalAlignment.BOTTOM.name has only one value
org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString == "VerticalAlignment.BOTTOM"
org.jfree.chart.util.VerticalAlignment.CENTER.name has only one value
org.jfree.chart.util.VerticalAlignment.CENTER.name.toString == "VerticalAlignment.CENTER"
vAlign.name.toString == "VerticalAlignment.CENTER"
hGap == 2.0
vGap == 2.0
===========================================================================
org.jfree.chart.block.FlowArrangement.FlowArrangement(org.jfree.chart.util.HorizontalAlignment, org.jfree.chart.util.VerticalAlignment, double, double):::EXIT
this.horizontalAlignment == org.jfree.chart.util.HorizontalAlignment.CENTER
org.jfree.chart.util.HorizontalAlignment.LEFT == orig(org.jfree.chart.util.HorizontalAlignment.LEFT)
org.jfree.chart.util.HorizontalAlignment.RIGHT == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT)
org.jfree.chart.util.HorizontalAlignment.CENTER == orig(hAlign)
org.jfree.chart.util.HorizontalAlignment.CENTER == orig(org.jfree.chart.util.HorizontalAlignment.CENTER)
org.jfree.chart.util.HorizontalAlignment.LEFT.name == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name)
org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString)
org.jfree.chart.util.HorizontalAlignment.CENTER.name == hAlign.name
org.jfree.chart.util.HorizontalAlignment.CENTER.name == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name)
org.jfree.chart.util.HorizontalAlignment.CENTER.name == orig(hAlign.name)
org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString)
this.verticalAlignment == org.jfree.chart.util.VerticalAlignment.CENTER
org.jfree.chart.util.VerticalAlignment.TOP == orig(org.jfree.chart.util.VerticalAlignment.TOP)
org.jfree.chart.util.VerticalAlignment.BOTTOM == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM)
org.jfree.chart.util.VerticalAlignment.CENTER == orig(vAlign)
org.jfree.chart.util.VerticalAlignment.CENTER == orig(org.jfree.chart.util.VerticalAlignment.CENTER)
org.jfree.chart.util.VerticalAlignment.TOP.name == orig(org.jfree.chart.util.VerticalAlignment.TOP.name)
org.jfree.chart.util.VerticalAlignment.TOP.name.toString == orig(org.jfree.chart.util.VerticalAlignment.TOP.name.toString)
org.jfree.chart.util.VerticalAlignment.BOTTOM.name == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM.name)
org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString)
org.jfree.chart.util.VerticalAlignment.CENTER.name == vAlign.name
org.jfree.chart.util.VerticalAlignment.CENTER.name == orig(org.jfree.chart.util.VerticalAlignment.CENTER.name)
org.jfree.chart.util.VerticalAlignment.CENTER.name == orig(vAlign.name)
org.jfree.chart.util.VerticalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.VerticalAlignment.CENTER.name.toString)
this.horizontalGap == orig(hGap)
this.verticalGap == orig(vGap)
hAlign.name.toString == orig(hAlign.name.toString)
vAlign.name.toString == orig(vAlign.name.toString)
hAlign.name.toString == "HorizontalAlignment.CENTER"
vAlign.name.toString == "VerticalAlignment.CENTER"
===========================================================================
org.jfree.chart.block.FlowArrangement.add(org.jfree.chart.block.Block, java.lang.Object):::ENTER
this has only one value
block.getClass().getName() == org.jfree.chart.block.BlockContainer.class
key == null
===========================================================================
org.jfree.chart.block.FlowArrangement.add(org.jfree.chart.block.Block, java.lang.Object):::EXIT
this.horizontalAlignment == orig(this.horizontalAlignment)
org.jfree.chart.util.HorizontalAlignment.LEFT == orig(org.jfree.chart.util.HorizontalAlignment.LEFT)
org.jfree.chart.util.HorizontalAlignment.RIGHT == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT)
org.jfree.chart.util.HorizontalAlignment.CENTER == orig(org.jfree.chart.util.HorizontalAlignment.CENTER)
org.jfree.chart.util.HorizontalAlignment.LEFT.name == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name)
org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString)
org.jfree.chart.util.HorizontalAlignment.CENTER.name == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name)
org.jfree.chart.util.HorizontalAlignment.CENTER.name == orig(this.horizontalAlignment.name)
org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString)
this.horizontalAlignment.name.toString == orig(this.horizontalAlignment.name.toString)
this.verticalAlignment == orig(this.verticalAlignment)
org.jfree.chart.util.VerticalAlignment.TOP == orig(org.jfree.chart.util.VerticalAlignment.TOP)
org.jfree.chart.util.VerticalAlignment.BOTTOM == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM)
org.jfree.chart.util.VerticalAlignment.CENTER == orig(org.jfree.chart.util.VerticalAlignment.CENTER)
org.jfree.chart.util.VerticalAlignment.TOP.name == orig(org.jfree.chart.util.VerticalAlignment.TOP.name)
org.jfree.chart.util.VerticalAlignment.TOP.name.toString == orig(org.jfree.chart.util.VerticalAlignment.TOP.name.toString)
org.jfree.chart.util.VerticalAlignment.BOTTOM.name == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM.name)
org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString)
org.jfree.chart.util.VerticalAlignment.CENTER.name == orig(org.jfree.chart.util.VerticalAlignment.CENTER.name)
org.jfree.chart.util.VerticalAlignment.CENTER.name == orig(this.verticalAlignment.name)
org.jfree.chart.util.VerticalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.VerticalAlignment.CENTER.name.toString)
this.verticalAlignment.name.toString == orig(this.verticalAlignment.name.toString)
this.horizontalGap == orig(this.horizontalGap)
this.verticalGap == orig(this.verticalGap)
===========================================================================
org.jfree.chart.block.FlowArrangement.arrange(org.jfree.chart.block.BlockContainer, java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint):::ENTER
this has only one value
container has only one value
container.blocks has only one value
container.blocks[] contains no nulls and has only one value, of length 3
container.blocks[].getClass().getName() == [org.jfree.chart.block.BlockContainer, org.jfree.chart.block.BlockContainer, org.jfree.chart.block.BlockContainer]
container.blocks[].getClass().getName() elements == org.jfree.chart.block.BlockContainer.class
container.blocks.getClass().getName() == java.util.ArrayList.class
container.arrangement has only one value
container.arrangement.getClass().getName() == org.jfree.chart.block.FlowArrangement.class
container.id == null
container.margin has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS has only one value
container.margin.unitType has only one value
container.margin.top == 0.0
container.margin.left == 0.0
container.margin.bottom == 0.0
container.margin.right == 0.0
container.frame has only one value
container.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class
container.padding has only one value
container.padding.unitType has only one value
container.padding.top == 0.0
container.padding.left == 0.0
container.padding.bottom == 0.0
container.padding.right == 0.0
container.width == 0.0
container.height == 0.0
container.bounds has only one value
container.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
g2 has only one value
g2.getClass().getName() == sun.java2d.SunGraphics2D.class
constraint has only one value
org.jfree.chart.block.RectangleConstraint.NONE has only one value
org.jfree.chart.block.RectangleConstraint.NONE.width == 0.0
org.jfree.chart.block.RectangleConstraint.NONE.widthRange == null
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType has only one value
org.jfree.chart.block.RectangleConstraint.NONE.height == 0.0
org.jfree.chart.block.RectangleConstraint.NONE.heightRange == null
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType has only one value
constraint.width == 194.0
constraint.widthRange has only one value
constraint.widthRange.lower == 0.0
constraint.widthRange.upper == 194.0
constraint.widthConstraintType has only one value
org.jfree.chart.block.LengthConstraintType.NONE has only one value
org.jfree.chart.block.LengthConstraintType.RANGE has only one value
org.jfree.chart.block.LengthConstraintType.FIXED has only one value
constraint.widthConstraintType.name has only one value
constraint.widthConstraintType.name.toString == "RectangleConstraintType.RANGE"
constraint.height == 71.046875
constraint.heightRange has only one value
constraint.heightRange.lower == 0.0
constraint.heightRange.upper == 71.046875
constraint.heightConstraintType has only one value
constraint.heightConstraintType.name has only one value
constraint.heightConstraintType.name.toString == "RectangleConstraintType.RANGE"
size(container.blocks[]) == 3
===========================================================================
org.jfree.chart.block.FlowArrangement.arrange(org.jfree.chart.block.BlockContainer, java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint):::EXIT159
===========================================================================
org.jfree.chart.block.FlowArrangement.arrange(org.jfree.chart.block.BlockContainer, java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint):::EXIT
this.horizontalAlignment == orig(this.horizontalAlignment)
org.jfree.chart.util.HorizontalAlignment.LEFT == orig(org.jfree.chart.util.HorizontalAlignment.LEFT)
org.jfree.chart.util.HorizontalAlignment.RIGHT == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT)
org.jfree.chart.util.HorizontalAlignment.CENTER == orig(org.jfree.chart.util.HorizontalAlignment.CENTER)
org.jfree.chart.util.HorizontalAlignment.LEFT.name == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name)
org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString)
org.jfree.chart.util.HorizontalAlignment.CENTER.name == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name)
org.jfree.chart.util.HorizontalAlignment.CENTER.name == orig(this.horizontalAlignment.name)
org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString)
this.horizontalAlignment.name.toString == orig(this.horizontalAlignment.name.toString)
this.verticalAlignment == orig(this.verticalAlignment)
org.jfree.chart.util.VerticalAlignment.TOP == orig(org.jfree.chart.util.VerticalAlignment.TOP)
org.jfree.chart.util.VerticalAlignment.BOTTOM == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM)
org.jfree.chart.util.VerticalAlignment.CENTER == orig(org.jfree.chart.util.VerticalAlignment.CENTER)
org.jfree.chart.util.VerticalAlignment.TOP.name == orig(org.jfree.chart.util.VerticalAlignment.TOP.name)
org.jfree.chart.util.VerticalAlignment.TOP.name.toString == orig(org.jfree.chart.util.VerticalAlignment.TOP.name.toString)
org.jfree.chart.util.VerticalAlignment.BOTTOM.name == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM.name)
org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString)
org.jfree.chart.util.VerticalAlignment.CENTER.name == orig(org.jfree.chart.util.VerticalAlignment.CENTER.name)
org.jfree.chart.util.VerticalAlignment.CENTER.name == orig(this.verticalAlignment.name)
org.jfree.chart.util.VerticalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.VerticalAlignment.CENTER.name.toString)
this.verticalAlignment.name.toString == orig(this.verticalAlignment.name.toString)
this.horizontalGap == orig(this.horizontalGap)
this.verticalGap == orig(this.verticalGap)
container.blocks == orig(container.blocks)
container.blocks[] == orig(container.blocks[])
container.blocks.getClass().getName() == orig(container.blocks.getClass().getName())
container.arrangement == orig(container.arrangement)
container.arrangement.getClass().getName() == orig(container.arrangement.getClass().getName())
container.id == orig(container.id)
container.margin == orig(container.margin)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
container.margin.unitType == orig(container.margin.unitType)
container.margin.top == orig(container.margin.top)
container.margin.left == orig(container.margin.left)
container.margin.bottom == orig(container.margin.bottom)
container.margin.right == orig(container.margin.right)
container.frame == orig(container.frame)
container.frame.getClass().getName() == orig(container.frame.getClass().getName())
container.padding == orig(container.padding)
container.padding.unitType == orig(container.padding.unitType)
container.padding.top == orig(container.padding.top)
container.padding.left == orig(container.padding.left)
container.padding.bottom == orig(container.padding.bottom)
container.padding.right == orig(container.padding.right)
container.width == orig(container.width)
container.height == orig(container.height)
container.bounds == orig(container.bounds)
container.bounds.getClass().getName() == orig(container.bounds.getClass().getName())
org.jfree.chart.block.RectangleConstraint.NONE == orig(org.jfree.chart.block.RectangleConstraint.NONE)
org.jfree.chart.block.RectangleConstraint.NONE.width == orig(org.jfree.chart.block.RectangleConstraint.NONE.width)
org.jfree.chart.block.RectangleConstraint.NONE.widthRange == orig(org.jfree.chart.block.RectangleConstraint.NONE.widthRange)
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType == orig(org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType)
org.jfree.chart.block.RectangleConstraint.NONE.height == orig(org.jfree.chart.block.RectangleConstraint.NONE.height)
org.jfree.chart.block.RectangleConstraint.NONE.heightRange == orig(org.jfree.chart.block.RectangleConstraint.NONE.heightRange)
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType == orig(org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType)
constraint.width == orig(constraint.width)
constraint.widthRange == orig(constraint.widthRange)
constraint.widthRange.lower == orig(constraint.widthRange.lower)
constraint.widthRange.upper == orig(constraint.widthRange.upper)
constraint.widthConstraintType == orig(constraint.widthConstraintType)
org.jfree.chart.block.LengthConstraintType.NONE == orig(org.jfree.chart.block.LengthConstraintType.NONE)
org.jfree.chart.block.LengthConstraintType.RANGE == orig(org.jfree.chart.block.LengthConstraintType.RANGE)
org.jfree.chart.block.LengthConstraintType.FIXED == orig(org.jfree.chart.block.LengthConstraintType.FIXED)
constraint.widthConstraintType.name == orig(constraint.widthConstraintType.name)
constraint.widthConstraintType.name.toString == orig(constraint.widthConstraintType.name.toString)
constraint.height == orig(constraint.height)
constraint.heightRange == orig(constraint.heightRange)
constraint.heightRange.lower == orig(constraint.heightRange.lower)
constraint.heightRange.upper == orig(constraint.heightRange.upper)
constraint.heightConstraintType == orig(constraint.heightConstraintType)
constraint.heightConstraintType.name == orig(constraint.heightConstraintType.name)
constraint.heightConstraintType.name.toString == orig(constraint.heightConstraintType.name.toString)
container.blocks has only one value
container.blocks[] contains no nulls and has only one value, of length 3
container.blocks[].getClass().getName() == [org.jfree.chart.block.BlockContainer, org.jfree.chart.block.BlockContainer, org.jfree.chart.block.BlockContainer]
container.blocks[].getClass().getName() elements == org.jfree.chart.block.BlockContainer.class
container.blocks.getClass().getName() == java.util.ArrayList.class
container.arrangement has only one value
container.arrangement.getClass().getName() == org.jfree.chart.block.FlowArrangement.class
container.id == null
container.margin has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS has only one value
container.margin.unitType has only one value
container.margin.top == 0.0
container.margin.left == 0.0
container.margin.bottom == 0.0
container.margin.right == 0.0
container.frame has only one value
container.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class
container.padding has only one value
container.padding.unitType has only one value
container.padding.top == 0.0
container.padding.left == 0.0
container.padding.bottom == 0.0
container.padding.right == 0.0
container.width == 0.0
container.height == 0.0
container.bounds has only one value
container.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
org.jfree.chart.block.RectangleConstraint.NONE has only one value
org.jfree.chart.block.RectangleConstraint.NONE.width == 0.0
org.jfree.chart.block.RectangleConstraint.NONE.widthRange == null
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType has only one value
org.jfree.chart.block.RectangleConstraint.NONE.height == 0.0
org.jfree.chart.block.RectangleConstraint.NONE.heightRange == null
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType has only one value
constraint.width == 194.0
constraint.widthRange has only one value
constraint.widthRange.lower == 0.0
constraint.widthRange.upper == 194.0
constraint.widthConstraintType has only one value
org.jfree.chart.block.LengthConstraintType.NONE has only one value
org.jfree.chart.block.LengthConstraintType.RANGE has only one value
org.jfree.chart.block.LengthConstraintType.FIXED has only one value
constraint.widthConstraintType.name has only one value
constraint.widthConstraintType.name.toString == "RectangleConstraintType.RANGE"
constraint.height == 71.046875
constraint.heightRange has only one value
constraint.heightRange.lower == 0.0
constraint.heightRange.upper == 71.046875
constraint.heightConstraintType has only one value
constraint.heightConstraintType.name has only one value
constraint.heightConstraintType.name.toString == "RectangleConstraintType.RANGE"
return has only one value
return.width == 194.0
return.height == 37.9375
size(container.blocks[]) == 3
===========================================================================
org.jfree.chart.block.FlowArrangement.arrangeFN(org.jfree.chart.block.BlockContainer, java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint):::ENTER
this has only one value
container has only one value
container.blocks has only one value
container.blocks[] contains no nulls and has only one value, of length 3
container.blocks[].getClass().getName() == [org.jfree.chart.block.BlockContainer, org.jfree.chart.block.BlockContainer, org.jfree.chart.block.BlockContainer]
container.blocks[].getClass().getName() elements == org.jfree.chart.block.BlockContainer.class
container.blocks.getClass().getName() == java.util.ArrayList.class
container.arrangement has only one value
container.arrangement.getClass().getName() == org.jfree.chart.block.FlowArrangement.class
container.id == null
container.margin has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS has only one value
container.margin.unitType has only one value
container.margin.top == 0.0
container.margin.left == 0.0
container.margin.bottom == 0.0
container.margin.right == 0.0
container.frame has only one value
container.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class
container.padding has only one value
container.padding.unitType has only one value
container.padding.top == 0.0
container.padding.left == 0.0
container.padding.bottom == 0.0
container.padding.right == 0.0
container.width == 0.0
container.height == 0.0
container.bounds has only one value
container.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
g2 has only one value
g2.getClass().getName() == sun.java2d.SunGraphics2D.class
constraint has only one value
org.jfree.chart.block.RectangleConstraint.NONE has only one value
org.jfree.chart.block.RectangleConstraint.NONE.width == 0.0
org.jfree.chart.block.RectangleConstraint.NONE.widthRange == null
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType has only one value
org.jfree.chart.block.RectangleConstraint.NONE.height == 0.0
org.jfree.chart.block.RectangleConstraint.NONE.heightRange == null
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType has only one value
constraint.width == 194.0
constraint.widthRange has only one value
constraint.widthRange.lower == 0.0
constraint.widthRange.upper == 194.0
constraint.widthConstraintType has only one value
org.jfree.chart.block.LengthConstraintType.NONE has only one value
org.jfree.chart.block.LengthConstraintType.RANGE has only one value
org.jfree.chart.block.LengthConstraintType.FIXED has only one value
constraint.widthConstraintType.name has only one value
constraint.widthConstraintType.name.toString == "LengthConstraintType.FIXED"
constraint.height == 71.046875
constraint.heightRange has only one value
constraint.heightRange.lower == 0.0
constraint.heightRange.upper == 71.046875
constraint.heightConstraintType has only one value
constraint.heightConstraintType.name has only one value
constraint.heightConstraintType.name.toString == "RectangleConstraintType.RANGE"
size(container.blocks[]) == 3
===========================================================================
org.jfree.chart.block.FlowArrangement.arrangeFN(org.jfree.chart.block.BlockContainer, java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint):::EXIT
this.horizontalAlignment == orig(this.horizontalAlignment)
org.jfree.chart.util.HorizontalAlignment.LEFT == orig(org.jfree.chart.util.HorizontalAlignment.LEFT)
org.jfree.chart.util.HorizontalAlignment.RIGHT == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT)
org.jfree.chart.util.HorizontalAlignment.CENTER == orig(org.jfree.chart.util.HorizontalAlignment.CENTER)
org.jfree.chart.util.HorizontalAlignment.LEFT.name == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name)
org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString)
org.jfree.chart.util.HorizontalAlignment.CENTER.name == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name)
org.jfree.chart.util.HorizontalAlignment.CENTER.name == orig(this.horizontalAlignment.name)
org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString)
this.horizontalAlignment.name.toString == orig(this.horizontalAlignment.name.toString)
this.verticalAlignment == orig(this.verticalAlignment)
org.jfree.chart.util.VerticalAlignment.TOP == orig(org.jfree.chart.util.VerticalAlignment.TOP)
org.jfree.chart.util.VerticalAlignment.BOTTOM == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM)
org.jfree.chart.util.VerticalAlignment.CENTER == orig(org.jfree.chart.util.VerticalAlignment.CENTER)
org.jfree.chart.util.VerticalAlignment.TOP.name == orig(org.jfree.chart.util.VerticalAlignment.TOP.name)
org.jfree.chart.util.VerticalAlignment.TOP.name.toString == orig(org.jfree.chart.util.VerticalAlignment.TOP.name.toString)
org.jfree.chart.util.VerticalAlignment.BOTTOM.name == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM.name)
org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString)
org.jfree.chart.util.VerticalAlignment.CENTER.name == orig(org.jfree.chart.util.VerticalAlignment.CENTER.name)
org.jfree.chart.util.VerticalAlignment.CENTER.name == orig(this.verticalAlignment.name)
org.jfree.chart.util.VerticalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.VerticalAlignment.CENTER.name.toString)
this.verticalAlignment.name.toString == orig(this.verticalAlignment.name.toString)
this.horizontalGap == orig(this.horizontalGap)
this.verticalGap == orig(this.verticalGap)
container.blocks == orig(container.blocks)
container.blocks[] == orig(container.blocks[])
container.blocks.getClass().getName() == orig(container.blocks.getClass().getName())
container.arrangement == orig(container.arrangement)
container.arrangement.getClass().getName() == orig(container.arrangement.getClass().getName())
container.id == orig(container.id)
container.margin == orig(container.margin)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
container.margin.unitType == orig(container.margin.unitType)
container.margin.top == orig(container.margin.top)
container.margin.left == orig(container.margin.left)
container.margin.bottom == orig(container.margin.bottom)
container.margin.right == orig(container.margin.right)
container.frame == orig(container.frame)
container.frame.getClass().getName() == orig(container.frame.getClass().getName())
container.padding == orig(container.padding)
container.padding.unitType == orig(container.padding.unitType)
container.padding.top == orig(container.padding.top)
container.padding.left == orig(container.padding.left)
container.padding.bottom == orig(container.padding.bottom)
container.padding.right == orig(container.padding.right)
container.width == orig(container.width)
container.height == orig(container.height)
container.bounds == orig(container.bounds)
container.bounds.getClass().getName() == orig(container.bounds.getClass().getName())
org.jfree.chart.block.RectangleConstraint.NONE == orig(org.jfree.chart.block.RectangleConstraint.NONE)
org.jfree.chart.block.RectangleConstraint.NONE.width == orig(org.jfree.chart.block.RectangleConstraint.NONE.width)
org.jfree.chart.block.RectangleConstraint.NONE.widthRange == orig(org.jfree.chart.block.RectangleConstraint.NONE.widthRange)
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType == orig(org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType)
org.jfree.chart.block.RectangleConstraint.NONE.height == orig(org.jfree.chart.block.RectangleConstraint.NONE.height)
org.jfree.chart.block.RectangleConstraint.NONE.heightRange == orig(org.jfree.chart.block.RectangleConstraint.NONE.heightRange)
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType == orig(org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType)
constraint.width == orig(constraint.width)
constraint.widthRange == orig(constraint.widthRange)
constraint.widthRange.lower == orig(constraint.widthRange.lower)
constraint.widthRange.upper == orig(constraint.widthRange.upper)
constraint.widthConstraintType == orig(constraint.widthConstraintType)
org.jfree.chart.block.LengthConstraintType.NONE == orig(org.jfree.chart.block.LengthConstraintType.NONE)
org.jfree.chart.block.LengthConstraintType.RANGE == orig(org.jfree.chart.block.LengthConstraintType.RANGE)
org.jfree.chart.block.LengthConstraintType.FIXED == orig(org.jfree.chart.block.LengthConstraintType.FIXED)
constraint.widthConstraintType.name == orig(constraint.widthConstraintType.name)
constraint.widthConstraintType.name.toString == orig(constraint.widthConstraintType.name.toString)
constraint.height == orig(constraint.height)
constraint.heightRange == orig(constraint.heightRange)
constraint.heightRange.lower == orig(constraint.heightRange.lower)
constraint.heightRange.upper == orig(constraint.heightRange.upper)
constraint.heightConstraintType == orig(constraint.heightConstraintType)
constraint.heightConstraintType.name == orig(constraint.heightConstraintType.name)
constraint.heightConstraintType.name.toString == orig(constraint.heightConstraintType.name.toString)
container.blocks has only one value
container.blocks[] contains no nulls and has only one value, of length 3
container.blocks[].getClass().getName() == [org.jfree.chart.block.BlockContainer, org.jfree.chart.block.BlockContainer, org.jfree.chart.block.BlockContainer]
container.blocks[].getClass().getName() elements == org.jfree.chart.block.BlockContainer.class
container.blocks.getClass().getName() == java.util.ArrayList.class
container.arrangement has only one value
container.arrangement.getClass().getName() == org.jfree.chart.block.FlowArrangement.class
container.id == null
container.margin has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS has only one value
container.margin.unitType has only one value
container.margin.top == 0.0
container.margin.left == 0.0
container.margin.bottom == 0.0
container.margin.right == 0.0
container.frame has only one value
container.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class
container.padding has only one value
container.padding.unitType has only one value
container.padding.top == 0.0
container.padding.left == 0.0
container.padding.bottom == 0.0
container.padding.right == 0.0
container.width == 0.0
container.height == 0.0
container.bounds has only one value
container.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
org.jfree.chart.block.RectangleConstraint.NONE has only one value
org.jfree.chart.block.RectangleConstraint.NONE.width == 0.0
org.jfree.chart.block.RectangleConstraint.NONE.widthRange == null
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType has only one value
org.jfree.chart.block.RectangleConstraint.NONE.height == 0.0
org.jfree.chart.block.RectangleConstraint.NONE.heightRange == null
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType has only one value
constraint.width == 194.0
constraint.widthRange has only one value
constraint.widthRange.lower == 0.0
constraint.widthRange.upper == 194.0
constraint.widthConstraintType has only one value
org.jfree.chart.block.LengthConstraintType.NONE has only one value
org.jfree.chart.block.LengthConstraintType.RANGE has only one value
org.jfree.chart.block.LengthConstraintType.FIXED has only one value
constraint.widthConstraintType.name has only one value
constraint.widthConstraintType.name.toString == "LengthConstraintType.FIXED"
constraint.height == 71.046875
constraint.heightRange has only one value
constraint.heightRange.lower == 0.0
constraint.heightRange.upper == 71.046875
constraint.heightConstraintType has only one value
constraint.heightConstraintType.name has only one value
constraint.heightConstraintType.name.toString == "RectangleConstraintType.RANGE"
return has only one value
return.width == 194.0
return.height == 37.9375
size(container.blocks[]) == 3
===========================================================================
org.jfree.chart.block.FlowArrangement.arrangeFR(org.jfree.chart.block.BlockContainer, java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint):::ENTER
this has only one value
container has only one value
container.blocks has only one value
container.blocks[] contains no nulls and has only one value, of length 3
container.blocks[].getClass().getName() == [org.jfree.chart.block.BlockContainer, org.jfree.chart.block.BlockContainer, org.jfree.chart.block.BlockContainer]
container.blocks[].getClass().getName() elements == org.jfree.chart.block.BlockContainer.class
container.blocks.getClass().getName() == java.util.ArrayList.class
container.arrangement has only one value
container.arrangement.getClass().getName() == org.jfree.chart.block.FlowArrangement.class
container.id == null
container.margin has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS has only one value
container.margin.unitType has only one value
container.margin.top == 0.0
container.margin.left == 0.0
container.margin.bottom == 0.0
container.margin.right == 0.0
container.frame has only one value
container.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class
container.padding has only one value
container.padding.unitType has only one value
container.padding.top == 0.0
container.padding.left == 0.0
container.padding.bottom == 0.0
container.padding.right == 0.0
container.width == 0.0
container.height == 0.0
container.bounds has only one value
container.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
g2 has only one value
g2.getClass().getName() == sun.java2d.SunGraphics2D.class
constraint has only one value
org.jfree.chart.block.RectangleConstraint.NONE has only one value
org.jfree.chart.block.RectangleConstraint.NONE.width == 0.0
org.jfree.chart.block.RectangleConstraint.NONE.widthRange == null
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType has only one value
org.jfree.chart.block.RectangleConstraint.NONE.height == 0.0
org.jfree.chart.block.RectangleConstraint.NONE.heightRange == null
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType has only one value
constraint.width == 194.0
constraint.widthRange has only one value
constraint.widthRange.lower == 0.0
constraint.widthRange.upper == 194.0
constraint.widthConstraintType has only one value
org.jfree.chart.block.LengthConstraintType.NONE has only one value
org.jfree.chart.block.LengthConstraintType.RANGE has only one value
org.jfree.chart.block.LengthConstraintType.FIXED has only one value
constraint.widthConstraintType.name has only one value
constraint.widthConstraintType.name.toString == "LengthConstraintType.FIXED"
constraint.height == 71.046875
constraint.heightRange has only one value
constraint.heightRange.lower == 0.0
constraint.heightRange.upper == 71.046875
constraint.heightConstraintType has only one value
constraint.heightConstraintType.name has only one value
constraint.heightConstraintType.name.toString == "RectangleConstraintType.RANGE"
size(container.blocks[]) == 3
===========================================================================
org.jfree.chart.block.FlowArrangement.arrangeFR(org.jfree.chart.block.BlockContainer, java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint):::EXIT242
===========================================================================
org.jfree.chart.block.FlowArrangement.arrangeFR(org.jfree.chart.block.BlockContainer, java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint):::EXIT
this.horizontalAlignment == orig(this.horizontalAlignment)
org.jfree.chart.util.HorizontalAlignment.LEFT == orig(org.jfree.chart.util.HorizontalAlignment.LEFT)
org.jfree.chart.util.HorizontalAlignment.RIGHT == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT)
org.jfree.chart.util.HorizontalAlignment.CENTER == orig(org.jfree.chart.util.HorizontalAlignment.CENTER)
org.jfree.chart.util.HorizontalAlignment.LEFT.name == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name)
org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString)
org.jfree.chart.util.HorizontalAlignment.CENTER.name == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name)
org.jfree.chart.util.HorizontalAlignment.CENTER.name == orig(this.horizontalAlignment.name)
org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString)
this.horizontalAlignment.name.toString == orig(this.horizontalAlignment.name.toString)
this.verticalAlignment == orig(this.verticalAlignment)
org.jfree.chart.util.VerticalAlignment.TOP == orig(org.jfree.chart.util.VerticalAlignment.TOP)
org.jfree.chart.util.VerticalAlignment.BOTTOM == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM)
org.jfree.chart.util.VerticalAlignment.CENTER == orig(org.jfree.chart.util.VerticalAlignment.CENTER)
org.jfree.chart.util.VerticalAlignment.TOP.name == orig(org.jfree.chart.util.VerticalAlignment.TOP.name)
org.jfree.chart.util.VerticalAlignment.TOP.name.toString == orig(org.jfree.chart.util.VerticalAlignment.TOP.name.toString)
org.jfree.chart.util.VerticalAlignment.BOTTOM.name == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM.name)
org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString)
org.jfree.chart.util.VerticalAlignment.CENTER.name == orig(org.jfree.chart.util.VerticalAlignment.CENTER.name)
org.jfree.chart.util.VerticalAlignment.CENTER.name == orig(this.verticalAlignment.name)
org.jfree.chart.util.VerticalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.VerticalAlignment.CENTER.name.toString)
this.verticalAlignment.name.toString == orig(this.verticalAlignment.name.toString)
this.horizontalGap == orig(this.horizontalGap)
this.verticalGap == orig(this.verticalGap)
container.blocks == orig(container.blocks)
container.blocks[] == orig(container.blocks[])
container.blocks.getClass().getName() == orig(container.blocks.getClass().getName())
container.arrangement == orig(container.arrangement)
container.arrangement.getClass().getName() == orig(container.arrangement.getClass().getName())
container.id == orig(container.id)
container.margin == orig(container.margin)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
container.margin.unitType == orig(container.margin.unitType)
container.margin.top == orig(container.margin.top)
container.margin.left == orig(container.margin.left)
container.margin.bottom == orig(container.margin.bottom)
container.margin.right == orig(container.margin.right)
container.frame == orig(container.frame)
container.frame.getClass().getName() == orig(container.frame.getClass().getName())
container.padding == orig(container.padding)
container.padding.unitType == orig(container.padding.unitType)
container.padding.top == orig(container.padding.top)
container.padding.left == orig(container.padding.left)
container.padding.bottom == orig(container.padding.bottom)
container.padding.right == orig(container.padding.right)
container.width == orig(container.width)
container.height == orig(container.height)
container.bounds == orig(container.bounds)
container.bounds.getClass().getName() == orig(container.bounds.getClass().getName())
org.jfree.chart.block.RectangleConstraint.NONE == orig(org.jfree.chart.block.RectangleConstraint.NONE)
org.jfree.chart.block.RectangleConstraint.NONE.width == orig(org.jfree.chart.block.RectangleConstraint.NONE.width)
org.jfree.chart.block.RectangleConstraint.NONE.widthRange == orig(org.jfree.chart.block.RectangleConstraint.NONE.widthRange)
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType == orig(org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType)
org.jfree.chart.block.RectangleConstraint.NONE.height == orig(org.jfree.chart.block.RectangleConstraint.NONE.height)
org.jfree.chart.block.RectangleConstraint.NONE.heightRange == orig(org.jfree.chart.block.RectangleConstraint.NONE.heightRange)
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType == orig(org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType)
constraint.width == orig(constraint.width)
constraint.widthRange == orig(constraint.widthRange)
constraint.widthRange.lower == orig(constraint.widthRange.lower)
constraint.widthRange.upper == orig(constraint.widthRange.upper)
constraint.widthConstraintType == orig(constraint.widthConstraintType)
org.jfree.chart.block.LengthConstraintType.NONE == orig(org.jfree.chart.block.LengthConstraintType.NONE)
org.jfree.chart.block.LengthConstraintType.RANGE == orig(org.jfree.chart.block.LengthConstraintType.RANGE)
org.jfree.chart.block.LengthConstraintType.FIXED == orig(org.jfree.chart.block.LengthConstraintType.FIXED)
constraint.widthConstraintType.name == orig(constraint.widthConstraintType.name)
constraint.widthConstraintType.name.toString == orig(constraint.widthConstraintType.name.toString)
constraint.height == orig(constraint.height)
constraint.heightRange == orig(constraint.heightRange)
constraint.heightRange.lower == orig(constraint.heightRange.lower)
constraint.heightRange.upper == orig(constraint.heightRange.upper)
constraint.heightConstraintType == orig(constraint.heightConstraintType)
constraint.heightConstraintType.name == orig(constraint.heightConstraintType.name)
constraint.heightConstraintType.name.toString == orig(constraint.heightConstraintType.name.toString)
container.blocks has only one value
container.blocks[] contains no nulls and has only one value, of length 3
container.blocks[].getClass().getName() == [org.jfree.chart.block.BlockContainer, org.jfree.chart.block.BlockContainer, org.jfree.chart.block.BlockContainer]
container.blocks[].getClass().getName() elements == org.jfree.chart.block.BlockContainer.class
container.blocks.getClass().getName() == java.util.ArrayList.class
container.arrangement has only one value
container.arrangement.getClass().getName() == org.jfree.chart.block.FlowArrangement.class
container.id == null
container.margin has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS has only one value
container.margin.unitType has only one value
container.margin.top == 0.0
container.margin.left == 0.0
container.margin.bottom == 0.0
container.margin.right == 0.0
container.frame has only one value
container.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class
container.padding has only one value
container.padding.unitType has only one value
container.padding.top == 0.0
container.padding.left == 0.0
container.padding.bottom == 0.0
container.padding.right == 0.0
container.width == 0.0
container.height == 0.0
container.bounds has only one value
container.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
org.jfree.chart.block.RectangleConstraint.NONE has only one value
org.jfree.chart.block.RectangleConstraint.NONE.width == 0.0
org.jfree.chart.block.RectangleConstraint.NONE.widthRange == null
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType has only one value
org.jfree.chart.block.RectangleConstraint.NONE.height == 0.0
org.jfree.chart.block.RectangleConstraint.NONE.heightRange == null
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType has only one value
constraint.width == 194.0
constraint.widthRange has only one value
constraint.widthRange.lower == 0.0
constraint.widthRange.upper == 194.0
constraint.widthConstraintType has only one value
org.jfree.chart.block.LengthConstraintType.NONE has only one value
org.jfree.chart.block.LengthConstraintType.RANGE has only one value
org.jfree.chart.block.LengthConstraintType.FIXED has only one value
constraint.widthConstraintType.name has only one value
constraint.widthConstraintType.name.toString == "LengthConstraintType.FIXED"
constraint.height == 71.046875
constraint.heightRange has only one value
constraint.heightRange.lower == 0.0
constraint.heightRange.upper == 71.046875
constraint.heightConstraintType has only one value
constraint.heightConstraintType.name has only one value
constraint.heightConstraintType.name.toString == "RectangleConstraintType.RANGE"
return has only one value
return.width == 194.0
return.height == 37.9375
size(container.blocks[]) == 3
===========================================================================
org.jfree.chart.block.FlowArrangement.arrangeNN(org.jfree.chart.block.BlockContainer, java.awt.Graphics2D):::ENTER
this has only one value
container has only one value
container.blocks has only one value
container.blocks[] contains no nulls and has only one value, of length 3
container.blocks[].getClass().getName() == [org.jfree.chart.block.BlockContainer, org.jfree.chart.block.BlockContainer, org.jfree.chart.block.BlockContainer]
container.blocks[].getClass().getName() elements == org.jfree.chart.block.BlockContainer.class
container.blocks.getClass().getName() == java.util.ArrayList.class
container.arrangement has only one value
container.arrangement.getClass().getName() == org.jfree.chart.block.FlowArrangement.class
container.id == null
container.margin has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS has only one value
container.margin.unitType has only one value
container.margin.top == 0.0
container.margin.left == 0.0
container.margin.bottom == 0.0
container.margin.right == 0.0
container.frame has only one value
container.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class
container.padding has only one value
container.padding.unitType has only one value
container.padding.top == 0.0
container.padding.left == 0.0
container.padding.bottom == 0.0
container.padding.right == 0.0
container.width == 0.0
container.height == 0.0
container.bounds has only one value
container.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
g2 has only one value
g2.getClass().getName() == sun.java2d.SunGraphics2D.class
size(container.blocks[]) == 3
===========================================================================
org.jfree.chart.block.FlowArrangement.arrangeNN(org.jfree.chart.block.BlockContainer, java.awt.Graphics2D):::EXIT
this.horizontalAlignment == orig(this.horizontalAlignment)
org.jfree.chart.util.HorizontalAlignment.LEFT == orig(org.jfree.chart.util.HorizontalAlignment.LEFT)
org.jfree.chart.util.HorizontalAlignment.RIGHT == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT)
org.jfree.chart.util.HorizontalAlignment.CENTER == orig(org.jfree.chart.util.HorizontalAlignment.CENTER)
org.jfree.chart.util.HorizontalAlignment.LEFT.name == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name)
org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString)
org.jfree.chart.util.HorizontalAlignment.CENTER.name == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name)
org.jfree.chart.util.HorizontalAlignment.CENTER.name == orig(this.horizontalAlignment.name)
org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString)
this.horizontalAlignment.name.toString == orig(this.horizontalAlignment.name.toString)
this.verticalAlignment == orig(this.verticalAlignment)
org.jfree.chart.util.VerticalAlignment.TOP == orig(org.jfree.chart.util.VerticalAlignment.TOP)
org.jfree.chart.util.VerticalAlignment.BOTTOM == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM)
org.jfree.chart.util.VerticalAlignment.CENTER == orig(org.jfree.chart.util.VerticalAlignment.CENTER)
org.jfree.chart.util.VerticalAlignment.TOP.name == orig(org.jfree.chart.util.VerticalAlignment.TOP.name)
org.jfree.chart.util.VerticalAlignment.TOP.name.toString == orig(org.jfree.chart.util.VerticalAlignment.TOP.name.toString)
org.jfree.chart.util.VerticalAlignment.BOTTOM.name == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM.name)
org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString)
org.jfree.chart.util.VerticalAlignment.CENTER.name == orig(org.jfree.chart.util.VerticalAlignment.CENTER.name)
org.jfree.chart.util.VerticalAlignment.CENTER.name == orig(this.verticalAlignment.name)
org.jfree.chart.util.VerticalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.VerticalAlignment.CENTER.name.toString)
this.verticalAlignment.name.toString == orig(this.verticalAlignment.name.toString)
this.horizontalGap == orig(this.horizontalGap)
this.verticalGap == orig(this.verticalGap)
container.blocks == orig(container.blocks)
container.blocks[] == orig(container.blocks[])
container.blocks.getClass().getName() == orig(container.blocks.getClass().getName())
container.arrangement == orig(container.arrangement)
container.arrangement.getClass().getName() == orig(container.arrangement.getClass().getName())
container.id == orig(container.id)
container.margin == orig(container.margin)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
container.margin.unitType == orig(container.margin.unitType)
container.margin.top == orig(container.margin.top)
container.margin.left == orig(container.margin.left)
container.margin.bottom == orig(container.margin.bottom)
container.margin.right == orig(container.margin.right)
container.frame == orig(container.frame)
container.frame.getClass().getName() == orig(container.frame.getClass().getName())
container.padding == orig(container.padding)
container.padding.unitType == orig(container.padding.unitType)
container.padding.top == orig(container.padding.top)
container.padding.left == orig(container.padding.left)
container.padding.bottom == orig(container.padding.bottom)
container.padding.right == orig(container.padding.right)
container.width == orig(container.width)
container.height == orig(container.height)
container.bounds == orig(container.bounds)
container.bounds.getClass().getName() == orig(container.bounds.getClass().getName())
container.blocks has only one value
container.blocks[] contains no nulls and has only one value, of length 3
container.blocks[].getClass().getName() == [org.jfree.chart.block.BlockContainer, org.jfree.chart.block.BlockContainer, org.jfree.chart.block.BlockContainer]
container.blocks[].getClass().getName() elements == org.jfree.chart.block.BlockContainer.class
container.blocks.getClass().getName() == java.util.ArrayList.class
container.arrangement has only one value
container.arrangement.getClass().getName() == org.jfree.chart.block.FlowArrangement.class
container.id == null
container.margin has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS has only one value
container.margin.unitType has only one value
container.margin.top == 0.0
container.margin.left == 0.0
container.margin.bottom == 0.0
container.margin.right == 0.0
container.frame has only one value
container.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class
container.padding has only one value
container.padding.unitType has only one value
container.padding.top == 0.0
container.padding.left == 0.0
container.padding.bottom == 0.0
container.padding.right == 0.0
container.width == 0.0
container.height == 0.0
container.bounds has only one value
container.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
return has only one value
return.width == 229.0
return.height == 17.96875
size(container.blocks[]) == 3
===========================================================================
org.jfree.chart.block.FlowArrangement.arrangeRR(org.jfree.chart.block.BlockContainer, java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint):::ENTER
this has only one value
container has only one value
container.blocks has only one value
container.blocks[] contains no nulls and has only one value, of length 3
container.blocks[].getClass().getName() == [org.jfree.chart.block.BlockContainer, org.jfree.chart.block.BlockContainer, org.jfree.chart.block.BlockContainer]
container.blocks[].getClass().getName() elements == org.jfree.chart.block.BlockContainer.class
container.blocks.getClass().getName() == java.util.ArrayList.class
container.arrangement has only one value
container.arrangement.getClass().getName() == org.jfree.chart.block.FlowArrangement.class
container.id == null
container.margin has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS has only one value
container.margin.unitType has only one value
container.margin.top == 0.0
container.margin.left == 0.0
container.margin.bottom == 0.0
container.margin.right == 0.0
container.frame has only one value
container.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class
container.padding has only one value
container.padding.unitType has only one value
container.padding.top == 0.0
container.padding.left == 0.0
container.padding.bottom == 0.0
container.padding.right == 0.0
container.width == 0.0
container.height == 0.0
container.bounds has only one value
container.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
g2 has only one value
g2.getClass().getName() == sun.java2d.SunGraphics2D.class
constraint has only one value
org.jfree.chart.block.RectangleConstraint.NONE has only one value
org.jfree.chart.block.RectangleConstraint.NONE.width == 0.0
org.jfree.chart.block.RectangleConstraint.NONE.widthRange == null
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType has only one value
org.jfree.chart.block.RectangleConstraint.NONE.height == 0.0
org.jfree.chart.block.RectangleConstraint.NONE.heightRange == null
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType has only one value
constraint.width == 194.0
constraint.widthRange has only one value
constraint.widthRange.lower == 0.0
constraint.widthRange.upper == 194.0
constraint.widthConstraintType has only one value
org.jfree.chart.block.LengthConstraintType.NONE has only one value
org.jfree.chart.block.LengthConstraintType.RANGE has only one value
org.jfree.chart.block.LengthConstraintType.FIXED has only one value
constraint.widthConstraintType.name has only one value
constraint.widthConstraintType.name.toString == "RectangleConstraintType.RANGE"
constraint.height == 71.046875
constraint.heightRange has only one value
constraint.heightRange.lower == 0.0
constraint.heightRange.upper == 71.046875
constraint.heightConstraintType has only one value
constraint.heightConstraintType.name has only one value
constraint.heightConstraintType.name.toString == "RectangleConstraintType.RANGE"
size(container.blocks[]) == 3
===========================================================================
org.jfree.chart.block.FlowArrangement.arrangeRR(org.jfree.chart.block.BlockContainer, java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint):::EXIT292
===========================================================================
org.jfree.chart.block.FlowArrangement.arrangeRR(org.jfree.chart.block.BlockContainer, java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint):::EXIT
this.horizontalAlignment == orig(this.horizontalAlignment)
org.jfree.chart.util.HorizontalAlignment.LEFT == orig(org.jfree.chart.util.HorizontalAlignment.LEFT)
org.jfree.chart.util.HorizontalAlignment.RIGHT == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT)
org.jfree.chart.util.HorizontalAlignment.CENTER == orig(org.jfree.chart.util.HorizontalAlignment.CENTER)
org.jfree.chart.util.HorizontalAlignment.LEFT.name == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name)
org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString)
org.jfree.chart.util.HorizontalAlignment.CENTER.name == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name)
org.jfree.chart.util.HorizontalAlignment.CENTER.name == orig(this.horizontalAlignment.name)
org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString)
this.horizontalAlignment.name.toString == orig(this.horizontalAlignment.name.toString)
this.verticalAlignment == orig(this.verticalAlignment)
org.jfree.chart.util.VerticalAlignment.TOP == orig(org.jfree.chart.util.VerticalAlignment.TOP)
org.jfree.chart.util.VerticalAlignment.BOTTOM == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM)
org.jfree.chart.util.VerticalAlignment.CENTER == orig(org.jfree.chart.util.VerticalAlignment.CENTER)
org.jfree.chart.util.VerticalAlignment.TOP.name == orig(org.jfree.chart.util.VerticalAlignment.TOP.name)
org.jfree.chart.util.VerticalAlignment.TOP.name.toString == orig(org.jfree.chart.util.VerticalAlignment.TOP.name.toString)
org.jfree.chart.util.VerticalAlignment.BOTTOM.name == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM.name)
org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString)
org.jfree.chart.util.VerticalAlignment.CENTER.name == orig(org.jfree.chart.util.VerticalAlignment.CENTER.name)
org.jfree.chart.util.VerticalAlignment.CENTER.name == orig(this.verticalAlignment.name)
org.jfree.chart.util.VerticalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.VerticalAlignment.CENTER.name.toString)
this.verticalAlignment.name.toString == orig(this.verticalAlignment.name.toString)
this.horizontalGap == orig(this.horizontalGap)
this.verticalGap == orig(this.verticalGap)
container.blocks == orig(container.blocks)
container.blocks[] == orig(container.blocks[])
container.blocks.getClass().getName() == orig(container.blocks.getClass().getName())
container.arrangement == orig(container.arrangement)
container.arrangement.getClass().getName() == orig(container.arrangement.getClass().getName())
container.id == orig(container.id)
container.margin == orig(container.margin)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
container.margin.unitType == orig(container.margin.unitType)
container.margin.top == orig(container.margin.top)
container.margin.left == orig(container.margin.left)
container.margin.bottom == orig(container.margin.bottom)
container.margin.right == orig(container.margin.right)
container.frame == orig(container.frame)
container.frame.getClass().getName() == orig(container.frame.getClass().getName())
container.padding == orig(container.padding)
container.padding.unitType == orig(container.padding.unitType)
container.padding.top == orig(container.padding.top)
container.padding.left == orig(container.padding.left)
container.padding.bottom == orig(container.padding.bottom)
container.padding.right == orig(container.padding.right)
container.width == orig(container.width)
container.height == orig(container.height)
container.bounds == orig(container.bounds)
container.bounds.getClass().getName() == orig(container.bounds.getClass().getName())
org.jfree.chart.block.RectangleConstraint.NONE == orig(org.jfree.chart.block.RectangleConstraint.NONE)
org.jfree.chart.block.RectangleConstraint.NONE.width == orig(org.jfree.chart.block.RectangleConstraint.NONE.width)
org.jfree.chart.block.RectangleConstraint.NONE.widthRange == orig(org.jfree.chart.block.RectangleConstraint.NONE.widthRange)
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType == orig(org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType)
org.jfree.chart.block.RectangleConstraint.NONE.height == orig(org.jfree.chart.block.RectangleConstraint.NONE.height)
org.jfree.chart.block.RectangleConstraint.NONE.heightRange == orig(org.jfree.chart.block.RectangleConstraint.NONE.heightRange)
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType == orig(org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType)
constraint.width == orig(constraint.width)
constraint.widthRange == orig(constraint.widthRange)
constraint.widthRange.lower == orig(constraint.widthRange.lower)
constraint.widthRange.upper == orig(constraint.widthRange.upper)
constraint.widthConstraintType == orig(constraint.widthConstraintType)
org.jfree.chart.block.LengthConstraintType.NONE == orig(org.jfree.chart.block.LengthConstraintType.NONE)
org.jfree.chart.block.LengthConstraintType.RANGE == orig(org.jfree.chart.block.LengthConstraintType.RANGE)
org.jfree.chart.block.LengthConstraintType.FIXED == orig(org.jfree.chart.block.LengthConstraintType.FIXED)
constraint.widthConstraintType.name == orig(constraint.widthConstraintType.name)
constraint.widthConstraintType.name.toString == orig(constraint.widthConstraintType.name.toString)
constraint.height == orig(constraint.height)
constraint.heightRange == orig(constraint.heightRange)
constraint.heightRange.lower == orig(constraint.heightRange.lower)
constraint.heightRange.upper == orig(constraint.heightRange.upper)
constraint.heightConstraintType == orig(constraint.heightConstraintType)
constraint.heightConstraintType.name == orig(constraint.heightConstraintType.name)
constraint.heightConstraintType.name.toString == orig(constraint.heightConstraintType.name.toString)
container.blocks has only one value
container.blocks[] contains no nulls and has only one value, of length 3
container.blocks[].getClass().getName() == [org.jfree.chart.block.BlockContainer, org.jfree.chart.block.BlockContainer, org.jfree.chart.block.BlockContainer]
container.blocks[].getClass().getName() elements == org.jfree.chart.block.BlockContainer.class
container.blocks.getClass().getName() == java.util.ArrayList.class
container.arrangement has only one value
container.arrangement.getClass().getName() == org.jfree.chart.block.FlowArrangement.class
container.id == null
container.margin has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS has only one value
container.margin.unitType has only one value
container.margin.top == 0.0
container.margin.left == 0.0
container.margin.bottom == 0.0
container.margin.right == 0.0
container.frame has only one value
container.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class
container.padding has only one value
container.padding.unitType has only one value
container.padding.top == 0.0
container.padding.left == 0.0
container.padding.bottom == 0.0
container.padding.right == 0.0
container.width == 0.0
container.height == 0.0
container.bounds has only one value
container.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
org.jfree.chart.block.RectangleConstraint.NONE has only one value
org.jfree.chart.block.RectangleConstraint.NONE.width == 0.0
org.jfree.chart.block.RectangleConstraint.NONE.widthRange == null
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType has only one value
org.jfree.chart.block.RectangleConstraint.NONE.height == 0.0
org.jfree.chart.block.RectangleConstraint.NONE.heightRange == null
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType has only one value
constraint.width == 194.0
constraint.widthRange has only one value
constraint.widthRange.lower == 0.0
constraint.widthRange.upper == 194.0
constraint.widthConstraintType has only one value
org.jfree.chart.block.LengthConstraintType.NONE has only one value
org.jfree.chart.block.LengthConstraintType.RANGE has only one value
org.jfree.chart.block.LengthConstraintType.FIXED has only one value
constraint.widthConstraintType.name has only one value
constraint.widthConstraintType.name.toString == "RectangleConstraintType.RANGE"
constraint.height == 71.046875
constraint.heightRange has only one value
constraint.heightRange.lower == 0.0
constraint.heightRange.upper == 71.046875
constraint.heightConstraintType has only one value
constraint.heightConstraintType.name has only one value
constraint.heightConstraintType.name.toString == "RectangleConstraintType.RANGE"
return has only one value
return.width == 194.0
return.height == 37.9375
size(container.blocks[]) == 3
===========================================================================
org.jfree.chart.block.FlowArrangement.clear():::ENTER
===========================================================================
org.jfree.chart.block.FlowArrangement.clear():::EXIT
this.horizontalAlignment == orig(this.horizontalAlignment)
org.jfree.chart.util.HorizontalAlignment.LEFT == orig(org.jfree.chart.util.HorizontalAlignment.LEFT)
org.jfree.chart.util.HorizontalAlignment.RIGHT == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT)
org.jfree.chart.util.HorizontalAlignment.CENTER == orig(org.jfree.chart.util.HorizontalAlignment.CENTER)
org.jfree.chart.util.HorizontalAlignment.LEFT.name == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name)
org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString)
org.jfree.chart.util.HorizontalAlignment.CENTER.name == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name)
org.jfree.chart.util.HorizontalAlignment.CENTER.name == orig(this.horizontalAlignment.name)
org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString)
this.horizontalAlignment.name.toString == orig(this.horizontalAlignment.name.toString)
this.verticalAlignment == orig(this.verticalAlignment)
org.jfree.chart.util.VerticalAlignment.TOP == orig(org.jfree.chart.util.VerticalAlignment.TOP)
org.jfree.chart.util.VerticalAlignment.BOTTOM == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM)
org.jfree.chart.util.VerticalAlignment.CENTER == orig(org.jfree.chart.util.VerticalAlignment.CENTER)
org.jfree.chart.util.VerticalAlignment.TOP.name == orig(org.jfree.chart.util.VerticalAlignment.TOP.name)
org.jfree.chart.util.VerticalAlignment.TOP.name.toString == orig(org.jfree.chart.util.VerticalAlignment.TOP.name.toString)
org.jfree.chart.util.VerticalAlignment.BOTTOM.name == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM.name)
org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString)
org.jfree.chart.util.VerticalAlignment.CENTER.name == orig(org.jfree.chart.util.VerticalAlignment.CENTER.name)
org.jfree.chart.util.VerticalAlignment.CENTER.name == orig(this.verticalAlignment.name)
org.jfree.chart.util.VerticalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.VerticalAlignment.CENTER.name.toString)
this.verticalAlignment.name.toString == orig(this.verticalAlignment.name.toString)
this.horizontalGap == orig(this.horizontalGap)
this.verticalGap == orig(this.verticalGap)
===========================================================================
org.jfree.chart.block.LabelBlock:::CLASS
org.jfree.chart.block.LabelBlock.DEFAULT_PAINT has only one value
org.jfree.chart.block.LabelBlock.DEFAULT_PAINT != null
org.jfree.chart.block.LabelBlock.DEFAULT_PAINT.getClass().getName() == java.awt.Color.class
===========================================================================
org.jfree.chart.block.LabelBlock:::OBJECT
org.jfree.chart.block.LabelBlock.DEFAULT_PAINT.getClass().getName() == this.paint.getClass().getName()
this.text != null
this.text.toString one of { "Section 1", "Section 2", "Section 3" }
this.label != null
this.label.lines != null
this.label.lines[] elements != null
this.label.lines[].getClass().getName() == [org.jfree.chart.text.TextLine]
this.label.lines[].getClass().getName() elements == org.jfree.chart.text.TextLine.class
this.label.lines.getClass().getName() == java.util.ArrayList.class
this.label.lineAlignment has only one value
this.label.lineAlignment != null
org.jfree.chart.util.HorizontalAlignment.LEFT has only one value
org.jfree.chart.util.HorizontalAlignment.LEFT != null
org.jfree.chart.util.HorizontalAlignment.RIGHT has only one value
org.jfree.chart.util.HorizontalAlignment.RIGHT != null
org.jfree.chart.util.HorizontalAlignment.CENTER has only one value
org.jfree.chart.util.HorizontalAlignment.CENTER != null
this.label.lineAlignment.name has only one value
this.label.lineAlignment.name != null
this.label.lineAlignment.name.toString == "HorizontalAlignment.CENTER"
this.font has only one value
this.font != null
this.toolTipText == null
this.urlText == null
this.paint has only one value
this.paint != null
this.id == null
this.margin has only one value
this.margin != null
org.jfree.chart.util.RectangleInsets.ZERO_INSETS has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS != null
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType != null
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == 0.0
this.margin.unitType has only one value
this.margin.unitType != null
org.jfree.chart.util.UnitType.ABSOLUTE has only one value
org.jfree.chart.util.UnitType.ABSOLUTE != null
org.jfree.chart.util.UnitType.RELATIVE has only one value
org.jfree.chart.util.UnitType.RELATIVE != null
this.margin.unitType.name has only one value
this.margin.unitType.name != null
this.margin.unitType.name.toString == "UnitType.ABSOLUTE"
this.margin.top == 0.0
this.margin.left == 0.0
this.margin.bottom == 0.0
this.margin.right == 0.0
this.frame has only one value
this.frame != null
this.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class
this.padding != null
this.padding.unitType has only one value
this.padding.unitType != null
this.padding.unitType.name has only one value
this.padding.unitType.name != null
this.padding.unitType.name.toString == "UnitType.ABSOLUTE"
this.padding.top one of { 0.0, 2.0 }
this.padding.left one of { 0.0, 2.0 }
this.padding.bottom one of { 0.0, 2.0 }
this.padding.right one of { 0.0, 2.0 }
this.width == 0.0
this.height == 0.0
this.bounds != null
size(this.label.lines[]) == 1
this.label.lines.getClass().getName() != org.jfree.chart.block.LabelBlock.DEFAULT_PAINT.getClass().getName()
this.label.lines.getClass().getName() != this.frame.getClass().getName()
this.label.lines.getClass().getName() != this.bounds.getClass().getName()
org.jfree.chart.block.LabelBlock.DEFAULT_PAINT.getClass().getName() != this.frame.getClass().getName()
org.jfree.chart.block.LabelBlock.DEFAULT_PAINT.getClass().getName() != this.bounds.getClass().getName()
this.frame.getClass().getName() != this.bounds.getClass().getName()
===========================================================================
org.jfree.chart.block.LabelBlock.LabelBlock(java.lang.String, java.awt.Font, java.awt.Paint):::ENTER
text.toString one of { "Section 1", "Section 2", "Section 3" }
font has only one value
paint has only one value
paint.getClass().getName() == java.awt.Color.class
===========================================================================
org.jfree.chart.block.LabelBlock.LabelBlock(java.lang.String, java.awt.Font, java.awt.Paint):::EXIT
org.jfree.chart.block.LabelBlock.DEFAULT_PAINT.getClass().getName() == orig(paint.getClass().getName())
text.toString == orig(text.toString)
this.padding has only one value
this.padding.top == 0.0
this.padding.left == 0.0
this.padding.bottom == 0.0
this.padding.right == 0.0
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
text.toString one of { "Section 1", "Section 2", "Section 3" }
===========================================================================
org.jfree.chart.block.LabelBlock.arrange(java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint):::ENTER
this.padding has only one value
this.padding.top == 2.0
this.padding.left == 2.0
this.padding.bottom == 2.0
this.padding.right == 2.0
g2 has only one value
g2.getClass().getName() == sun.java2d.SunGraphics2D.class
constraint has only one value
org.jfree.chart.block.RectangleConstraint.NONE has only one value
org.jfree.chart.block.RectangleConstraint.NONE.width == 0.0
org.jfree.chart.block.RectangleConstraint.NONE.widthRange == null
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType has only one value
org.jfree.chart.block.RectangleConstraint.NONE.height == 0.0
org.jfree.chart.block.RectangleConstraint.NONE.heightRange == null
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType has only one value
constraint.width == 0.0
constraint.widthRange == null
constraint.widthConstraintType has only one value
org.jfree.chart.block.LengthConstraintType.NONE has only one value
org.jfree.chart.block.LengthConstraintType.RANGE has only one value
org.jfree.chart.block.LengthConstraintType.FIXED has only one value
constraint.widthConstraintType.name has only one value
constraint.widthConstraintType.name.toString == "LengthConstraintType.NONE"
constraint.height == 0.0
constraint.heightRange == null
constraint.heightConstraintType has only one value
constraint.heightConstraintType.name has only one value
constraint.heightConstraintType.name.toString == "LengthConstraintType.NONE"
===========================================================================
org.jfree.chart.block.LabelBlock.arrange(java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint):::EXIT
this.text == orig(this.text)
this.text.toString == orig(this.text.toString)
this.label == orig(this.label)
this.label.lines == orig(this.label.lines)
this.label.lines[] == orig(this.label.lines[])
this.label.lines.getClass().getName() == orig(this.label.lines.getClass().getName())
this.label.lineAlignment == orig(this.label.lineAlignment)
org.jfree.chart.util.HorizontalAlignment.LEFT == orig(org.jfree.chart.util.HorizontalAlignment.LEFT)
org.jfree.chart.util.HorizontalAlignment.RIGHT == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT)
org.jfree.chart.util.HorizontalAlignment.CENTER == orig(org.jfree.chart.util.HorizontalAlignment.CENTER)
this.label.lineAlignment.name == orig(this.label.lineAlignment.name)
this.label.lineAlignment.name.toString == orig(this.label.lineAlignment.name.toString)
this.font == orig(this.font)
this.toolTipText == orig(this.toolTipText)
this.urlText == orig(this.urlText)
org.jfree.chart.block.LabelBlock.DEFAULT_PAINT == orig(org.jfree.chart.block.LabelBlock.DEFAULT_PAINT)
org.jfree.chart.block.LabelBlock.DEFAULT_PAINT.getClass().getName() == orig(org.jfree.chart.block.LabelBlock.DEFAULT_PAINT.getClass().getName())
org.jfree.chart.block.LabelBlock.DEFAULT_PAINT.getClass().getName() == orig(this.paint.getClass().getName())
this.paint == orig(this.paint)
this.id == orig(this.id)
this.margin == orig(this.margin)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.margin.unitType == orig(this.margin.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
org.jfree.chart.block.RectangleConstraint.NONE == orig(org.jfree.chart.block.RectangleConstraint.NONE)
org.jfree.chart.block.RectangleConstraint.NONE.width == orig(org.jfree.chart.block.RectangleConstraint.NONE.width)
org.jfree.chart.block.RectangleConstraint.NONE.widthRange == orig(org.jfree.chart.block.RectangleConstraint.NONE.widthRange)
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType == orig(org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType)
org.jfree.chart.block.RectangleConstraint.NONE.height == orig(org.jfree.chart.block.RectangleConstraint.NONE.height)
org.jfree.chart.block.RectangleConstraint.NONE.heightRange == orig(org.jfree.chart.block.RectangleConstraint.NONE.heightRange)
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType == orig(org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType)
constraint.width == orig(constraint.width)
constraint.widthRange == orig(constraint.widthRange)
constraint.widthConstraintType == orig(constraint.widthConstraintType)
org.jfree.chart.block.LengthConstraintType.NONE == orig(org.jfree.chart.block.LengthConstraintType.NONE)
org.jfree.chart.block.LengthConstraintType.RANGE == orig(org.jfree.chart.block.LengthConstraintType.RANGE)
org.jfree.chart.block.LengthConstraintType.FIXED == orig(org.jfree.chart.block.LengthConstraintType.FIXED)
constraint.widthConstraintType.name == orig(constraint.widthConstraintType.name)
constraint.widthConstraintType.name.toString == orig(constraint.widthConstraintType.name.toString)
constraint.height == orig(constraint.height)
constraint.heightRange == orig(constraint.heightRange)
constraint.heightConstraintType == orig(constraint.heightConstraintType)
constraint.heightConstraintType.name == orig(constraint.heightConstraintType.name)
constraint.heightConstraintType.name.toString == orig(constraint.heightConstraintType.name.toString)
this.padding has only one value
this.padding.top == 2.0
this.padding.left == 2.0
this.padding.bottom == 2.0
this.padding.right == 2.0
org.jfree.chart.block.RectangleConstraint.NONE has only one value
org.jfree.chart.block.RectangleConstraint.NONE.width == 0.0
org.jfree.chart.block.RectangleConstraint.NONE.widthRange == null
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType has only one value
org.jfree.chart.block.RectangleConstraint.NONE.height == 0.0
org.jfree.chart.block.RectangleConstraint.NONE.heightRange == null
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType has only one value
constraint.width == 0.0
constraint.widthRange == null
constraint.widthConstraintType has only one value
org.jfree.chart.block.LengthConstraintType.NONE has only one value
org.jfree.chart.block.LengthConstraintType.RANGE has only one value
org.jfree.chart.block.LengthConstraintType.FIXED has only one value
constraint.widthConstraintType.name has only one value
constraint.widthConstraintType.name.toString == "LengthConstraintType.NONE"
constraint.height == 0.0
constraint.heightRange == null
constraint.heightConstraintType has only one value
constraint.heightConstraintType.name has only one value
constraint.heightConstraintType.name.toString == "LengthConstraintType.NONE"
return.width == 63.0
return.height == 17.96875
===========================================================================
org.jfree.chart.block.LabelBlock.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.lang.Object):::ENTER
this.bounds.getClass().getName() == area.getClass().getName()
this.padding has only one value
this.padding.top == 2.0
this.padding.left == 2.0
this.padding.bottom == 2.0
this.padding.right == 2.0
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Double.class
g2 has only one value
g2.getClass().getName() == sun.java2d.SunGraphics2D.class
params == null
===========================================================================
org.jfree.chart.block.LabelBlock.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.lang.Object):::EXIT
this.text == orig(this.text)
this.text.toString == orig(this.text.toString)
this.label == orig(this.label)
this.label.lines == orig(this.label.lines)
this.label.lines[] == orig(this.label.lines[])
this.label.lines.getClass().getName() == orig(this.label.lines.getClass().getName())
this.label.lineAlignment == orig(this.label.lineAlignment)
org.jfree.chart.util.HorizontalAlignment.LEFT == orig(org.jfree.chart.util.HorizontalAlignment.LEFT)
org.jfree.chart.util.HorizontalAlignment.RIGHT == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT)
org.jfree.chart.util.HorizontalAlignment.CENTER == orig(org.jfree.chart.util.HorizontalAlignment.CENTER)
this.label.lineAlignment.name == orig(this.label.lineAlignment.name)
this.label.lineAlignment.name.toString == orig(this.label.lineAlignment.name.toString)
this.font == orig(this.font)
this.toolTipText == orig(this.toolTipText)
this.urlText == orig(this.urlText)
org.jfree.chart.block.LabelBlock.DEFAULT_PAINT == orig(org.jfree.chart.block.LabelBlock.DEFAULT_PAINT)
org.jfree.chart.block.LabelBlock.DEFAULT_PAINT.getClass().getName() == orig(org.jfree.chart.block.LabelBlock.DEFAULT_PAINT.getClass().getName())
org.jfree.chart.block.LabelBlock.DEFAULT_PAINT.getClass().getName() == orig(this.paint.getClass().getName())
this.paint == orig(this.paint)
this.id == orig(this.id)
this.margin == orig(this.margin)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.margin.unitType == orig(this.margin.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
this.bounds.getClass().getName() == orig(area.getClass().getName())
this.padding has only one value
this.padding.top == 2.0
this.padding.left == 2.0
this.padding.bottom == 2.0
this.padding.right == 2.0
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Double.class
return == null
===========================================================================
org.jfree.chart.block.LengthConstraintType:::CLASS
===========================================================================
org.jfree.chart.block.LengthConstraintType:::OBJECT
this.name.toString one of { "LengthConstraintType.FIXED", "LengthConstraintType.NONE", "RectangleConstraintType.RANGE" }
===========================================================================
org.jfree.chart.block.LengthConstraintType.LengthConstraintType(java.lang.String):::ENTER
name.toString one of { "LengthConstraintType.FIXED", "LengthConstraintType.NONE", "RectangleConstraintType.RANGE" }
===========================================================================
org.jfree.chart.block.LengthConstraintType.LengthConstraintType(java.lang.String):::EXIT
name.toString == orig(name.toString)
name.toString one of { "LengthConstraintType.FIXED", "LengthConstraintType.NONE", "RectangleConstraintType.RANGE" }
===========================================================================
org.jfree.chart.block.LineBorder:::OBJECT
this.insets.unitType == org.jfree.chart.util.UnitType.ABSOLUTE
this.paint has only one value
this.paint != null
this.paint.getClass().getName() == java.awt.Color.class
this.stroke != null
this.stroke.getClass().getName() == java.awt.BasicStroke.class
this.insets != null
org.jfree.chart.util.RectangleInsets.ZERO_INSETS has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS != null
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType != null
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == 0.0
org.jfree.chart.util.UnitType.ABSOLUTE has only one value
org.jfree.chart.util.UnitType.ABSOLUTE != null
org.jfree.chart.util.UnitType.RELATIVE has only one value
org.jfree.chart.util.UnitType.RELATIVE != null
this.insets.unitType.name has only one value
this.insets.unitType.name != null
this.insets.unitType.name.toString == "UnitType.ABSOLUTE"
this.insets.top == 1.0
this.insets.left == 1.0
this.insets.bottom == 1.0
this.insets.right == 1.0
this.paint.getClass().getName() != this.stroke.getClass().getName()
===========================================================================
org.jfree.chart.block.LineBorder.LineBorder():::EXIT
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == org.jfree.chart.util.UnitType.ABSOLUTE
===========================================================================
org.jfree.chart.block.LineBorder.LineBorder(java.awt.Paint, java.awt.Stroke, org.jfree.chart.util.RectangleInsets):::ENTER
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == org.jfree.chart.util.UnitType.ABSOLUTE
insets.unitType == org.jfree.chart.util.UnitType.ABSOLUTE
paint has only one value
paint.getClass().getName() == java.awt.Color.class
stroke.getClass().getName() == java.awt.BasicStroke.class
org.jfree.chart.util.RectangleInsets.ZERO_INSETS has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == 0.0
org.jfree.chart.util.UnitType.ABSOLUTE has only one value
org.jfree.chart.util.UnitType.RELATIVE has only one value
insets.unitType.name has only one value
insets.unitType.name.toString == "UnitType.ABSOLUTE"
insets.top == 1.0
insets.left == 1.0
insets.bottom == 1.0
insets.right == 1.0
===========================================================================
org.jfree.chart.block.LineBorder.LineBorder(java.awt.Paint, java.awt.Stroke, org.jfree.chart.util.RectangleInsets):::EXIT
this.paint == orig(paint)
this.paint.getClass().getName() == orig(paint.getClass().getName())
this.stroke == orig(stroke)
this.stroke.getClass().getName() == orig(stroke.getClass().getName())
this.insets == orig(insets)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == org.jfree.chart.util.UnitType.ABSOLUTE
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
org.jfree.chart.util.UnitType.ABSOLUTE == insets.unitType
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(insets.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.insets.unitType.name == insets.unitType.name
this.insets.top == insets.top
this.insets.left == insets.left
this.insets.bottom == insets.bottom
this.insets.right == insets.right
insets.unitType.name == orig(insets.unitType.name)
insets.unitType.name.toString == orig(insets.unitType.name.toString)
insets.top == orig(insets.top)
insets.left == orig(insets.left)
insets.bottom == orig(insets.bottom)
insets.right == orig(insets.right)
insets.unitType.name has only one value
insets.unitType.name.toString == "UnitType.ABSOLUTE"
insets.top == 1.0
insets.left == 1.0
insets.bottom == 1.0
insets.right == 1.0
===========================================================================
org.jfree.chart.block.LineBorder.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D):::ENTER
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == org.jfree.chart.util.UnitType.ABSOLUTE
g2.getClass().getName() == sun.java2d.SunGraphics2D.class
area.getClass().getName() == java.awt.geom.Rectangle2D$Double.class
===========================================================================
org.jfree.chart.block.LineBorder.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D):::EXIT146
this.stroke has only one value
this.insets has only one value
orig(this) has only one value
orig(g2) has only one value
orig(area) has only one value
===========================================================================
org.jfree.chart.block.LineBorder.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D):::EXIT177
this.stroke has only one value
this.insets has only one value
orig(this) has only one value
orig(g2) has only one value
orig(area) has only one value
===========================================================================
org.jfree.chart.block.LineBorder.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D):::EXIT
this.paint == orig(this.paint)
this.paint.getClass().getName() == orig(this.paint.getClass().getName())
this.stroke == orig(this.stroke)
this.stroke.getClass().getName() == orig(this.stroke.getClass().getName())
this.insets == orig(this.insets)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == org.jfree.chart.util.UnitType.ABSOLUTE
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(this.insets.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.insets.unitType.name == orig(this.insets.unitType.name)
this.insets.unitType.name.toString == orig(this.insets.unitType.name.toString)
this.insets.top == orig(this.insets.top)
this.insets.left == orig(this.insets.left)
this.insets.bottom == orig(this.insets.bottom)
this.insets.right == orig(this.insets.right)
===========================================================================
org.jfree.chart.block.LineBorder.getInsets():::ENTER
===========================================================================
org.jfree.chart.block.LineBorder.getInsets():::EXIT
this.paint == orig(this.paint)
this.paint.getClass().getName() == orig(this.paint.getClass().getName())
this.stroke == orig(this.stroke)
this.stroke.getClass().getName() == orig(this.stroke.getClass().getName())
this.insets == orig(this.insets)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(this.insets.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.insets.unitType.name == orig(this.insets.unitType.name)
this.insets.unitType.name.toString == orig(this.insets.unitType.name.toString)
this.insets.top == orig(this.insets.top)
this.insets.left == orig(this.insets.left)
this.insets.bottom == orig(this.insets.bottom)
this.insets.right == orig(this.insets.right)
return.unitType has only one value
return.unitType.name has only one value
return.unitType.name.toString == "UnitType.ABSOLUTE"
return.top == 1.0
return.left == 1.0
return.bottom == 1.0
return.right == 1.0
===========================================================================
org.jfree.chart.block.LineBorder.getPaint():::ENTER
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == org.jfree.chart.util.UnitType.ABSOLUTE
this has only one value
this.stroke has only one value
this.insets has only one value
===========================================================================
org.jfree.chart.block.LineBorder.getPaint():::EXIT
this.paint == orig(this.paint)
this.paint.getClass().getName() == return.getClass().getName()
this.stroke == orig(this.stroke)
this.stroke.getClass().getName() == orig(this.stroke.getClass().getName())
this.insets == orig(this.insets)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == org.jfree.chart.util.UnitType.ABSOLUTE
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(this.insets.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.insets.unitType.name == orig(this.insets.unitType.name)
this.insets.unitType.name.toString == orig(this.insets.unitType.name.toString)
this.insets.top == orig(this.insets.top)
this.insets.left == orig(this.insets.left)
this.insets.bottom == orig(this.insets.bottom)
this.insets.right == orig(this.insets.right)
return.getClass().getName() == orig(this.paint.getClass().getName())
this.stroke has only one value
this.insets has only one value
return has only one value
return.getClass().getName() == java.awt.Color.class
===========================================================================
org.jfree.chart.block.LineBorder.getStroke():::ENTER
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == org.jfree.chart.util.UnitType.ABSOLUTE
this has only one value
this.stroke has only one value
this.insets has only one value
===========================================================================
org.jfree.chart.block.LineBorder.getStroke():::EXIT
this.paint == orig(this.paint)
this.paint.getClass().getName() == orig(this.paint.getClass().getName())
this.stroke == orig(this.stroke)
this.stroke.getClass().getName() == return.getClass().getName()
this.insets == orig(this.insets)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == org.jfree.chart.util.UnitType.ABSOLUTE
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(this.insets.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.insets.unitType.name == orig(this.insets.unitType.name)
this.insets.unitType.name.toString == orig(this.insets.unitType.name.toString)
this.insets.top == orig(this.insets.top)
this.insets.left == orig(this.insets.left)
this.insets.bottom == orig(this.insets.bottom)
this.insets.right == orig(this.insets.right)
return.getClass().getName() == orig(this.stroke.getClass().getName())
this.stroke has only one value
this.insets has only one value
return has only one value
return.getClass().getName() == java.awt.BasicStroke.class
===========================================================================
org.jfree.chart.block.RectangleConstraint:::CLASS
org.jfree.chart.block.RectangleConstraint.NONE has only one value
org.jfree.chart.block.RectangleConstraint.NONE != null
org.jfree.chart.block.RectangleConstraint.NONE.width == 0.0
org.jfree.chart.block.RectangleConstraint.NONE.widthRange == null
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType has only one value
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType != null
org.jfree.chart.block.RectangleConstraint.NONE.height == 0.0
org.jfree.chart.block.RectangleConstraint.NONE.heightRange == null
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType has only one value
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType != null
org.jfree.chart.block.LengthConstraintType.NONE has only one value
org.jfree.chart.block.LengthConstraintType.NONE != null
org.jfree.chart.block.LengthConstraintType.RANGE has only one value
org.jfree.chart.block.LengthConstraintType.RANGE != null
org.jfree.chart.block.LengthConstraintType.FIXED has only one value
org.jfree.chart.block.LengthConstraintType.FIXED != null
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType.name has only one value
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType.name != null
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType.name.toString == "LengthConstraintType.NONE"
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType.name has only one value
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType.name != null
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType.name.toString == "LengthConstraintType.NONE"
===========================================================================
org.jfree.chart.block.RectangleConstraint:::OBJECT
this.width >= 0.0
this.widthRange.lower == 0.0
this.widthRange.upper one of { 194.0, 198.0, 200.0 }
this.widthConstraintType != null
org.jfree.chart.block.LengthConstraintType.NONE.name has only one value
org.jfree.chart.block.LengthConstraintType.NONE.name != null
org.jfree.chart.block.LengthConstraintType.NONE.name.toString == "LengthConstraintType.NONE"
org.jfree.chart.block.LengthConstraintType.RANGE.name has only one value
org.jfree.chart.block.LengthConstraintType.RANGE.name != null
org.jfree.chart.block.LengthConstraintType.RANGE.name.toString == "RectangleConstraintType.RANGE"
org.jfree.chart.block.LengthConstraintType.FIXED.name has only one value
org.jfree.chart.block.LengthConstraintType.FIXED.name != null
org.jfree.chart.block.LengthConstraintType.FIXED.name.toString == "LengthConstraintType.FIXED"
this.widthConstraintType.name != null
this.widthConstraintType.name.toString one of { "LengthConstraintType.FIXED", "LengthConstraintType.NONE", "RectangleConstraintType.RANGE" }
this.height >= 0.0
this.heightRange.lower == 0.0
this.heightConstraintType != null
this.heightConstraintType.name != null
this.heightConstraintType.name.toString one of { "LengthConstraintType.NONE", "RectangleConstraintType.RANGE" }
===========================================================================
org.jfree.chart.block.RectangleConstraint.RectangleConstraint(double, org.jfree.data.Range, org.jfree.chart.block.LengthConstraintType, double, org.jfree.data.Range, org.jfree.chart.block.LengthConstraintType):::ENTER
widthRange.lower == 0.0
widthRange.upper one of { 194.0, 198.0, 200.0 }
org.jfree.chart.block.LengthConstraintType.NONE has only one value
org.jfree.chart.block.LengthConstraintType.RANGE has only one value
org.jfree.chart.block.LengthConstraintType.FIXED has only one value
org.jfree.chart.block.LengthConstraintType.NONE.name has only one value
org.jfree.chart.block.LengthConstraintType.NONE.name.toString == "LengthConstraintType.NONE"
org.jfree.chart.block.LengthConstraintType.RANGE.name has only one value
org.jfree.chart.block.LengthConstraintType.RANGE.name.toString == "RectangleConstraintType.RANGE"
org.jfree.chart.block.LengthConstraintType.FIXED.name has only one value
org.jfree.chart.block.LengthConstraintType.FIXED.name.toString == "LengthConstraintType.FIXED"
widthConstraintType.name.toString one of { "LengthConstraintType.FIXED", "LengthConstraintType.NONE", "RectangleConstraintType.RANGE" }
heightRange.lower == 0.0
heightConstraintType.name.toString one of { "LengthConstraintType.NONE", "RectangleConstraintType.RANGE" }
===========================================================================
org.jfree.chart.block.RectangleConstraint.RectangleConstraint(double, org.jfree.data.Range, org.jfree.chart.block.LengthConstraintType, double, org.jfree.data.Range, org.jfree.chart.block.LengthConstraintType):::EXIT
org.jfree.chart.block.LengthConstraintType.NONE == orig(org.jfree.chart.block.LengthConstraintType.NONE)
org.jfree.chart.block.LengthConstraintType.RANGE == orig(org.jfree.chart.block.LengthConstraintType.RANGE)
org.jfree.chart.block.LengthConstraintType.FIXED == orig(org.jfree.chart.block.LengthConstraintType.FIXED)
org.jfree.chart.block.LengthConstraintType.NONE.name == orig(org.jfree.chart.block.LengthConstraintType.NONE.name)
org.jfree.chart.block.LengthConstraintType.NONE.name.toString == orig(org.jfree.chart.block.LengthConstraintType.NONE.name.toString)
org.jfree.chart.block.LengthConstraintType.RANGE.name == orig(org.jfree.chart.block.LengthConstraintType.RANGE.name)
org.jfree.chart.block.LengthConstraintType.RANGE.name.toString == orig(org.jfree.chart.block.LengthConstraintType.RANGE.name.toString)
org.jfree.chart.block.LengthConstraintType.FIXED.name == orig(org.jfree.chart.block.LengthConstraintType.FIXED.name)
org.jfree.chart.block.LengthConstraintType.FIXED.name.toString == orig(org.jfree.chart.block.LengthConstraintType.FIXED.name.toString)
widthRange.lower == orig(widthRange.lower)
widthRange.upper == orig(widthRange.upper)
widthConstraintType.name == orig(widthConstraintType.name)
widthConstraintType.name.toString == orig(widthConstraintType.name.toString)
heightRange.lower == orig(heightRange.lower)
heightRange.upper == orig(heightRange.upper)
heightConstraintType.name == orig(heightConstraintType.name)
heightConstraintType.name.toString == orig(heightConstraintType.name.toString)
widthRange.lower == 0.0
widthRange.upper one of { 194.0, 198.0, 200.0 }
widthConstraintType.name.toString one of { "LengthConstraintType.FIXED", "LengthConstraintType.NONE", "RectangleConstraintType.RANGE" }
heightRange.lower == 0.0
heightConstraintType.name.toString one of { "LengthConstraintType.NONE", "RectangleConstraintType.RANGE" }
===========================================================================
org.jfree.chart.block.RectangleConstraint.getHeight():::ENTER
this.width == 200.0
this.widthRange.upper == 200.0
this.widthConstraintType has only one value
this.widthConstraintType.name has only one value
this.widthConstraintType.name.toString == "RectangleConstraintType.RANGE"
this.height one of { 77.046875, 100.0 }
this.heightRange.upper one of { 77.046875, 100.0 }
this.heightConstraintType has only one value
this.heightConstraintType.name has only one value
this.heightConstraintType.name.toString == "RectangleConstraintType.RANGE"
===========================================================================
org.jfree.chart.block.RectangleConstraint.getHeight():::EXIT
org.jfree.chart.block.RectangleConstraint.NONE == orig(org.jfree.chart.block.RectangleConstraint.NONE)
org.jfree.chart.block.RectangleConstraint.NONE.width == orig(org.jfree.chart.block.RectangleConstraint.NONE.width)
org.jfree.chart.block.RectangleConstraint.NONE.widthRange == orig(org.jfree.chart.block.RectangleConstraint.NONE.widthRange)
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType == orig(org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType)
org.jfree.chart.block.RectangleConstraint.NONE.height == orig(org.jfree.chart.block.RectangleConstraint.NONE.height)
org.jfree.chart.block.RectangleConstraint.NONE.heightRange == orig(org.jfree.chart.block.RectangleConstraint.NONE.heightRange)
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType == orig(org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType)
org.jfree.chart.block.LengthConstraintType.NONE == orig(org.jfree.chart.block.LengthConstraintType.NONE)
org.jfree.chart.block.LengthConstraintType.RANGE == orig(org.jfree.chart.block.LengthConstraintType.RANGE)
org.jfree.chart.block.LengthConstraintType.FIXED == orig(org.jfree.chart.block.LengthConstraintType.FIXED)
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType.name == orig(org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType.name)
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType.name.toString == orig(org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType.name.toString)
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType.name == orig(org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType.name)
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType.name.toString == orig(org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType.name.toString)
this.width == orig(this.width)
this.widthRange == orig(this.widthRange)
this.widthRange.lower == orig(this.widthRange.lower)
this.widthRange.upper == orig(this.widthRange.upper)
this.widthConstraintType == orig(this.widthConstraintType)
org.jfree.chart.block.LengthConstraintType.NONE.name == orig(org.jfree.chart.block.LengthConstraintType.NONE.name)
org.jfree.chart.block.LengthConstraintType.NONE.name.toString == orig(org.jfree.chart.block.LengthConstraintType.NONE.name.toString)
org.jfree.chart.block.LengthConstraintType.RANGE.name == orig(org.jfree.chart.block.LengthConstraintType.RANGE.name)
org.jfree.chart.block.LengthConstraintType.RANGE.name.toString == orig(org.jfree.chart.block.LengthConstraintType.RANGE.name.toString)
org.jfree.chart.block.LengthConstraintType.FIXED.name == orig(org.jfree.chart.block.LengthConstraintType.FIXED.name)
org.jfree.chart.block.LengthConstraintType.FIXED.name.toString == orig(org.jfree.chart.block.LengthConstraintType.FIXED.name.toString)
this.widthConstraintType.name == orig(this.widthConstraintType.name)
this.widthConstraintType.name.toString == orig(this.widthConstraintType.name.toString)
this.height == orig(this.height)
this.heightRange == orig(this.heightRange)
this.heightRange.lower == orig(this.heightRange.lower)
this.heightRange.upper == orig(this.heightRange.upper)
this.heightConstraintType == orig(this.heightConstraintType)
this.heightConstraintType.name == orig(this.heightConstraintType.name)
this.heightConstraintType.name.toString == orig(this.heightConstraintType.name.toString)
this.width == 200.0
this.widthRange.upper == 200.0
this.widthConstraintType has only one value
this.widthConstraintType.name has only one value
this.widthConstraintType.name.toString == "RectangleConstraintType.RANGE"
this.height one of { 77.046875, 100.0 }
this.heightRange.upper one of { 77.046875, 100.0 }
this.heightConstraintType has only one value
this.heightConstraintType.name has only one value
this.heightConstraintType.name.toString == "RectangleConstraintType.RANGE"
return one of { 77.046875, 100.0 }
===========================================================================
org.jfree.chart.block.RectangleConstraint.getHeightConstraintType():::ENTER
this.widthConstraintType.name.toString one of { "LengthConstraintType.NONE", "RectangleConstraintType.RANGE" }
===========================================================================
org.jfree.chart.block.RectangleConstraint.getHeightConstraintType():::EXIT
org.jfree.chart.block.RectangleConstraint.NONE == orig(org.jfree.chart.block.RectangleConstraint.NONE)
org.jfree.chart.block.RectangleConstraint.NONE.width == orig(org.jfree.chart.block.RectangleConstraint.NONE.width)
org.jfree.chart.block.RectangleConstraint.NONE.widthRange == orig(org.jfree.chart.block.RectangleConstraint.NONE.widthRange)
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType == orig(org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType)
org.jfree.chart.block.RectangleConstraint.NONE.height == orig(org.jfree.chart.block.RectangleConstraint.NONE.height)
org.jfree.chart.block.RectangleConstraint.NONE.heightRange == orig(org.jfree.chart.block.RectangleConstraint.NONE.heightRange)
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType == orig(org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType)
org.jfree.chart.block.LengthConstraintType.NONE == orig(org.jfree.chart.block.LengthConstraintType.NONE)
org.jfree.chart.block.LengthConstraintType.RANGE == orig(org.jfree.chart.block.LengthConstraintType.RANGE)
org.jfree.chart.block.LengthConstraintType.FIXED == orig(org.jfree.chart.block.LengthConstraintType.FIXED)
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType.name == orig(org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType.name)
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType.name.toString == orig(org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType.name.toString)
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType.name == orig(org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType.name)
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType.name.toString == orig(org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType.name.toString)
this.width == orig(this.width)
this.widthRange == orig(this.widthRange)
this.widthRange.lower == orig(this.widthRange.lower)
this.widthRange.upper == orig(this.widthRange.upper)
this.widthConstraintType == orig(this.widthConstraintType)
org.jfree.chart.block.LengthConstraintType.NONE.name == orig(org.jfree.chart.block.LengthConstraintType.NONE.name)
org.jfree.chart.block.LengthConstraintType.NONE.name.toString == orig(org.jfree.chart.block.LengthConstraintType.NONE.name.toString)
org.jfree.chart.block.LengthConstraintType.RANGE.name == orig(org.jfree.chart.block.LengthConstraintType.RANGE.name)
org.jfree.chart.block.LengthConstraintType.RANGE.name.toString == orig(org.jfree.chart.block.LengthConstraintType.RANGE.name.toString)
org.jfree.chart.block.LengthConstraintType.FIXED.name == orig(org.jfree.chart.block.LengthConstraintType.FIXED.name)
org.jfree.chart.block.LengthConstraintType.FIXED.name.toString == orig(org.jfree.chart.block.LengthConstraintType.FIXED.name.toString)
this.widthConstraintType.name == orig(this.widthConstraintType.name)
this.widthConstraintType.name.toString == orig(this.widthConstraintType.name.toString)
this.height == orig(this.height)
this.heightRange == orig(this.heightRange)
this.heightRange.lower == orig(this.heightRange.lower)
this.heightRange.upper == orig(this.heightRange.upper)
this.heightConstraintType == orig(this.heightConstraintType)
this.heightConstraintType.name == orig(this.heightConstraintType.name)
this.heightConstraintType.name.toString == orig(this.heightConstraintType.name.toString)
this.widthConstraintType.name.toString one of { "LengthConstraintType.NONE", "RectangleConstraintType.RANGE" }
return != null
return.name != null
return.name.toString one of { "LengthConstraintType.NONE", "RectangleConstraintType.RANGE" }
===========================================================================
org.jfree.chart.block.RectangleConstraint.getHeightRange():::ENTER
this.width one of { 194.0, 198.0, 200.0 }
this.widthConstraintType.name.toString one of { "LengthConstraintType.FIXED", "RectangleConstraintType.RANGE" }
this.heightConstraintType has only one value
this.heightConstraintType.name has only one value
this.heightConstraintType.name.toString == "RectangleConstraintType.RANGE"
===========================================================================
org.jfree.chart.block.RectangleConstraint.getHeightRange():::EXIT
org.jfree.chart.block.RectangleConstraint.NONE == orig(org.jfree.chart.block.RectangleConstraint.NONE)
org.jfree.chart.block.RectangleConstraint.NONE.width == orig(org.jfree.chart.block.RectangleConstraint.NONE.width)
org.jfree.chart.block.RectangleConstraint.NONE.widthRange == orig(org.jfree.chart.block.RectangleConstraint.NONE.widthRange)
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType == orig(org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType)
org.jfree.chart.block.RectangleConstraint.NONE.height == orig(org.jfree.chart.block.RectangleConstraint.NONE.height)
org.jfree.chart.block.RectangleConstraint.NONE.heightRange == orig(org.jfree.chart.block.RectangleConstraint.NONE.heightRange)
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType == orig(org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType)
org.jfree.chart.block.LengthConstraintType.NONE == orig(org.jfree.chart.block.LengthConstraintType.NONE)
org.jfree.chart.block.LengthConstraintType.RANGE == orig(org.jfree.chart.block.LengthConstraintType.RANGE)
org.jfree.chart.block.LengthConstraintType.FIXED == orig(org.jfree.chart.block.LengthConstraintType.FIXED)
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType.name == orig(org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType.name)
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType.name.toString == orig(org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType.name.toString)
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType.name == orig(org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType.name)
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType.name.toString == orig(org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType.name.toString)
this.width == orig(this.width)
this.widthRange == orig(this.widthRange)
this.widthRange.lower == orig(this.widthRange.lower)
this.widthRange.upper == orig(this.widthRange.upper)
this.widthConstraintType == orig(this.widthConstraintType)
org.jfree.chart.block.LengthConstraintType.NONE.name == orig(org.jfree.chart.block.LengthConstraintType.NONE.name)
org.jfree.chart.block.LengthConstraintType.NONE.name.toString == orig(org.jfree.chart.block.LengthConstraintType.NONE.name.toString)
org.jfree.chart.block.LengthConstraintType.RANGE.name == orig(org.jfree.chart.block.LengthConstraintType.RANGE.name)
org.jfree.chart.block.LengthConstraintType.RANGE.name.toString == orig(org.jfree.chart.block.LengthConstraintType.RANGE.name.toString)
org.jfree.chart.block.LengthConstraintType.FIXED.name == orig(org.jfree.chart.block.LengthConstraintType.FIXED.name)
org.jfree.chart.block.LengthConstraintType.FIXED.name.toString == orig(org.jfree.chart.block.LengthConstraintType.FIXED.name.toString)
this.widthConstraintType.name == orig(this.widthConstraintType.name)
this.widthConstraintType.name.toString == orig(this.widthConstraintType.name.toString)
this.height == orig(this.height)
this.heightRange == orig(this.heightRange)
this.heightRange.lower == orig(this.heightRange.lower)
this.heightRange.upper == orig(this.heightRange.upper)
this.heightConstraintType == orig(this.heightConstraintType)
this.heightConstraintType.name == orig(this.heightConstraintType.name)
this.heightConstraintType.name.toString == orig(this.heightConstraintType.name.toString)
this.width one of { 194.0, 198.0, 200.0 }
this.widthConstraintType.name.toString one of { "LengthConstraintType.FIXED", "RectangleConstraintType.RANGE" }
this.heightConstraintType has only one value
this.heightConstraintType.name has only one value
this.heightConstraintType.name.toString == "RectangleConstraintType.RANGE"
return.lower == 0.0
===========================================================================
org.jfree.chart.block.RectangleConstraint.getWidth():::ENTER
this.width one of { 194.0, 200.0 }
this.widthRange.upper one of { 194.0, 200.0 }
this.widthConstraintType.name.toString one of { "LengthConstraintType.FIXED", "RectangleConstraintType.RANGE" }
this.height one of { 71.046875, 77.046875, 100.0 }
this.heightRange.upper one of { 71.046875, 77.046875, 100.0 }
this.heightConstraintType has only one value
this.heightConstraintType.name has only one value
this.heightConstraintType.name.toString == "RectangleConstraintType.RANGE"
===========================================================================
org.jfree.chart.block.RectangleConstraint.getWidth():::EXIT
org.jfree.chart.block.RectangleConstraint.NONE == orig(org.jfree.chart.block.RectangleConstraint.NONE)
org.jfree.chart.block.RectangleConstraint.NONE.width == orig(org.jfree.chart.block.RectangleConstraint.NONE.width)
org.jfree.chart.block.RectangleConstraint.NONE.widthRange == orig(org.jfree.chart.block.RectangleConstraint.NONE.widthRange)
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType == orig(org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType)
org.jfree.chart.block.RectangleConstraint.NONE.height == orig(org.jfree.chart.block.RectangleConstraint.NONE.height)
org.jfree.chart.block.RectangleConstraint.NONE.heightRange == orig(org.jfree.chart.block.RectangleConstraint.NONE.heightRange)
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType == orig(org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType)
org.jfree.chart.block.LengthConstraintType.NONE == orig(org.jfree.chart.block.LengthConstraintType.NONE)
org.jfree.chart.block.LengthConstraintType.RANGE == orig(org.jfree.chart.block.LengthConstraintType.RANGE)
org.jfree.chart.block.LengthConstraintType.FIXED == orig(org.jfree.chart.block.LengthConstraintType.FIXED)
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType.name == orig(org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType.name)
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType.name.toString == orig(org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType.name.toString)
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType.name == orig(org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType.name)
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType.name.toString == orig(org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType.name.toString)
this.width == orig(this.width)
this.widthRange == orig(this.widthRange)
this.widthRange.lower == orig(this.widthRange.lower)
this.widthRange.upper == orig(this.widthRange.upper)
this.widthConstraintType == orig(this.widthConstraintType)
org.jfree.chart.block.LengthConstraintType.NONE.name == orig(org.jfree.chart.block.LengthConstraintType.NONE.name)
org.jfree.chart.block.LengthConstraintType.NONE.name.toString == orig(org.jfree.chart.block.LengthConstraintType.NONE.name.toString)
org.jfree.chart.block.LengthConstraintType.RANGE.name == orig(org.jfree.chart.block.LengthConstraintType.RANGE.name)
org.jfree.chart.block.LengthConstraintType.RANGE.name.toString == orig(org.jfree.chart.block.LengthConstraintType.RANGE.name.toString)
org.jfree.chart.block.LengthConstraintType.FIXED.name == orig(org.jfree.chart.block.LengthConstraintType.FIXED.name)
org.jfree.chart.block.LengthConstraintType.FIXED.name.toString == orig(org.jfree.chart.block.LengthConstraintType.FIXED.name.toString)
this.widthConstraintType.name == orig(this.widthConstraintType.name)
this.widthConstraintType.name.toString == orig(this.widthConstraintType.name.toString)
this.height == orig(this.height)
this.heightRange == orig(this.heightRange)
this.heightRange.lower == orig(this.heightRange.lower)
this.heightRange.upper == orig(this.heightRange.upper)
this.heightConstraintType == orig(this.heightConstraintType)
this.heightConstraintType.name == orig(this.heightConstraintType.name)
this.heightConstraintType.name.toString == orig(this.heightConstraintType.name.toString)
this.width one of { 194.0, 200.0 }
this.widthRange.upper one of { 194.0, 200.0 }
this.widthConstraintType.name.toString one of { "LengthConstraintType.FIXED", "RectangleConstraintType.RANGE" }
this.height one of { 71.046875, 77.046875, 100.0 }
this.heightRange.upper one of { 71.046875, 77.046875, 100.0 }
this.heightConstraintType has only one value
this.heightConstraintType.name has only one value
this.heightConstraintType.name.toString == "RectangleConstraintType.RANGE"
return one of { 194.0, 200.0 }
===========================================================================
org.jfree.chart.block.RectangleConstraint.getWidthConstraintType():::ENTER
this.widthConstraintType.name.toString one of { "LengthConstraintType.NONE", "RectangleConstraintType.RANGE" }
===========================================================================
org.jfree.chart.block.RectangleConstraint.getWidthConstraintType():::EXIT
org.jfree.chart.block.RectangleConstraint.NONE == orig(org.jfree.chart.block.RectangleConstraint.NONE)
org.jfree.chart.block.RectangleConstraint.NONE.width == orig(org.jfree.chart.block.RectangleConstraint.NONE.width)
org.jfree.chart.block.RectangleConstraint.NONE.widthRange == orig(org.jfree.chart.block.RectangleConstraint.NONE.widthRange)
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType == orig(org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType)
org.jfree.chart.block.RectangleConstraint.NONE.height == orig(org.jfree.chart.block.RectangleConstraint.NONE.height)
org.jfree.chart.block.RectangleConstraint.NONE.heightRange == orig(org.jfree.chart.block.RectangleConstraint.NONE.heightRange)
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType == orig(org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType)
org.jfree.chart.block.LengthConstraintType.NONE == orig(org.jfree.chart.block.LengthConstraintType.NONE)
org.jfree.chart.block.LengthConstraintType.RANGE == orig(org.jfree.chart.block.LengthConstraintType.RANGE)
org.jfree.chart.block.LengthConstraintType.FIXED == orig(org.jfree.chart.block.LengthConstraintType.FIXED)
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType.name == orig(org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType.name)
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType.name.toString == orig(org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType.name.toString)
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType.name == orig(org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType.name)
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType.name.toString == orig(org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType.name.toString)
this.width == orig(this.width)
this.widthRange == orig(this.widthRange)
this.widthRange.lower == orig(this.widthRange.lower)
this.widthRange.upper == orig(this.widthRange.upper)
this.widthConstraintType == orig(this.widthConstraintType)
org.jfree.chart.block.LengthConstraintType.NONE.name == orig(org.jfree.chart.block.LengthConstraintType.NONE.name)
org.jfree.chart.block.LengthConstraintType.NONE.name.toString == orig(org.jfree.chart.block.LengthConstraintType.NONE.name.toString)
org.jfree.chart.block.LengthConstraintType.RANGE.name == orig(org.jfree.chart.block.LengthConstraintType.RANGE.name)
org.jfree.chart.block.LengthConstraintType.RANGE.name.toString == orig(org.jfree.chart.block.LengthConstraintType.RANGE.name.toString)
org.jfree.chart.block.LengthConstraintType.FIXED.name == orig(org.jfree.chart.block.LengthConstraintType.FIXED.name)
org.jfree.chart.block.LengthConstraintType.FIXED.name.toString == orig(org.jfree.chart.block.LengthConstraintType.FIXED.name.toString)
this.widthConstraintType.name == orig(this.widthConstraintType.name)
this.widthConstraintType.name.toString == orig(this.widthConstraintType.name.toString)
this.height == orig(this.height)
this.heightRange == orig(this.heightRange)
this.heightRange.lower == orig(this.heightRange.lower)
this.heightRange.upper == orig(this.heightRange.upper)
this.heightConstraintType == orig(this.heightConstraintType)
this.heightConstraintType.name == orig(this.heightConstraintType.name)
this.heightConstraintType.name.toString == orig(this.heightConstraintType.name.toString)
this.widthConstraintType.name.toString one of { "LengthConstraintType.NONE", "RectangleConstraintType.RANGE" }
return != null
return.name != null
return.name.toString one of { "LengthConstraintType.NONE", "RectangleConstraintType.RANGE" }
===========================================================================
org.jfree.chart.block.RectangleConstraint.getWidthRange():::ENTER
this.width one of { 194.0, 198.0, 200.0 }
this.widthConstraintType has only one value
this.widthConstraintType.name has only one value
this.widthConstraintType.name.toString == "RectangleConstraintType.RANGE"
this.heightConstraintType has only one value
this.heightConstraintType.name has only one value
this.heightConstraintType.name.toString == "RectangleConstraintType.RANGE"
===========================================================================
org.jfree.chart.block.RectangleConstraint.getWidthRange():::EXIT
org.jfree.chart.block.RectangleConstraint.NONE == orig(org.jfree.chart.block.RectangleConstraint.NONE)
org.jfree.chart.block.RectangleConstraint.NONE.width == orig(org.jfree.chart.block.RectangleConstraint.NONE.width)
org.jfree.chart.block.RectangleConstraint.NONE.widthRange == orig(org.jfree.chart.block.RectangleConstraint.NONE.widthRange)
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType == orig(org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType)
org.jfree.chart.block.RectangleConstraint.NONE.height == orig(org.jfree.chart.block.RectangleConstraint.NONE.height)
org.jfree.chart.block.RectangleConstraint.NONE.heightRange == orig(org.jfree.chart.block.RectangleConstraint.NONE.heightRange)
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType == orig(org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType)
org.jfree.chart.block.LengthConstraintType.NONE == orig(org.jfree.chart.block.LengthConstraintType.NONE)
org.jfree.chart.block.LengthConstraintType.RANGE == orig(org.jfree.chart.block.LengthConstraintType.RANGE)
org.jfree.chart.block.LengthConstraintType.FIXED == orig(org.jfree.chart.block.LengthConstraintType.FIXED)
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType.name == orig(org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType.name)
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType.name.toString == orig(org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType.name.toString)
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType.name == orig(org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType.name)
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType.name.toString == orig(org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType.name.toString)
this.width == orig(this.width)
this.widthRange == orig(this.widthRange)
this.widthRange.lower == orig(this.widthRange.lower)
this.widthRange.upper == orig(this.widthRange.upper)
this.widthConstraintType == orig(this.widthConstraintType)
org.jfree.chart.block.LengthConstraintType.NONE.name == orig(org.jfree.chart.block.LengthConstraintType.NONE.name)
org.jfree.chart.block.LengthConstraintType.NONE.name.toString == orig(org.jfree.chart.block.LengthConstraintType.NONE.name.toString)
org.jfree.chart.block.LengthConstraintType.RANGE.name == orig(org.jfree.chart.block.LengthConstraintType.RANGE.name)
org.jfree.chart.block.LengthConstraintType.RANGE.name.toString == orig(org.jfree.chart.block.LengthConstraintType.RANGE.name.toString)
org.jfree.chart.block.LengthConstraintType.FIXED.name == orig(org.jfree.chart.block.LengthConstraintType.FIXED.name)
org.jfree.chart.block.LengthConstraintType.FIXED.name.toString == orig(org.jfree.chart.block.LengthConstraintType.FIXED.name.toString)
this.widthConstraintType.name == orig(this.widthConstraintType.name)
this.widthConstraintType.name.toString == orig(this.widthConstraintType.name.toString)
this.height == orig(this.height)
this.heightRange == orig(this.heightRange)
this.heightRange.lower == orig(this.heightRange.lower)
this.heightRange.upper == orig(this.heightRange.upper)
this.heightConstraintType == orig(this.heightConstraintType)
this.heightConstraintType.name == orig(this.heightConstraintType.name)
this.heightConstraintType.name.toString == orig(this.heightConstraintType.name.toString)
this.width one of { 194.0, 198.0, 200.0 }
this.widthConstraintType has only one value
this.widthConstraintType.name has only one value
this.widthConstraintType.name.toString == "RectangleConstraintType.RANGE"
this.heightConstraintType has only one value
this.heightConstraintType.name has only one value
this.heightConstraintType.name.toString == "RectangleConstraintType.RANGE"
return.lower == 0.0
return.upper one of { 194.0, 198.0, 200.0 }
===========================================================================
org.jfree.chart.block.RectangleConstraint.toFixedWidth(double):::ENTER
this has only one value
this.width == 194.0
this.widthRange has only one value
this.widthRange.upper == 194.0
this.widthConstraintType has only one value
this.widthConstraintType.name has only one value
this.widthConstraintType.name.toString == "RectangleConstraintType.RANGE"
this.height == 71.046875
this.heightRange has only one value
this.heightRange.upper == 71.046875
this.heightConstraintType has only one value
this.heightConstraintType.name has only one value
this.heightConstraintType.name.toString == "RectangleConstraintType.RANGE"
width == 194.0
===========================================================================
org.jfree.chart.block.RectangleConstraint.toFixedWidth(double):::EXIT
org.jfree.chart.block.RectangleConstraint.NONE == orig(org.jfree.chart.block.RectangleConstraint.NONE)
org.jfree.chart.block.RectangleConstraint.NONE.width == orig(org.jfree.chart.block.RectangleConstraint.NONE.width)
org.jfree.chart.block.RectangleConstraint.NONE.widthRange == orig(org.jfree.chart.block.RectangleConstraint.NONE.widthRange)
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType == orig(org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType)
org.jfree.chart.block.RectangleConstraint.NONE.height == orig(org.jfree.chart.block.RectangleConstraint.NONE.height)
org.jfree.chart.block.RectangleConstraint.NONE.heightRange == orig(org.jfree.chart.block.RectangleConstraint.NONE.heightRange)
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType == orig(org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType)
org.jfree.chart.block.LengthConstraintType.NONE == orig(org.jfree.chart.block.LengthConstraintType.NONE)
org.jfree.chart.block.LengthConstraintType.RANGE == orig(org.jfree.chart.block.LengthConstraintType.RANGE)
org.jfree.chart.block.LengthConstraintType.FIXED == orig(org.jfree.chart.block.LengthConstraintType.FIXED)
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType.name == orig(org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType.name)
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType.name.toString == orig(org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType.name.toString)
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType.name == orig(org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType.name)
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType.name.toString == orig(org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType.name.toString)
this.width == orig(this.width)
this.widthRange == orig(this.widthRange)
this.widthRange.lower == orig(this.widthRange.lower)
this.widthRange.upper == orig(this.widthRange.upper)
this.widthConstraintType == orig(this.widthConstraintType)
org.jfree.chart.block.LengthConstraintType.NONE.name == orig(org.jfree.chart.block.LengthConstraintType.NONE.name)
org.jfree.chart.block.LengthConstraintType.NONE.name.toString == orig(org.jfree.chart.block.LengthConstraintType.NONE.name.toString)
org.jfree.chart.block.LengthConstraintType.RANGE.name == orig(org.jfree.chart.block.LengthConstraintType.RANGE.name)
org.jfree.chart.block.LengthConstraintType.RANGE.name.toString == orig(org.jfree.chart.block.LengthConstraintType.RANGE.name.toString)
org.jfree.chart.block.LengthConstraintType.FIXED.name == orig(org.jfree.chart.block.LengthConstraintType.FIXED.name)
org.jfree.chart.block.LengthConstraintType.FIXED.name.toString == orig(org.jfree.chart.block.LengthConstraintType.FIXED.name.toString)
this.widthConstraintType.name == orig(this.widthConstraintType.name)
this.widthConstraintType.name.toString == orig(this.widthConstraintType.name.toString)
this.height == orig(this.height)
this.heightRange == orig(this.heightRange)
this.heightRange.lower == orig(this.heightRange.lower)
this.heightRange.upper == orig(this.heightRange.upper)
this.heightConstraintType == orig(this.heightConstraintType)
this.heightConstraintType.name == orig(this.heightConstraintType.name)
this.heightConstraintType.name.toString == orig(this.heightConstraintType.name.toString)
this.width == 194.0
this.widthRange has only one value
this.widthRange.upper == 194.0
this.widthConstraintType has only one value
this.widthConstraintType.name has only one value
this.widthConstraintType.name.toString == "RectangleConstraintType.RANGE"
this.height == 71.046875
this.heightRange has only one value
this.heightRange.upper == 71.046875
this.heightConstraintType has only one value
this.heightConstraintType.name has only one value
this.heightConstraintType.name.toString == "RectangleConstraintType.RANGE"
return has only one value
return.width == 194.0
return.widthRange has only one value
return.widthRange.lower == 0.0
return.widthRange.upper == 194.0
return.widthConstraintType has only one value
return.widthConstraintType.name has only one value
return.widthConstraintType.name.toString == "LengthConstraintType.FIXED"
return.height == 71.046875
return.heightRange has only one value
return.heightRange.lower == 0.0
return.heightRange.upper == 71.046875
return.heightConstraintType has only one value
return.heightConstraintType.name has only one value
return.heightConstraintType.name.toString == "RectangleConstraintType.RANGE"
===========================================================================
org.jfree.chart.event.ChartChangeEvent:::OBJECT
this.type has only one value
this.type != null
org.jfree.chart.event.ChartChangeEventType.GENERAL has only one value
org.jfree.chart.event.ChartChangeEventType.GENERAL != null
org.jfree.chart.event.ChartChangeEventType.NEW_DATASET has only one value
org.jfree.chart.event.ChartChangeEventType.NEW_DATASET != null
org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED has only one value
org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED != null
org.jfree.chart.event.ChartChangeEventType.GENERAL.name has only one value
org.jfree.chart.event.ChartChangeEventType.GENERAL.name != null
org.jfree.chart.event.ChartChangeEventType.GENERAL.name.toString == "ChartChangeEventType.GENERAL"
org.jfree.chart.event.ChartChangeEventType.NEW_DATASET.name has only one value
org.jfree.chart.event.ChartChangeEventType.NEW_DATASET.name != null
org.jfree.chart.event.ChartChangeEventType.NEW_DATASET.name.toString == "ChartChangeEventType.NEW_DATASET"
org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED.name has only one value
org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED.name != null
org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED.name.toString == "ChartChangeEventType.DATASET_UPDATED"
this.type.name has only one value
this.type.name != null
this.type.name.toString == "ChartChangeEventType.GENERAL"
org.jfree.chart.JFreeChart.INFO has only one value
org.jfree.chart.JFreeChart.INFO != null
org.jfree.chart.JFreeChart.INFO.logo == null
org.jfree.chart.JFreeChart.INFO.licenceText has only one value
org.jfree.chart.JFreeChart.INFO.licenceText != null
org.jfree.chart.JFreeChart.INFO.licenceText.toString == "GNU LESSER GENERAL PUBLIC LICENSE\n\nVersion 2.1, February 1999\n\nCopyright (C) 1991, 1999 Free Software Foundation, Inc.\n59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\nEveryone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.\n\n[This is the first released version of the Lesser GPL.  It also counts as the successor of the GNU Library Public License, version 2, hence the version number 2.1.]\n\nPreamble\n\nThe licenses for most software are designed to take away your freedom to share and change it. By contrast, the GNU General Public Licenses are intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users.\n\nThis license, the Lesser General Public License, applies to some specially designated software packages--typically libraries--of the Free Software Foundation and other authors who decide to use it. You can use it too, but we suggest you first think carefully about whether this license or the ordinary General Public License is the better strategy to use in any particular case, based on the explanations below.\n\nWhen we speak of free software, we are referring to freedom of use, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish); that you receive source code or can get it if you want it; that you can change the software and use pieces of it in new free programs; and that you are informed that you can do these things.\n\nTo protect your rights, we need to make restrictions that forbid distributors to deny you these rights or to ask you to surrender these rights. These restrictions translate to certain responsibilities for you if you distribute copies of the library or if you modify it.\n\nFor example, if you distribute copies of the library, whether gratis or for a fee, you must give the recipients all the rights that we gave you. You must make sure that they, too, receive or can get the source code. If you link other code with the library, you must provide complete object files to the recipients, so that they can relink them with the library after making changes to the library and recompiling it. And you must show them these terms so they know their rights.\n\nWe protect your rights with a two-step method: (1) we copyright the library, and (2) we offer you this license, which gives you legal permission to copy, distribute and/or modify the library.\n\nTo protect each distributor, we want to make it very clear that there is no warranty for the free library. Also, if the library is modified by someone else and passed on, the recipients should know that what they have is not the original version, so that the original author's reputation will not be affected by problems that might be introduced by others.\n\nFinally, software patents pose a constant threat to the existence of any free program. We wish to make sure that a company cannot effectively restrict the users of a free program by obtaining a restrictive license from a patent holder. Therefore, we insist that any patent license obtained for a version of the library must be consistent with the full freedom of use specified in this license.\n\nMost GNU software, including some libraries, is covered by the ordinary GNU General Public License. This license, the GNU Lesser General Public License, applies to certain designated libraries, and is quite different from the ordinary General Public License. We use this license for certain libraries in order to permit linking those libraries into non-free programs.\n\nWhen a program is linked with a library, whether statically or using a shared library, the combination of the two is legally speaking a combined work, a derivative of the original library. The ordinary General Public License therefore permits such linking only if the entire combination fits its criteria of freedom. The Lesser General Public License permits more lax criteria for linking other code with the library.\n\nWe call this license the \"Lesser\" General Public License because it does Less to protect the user's freedom than the ordinary General Public License. It also provides other free software developers Less of an advantage over competing non-free programs. These disadvantages are the reason we use the ordinary General Public License for many libraries. However, the Lesser license provides advantages in certain special circumstances.\n\nFor example, on rare occasions, there may be a special need to encourage the widest possible use of a certain library, so that it becomes a de-facto standard. To achieve this, non-free programs must be allowed to use the library. A more frequent case is that a free library does the same job as widely used non-free libraries. In this case, there is little to gain by limiting the free library to free software only, so we use the Lesser General Public License.\n\nIn other cases, permission to use a particular library in non-free programs enables a greater number of people to use a large body of free software. For example, permission to use the GNU C Library in non-free programs enables many more people to use the whole GNU operating system, as well as its variant, the GNU/Linux operating system.\n\nAlthough the Lesser General Public License is Less protective of the users' freedom, it does ensure that the user of a program that is linked with the Library has the freedom and the wherewithal to run that program using a modified version of the Library.\n\nThe precise terms and conditions for copying, distribution and modification follow. Pay close attention to the difference between a \"work based on the library\" and a \"work that uses the library\". The former contains code derived from the library, whereas the latter must be combined with the library in order to run.\n\nTERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n0. This License Agreement applies to any software library or other program which contains a notice placed by the copyright holder or other authorized party saying it may be distributed under the terms of this Lesser General Public License (also called \"this License\"). Each licensee is addressed as \"you\".\nA \"library\" means a collection of software functions and/or data prepared so as to be conveniently linked with application programs (which use some of those functions and data) to form executables.\n\nThe \"Library\", below, refers to any such software library or work which has been distributed under these terms. A \"work based on the Library\" means either the Library or any derivative work under copyright law: that is to say, a work containing the Library or a portion of it, either verbatim or with modifications and/or translated straightforwardly into another language. (Hereinafter, translation is included without limitation in the term \"modification\".)\n\n\"Source code\" for a work means the preferred form of the work for making modifications to it. For a library, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the library.\n\nActivities other than copying, distribution and modification are not covered by this License; they are outside its scope. The act of running a program using the Library is not restricted, and output from such a program is covered only if its contents constitute a work based on the Library (independent of the use of the Library in a tool for writing it). Whether that is true depends on what the Library does and what the program that uses the Library does.\n1. You may copy and distribute verbatim copies of the Library's complete source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and distribute a copy of this License along with the Library.\n\nYou may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee.\n\n2. You may modify your copy or copies of the Library or any portion of it, thus forming a work based on the Library, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions:\n\n*    a) The modified work must itself be a software library.\n*    b) You must cause the files modified to carry prominent notices stating that you changed the files and the date of any change.\n*    c) You must cause the whole of the work to be licensed at no charge to all third parties under the terms of this License.\n*    d) If a facility in the modified Library refers to a function or a table of data to be supplied by an application program that uses the facility, other than as an argument passed when the facility is invoked, then you must make a good faith effort to ensure that, in the event an application does not supply such function or table, the facility still operates, and performs whatever part of its purpose remains meaningful.\n\n(For example, a function in a library to compute square roots has a purpose that is entirely well-defined independent of the application. Therefore, Subsection 2d requires that any application-supplied function or table used by this function must be optional: if the application does not supply it, the square root function must still compute square roots.)\n\nThese requirements apply to the modified work as a whole. If identifiable sections of that work are not derived from the Library, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works. But when you distribute the same sections as part of a whole which is a work based on the Library, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Library.\n\nIn addition, mere aggregation of another work not based on the Library with the Library (or with a work based on the Library) on a volume of a storage or distribution medium does not bring the other work under the scope of this License.\n\n3. You may opt to apply the terms of the ordinary GNU General Public License instead of this License to a given copy of the Library. To do this, you must alter all the notices that refer to this License, so that they refer to the ordinary GNU General Public License, version 2, instead of to this License. (If a newer version than version 2 of the ordinary GNU General Public License has appeared, then you can specify that version instead if you wish.) Do not make any other change in these notices.\n\nOnce this change is made in a given copy, it is irreversible for that copy, so the ordinary GNU General Public License applies to all subsequent copies and derivative works made from that copy.\n\nThis option is useful when you wish to copy part of the code of the Library into a program that is not a library.\n\n4. You may copy and distribute the Library (or a portion or derivative of it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange.\n\nIf distribution of object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place satisfies the requirement to distribute the source code, even though third parties are not compelled to copy the source along with the object code.\n\n5. A program that contains no derivative of any portion of the Library, but is designed to work with the Library by being compiled or linked with it, is called a \"work that uses the Library\". Such a work, in isolation, is not a derivative work of the Library, and therefore falls outside the scope of this License.\n\nHowever, linking a \"work that uses the Library\" with the Library creates an executable that is a derivative of the Library (because it contains portions of the Library), rather than a \"work that uses the library\". The executable is therefore covered by this License. Section 6 states terms for distribution of such executables.\n\nWhen a \"work that uses the Library\" uses material from a header file that is part of the Library, the object code for the work may be a derivative work of the Library even though the source code is not. Whether this is true is especially significant if the work can be linked without the Library, or if the work is itself a library. The threshold for this to be true is not precisely defined by law.\n\nIf such an object file uses only numerical parameters, data structure layouts and accessors, and small macros and small inline functions (ten lines or less in length), then the use of the object file is unrestricted, regardless of whether it is legally a derivative work. (Executables containing this object code plus portions of the Library will still fall under Section 6.)\n\nOtherwise, if the work is a derivative of the Library, you may distribute the object code for the work under the terms of Section 6. Any executables containing that work also fall under Section 6, whether or not they are linked directly with the Library itself.\n\n6. As an exception to the Sections above, you may also combine or link a \"work that uses the Library\" with the Library to produce a work containing portions of the Library, and distribute that work under terms of your choice, provided that the terms permit modification of the work for the customer's own use and reverse engineering for debugging such modifications.\n\nYou must give prominent notice with each copy of the work that the Library is used in it and that the Library and its use are covered by this License. You must supply a copy of this License. If the work during execution displays copyright notices, you must include the copyright notice for the Library among them, as well as a reference directing the user to the copy of this License. Also, you must do one of these things:\n\n*    a) Accompany the work with the complete corresponding machine-readable source code for the Library including whatever changes were used in the work (which must be distributed under Sections 1 and 2 above); and, if the work is an executable linked with the Library, with the complete machine-readable \"work that uses the Library\", as object code and/or source code, so that the user can modify the Library and then relink to produce a modified executable containing the modified Library. (It is understood that the user who changes the contents of definitions files in the Library will not necessarily be able to recompile the application to use the modified definitions.)\n*    b) Use a suitable shared library mechanism for linking with the Library. A suitable mechanism is one that (1) uses at run time a copy of the library already present on the user's computer system, rather than copying library functions into the executable, and (2) will operate properly with a modified version of the library, if the user installs one, as long as the modified version is interface-compatible with the version that the work was made with.\n*    c) Accompany the work with a written offer, valid for at least three years, to give the same user the materials specified in Subsection 6a, above, for a charge no more than the cost of performing this distribution.\n*    d) If distribution of the work is made by offering access to copy from a designated place, offer equivalent access to copy the above specified materials from the same place.\n*    e) Verify that the user has already received a copy of these materials or that you have already sent this user a copy.\n\nFor an executable, the required form of the \"work that uses the Library\" must include any data and utility programs needed for reproducing the executable from it. However, as a special exception, the materials to be distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable.\n\nIt may happen that this requirement contradicts the license restrictions of other proprietary libraries that do not normally accompany the operating system. Such a contradiction means you cannot use both them and the Library together in an executable that you distribute.\n\n7. You may place library facilities that are a work based on the Library side-by-side in a single library together with other library facilities not covered by this License, and distribute such a combined library, provided that the separate distribution of the work based on the Library and of the other library facilities is otherwise permitted, and provided that you do these two things:\n\n*    a) Accompany the combined library with a copy of the same work based on the Library, uncombined with any other library facilities. This must be distributed under the terms of the Sections above.\n*    b) Give prominent notice with the combined library of the fact that part of it is a work based on the Library, and explaining where to find the accompanying uncombined form of the same work.\n\n8. You may not copy, modify, sublicense, link with, or distribute the Library except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense, link with, or distribute the Library is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance.\n\n9. You are not required to accept this License, since you have not signed it. However, nothing else grants you permission to modify or distribute the Library or its derivative works. These actions are prohibited by law if you do not accept this License. Therefore, by modifying or distributing the Library (or any work based on the Library), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Library or works based on it.\n\n10. Each time you redistribute the Library (or any work based on the Library), the recipient automatically receives a license from the original licensor to copy, distribute, link with or modify the Library subject to these terms and conditions. You may not impose any further restrictions on the recipients' exercise of the rights granted herein. You are not responsible for enforcing compliance by third parties with this License.\n\n11. If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Library at all. For example, if a patent license would not permit royalty-free redistribution of the Library by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Library.\n\nIf any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply, and the section as a whole is intended to apply in other circumstances.\n\nIt is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system which is implemented by public license practices. Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice.\n\nThis section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License.\n\n12. If the distribution and/or use of the Library is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Library under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded. In such case, this License incorporates the limitation as if written in the body of this License.\n\n13. The Free Software Foundation may publish revised and/or new versions of the Lesser General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.\n\nEach version is given a distinguishing version number. If the Library specifies a version number of this License which applies to it and \"any later version\", you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation. If the Library does not specify a license version number, you may choose any version ever published by the Free Software Foundation.\n\n14. If you wish to incorporate parts of the Library into other free programs whose distribution conditions are incompatible with these, write to the author to ask for permission. For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this. Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally.\n\nNO WARRANTY\n\n15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE LIBRARY \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE LIBRARY IS WITH YOU. SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n\nEND OF TERMS AND CONDITIONS\n\n\nHow to Apply These Terms to Your New Libraries\n\nIf you develop a new library, and you want it to be of the greatest possible use to the public, we recommend making it free software that everyone can redistribute and change. You can do so by permitting redistribution under these terms (or, alternatively, under the terms of the ordinary General Public License).\n\nTo apply these terms, attach the following notices to the library.  It is safest to attach them to the start of each source file to most effectively convey the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.\n\n<one line to give the library's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.\n\nThis library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\nAlso add information on how to contact you by electronic and paper mail.\n\nYou should also get your employer (if you work as a programmer) or your school, if any, to sign a \"copyright disclaimer\" for the library, if necessary.  Here is a sample; alter the names:\n\nYoyodyne, Inc., hereby disclaims all copyright interest in the library `Frob' (a library for tweaking knobs) written by James Random Hacker.\n\n<signature of Ty Coon>, 1 April 1990\nTy Coon, President of Vice\n\nThat's all there is to it!\n"
org.jfree.chart.JFreeChart.INFO.contributors has only one value
org.jfree.chart.JFreeChart.INFO.contributors != null
org.jfree.chart.JFreeChart.INFO.contributors[] contains no nulls and has only one value, of length 85
org.jfree.chart.JFreeChart.INFO.contributors[] elements != null
org.jfree.chart.JFreeChart.INFO.contributors[].getClass().getName() == [org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor]
org.jfree.chart.JFreeChart.INFO.contributors[].getClass().getName() elements == org.jfree.chart.ui.Contributor.class
org.jfree.chart.JFreeChart.INFO.contributors.getClass().getName() == java.util.Arrays$ArrayList.class
org.jfree.chart.JFreeChart.INFO.copyright has only one value
org.jfree.chart.JFreeChart.INFO.copyright != null
org.jfree.chart.JFreeChart.INFO.copyright.toString == "(C)opyright 2000-2007, by Object Refinery Limited and Contributors"
org.jfree.chart.JFreeChart.INFO.libraries has only one value
org.jfree.chart.JFreeChart.INFO.libraries != null
org.jfree.chart.JFreeChart.INFO.libraries[] == []
org.jfree.chart.JFreeChart.INFO.libraries[].getClass().getName() == []
org.jfree.chart.JFreeChart.INFO.libraries.getClass().getName() == java.util.ArrayList.class
org.jfree.chart.JFreeChart.INFO.optionalLibraries has only one value
org.jfree.chart.JFreeChart.INFO.optionalLibraries != null
org.jfree.chart.JFreeChart.INFO.optionalLibraries[] == []
org.jfree.chart.JFreeChart.INFO.optionalLibraries[].getClass().getName() == []
org.jfree.chart.JFreeChart.INFO.optionalLibraries.getClass().getName() == java.util.ArrayList.class
org.jfree.chart.JFreeChart.INFO.name has only one value
org.jfree.chart.JFreeChart.INFO.name != null
org.jfree.chart.JFreeChart.INFO.name.toString == "JFreeChart"
org.jfree.chart.JFreeChart.INFO.version has only one value
org.jfree.chart.JFreeChart.INFO.version != null
org.jfree.chart.JFreeChart.INFO.version.toString == "1.2.0-pre"
org.jfree.chart.JFreeChart.INFO.licenceName has only one value
org.jfree.chart.JFreeChart.INFO.licenceName != null
org.jfree.chart.JFreeChart.INFO.licenceName.toString == "LGPL"
org.jfree.chart.JFreeChart.INFO.info has only one value
org.jfree.chart.JFreeChart.INFO.info != null
org.jfree.chart.JFreeChart.INFO.info.toString == "http://www.jfree.org/jfreechart/index.html"
org.jfree.chart.JFreeChart.DEFAULT_TITLE_FONT has only one value
org.jfree.chart.JFreeChart.DEFAULT_TITLE_FONT != null
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT has only one value
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT != null
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName() == java.awt.Color.class
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_IMAGE == null
this.chart.renderingHints has only one value
this.chart.borderVisible == false
this.chart.borderStroke has only one value
this.chart.borderStroke.getClass().getName() == java.awt.BasicStroke.class
this.chart.borderPaint has only one value
this.chart.borderPaint.getClass().getName() == java.awt.Color.class
this.chart.padding has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS != null
this.chart.padding.unitType has only one value
this.chart.padding.top == 0.0
this.chart.padding.left == 0.0
this.chart.padding.bottom == 0.0
this.chart.padding.right == 0.0
this.chart.title has only one value
org.jfree.chart.title.TextTitle.DEFAULT_FONT has only one value
org.jfree.chart.title.TextTitle.DEFAULT_FONT != null
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT has only one value
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT != null
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT.getClass().getName() == java.awt.Color.class
this.chart.title.text has only one value
this.chart.title.text.toString == "Test"
this.chart.title.font has only one value
this.chart.title.textAlignment has only one value
this.chart.title.paint has only one value
this.chart.title.paint.getClass().getName() == java.awt.Color.class
this.chart.title.backgroundPaint == null
this.chart.title.toolTipText == null
this.chart.title.urlText == null
this.chart.title.content == null
this.chart.title.expandToFitSpace == false
org.jfree.chart.title.Title.DEFAULT_POSITION has only one value
org.jfree.chart.title.Title.DEFAULT_POSITION != null
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT has only one value
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT != null
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT has only one value
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT != null
org.jfree.chart.title.Title.DEFAULT_PADDING has only one value
org.jfree.chart.title.Title.DEFAULT_PADDING != null
this.chart.title.position has only one value
this.chart.title.horizontalAlignment has only one value
this.chart.title.verticalAlignment has only one value
this.chart.title.listenerList has only one value
this.chart.title.notify == true
this.chart.title.id == null
this.chart.title.margin has only one value
this.chart.title.frame has only one value
this.chart.title.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class
this.chart.title.padding has only one value
this.chart.title.width == 0.0
this.chart.title.height == 0.0
this.chart.title.bounds has only one value
this.chart.title.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
this.chart.subtitles has only one value
this.chart.subtitles[] contains no nulls and has only one value, of length 1
this.chart.subtitles[] elements has only one value
this.chart.subtitles[].getClass().getName() == [org.jfree.chart.title.LegendTitle]
this.chart.subtitles[].getClass().getName() elements == org.jfree.chart.title.LegendTitle.class
this.chart.subtitles.getClass().getName() == java.util.ArrayList.class
this.chart.plot has only one value
this.chart.plot.getClass().getName() == org.jfree.chart.plot.PiePlot.class
org.jfree.chart.plot.Plot.ZERO has only one value
org.jfree.chart.plot.Plot.ZERO != null
org.jfree.chart.plot.Plot.ZERO.getClass().getName() == java.lang.Integer.class
org.jfree.chart.plot.Plot.DEFAULT_INSETS has only one value
org.jfree.chart.plot.Plot.DEFAULT_INSETS != null
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE has only one value
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE != null
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName() == java.awt.BasicStroke.class
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT has only one value
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT != null
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName() == java.awt.Color.class
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT has only one value
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT != null
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName() == java.awt.Color.class
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX has only one value
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX != null
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName() == java.awt.geom.Rectangle2D$Double.class
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE has only one value
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE != null
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == java.awt.geom.Ellipse2D$Double.class
this.chart.plot.parent == null
this.chart.plot.datasetGroup == null
this.chart.plot.noDataMessage == null
this.chart.plot.noDataMessageFont has only one value
this.chart.plot.noDataMessagePaint has only one value
this.chart.plot.noDataMessagePaint.getClass().getName() == java.awt.Color.class
this.chart.plot.insets has only one value
this.chart.plot.outlineVisible == true
this.chart.plot.outlineStroke has only one value
this.chart.plot.outlineStroke.getClass().getName() == java.awt.BasicStroke.class
this.chart.plot.outlinePaint has only one value
this.chart.plot.outlinePaint.getClass().getName() == java.awt.Color.class
this.chart.plot.backgroundPaint has only one value
this.chart.plot.backgroundPaint.getClass().getName() == java.awt.Color.class
this.chart.plot.backgroundImage == null
this.chart.plot.backgroundImageAlignment == 15
this.chart.plot.backgroundImageAlpha == 0.5
this.chart.plot.foregroundAlpha == 1.0
this.chart.plot.backgroundAlpha == 1.0
this.chart.plot.drawingSupplier has only one value
this.chart.plot.drawingSupplier.getClass().getName() == org.jfree.chart.plot.DefaultDrawingSupplier.class
this.chart.plot.listenerList has only one value
this.chart.backgroundPaint has only one value
this.chart.backgroundPaint.getClass().getName() == java.awt.Color.class
this.chart.backgroundImage == null
this.chart.backgroundImageAlignment == 15
this.chart.backgroundImageAlpha == 0.5
this.chart.changeListeners has only one value
this.chart.progressListeners has only one value
this.chart.notify == true
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartChangeListener == null
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartProgressListener == null
size(org.jfree.chart.JFreeChart.INFO.contributors[]) == 85
size(this.chart.subtitles[]) == 1
===========================================================================
org.jfree.chart.event.ChartChangeEvent.ChartChangeEvent(java.lang.Object):::ENTER
source != null
===========================================================================
org.jfree.chart.event.ChartChangeEvent.ChartChangeEvent(java.lang.Object):::EXIT
this.chart == null
===========================================================================
org.jfree.chart.event.ChartChangeEvent.ChartChangeEvent(java.lang.Object, org.jfree.chart.JFreeChart, org.jfree.chart.event.ChartChangeEventType):::ENTER
source != null
chart == null
org.jfree.chart.JFreeChart.INFO has only one value
org.jfree.chart.JFreeChart.INFO != null
org.jfree.chart.JFreeChart.INFO.logo == null
org.jfree.chart.JFreeChart.INFO.licenceText has only one value
org.jfree.chart.JFreeChart.INFO.licenceText != null
org.jfree.chart.JFreeChart.INFO.licenceText.toString == "GNU LESSER GENERAL PUBLIC LICENSE\n\nVersion 2.1, February 1999\n\nCopyright (C) 1991, 1999 Free Software Foundation, Inc.\n59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\nEveryone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.\n\n[This is the first released version of the Lesser GPL.  It also counts as the successor of the GNU Library Public License, version 2, hence the version number 2.1.]\n\nPreamble\n\nThe licenses for most software are designed to take away your freedom to share and change it. By contrast, the GNU General Public Licenses are intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users.\n\nThis license, the Lesser General Public License, applies to some specially designated software packages--typically libraries--of the Free Software Foundation and other authors who decide to use it. You can use it too, but we suggest you first think carefully about whether this license or the ordinary General Public License is the better strategy to use in any particular case, based on the explanations below.\n\nWhen we speak of free software, we are referring to freedom of use, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish); that you receive source code or can get it if you want it; that you can change the software and use pieces of it in new free programs; and that you are informed that you can do these things.\n\nTo protect your rights, we need to make restrictions that forbid distributors to deny you these rights or to ask you to surrender these rights. These restrictions translate to certain responsibilities for you if you distribute copies of the library or if you modify it.\n\nFor example, if you distribute copies of the library, whether gratis or for a fee, you must give the recipients all the rights that we gave you. You must make sure that they, too, receive or can get the source code. If you link other code with the library, you must provide complete object files to the recipients, so that they can relink them with the library after making changes to the library and recompiling it. And you must show them these terms so they know their rights.\n\nWe protect your rights with a two-step method: (1) we copyright the library, and (2) we offer you this license, which gives you legal permission to copy, distribute and/or modify the library.\n\nTo protect each distributor, we want to make it very clear that there is no warranty for the free library. Also, if the library is modified by someone else and passed on, the recipients should know that what they have is not the original version, so that the original author's reputation will not be affected by problems that might be introduced by others.\n\nFinally, software patents pose a constant threat to the existence of any free program. We wish to make sure that a company cannot effectively restrict the users of a free program by obtaining a restrictive license from a patent holder. Therefore, we insist that any patent license obtained for a version of the library must be consistent with the full freedom of use specified in this license.\n\nMost GNU software, including some libraries, is covered by the ordinary GNU General Public License. This license, the GNU Lesser General Public License, applies to certain designated libraries, and is quite different from the ordinary General Public License. We use this license for certain libraries in order to permit linking those libraries into non-free programs.\n\nWhen a program is linked with a library, whether statically or using a shared library, the combination of the two is legally speaking a combined work, a derivative of the original library. The ordinary General Public License therefore permits such linking only if the entire combination fits its criteria of freedom. The Lesser General Public License permits more lax criteria for linking other code with the library.\n\nWe call this license the \"Lesser\" General Public License because it does Less to protect the user's freedom than the ordinary General Public License. It also provides other free software developers Less of an advantage over competing non-free programs. These disadvantages are the reason we use the ordinary General Public License for many libraries. However, the Lesser license provides advantages in certain special circumstances.\n\nFor example, on rare occasions, there may be a special need to encourage the widest possible use of a certain library, so that it becomes a de-facto standard. To achieve this, non-free programs must be allowed to use the library. A more frequent case is that a free library does the same job as widely used non-free libraries. In this case, there is little to gain by limiting the free library to free software only, so we use the Lesser General Public License.\n\nIn other cases, permission to use a particular library in non-free programs enables a greater number of people to use a large body of free software. For example, permission to use the GNU C Library in non-free programs enables many more people to use the whole GNU operating system, as well as its variant, the GNU/Linux operating system.\n\nAlthough the Lesser General Public License is Less protective of the users' freedom, it does ensure that the user of a program that is linked with the Library has the freedom and the wherewithal to run that program using a modified version of the Library.\n\nThe precise terms and conditions for copying, distribution and modification follow. Pay close attention to the difference between a \"work based on the library\" and a \"work that uses the library\". The former contains code derived from the library, whereas the latter must be combined with the library in order to run.\n\nTERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n0. This License Agreement applies to any software library or other program which contains a notice placed by the copyright holder or other authorized party saying it may be distributed under the terms of this Lesser General Public License (also called \"this License\"). Each licensee is addressed as \"you\".\nA \"library\" means a collection of software functions and/or data prepared so as to be conveniently linked with application programs (which use some of those functions and data) to form executables.\n\nThe \"Library\", below, refers to any such software library or work which has been distributed under these terms. A \"work based on the Library\" means either the Library or any derivative work under copyright law: that is to say, a work containing the Library or a portion of it, either verbatim or with modifications and/or translated straightforwardly into another language. (Hereinafter, translation is included without limitation in the term \"modification\".)\n\n\"Source code\" for a work means the preferred form of the work for making modifications to it. For a library, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the library.\n\nActivities other than copying, distribution and modification are not covered by this License; they are outside its scope. The act of running a program using the Library is not restricted, and output from such a program is covered only if its contents constitute a work based on the Library (independent of the use of the Library in a tool for writing it). Whether that is true depends on what the Library does and what the program that uses the Library does.\n1. You may copy and distribute verbatim copies of the Library's complete source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and distribute a copy of this License along with the Library.\n\nYou may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee.\n\n2. You may modify your copy or copies of the Library or any portion of it, thus forming a work based on the Library, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions:\n\n*    a) The modified work must itself be a software library.\n*    b) You must cause the files modified to carry prominent notices stating that you changed the files and the date of any change.\n*    c) You must cause the whole of the work to be licensed at no charge to all third parties under the terms of this License.\n*    d) If a facility in the modified Library refers to a function or a table of data to be supplied by an application program that uses the facility, other than as an argument passed when the facility is invoked, then you must make a good faith effort to ensure that, in the event an application does not supply such function or table, the facility still operates, and performs whatever part of its purpose remains meaningful.\n\n(For example, a function in a library to compute square roots has a purpose that is entirely well-defined independent of the application. Therefore, Subsection 2d requires that any application-supplied function or table used by this function must be optional: if the application does not supply it, the square root function must still compute square roots.)\n\nThese requirements apply to the modified work as a whole. If identifiable sections of that work are not derived from the Library, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works. But when you distribute the same sections as part of a whole which is a work based on the Library, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Library.\n\nIn addition, mere aggregation of another work not based on the Library with the Library (or with a work based on the Library) on a volume of a storage or distribution medium does not bring the other work under the scope of this License.\n\n3. You may opt to apply the terms of the ordinary GNU General Public License instead of this License to a given copy of the Library. To do this, you must alter all the notices that refer to this License, so that they refer to the ordinary GNU General Public License, version 2, instead of to this License. (If a newer version than version 2 of the ordinary GNU General Public License has appeared, then you can specify that version instead if you wish.) Do not make any other change in these notices.\n\nOnce this change is made in a given copy, it is irreversible for that copy, so the ordinary GNU General Public License applies to all subsequent copies and derivative works made from that copy.\n\nThis option is useful when you wish to copy part of the code of the Library into a program that is not a library.\n\n4. You may copy and distribute the Library (or a portion or derivative of it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange.\n\nIf distribution of object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place satisfies the requirement to distribute the source code, even though third parties are not compelled to copy the source along with the object code.\n\n5. A program that contains no derivative of any portion of the Library, but is designed to work with the Library by being compiled or linked with it, is called a \"work that uses the Library\". Such a work, in isolation, is not a derivative work of the Library, and therefore falls outside the scope of this License.\n\nHowever, linking a \"work that uses the Library\" with the Library creates an executable that is a derivative of the Library (because it contains portions of the Library), rather than a \"work that uses the library\". The executable is therefore covered by this License. Section 6 states terms for distribution of such executables.\n\nWhen a \"work that uses the Library\" uses material from a header file that is part of the Library, the object code for the work may be a derivative work of the Library even though the source code is not. Whether this is true is especially significant if the work can be linked without the Library, or if the work is itself a library. The threshold for this to be true is not precisely defined by law.\n\nIf such an object file uses only numerical parameters, data structure layouts and accessors, and small macros and small inline functions (ten lines or less in length), then the use of the object file is unrestricted, regardless of whether it is legally a derivative work. (Executables containing this object code plus portions of the Library will still fall under Section 6.)\n\nOtherwise, if the work is a derivative of the Library, you may distribute the object code for the work under the terms of Section 6. Any executables containing that work also fall under Section 6, whether or not they are linked directly with the Library itself.\n\n6. As an exception to the Sections above, you may also combine or link a \"work that uses the Library\" with the Library to produce a work containing portions of the Library, and distribute that work under terms of your choice, provided that the terms permit modification of the work for the customer's own use and reverse engineering for debugging such modifications.\n\nYou must give prominent notice with each copy of the work that the Library is used in it and that the Library and its use are covered by this License. You must supply a copy of this License. If the work during execution displays copyright notices, you must include the copyright notice for the Library among them, as well as a reference directing the user to the copy of this License. Also, you must do one of these things:\n\n*    a) Accompany the work with the complete corresponding machine-readable source code for the Library including whatever changes were used in the work (which must be distributed under Sections 1 and 2 above); and, if the work is an executable linked with the Library, with the complete machine-readable \"work that uses the Library\", as object code and/or source code, so that the user can modify the Library and then relink to produce a modified executable containing the modified Library. (It is understood that the user who changes the contents of definitions files in the Library will not necessarily be able to recompile the application to use the modified definitions.)\n*    b) Use a suitable shared library mechanism for linking with the Library. A suitable mechanism is one that (1) uses at run time a copy of the library already present on the user's computer system, rather than copying library functions into the executable, and (2) will operate properly with a modified version of the library, if the user installs one, as long as the modified version is interface-compatible with the version that the work was made with.\n*    c) Accompany the work with a written offer, valid for at least three years, to give the same user the materials specified in Subsection 6a, above, for a charge no more than the cost of performing this distribution.\n*    d) If distribution of the work is made by offering access to copy from a designated place, offer equivalent access to copy the above specified materials from the same place.\n*    e) Verify that the user has already received a copy of these materials or that you have already sent this user a copy.\n\nFor an executable, the required form of the \"work that uses the Library\" must include any data and utility programs needed for reproducing the executable from it. However, as a special exception, the materials to be distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable.\n\nIt may happen that this requirement contradicts the license restrictions of other proprietary libraries that do not normally accompany the operating system. Such a contradiction means you cannot use both them and the Library together in an executable that you distribute.\n\n7. You may place library facilities that are a work based on the Library side-by-side in a single library together with other library facilities not covered by this License, and distribute such a combined library, provided that the separate distribution of the work based on the Library and of the other library facilities is otherwise permitted, and provided that you do these two things:\n\n*    a) Accompany the combined library with a copy of the same work based on the Library, uncombined with any other library facilities. This must be distributed under the terms of the Sections above.\n*    b) Give prominent notice with the combined library of the fact that part of it is a work based on the Library, and explaining where to find the accompanying uncombined form of the same work.\n\n8. You may not copy, modify, sublicense, link with, or distribute the Library except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense, link with, or distribute the Library is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance.\n\n9. You are not required to accept this License, since you have not signed it. However, nothing else grants you permission to modify or distribute the Library or its derivative works. These actions are prohibited by law if you do not accept this License. Therefore, by modifying or distributing the Library (or any work based on the Library), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Library or works based on it.\n\n10. Each time you redistribute the Library (or any work based on the Library), the recipient automatically receives a license from the original licensor to copy, distribute, link with or modify the Library subject to these terms and conditions. You may not impose any further restrictions on the recipients' exercise of the rights granted herein. You are not responsible for enforcing compliance by third parties with this License.\n\n11. If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Library at all. For example, if a patent license would not permit royalty-free redistribution of the Library by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Library.\n\nIf any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply, and the section as a whole is intended to apply in other circumstances.\n\nIt is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system which is implemented by public license practices. Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice.\n\nThis section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License.\n\n12. If the distribution and/or use of the Library is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Library under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded. In such case, this License incorporates the limitation as if written in the body of this License.\n\n13. The Free Software Foundation may publish revised and/or new versions of the Lesser General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.\n\nEach version is given a distinguishing version number. If the Library specifies a version number of this License which applies to it and \"any later version\", you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation. If the Library does not specify a license version number, you may choose any version ever published by the Free Software Foundation.\n\n14. If you wish to incorporate parts of the Library into other free programs whose distribution conditions are incompatible with these, write to the author to ask for permission. For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this. Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally.\n\nNO WARRANTY\n\n15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE LIBRARY \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE LIBRARY IS WITH YOU. SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n\nEND OF TERMS AND CONDITIONS\n\n\nHow to Apply These Terms to Your New Libraries\n\nIf you develop a new library, and you want it to be of the greatest possible use to the public, we recommend making it free software that everyone can redistribute and change. You can do so by permitting redistribution under these terms (or, alternatively, under the terms of the ordinary General Public License).\n\nTo apply these terms, attach the following notices to the library.  It is safest to attach them to the start of each source file to most effectively convey the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.\n\n<one line to give the library's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.\n\nThis library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\nAlso add information on how to contact you by electronic and paper mail.\n\nYou should also get your employer (if you work as a programmer) or your school, if any, to sign a \"copyright disclaimer\" for the library, if necessary.  Here is a sample; alter the names:\n\nYoyodyne, Inc., hereby disclaims all copyright interest in the library `Frob' (a library for tweaking knobs) written by James Random Hacker.\n\n<signature of Ty Coon>, 1 April 1990\nTy Coon, President of Vice\n\nThat's all there is to it!\n"
org.jfree.chart.JFreeChart.INFO.contributors has only one value
org.jfree.chart.JFreeChart.INFO.contributors != null
org.jfree.chart.JFreeChart.INFO.contributors[] contains no nulls and has only one value, of length 85
org.jfree.chart.JFreeChart.INFO.contributors[] elements != null
org.jfree.chart.JFreeChart.INFO.contributors[].getClass().getName() == [org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor]
org.jfree.chart.JFreeChart.INFO.contributors[].getClass().getName() elements == org.jfree.chart.ui.Contributor.class
org.jfree.chart.JFreeChart.INFO.contributors.getClass().getName() == java.util.Arrays$ArrayList.class
org.jfree.chart.JFreeChart.INFO.copyright has only one value
org.jfree.chart.JFreeChart.INFO.copyright != null
org.jfree.chart.JFreeChart.INFO.copyright.toString == "(C)opyright 2000-2007, by Object Refinery Limited and Contributors"
org.jfree.chart.JFreeChart.INFO.libraries has only one value
org.jfree.chart.JFreeChart.INFO.libraries != null
org.jfree.chart.JFreeChart.INFO.libraries[] == []
org.jfree.chart.JFreeChart.INFO.libraries[].getClass().getName() == []
org.jfree.chart.JFreeChart.INFO.libraries.getClass().getName() == java.util.ArrayList.class
org.jfree.chart.JFreeChart.INFO.optionalLibraries has only one value
org.jfree.chart.JFreeChart.INFO.optionalLibraries != null
org.jfree.chart.JFreeChart.INFO.optionalLibraries[] == []
org.jfree.chart.JFreeChart.INFO.optionalLibraries[].getClass().getName() == []
org.jfree.chart.JFreeChart.INFO.optionalLibraries.getClass().getName() == java.util.ArrayList.class
org.jfree.chart.JFreeChart.INFO.name has only one value
org.jfree.chart.JFreeChart.INFO.name != null
org.jfree.chart.JFreeChart.INFO.name.toString == "JFreeChart"
org.jfree.chart.JFreeChart.INFO.version has only one value
org.jfree.chart.JFreeChart.INFO.version != null
org.jfree.chart.JFreeChart.INFO.version.toString == "1.2.0-pre"
org.jfree.chart.JFreeChart.INFO.licenceName has only one value
org.jfree.chart.JFreeChart.INFO.licenceName != null
org.jfree.chart.JFreeChart.INFO.licenceName.toString == "LGPL"
org.jfree.chart.JFreeChart.INFO.info has only one value
org.jfree.chart.JFreeChart.INFO.info != null
org.jfree.chart.JFreeChart.INFO.info.toString == "http://www.jfree.org/jfreechart/index.html"
org.jfree.chart.JFreeChart.DEFAULT_TITLE_FONT has only one value
org.jfree.chart.JFreeChart.DEFAULT_TITLE_FONT != null
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT has only one value
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT != null
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName() == java.awt.Color.class
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_IMAGE == null
org.jfree.chart.util.RectangleInsets.ZERO_INSETS has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS != null
org.jfree.chart.title.TextTitle.DEFAULT_FONT has only one value
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT has only one value
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT.getClass().getName() == java.awt.Color.class
org.jfree.chart.title.Title.DEFAULT_POSITION has only one value
org.jfree.chart.title.Title.DEFAULT_POSITION != null
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT has only one value
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT != null
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT has only one value
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT != null
org.jfree.chart.title.Title.DEFAULT_PADDING has only one value
org.jfree.chart.title.Title.DEFAULT_PADDING != null
org.jfree.chart.plot.Plot.ZERO has only one value
org.jfree.chart.plot.Plot.ZERO != null
org.jfree.chart.plot.Plot.ZERO.getClass().getName() == java.lang.Integer.class
org.jfree.chart.plot.Plot.DEFAULT_INSETS has only one value
org.jfree.chart.plot.Plot.DEFAULT_INSETS != null
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE has only one value
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE != null
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName() == java.awt.BasicStroke.class
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT has only one value
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT != null
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName() == java.awt.Color.class
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT has only one value
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT != null
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName() == java.awt.Color.class
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX has only one value
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX != null
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName() == java.awt.geom.Rectangle2D$Double.class
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE has only one value
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE != null
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == java.awt.geom.Ellipse2D$Double.class
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartChangeListener == null
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartProgressListener == null
type has only one value
type != null
org.jfree.chart.event.ChartChangeEventType.GENERAL has only one value
org.jfree.chart.event.ChartChangeEventType.GENERAL != null
org.jfree.chart.event.ChartChangeEventType.NEW_DATASET has only one value
org.jfree.chart.event.ChartChangeEventType.NEW_DATASET != null
org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED has only one value
org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED != null
org.jfree.chart.event.ChartChangeEventType.GENERAL.name has only one value
org.jfree.chart.event.ChartChangeEventType.GENERAL.name != null
org.jfree.chart.event.ChartChangeEventType.GENERAL.name.toString == "ChartChangeEventType.GENERAL"
org.jfree.chart.event.ChartChangeEventType.NEW_DATASET.name has only one value
org.jfree.chart.event.ChartChangeEventType.NEW_DATASET.name != null
org.jfree.chart.event.ChartChangeEventType.NEW_DATASET.name.toString == "ChartChangeEventType.NEW_DATASET"
org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED.name has only one value
org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED.name != null
org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED.name.toString == "ChartChangeEventType.DATASET_UPDATED"
type.name has only one value
type.name != null
type.name.toString == "ChartChangeEventType.GENERAL"
size(org.jfree.chart.JFreeChart.INFO.contributors[]) == 85
===========================================================================
org.jfree.chart.event.ChartChangeEvent.ChartChangeEvent(java.lang.Object, org.jfree.chart.JFreeChart, org.jfree.chart.event.ChartChangeEventType):::EXIT
org.jfree.chart.event.ChartChangeEventType.GENERAL == orig(org.jfree.chart.event.ChartChangeEventType.GENERAL)
org.jfree.chart.event.ChartChangeEventType.NEW_DATASET == orig(org.jfree.chart.event.ChartChangeEventType.NEW_DATASET)
org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED == orig(org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED)
org.jfree.chart.event.ChartChangeEventType.GENERAL.name == orig(org.jfree.chart.event.ChartChangeEventType.GENERAL.name)
org.jfree.chart.event.ChartChangeEventType.GENERAL.name.toString == orig(org.jfree.chart.event.ChartChangeEventType.GENERAL.name.toString)
org.jfree.chart.event.ChartChangeEventType.NEW_DATASET.name == orig(org.jfree.chart.event.ChartChangeEventType.NEW_DATASET.name)
org.jfree.chart.event.ChartChangeEventType.NEW_DATASET.name.toString == orig(org.jfree.chart.event.ChartChangeEventType.NEW_DATASET.name.toString)
org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED.name == orig(org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED.name)
org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED.name.toString == orig(org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED.name.toString)
org.jfree.chart.JFreeChart.INFO == orig(org.jfree.chart.JFreeChart.INFO)
org.jfree.chart.JFreeChart.INFO.logo == orig(org.jfree.chart.JFreeChart.INFO.logo)
org.jfree.chart.JFreeChart.INFO.licenceText == orig(org.jfree.chart.JFreeChart.INFO.licenceText)
org.jfree.chart.JFreeChart.INFO.licenceText.toString == orig(org.jfree.chart.JFreeChart.INFO.licenceText.toString)
org.jfree.chart.JFreeChart.INFO.contributors == orig(org.jfree.chart.JFreeChart.INFO.contributors)
org.jfree.chart.JFreeChart.INFO.contributors[] == orig(org.jfree.chart.JFreeChart.INFO.contributors[])
org.jfree.chart.JFreeChart.INFO.contributors.getClass().getName() == orig(org.jfree.chart.JFreeChart.INFO.contributors.getClass().getName())
org.jfree.chart.JFreeChart.INFO.copyright == orig(org.jfree.chart.JFreeChart.INFO.copyright)
org.jfree.chart.JFreeChart.INFO.copyright.toString == orig(org.jfree.chart.JFreeChart.INFO.copyright.toString)
org.jfree.chart.JFreeChart.INFO.libraries == orig(org.jfree.chart.JFreeChart.INFO.libraries)
org.jfree.chart.JFreeChart.INFO.libraries[] == orig(org.jfree.chart.JFreeChart.INFO.libraries[])
org.jfree.chart.JFreeChart.INFO.libraries.getClass().getName() == orig(org.jfree.chart.JFreeChart.INFO.libraries.getClass().getName())
org.jfree.chart.JFreeChart.INFO.optionalLibraries == orig(org.jfree.chart.JFreeChart.INFO.optionalLibraries)
org.jfree.chart.JFreeChart.INFO.optionalLibraries[] == orig(org.jfree.chart.JFreeChart.INFO.optionalLibraries[])
org.jfree.chart.JFreeChart.INFO.optionalLibraries.getClass().getName() == orig(org.jfree.chart.JFreeChart.INFO.optionalLibraries.getClass().getName())
org.jfree.chart.JFreeChart.INFO.name == orig(org.jfree.chart.JFreeChart.INFO.name)
org.jfree.chart.JFreeChart.INFO.name.toString == orig(org.jfree.chart.JFreeChart.INFO.name.toString)
org.jfree.chart.JFreeChart.INFO.version == orig(org.jfree.chart.JFreeChart.INFO.version)
org.jfree.chart.JFreeChart.INFO.version.toString == orig(org.jfree.chart.JFreeChart.INFO.version.toString)
org.jfree.chart.JFreeChart.INFO.licenceName == orig(org.jfree.chart.JFreeChart.INFO.licenceName)
org.jfree.chart.JFreeChart.INFO.licenceName.toString == orig(org.jfree.chart.JFreeChart.INFO.licenceName.toString)
org.jfree.chart.JFreeChart.INFO.info == orig(org.jfree.chart.JFreeChart.INFO.info)
org.jfree.chart.JFreeChart.INFO.info.toString == orig(org.jfree.chart.JFreeChart.INFO.info.toString)
org.jfree.chart.JFreeChart.DEFAULT_TITLE_FONT == orig(org.jfree.chart.JFreeChart.DEFAULT_TITLE_FONT)
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT == orig(org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT)
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName() == orig(org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_IMAGE == orig(org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_IMAGE)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.title.TextTitle.DEFAULT_FONT == orig(org.jfree.chart.title.TextTitle.DEFAULT_FONT)
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT == orig(org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT)
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT.getClass().getName() == orig(org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT.getClass().getName())
org.jfree.chart.title.Title.DEFAULT_POSITION == orig(org.jfree.chart.title.Title.DEFAULT_POSITION)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT)
org.jfree.chart.title.Title.DEFAULT_PADDING == orig(org.jfree.chart.title.Title.DEFAULT_PADDING)
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener == orig(org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener)
org.jfree.chart.plot.Plot.ZERO == orig(org.jfree.chart.plot.Plot.ZERO)
org.jfree.chart.plot.Plot.ZERO.getClass().getName() == orig(org.jfree.chart.plot.Plot.ZERO.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_INSETS == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName())
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener == orig(org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener)
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartChangeListener == orig(org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartChangeListener)
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartProgressListener == orig(org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartProgressListener)
type.name == orig(type.name)
type.name.toString == orig(type.name.toString)
this.chart == null
type.name has only one value
type.name != null
type.name.toString == "ChartChangeEventType.GENERAL"
===========================================================================
org.jfree.chart.event.ChartChangeEvent.setChart(org.jfree.chart.JFreeChart):::ENTER
this has only one value
this.chart == null
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener has only one value
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener has only one value
chart has only one value
chart.renderingHints has only one value
chart.borderVisible == false
chart.borderStroke has only one value
chart.borderStroke.getClass().getName() == java.awt.BasicStroke.class
chart.borderPaint has only one value
chart.borderPaint.getClass().getName() == java.awt.Color.class
chart.padding has only one value
chart.padding.unitType has only one value
chart.padding.top == 0.0
chart.padding.left == 0.0
chart.padding.bottom == 0.0
chart.padding.right == 0.0
chart.title has only one value
chart.title.text has only one value
chart.title.text.toString == "Test"
chart.title.font has only one value
chart.title.textAlignment has only one value
chart.title.paint has only one value
chart.title.paint.getClass().getName() == java.awt.Color.class
chart.title.backgroundPaint == null
chart.title.toolTipText == null
chart.title.urlText == null
chart.title.content == null
chart.title.expandToFitSpace == false
chart.title.position has only one value
chart.title.horizontalAlignment has only one value
chart.title.verticalAlignment has only one value
chart.title.listenerList has only one value
chart.title.notify == true
chart.title.id == null
chart.title.margin has only one value
chart.title.frame has only one value
chart.title.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class
chart.title.padding has only one value
chart.title.width == 0.0
chart.title.height == 0.0
chart.title.bounds has only one value
chart.title.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
chart.subtitles has only one value
chart.subtitles[] contains no nulls and has only one value, of length 1
chart.subtitles[] elements has only one value
chart.subtitles[].getClass().getName() == [org.jfree.chart.title.LegendTitle]
chart.subtitles[].getClass().getName() elements == org.jfree.chart.title.LegendTitle.class
chart.subtitles.getClass().getName() == java.util.ArrayList.class
chart.plot has only one value
chart.plot.getClass().getName() == org.jfree.chart.plot.PiePlot.class
chart.plot.parent == null
chart.plot.datasetGroup == null
chart.plot.noDataMessage == null
chart.plot.noDataMessageFont has only one value
chart.plot.noDataMessagePaint has only one value
chart.plot.noDataMessagePaint.getClass().getName() == java.awt.Color.class
chart.plot.insets has only one value
chart.plot.outlineVisible == true
chart.plot.outlineStroke has only one value
chart.plot.outlineStroke.getClass().getName() == java.awt.BasicStroke.class
chart.plot.outlinePaint has only one value
chart.plot.outlinePaint.getClass().getName() == java.awt.Color.class
chart.plot.backgroundPaint has only one value
chart.plot.backgroundPaint.getClass().getName() == java.awt.Color.class
chart.plot.backgroundImage == null
chart.plot.backgroundImageAlignment == 15
chart.plot.backgroundImageAlpha == 0.5
chart.plot.foregroundAlpha == 1.0
chart.plot.backgroundAlpha == 1.0
chart.plot.drawingSupplier has only one value
chart.plot.drawingSupplier.getClass().getName() == org.jfree.chart.plot.DefaultDrawingSupplier.class
chart.plot.listenerList has only one value
chart.backgroundPaint has only one value
chart.backgroundPaint.getClass().getName() == java.awt.Color.class
chart.backgroundImage == null
chart.backgroundImageAlignment == 15
chart.backgroundImageAlpha == 0.5
chart.changeListeners has only one value
chart.progressListeners has only one value
chart.notify == true
size(chart.subtitles[]) == 1
===========================================================================
org.jfree.chart.event.ChartChangeEvent.setChart(org.jfree.chart.JFreeChart):::EXIT
this.type == orig(this.type)
org.jfree.chart.event.ChartChangeEventType.GENERAL == orig(org.jfree.chart.event.ChartChangeEventType.GENERAL)
org.jfree.chart.event.ChartChangeEventType.NEW_DATASET == orig(org.jfree.chart.event.ChartChangeEventType.NEW_DATASET)
org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED == orig(org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED)
org.jfree.chart.event.ChartChangeEventType.GENERAL.name == orig(org.jfree.chart.event.ChartChangeEventType.GENERAL.name)
org.jfree.chart.event.ChartChangeEventType.GENERAL.name.toString == orig(org.jfree.chart.event.ChartChangeEventType.GENERAL.name.toString)
org.jfree.chart.event.ChartChangeEventType.NEW_DATASET.name == orig(org.jfree.chart.event.ChartChangeEventType.NEW_DATASET.name)
org.jfree.chart.event.ChartChangeEventType.NEW_DATASET.name.toString == orig(org.jfree.chart.event.ChartChangeEventType.NEW_DATASET.name.toString)
org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED.name == orig(org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED.name)
org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED.name.toString == orig(org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED.name.toString)
this.type.name == orig(this.type.name)
this.type.name.toString == orig(this.type.name.toString)
org.jfree.chart.JFreeChart.INFO == orig(org.jfree.chart.JFreeChart.INFO)
org.jfree.chart.JFreeChart.INFO.logo == orig(org.jfree.chart.JFreeChart.INFO.logo)
org.jfree.chart.JFreeChart.INFO.licenceText == orig(org.jfree.chart.JFreeChart.INFO.licenceText)
org.jfree.chart.JFreeChart.INFO.licenceText.toString == orig(org.jfree.chart.JFreeChart.INFO.licenceText.toString)
org.jfree.chart.JFreeChart.INFO.contributors == orig(org.jfree.chart.JFreeChart.INFO.contributors)
org.jfree.chart.JFreeChart.INFO.contributors[] == orig(org.jfree.chart.JFreeChart.INFO.contributors[])
org.jfree.chart.JFreeChart.INFO.contributors.getClass().getName() == orig(org.jfree.chart.JFreeChart.INFO.contributors.getClass().getName())
org.jfree.chart.JFreeChart.INFO.copyright == orig(org.jfree.chart.JFreeChart.INFO.copyright)
org.jfree.chart.JFreeChart.INFO.copyright.toString == orig(org.jfree.chart.JFreeChart.INFO.copyright.toString)
org.jfree.chart.JFreeChart.INFO.libraries == orig(org.jfree.chart.JFreeChart.INFO.libraries)
org.jfree.chart.JFreeChart.INFO.libraries[] == orig(org.jfree.chart.JFreeChart.INFO.libraries[])
org.jfree.chart.JFreeChart.INFO.libraries.getClass().getName() == orig(org.jfree.chart.JFreeChart.INFO.libraries.getClass().getName())
org.jfree.chart.JFreeChart.INFO.optionalLibraries == orig(org.jfree.chart.JFreeChart.INFO.optionalLibraries)
org.jfree.chart.JFreeChart.INFO.optionalLibraries[] == orig(org.jfree.chart.JFreeChart.INFO.optionalLibraries[])
org.jfree.chart.JFreeChart.INFO.optionalLibraries.getClass().getName() == orig(org.jfree.chart.JFreeChart.INFO.optionalLibraries.getClass().getName())
org.jfree.chart.JFreeChart.INFO.name == orig(org.jfree.chart.JFreeChart.INFO.name)
org.jfree.chart.JFreeChart.INFO.name.toString == orig(org.jfree.chart.JFreeChart.INFO.name.toString)
org.jfree.chart.JFreeChart.INFO.version == orig(org.jfree.chart.JFreeChart.INFO.version)
org.jfree.chart.JFreeChart.INFO.version.toString == orig(org.jfree.chart.JFreeChart.INFO.version.toString)
org.jfree.chart.JFreeChart.INFO.licenceName == orig(org.jfree.chart.JFreeChart.INFO.licenceName)
org.jfree.chart.JFreeChart.INFO.licenceName.toString == orig(org.jfree.chart.JFreeChart.INFO.licenceName.toString)
org.jfree.chart.JFreeChart.INFO.info == orig(org.jfree.chart.JFreeChart.INFO.info)
org.jfree.chart.JFreeChart.INFO.info.toString == orig(org.jfree.chart.JFreeChart.INFO.info.toString)
org.jfree.chart.JFreeChart.DEFAULT_TITLE_FONT == orig(org.jfree.chart.JFreeChart.DEFAULT_TITLE_FONT)
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT == orig(org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT)
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName() == orig(org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_IMAGE == orig(org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_IMAGE)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.title.TextTitle.DEFAULT_FONT == orig(org.jfree.chart.title.TextTitle.DEFAULT_FONT)
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT == orig(org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT)
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT.getClass().getName() == orig(org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT.getClass().getName())
org.jfree.chart.title.Title.DEFAULT_POSITION == orig(org.jfree.chart.title.Title.DEFAULT_POSITION)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT)
org.jfree.chart.title.Title.DEFAULT_PADDING == orig(org.jfree.chart.title.Title.DEFAULT_PADDING)
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener == orig(org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener)
org.jfree.chart.plot.Plot.ZERO == orig(org.jfree.chart.plot.Plot.ZERO)
org.jfree.chart.plot.Plot.ZERO.getClass().getName() == orig(org.jfree.chart.plot.Plot.ZERO.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_INSETS == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName())
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener == orig(org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener)
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartChangeListener == orig(org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartChangeListener)
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartProgressListener == orig(org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartProgressListener)
chart.renderingHints == orig(chart.renderingHints)
chart.borderVisible == orig(chart.borderVisible)
chart.borderStroke == orig(chart.borderStroke)
chart.borderStroke.getClass().getName() == orig(chart.borderStroke.getClass().getName())
chart.borderPaint == orig(chart.borderPaint)
chart.borderPaint.getClass().getName() == orig(chart.borderPaint.getClass().getName())
chart.padding == orig(chart.padding)
chart.padding.unitType == orig(chart.padding.unitType)
chart.padding.top == orig(chart.padding.top)
chart.padding.left == orig(chart.padding.left)
chart.padding.bottom == orig(chart.padding.bottom)
chart.padding.right == orig(chart.padding.right)
chart.title == orig(chart.title)
chart.title.text == orig(chart.title.text)
chart.title.text.toString == orig(chart.title.text.toString)
chart.title.font == orig(chart.title.font)
chart.title.textAlignment == orig(chart.title.textAlignment)
chart.title.paint == orig(chart.title.paint)
chart.title.paint.getClass().getName() == orig(chart.title.paint.getClass().getName())
chart.title.backgroundPaint == orig(chart.title.backgroundPaint)
chart.title.toolTipText == orig(chart.title.toolTipText)
chart.title.urlText == orig(chart.title.urlText)
chart.title.content == orig(chart.title.content)
chart.title.expandToFitSpace == orig(chart.title.expandToFitSpace)
chart.title.position == orig(chart.title.position)
chart.title.horizontalAlignment == orig(chart.title.horizontalAlignment)
chart.title.verticalAlignment == orig(chart.title.verticalAlignment)
chart.title.listenerList == orig(chart.title.listenerList)
chart.title.notify == orig(chart.title.notify)
chart.title.id == orig(chart.title.id)
chart.title.margin == orig(chart.title.margin)
chart.title.frame == orig(chart.title.frame)
chart.title.frame.getClass().getName() == orig(chart.title.frame.getClass().getName())
chart.title.padding == orig(chart.title.padding)
chart.title.width == orig(chart.title.width)
chart.title.height == orig(chart.title.height)
chart.title.bounds == orig(chart.title.bounds)
chart.title.bounds.getClass().getName() == orig(chart.title.bounds.getClass().getName())
chart.subtitles == orig(chart.subtitles)
chart.subtitles[] == orig(chart.subtitles[])
chart.subtitles.getClass().getName() == orig(chart.subtitles.getClass().getName())
chart.plot == orig(chart.plot)
chart.plot.getClass().getName() == orig(chart.plot.getClass().getName())
chart.plot.parent == orig(chart.plot.parent)
chart.plot.datasetGroup == orig(chart.plot.datasetGroup)
chart.plot.noDataMessage == orig(chart.plot.noDataMessage)
chart.plot.noDataMessageFont == orig(chart.plot.noDataMessageFont)
chart.plot.noDataMessagePaint == orig(chart.plot.noDataMessagePaint)
chart.plot.noDataMessagePaint.getClass().getName() == orig(chart.plot.noDataMessagePaint.getClass().getName())
chart.plot.insets == orig(chart.plot.insets)
chart.plot.outlineVisible == orig(chart.plot.outlineVisible)
chart.plot.outlineStroke == orig(chart.plot.outlineStroke)
chart.plot.outlineStroke.getClass().getName() == orig(chart.plot.outlineStroke.getClass().getName())
chart.plot.outlinePaint == orig(chart.plot.outlinePaint)
chart.plot.outlinePaint.getClass().getName() == orig(chart.plot.outlinePaint.getClass().getName())
chart.plot.backgroundPaint == orig(chart.plot.backgroundPaint)
chart.plot.backgroundPaint.getClass().getName() == orig(chart.plot.backgroundPaint.getClass().getName())
chart.plot.backgroundImage == orig(chart.plot.backgroundImage)
chart.plot.backgroundImageAlignment == orig(chart.plot.backgroundImageAlignment)
chart.plot.backgroundImageAlpha == orig(chart.plot.backgroundImageAlpha)
chart.plot.foregroundAlpha == orig(chart.plot.foregroundAlpha)
chart.plot.backgroundAlpha == orig(chart.plot.backgroundAlpha)
chart.plot.drawingSupplier == orig(chart.plot.drawingSupplier)
chart.plot.drawingSupplier.getClass().getName() == orig(chart.plot.drawingSupplier.getClass().getName())
chart.plot.listenerList == orig(chart.plot.listenerList)
chart.backgroundPaint == orig(chart.backgroundPaint)
chart.backgroundPaint.getClass().getName() == orig(chart.backgroundPaint.getClass().getName())
chart.backgroundImage == orig(chart.backgroundImage)
chart.backgroundImageAlignment == orig(chart.backgroundImageAlignment)
chart.backgroundImageAlpha == orig(chart.backgroundImageAlpha)
chart.changeListeners == orig(chart.changeListeners)
chart.progressListeners == orig(chart.progressListeners)
chart.notify == orig(chart.notify)
this.chart has only one value
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener has only one value
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener has only one value
chart.renderingHints has only one value
chart.borderVisible == false
chart.borderStroke has only one value
chart.borderStroke.getClass().getName() == java.awt.BasicStroke.class
chart.borderPaint has only one value
chart.borderPaint.getClass().getName() == java.awt.Color.class
chart.padding has only one value
chart.padding.unitType has only one value
chart.padding.top == 0.0
chart.padding.left == 0.0
chart.padding.bottom == 0.0
chart.padding.right == 0.0
chart.title has only one value
chart.title.text has only one value
chart.title.text.toString == "Test"
chart.title.font has only one value
chart.title.textAlignment has only one value
chart.title.paint has only one value
chart.title.paint.getClass().getName() == java.awt.Color.class
chart.title.backgroundPaint == null
chart.title.toolTipText == null
chart.title.urlText == null
chart.title.content == null
chart.title.expandToFitSpace == false
chart.title.position has only one value
chart.title.horizontalAlignment has only one value
chart.title.verticalAlignment has only one value
chart.title.listenerList has only one value
chart.title.notify == true
chart.title.id == null
chart.title.margin has only one value
chart.title.frame has only one value
chart.title.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class
chart.title.padding has only one value
chart.title.width == 0.0
chart.title.height == 0.0
chart.title.bounds has only one value
chart.title.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
chart.subtitles has only one value
chart.subtitles[] contains no nulls and has only one value, of length 1
chart.subtitles[] elements has only one value
chart.subtitles[].getClass().getName() == [org.jfree.chart.title.LegendTitle]
chart.subtitles[].getClass().getName() elements == org.jfree.chart.title.LegendTitle.class
chart.subtitles.getClass().getName() == java.util.ArrayList.class
chart.plot has only one value
chart.plot.getClass().getName() == org.jfree.chart.plot.PiePlot.class
chart.plot.parent == null
chart.plot.datasetGroup == null
chart.plot.noDataMessage == null
chart.plot.noDataMessageFont has only one value
chart.plot.noDataMessagePaint has only one value
chart.plot.noDataMessagePaint.getClass().getName() == java.awt.Color.class
chart.plot.insets has only one value
chart.plot.outlineVisible == true
chart.plot.outlineStroke has only one value
chart.plot.outlineStroke.getClass().getName() == java.awt.BasicStroke.class
chart.plot.outlinePaint has only one value
chart.plot.outlinePaint.getClass().getName() == java.awt.Color.class
chart.plot.backgroundPaint has only one value
chart.plot.backgroundPaint.getClass().getName() == java.awt.Color.class
chart.plot.backgroundImage == null
chart.plot.backgroundImageAlignment == 15
chart.plot.backgroundImageAlpha == 0.5
chart.plot.foregroundAlpha == 1.0
chart.plot.backgroundAlpha == 1.0
chart.plot.drawingSupplier has only one value
chart.plot.drawingSupplier.getClass().getName() == org.jfree.chart.plot.DefaultDrawingSupplier.class
chart.plot.listenerList has only one value
chart.backgroundPaint has only one value
chart.backgroundPaint.getClass().getName() == java.awt.Color.class
chart.backgroundImage == null
chart.backgroundImageAlignment == 15
chart.backgroundImageAlpha == 0.5
chart.changeListeners has only one value
chart.progressListeners has only one value
chart.notify == true
size(chart.subtitles[]) == 1
===========================================================================
org.jfree.chart.event.ChartChangeEventType:::CLASS
===========================================================================
org.jfree.chart.event.ChartChangeEventType:::OBJECT
this.name.toString one of { "ChartChangeEventType.DATASET_UPDATED", "ChartChangeEventType.GENERAL", "ChartChangeEventType.NEW_DATASET" }
===========================================================================
org.jfree.chart.event.ChartChangeEventType.ChartChangeEventType(java.lang.String):::ENTER
name.toString one of { "ChartChangeEventType.DATASET_UPDATED", "ChartChangeEventType.GENERAL", "ChartChangeEventType.NEW_DATASET" }
===========================================================================
org.jfree.chart.event.ChartChangeEventType.ChartChangeEventType(java.lang.String):::EXIT
name.toString == orig(name.toString)
name.toString one of { "ChartChangeEventType.DATASET_UPDATED", "ChartChangeEventType.GENERAL", "ChartChangeEventType.NEW_DATASET" }
===========================================================================
org.jfree.chart.event.ChartProgressEvent:::CLASS
===========================================================================
org.jfree.chart.event.ChartProgressEvent:::OBJECT
this.type one of { 1, 2 }
this.percent == 0
org.jfree.chart.JFreeChart.INFO has only one value
org.jfree.chart.JFreeChart.INFO.logo == null
org.jfree.chart.JFreeChart.INFO.licenceText has only one value
org.jfree.chart.JFreeChart.INFO.licenceText.toString == "GNU LESSER GENERAL PUBLIC LICENSE\n\nVersion 2.1, February 1999\n\nCopyright (C) 1991, 1999 Free Software Foundation, Inc.\n59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\nEveryone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.\n\n[This is the first released version of the Lesser GPL.  It also counts as the successor of the GNU Library Public License, version 2, hence the version number 2.1.]\n\nPreamble\n\nThe licenses for most software are designed to take away your freedom to share and change it. By contrast, the GNU General Public Licenses are intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users.\n\nThis license, the Lesser General Public License, applies to some specially designated software packages--typically libraries--of the Free Software Foundation and other authors who decide to use it. You can use it too, but we suggest you first think carefully about whether this license or the ordinary General Public License is the better strategy to use in any particular case, based on the explanations below.\n\nWhen we speak of free software, we are referring to freedom of use, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish); that you receive source code or can get it if you want it; that you can change the software and use pieces of it in new free programs; and that you are informed that you can do these things.\n\nTo protect your rights, we need to make restrictions that forbid distributors to deny you these rights or to ask you to surrender these rights. These restrictions translate to certain responsibilities for you if you distribute copies of the library or if you modify it.\n\nFor example, if you distribute copies of the library, whether gratis or for a fee, you must give the recipients all the rights that we gave you. You must make sure that they, too, receive or can get the source code. If you link other code with the library, you must provide complete object files to the recipients, so that they can relink them with the library after making changes to the library and recompiling it. And you must show them these terms so they know their rights.\n\nWe protect your rights with a two-step method: (1) we copyright the library, and (2) we offer you this license, which gives you legal permission to copy, distribute and/or modify the library.\n\nTo protect each distributor, we want to make it very clear that there is no warranty for the free library. Also, if the library is modified by someone else and passed on, the recipients should know that what they have is not the original version, so that the original author's reputation will not be affected by problems that might be introduced by others.\n\nFinally, software patents pose a constant threat to the existence of any free program. We wish to make sure that a company cannot effectively restrict the users of a free program by obtaining a restrictive license from a patent holder. Therefore, we insist that any patent license obtained for a version of the library must be consistent with the full freedom of use specified in this license.\n\nMost GNU software, including some libraries, is covered by the ordinary GNU General Public License. This license, the GNU Lesser General Public License, applies to certain designated libraries, and is quite different from the ordinary General Public License. We use this license for certain libraries in order to permit linking those libraries into non-free programs.\n\nWhen a program is linked with a library, whether statically or using a shared library, the combination of the two is legally speaking a combined work, a derivative of the original library. The ordinary General Public License therefore permits such linking only if the entire combination fits its criteria of freedom. The Lesser General Public License permits more lax criteria for linking other code with the library.\n\nWe call this license the \"Lesser\" General Public License because it does Less to protect the user's freedom than the ordinary General Public License. It also provides other free software developers Less of an advantage over competing non-free programs. These disadvantages are the reason we use the ordinary General Public License for many libraries. However, the Lesser license provides advantages in certain special circumstances.\n\nFor example, on rare occasions, there may be a special need to encourage the widest possible use of a certain library, so that it becomes a de-facto standard. To achieve this, non-free programs must be allowed to use the library. A more frequent case is that a free library does the same job as widely used non-free libraries. In this case, there is little to gain by limiting the free library to free software only, so we use the Lesser General Public License.\n\nIn other cases, permission to use a particular library in non-free programs enables a greater number of people to use a large body of free software. For example, permission to use the GNU C Library in non-free programs enables many more people to use the whole GNU operating system, as well as its variant, the GNU/Linux operating system.\n\nAlthough the Lesser General Public License is Less protective of the users' freedom, it does ensure that the user of a program that is linked with the Library has the freedom and the wherewithal to run that program using a modified version of the Library.\n\nThe precise terms and conditions for copying, distribution and modification follow. Pay close attention to the difference between a \"work based on the library\" and a \"work that uses the library\". The former contains code derived from the library, whereas the latter must be combined with the library in order to run.\n\nTERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n0. This License Agreement applies to any software library or other program which contains a notice placed by the copyright holder or other authorized party saying it may be distributed under the terms of this Lesser General Public License (also called \"this License\"). Each licensee is addressed as \"you\".\nA \"library\" means a collection of software functions and/or data prepared so as to be conveniently linked with application programs (which use some of those functions and data) to form executables.\n\nThe \"Library\", below, refers to any such software library or work which has been distributed under these terms. A \"work based on the Library\" means either the Library or any derivative work under copyright law: that is to say, a work containing the Library or a portion of it, either verbatim or with modifications and/or translated straightforwardly into another language. (Hereinafter, translation is included without limitation in the term \"modification\".)\n\n\"Source code\" for a work means the preferred form of the work for making modifications to it. For a library, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the library.\n\nActivities other than copying, distribution and modification are not covered by this License; they are outside its scope. The act of running a program using the Library is not restricted, and output from such a program is covered only if its contents constitute a work based on the Library (independent of the use of the Library in a tool for writing it). Whether that is true depends on what the Library does and what the program that uses the Library does.\n1. You may copy and distribute verbatim copies of the Library's complete source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and distribute a copy of this License along with the Library.\n\nYou may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee.\n\n2. You may modify your copy or copies of the Library or any portion of it, thus forming a work based on the Library, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions:\n\n*    a) The modified work must itself be a software library.\n*    b) You must cause the files modified to carry prominent notices stating that you changed the files and the date of any change.\n*    c) You must cause the whole of the work to be licensed at no charge to all third parties under the terms of this License.\n*    d) If a facility in the modified Library refers to a function or a table of data to be supplied by an application program that uses the facility, other than as an argument passed when the facility is invoked, then you must make a good faith effort to ensure that, in the event an application does not supply such function or table, the facility still operates, and performs whatever part of its purpose remains meaningful.\n\n(For example, a function in a library to compute square roots has a purpose that is entirely well-defined independent of the application. Therefore, Subsection 2d requires that any application-supplied function or table used by this function must be optional: if the application does not supply it, the square root function must still compute square roots.)\n\nThese requirements apply to the modified work as a whole. If identifiable sections of that work are not derived from the Library, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works. But when you distribute the same sections as part of a whole which is a work based on the Library, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Library.\n\nIn addition, mere aggregation of another work not based on the Library with the Library (or with a work based on the Library) on a volume of a storage or distribution medium does not bring the other work under the scope of this License.\n\n3. You may opt to apply the terms of the ordinary GNU General Public License instead of this License to a given copy of the Library. To do this, you must alter all the notices that refer to this License, so that they refer to the ordinary GNU General Public License, version 2, instead of to this License. (If a newer version than version 2 of the ordinary GNU General Public License has appeared, then you can specify that version instead if you wish.) Do not make any other change in these notices.\n\nOnce this change is made in a given copy, it is irreversible for that copy, so the ordinary GNU General Public License applies to all subsequent copies and derivative works made from that copy.\n\nThis option is useful when you wish to copy part of the code of the Library into a program that is not a library.\n\n4. You may copy and distribute the Library (or a portion or derivative of it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange.\n\nIf distribution of object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place satisfies the requirement to distribute the source code, even though third parties are not compelled to copy the source along with the object code.\n\n5. A program that contains no derivative of any portion of the Library, but is designed to work with the Library by being compiled or linked with it, is called a \"work that uses the Library\". Such a work, in isolation, is not a derivative work of the Library, and therefore falls outside the scope of this License.\n\nHowever, linking a \"work that uses the Library\" with the Library creates an executable that is a derivative of the Library (because it contains portions of the Library), rather than a \"work that uses the library\". The executable is therefore covered by this License. Section 6 states terms for distribution of such executables.\n\nWhen a \"work that uses the Library\" uses material from a header file that is part of the Library, the object code for the work may be a derivative work of the Library even though the source code is not. Whether this is true is especially significant if the work can be linked without the Library, or if the work is itself a library. The threshold for this to be true is not precisely defined by law.\n\nIf such an object file uses only numerical parameters, data structure layouts and accessors, and small macros and small inline functions (ten lines or less in length), then the use of the object file is unrestricted, regardless of whether it is legally a derivative work. (Executables containing this object code plus portions of the Library will still fall under Section 6.)\n\nOtherwise, if the work is a derivative of the Library, you may distribute the object code for the work under the terms of Section 6. Any executables containing that work also fall under Section 6, whether or not they are linked directly with the Library itself.\n\n6. As an exception to the Sections above, you may also combine or link a \"work that uses the Library\" with the Library to produce a work containing portions of the Library, and distribute that work under terms of your choice, provided that the terms permit modification of the work for the customer's own use and reverse engineering for debugging such modifications.\n\nYou must give prominent notice with each copy of the work that the Library is used in it and that the Library and its use are covered by this License. You must supply a copy of this License. If the work during execution displays copyright notices, you must include the copyright notice for the Library among them, as well as a reference directing the user to the copy of this License. Also, you must do one of these things:\n\n*    a) Accompany the work with the complete corresponding machine-readable source code for the Library including whatever changes were used in the work (which must be distributed under Sections 1 and 2 above); and, if the work is an executable linked with the Library, with the complete machine-readable \"work that uses the Library\", as object code and/or source code, so that the user can modify the Library and then relink to produce a modified executable containing the modified Library. (It is understood that the user who changes the contents of definitions files in the Library will not necessarily be able to recompile the application to use the modified definitions.)\n*    b) Use a suitable shared library mechanism for linking with the Library. A suitable mechanism is one that (1) uses at run time a copy of the library already present on the user's computer system, rather than copying library functions into the executable, and (2) will operate properly with a modified version of the library, if the user installs one, as long as the modified version is interface-compatible with the version that the work was made with.\n*    c) Accompany the work with a written offer, valid for at least three years, to give the same user the materials specified in Subsection 6a, above, for a charge no more than the cost of performing this distribution.\n*    d) If distribution of the work is made by offering access to copy from a designated place, offer equivalent access to copy the above specified materials from the same place.\n*    e) Verify that the user has already received a copy of these materials or that you have already sent this user a copy.\n\nFor an executable, the required form of the \"work that uses the Library\" must include any data and utility programs needed for reproducing the executable from it. However, as a special exception, the materials to be distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable.\n\nIt may happen that this requirement contradicts the license restrictions of other proprietary libraries that do not normally accompany the operating system. Such a contradiction means you cannot use both them and the Library together in an executable that you distribute.\n\n7. You may place library facilities that are a work based on the Library side-by-side in a single library together with other library facilities not covered by this License, and distribute such a combined library, provided that the separate distribution of the work based on the Library and of the other library facilities is otherwise permitted, and provided that you do these two things:\n\n*    a) Accompany the combined library with a copy of the same work based on the Library, uncombined with any other library facilities. This must be distributed under the terms of the Sections above.\n*    b) Give prominent notice with the combined library of the fact that part of it is a work based on the Library, and explaining where to find the accompanying uncombined form of the same work.\n\n8. You may not copy, modify, sublicense, link with, or distribute the Library except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense, link with, or distribute the Library is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance.\n\n9. You are not required to accept this License, since you have not signed it. However, nothing else grants you permission to modify or distribute the Library or its derivative works. These actions are prohibited by law if you do not accept this License. Therefore, by modifying or distributing the Library (or any work based on the Library), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Library or works based on it.\n\n10. Each time you redistribute the Library (or any work based on the Library), the recipient automatically receives a license from the original licensor to copy, distribute, link with or modify the Library subject to these terms and conditions. You may not impose any further restrictions on the recipients' exercise of the rights granted herein. You are not responsible for enforcing compliance by third parties with this License.\n\n11. If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Library at all. For example, if a patent license would not permit royalty-free redistribution of the Library by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Library.\n\nIf any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply, and the section as a whole is intended to apply in other circumstances.\n\nIt is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system which is implemented by public license practices. Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice.\n\nThis section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License.\n\n12. If the distribution and/or use of the Library is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Library under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded. In such case, this License incorporates the limitation as if written in the body of this License.\n\n13. The Free Software Foundation may publish revised and/or new versions of the Lesser General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.\n\nEach version is given a distinguishing version number. If the Library specifies a version number of this License which applies to it and \"any later version\", you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation. If the Library does not specify a license version number, you may choose any version ever published by the Free Software Foundation.\n\n14. If you wish to incorporate parts of the Library into other free programs whose distribution conditions are incompatible with these, write to the author to ask for permission. For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this. Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally.\n\nNO WARRANTY\n\n15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE LIBRARY \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE LIBRARY IS WITH YOU. SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n\nEND OF TERMS AND CONDITIONS\n\n\nHow to Apply These Terms to Your New Libraries\n\nIf you develop a new library, and you want it to be of the greatest possible use to the public, we recommend making it free software that everyone can redistribute and change. You can do so by permitting redistribution under these terms (or, alternatively, under the terms of the ordinary General Public License).\n\nTo apply these terms, attach the following notices to the library.  It is safest to attach them to the start of each source file to most effectively convey the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.\n\n<one line to give the library's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.\n\nThis library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\nAlso add information on how to contact you by electronic and paper mail.\n\nYou should also get your employer (if you work as a programmer) or your school, if any, to sign a \"copyright disclaimer\" for the library, if necessary.  Here is a sample; alter the names:\n\nYoyodyne, Inc., hereby disclaims all copyright interest in the library `Frob' (a library for tweaking knobs) written by James Random Hacker.\n\n<signature of Ty Coon>, 1 April 1990\nTy Coon, President of Vice\n\nThat's all there is to it!\n"
org.jfree.chart.JFreeChart.INFO.contributors has only one value
org.jfree.chart.JFreeChart.INFO.contributors[] contains no nulls and has only one value, of length 85
org.jfree.chart.JFreeChart.INFO.contributors[].getClass().getName() == [org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor]
org.jfree.chart.JFreeChart.INFO.contributors[].getClass().getName() elements == org.jfree.chart.ui.Contributor.class
org.jfree.chart.JFreeChart.INFO.contributors.getClass().getName() == java.util.Arrays$ArrayList.class
org.jfree.chart.JFreeChart.INFO.copyright has only one value
org.jfree.chart.JFreeChart.INFO.copyright.toString == "(C)opyright 2000-2007, by Object Refinery Limited and Contributors"
org.jfree.chart.JFreeChart.INFO.libraries has only one value
org.jfree.chart.JFreeChart.INFO.libraries[] == []
org.jfree.chart.JFreeChart.INFO.libraries[].getClass().getName() == []
org.jfree.chart.JFreeChart.INFO.libraries.getClass().getName() == java.util.ArrayList.class
org.jfree.chart.JFreeChart.INFO.optionalLibraries has only one value
org.jfree.chart.JFreeChart.INFO.optionalLibraries[] == []
org.jfree.chart.JFreeChart.INFO.optionalLibraries[].getClass().getName() == []
org.jfree.chart.JFreeChart.INFO.optionalLibraries.getClass().getName() == java.util.ArrayList.class
org.jfree.chart.JFreeChart.INFO.name has only one value
org.jfree.chart.JFreeChart.INFO.name.toString == "JFreeChart"
org.jfree.chart.JFreeChart.INFO.version has only one value
org.jfree.chart.JFreeChart.INFO.version.toString == "1.2.0-pre"
org.jfree.chart.JFreeChart.INFO.licenceName has only one value
org.jfree.chart.JFreeChart.INFO.licenceName.toString == "LGPL"
org.jfree.chart.JFreeChart.INFO.info has only one value
org.jfree.chart.JFreeChart.INFO.info.toString == "http://www.jfree.org/jfreechart/index.html"
org.jfree.chart.JFreeChart.DEFAULT_TITLE_FONT has only one value
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT has only one value
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName() == java.awt.Color.class
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_IMAGE == null
this.chart.borderVisible == false
this.chart.borderStroke.getClass().getName() == java.awt.BasicStroke.class
this.chart.borderPaint has only one value
this.chart.borderPaint.getClass().getName() == java.awt.Color.class
this.chart.padding has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS has only one value
this.chart.padding.unitType has only one value
this.chart.padding.top == 0.0
this.chart.padding.left == 0.0
this.chart.padding.bottom == 0.0
this.chart.padding.right == 0.0
org.jfree.chart.title.TextTitle.DEFAULT_FONT has only one value
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT has only one value
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT.getClass().getName() == java.awt.Color.class
this.chart.title.text.toString one of { "Pie Chart", "Test" }
this.chart.title.font has only one value
this.chart.title.textAlignment has only one value
this.chart.title.paint has only one value
this.chart.title.paint.getClass().getName() == java.awt.Color.class
this.chart.title.backgroundPaint == null
this.chart.title.toolTipText == null
this.chart.title.urlText == null
this.chart.title.expandToFitSpace == false
org.jfree.chart.title.Title.DEFAULT_POSITION has only one value
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT has only one value
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT has only one value
org.jfree.chart.title.Title.DEFAULT_PADDING has only one value
this.chart.title.position has only one value
this.chart.title.horizontalAlignment has only one value
this.chart.title.verticalAlignment has only one value
this.chart.title.notify == true
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener has only one value
this.chart.title.id == null
this.chart.title.margin has only one value
this.chart.title.frame has only one value
this.chart.title.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class
this.chart.title.padding has only one value
this.chart.title.width == 0.0
this.chart.title.height == 0.0
this.chart.title.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
this.chart.subtitles[].getClass().getName() == [org.jfree.chart.title.LegendTitle]
this.chart.subtitles[].getClass().getName() elements == org.jfree.chart.title.LegendTitle.class
this.chart.subtitles.getClass().getName() == java.util.ArrayList.class
org.jfree.chart.plot.Plot.ZERO has only one value
org.jfree.chart.plot.Plot.ZERO.getClass().getName() == java.lang.Integer.class
org.jfree.chart.plot.Plot.DEFAULT_INSETS has only one value
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE has only one value
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName() == java.awt.BasicStroke.class
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT has only one value
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName() == java.awt.Color.class
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT has only one value
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName() == java.awt.Color.class
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX has only one value
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName() == java.awt.geom.Rectangle2D$Double.class
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE has only one value
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == java.awt.geom.Ellipse2D$Double.class
this.chart.plot.parent == null
this.chart.plot.datasetGroup == null
this.chart.plot.noDataMessage == null
this.chart.plot.noDataMessagePaint has only one value
this.chart.plot.noDataMessagePaint.getClass().getName() == java.awt.Color.class
this.chart.plot.outlineVisible == true
this.chart.plot.outlineStroke has only one value
this.chart.plot.outlineStroke.getClass().getName() == java.awt.BasicStroke.class
this.chart.plot.outlinePaint has only one value
this.chart.plot.outlinePaint.getClass().getName() == java.awt.Color.class
this.chart.plot.backgroundPaint has only one value
this.chart.plot.backgroundPaint.getClass().getName() == java.awt.Color.class
this.chart.plot.backgroundImage == null
this.chart.plot.backgroundImageAlignment == 15
this.chart.plot.backgroundImageAlpha == 0.5
this.chart.plot.foregroundAlpha == 1.0
this.chart.plot.backgroundAlpha == 1.0
this.chart.plot.drawingSupplier.getClass().getName() == org.jfree.chart.plot.DefaultDrawingSupplier.class
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener has only one value
this.chart.backgroundPaint has only one value
this.chart.backgroundPaint.getClass().getName() == java.awt.Color.class
this.chart.backgroundImage == null
this.chart.backgroundImageAlignment == 15
this.chart.backgroundImageAlpha == 0.5
this.chart.notify == true
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartChangeListener == null
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartProgressListener == null
size(org.jfree.chart.JFreeChart.INFO.contributors[]) == 85
size(this.chart.subtitles[]) == 1
===========================================================================
org.jfree.chart.event.ChartProgressEvent.ChartProgressEvent(java.lang.Object, org.jfree.chart.JFreeChart, int, int):::ENTER
source.getClass().getName() == org.jfree.chart.JFreeChart.class
org.jfree.chart.JFreeChart.INFO has only one value
org.jfree.chart.JFreeChart.INFO.logo == null
org.jfree.chart.JFreeChart.INFO.licenceText has only one value
org.jfree.chart.JFreeChart.INFO.licenceText.toString == "GNU LESSER GENERAL PUBLIC LICENSE\n\nVersion 2.1, February 1999\n\nCopyright (C) 1991, 1999 Free Software Foundation, Inc.\n59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\nEveryone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.\n\n[This is the first released version of the Lesser GPL.  It also counts as the successor of the GNU Library Public License, version 2, hence the version number 2.1.]\n\nPreamble\n\nThe licenses for most software are designed to take away your freedom to share and change it. By contrast, the GNU General Public Licenses are intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users.\n\nThis license, the Lesser General Public License, applies to some specially designated software packages--typically libraries--of the Free Software Foundation and other authors who decide to use it. You can use it too, but we suggest you first think carefully about whether this license or the ordinary General Public License is the better strategy to use in any particular case, based on the explanations below.\n\nWhen we speak of free software, we are referring to freedom of use, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish); that you receive source code or can get it if you want it; that you can change the software and use pieces of it in new free programs; and that you are informed that you can do these things.\n\nTo protect your rights, we need to make restrictions that forbid distributors to deny you these rights or to ask you to surrender these rights. These restrictions translate to certain responsibilities for you if you distribute copies of the library or if you modify it.\n\nFor example, if you distribute copies of the library, whether gratis or for a fee, you must give the recipients all the rights that we gave you. You must make sure that they, too, receive or can get the source code. If you link other code with the library, you must provide complete object files to the recipients, so that they can relink them with the library after making changes to the library and recompiling it. And you must show them these terms so they know their rights.\n\nWe protect your rights with a two-step method: (1) we copyright the library, and (2) we offer you this license, which gives you legal permission to copy, distribute and/or modify the library.\n\nTo protect each distributor, we want to make it very clear that there is no warranty for the free library. Also, if the library is modified by someone else and passed on, the recipients should know that what they have is not the original version, so that the original author's reputation will not be affected by problems that might be introduced by others.\n\nFinally, software patents pose a constant threat to the existence of any free program. We wish to make sure that a company cannot effectively restrict the users of a free program by obtaining a restrictive license from a patent holder. Therefore, we insist that any patent license obtained for a version of the library must be consistent with the full freedom of use specified in this license.\n\nMost GNU software, including some libraries, is covered by the ordinary GNU General Public License. This license, the GNU Lesser General Public License, applies to certain designated libraries, and is quite different from the ordinary General Public License. We use this license for certain libraries in order to permit linking those libraries into non-free programs.\n\nWhen a program is linked with a library, whether statically or using a shared library, the combination of the two is legally speaking a combined work, a derivative of the original library. The ordinary General Public License therefore permits such linking only if the entire combination fits its criteria of freedom. The Lesser General Public License permits more lax criteria for linking other code with the library.\n\nWe call this license the \"Lesser\" General Public License because it does Less to protect the user's freedom than the ordinary General Public License. It also provides other free software developers Less of an advantage over competing non-free programs. These disadvantages are the reason we use the ordinary General Public License for many libraries. However, the Lesser license provides advantages in certain special circumstances.\n\nFor example, on rare occasions, there may be a special need to encourage the widest possible use of a certain library, so that it becomes a de-facto standard. To achieve this, non-free programs must be allowed to use the library. A more frequent case is that a free library does the same job as widely used non-free libraries. In this case, there is little to gain by limiting the free library to free software only, so we use the Lesser General Public License.\n\nIn other cases, permission to use a particular library in non-free programs enables a greater number of people to use a large body of free software. For example, permission to use the GNU C Library in non-free programs enables many more people to use the whole GNU operating system, as well as its variant, the GNU/Linux operating system.\n\nAlthough the Lesser General Public License is Less protective of the users' freedom, it does ensure that the user of a program that is linked with the Library has the freedom and the wherewithal to run that program using a modified version of the Library.\n\nThe precise terms and conditions for copying, distribution and modification follow. Pay close attention to the difference between a \"work based on the library\" and a \"work that uses the library\". The former contains code derived from the library, whereas the latter must be combined with the library in order to run.\n\nTERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n0. This License Agreement applies to any software library or other program which contains a notice placed by the copyright holder or other authorized party saying it may be distributed under the terms of this Lesser General Public License (also called \"this License\"). Each licensee is addressed as \"you\".\nA \"library\" means a collection of software functions and/or data prepared so as to be conveniently linked with application programs (which use some of those functions and data) to form executables.\n\nThe \"Library\", below, refers to any such software library or work which has been distributed under these terms. A \"work based on the Library\" means either the Library or any derivative work under copyright law: that is to say, a work containing the Library or a portion of it, either verbatim or with modifications and/or translated straightforwardly into another language. (Hereinafter, translation is included without limitation in the term \"modification\".)\n\n\"Source code\" for a work means the preferred form of the work for making modifications to it. For a library, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the library.\n\nActivities other than copying, distribution and modification are not covered by this License; they are outside its scope. The act of running a program using the Library is not restricted, and output from such a program is covered only if its contents constitute a work based on the Library (independent of the use of the Library in a tool for writing it). Whether that is true depends on what the Library does and what the program that uses the Library does.\n1. You may copy and distribute verbatim copies of the Library's complete source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and distribute a copy of this License along with the Library.\n\nYou may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee.\n\n2. You may modify your copy or copies of the Library or any portion of it, thus forming a work based on the Library, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions:\n\n*    a) The modified work must itself be a software library.\n*    b) You must cause the files modified to carry prominent notices stating that you changed the files and the date of any change.\n*    c) You must cause the whole of the work to be licensed at no charge to all third parties under the terms of this License.\n*    d) If a facility in the modified Library refers to a function or a table of data to be supplied by an application program that uses the facility, other than as an argument passed when the facility is invoked, then you must make a good faith effort to ensure that, in the event an application does not supply such function or table, the facility still operates, and performs whatever part of its purpose remains meaningful.\n\n(For example, a function in a library to compute square roots has a purpose that is entirely well-defined independent of the application. Therefore, Subsection 2d requires that any application-supplied function or table used by this function must be optional: if the application does not supply it, the square root function must still compute square roots.)\n\nThese requirements apply to the modified work as a whole. If identifiable sections of that work are not derived from the Library, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works. But when you distribute the same sections as part of a whole which is a work based on the Library, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Library.\n\nIn addition, mere aggregation of another work not based on the Library with the Library (or with a work based on the Library) on a volume of a storage or distribution medium does not bring the other work under the scope of this License.\n\n3. You may opt to apply the terms of the ordinary GNU General Public License instead of this License to a given copy of the Library. To do this, you must alter all the notices that refer to this License, so that they refer to the ordinary GNU General Public License, version 2, instead of to this License. (If a newer version than version 2 of the ordinary GNU General Public License has appeared, then you can specify that version instead if you wish.) Do not make any other change in these notices.\n\nOnce this change is made in a given copy, it is irreversible for that copy, so the ordinary GNU General Public License applies to all subsequent copies and derivative works made from that copy.\n\nThis option is useful when you wish to copy part of the code of the Library into a program that is not a library.\n\n4. You may copy and distribute the Library (or a portion or derivative of it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange.\n\nIf distribution of object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place satisfies the requirement to distribute the source code, even though third parties are not compelled to copy the source along with the object code.\n\n5. A program that contains no derivative of any portion of the Library, but is designed to work with the Library by being compiled or linked with it, is called a \"work that uses the Library\". Such a work, in isolation, is not a derivative work of the Library, and therefore falls outside the scope of this License.\n\nHowever, linking a \"work that uses the Library\" with the Library creates an executable that is a derivative of the Library (because it contains portions of the Library), rather than a \"work that uses the library\". The executable is therefore covered by this License. Section 6 states terms for distribution of such executables.\n\nWhen a \"work that uses the Library\" uses material from a header file that is part of the Library, the object code for the work may be a derivative work of the Library even though the source code is not. Whether this is true is especially significant if the work can be linked without the Library, or if the work is itself a library. The threshold for this to be true is not precisely defined by law.\n\nIf such an object file uses only numerical parameters, data structure layouts and accessors, and small macros and small inline functions (ten lines or less in length), then the use of the object file is unrestricted, regardless of whether it is legally a derivative work. (Executables containing this object code plus portions of the Library will still fall under Section 6.)\n\nOtherwise, if the work is a derivative of the Library, you may distribute the object code for the work under the terms of Section 6. Any executables containing that work also fall under Section 6, whether or not they are linked directly with the Library itself.\n\n6. As an exception to the Sections above, you may also combine or link a \"work that uses the Library\" with the Library to produce a work containing portions of the Library, and distribute that work under terms of your choice, provided that the terms permit modification of the work for the customer's own use and reverse engineering for debugging such modifications.\n\nYou must give prominent notice with each copy of the work that the Library is used in it and that the Library and its use are covered by this License. You must supply a copy of this License. If the work during execution displays copyright notices, you must include the copyright notice for the Library among them, as well as a reference directing the user to the copy of this License. Also, you must do one of these things:\n\n*    a) Accompany the work with the complete corresponding machine-readable source code for the Library including whatever changes were used in the work (which must be distributed under Sections 1 and 2 above); and, if the work is an executable linked with the Library, with the complete machine-readable \"work that uses the Library\", as object code and/or source code, so that the user can modify the Library and then relink to produce a modified executable containing the modified Library. (It is understood that the user who changes the contents of definitions files in the Library will not necessarily be able to recompile the application to use the modified definitions.)\n*    b) Use a suitable shared library mechanism for linking with the Library. A suitable mechanism is one that (1) uses at run time a copy of the library already present on the user's computer system, rather than copying library functions into the executable, and (2) will operate properly with a modified version of the library, if the user installs one, as long as the modified version is interface-compatible with the version that the work was made with.\n*    c) Accompany the work with a written offer, valid for at least three years, to give the same user the materials specified in Subsection 6a, above, for a charge no more than the cost of performing this distribution.\n*    d) If distribution of the work is made by offering access to copy from a designated place, offer equivalent access to copy the above specified materials from the same place.\n*    e) Verify that the user has already received a copy of these materials or that you have already sent this user a copy.\n\nFor an executable, the required form of the \"work that uses the Library\" must include any data and utility programs needed for reproducing the executable from it. However, as a special exception, the materials to be distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable.\n\nIt may happen that this requirement contradicts the license restrictions of other proprietary libraries that do not normally accompany the operating system. Such a contradiction means you cannot use both them and the Library together in an executable that you distribute.\n\n7. You may place library facilities that are a work based on the Library side-by-side in a single library together with other library facilities not covered by this License, and distribute such a combined library, provided that the separate distribution of the work based on the Library and of the other library facilities is otherwise permitted, and provided that you do these two things:\n\n*    a) Accompany the combined library with a copy of the same work based on the Library, uncombined with any other library facilities. This must be distributed under the terms of the Sections above.\n*    b) Give prominent notice with the combined library of the fact that part of it is a work based on the Library, and explaining where to find the accompanying uncombined form of the same work.\n\n8. You may not copy, modify, sublicense, link with, or distribute the Library except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense, link with, or distribute the Library is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance.\n\n9. You are not required to accept this License, since you have not signed it. However, nothing else grants you permission to modify or distribute the Library or its derivative works. These actions are prohibited by law if you do not accept this License. Therefore, by modifying or distributing the Library (or any work based on the Library), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Library or works based on it.\n\n10. Each time you redistribute the Library (or any work based on the Library), the recipient automatically receives a license from the original licensor to copy, distribute, link with or modify the Library subject to these terms and conditions. You may not impose any further restrictions on the recipients' exercise of the rights granted herein. You are not responsible for enforcing compliance by third parties with this License.\n\n11. If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Library at all. For example, if a patent license would not permit royalty-free redistribution of the Library by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Library.\n\nIf any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply, and the section as a whole is intended to apply in other circumstances.\n\nIt is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system which is implemented by public license practices. Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice.\n\nThis section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License.\n\n12. If the distribution and/or use of the Library is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Library under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded. In such case, this License incorporates the limitation as if written in the body of this License.\n\n13. The Free Software Foundation may publish revised and/or new versions of the Lesser General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.\n\nEach version is given a distinguishing version number. If the Library specifies a version number of this License which applies to it and \"any later version\", you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation. If the Library does not specify a license version number, you may choose any version ever published by the Free Software Foundation.\n\n14. If you wish to incorporate parts of the Library into other free programs whose distribution conditions are incompatible with these, write to the author to ask for permission. For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this. Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally.\n\nNO WARRANTY\n\n15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE LIBRARY \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE LIBRARY IS WITH YOU. SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n\nEND OF TERMS AND CONDITIONS\n\n\nHow to Apply These Terms to Your New Libraries\n\nIf you develop a new library, and you want it to be of the greatest possible use to the public, we recommend making it free software that everyone can redistribute and change. You can do so by permitting redistribution under these terms (or, alternatively, under the terms of the ordinary General Public License).\n\nTo apply these terms, attach the following notices to the library.  It is safest to attach them to the start of each source file to most effectively convey the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.\n\n<one line to give the library's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.\n\nThis library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\nAlso add information on how to contact you by electronic and paper mail.\n\nYou should also get your employer (if you work as a programmer) or your school, if any, to sign a \"copyright disclaimer\" for the library, if necessary.  Here is a sample; alter the names:\n\nYoyodyne, Inc., hereby disclaims all copyright interest in the library `Frob' (a library for tweaking knobs) written by James Random Hacker.\n\n<signature of Ty Coon>, 1 April 1990\nTy Coon, President of Vice\n\nThat's all there is to it!\n"
org.jfree.chart.JFreeChart.INFO.contributors has only one value
org.jfree.chart.JFreeChart.INFO.contributors[] contains no nulls and has only one value, of length 85
org.jfree.chart.JFreeChart.INFO.contributors[].getClass().getName() == [org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor]
org.jfree.chart.JFreeChart.INFO.contributors[].getClass().getName() elements == org.jfree.chart.ui.Contributor.class
org.jfree.chart.JFreeChart.INFO.contributors.getClass().getName() == java.util.Arrays$ArrayList.class
org.jfree.chart.JFreeChart.INFO.copyright has only one value
org.jfree.chart.JFreeChart.INFO.copyright.toString == "(C)opyright 2000-2007, by Object Refinery Limited and Contributors"
org.jfree.chart.JFreeChart.INFO.libraries has only one value
org.jfree.chart.JFreeChart.INFO.libraries[] == []
org.jfree.chart.JFreeChart.INFO.libraries[].getClass().getName() == []
org.jfree.chart.JFreeChart.INFO.libraries.getClass().getName() == java.util.ArrayList.class
org.jfree.chart.JFreeChart.INFO.optionalLibraries has only one value
org.jfree.chart.JFreeChart.INFO.optionalLibraries[] == []
org.jfree.chart.JFreeChart.INFO.optionalLibraries[].getClass().getName() == []
org.jfree.chart.JFreeChart.INFO.optionalLibraries.getClass().getName() == java.util.ArrayList.class
org.jfree.chart.JFreeChart.INFO.name has only one value
org.jfree.chart.JFreeChart.INFO.name.toString == "JFreeChart"
org.jfree.chart.JFreeChart.INFO.version has only one value
org.jfree.chart.JFreeChart.INFO.version.toString == "1.2.0-pre"
org.jfree.chart.JFreeChart.INFO.licenceName has only one value
org.jfree.chart.JFreeChart.INFO.licenceName.toString == "LGPL"
org.jfree.chart.JFreeChart.INFO.info has only one value
org.jfree.chart.JFreeChart.INFO.info.toString == "http://www.jfree.org/jfreechart/index.html"
org.jfree.chart.JFreeChart.DEFAULT_TITLE_FONT has only one value
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT has only one value
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName() == java.awt.Color.class
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_IMAGE == null
chart.borderVisible == false
chart.borderStroke.getClass().getName() == java.awt.BasicStroke.class
chart.borderPaint has only one value
chart.borderPaint.getClass().getName() == java.awt.Color.class
chart.padding has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS has only one value
chart.padding.unitType has only one value
chart.padding.top == 0.0
chart.padding.left == 0.0
chart.padding.bottom == 0.0
chart.padding.right == 0.0
org.jfree.chart.title.TextTitle.DEFAULT_FONT has only one value
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT has only one value
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT.getClass().getName() == java.awt.Color.class
chart.title.text.toString one of { "Pie Chart", "Test" }
chart.title.font has only one value
chart.title.textAlignment has only one value
chart.title.paint has only one value
chart.title.paint.getClass().getName() == java.awt.Color.class
chart.title.backgroundPaint == null
chart.title.toolTipText == null
chart.title.urlText == null
chart.title.expandToFitSpace == false
org.jfree.chart.title.Title.DEFAULT_POSITION has only one value
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT has only one value
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT has only one value
org.jfree.chart.title.Title.DEFAULT_PADDING has only one value
chart.title.position has only one value
chart.title.horizontalAlignment has only one value
chart.title.verticalAlignment has only one value
chart.title.notify == true
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener has only one value
chart.title.id == null
chart.title.margin has only one value
chart.title.frame has only one value
chart.title.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class
chart.title.padding has only one value
chart.title.width == 0.0
chart.title.height == 0.0
chart.title.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
chart.subtitles[].getClass().getName() == [org.jfree.chart.title.LegendTitle]
chart.subtitles[].getClass().getName() elements == org.jfree.chart.title.LegendTitle.class
chart.subtitles.getClass().getName() == java.util.ArrayList.class
org.jfree.chart.plot.Plot.ZERO has only one value
org.jfree.chart.plot.Plot.ZERO.getClass().getName() == java.lang.Integer.class
org.jfree.chart.plot.Plot.DEFAULT_INSETS has only one value
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE has only one value
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName() == java.awt.BasicStroke.class
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT has only one value
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName() == java.awt.Color.class
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT has only one value
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName() == java.awt.Color.class
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX has only one value
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName() == java.awt.geom.Rectangle2D$Double.class
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE has only one value
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == java.awt.geom.Ellipse2D$Double.class
chart.plot.parent == null
chart.plot.datasetGroup == null
chart.plot.noDataMessage == null
chart.plot.noDataMessagePaint has only one value
chart.plot.noDataMessagePaint.getClass().getName() == java.awt.Color.class
chart.plot.outlineVisible == true
chart.plot.outlineStroke has only one value
chart.plot.outlineStroke.getClass().getName() == java.awt.BasicStroke.class
chart.plot.outlinePaint has only one value
chart.plot.outlinePaint.getClass().getName() == java.awt.Color.class
chart.plot.backgroundPaint has only one value
chart.plot.backgroundPaint.getClass().getName() == java.awt.Color.class
chart.plot.backgroundImage == null
chart.plot.backgroundImageAlignment == 15
chart.plot.backgroundImageAlpha == 0.5
chart.plot.foregroundAlpha == 1.0
chart.plot.backgroundAlpha == 1.0
chart.plot.drawingSupplier.getClass().getName() == org.jfree.chart.plot.DefaultDrawingSupplier.class
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener has only one value
chart.backgroundPaint has only one value
chart.backgroundPaint.getClass().getName() == java.awt.Color.class
chart.backgroundImage == null
chart.backgroundImageAlignment == 15
chart.backgroundImageAlpha == 0.5
chart.notify == true
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartChangeListener == null
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartProgressListener == null
type one of { 1, 2 }
percent one of { 0, 100 }
size(org.jfree.chart.JFreeChart.INFO.contributors[]) == 85
size(chart.subtitles[]) == 1
===========================================================================
org.jfree.chart.event.ChartProgressEvent.ChartProgressEvent(java.lang.Object, org.jfree.chart.JFreeChart, int, int):::EXIT
org.jfree.chart.JFreeChart.INFO == orig(org.jfree.chart.JFreeChart.INFO)
org.jfree.chart.JFreeChart.INFO.logo == orig(org.jfree.chart.JFreeChart.INFO.logo)
org.jfree.chart.JFreeChart.INFO.licenceText == orig(org.jfree.chart.JFreeChart.INFO.licenceText)
org.jfree.chart.JFreeChart.INFO.licenceText.toString == orig(org.jfree.chart.JFreeChart.INFO.licenceText.toString)
org.jfree.chart.JFreeChart.INFO.contributors == orig(org.jfree.chart.JFreeChart.INFO.contributors)
org.jfree.chart.JFreeChart.INFO.contributors[] == orig(org.jfree.chart.JFreeChart.INFO.contributors[])
org.jfree.chart.JFreeChart.INFO.contributors.getClass().getName() == orig(org.jfree.chart.JFreeChart.INFO.contributors.getClass().getName())
org.jfree.chart.JFreeChart.INFO.copyright == orig(org.jfree.chart.JFreeChart.INFO.copyright)
org.jfree.chart.JFreeChart.INFO.copyright.toString == orig(org.jfree.chart.JFreeChart.INFO.copyright.toString)
org.jfree.chart.JFreeChart.INFO.libraries == orig(org.jfree.chart.JFreeChart.INFO.libraries)
org.jfree.chart.JFreeChart.INFO.libraries[] == orig(org.jfree.chart.JFreeChart.INFO.libraries[])
org.jfree.chart.JFreeChart.INFO.libraries.getClass().getName() == orig(org.jfree.chart.JFreeChart.INFO.libraries.getClass().getName())
org.jfree.chart.JFreeChart.INFO.optionalLibraries == orig(org.jfree.chart.JFreeChart.INFO.optionalLibraries)
org.jfree.chart.JFreeChart.INFO.optionalLibraries[] == orig(org.jfree.chart.JFreeChart.INFO.optionalLibraries[])
org.jfree.chart.JFreeChart.INFO.optionalLibraries.getClass().getName() == orig(org.jfree.chart.JFreeChart.INFO.optionalLibraries.getClass().getName())
org.jfree.chart.JFreeChart.INFO.name == orig(org.jfree.chart.JFreeChart.INFO.name)
org.jfree.chart.JFreeChart.INFO.name.toString == orig(org.jfree.chart.JFreeChart.INFO.name.toString)
org.jfree.chart.JFreeChart.INFO.version == orig(org.jfree.chart.JFreeChart.INFO.version)
org.jfree.chart.JFreeChart.INFO.version.toString == orig(org.jfree.chart.JFreeChart.INFO.version.toString)
org.jfree.chart.JFreeChart.INFO.licenceName == orig(org.jfree.chart.JFreeChart.INFO.licenceName)
org.jfree.chart.JFreeChart.INFO.licenceName.toString == orig(org.jfree.chart.JFreeChart.INFO.licenceName.toString)
org.jfree.chart.JFreeChart.INFO.info == orig(org.jfree.chart.JFreeChart.INFO.info)
org.jfree.chart.JFreeChart.INFO.info.toString == orig(org.jfree.chart.JFreeChart.INFO.info.toString)
org.jfree.chart.JFreeChart.DEFAULT_TITLE_FONT == orig(org.jfree.chart.JFreeChart.DEFAULT_TITLE_FONT)
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT == orig(org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT)
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName() == orig(org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_IMAGE == orig(org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_IMAGE)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.title.TextTitle.DEFAULT_FONT == orig(org.jfree.chart.title.TextTitle.DEFAULT_FONT)
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT == orig(org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT)
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT.getClass().getName() == orig(org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT.getClass().getName())
org.jfree.chart.title.Title.DEFAULT_POSITION == orig(org.jfree.chart.title.Title.DEFAULT_POSITION)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT)
org.jfree.chart.title.Title.DEFAULT_PADDING == orig(org.jfree.chart.title.Title.DEFAULT_PADDING)
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener == orig(org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener)
org.jfree.chart.plot.Plot.ZERO == orig(org.jfree.chart.plot.Plot.ZERO)
org.jfree.chart.plot.Plot.ZERO.getClass().getName() == orig(org.jfree.chart.plot.Plot.ZERO.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_INSETS == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName())
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener == orig(org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener)
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartChangeListener == orig(org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartChangeListener)
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartProgressListener == orig(org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartProgressListener)
chart.renderingHints == orig(chart.renderingHints)
chart.borderVisible == orig(chart.borderVisible)
chart.borderStroke == orig(chart.borderStroke)
chart.borderStroke.getClass().getName() == orig(chart.borderStroke.getClass().getName())
chart.borderPaint == orig(chart.borderPaint)
chart.borderPaint.getClass().getName() == orig(chart.borderPaint.getClass().getName())
chart.padding == orig(chart.padding)
chart.padding.unitType == orig(chart.padding.unitType)
chart.padding.top == orig(chart.padding.top)
chart.padding.left == orig(chart.padding.left)
chart.padding.bottom == orig(chart.padding.bottom)
chart.padding.right == orig(chart.padding.right)
chart.title == orig(chart.title)
chart.title.text == orig(chart.title.text)
chart.title.text.toString == orig(chart.title.text.toString)
chart.title.font == orig(chart.title.font)
chart.title.textAlignment == orig(chart.title.textAlignment)
chart.title.paint == orig(chart.title.paint)
chart.title.paint.getClass().getName() == orig(chart.title.paint.getClass().getName())
chart.title.backgroundPaint == orig(chart.title.backgroundPaint)
chart.title.toolTipText == orig(chart.title.toolTipText)
chart.title.urlText == orig(chart.title.urlText)
chart.title.content == orig(chart.title.content)
chart.title.expandToFitSpace == orig(chart.title.expandToFitSpace)
chart.title.position == orig(chart.title.position)
chart.title.horizontalAlignment == orig(chart.title.horizontalAlignment)
chart.title.verticalAlignment == orig(chart.title.verticalAlignment)
chart.title.listenerList == orig(chart.title.listenerList)
chart.title.notify == orig(chart.title.notify)
chart.title.id == orig(chart.title.id)
chart.title.margin == orig(chart.title.margin)
chart.title.frame == orig(chart.title.frame)
chart.title.frame.getClass().getName() == orig(chart.title.frame.getClass().getName())
chart.title.padding == orig(chart.title.padding)
chart.title.width == orig(chart.title.width)
chart.title.height == orig(chart.title.height)
chart.title.bounds == orig(chart.title.bounds)
chart.title.bounds.getClass().getName() == orig(chart.title.bounds.getClass().getName())
chart.subtitles == orig(chart.subtitles)
chart.subtitles[] == orig(chart.subtitles[])
chart.subtitles.getClass().getName() == orig(chart.subtitles.getClass().getName())
chart.plot == orig(chart.plot)
chart.plot.getClass().getName() == orig(chart.plot.getClass().getName())
chart.plot.parent == orig(chart.plot.parent)
chart.plot.datasetGroup == orig(chart.plot.datasetGroup)
chart.plot.noDataMessage == orig(chart.plot.noDataMessage)
chart.plot.noDataMessageFont == orig(chart.plot.noDataMessageFont)
chart.plot.noDataMessagePaint == orig(chart.plot.noDataMessagePaint)
chart.plot.noDataMessagePaint.getClass().getName() == orig(chart.plot.noDataMessagePaint.getClass().getName())
chart.plot.insets == orig(chart.plot.insets)
chart.plot.outlineVisible == orig(chart.plot.outlineVisible)
chart.plot.outlineStroke == orig(chart.plot.outlineStroke)
chart.plot.outlineStroke.getClass().getName() == orig(chart.plot.outlineStroke.getClass().getName())
chart.plot.outlinePaint == orig(chart.plot.outlinePaint)
chart.plot.outlinePaint.getClass().getName() == orig(chart.plot.outlinePaint.getClass().getName())
chart.plot.backgroundPaint == orig(chart.plot.backgroundPaint)
chart.plot.backgroundPaint.getClass().getName() == orig(chart.plot.backgroundPaint.getClass().getName())
chart.plot.backgroundImage == orig(chart.plot.backgroundImage)
chart.plot.backgroundImageAlignment == orig(chart.plot.backgroundImageAlignment)
chart.plot.backgroundImageAlpha == orig(chart.plot.backgroundImageAlpha)
chart.plot.foregroundAlpha == orig(chart.plot.foregroundAlpha)
chart.plot.backgroundAlpha == orig(chart.plot.backgroundAlpha)
chart.plot.drawingSupplier == orig(chart.plot.drawingSupplier)
chart.plot.drawingSupplier.getClass().getName() == orig(chart.plot.drawingSupplier.getClass().getName())
chart.plot.listenerList == orig(chart.plot.listenerList)
chart.backgroundPaint == orig(chart.backgroundPaint)
chart.backgroundPaint.getClass().getName() == orig(chart.backgroundPaint.getClass().getName())
chart.backgroundImage == orig(chart.backgroundImage)
chart.backgroundImageAlignment == orig(chart.backgroundImageAlignment)
chart.backgroundImageAlpha == orig(chart.backgroundImageAlpha)
chart.changeListeners == orig(chart.changeListeners)
chart.progressListeners == orig(chart.progressListeners)
chart.notify == orig(chart.notify)
chart.borderVisible == false
chart.borderStroke.getClass().getName() == java.awt.BasicStroke.class
chart.borderPaint has only one value
chart.borderPaint.getClass().getName() == java.awt.Color.class
chart.padding has only one value
chart.padding.unitType has only one value
chart.padding.top == 0.0
chart.padding.left == 0.0
chart.padding.bottom == 0.0
chart.padding.right == 0.0
chart.title.text.toString one of { "Pie Chart", "Test" }
chart.title.font has only one value
chart.title.textAlignment has only one value
chart.title.paint has only one value
chart.title.paint.getClass().getName() == java.awt.Color.class
chart.title.backgroundPaint == null
chart.title.toolTipText == null
chart.title.urlText == null
chart.title.expandToFitSpace == false
chart.title.position has only one value
chart.title.horizontalAlignment has only one value
chart.title.verticalAlignment has only one value
chart.title.notify == true
chart.title.id == null
chart.title.margin has only one value
chart.title.frame has only one value
chart.title.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class
chart.title.padding has only one value
chart.title.width == 0.0
chart.title.height == 0.0
chart.title.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
chart.subtitles[].getClass().getName() == [org.jfree.chart.title.LegendTitle]
chart.subtitles[].getClass().getName() elements == org.jfree.chart.title.LegendTitle.class
chart.subtitles.getClass().getName() == java.util.ArrayList.class
chart.plot.parent == null
chart.plot.datasetGroup == null
chart.plot.noDataMessage == null
chart.plot.noDataMessagePaint has only one value
chart.plot.noDataMessagePaint.getClass().getName() == java.awt.Color.class
chart.plot.outlineVisible == true
chart.plot.outlineStroke has only one value
chart.plot.outlineStroke.getClass().getName() == java.awt.BasicStroke.class
chart.plot.outlinePaint has only one value
chart.plot.outlinePaint.getClass().getName() == java.awt.Color.class
chart.plot.backgroundPaint has only one value
chart.plot.backgroundPaint.getClass().getName() == java.awt.Color.class
chart.plot.backgroundImage == null
chart.plot.backgroundImageAlignment == 15
chart.plot.backgroundImageAlpha == 0.5
chart.plot.foregroundAlpha == 1.0
chart.plot.backgroundAlpha == 1.0
chart.plot.drawingSupplier.getClass().getName() == org.jfree.chart.plot.DefaultDrawingSupplier.class
chart.backgroundPaint has only one value
chart.backgroundPaint.getClass().getName() == java.awt.Color.class
chart.backgroundImage == null
chart.backgroundImageAlignment == 15
chart.backgroundImageAlpha == 0.5
chart.notify == true
size(chart.subtitles[]) == 1
===========================================================================
org.jfree.chart.event.PlotChangeEvent:::OBJECT
org.jfree.chart.plot.Plot.ZERO has only one value
org.jfree.chart.plot.Plot.ZERO.getClass().getName() == java.lang.Integer.class
org.jfree.chart.plot.Plot.DEFAULT_INSETS has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS has only one value
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType has only one value
org.jfree.chart.plot.Plot.DEFAULT_INSETS.top == 4.0
org.jfree.chart.plot.Plot.DEFAULT_INSETS.left == 8.0
org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom == 4.0
org.jfree.chart.plot.Plot.DEFAULT_INSETS.right == 8.0
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE has only one value
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName() == java.awt.BasicStroke.class
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT has only one value
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName() == java.awt.Color.class
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT has only one value
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName() == java.awt.Color.class
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX has only one value
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName() == java.awt.geom.Rectangle2D$Double.class
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE has only one value
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == java.awt.geom.Ellipse2D$Double.class
this.plot.parent == null
this.plot.datasetGroup == null
this.plot.noDataMessage == null
this.plot.noDataMessagePaint has only one value
this.plot.noDataMessagePaint.getClass().getName() == java.awt.Color.class
this.plot.insets.unitType has only one value
this.plot.insets.top one of { 0.0, 4.0 }
this.plot.insets.left one of { 5.0, 8.0 }
this.plot.insets.bottom one of { 4.0, 5.0 }
this.plot.insets.right one of { 5.0, 8.0 }
this.plot.outlineVisible == true
this.plot.outlineStroke has only one value
this.plot.outlineStroke.getClass().getName() == java.awt.BasicStroke.class
this.plot.outlinePaint has only one value
this.plot.outlinePaint.getClass().getName() == java.awt.Color.class
this.plot.backgroundPaint has only one value
this.plot.backgroundPaint.getClass().getName() == java.awt.Color.class
this.plot.backgroundImage == null
this.plot.backgroundImageAlignment == 15
this.plot.backgroundImageAlpha == 0.5
this.plot.foregroundAlpha == 1.0
this.plot.backgroundAlpha == 1.0
this.plot.drawingSupplier.getClass().getName() == org.jfree.chart.plot.DefaultDrawingSupplier.class
this.type has only one value
org.jfree.chart.event.ChartChangeEventType.GENERAL has only one value
org.jfree.chart.event.ChartChangeEventType.NEW_DATASET has only one value
org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED has only one value
org.jfree.chart.event.ChartChangeEventType.GENERAL.name has only one value
org.jfree.chart.event.ChartChangeEventType.GENERAL.name.toString == "ChartChangeEventType.GENERAL"
org.jfree.chart.event.ChartChangeEventType.NEW_DATASET.name has only one value
org.jfree.chart.event.ChartChangeEventType.NEW_DATASET.name.toString == "ChartChangeEventType.NEW_DATASET"
org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED.name has only one value
org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED.name.toString == "ChartChangeEventType.DATASET_UPDATED"
this.type.name has only one value
this.type.name.toString == "ChartChangeEventType.GENERAL"
this.chart == null
org.jfree.chart.JFreeChart.INFO has only one value
org.jfree.chart.JFreeChart.INFO.logo == null
org.jfree.chart.JFreeChart.INFO.licenceText has only one value
org.jfree.chart.JFreeChart.INFO.licenceText.toString == "GNU LESSER GENERAL PUBLIC LICENSE\n\nVersion 2.1, February 1999\n\nCopyright (C) 1991, 1999 Free Software Foundation, Inc.\n59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\nEveryone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.\n\n[This is the first released version of the Lesser GPL.  It also counts as the successor of the GNU Library Public License, version 2, hence the version number 2.1.]\n\nPreamble\n\nThe licenses for most software are designed to take away your freedom to share and change it. By contrast, the GNU General Public Licenses are intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users.\n\nThis license, the Lesser General Public License, applies to some specially designated software packages--typically libraries--of the Free Software Foundation and other authors who decide to use it. You can use it too, but we suggest you first think carefully about whether this license or the ordinary General Public License is the better strategy to use in any particular case, based on the explanations below.\n\nWhen we speak of free software, we are referring to freedom of use, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish); that you receive source code or can get it if you want it; that you can change the software and use pieces of it in new free programs; and that you are informed that you can do these things.\n\nTo protect your rights, we need to make restrictions that forbid distributors to deny you these rights or to ask you to surrender these rights. These restrictions translate to certain responsibilities for you if you distribute copies of the library or if you modify it.\n\nFor example, if you distribute copies of the library, whether gratis or for a fee, you must give the recipients all the rights that we gave you. You must make sure that they, too, receive or can get the source code. If you link other code with the library, you must provide complete object files to the recipients, so that they can relink them with the library after making changes to the library and recompiling it. And you must show them these terms so they know their rights.\n\nWe protect your rights with a two-step method: (1) we copyright the library, and (2) we offer you this license, which gives you legal permission to copy, distribute and/or modify the library.\n\nTo protect each distributor, we want to make it very clear that there is no warranty for the free library. Also, if the library is modified by someone else and passed on, the recipients should know that what they have is not the original version, so that the original author's reputation will not be affected by problems that might be introduced by others.\n\nFinally, software patents pose a constant threat to the existence of any free program. We wish to make sure that a company cannot effectively restrict the users of a free program by obtaining a restrictive license from a patent holder. Therefore, we insist that any patent license obtained for a version of the library must be consistent with the full freedom of use specified in this license.\n\nMost GNU software, including some libraries, is covered by the ordinary GNU General Public License. This license, the GNU Lesser General Public License, applies to certain designated libraries, and is quite different from the ordinary General Public License. We use this license for certain libraries in order to permit linking those libraries into non-free programs.\n\nWhen a program is linked with a library, whether statically or using a shared library, the combination of the two is legally speaking a combined work, a derivative of the original library. The ordinary General Public License therefore permits such linking only if the entire combination fits its criteria of freedom. The Lesser General Public License permits more lax criteria for linking other code with the library.\n\nWe call this license the \"Lesser\" General Public License because it does Less to protect the user's freedom than the ordinary General Public License. It also provides other free software developers Less of an advantage over competing non-free programs. These disadvantages are the reason we use the ordinary General Public License for many libraries. However, the Lesser license provides advantages in certain special circumstances.\n\nFor example, on rare occasions, there may be a special need to encourage the widest possible use of a certain library, so that it becomes a de-facto standard. To achieve this, non-free programs must be allowed to use the library. A more frequent case is that a free library does the same job as widely used non-free libraries. In this case, there is little to gain by limiting the free library to free software only, so we use the Lesser General Public License.\n\nIn other cases, permission to use a particular library in non-free programs enables a greater number of people to use a large body of free software. For example, permission to use the GNU C Library in non-free programs enables many more people to use the whole GNU operating system, as well as its variant, the GNU/Linux operating system.\n\nAlthough the Lesser General Public License is Less protective of the users' freedom, it does ensure that the user of a program that is linked with the Library has the freedom and the wherewithal to run that program using a modified version of the Library.\n\nThe precise terms and conditions for copying, distribution and modification follow. Pay close attention to the difference between a \"work based on the library\" and a \"work that uses the library\". The former contains code derived from the library, whereas the latter must be combined with the library in order to run.\n\nTERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n0. This License Agreement applies to any software library or other program which contains a notice placed by the copyright holder or other authorized party saying it may be distributed under the terms of this Lesser General Public License (also called \"this License\"). Each licensee is addressed as \"you\".\nA \"library\" means a collection of software functions and/or data prepared so as to be conveniently linked with application programs (which use some of those functions and data) to form executables.\n\nThe \"Library\", below, refers to any such software library or work which has been distributed under these terms. A \"work based on the Library\" means either the Library or any derivative work under copyright law: that is to say, a work containing the Library or a portion of it, either verbatim or with modifications and/or translated straightforwardly into another language. (Hereinafter, translation is included without limitation in the term \"modification\".)\n\n\"Source code\" for a work means the preferred form of the work for making modifications to it. For a library, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the library.\n\nActivities other than copying, distribution and modification are not covered by this License; they are outside its scope. The act of running a program using the Library is not restricted, and output from such a program is covered only if its contents constitute a work based on the Library (independent of the use of the Library in a tool for writing it). Whether that is true depends on what the Library does and what the program that uses the Library does.\n1. You may copy and distribute verbatim copies of the Library's complete source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and distribute a copy of this License along with the Library.\n\nYou may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee.\n\n2. You may modify your copy or copies of the Library or any portion of it, thus forming a work based on the Library, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions:\n\n*    a) The modified work must itself be a software library.\n*    b) You must cause the files modified to carry prominent notices stating that you changed the files and the date of any change.\n*    c) You must cause the whole of the work to be licensed at no charge to all third parties under the terms of this License.\n*    d) If a facility in the modified Library refers to a function or a table of data to be supplied by an application program that uses the facility, other than as an argument passed when the facility is invoked, then you must make a good faith effort to ensure that, in the event an application does not supply such function or table, the facility still operates, and performs whatever part of its purpose remains meaningful.\n\n(For example, a function in a library to compute square roots has a purpose that is entirely well-defined independent of the application. Therefore, Subsection 2d requires that any application-supplied function or table used by this function must be optional: if the application does not supply it, the square root function must still compute square roots.)\n\nThese requirements apply to the modified work as a whole. If identifiable sections of that work are not derived from the Library, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works. But when you distribute the same sections as part of a whole which is a work based on the Library, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Library.\n\nIn addition, mere aggregation of another work not based on the Library with the Library (or with a work based on the Library) on a volume of a storage or distribution medium does not bring the other work under the scope of this License.\n\n3. You may opt to apply the terms of the ordinary GNU General Public License instead of this License to a given copy of the Library. To do this, you must alter all the notices that refer to this License, so that they refer to the ordinary GNU General Public License, version 2, instead of to this License. (If a newer version than version 2 of the ordinary GNU General Public License has appeared, then you can specify that version instead if you wish.) Do not make any other change in these notices.\n\nOnce this change is made in a given copy, it is irreversible for that copy, so the ordinary GNU General Public License applies to all subsequent copies and derivative works made from that copy.\n\nThis option is useful when you wish to copy part of the code of the Library into a program that is not a library.\n\n4. You may copy and distribute the Library (or a portion or derivative of it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange.\n\nIf distribution of object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place satisfies the requirement to distribute the source code, even though third parties are not compelled to copy the source along with the object code.\n\n5. A program that contains no derivative of any portion of the Library, but is designed to work with the Library by being compiled or linked with it, is called a \"work that uses the Library\". Such a work, in isolation, is not a derivative work of the Library, and therefore falls outside the scope of this License.\n\nHowever, linking a \"work that uses the Library\" with the Library creates an executable that is a derivative of the Library (because it contains portions of the Library), rather than a \"work that uses the library\". The executable is therefore covered by this License. Section 6 states terms for distribution of such executables.\n\nWhen a \"work that uses the Library\" uses material from a header file that is part of the Library, the object code for the work may be a derivative work of the Library even though the source code is not. Whether this is true is especially significant if the work can be linked without the Library, or if the work is itself a library. The threshold for this to be true is not precisely defined by law.\n\nIf such an object file uses only numerical parameters, data structure layouts and accessors, and small macros and small inline functions (ten lines or less in length), then the use of the object file is unrestricted, regardless of whether it is legally a derivative work. (Executables containing this object code plus portions of the Library will still fall under Section 6.)\n\nOtherwise, if the work is a derivative of the Library, you may distribute the object code for the work under the terms of Section 6. Any executables containing that work also fall under Section 6, whether or not they are linked directly with the Library itself.\n\n6. As an exception to the Sections above, you may also combine or link a \"work that uses the Library\" with the Library to produce a work containing portions of the Library, and distribute that work under terms of your choice, provided that the terms permit modification of the work for the customer's own use and reverse engineering for debugging such modifications.\n\nYou must give prominent notice with each copy of the work that the Library is used in it and that the Library and its use are covered by this License. You must supply a copy of this License. If the work during execution displays copyright notices, you must include the copyright notice for the Library among them, as well as a reference directing the user to the copy of this License. Also, you must do one of these things:\n\n*    a) Accompany the work with the complete corresponding machine-readable source code for the Library including whatever changes were used in the work (which must be distributed under Sections 1 and 2 above); and, if the work is an executable linked with the Library, with the complete machine-readable \"work that uses the Library\", as object code and/or source code, so that the user can modify the Library and then relink to produce a modified executable containing the modified Library. (It is understood that the user who changes the contents of definitions files in the Library will not necessarily be able to recompile the application to use the modified definitions.)\n*    b) Use a suitable shared library mechanism for linking with the Library. A suitable mechanism is one that (1) uses at run time a copy of the library already present on the user's computer system, rather than copying library functions into the executable, and (2) will operate properly with a modified version of the library, if the user installs one, as long as the modified version is interface-compatible with the version that the work was made with.\n*    c) Accompany the work with a written offer, valid for at least three years, to give the same user the materials specified in Subsection 6a, above, for a charge no more than the cost of performing this distribution.\n*    d) If distribution of the work is made by offering access to copy from a designated place, offer equivalent access to copy the above specified materials from the same place.\n*    e) Verify that the user has already received a copy of these materials or that you have already sent this user a copy.\n\nFor an executable, the required form of the \"work that uses the Library\" must include any data and utility programs needed for reproducing the executable from it. However, as a special exception, the materials to be distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable.\n\nIt may happen that this requirement contradicts the license restrictions of other proprietary libraries that do not normally accompany the operating system. Such a contradiction means you cannot use both them and the Library together in an executable that you distribute.\n\n7. You may place library facilities that are a work based on the Library side-by-side in a single library together with other library facilities not covered by this License, and distribute such a combined library, provided that the separate distribution of the work based on the Library and of the other library facilities is otherwise permitted, and provided that you do these two things:\n\n*    a) Accompany the combined library with a copy of the same work based on the Library, uncombined with any other library facilities. This must be distributed under the terms of the Sections above.\n*    b) Give prominent notice with the combined library of the fact that part of it is a work based on the Library, and explaining where to find the accompanying uncombined form of the same work.\n\n8. You may not copy, modify, sublicense, link with, or distribute the Library except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense, link with, or distribute the Library is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance.\n\n9. You are not required to accept this License, since you have not signed it. However, nothing else grants you permission to modify or distribute the Library or its derivative works. These actions are prohibited by law if you do not accept this License. Therefore, by modifying or distributing the Library (or any work based on the Library), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Library or works based on it.\n\n10. Each time you redistribute the Library (or any work based on the Library), the recipient automatically receives a license from the original licensor to copy, distribute, link with or modify the Library subject to these terms and conditions. You may not impose any further restrictions on the recipients' exercise of the rights granted herein. You are not responsible for enforcing compliance by third parties with this License.\n\n11. If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Library at all. For example, if a patent license would not permit royalty-free redistribution of the Library by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Library.\n\nIf any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply, and the section as a whole is intended to apply in other circumstances.\n\nIt is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system which is implemented by public license practices. Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice.\n\nThis section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License.\n\n12. If the distribution and/or use of the Library is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Library under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded. In such case, this License incorporates the limitation as if written in the body of this License.\n\n13. The Free Software Foundation may publish revised and/or new versions of the Lesser General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.\n\nEach version is given a distinguishing version number. If the Library specifies a version number of this License which applies to it and \"any later version\", you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation. If the Library does not specify a license version number, you may choose any version ever published by the Free Software Foundation.\n\n14. If you wish to incorporate parts of the Library into other free programs whose distribution conditions are incompatible with these, write to the author to ask for permission. For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this. Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally.\n\nNO WARRANTY\n\n15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE LIBRARY \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE LIBRARY IS WITH YOU. SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n\nEND OF TERMS AND CONDITIONS\n\n\nHow to Apply These Terms to Your New Libraries\n\nIf you develop a new library, and you want it to be of the greatest possible use to the public, we recommend making it free software that everyone can redistribute and change. You can do so by permitting redistribution under these terms (or, alternatively, under the terms of the ordinary General Public License).\n\nTo apply these terms, attach the following notices to the library.  It is safest to attach them to the start of each source file to most effectively convey the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.\n\n<one line to give the library's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.\n\nThis library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\nAlso add information on how to contact you by electronic and paper mail.\n\nYou should also get your employer (if you work as a programmer) or your school, if any, to sign a \"copyright disclaimer\" for the library, if necessary.  Here is a sample; alter the names:\n\nYoyodyne, Inc., hereby disclaims all copyright interest in the library `Frob' (a library for tweaking knobs) written by James Random Hacker.\n\n<signature of Ty Coon>, 1 April 1990\nTy Coon, President of Vice\n\nThat's all there is to it!\n"
org.jfree.chart.JFreeChart.INFO.contributors has only one value
org.jfree.chart.JFreeChart.INFO.contributors[] contains no nulls and has only one value, of length 85
org.jfree.chart.JFreeChart.INFO.contributors[].getClass().getName() == [org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor]
org.jfree.chart.JFreeChart.INFO.contributors[].getClass().getName() elements == org.jfree.chart.ui.Contributor.class
org.jfree.chart.JFreeChart.INFO.contributors.getClass().getName() == java.util.Arrays$ArrayList.class
org.jfree.chart.JFreeChart.INFO.copyright has only one value
org.jfree.chart.JFreeChart.INFO.copyright.toString == "(C)opyright 2000-2007, by Object Refinery Limited and Contributors"
org.jfree.chart.JFreeChart.INFO.libraries has only one value
org.jfree.chart.JFreeChart.INFO.libraries[] == []
org.jfree.chart.JFreeChart.INFO.libraries[].getClass().getName() == []
org.jfree.chart.JFreeChart.INFO.libraries.getClass().getName() == java.util.ArrayList.class
org.jfree.chart.JFreeChart.INFO.optionalLibraries has only one value
org.jfree.chart.JFreeChart.INFO.optionalLibraries[] == []
org.jfree.chart.JFreeChart.INFO.optionalLibraries[].getClass().getName() == []
org.jfree.chart.JFreeChart.INFO.optionalLibraries.getClass().getName() == java.util.ArrayList.class
org.jfree.chart.JFreeChart.INFO.name has only one value
org.jfree.chart.JFreeChart.INFO.name.toString == "JFreeChart"
org.jfree.chart.JFreeChart.INFO.version has only one value
org.jfree.chart.JFreeChart.INFO.version.toString == "1.2.0-pre"
org.jfree.chart.JFreeChart.INFO.licenceName has only one value
org.jfree.chart.JFreeChart.INFO.licenceName.toString == "LGPL"
org.jfree.chart.JFreeChart.INFO.info has only one value
org.jfree.chart.JFreeChart.INFO.info.toString == "http://www.jfree.org/jfreechart/index.html"
org.jfree.chart.JFreeChart.DEFAULT_TITLE_FONT has only one value
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT has only one value
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName() == java.awt.Color.class
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_IMAGE == null
org.jfree.chart.title.TextTitle.DEFAULT_FONT has only one value
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT has only one value
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT.getClass().getName() == java.awt.Color.class
org.jfree.chart.title.Title.DEFAULT_POSITION has only one value
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT has only one value
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT has only one value
org.jfree.chart.title.Title.DEFAULT_PADDING has only one value
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener has only one value
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartChangeListener == null
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartProgressListener == null
size(org.jfree.chart.JFreeChart.INFO.contributors[]) == 85
===========================================================================
org.jfree.chart.event.PlotChangeEvent.PlotChangeEvent(org.jfree.chart.plot.Plot):::ENTER
org.jfree.chart.plot.Plot.ZERO has only one value
org.jfree.chart.plot.Plot.ZERO.getClass().getName() == java.lang.Integer.class
org.jfree.chart.plot.Plot.DEFAULT_INSETS has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS has only one value
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType has only one value
org.jfree.chart.plot.Plot.DEFAULT_INSETS.top == 4.0
org.jfree.chart.plot.Plot.DEFAULT_INSETS.left == 8.0
org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom == 4.0
org.jfree.chart.plot.Plot.DEFAULT_INSETS.right == 8.0
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE has only one value
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName() == java.awt.BasicStroke.class
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT has only one value
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName() == java.awt.Color.class
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT has only one value
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName() == java.awt.Color.class
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX has only one value
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName() == java.awt.geom.Rectangle2D$Double.class
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE has only one value
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == java.awt.geom.Ellipse2D$Double.class
plot.parent == null
plot.datasetGroup == null
plot.noDataMessage == null
plot.noDataMessagePaint has only one value
plot.noDataMessagePaint.getClass().getName() == java.awt.Color.class
plot.insets.unitType has only one value
plot.insets.top one of { 0.0, 4.0 }
plot.insets.left one of { 5.0, 8.0 }
plot.insets.bottom one of { 4.0, 5.0 }
plot.insets.right one of { 5.0, 8.0 }
plot.outlineVisible == true
plot.outlineStroke has only one value
plot.outlineStroke.getClass().getName() == java.awt.BasicStroke.class
plot.outlinePaint has only one value
plot.outlinePaint.getClass().getName() == java.awt.Color.class
plot.backgroundPaint has only one value
plot.backgroundPaint.getClass().getName() == java.awt.Color.class
plot.backgroundImage == null
plot.backgroundImageAlignment == 15
plot.backgroundImageAlpha == 0.5
plot.foregroundAlpha == 1.0
plot.backgroundAlpha == 1.0
plot.drawingSupplier.getClass().getName() == org.jfree.chart.plot.DefaultDrawingSupplier.class
===========================================================================
org.jfree.chart.event.PlotChangeEvent.PlotChangeEvent(org.jfree.chart.plot.Plot):::EXIT
org.jfree.chart.plot.Plot.ZERO == orig(org.jfree.chart.plot.Plot.ZERO)
org.jfree.chart.plot.Plot.ZERO.getClass().getName() == orig(org.jfree.chart.plot.Plot.ZERO.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_INSETS == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.top == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.top)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.left == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.left)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.right == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.right)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName())
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener == orig(org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener)
plot.parent == orig(plot.parent)
plot.datasetGroup == orig(plot.datasetGroup)
plot.noDataMessage == orig(plot.noDataMessage)
plot.noDataMessageFont == orig(plot.noDataMessageFont)
plot.noDataMessagePaint == orig(plot.noDataMessagePaint)
plot.noDataMessagePaint.getClass().getName() == orig(plot.noDataMessagePaint.getClass().getName())
plot.insets == orig(plot.insets)
plot.insets.unitType == orig(plot.insets.unitType)
plot.insets.top == orig(plot.insets.top)
plot.insets.left == orig(plot.insets.left)
plot.insets.bottom == orig(plot.insets.bottom)
plot.insets.right == orig(plot.insets.right)
plot.outlineVisible == orig(plot.outlineVisible)
plot.outlineStroke == orig(plot.outlineStroke)
plot.outlineStroke.getClass().getName() == orig(plot.outlineStroke.getClass().getName())
plot.outlinePaint == orig(plot.outlinePaint)
plot.outlinePaint.getClass().getName() == orig(plot.outlinePaint.getClass().getName())
plot.backgroundPaint == orig(plot.backgroundPaint)
plot.backgroundPaint.getClass().getName() == orig(plot.backgroundPaint.getClass().getName())
plot.backgroundImage == orig(plot.backgroundImage)
plot.backgroundImageAlignment == orig(plot.backgroundImageAlignment)
plot.backgroundImageAlpha == orig(plot.backgroundImageAlpha)
plot.foregroundAlpha == orig(plot.foregroundAlpha)
plot.backgroundAlpha == orig(plot.backgroundAlpha)
plot.drawingSupplier == orig(plot.drawingSupplier)
plot.drawingSupplier.getClass().getName() == orig(plot.drawingSupplier.getClass().getName())
plot.listenerList == orig(plot.listenerList)
plot.parent == null
plot.datasetGroup == null
plot.noDataMessage == null
plot.noDataMessagePaint has only one value
plot.noDataMessagePaint.getClass().getName() == java.awt.Color.class
plot.insets.unitType has only one value
plot.insets.top one of { 0.0, 4.0 }
plot.insets.left one of { 5.0, 8.0 }
plot.insets.bottom one of { 4.0, 5.0 }
plot.insets.right one of { 5.0, 8.0 }
plot.outlineVisible == true
plot.outlineStroke has only one value
plot.outlineStroke.getClass().getName() == java.awt.BasicStroke.class
plot.outlinePaint has only one value
plot.outlinePaint.getClass().getName() == java.awt.Color.class
plot.backgroundPaint has only one value
plot.backgroundPaint.getClass().getName() == java.awt.Color.class
plot.backgroundImage == null
plot.backgroundImageAlignment == 15
plot.backgroundImageAlpha == 0.5
plot.foregroundAlpha == 1.0
plot.backgroundAlpha == 1.0
plot.drawingSupplier.getClass().getName() == org.jfree.chart.plot.DefaultDrawingSupplier.class
===========================================================================
org.jfree.chart.event.TitleChangeEvent:::OBJECT
this.title.getClass().getName() == org.jfree.chart.title.LegendTitle.class
org.jfree.chart.title.Title.DEFAULT_POSITION has only one value
org.jfree.chart.util.RectangleEdge.TOP has only one value
org.jfree.chart.util.RectangleEdge.BOTTOM has only one value
org.jfree.chart.util.RectangleEdge.LEFT has only one value
org.jfree.chart.util.RectangleEdge.RIGHT has only one value
org.jfree.chart.title.Title.DEFAULT_POSITION.name has only one value
org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString == "RectangleEdge.TOP"
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT has only one value
org.jfree.chart.util.HorizontalAlignment.LEFT has only one value
org.jfree.chart.util.HorizontalAlignment.RIGHT has only one value
org.jfree.chart.util.HorizontalAlignment.CENTER has only one value
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name has only one value
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString == "HorizontalAlignment.CENTER"
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT has only one value
org.jfree.chart.util.VerticalAlignment.TOP has only one value
org.jfree.chart.util.VerticalAlignment.BOTTOM has only one value
org.jfree.chart.util.VerticalAlignment.CENTER has only one value
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name has only one value
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString == "VerticalAlignment.CENTER"
org.jfree.chart.title.Title.DEFAULT_PADDING has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS has only one value
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType has only one value
org.jfree.chart.title.Title.DEFAULT_PADDING.top == 1.0
org.jfree.chart.title.Title.DEFAULT_PADDING.left == 1.0
org.jfree.chart.title.Title.DEFAULT_PADDING.bottom == 1.0
org.jfree.chart.title.Title.DEFAULT_PADDING.right == 1.0
this.title.position.name.toString one of { "RectangleEdge.BOTTOM", "RectangleEdge.TOP" }
this.title.horizontalAlignment has only one value
this.title.horizontalAlignment.name has only one value
this.title.horizontalAlignment.name.toString == "HorizontalAlignment.CENTER"
this.title.verticalAlignment has only one value
this.title.verticalAlignment.name has only one value
this.title.verticalAlignment.name.toString == "VerticalAlignment.CENTER"
this.title.notify == true
this.title.id == null
this.title.margin.unitType has only one value
this.title.margin.top == 1.0
this.title.margin.left == 1.0
this.title.margin.bottom == 1.0
this.title.margin.right == 1.0
this.title.frame.getClass().getName() == org.jfree.chart.block.LineBorder.class
this.title.padding has only one value
this.title.padding.unitType has only one value
this.title.padding.top == 1.0
this.title.padding.left == 1.0
this.title.padding.bottom == 1.0
this.title.padding.right == 1.0
this.title.width == 0.0
this.title.height == 0.0
this.title.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
this.type has only one value
org.jfree.chart.event.ChartChangeEventType.GENERAL has only one value
org.jfree.chart.event.ChartChangeEventType.NEW_DATASET has only one value
org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED has only one value
org.jfree.chart.event.ChartChangeEventType.GENERAL.name has only one value
org.jfree.chart.event.ChartChangeEventType.GENERAL.name.toString == "ChartChangeEventType.GENERAL"
org.jfree.chart.event.ChartChangeEventType.NEW_DATASET.name has only one value
org.jfree.chart.event.ChartChangeEventType.NEW_DATASET.name.toString == "ChartChangeEventType.NEW_DATASET"
org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED.name has only one value
org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED.name.toString == "ChartChangeEventType.DATASET_UPDATED"
this.type.name has only one value
this.type.name.toString == "ChartChangeEventType.GENERAL"
this.chart == null
org.jfree.chart.JFreeChart.INFO has only one value
org.jfree.chart.JFreeChart.INFO.logo == null
org.jfree.chart.JFreeChart.INFO.licenceText has only one value
org.jfree.chart.JFreeChart.INFO.licenceText.toString == "GNU LESSER GENERAL PUBLIC LICENSE\n\nVersion 2.1, February 1999\n\nCopyright (C) 1991, 1999 Free Software Foundation, Inc.\n59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\nEveryone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.\n\n[This is the first released version of the Lesser GPL.  It also counts as the successor of the GNU Library Public License, version 2, hence the version number 2.1.]\n\nPreamble\n\nThe licenses for most software are designed to take away your freedom to share and change it. By contrast, the GNU General Public Licenses are intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users.\n\nThis license, the Lesser General Public License, applies to some specially designated software packages--typically libraries--of the Free Software Foundation and other authors who decide to use it. You can use it too, but we suggest you first think carefully about whether this license or the ordinary General Public License is the better strategy to use in any particular case, based on the explanations below.\n\nWhen we speak of free software, we are referring to freedom of use, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish); that you receive source code or can get it if you want it; that you can change the software and use pieces of it in new free programs; and that you are informed that you can do these things.\n\nTo protect your rights, we need to make restrictions that forbid distributors to deny you these rights or to ask you to surrender these rights. These restrictions translate to certain responsibilities for you if you distribute copies of the library or if you modify it.\n\nFor example, if you distribute copies of the library, whether gratis or for a fee, you must give the recipients all the rights that we gave you. You must make sure that they, too, receive or can get the source code. If you link other code with the library, you must provide complete object files to the recipients, so that they can relink them with the library after making changes to the library and recompiling it. And you must show them these terms so they know their rights.\n\nWe protect your rights with a two-step method: (1) we copyright the library, and (2) we offer you this license, which gives you legal permission to copy, distribute and/or modify the library.\n\nTo protect each distributor, we want to make it very clear that there is no warranty for the free library. Also, if the library is modified by someone else and passed on, the recipients should know that what they have is not the original version, so that the original author's reputation will not be affected by problems that might be introduced by others.\n\nFinally, software patents pose a constant threat to the existence of any free program. We wish to make sure that a company cannot effectively restrict the users of a free program by obtaining a restrictive license from a patent holder. Therefore, we insist that any patent license obtained for a version of the library must be consistent with the full freedom of use specified in this license.\n\nMost GNU software, including some libraries, is covered by the ordinary GNU General Public License. This license, the GNU Lesser General Public License, applies to certain designated libraries, and is quite different from the ordinary General Public License. We use this license for certain libraries in order to permit linking those libraries into non-free programs.\n\nWhen a program is linked with a library, whether statically or using a shared library, the combination of the two is legally speaking a combined work, a derivative of the original library. The ordinary General Public License therefore permits such linking only if the entire combination fits its criteria of freedom. The Lesser General Public License permits more lax criteria for linking other code with the library.\n\nWe call this license the \"Lesser\" General Public License because it does Less to protect the user's freedom than the ordinary General Public License. It also provides other free software developers Less of an advantage over competing non-free programs. These disadvantages are the reason we use the ordinary General Public License for many libraries. However, the Lesser license provides advantages in certain special circumstances.\n\nFor example, on rare occasions, there may be a special need to encourage the widest possible use of a certain library, so that it becomes a de-facto standard. To achieve this, non-free programs must be allowed to use the library. A more frequent case is that a free library does the same job as widely used non-free libraries. In this case, there is little to gain by limiting the free library to free software only, so we use the Lesser General Public License.\n\nIn other cases, permission to use a particular library in non-free programs enables a greater number of people to use a large body of free software. For example, permission to use the GNU C Library in non-free programs enables many more people to use the whole GNU operating system, as well as its variant, the GNU/Linux operating system.\n\nAlthough the Lesser General Public License is Less protective of the users' freedom, it does ensure that the user of a program that is linked with the Library has the freedom and the wherewithal to run that program using a modified version of the Library.\n\nThe precise terms and conditions for copying, distribution and modification follow. Pay close attention to the difference between a \"work based on the library\" and a \"work that uses the library\". The former contains code derived from the library, whereas the latter must be combined with the library in order to run.\n\nTERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n0. This License Agreement applies to any software library or other program which contains a notice placed by the copyright holder or other authorized party saying it may be distributed under the terms of this Lesser General Public License (also called \"this License\"). Each licensee is addressed as \"you\".\nA \"library\" means a collection of software functions and/or data prepared so as to be conveniently linked with application programs (which use some of those functions and data) to form executables.\n\nThe \"Library\", below, refers to any such software library or work which has been distributed under these terms. A \"work based on the Library\" means either the Library or any derivative work under copyright law: that is to say, a work containing the Library or a portion of it, either verbatim or with modifications and/or translated straightforwardly into another language. (Hereinafter, translation is included without limitation in the term \"modification\".)\n\n\"Source code\" for a work means the preferred form of the work for making modifications to it. For a library, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the library.\n\nActivities other than copying, distribution and modification are not covered by this License; they are outside its scope. The act of running a program using the Library is not restricted, and output from such a program is covered only if its contents constitute a work based on the Library (independent of the use of the Library in a tool for writing it). Whether that is true depends on what the Library does and what the program that uses the Library does.\n1. You may copy and distribute verbatim copies of the Library's complete source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and distribute a copy of this License along with the Library.\n\nYou may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee.\n\n2. You may modify your copy or copies of the Library or any portion of it, thus forming a work based on the Library, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions:\n\n*    a) The modified work must itself be a software library.\n*    b) You must cause the files modified to carry prominent notices stating that you changed the files and the date of any change.\n*    c) You must cause the whole of the work to be licensed at no charge to all third parties under the terms of this License.\n*    d) If a facility in the modified Library refers to a function or a table of data to be supplied by an application program that uses the facility, other than as an argument passed when the facility is invoked, then you must make a good faith effort to ensure that, in the event an application does not supply such function or table, the facility still operates, and performs whatever part of its purpose remains meaningful.\n\n(For example, a function in a library to compute square roots has a purpose that is entirely well-defined independent of the application. Therefore, Subsection 2d requires that any application-supplied function or table used by this function must be optional: if the application does not supply it, the square root function must still compute square roots.)\n\nThese requirements apply to the modified work as a whole. If identifiable sections of that work are not derived from the Library, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works. But when you distribute the same sections as part of a whole which is a work based on the Library, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Library.\n\nIn addition, mere aggregation of another work not based on the Library with the Library (or with a work based on the Library) on a volume of a storage or distribution medium does not bring the other work under the scope of this License.\n\n3. You may opt to apply the terms of the ordinary GNU General Public License instead of this License to a given copy of the Library. To do this, you must alter all the notices that refer to this License, so that they refer to the ordinary GNU General Public License, version 2, instead of to this License. (If a newer version than version 2 of the ordinary GNU General Public License has appeared, then you can specify that version instead if you wish.) Do not make any other change in these notices.\n\nOnce this change is made in a given copy, it is irreversible for that copy, so the ordinary GNU General Public License applies to all subsequent copies and derivative works made from that copy.\n\nThis option is useful when you wish to copy part of the code of the Library into a program that is not a library.\n\n4. You may copy and distribute the Library (or a portion or derivative of it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange.\n\nIf distribution of object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place satisfies the requirement to distribute the source code, even though third parties are not compelled to copy the source along with the object code.\n\n5. A program that contains no derivative of any portion of the Library, but is designed to work with the Library by being compiled or linked with it, is called a \"work that uses the Library\". Such a work, in isolation, is not a derivative work of the Library, and therefore falls outside the scope of this License.\n\nHowever, linking a \"work that uses the Library\" with the Library creates an executable that is a derivative of the Library (because it contains portions of the Library), rather than a \"work that uses the library\". The executable is therefore covered by this License. Section 6 states terms for distribution of such executables.\n\nWhen a \"work that uses the Library\" uses material from a header file that is part of the Library, the object code for the work may be a derivative work of the Library even though the source code is not. Whether this is true is especially significant if the work can be linked without the Library, or if the work is itself a library. The threshold for this to be true is not precisely defined by law.\n\nIf such an object file uses only numerical parameters, data structure layouts and accessors, and small macros and small inline functions (ten lines or less in length), then the use of the object file is unrestricted, regardless of whether it is legally a derivative work. (Executables containing this object code plus portions of the Library will still fall under Section 6.)\n\nOtherwise, if the work is a derivative of the Library, you may distribute the object code for the work under the terms of Section 6. Any executables containing that work also fall under Section 6, whether or not they are linked directly with the Library itself.\n\n6. As an exception to the Sections above, you may also combine or link a \"work that uses the Library\" with the Library to produce a work containing portions of the Library, and distribute that work under terms of your choice, provided that the terms permit modification of the work for the customer's own use and reverse engineering for debugging such modifications.\n\nYou must give prominent notice with each copy of the work that the Library is used in it and that the Library and its use are covered by this License. You must supply a copy of this License. If the work during execution displays copyright notices, you must include the copyright notice for the Library among them, as well as a reference directing the user to the copy of this License. Also, you must do one of these things:\n\n*    a) Accompany the work with the complete corresponding machine-readable source code for the Library including whatever changes were used in the work (which must be distributed under Sections 1 and 2 above); and, if the work is an executable linked with the Library, with the complete machine-readable \"work that uses the Library\", as object code and/or source code, so that the user can modify the Library and then relink to produce a modified executable containing the modified Library. (It is understood that the user who changes the contents of definitions files in the Library will not necessarily be able to recompile the application to use the modified definitions.)\n*    b) Use a suitable shared library mechanism for linking with the Library. A suitable mechanism is one that (1) uses at run time a copy of the library already present on the user's computer system, rather than copying library functions into the executable, and (2) will operate properly with a modified version of the library, if the user installs one, as long as the modified version is interface-compatible with the version that the work was made with.\n*    c) Accompany the work with a written offer, valid for at least three years, to give the same user the materials specified in Subsection 6a, above, for a charge no more than the cost of performing this distribution.\n*    d) If distribution of the work is made by offering access to copy from a designated place, offer equivalent access to copy the above specified materials from the same place.\n*    e) Verify that the user has already received a copy of these materials or that you have already sent this user a copy.\n\nFor an executable, the required form of the \"work that uses the Library\" must include any data and utility programs needed for reproducing the executable from it. However, as a special exception, the materials to be distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable.\n\nIt may happen that this requirement contradicts the license restrictions of other proprietary libraries that do not normally accompany the operating system. Such a contradiction means you cannot use both them and the Library together in an executable that you distribute.\n\n7. You may place library facilities that are a work based on the Library side-by-side in a single library together with other library facilities not covered by this License, and distribute such a combined library, provided that the separate distribution of the work based on the Library and of the other library facilities is otherwise permitted, and provided that you do these two things:\n\n*    a) Accompany the combined library with a copy of the same work based on the Library, uncombined with any other library facilities. This must be distributed under the terms of the Sections above.\n*    b) Give prominent notice with the combined library of the fact that part of it is a work based on the Library, and explaining where to find the accompanying uncombined form of the same work.\n\n8. You may not copy, modify, sublicense, link with, or distribute the Library except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense, link with, or distribute the Library is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance.\n\n9. You are not required to accept this License, since you have not signed it. However, nothing else grants you permission to modify or distribute the Library or its derivative works. These actions are prohibited by law if you do not accept this License. Therefore, by modifying or distributing the Library (or any work based on the Library), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Library or works based on it.\n\n10. Each time you redistribute the Library (or any work based on the Library), the recipient automatically receives a license from the original licensor to copy, distribute, link with or modify the Library subject to these terms and conditions. You may not impose any further restrictions on the recipients' exercise of the rights granted herein. You are not responsible for enforcing compliance by third parties with this License.\n\n11. If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Library at all. For example, if a patent license would not permit royalty-free redistribution of the Library by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Library.\n\nIf any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply, and the section as a whole is intended to apply in other circumstances.\n\nIt is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system which is implemented by public license practices. Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice.\n\nThis section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License.\n\n12. If the distribution and/or use of the Library is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Library under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded. In such case, this License incorporates the limitation as if written in the body of this License.\n\n13. The Free Software Foundation may publish revised and/or new versions of the Lesser General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.\n\nEach version is given a distinguishing version number. If the Library specifies a version number of this License which applies to it and \"any later version\", you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation. If the Library does not specify a license version number, you may choose any version ever published by the Free Software Foundation.\n\n14. If you wish to incorporate parts of the Library into other free programs whose distribution conditions are incompatible with these, write to the author to ask for permission. For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this. Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally.\n\nNO WARRANTY\n\n15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE LIBRARY \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE LIBRARY IS WITH YOU. SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n\nEND OF TERMS AND CONDITIONS\n\n\nHow to Apply These Terms to Your New Libraries\n\nIf you develop a new library, and you want it to be of the greatest possible use to the public, we recommend making it free software that everyone can redistribute and change. You can do so by permitting redistribution under these terms (or, alternatively, under the terms of the ordinary General Public License).\n\nTo apply these terms, attach the following notices to the library.  It is safest to attach them to the start of each source file to most effectively convey the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.\n\n<one line to give the library's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.\n\nThis library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\nAlso add information on how to contact you by electronic and paper mail.\n\nYou should also get your employer (if you work as a programmer) or your school, if any, to sign a \"copyright disclaimer\" for the library, if necessary.  Here is a sample; alter the names:\n\nYoyodyne, Inc., hereby disclaims all copyright interest in the library `Frob' (a library for tweaking knobs) written by James Random Hacker.\n\n<signature of Ty Coon>, 1 April 1990\nTy Coon, President of Vice\n\nThat's all there is to it!\n"
org.jfree.chart.JFreeChart.INFO.contributors has only one value
org.jfree.chart.JFreeChart.INFO.contributors[] contains no nulls and has only one value, of length 85
org.jfree.chart.JFreeChart.INFO.contributors[].getClass().getName() == [org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor]
org.jfree.chart.JFreeChart.INFO.contributors[].getClass().getName() elements == org.jfree.chart.ui.Contributor.class
org.jfree.chart.JFreeChart.INFO.contributors.getClass().getName() == java.util.Arrays$ArrayList.class
org.jfree.chart.JFreeChart.INFO.copyright has only one value
org.jfree.chart.JFreeChart.INFO.copyright.toString == "(C)opyright 2000-2007, by Object Refinery Limited and Contributors"
org.jfree.chart.JFreeChart.INFO.libraries has only one value
org.jfree.chart.JFreeChart.INFO.libraries[] == []
org.jfree.chart.JFreeChart.INFO.libraries[].getClass().getName() == []
org.jfree.chart.JFreeChart.INFO.libraries.getClass().getName() == java.util.ArrayList.class
org.jfree.chart.JFreeChart.INFO.optionalLibraries has only one value
org.jfree.chart.JFreeChart.INFO.optionalLibraries[] == []
org.jfree.chart.JFreeChart.INFO.optionalLibraries[].getClass().getName() == []
org.jfree.chart.JFreeChart.INFO.optionalLibraries.getClass().getName() == java.util.ArrayList.class
org.jfree.chart.JFreeChart.INFO.name has only one value
org.jfree.chart.JFreeChart.INFO.name.toString == "JFreeChart"
org.jfree.chart.JFreeChart.INFO.version has only one value
org.jfree.chart.JFreeChart.INFO.version.toString == "1.2.0-pre"
org.jfree.chart.JFreeChart.INFO.licenceName has only one value
org.jfree.chart.JFreeChart.INFO.licenceName.toString == "LGPL"
org.jfree.chart.JFreeChart.INFO.info has only one value
org.jfree.chart.JFreeChart.INFO.info.toString == "http://www.jfree.org/jfreechart/index.html"
org.jfree.chart.JFreeChart.DEFAULT_TITLE_FONT has only one value
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT has only one value
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName() == java.awt.Color.class
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_IMAGE == null
org.jfree.chart.title.TextTitle.DEFAULT_FONT has only one value
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT has only one value
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT.getClass().getName() == java.awt.Color.class
org.jfree.chart.plot.Plot.ZERO has only one value
org.jfree.chart.plot.Plot.ZERO.getClass().getName() == java.lang.Integer.class
org.jfree.chart.plot.Plot.DEFAULT_INSETS has only one value
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE has only one value
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName() == java.awt.BasicStroke.class
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT has only one value
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName() == java.awt.Color.class
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT has only one value
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName() == java.awt.Color.class
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX has only one value
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName() == java.awt.geom.Rectangle2D$Double.class
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE has only one value
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == java.awt.geom.Ellipse2D$Double.class
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener has only one value
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartChangeListener == null
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartProgressListener == null
size(org.jfree.chart.JFreeChart.INFO.contributors[]) == 85
===========================================================================
org.jfree.chart.event.TitleChangeEvent.TitleChangeEvent(org.jfree.chart.title.Title):::ENTER
title.getClass().getName() == org.jfree.chart.title.LegendTitle.class
org.jfree.chart.title.Title.DEFAULT_POSITION has only one value
org.jfree.chart.util.RectangleEdge.TOP has only one value
org.jfree.chart.util.RectangleEdge.BOTTOM has only one value
org.jfree.chart.util.RectangleEdge.LEFT has only one value
org.jfree.chart.util.RectangleEdge.RIGHT has only one value
org.jfree.chart.title.Title.DEFAULT_POSITION.name has only one value
org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString == "RectangleEdge.TOP"
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT has only one value
org.jfree.chart.util.HorizontalAlignment.LEFT has only one value
org.jfree.chart.util.HorizontalAlignment.RIGHT has only one value
org.jfree.chart.util.HorizontalAlignment.CENTER has only one value
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name has only one value
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString == "HorizontalAlignment.CENTER"
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT has only one value
org.jfree.chart.util.VerticalAlignment.TOP has only one value
org.jfree.chart.util.VerticalAlignment.BOTTOM has only one value
org.jfree.chart.util.VerticalAlignment.CENTER has only one value
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name has only one value
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString == "VerticalAlignment.CENTER"
org.jfree.chart.title.Title.DEFAULT_PADDING has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS has only one value
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType has only one value
org.jfree.chart.title.Title.DEFAULT_PADDING.top == 1.0
org.jfree.chart.title.Title.DEFAULT_PADDING.left == 1.0
org.jfree.chart.title.Title.DEFAULT_PADDING.bottom == 1.0
org.jfree.chart.title.Title.DEFAULT_PADDING.right == 1.0
title.position.name.toString one of { "RectangleEdge.BOTTOM", "RectangleEdge.TOP" }
title.horizontalAlignment has only one value
title.horizontalAlignment.name has only one value
title.horizontalAlignment.name.toString == "HorizontalAlignment.CENTER"
title.verticalAlignment has only one value
title.verticalAlignment.name has only one value
title.verticalAlignment.name.toString == "VerticalAlignment.CENTER"
title.notify == true
title.id == null
title.margin.unitType has only one value
title.margin.top == 1.0
title.margin.left == 1.0
title.margin.bottom == 1.0
title.margin.right == 1.0
title.frame.getClass().getName() == org.jfree.chart.block.LineBorder.class
title.padding has only one value
title.padding.unitType has only one value
title.padding.top == 1.0
title.padding.left == 1.0
title.padding.bottom == 1.0
title.padding.right == 1.0
title.width == 0.0
title.height == 0.0
title.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
===========================================================================
org.jfree.chart.event.TitleChangeEvent.TitleChangeEvent(org.jfree.chart.title.Title):::EXIT
org.jfree.chart.title.Title.DEFAULT_POSITION == orig(org.jfree.chart.title.Title.DEFAULT_POSITION)
org.jfree.chart.util.RectangleEdge.TOP == orig(org.jfree.chart.util.RectangleEdge.TOP)
org.jfree.chart.util.RectangleEdge.BOTTOM == orig(org.jfree.chart.util.RectangleEdge.BOTTOM)
org.jfree.chart.util.RectangleEdge.LEFT == orig(org.jfree.chart.util.RectangleEdge.LEFT)
org.jfree.chart.util.RectangleEdge.RIGHT == orig(org.jfree.chart.util.RectangleEdge.RIGHT)
org.jfree.chart.title.Title.DEFAULT_POSITION.name == orig(org.jfree.chart.title.Title.DEFAULT_POSITION.name)
org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT)
org.jfree.chart.util.HorizontalAlignment.LEFT == orig(org.jfree.chart.util.HorizontalAlignment.LEFT)
org.jfree.chart.util.HorizontalAlignment.RIGHT == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT)
org.jfree.chart.util.HorizontalAlignment.CENTER == orig(org.jfree.chart.util.HorizontalAlignment.CENTER)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT)
org.jfree.chart.util.VerticalAlignment.TOP == orig(org.jfree.chart.util.VerticalAlignment.TOP)
org.jfree.chart.util.VerticalAlignment.BOTTOM == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM)
org.jfree.chart.util.VerticalAlignment.CENTER == orig(org.jfree.chart.util.VerticalAlignment.CENTER)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString)
org.jfree.chart.title.Title.DEFAULT_PADDING == orig(org.jfree.chart.title.Title.DEFAULT_PADDING)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType)
org.jfree.chart.title.Title.DEFAULT_PADDING.top == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.top)
org.jfree.chart.title.Title.DEFAULT_PADDING.left == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.left)
org.jfree.chart.title.Title.DEFAULT_PADDING.bottom == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.bottom)
org.jfree.chart.title.Title.DEFAULT_PADDING.right == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.right)
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener == orig(org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener)
title.position == orig(title.position)
title.position.name == orig(title.position.name)
title.position.name.toString == orig(title.position.name.toString)
title.horizontalAlignment == orig(title.horizontalAlignment)
title.horizontalAlignment.name == orig(title.horizontalAlignment.name)
title.horizontalAlignment.name.toString == orig(title.horizontalAlignment.name.toString)
title.verticalAlignment == orig(title.verticalAlignment)
title.verticalAlignment.name == orig(title.verticalAlignment.name)
title.verticalAlignment.name.toString == orig(title.verticalAlignment.name.toString)
title.listenerList == orig(title.listenerList)
title.notify == orig(title.notify)
title.id == orig(title.id)
title.margin == orig(title.margin)
title.margin.unitType == orig(title.margin.unitType)
title.margin.top == orig(title.margin.top)
title.margin.left == orig(title.margin.left)
title.margin.bottom == orig(title.margin.bottom)
title.margin.right == orig(title.margin.right)
title.frame == orig(title.frame)
title.frame.getClass().getName() == orig(title.frame.getClass().getName())
title.padding == orig(title.padding)
title.padding.unitType == orig(title.padding.unitType)
title.padding.top == orig(title.padding.top)
title.padding.left == orig(title.padding.left)
title.padding.bottom == orig(title.padding.bottom)
title.padding.right == orig(title.padding.right)
title.width == orig(title.width)
title.height == orig(title.height)
title.bounds == orig(title.bounds)
title.bounds.getClass().getName() == orig(title.bounds.getClass().getName())
title.position.name.toString one of { "RectangleEdge.BOTTOM", "RectangleEdge.TOP" }
title.horizontalAlignment has only one value
title.horizontalAlignment.name has only one value
title.horizontalAlignment.name.toString == "HorizontalAlignment.CENTER"
title.verticalAlignment has only one value
title.verticalAlignment.name has only one value
title.verticalAlignment.name.toString == "VerticalAlignment.CENTER"
title.notify == true
title.id == null
title.margin.unitType has only one value
title.margin.top == 1.0
title.margin.left == 1.0
title.margin.bottom == 1.0
title.margin.right == 1.0
title.frame.getClass().getName() == org.jfree.chart.block.LineBorder.class
title.padding has only one value
title.padding.unitType has only one value
title.padding.top == 1.0
title.padding.left == 1.0
title.padding.bottom == 1.0
title.padding.right == 1.0
title.width == 0.0
title.height == 0.0
title.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
===========================================================================
org.jfree.chart.junit.PieChart3DTests:::CLASS
===========================================================================
org.jfree.chart.junit.PieChart3DTests:::OBJECT
org.jfree.chart.JFreeChart.DEFAULT_TITLE_FONT == this.pieChart.title.font
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT == this.pieChart.backgroundPaint
this.pieChart.borderPaint == org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT
this.pieChart.padding == org.jfree.chart.util.RectangleInsets.ZERO_INSETS
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == this.pieChart.title.margin
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT == this.pieChart.title.paint
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT == this.pieChart.plot.noDataMessagePaint
this.pieChart.title.textAlignment == org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT
org.jfree.chart.title.Title.DEFAULT_POSITION == this.pieChart.title.position
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT == this.pieChart.title.horizontalAlignment
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT == this.pieChart.title.verticalAlignment
org.jfree.chart.title.Title.DEFAULT_PADDING == this.pieChart.title.padding
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE == this.pieChart.plot.outlineStroke
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT == this.pieChart.plot.outlinePaint
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT == this.pieChart.plot.backgroundPaint
org.jfree.chart.JFreeChart.INFO has only one value
org.jfree.chart.JFreeChart.INFO.logo == null
org.jfree.chart.JFreeChart.INFO.licenceText has only one value
org.jfree.chart.JFreeChart.INFO.licenceText.toString == "GNU LESSER GENERAL PUBLIC LICENSE\n\nVersion 2.1, February 1999\n\nCopyright (C) 1991, 1999 Free Software Foundation, Inc.\n59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\nEveryone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.\n\n[This is the first released version of the Lesser GPL.  It also counts as the successor of the GNU Library Public License, version 2, hence the version number 2.1.]\n\nPreamble\n\nThe licenses for most software are designed to take away your freedom to share and change it. By contrast, the GNU General Public Licenses are intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users.\n\nThis license, the Lesser General Public License, applies to some specially designated software packages--typically libraries--of the Free Software Foundation and other authors who decide to use it. You can use it too, but we suggest you first think carefully about whether this license or the ordinary General Public License is the better strategy to use in any particular case, based on the explanations below.\n\nWhen we speak of free software, we are referring to freedom of use, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish); that you receive source code or can get it if you want it; that you can change the software and use pieces of it in new free programs; and that you are informed that you can do these things.\n\nTo protect your rights, we need to make restrictions that forbid distributors to deny you these rights or to ask you to surrender these rights. These restrictions translate to certain responsibilities for you if you distribute copies of the library or if you modify it.\n\nFor example, if you distribute copies of the library, whether gratis or for a fee, you must give the recipients all the rights that we gave you. You must make sure that they, too, receive or can get the source code. If you link other code with the library, you must provide complete object files to the recipients, so that they can relink them with the library after making changes to the library and recompiling it. And you must show them these terms so they know their rights.\n\nWe protect your rights with a two-step method: (1) we copyright the library, and (2) we offer you this license, which gives you legal permission to copy, distribute and/or modify the library.\n\nTo protect each distributor, we want to make it very clear that there is no warranty for the free library. Also, if the library is modified by someone else and passed on, the recipients should know that what they have is not the original version, so that the original author's reputation will not be affected by problems that might be introduced by others.\n\nFinally, software patents pose a constant threat to the existence of any free program. We wish to make sure that a company cannot effectively restrict the users of a free program by obtaining a restrictive license from a patent holder. Therefore, we insist that any patent license obtained for a version of the library must be consistent with the full freedom of use specified in this license.\n\nMost GNU software, including some libraries, is covered by the ordinary GNU General Public License. This license, the GNU Lesser General Public License, applies to certain designated libraries, and is quite different from the ordinary General Public License. We use this license for certain libraries in order to permit linking those libraries into non-free programs.\n\nWhen a program is linked with a library, whether statically or using a shared library, the combination of the two is legally speaking a combined work, a derivative of the original library. The ordinary General Public License therefore permits such linking only if the entire combination fits its criteria of freedom. The Lesser General Public License permits more lax criteria for linking other code with the library.\n\nWe call this license the \"Lesser\" General Public License because it does Less to protect the user's freedom than the ordinary General Public License. It also provides other free software developers Less of an advantage over competing non-free programs. These disadvantages are the reason we use the ordinary General Public License for many libraries. However, the Lesser license provides advantages in certain special circumstances.\n\nFor example, on rare occasions, there may be a special need to encourage the widest possible use of a certain library, so that it becomes a de-facto standard. To achieve this, non-free programs must be allowed to use the library. A more frequent case is that a free library does the same job as widely used non-free libraries. In this case, there is little to gain by limiting the free library to free software only, so we use the Lesser General Public License.\n\nIn other cases, permission to use a particular library in non-free programs enables a greater number of people to use a large body of free software. For example, permission to use the GNU C Library in non-free programs enables many more people to use the whole GNU operating system, as well as its variant, the GNU/Linux operating system.\n\nAlthough the Lesser General Public License is Less protective of the users' freedom, it does ensure that the user of a program that is linked with the Library has the freedom and the wherewithal to run that program using a modified version of the Library.\n\nThe precise terms and conditions for copying, distribution and modification follow. Pay close attention to the difference between a \"work based on the library\" and a \"work that uses the library\". The former contains code derived from the library, whereas the latter must be combined with the library in order to run.\n\nTERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n0. This License Agreement applies to any software library or other program which contains a notice placed by the copyright holder or other authorized party saying it may be distributed under the terms of this Lesser General Public License (also called \"this License\"). Each licensee is addressed as \"you\".\nA \"library\" means a collection of software functions and/or data prepared so as to be conveniently linked with application programs (which use some of those functions and data) to form executables.\n\nThe \"Library\", below, refers to any such software library or work which has been distributed under these terms. A \"work based on the Library\" means either the Library or any derivative work under copyright law: that is to say, a work containing the Library or a portion of it, either verbatim or with modifications and/or translated straightforwardly into another language. (Hereinafter, translation is included without limitation in the term \"modification\".)\n\n\"Source code\" for a work means the preferred form of the work for making modifications to it. For a library, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the library.\n\nActivities other than copying, distribution and modification are not covered by this License; they are outside its scope. The act of running a program using the Library is not restricted, and output from such a program is covered only if its contents constitute a work based on the Library (independent of the use of the Library in a tool for writing it). Whether that is true depends on what the Library does and what the program that uses the Library does.\n1. You may copy and distribute verbatim copies of the Library's complete source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and distribute a copy of this License along with the Library.\n\nYou may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee.\n\n2. You may modify your copy or copies of the Library or any portion of it, thus forming a work based on the Library, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions:\n\n*    a) The modified work must itself be a software library.\n*    b) You must cause the files modified to carry prominent notices stating that you changed the files and the date of any change.\n*    c) You must cause the whole of the work to be licensed at no charge to all third parties under the terms of this License.\n*    d) If a facility in the modified Library refers to a function or a table of data to be supplied by an application program that uses the facility, other than as an argument passed when the facility is invoked, then you must make a good faith effort to ensure that, in the event an application does not supply such function or table, the facility still operates, and performs whatever part of its purpose remains meaningful.\n\n(For example, a function in a library to compute square roots has a purpose that is entirely well-defined independent of the application. Therefore, Subsection 2d requires that any application-supplied function or table used by this function must be optional: if the application does not supply it, the square root function must still compute square roots.)\n\nThese requirements apply to the modified work as a whole. If identifiable sections of that work are not derived from the Library, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works. But when you distribute the same sections as part of a whole which is a work based on the Library, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Library.\n\nIn addition, mere aggregation of another work not based on the Library with the Library (or with a work based on the Library) on a volume of a storage or distribution medium does not bring the other work under the scope of this License.\n\n3. You may opt to apply the terms of the ordinary GNU General Public License instead of this License to a given copy of the Library. To do this, you must alter all the notices that refer to this License, so that they refer to the ordinary GNU General Public License, version 2, instead of to this License. (If a newer version than version 2 of the ordinary GNU General Public License has appeared, then you can specify that version instead if you wish.) Do not make any other change in these notices.\n\nOnce this change is made in a given copy, it is irreversible for that copy, so the ordinary GNU General Public License applies to all subsequent copies and derivative works made from that copy.\n\nThis option is useful when you wish to copy part of the code of the Library into a program that is not a library.\n\n4. You may copy and distribute the Library (or a portion or derivative of it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange.\n\nIf distribution of object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place satisfies the requirement to distribute the source code, even though third parties are not compelled to copy the source along with the object code.\n\n5. A program that contains no derivative of any portion of the Library, but is designed to work with the Library by being compiled or linked with it, is called a \"work that uses the Library\". Such a work, in isolation, is not a derivative work of the Library, and therefore falls outside the scope of this License.\n\nHowever, linking a \"work that uses the Library\" with the Library creates an executable that is a derivative of the Library (because it contains portions of the Library), rather than a \"work that uses the library\". The executable is therefore covered by this License. Section 6 states terms for distribution of such executables.\n\nWhen a \"work that uses the Library\" uses material from a header file that is part of the Library, the object code for the work may be a derivative work of the Library even though the source code is not. Whether this is true is especially significant if the work can be linked without the Library, or if the work is itself a library. The threshold for this to be true is not precisely defined by law.\n\nIf such an object file uses only numerical parameters, data structure layouts and accessors, and small macros and small inline functions (ten lines or less in length), then the use of the object file is unrestricted, regardless of whether it is legally a derivative work. (Executables containing this object code plus portions of the Library will still fall under Section 6.)\n\nOtherwise, if the work is a derivative of the Library, you may distribute the object code for the work under the terms of Section 6. Any executables containing that work also fall under Section 6, whether or not they are linked directly with the Library itself.\n\n6. As an exception to the Sections above, you may also combine or link a \"work that uses the Library\" with the Library to produce a work containing portions of the Library, and distribute that work under terms of your choice, provided that the terms permit modification of the work for the customer's own use and reverse engineering for debugging such modifications.\n\nYou must give prominent notice with each copy of the work that the Library is used in it and that the Library and its use are covered by this License. You must supply a copy of this License. If the work during execution displays copyright notices, you must include the copyright notice for the Library among them, as well as a reference directing the user to the copy of this License. Also, you must do one of these things:\n\n*    a) Accompany the work with the complete corresponding machine-readable source code for the Library including whatever changes were used in the work (which must be distributed under Sections 1 and 2 above); and, if the work is an executable linked with the Library, with the complete machine-readable \"work that uses the Library\", as object code and/or source code, so that the user can modify the Library and then relink to produce a modified executable containing the modified Library. (It is understood that the user who changes the contents of definitions files in the Library will not necessarily be able to recompile the application to use the modified definitions.)\n*    b) Use a suitable shared library mechanism for linking with the Library. A suitable mechanism is one that (1) uses at run time a copy of the library already present on the user's computer system, rather than copying library functions into the executable, and (2) will operate properly with a modified version of the library, if the user installs one, as long as the modified version is interface-compatible with the version that the work was made with.\n*    c) Accompany the work with a written offer, valid for at least three years, to give the same user the materials specified in Subsection 6a, above, for a charge no more than the cost of performing this distribution.\n*    d) If distribution of the work is made by offering access to copy from a designated place, offer equivalent access to copy the above specified materials from the same place.\n*    e) Verify that the user has already received a copy of these materials or that you have already sent this user a copy.\n\nFor an executable, the required form of the \"work that uses the Library\" must include any data and utility programs needed for reproducing the executable from it. However, as a special exception, the materials to be distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable.\n\nIt may happen that this requirement contradicts the license restrictions of other proprietary libraries that do not normally accompany the operating system. Such a contradiction means you cannot use both them and the Library together in an executable that you distribute.\n\n7. You may place library facilities that are a work based on the Library side-by-side in a single library together with other library facilities not covered by this License, and distribute such a combined library, provided that the separate distribution of the work based on the Library and of the other library facilities is otherwise permitted, and provided that you do these two things:\n\n*    a) Accompany the combined library with a copy of the same work based on the Library, uncombined with any other library facilities. This must be distributed under the terms of the Sections above.\n*    b) Give prominent notice with the combined library of the fact that part of it is a work based on the Library, and explaining where to find the accompanying uncombined form of the same work.\n\n8. You may not copy, modify, sublicense, link with, or distribute the Library except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense, link with, or distribute the Library is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance.\n\n9. You are not required to accept this License, since you have not signed it. However, nothing else grants you permission to modify or distribute the Library or its derivative works. These actions are prohibited by law if you do not accept this License. Therefore, by modifying or distributing the Library (or any work based on the Library), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Library or works based on it.\n\n10. Each time you redistribute the Library (or any work based on the Library), the recipient automatically receives a license from the original licensor to copy, distribute, link with or modify the Library subject to these terms and conditions. You may not impose any further restrictions on the recipients' exercise of the rights granted herein. You are not responsible for enforcing compliance by third parties with this License.\n\n11. If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Library at all. For example, if a patent license would not permit royalty-free redistribution of the Library by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Library.\n\nIf any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply, and the section as a whole is intended to apply in other circumstances.\n\nIt is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system which is implemented by public license practices. Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice.\n\nThis section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License.\n\n12. If the distribution and/or use of the Library is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Library under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded. In such case, this License incorporates the limitation as if written in the body of this License.\n\n13. The Free Software Foundation may publish revised and/or new versions of the Lesser General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.\n\nEach version is given a distinguishing version number. If the Library specifies a version number of this License which applies to it and \"any later version\", you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation. If the Library does not specify a license version number, you may choose any version ever published by the Free Software Foundation.\n\n14. If you wish to incorporate parts of the Library into other free programs whose distribution conditions are incompatible with these, write to the author to ask for permission. For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this. Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally.\n\nNO WARRANTY\n\n15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE LIBRARY \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE LIBRARY IS WITH YOU. SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n\nEND OF TERMS AND CONDITIONS\n\n\nHow to Apply These Terms to Your New Libraries\n\nIf you develop a new library, and you want it to be of the greatest possible use to the public, we recommend making it free software that everyone can redistribute and change. You can do so by permitting redistribution under these terms (or, alternatively, under the terms of the ordinary General Public License).\n\nTo apply these terms, attach the following notices to the library.  It is safest to attach them to the start of each source file to most effectively convey the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.\n\n<one line to give the library's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.\n\nThis library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\nAlso add information on how to contact you by electronic and paper mail.\n\nYou should also get your employer (if you work as a programmer) or your school, if any, to sign a \"copyright disclaimer\" for the library, if necessary.  Here is a sample; alter the names:\n\nYoyodyne, Inc., hereby disclaims all copyright interest in the library `Frob' (a library for tweaking knobs) written by James Random Hacker.\n\n<signature of Ty Coon>, 1 April 1990\nTy Coon, President of Vice\n\nThat's all there is to it!\n"
org.jfree.chart.JFreeChart.INFO.contributors has only one value
org.jfree.chart.JFreeChart.INFO.contributors[] contains no nulls and has only one value, of length 85
org.jfree.chart.JFreeChart.INFO.contributors[].getClass().getName() == [org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor]
org.jfree.chart.JFreeChart.INFO.contributors[].getClass().getName() elements == org.jfree.chart.ui.Contributor.class
org.jfree.chart.JFreeChart.INFO.contributors.getClass().getName() == java.util.Arrays$ArrayList.class
org.jfree.chart.JFreeChart.INFO.copyright has only one value
org.jfree.chart.JFreeChart.INFO.copyright.toString == "(C)opyright 2000-2007, by Object Refinery Limited and Contributors"
org.jfree.chart.JFreeChart.INFO.libraries has only one value
org.jfree.chart.JFreeChart.INFO.libraries[] == []
org.jfree.chart.JFreeChart.INFO.libraries[].getClass().getName() == []
org.jfree.chart.JFreeChart.INFO.libraries.getClass().getName() == java.util.ArrayList.class
org.jfree.chart.JFreeChart.INFO.optionalLibraries has only one value
org.jfree.chart.JFreeChart.INFO.optionalLibraries[] == []
org.jfree.chart.JFreeChart.INFO.optionalLibraries[].getClass().getName() == []
org.jfree.chart.JFreeChart.INFO.name has only one value
org.jfree.chart.JFreeChart.INFO.name.toString == "JFreeChart"
org.jfree.chart.JFreeChart.INFO.version has only one value
org.jfree.chart.JFreeChart.INFO.version.toString == "1.2.0-pre"
org.jfree.chart.JFreeChart.INFO.licenceName has only one value
org.jfree.chart.JFreeChart.INFO.licenceName.toString == "LGPL"
org.jfree.chart.JFreeChart.INFO.info has only one value
org.jfree.chart.JFreeChart.INFO.info.toString == "http://www.jfree.org/jfreechart/index.html"
org.jfree.chart.JFreeChart.DEFAULT_TITLE_FONT has only one value
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT has only one value
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName() == java.awt.Color.class
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_IMAGE == null
this.pieChart.renderingHints has only one value
this.pieChart.borderVisible == false
this.pieChart.borderStroke has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS has only one value
this.pieChart.padding.unitType has only one value
this.pieChart.padding.top == 0.0
this.pieChart.padding.left == 0.0
this.pieChart.padding.bottom == 0.0
this.pieChart.padding.right == 0.0
this.pieChart.title has only one value
org.jfree.chart.title.TextTitle.DEFAULT_FONT has only one value
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT has only one value
this.pieChart.title.text has only one value
this.pieChart.title.text.toString == "Pie Chart"
this.pieChart.title.backgroundPaint == null
this.pieChart.title.toolTipText == null
this.pieChart.title.urlText == null
this.pieChart.title.content == null
this.pieChart.title.expandToFitSpace == false
org.jfree.chart.title.Title.DEFAULT_POSITION has only one value
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT has only one value
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT has only one value
org.jfree.chart.title.Title.DEFAULT_PADDING has only one value
this.pieChart.title.listenerList has only one value
this.pieChart.title.notify == true
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener has only one value
this.pieChart.title.id == null
this.pieChart.title.frame has only one value
this.pieChart.title.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class
this.pieChart.title.width == 0.0
this.pieChart.title.height == 0.0
this.pieChart.title.bounds has only one value
this.pieChart.title.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
this.pieChart.subtitles has only one value
this.pieChart.subtitles[] contains no nulls and has only one value, of length 1
this.pieChart.subtitles[] elements has only one value
this.pieChart.subtitles[].getClass().getName() == [org.jfree.chart.title.LegendTitle]
this.pieChart.subtitles[].getClass().getName() elements == org.jfree.chart.title.LegendTitle.class
this.pieChart.plot has only one value
this.pieChart.plot.getClass().getName() == org.jfree.chart.plot.PiePlot3D.class
org.jfree.chart.plot.Plot.ZERO has only one value
org.jfree.chart.plot.Plot.ZERO.getClass().getName() == java.lang.Integer.class
org.jfree.chart.plot.Plot.DEFAULT_INSETS has only one value
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE has only one value
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName() == java.awt.BasicStroke.class
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT has only one value
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT has only one value
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX has only one value
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName() == java.awt.geom.Rectangle2D$Double.class
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE has only one value
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == java.awt.geom.Ellipse2D$Double.class
this.pieChart.plot.parent == null
this.pieChart.plot.datasetGroup == null
this.pieChart.plot.noDataMessage == null
this.pieChart.plot.noDataMessageFont has only one value
this.pieChart.plot.insets has only one value
this.pieChart.plot.outlineVisible == true
this.pieChart.plot.backgroundImage == null
this.pieChart.plot.backgroundImageAlignment == 15
this.pieChart.plot.backgroundImageAlpha == 0.5
this.pieChart.plot.foregroundAlpha == 1.0
this.pieChart.plot.backgroundAlpha == 1.0
this.pieChart.plot.drawingSupplier has only one value
this.pieChart.plot.drawingSupplier.getClass().getName() == org.jfree.chart.plot.DefaultDrawingSupplier.class
this.pieChart.plot.listenerList has only one value
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener has only one value
this.pieChart.backgroundImage == null
this.pieChart.backgroundImageAlignment == 15
this.pieChart.backgroundImageAlpha == 0.5
this.pieChart.changeListeners has only one value
this.pieChart.progressListeners has only one value
this.pieChart.notify == true
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartChangeListener == null
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartProgressListener == null
org.jfree.chart.junit.PieChart3DTests.class$org$jfree$chart$junit$PieChart3DTests has only one value
size(org.jfree.chart.JFreeChart.INFO.contributors[]) == 85
size(this.pieChart.subtitles[]) == 1
===========================================================================
org.jfree.chart.junit.PieChart3DTests.PieChart3DTests(java.lang.String):::ENTER
name.toString one of { "testNullValueInDataset", "testReplaceDatasetOnPieChart" }
===========================================================================
org.jfree.chart.junit.PieChart3DTests.PieChart3DTests(java.lang.String):::EXIT
name.toString == orig(name.toString)
this.pieChart == null
name.toString one of { "testNullValueInDataset", "testReplaceDatasetOnPieChart" }
===========================================================================
org.jfree.chart.junit.PieChart3DTests.class$(java.lang.String):::ENTER
org.jfree.chart.junit.PieChart3DTests.class$org$jfree$chart$junit$PieChart3DTests == null
x0 has only one value
x0.toString == "org.jfree.chart.junit.PieChart3DTests"
===========================================================================
org.jfree.chart.junit.PieChart3DTests.class$(java.lang.String):::EXIT
org.jfree.chart.junit.PieChart3DTests.class$org$jfree$chart$junit$PieChart3DTests == orig(org.jfree.chart.junit.PieChart3DTests.class$org$jfree$chart$junit$PieChart3DTests)
x0.toString == orig(x0.toString)
org.jfree.chart.junit.PieChart3DTests.class$org$jfree$chart$junit$PieChart3DTests == null
x0.toString == "org.jfree.chart.junit.PieChart3DTests"
return has only one value
===========================================================================
org.jfree.chart.junit.PieChart3DTests.createPieChart3D(org.jfree.data.general.PieDataset):::ENTER
org.jfree.chart.junit.PieChart3DTests.class$org$jfree$chart$junit$PieChart3DTests has only one value
dataset.getClass().getName() == org.jfree.data.general.DefaultPieDataset.class
===========================================================================
org.jfree.chart.junit.PieChart3DTests.createPieChart3D(org.jfree.data.general.PieDataset):::EXIT
org.jfree.chart.junit.PieChart3DTests.class$org$jfree$chart$junit$PieChart3DTests == orig(org.jfree.chart.junit.PieChart3DTests.class$org$jfree$chart$junit$PieChart3DTests)
org.jfree.chart.JFreeChart.INFO.libraries.getClass().getName() == org.jfree.chart.JFreeChart.INFO.optionalLibraries.getClass().getName()
org.jfree.chart.JFreeChart.INFO.libraries.getClass().getName() == return.subtitles.getClass().getName()
org.jfree.chart.JFreeChart.DEFAULT_TITLE_FONT == return.title.font
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT == return.backgroundPaint
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName() == return.borderPaint.getClass().getName()
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName() == org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT.getClass().getName()
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName() == return.title.paint.getClass().getName()
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName() == org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName()
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName() == org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName()
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName() == return.plot.noDataMessagePaint.getClass().getName()
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName() == return.plot.outlinePaint.getClass().getName()
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName() == return.plot.backgroundPaint.getClass().getName()
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName() == return.backgroundPaint.getClass().getName()
return.borderStroke.getClass().getName() == org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName()
return.borderPaint == org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT
return.padding == org.jfree.chart.util.RectangleInsets.ZERO_INSETS
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == return.title.margin
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT == return.title.paint
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT == return.plot.noDataMessagePaint
return.title.textAlignment == org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT
org.jfree.chart.title.Title.DEFAULT_POSITION == return.title.position
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT == return.title.horizontalAlignment
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT == return.title.verticalAlignment
org.jfree.chart.title.Title.DEFAULT_PADDING == return.title.padding
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE == return.plot.outlineStroke
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName() == return.plot.outlineStroke.getClass().getName()
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT == return.plot.outlinePaint
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT == return.plot.backgroundPaint
org.jfree.chart.junit.PieChart3DTests.class$org$jfree$chart$junit$PieChart3DTests has only one value
org.jfree.chart.JFreeChart.INFO has only one value
org.jfree.chart.JFreeChart.INFO.logo == null
org.jfree.chart.JFreeChart.INFO.licenceText has only one value
org.jfree.chart.JFreeChart.INFO.licenceText.toString == "GNU LESSER GENERAL PUBLIC LICENSE\n\nVersion 2.1, February 1999\n\nCopyright (C) 1991, 1999 Free Software Foundation, Inc.\n59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\nEveryone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.\n\n[This is the first released version of the Lesser GPL.  It also counts as the successor of the GNU Library Public License, version 2, hence the version number 2.1.]\n\nPreamble\n\nThe licenses for most software are designed to take away your freedom to share and change it. By contrast, the GNU General Public Licenses are intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users.\n\nThis license, the Lesser General Public License, applies to some specially designated software packages--typically libraries--of the Free Software Foundation and other authors who decide to use it. You can use it too, but we suggest you first think carefully about whether this license or the ordinary General Public License is the better strategy to use in any particular case, based on the explanations below.\n\nWhen we speak of free software, we are referring to freedom of use, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish); that you receive source code or can get it if you want it; that you can change the software and use pieces of it in new free programs; and that you are informed that you can do these things.\n\nTo protect your rights, we need to make restrictions that forbid distributors to deny you these rights or to ask you to surrender these rights. These restrictions translate to certain responsibilities for you if you distribute copies of the library or if you modify it.\n\nFor example, if you distribute copies of the library, whether gratis or for a fee, you must give the recipients all the rights that we gave you. You must make sure that they, too, receive or can get the source code. If you link other code with the library, you must provide complete object files to the recipients, so that they can relink them with the library after making changes to the library and recompiling it. And you must show them these terms so they know their rights.\n\nWe protect your rights with a two-step method: (1) we copyright the library, and (2) we offer you this license, which gives you legal permission to copy, distribute and/or modify the library.\n\nTo protect each distributor, we want to make it very clear that there is no warranty for the free library. Also, if the library is modified by someone else and passed on, the recipients should know that what they have is not the original version, so that the original author's reputation will not be affected by problems that might be introduced by others.\n\nFinally, software patents pose a constant threat to the existence of any free program. We wish to make sure that a company cannot effectively restrict the users of a free program by obtaining a restrictive license from a patent holder. Therefore, we insist that any patent license obtained for a version of the library must be consistent with the full freedom of use specified in this license.\n\nMost GNU software, including some libraries, is covered by the ordinary GNU General Public License. This license, the GNU Lesser General Public License, applies to certain designated libraries, and is quite different from the ordinary General Public License. We use this license for certain libraries in order to permit linking those libraries into non-free programs.\n\nWhen a program is linked with a library, whether statically or using a shared library, the combination of the two is legally speaking a combined work, a derivative of the original library. The ordinary General Public License therefore permits such linking only if the entire combination fits its criteria of freedom. The Lesser General Public License permits more lax criteria for linking other code with the library.\n\nWe call this license the \"Lesser\" General Public License because it does Less to protect the user's freedom than the ordinary General Public License. It also provides other free software developers Less of an advantage over competing non-free programs. These disadvantages are the reason we use the ordinary General Public License for many libraries. However, the Lesser license provides advantages in certain special circumstances.\n\nFor example, on rare occasions, there may be a special need to encourage the widest possible use of a certain library, so that it becomes a de-facto standard. To achieve this, non-free programs must be allowed to use the library. A more frequent case is that a free library does the same job as widely used non-free libraries. In this case, there is little to gain by limiting the free library to free software only, so we use the Lesser General Public License.\n\nIn other cases, permission to use a particular library in non-free programs enables a greater number of people to use a large body of free software. For example, permission to use the GNU C Library in non-free programs enables many more people to use the whole GNU operating system, as well as its variant, the GNU/Linux operating system.\n\nAlthough the Lesser General Public License is Less protective of the users' freedom, it does ensure that the user of a program that is linked with the Library has the freedom and the wherewithal to run that program using a modified version of the Library.\n\nThe precise terms and conditions for copying, distribution and modification follow. Pay close attention to the difference between a \"work based on the library\" and a \"work that uses the library\". The former contains code derived from the library, whereas the latter must be combined with the library in order to run.\n\nTERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n0. This License Agreement applies to any software library or other program which contains a notice placed by the copyright holder or other authorized party saying it may be distributed under the terms of this Lesser General Public License (also called \"this License\"). Each licensee is addressed as \"you\".\nA \"library\" means a collection of software functions and/or data prepared so as to be conveniently linked with application programs (which use some of those functions and data) to form executables.\n\nThe \"Library\", below, refers to any such software library or work which has been distributed under these terms. A \"work based on the Library\" means either the Library or any derivative work under copyright law: that is to say, a work containing the Library or a portion of it, either verbatim or with modifications and/or translated straightforwardly into another language. (Hereinafter, translation is included without limitation in the term \"modification\".)\n\n\"Source code\" for a work means the preferred form of the work for making modifications to it. For a library, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the library.\n\nActivities other than copying, distribution and modification are not covered by this License; they are outside its scope. The act of running a program using the Library is not restricted, and output from such a program is covered only if its contents constitute a work based on the Library (independent of the use of the Library in a tool for writing it). Whether that is true depends on what the Library does and what the program that uses the Library does.\n1. You may copy and distribute verbatim copies of the Library's complete source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and distribute a copy of this License along with the Library.\n\nYou may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee.\n\n2. You may modify your copy or copies of the Library or any portion of it, thus forming a work based on the Library, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions:\n\n*    a) The modified work must itself be a software library.\n*    b) You must cause the files modified to carry prominent notices stating that you changed the files and the date of any change.\n*    c) You must cause the whole of the work to be licensed at no charge to all third parties under the terms of this License.\n*    d) If a facility in the modified Library refers to a function or a table of data to be supplied by an application program that uses the facility, other than as an argument passed when the facility is invoked, then you must make a good faith effort to ensure that, in the event an application does not supply such function or table, the facility still operates, and performs whatever part of its purpose remains meaningful.\n\n(For example, a function in a library to compute square roots has a purpose that is entirely well-defined independent of the application. Therefore, Subsection 2d requires that any application-supplied function or table used by this function must be optional: if the application does not supply it, the square root function must still compute square roots.)\n\nThese requirements apply to the modified work as a whole. If identifiable sections of that work are not derived from the Library, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works. But when you distribute the same sections as part of a whole which is a work based on the Library, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Library.\n\nIn addition, mere aggregation of another work not based on the Library with the Library (or with a work based on the Library) on a volume of a storage or distribution medium does not bring the other work under the scope of this License.\n\n3. You may opt to apply the terms of the ordinary GNU General Public License instead of this License to a given copy of the Library. To do this, you must alter all the notices that refer to this License, so that they refer to the ordinary GNU General Public License, version 2, instead of to this License. (If a newer version than version 2 of the ordinary GNU General Public License has appeared, then you can specify that version instead if you wish.) Do not make any other change in these notices.\n\nOnce this change is made in a given copy, it is irreversible for that copy, so the ordinary GNU General Public License applies to all subsequent copies and derivative works made from that copy.\n\nThis option is useful when you wish to copy part of the code of the Library into a program that is not a library.\n\n4. You may copy and distribute the Library (or a portion or derivative of it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange.\n\nIf distribution of object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place satisfies the requirement to distribute the source code, even though third parties are not compelled to copy the source along with the object code.\n\n5. A program that contains no derivative of any portion of the Library, but is designed to work with the Library by being compiled or linked with it, is called a \"work that uses the Library\". Such a work, in isolation, is not a derivative work of the Library, and therefore falls outside the scope of this License.\n\nHowever, linking a \"work that uses the Library\" with the Library creates an executable that is a derivative of the Library (because it contains portions of the Library), rather than a \"work that uses the library\". The executable is therefore covered by this License. Section 6 states terms for distribution of such executables.\n\nWhen a \"work that uses the Library\" uses material from a header file that is part of the Library, the object code for the work may be a derivative work of the Library even though the source code is not. Whether this is true is especially significant if the work can be linked without the Library, or if the work is itself a library. The threshold for this to be true is not precisely defined by law.\n\nIf such an object file uses only numerical parameters, data structure layouts and accessors, and small macros and small inline functions (ten lines or less in length), then the use of the object file is unrestricted, regardless of whether it is legally a derivative work. (Executables containing this object code plus portions of the Library will still fall under Section 6.)\n\nOtherwise, if the work is a derivative of the Library, you may distribute the object code for the work under the terms of Section 6. Any executables containing that work also fall under Section 6, whether or not they are linked directly with the Library itself.\n\n6. As an exception to the Sections above, you may also combine or link a \"work that uses the Library\" with the Library to produce a work containing portions of the Library, and distribute that work under terms of your choice, provided that the terms permit modification of the work for the customer's own use and reverse engineering for debugging such modifications.\n\nYou must give prominent notice with each copy of the work that the Library is used in it and that the Library and its use are covered by this License. You must supply a copy of this License. If the work during execution displays copyright notices, you must include the copyright notice for the Library among them, as well as a reference directing the user to the copy of this License. Also, you must do one of these things:\n\n*    a) Accompany the work with the complete corresponding machine-readable source code for the Library including whatever changes were used in the work (which must be distributed under Sections 1 and 2 above); and, if the work is an executable linked with the Library, with the complete machine-readable \"work that uses the Library\", as object code and/or source code, so that the user can modify the Library and then relink to produce a modified executable containing the modified Library. (It is understood that the user who changes the contents of definitions files in the Library will not necessarily be able to recompile the application to use the modified definitions.)\n*    b) Use a suitable shared library mechanism for linking with the Library. A suitable mechanism is one that (1) uses at run time a copy of the library already present on the user's computer system, rather than copying library functions into the executable, and (2) will operate properly with a modified version of the library, if the user installs one, as long as the modified version is interface-compatible with the version that the work was made with.\n*    c) Accompany the work with a written offer, valid for at least three years, to give the same user the materials specified in Subsection 6a, above, for a charge no more than the cost of performing this distribution.\n*    d) If distribution of the work is made by offering access to copy from a designated place, offer equivalent access to copy the above specified materials from the same place.\n*    e) Verify that the user has already received a copy of these materials or that you have already sent this user a copy.\n\nFor an executable, the required form of the \"work that uses the Library\" must include any data and utility programs needed for reproducing the executable from it. However, as a special exception, the materials to be distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable.\n\nIt may happen that this requirement contradicts the license restrictions of other proprietary libraries that do not normally accompany the operating system. Such a contradiction means you cannot use both them and the Library together in an executable that you distribute.\n\n7. You may place library facilities that are a work based on the Library side-by-side in a single library together with other library facilities not covered by this License, and distribute such a combined library, provided that the separate distribution of the work based on the Library and of the other library facilities is otherwise permitted, and provided that you do these two things:\n\n*    a) Accompany the combined library with a copy of the same work based on the Library, uncombined with any other library facilities. This must be distributed under the terms of the Sections above.\n*    b) Give prominent notice with the combined library of the fact that part of it is a work based on the Library, and explaining where to find the accompanying uncombined form of the same work.\n\n8. You may not copy, modify, sublicense, link with, or distribute the Library except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense, link with, or distribute the Library is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance.\n\n9. You are not required to accept this License, since you have not signed it. However, nothing else grants you permission to modify or distribute the Library or its derivative works. These actions are prohibited by law if you do not accept this License. Therefore, by modifying or distributing the Library (or any work based on the Library), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Library or works based on it.\n\n10. Each time you redistribute the Library (or any work based on the Library), the recipient automatically receives a license from the original licensor to copy, distribute, link with or modify the Library subject to these terms and conditions. You may not impose any further restrictions on the recipients' exercise of the rights granted herein. You are not responsible for enforcing compliance by third parties with this License.\n\n11. If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Library at all. For example, if a patent license would not permit royalty-free redistribution of the Library by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Library.\n\nIf any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply, and the section as a whole is intended to apply in other circumstances.\n\nIt is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system which is implemented by public license practices. Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice.\n\nThis section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License.\n\n12. If the distribution and/or use of the Library is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Library under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded. In such case, this License incorporates the limitation as if written in the body of this License.\n\n13. The Free Software Foundation may publish revised and/or new versions of the Lesser General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.\n\nEach version is given a distinguishing version number. If the Library specifies a version number of this License which applies to it and \"any later version\", you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation. If the Library does not specify a license version number, you may choose any version ever published by the Free Software Foundation.\n\n14. If you wish to incorporate parts of the Library into other free programs whose distribution conditions are incompatible with these, write to the author to ask for permission. For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this. Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally.\n\nNO WARRANTY\n\n15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE LIBRARY \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE LIBRARY IS WITH YOU. SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n\nEND OF TERMS AND CONDITIONS\n\n\nHow to Apply These Terms to Your New Libraries\n\nIf you develop a new library, and you want it to be of the greatest possible use to the public, we recommend making it free software that everyone can redistribute and change. You can do so by permitting redistribution under these terms (or, alternatively, under the terms of the ordinary General Public License).\n\nTo apply these terms, attach the following notices to the library.  It is safest to attach them to the start of each source file to most effectively convey the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.\n\n<one line to give the library's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.\n\nThis library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\nAlso add information on how to contact you by electronic and paper mail.\n\nYou should also get your employer (if you work as a programmer) or your school, if any, to sign a \"copyright disclaimer\" for the library, if necessary.  Here is a sample; alter the names:\n\nYoyodyne, Inc., hereby disclaims all copyright interest in the library `Frob' (a library for tweaking knobs) written by James Random Hacker.\n\n<signature of Ty Coon>, 1 April 1990\nTy Coon, President of Vice\n\nThat's all there is to it!\n"
org.jfree.chart.JFreeChart.INFO.contributors has only one value
org.jfree.chart.JFreeChart.INFO.contributors[] contains no nulls and has only one value, of length 85
org.jfree.chart.JFreeChart.INFO.contributors[].getClass().getName() == [org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor]
org.jfree.chart.JFreeChart.INFO.contributors[].getClass().getName() elements == org.jfree.chart.ui.Contributor.class
org.jfree.chart.JFreeChart.INFO.contributors.getClass().getName() == java.util.Arrays$ArrayList.class
org.jfree.chart.JFreeChart.INFO.copyright has only one value
org.jfree.chart.JFreeChart.INFO.copyright.toString == "(C)opyright 2000-2007, by Object Refinery Limited and Contributors"
org.jfree.chart.JFreeChart.INFO.libraries has only one value
org.jfree.chart.JFreeChart.INFO.libraries[] == []
org.jfree.chart.JFreeChart.INFO.libraries[].getClass().getName() == []
org.jfree.chart.JFreeChart.INFO.libraries.getClass().getName() == java.util.ArrayList.class
org.jfree.chart.JFreeChart.INFO.optionalLibraries has only one value
org.jfree.chart.JFreeChart.INFO.optionalLibraries[] == []
org.jfree.chart.JFreeChart.INFO.optionalLibraries[].getClass().getName() == []
org.jfree.chart.JFreeChart.INFO.name has only one value
org.jfree.chart.JFreeChart.INFO.name.toString == "JFreeChart"
org.jfree.chart.JFreeChart.INFO.version has only one value
org.jfree.chart.JFreeChart.INFO.version.toString == "1.2.0-pre"
org.jfree.chart.JFreeChart.INFO.licenceName has only one value
org.jfree.chart.JFreeChart.INFO.licenceName.toString == "LGPL"
org.jfree.chart.JFreeChart.INFO.info has only one value
org.jfree.chart.JFreeChart.INFO.info.toString == "http://www.jfree.org/jfreechart/index.html"
org.jfree.chart.JFreeChart.DEFAULT_TITLE_FONT has only one value
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT has only one value
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName() == java.awt.Color.class
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_IMAGE == null
return.borderVisible == false
org.jfree.chart.util.RectangleInsets.ZERO_INSETS has only one value
return.padding.unitType has only one value
return.padding.top == 0.0
return.padding.left == 0.0
return.padding.bottom == 0.0
return.padding.right == 0.0
org.jfree.chart.title.TextTitle.DEFAULT_FONT has only one value
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT has only one value
return.title.text has only one value
return.title.text.toString == "Pie Chart"
return.title.backgroundPaint == null
return.title.toolTipText == null
return.title.urlText == null
return.title.content == null
return.title.expandToFitSpace == false
org.jfree.chart.title.Title.DEFAULT_POSITION has only one value
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT has only one value
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT has only one value
org.jfree.chart.title.Title.DEFAULT_PADDING has only one value
return.title.notify == true
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener has only one value
return.title.id == null
return.title.frame has only one value
return.title.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class
return.title.width == 0.0
return.title.height == 0.0
return.title.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
return.subtitles[].getClass().getName() == [org.jfree.chart.title.LegendTitle]
return.subtitles[].getClass().getName() elements == org.jfree.chart.title.LegendTitle.class
return.plot.getClass().getName() == org.jfree.chart.plot.PiePlot3D.class
org.jfree.chart.plot.Plot.ZERO has only one value
org.jfree.chart.plot.Plot.ZERO.getClass().getName() == java.lang.Integer.class
org.jfree.chart.plot.Plot.DEFAULT_INSETS has only one value
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE has only one value
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName() == java.awt.BasicStroke.class
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT has only one value
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT has only one value
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX has only one value
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName() == java.awt.geom.Rectangle2D$Double.class
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE has only one value
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == java.awt.geom.Ellipse2D$Double.class
return.plot.parent == null
return.plot.datasetGroup == null
return.plot.noDataMessage == null
return.plot.outlineVisible == true
return.plot.backgroundImage == null
return.plot.backgroundImageAlignment == 15
return.plot.backgroundImageAlpha == 0.5
return.plot.foregroundAlpha == 1.0
return.plot.backgroundAlpha == 1.0
return.plot.drawingSupplier.getClass().getName() == org.jfree.chart.plot.DefaultDrawingSupplier.class
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener has only one value
return.backgroundImage == null
return.backgroundImageAlignment == 15
return.backgroundImageAlpha == 0.5
return.notify == true
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartChangeListener == null
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartProgressListener == null
size(org.jfree.chart.JFreeChart.INFO.contributors[]) == 85
size(return.subtitles[]) == 1
===========================================================================
org.jfree.chart.junit.PieChart3DTests.setUp():::ENTER
this has only one value
this.pieChart == null
===========================================================================
org.jfree.chart.junit.PieChart3DTests.setUp():::EXIT
org.jfree.chart.junit.PieChart3DTests.class$org$jfree$chart$junit$PieChart3DTests == orig(org.jfree.chart.junit.PieChart3DTests.class$org$jfree$chart$junit$PieChart3DTests)
this.pieChart has only one value
===========================================================================
org.jfree.chart.junit.PieChart3DTests.suite():::ENTER
org.jfree.chart.junit.PieChart3DTests.class$org$jfree$chart$junit$PieChart3DTests == null
===========================================================================
org.jfree.chart.junit.PieChart3DTests.suite():::EXIT
org.jfree.chart.junit.PieChart3DTests.class$org$jfree$chart$junit$PieChart3DTests has only one value
return has only one value
return.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.jfree.chart.junit.PieChart3DTests.testNullValueInDataset():::ENTER
this has only one value
this.pieChart has only one value
===========================================================================
org.jfree.chart.junit.PieChart3DTests.testNullValueInDataset():::EXIT
this.pieChart == orig(this.pieChart)
org.jfree.chart.JFreeChart.INFO == orig(org.jfree.chart.JFreeChart.INFO)
org.jfree.chart.JFreeChart.INFO.logo == orig(org.jfree.chart.JFreeChart.INFO.logo)
org.jfree.chart.JFreeChart.INFO.licenceText == orig(org.jfree.chart.JFreeChart.INFO.licenceText)
org.jfree.chart.JFreeChart.INFO.licenceText.toString == orig(org.jfree.chart.JFreeChart.INFO.licenceText.toString)
org.jfree.chart.JFreeChart.INFO.contributors == orig(org.jfree.chart.JFreeChart.INFO.contributors)
org.jfree.chart.JFreeChart.INFO.contributors[] == orig(org.jfree.chart.JFreeChart.INFO.contributors[])
org.jfree.chart.JFreeChart.INFO.copyright == orig(org.jfree.chart.JFreeChart.INFO.copyright)
org.jfree.chart.JFreeChart.INFO.copyright.toString == orig(org.jfree.chart.JFreeChart.INFO.copyright.toString)
org.jfree.chart.JFreeChart.INFO.libraries == orig(org.jfree.chart.JFreeChart.INFO.libraries)
org.jfree.chart.JFreeChart.INFO.libraries[] == orig(org.jfree.chart.JFreeChart.INFO.libraries[])
org.jfree.chart.JFreeChart.INFO.optionalLibraries == orig(org.jfree.chart.JFreeChart.INFO.optionalLibraries)
org.jfree.chart.JFreeChart.INFO.optionalLibraries[] == orig(org.jfree.chart.JFreeChart.INFO.optionalLibraries[])
org.jfree.chart.JFreeChart.INFO.name == orig(org.jfree.chart.JFreeChart.INFO.name)
org.jfree.chart.JFreeChart.INFO.name.toString == orig(org.jfree.chart.JFreeChart.INFO.name.toString)
org.jfree.chart.JFreeChart.INFO.version == orig(org.jfree.chart.JFreeChart.INFO.version)
org.jfree.chart.JFreeChart.INFO.version.toString == orig(org.jfree.chart.JFreeChart.INFO.version.toString)
org.jfree.chart.JFreeChart.INFO.licenceName == orig(org.jfree.chart.JFreeChart.INFO.licenceName)
org.jfree.chart.JFreeChart.INFO.licenceName.toString == orig(org.jfree.chart.JFreeChart.INFO.licenceName.toString)
org.jfree.chart.JFreeChart.INFO.info == orig(org.jfree.chart.JFreeChart.INFO.info)
org.jfree.chart.JFreeChart.INFO.info.toString == orig(org.jfree.chart.JFreeChart.INFO.info.toString)
org.jfree.chart.JFreeChart.DEFAULT_TITLE_FONT == orig(org.jfree.chart.JFreeChart.DEFAULT_TITLE_FONT)
org.jfree.chart.JFreeChart.DEFAULT_TITLE_FONT == orig(this.pieChart.title.font)
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT == orig(org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT)
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT == orig(this.pieChart.backgroundPaint)
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_IMAGE == orig(org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_IMAGE)
this.pieChart.renderingHints == orig(this.pieChart.renderingHints)
this.pieChart.borderVisible == orig(this.pieChart.borderVisible)
this.pieChart.borderStroke == orig(this.pieChart.borderStroke)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(this.pieChart.padding)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(this.pieChart.title.margin)
this.pieChart.padding.unitType == orig(this.pieChart.padding.unitType)
this.pieChart.padding.top == orig(this.pieChart.padding.top)
this.pieChart.padding.left == orig(this.pieChart.padding.left)
this.pieChart.padding.bottom == orig(this.pieChart.padding.bottom)
this.pieChart.padding.right == orig(this.pieChart.padding.right)
this.pieChart.title == orig(this.pieChart.title)
org.jfree.chart.title.TextTitle.DEFAULT_FONT == orig(org.jfree.chart.title.TextTitle.DEFAULT_FONT)
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT == orig(this.pieChart.borderPaint)
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT == orig(org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT)
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT == orig(this.pieChart.title.paint)
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT == orig(this.pieChart.plot.noDataMessagePaint)
this.pieChart.title.text == orig(this.pieChart.title.text)
this.pieChart.title.text.toString == orig(this.pieChart.title.text.toString)
this.pieChart.title.backgroundPaint == orig(this.pieChart.title.backgroundPaint)
this.pieChart.title.toolTipText == orig(this.pieChart.title.toolTipText)
this.pieChart.title.urlText == orig(this.pieChart.title.urlText)
this.pieChart.title.content == orig(this.pieChart.title.content)
this.pieChart.title.expandToFitSpace == orig(this.pieChart.title.expandToFitSpace)
org.jfree.chart.title.Title.DEFAULT_POSITION == orig(org.jfree.chart.title.Title.DEFAULT_POSITION)
org.jfree.chart.title.Title.DEFAULT_POSITION == orig(this.pieChart.title.position)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT == orig(this.pieChart.title.textAlignment)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT == orig(this.pieChart.title.horizontalAlignment)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT == orig(this.pieChart.title.verticalAlignment)
org.jfree.chart.title.Title.DEFAULT_PADDING == orig(org.jfree.chart.title.Title.DEFAULT_PADDING)
org.jfree.chart.title.Title.DEFAULT_PADDING == orig(this.pieChart.title.padding)
this.pieChart.title.listenerList == orig(this.pieChart.title.listenerList)
this.pieChart.title.notify == orig(this.pieChart.title.notify)
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener == orig(org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener)
this.pieChart.title.id == orig(this.pieChart.title.id)
this.pieChart.title.frame == orig(this.pieChart.title.frame)
this.pieChart.title.width == orig(this.pieChart.title.width)
this.pieChart.title.height == orig(this.pieChart.title.height)
this.pieChart.title.bounds == orig(this.pieChart.title.bounds)
this.pieChart.subtitles == orig(this.pieChart.subtitles)
this.pieChart.subtitles[] == orig(this.pieChart.subtitles[])
this.pieChart.plot == orig(this.pieChart.plot)
org.jfree.chart.plot.Plot.ZERO == orig(org.jfree.chart.plot.Plot.ZERO)
org.jfree.chart.plot.Plot.DEFAULT_INSETS == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE == orig(this.pieChart.plot.outlineStroke)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT == orig(this.pieChart.plot.outlinePaint)
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT == orig(this.pieChart.plot.backgroundPaint)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE)
this.pieChart.plot.parent == orig(this.pieChart.plot.parent)
this.pieChart.plot.datasetGroup == orig(this.pieChart.plot.datasetGroup)
this.pieChart.plot.noDataMessage == orig(this.pieChart.plot.noDataMessage)
this.pieChart.plot.noDataMessageFont == orig(this.pieChart.plot.noDataMessageFont)
this.pieChart.plot.insets == orig(this.pieChart.plot.insets)
this.pieChart.plot.outlineVisible == orig(this.pieChart.plot.outlineVisible)
this.pieChart.plot.backgroundImage == orig(this.pieChart.plot.backgroundImage)
this.pieChart.plot.backgroundImageAlignment == orig(this.pieChart.plot.backgroundImageAlignment)
this.pieChart.plot.backgroundImageAlpha == orig(this.pieChart.plot.backgroundImageAlpha)
this.pieChart.plot.foregroundAlpha == orig(this.pieChart.plot.foregroundAlpha)
this.pieChart.plot.backgroundAlpha == orig(this.pieChart.plot.backgroundAlpha)
this.pieChart.plot.drawingSupplier == orig(this.pieChart.plot.drawingSupplier)
this.pieChart.plot.listenerList == orig(this.pieChart.plot.listenerList)
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener == orig(org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener)
this.pieChart.backgroundImage == orig(this.pieChart.backgroundImage)
this.pieChart.backgroundImageAlignment == orig(this.pieChart.backgroundImageAlignment)
this.pieChart.backgroundImageAlpha == orig(this.pieChart.backgroundImageAlpha)
this.pieChart.changeListeners == orig(this.pieChart.changeListeners)
this.pieChart.progressListeners == orig(this.pieChart.progressListeners)
this.pieChart.notify == orig(this.pieChart.notify)
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartChangeListener == orig(org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartChangeListener)
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartProgressListener == orig(org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartProgressListener)
org.jfree.chart.junit.PieChart3DTests.class$org$jfree$chart$junit$PieChart3DTests == orig(org.jfree.chart.junit.PieChart3DTests.class$org$jfree$chart$junit$PieChart3DTests)
this.pieChart has only one value
===========================================================================
org.jfree.chart.labels.AbstractPieItemLabelGenerator:::CLASS
===========================================================================
org.jfree.chart.labels.AbstractPieItemLabelGenerator:::OBJECT
this.labelFormat != null
this.labelFormat.toString one of { "{0}", "{0}: ({1}, {2})" }
this.numberFormat != null
this.numberFormat.getClass().getName() == java.text.DecimalFormat.class
this.percentFormat != null
this.percentFormat.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.jfree.chart.labels.AbstractPieItemLabelGenerator.AbstractPieItemLabelGenerator(java.lang.String, java.text.NumberFormat, java.text.NumberFormat):::ENTER
labelFormat.toString one of { "{0}", "{0}: ({1}, {2})" }
numberFormat.getClass().getName() == java.text.DecimalFormat.class
percentFormat.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.jfree.chart.labels.AbstractPieItemLabelGenerator.AbstractPieItemLabelGenerator(java.lang.String, java.text.NumberFormat, java.text.NumberFormat):::EXIT
labelFormat.toString == orig(labelFormat.toString)
labelFormat.toString one of { "{0}", "{0}: ({1}, {2})" }
===========================================================================
org.jfree.chart.labels.AbstractPieItemLabelGenerator.createItemArray(org.jfree.data.general.PieDataset, java.lang.Comparable):::ENTER
this has only one value
this.labelFormat has only one value
this.labelFormat.toString == "{0}"
this.numberFormat has only one value
this.percentFormat has only one value
dataset has only one value
dataset.getClass().getName() == org.jfree.data.general.DefaultPieDataset.class
key.getClass().getName() == java.lang.String.class
===========================================================================
org.jfree.chart.labels.AbstractPieItemLabelGenerator.createItemArray(org.jfree.data.general.PieDataset, java.lang.Comparable):::EXIT
this.labelFormat == orig(this.labelFormat)
this.labelFormat.toString == orig(this.labelFormat.toString)
this.numberFormat == orig(this.numberFormat)
this.numberFormat.getClass().getName() == orig(this.numberFormat.getClass().getName())
this.percentFormat == orig(this.percentFormat)
this.percentFormat.getClass().getName() == orig(this.percentFormat.getClass().getName())
this.labelFormat has only one value
this.labelFormat.toString == "{0}"
this.numberFormat has only one value
this.percentFormat has only one value
return.getClass().getName() == java.lang.Object[].class
size(return[]) == 4
===========================================================================
org.jfree.chart.labels.AbstractPieItemLabelGenerator.generateSectionLabel(org.jfree.data.general.PieDataset, java.lang.Comparable):::ENTER
this has only one value
this.labelFormat has only one value
this.labelFormat.toString == "{0}"
this.numberFormat has only one value
this.percentFormat has only one value
dataset has only one value
dataset.getClass().getName() == org.jfree.data.general.DefaultPieDataset.class
key.getClass().getName() == java.lang.String.class
===========================================================================
org.jfree.chart.labels.AbstractPieItemLabelGenerator.generateSectionLabel(org.jfree.data.general.PieDataset, java.lang.Comparable):::EXIT
this.labelFormat == orig(this.labelFormat)
this.labelFormat.toString == orig(this.labelFormat.toString)
this.numberFormat == orig(this.numberFormat)
this.numberFormat.getClass().getName() == orig(this.numberFormat.getClass().getName())
this.percentFormat == orig(this.percentFormat)
this.percentFormat.getClass().getName() == orig(this.percentFormat.getClass().getName())
this.labelFormat has only one value
this.labelFormat.toString == "{0}"
this.numberFormat has only one value
this.percentFormat has only one value
return.toString one of { "Section 1", "Section 2", "Section 3" }
===========================================================================
org.jfree.chart.labels.StandardPieSectionLabelGenerator:::CLASS
org.jfree.chart.labels.StandardPieSectionLabelGenerator.DEFAULT_SECTION_LABEL_FORMAT has only one value
org.jfree.chart.labels.StandardPieSectionLabelGenerator.DEFAULT_SECTION_LABEL_FORMAT != null
org.jfree.chart.labels.StandardPieSectionLabelGenerator.DEFAULT_SECTION_LABEL_FORMAT.toString == "{0}"
===========================================================================
org.jfree.chart.labels.StandardPieSectionLabelGenerator:::OBJECT
org.jfree.chart.labels.StandardPieSectionLabelGenerator.DEFAULT_SECTION_LABEL_FORMAT == this.labelFormat
this.attributedLabels.increment == size(this.attributedLabels.objects[])
this.numberFormat.getClass().getName() == this.percentFormat.getClass().getName()
this.attributedLabels != null
this.attributedLabels.objects != null
this.attributedLabels.objects.getClass().getName() == java.lang.Object[].class
this.attributedLabels.objects[] contains only nulls and has only one value, of length 8
this.attributedLabels.objects[] elements == null
this.attributedLabels.objects[].getClass().getName() == [null, null, null, null, null, null, null, null]
this.attributedLabels.objects[].getClass().getName() elements == null
this.attributedLabels.size == 0
this.attributedLabels.increment == 8
this.labelFormat.toString == "{0}"
this.numberFormat != null
this.numberFormat.getClass().getName() == java.text.DecimalFormat.class
this.percentFormat != null
this.attributedLabels.objects.getClass().getName() != this.numberFormat.getClass().getName()
this.attributedLabels.objects[] elements == this.attributedLabels.objects[this.attributedLabels.increment-1]
===========================================================================
org.jfree.chart.labels.StandardPieSectionLabelGenerator.StandardPieSectionLabelGenerator():::EXIT
===========================================================================
org.jfree.chart.labels.StandardPieSectionLabelGenerator.StandardPieSectionLabelGenerator(java.lang.String, java.text.NumberFormat, java.text.NumberFormat):::ENTER
numberFormat.getClass().getName() == percentFormat.getClass().getName()
labelFormat has only one value
labelFormat.toString == "{0}"
numberFormat.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.jfree.chart.labels.StandardPieSectionLabelGenerator.StandardPieSectionLabelGenerator(java.lang.String, java.text.NumberFormat, java.text.NumberFormat):::EXIT
org.jfree.chart.labels.StandardPieSectionLabelGenerator.DEFAULT_SECTION_LABEL_FORMAT == orig(labelFormat)
this.numberFormat == orig(numberFormat)
this.numberFormat.getClass().getName() == orig(numberFormat.getClass().getName())
this.numberFormat.getClass().getName() == orig(percentFormat.getClass().getName())
this.percentFormat == orig(percentFormat)
labelFormat.toString == orig(labelFormat.toString)
labelFormat.toString == "{0}"
===========================================================================
org.jfree.chart.labels.StandardPieSectionLabelGenerator.generateSectionLabel(org.jfree.data.general.PieDataset, java.lang.Comparable):::ENTER
this has only one value
this.attributedLabels has only one value
this.attributedLabels.objects has only one value
this.numberFormat has only one value
this.percentFormat has only one value
dataset has only one value
dataset.getClass().getName() == org.jfree.data.general.DefaultPieDataset.class
key.getClass().getName() == java.lang.String.class
===========================================================================
org.jfree.chart.labels.StandardPieSectionLabelGenerator.generateSectionLabel(org.jfree.data.general.PieDataset, java.lang.Comparable):::EXIT
org.jfree.chart.labels.StandardPieSectionLabelGenerator.DEFAULT_SECTION_LABEL_FORMAT == orig(org.jfree.chart.labels.StandardPieSectionLabelGenerator.DEFAULT_SECTION_LABEL_FORMAT)
org.jfree.chart.labels.StandardPieSectionLabelGenerator.DEFAULT_SECTION_LABEL_FORMAT == orig(this.labelFormat)
org.jfree.chart.labels.StandardPieSectionLabelGenerator.DEFAULT_SECTION_LABEL_FORMAT.toString == orig(org.jfree.chart.labels.StandardPieSectionLabelGenerator.DEFAULT_SECTION_LABEL_FORMAT.toString)
this.attributedLabels == orig(this.attributedLabels)
this.attributedLabels.objects == orig(this.attributedLabels.objects)
this.attributedLabels.objects.getClass().getName() == orig(this.attributedLabels.objects.getClass().getName())
this.attributedLabels.objects[] == orig(this.attributedLabels.objects[])
this.attributedLabels.size == orig(this.attributedLabels.size)
this.attributedLabels.increment == orig(this.attributedLabels.increment)
this.attributedLabels.increment == orig(size(this.attributedLabels.objects[]))
this.labelFormat.toString == orig(this.labelFormat.toString)
this.numberFormat == orig(this.numberFormat)
this.numberFormat.getClass().getName() == orig(this.numberFormat.getClass().getName())
this.numberFormat.getClass().getName() == orig(this.percentFormat.getClass().getName())
this.percentFormat == orig(this.percentFormat)
this.attributedLabels has only one value
this.attributedLabels.objects has only one value
this.numberFormat has only one value
this.percentFormat has only one value
return.toString one of { "Section 1", "Section 2", "Section 3" }
===========================================================================
org.jfree.chart.labels.StandardPieToolTipGenerator:::CLASS
org.jfree.chart.labels.StandardPieToolTipGenerator.DEFAULT_TOOLTIP_FORMAT has only one value
org.jfree.chart.labels.StandardPieToolTipGenerator.DEFAULT_TOOLTIP_FORMAT.toString == "{0}: ({1}, {2})"
===========================================================================
org.jfree.chart.labels.StandardPieToolTipGenerator:::OBJECT
org.jfree.chart.labels.StandardPieToolTipGenerator.DEFAULT_TOOLTIP_FORMAT == this.labelFormat
this.numberFormat.getClass().getName() == this.percentFormat.getClass().getName()
this.labelFormat.toString == "{0}: ({1}, {2})"
this.numberFormat.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.jfree.chart.labels.StandardPieToolTipGenerator.StandardPieToolTipGenerator():::EXIT
===========================================================================
org.jfree.chart.labels.StandardPieToolTipGenerator.StandardPieToolTipGenerator(java.lang.String):::ENTER
labelFormat has only one value
labelFormat.toString == "{0}: ({1}, {2})"
===========================================================================
org.jfree.chart.labels.StandardPieToolTipGenerator.StandardPieToolTipGenerator(java.lang.String):::EXIT
org.jfree.chart.labels.StandardPieToolTipGenerator.DEFAULT_TOOLTIP_FORMAT == orig(labelFormat)
labelFormat.toString == orig(labelFormat.toString)
labelFormat.toString == "{0}: ({1}, {2})"
===========================================================================
org.jfree.chart.labels.StandardPieToolTipGenerator.StandardPieToolTipGenerator(java.lang.String, java.text.NumberFormat, java.text.NumberFormat):::ENTER
numberFormat.getClass().getName() == percentFormat.getClass().getName()
labelFormat has only one value
labelFormat.toString == "{0}: ({1}, {2})"
numberFormat.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.jfree.chart.labels.StandardPieToolTipGenerator.StandardPieToolTipGenerator(java.lang.String, java.text.NumberFormat, java.text.NumberFormat):::EXIT
org.jfree.chart.labels.StandardPieToolTipGenerator.DEFAULT_TOOLTIP_FORMAT == orig(labelFormat)
this.numberFormat == orig(numberFormat)
this.numberFormat.getClass().getName() == orig(numberFormat.getClass().getName())
this.numberFormat.getClass().getName() == orig(percentFormat.getClass().getName())
this.percentFormat == orig(percentFormat)
labelFormat.toString == orig(labelFormat.toString)
labelFormat.toString == "{0}: ({1}, {2})"
===========================================================================
org.jfree.chart.labels.StandardPieToolTipGenerator.StandardPieToolTipGenerator(java.lang.String, java.util.Locale):::ENTER
labelFormat has only one value
labelFormat.toString == "{0}: ({1}, {2})"
locale has only one value
===========================================================================
org.jfree.chart.labels.StandardPieToolTipGenerator.StandardPieToolTipGenerator(java.lang.String, java.util.Locale):::EXIT
org.jfree.chart.labels.StandardPieToolTipGenerator.DEFAULT_TOOLTIP_FORMAT == orig(labelFormat)
labelFormat.toString == orig(labelFormat.toString)
labelFormat.toString == "{0}: ({1}, {2})"
===========================================================================
org.jfree.chart.plot.AbstractPieLabelDistributor:::OBJECT
this.getClass().getName() == org.jfree.chart.plot.PieLabelDistributor.class
this.labels[] == []
this.labels[].getClass().getName() == []
this.labels.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.jfree.chart.plot.AbstractPieLabelDistributor.AbstractPieLabelDistributor():::EXIT
===========================================================================
org.jfree.chart.plot.DefaultDrawingSupplier:::CLASS
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_PAINT_SEQUENCE.getClass().getName() == org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_OUTLINE_PAINT_SEQUENCE.getClass().getName()
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_PAINT_SEQUENCE.getClass().getName() == org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_FILL_PAINT_SEQUENCE.getClass().getName()
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_STROKE_SEQUENCE.getClass().getName() == org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_OUTLINE_STROKE_SEQUENCE.getClass().getName()
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_PAINT_SEQUENCE has only one value
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_PAINT_SEQUENCE != null
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_PAINT_SEQUENCE.getClass().getName() == java.awt.Paint[].class
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_PAINT_SEQUENCE[] contains no nulls and has only one value, of length 34
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_PAINT_SEQUENCE[] elements != null
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_PAINT_SEQUENCE[].getClass().getName() == [java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color]
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_PAINT_SEQUENCE[].getClass().getName() elements == java.awt.Color.class
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_OUTLINE_PAINT_SEQUENCE has only one value
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_OUTLINE_PAINT_SEQUENCE != null
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_OUTLINE_PAINT_SEQUENCE[] contains no nulls and has only one value, of length 1
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_OUTLINE_PAINT_SEQUENCE[] elements has only one value
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_OUTLINE_PAINT_SEQUENCE[] elements != null
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_OUTLINE_PAINT_SEQUENCE[].getClass().getName() == [java.awt.Color]
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_OUTLINE_PAINT_SEQUENCE[].getClass().getName() elements == java.awt.Color.class
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_FILL_PAINT_SEQUENCE has only one value
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_FILL_PAINT_SEQUENCE != null
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_FILL_PAINT_SEQUENCE[] contains no nulls and has only one value, of length 1
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_FILL_PAINT_SEQUENCE[] elements has only one value
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_FILL_PAINT_SEQUENCE[] elements != null
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_FILL_PAINT_SEQUENCE[].getClass().getName() == [java.awt.Color]
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_FILL_PAINT_SEQUENCE[].getClass().getName() elements == java.awt.Color.class
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_STROKE_SEQUENCE has only one value
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_STROKE_SEQUENCE != null
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_STROKE_SEQUENCE.getClass().getName() == java.awt.Stroke[].class
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_STROKE_SEQUENCE[] contains no nulls and has only one value, of length 1
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_STROKE_SEQUENCE[] elements has only one value
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_STROKE_SEQUENCE[] elements != null
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_STROKE_SEQUENCE[].getClass().getName() == [java.awt.BasicStroke]
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_STROKE_SEQUENCE[].getClass().getName() elements == java.awt.BasicStroke.class
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_OUTLINE_STROKE_SEQUENCE has only one value
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_OUTLINE_STROKE_SEQUENCE != null
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_OUTLINE_STROKE_SEQUENCE[] contains no nulls and has only one value, of length 1
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_OUTLINE_STROKE_SEQUENCE[] elements has only one value
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_OUTLINE_STROKE_SEQUENCE[] elements != null
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_OUTLINE_STROKE_SEQUENCE[].getClass().getName() == [java.awt.BasicStroke]
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_OUTLINE_STROKE_SEQUENCE[].getClass().getName() elements == java.awt.BasicStroke.class
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_SHAPE_SEQUENCE has only one value
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_SHAPE_SEQUENCE != null
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_SHAPE_SEQUENCE.getClass().getName() == java.awt.Shape[].class
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_SHAPE_SEQUENCE[] contains no nulls and has only one value, of length 10
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_SHAPE_SEQUENCE[] elements != null
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_SHAPE_SEQUENCE[].getClass().getName() == [java.awt.geom.Rectangle2D.Double, java.awt.geom.Ellipse2D.Double, java.awt.Polygon, java.awt.Polygon, java.awt.geom.Rectangle2D.Double, java.awt.Polygon, java.awt.geom.Ellipse2D.Double, java.awt.Polygon, java.awt.geom.Rectangle2D.Double, java.awt.Polygon]
size(org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_PAINT_SEQUENCE[]) == 34
size(org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_OUTLINE_PAINT_SEQUENCE[]) == 1
size(org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_FILL_PAINT_SEQUENCE[]) == 1
size(org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_STROKE_SEQUENCE[]) == 1
size(org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_OUTLINE_STROKE_SEQUENCE[]) == 1
size(org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_SHAPE_SEQUENCE[]) == 10
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_PAINT_SEQUENCE.getClass().getName() != org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_STROKE_SEQUENCE.getClass().getName()
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_PAINT_SEQUENCE.getClass().getName() != org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_SHAPE_SEQUENCE.getClass().getName()
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_STROKE_SEQUENCE.getClass().getName() != org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_SHAPE_SEQUENCE.getClass().getName()
===========================================================================
org.jfree.chart.plot.DefaultDrawingSupplier:::OBJECT
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_PAINT_SEQUENCE == this.paintSequence
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_PAINT_SEQUENCE.getClass().getName() == this.paintSequence.getClass().getName()
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_PAINT_SEQUENCE.getClass().getName() == this.outlinePaintSequence.getClass().getName()
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_PAINT_SEQUENCE.getClass().getName() == this.fillPaintSequence.getClass().getName()
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_OUTLINE_PAINT_SEQUENCE == this.outlinePaintSequence
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_FILL_PAINT_SEQUENCE == this.fillPaintSequence
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_STROKE_SEQUENCE == this.strokeSequence
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_STROKE_SEQUENCE.getClass().getName() == this.strokeSequence.getClass().getName()
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_STROKE_SEQUENCE.getClass().getName() == this.outlineStrokeSequence.getClass().getName()
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_OUTLINE_STROKE_SEQUENCE == this.outlineStrokeSequence
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_SHAPE_SEQUENCE == this.shapeSequence
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_SHAPE_SEQUENCE.getClass().getName() == this.shapeSequence.getClass().getName()
this.paintSequence[] contains no nulls and has only one value, of length 34
this.paintSequence[] elements != null
this.paintSequence[].getClass().getName() == [java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color, java.awt.Color]
this.paintSequence[].getClass().getName() elements == java.awt.Color.class
this.paintIndex >= 0
this.outlinePaintSequence[] contains no nulls and has only one value, of length 1
this.outlinePaintSequence[] elements has only one value
this.outlinePaintSequence[] elements != null
this.outlinePaintSequence[].getClass().getName() == [java.awt.Color]
this.outlinePaintSequence[].getClass().getName() elements == java.awt.Color.class
this.outlinePaintIndex == 0
this.fillPaintSequence[] contains no nulls and has only one value, of length 1
this.fillPaintSequence[] elements has only one value
this.fillPaintSequence[] elements != null
this.fillPaintSequence[].getClass().getName() == [java.awt.Color]
this.fillPaintSequence[].getClass().getName() elements == java.awt.Color.class
this.fillPaintIndex == 0
this.strokeSequence[] contains no nulls and has only one value, of length 1
this.strokeSequence[] elements has only one value
this.strokeSequence[] elements != null
this.strokeSequence[].getClass().getName() == [java.awt.BasicStroke]
this.strokeSequence[].getClass().getName() elements == java.awt.BasicStroke.class
this.strokeIndex == 0
this.outlineStrokeSequence[] contains no nulls and has only one value, of length 1
this.outlineStrokeSequence[] elements has only one value
this.outlineStrokeSequence[] elements != null
this.outlineStrokeSequence[].getClass().getName() == [java.awt.BasicStroke]
this.outlineStrokeSequence[].getClass().getName() elements == java.awt.BasicStroke.class
this.outlineStrokeIndex == 0
this.shapeSequence[] contains no nulls and has only one value, of length 10
this.shapeSequence[] elements != null
this.shapeSequence[].getClass().getName() == [java.awt.geom.Rectangle2D.Double, java.awt.geom.Ellipse2D.Double, java.awt.Polygon, java.awt.Polygon, java.awt.geom.Rectangle2D.Double, java.awt.Polygon, java.awt.geom.Ellipse2D.Double, java.awt.Polygon, java.awt.geom.Rectangle2D.Double, java.awt.Polygon]
this.shapeIndex == 0
size(this.paintSequence[]) == 34
size(this.outlinePaintSequence[]) == 1
size(this.fillPaintSequence[]) == 1
size(this.strokeSequence[]) == 1
size(this.outlineStrokeSequence[]) == 1
size(this.shapeSequence[]) == 10
===========================================================================
org.jfree.chart.plot.DefaultDrawingSupplier.DefaultDrawingSupplier():::EXIT
this.paintIndex == 0
===========================================================================
org.jfree.chart.plot.DefaultDrawingSupplier.DefaultDrawingSupplier(java.awt.Paint[], java.awt.Paint[], java.awt.Paint[], java.awt.Stroke[], java.awt.Stroke[], java.awt.Shape[]):::ENTER
paintSequence.getClass().getName() == fillPaintSequence.getClass().getName()
paintSequence.getClass().getName() == outlinePaintSequence.getClass().getName()
strokeSequence.getClass().getName() == outlineStrokeSequence.getClass().getName()
paintSequence has only one value
paintSequence.getClass().getName() == java.awt.Paint[].class
paintSequence[] contains no nulls and has only one value, of length 34
fillPaintSequence has only one value
fillPaintSequence[] contains no nulls and has only one value, of length 1
fillPaintSequence[] elements has only one value
outlinePaintSequence has only one value
outlinePaintSequence[] contains no nulls and has only one value, of length 1
outlinePaintSequence[] elements has only one value
strokeSequence has only one value
strokeSequence.getClass().getName() == java.awt.Stroke[].class
strokeSequence[] contains no nulls and has only one value, of length 1
strokeSequence[] elements has only one value
outlineStrokeSequence has only one value
outlineStrokeSequence[] contains no nulls and has only one value, of length 1
outlineStrokeSequence[] elements has only one value
shapeSequence has only one value
shapeSequence.getClass().getName() == java.awt.Shape[].class
shapeSequence[] contains no nulls and has only one value, of length 10
size(paintSequence[]) == 34
size(fillPaintSequence[]) == 1
size(outlinePaintSequence[]) == 1
size(strokeSequence[]) == 1
size(outlineStrokeSequence[]) == 1
size(shapeSequence[]) == 10
===========================================================================
org.jfree.chart.plot.DefaultDrawingSupplier.DefaultDrawingSupplier(java.awt.Paint[], java.awt.Paint[], java.awt.Paint[], java.awt.Stroke[], java.awt.Stroke[], java.awt.Shape[]):::EXIT
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_PAINT_SEQUENCE == orig(paintSequence)
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_PAINT_SEQUENCE.getClass().getName() == orig(paintSequence.getClass().getName())
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_PAINT_SEQUENCE.getClass().getName() == orig(fillPaintSequence.getClass().getName())
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_PAINT_SEQUENCE.getClass().getName() == orig(outlinePaintSequence.getClass().getName())
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_OUTLINE_PAINT_SEQUENCE == orig(outlinePaintSequence)
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_FILL_PAINT_SEQUENCE == orig(fillPaintSequence)
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_STROKE_SEQUENCE == orig(strokeSequence)
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_STROKE_SEQUENCE.getClass().getName() == orig(strokeSequence.getClass().getName())
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_STROKE_SEQUENCE.getClass().getName() == orig(outlineStrokeSequence.getClass().getName())
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_OUTLINE_STROKE_SEQUENCE == orig(outlineStrokeSequence)
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_SHAPE_SEQUENCE == orig(shapeSequence)
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_SHAPE_SEQUENCE.getClass().getName() == orig(shapeSequence.getClass().getName())
paintSequence[] == orig(paintSequence[])
fillPaintSequence[] == orig(fillPaintSequence[])
outlinePaintSequence[] == orig(outlinePaintSequence[])
strokeSequence[] == orig(strokeSequence[])
outlineStrokeSequence[] == orig(outlineStrokeSequence[])
shapeSequence[] == orig(shapeSequence[])
this.paintIndex == 0
paintSequence[] contains no nulls and has only one value, of length 34
fillPaintSequence[] contains no nulls and has only one value, of length 1
fillPaintSequence[] elements has only one value
outlinePaintSequence[] contains no nulls and has only one value, of length 1
outlinePaintSequence[] elements has only one value
strokeSequence[] contains no nulls and has only one value, of length 1
strokeSequence[] elements has only one value
outlineStrokeSequence[] contains no nulls and has only one value, of length 1
outlineStrokeSequence[] elements has only one value
shapeSequence[] contains no nulls and has only one value, of length 10
===========================================================================
org.jfree.chart.plot.DefaultDrawingSupplier.createStandardSeriesShapes():::ENTER
===========================================================================
org.jfree.chart.plot.DefaultDrawingSupplier.createStandardSeriesShapes():::EXIT
return has only one value
return.getClass().getName() == java.awt.Shape[].class
return[] contains no nulls and has only one value, of length 10
size(return[]) == 10
===========================================================================
org.jfree.chart.plot.DefaultDrawingSupplier.getNextPaint():::ENTER
this has only one value
this.paintIndex one of { 0, 1, 2 }
===========================================================================
org.jfree.chart.plot.DefaultDrawingSupplier.getNextPaint():::EXIT
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_PAINT_SEQUENCE == orig(org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_PAINT_SEQUENCE)
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_PAINT_SEQUENCE == orig(this.paintSequence)
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_PAINT_SEQUENCE.getClass().getName() == orig(org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_PAINT_SEQUENCE.getClass().getName())
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_PAINT_SEQUENCE.getClass().getName() == orig(org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_OUTLINE_PAINT_SEQUENCE.getClass().getName())
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_PAINT_SEQUENCE.getClass().getName() == orig(org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_FILL_PAINT_SEQUENCE.getClass().getName())
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_PAINT_SEQUENCE.getClass().getName() == orig(this.paintSequence.getClass().getName())
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_PAINT_SEQUENCE.getClass().getName() == orig(this.outlinePaintSequence.getClass().getName())
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_PAINT_SEQUENCE.getClass().getName() == orig(this.fillPaintSequence.getClass().getName())
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_PAINT_SEQUENCE[] == orig(org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_PAINT_SEQUENCE[])
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_OUTLINE_PAINT_SEQUENCE == orig(org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_OUTLINE_PAINT_SEQUENCE)
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_OUTLINE_PAINT_SEQUENCE == orig(this.outlinePaintSequence)
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_OUTLINE_PAINT_SEQUENCE[] == orig(org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_OUTLINE_PAINT_SEQUENCE[])
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_FILL_PAINT_SEQUENCE == orig(org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_FILL_PAINT_SEQUENCE)
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_FILL_PAINT_SEQUENCE == orig(this.fillPaintSequence)
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_FILL_PAINT_SEQUENCE[] == orig(org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_FILL_PAINT_SEQUENCE[])
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_STROKE_SEQUENCE == orig(org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_STROKE_SEQUENCE)
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_STROKE_SEQUENCE == orig(this.strokeSequence)
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_STROKE_SEQUENCE.getClass().getName() == orig(org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_STROKE_SEQUENCE.getClass().getName())
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_STROKE_SEQUENCE.getClass().getName() == orig(org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_OUTLINE_STROKE_SEQUENCE.getClass().getName())
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_STROKE_SEQUENCE.getClass().getName() == orig(this.strokeSequence.getClass().getName())
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_STROKE_SEQUENCE.getClass().getName() == orig(this.outlineStrokeSequence.getClass().getName())
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_STROKE_SEQUENCE[] == orig(org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_STROKE_SEQUENCE[])
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_OUTLINE_STROKE_SEQUENCE == orig(org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_OUTLINE_STROKE_SEQUENCE)
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_OUTLINE_STROKE_SEQUENCE == orig(this.outlineStrokeSequence)
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_OUTLINE_STROKE_SEQUENCE[] == orig(org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_OUTLINE_STROKE_SEQUENCE[])
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_SHAPE_SEQUENCE == orig(org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_SHAPE_SEQUENCE)
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_SHAPE_SEQUENCE == orig(this.shapeSequence)
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_SHAPE_SEQUENCE.getClass().getName() == orig(org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_SHAPE_SEQUENCE.getClass().getName())
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_SHAPE_SEQUENCE.getClass().getName() == orig(this.shapeSequence.getClass().getName())
org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_SHAPE_SEQUENCE[] == orig(org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_SHAPE_SEQUENCE[])
this.paintSequence[] == orig(this.paintSequence[])
this.outlinePaintSequence[] == orig(this.outlinePaintSequence[])
this.outlinePaintIndex == orig(this.outlinePaintIndex)
this.fillPaintSequence[] == orig(this.fillPaintSequence[])
this.fillPaintIndex == orig(this.fillPaintIndex)
this.strokeSequence[] == orig(this.strokeSequence[])
this.strokeIndex == orig(this.strokeIndex)
this.outlineStrokeSequence[] == orig(this.outlineStrokeSequence[])
this.outlineStrokeIndex == orig(this.outlineStrokeIndex)
this.shapeSequence[] == orig(this.shapeSequence[])
this.shapeIndex == orig(this.shapeIndex)
this.paintIndex one of { 1, 2, 3 }
return.getClass().getName() == java.awt.Color.class
return.getClass().getName() in org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_PAINT_SEQUENCE[].getClass().getName()
return.getClass().getName() in org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_OUTLINE_PAINT_SEQUENCE[].getClass().getName()
return.getClass().getName() in org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_FILL_PAINT_SEQUENCE[].getClass().getName()
return.getClass().getName() in this.paintSequence[].getClass().getName()
return.getClass().getName() in this.outlinePaintSequence[].getClass().getName()
return.getClass().getName() in this.fillPaintSequence[].getClass().getName()
===========================================================================
org.jfree.chart.plot.DefaultDrawingSupplier.intArray(double, double, double):::ENTER
a one of { -3.0, 0.0 }
b one of { -3.0, 0.0, 3.0 }
c one of { -3.0, 0.0, 3.0 }
===========================================================================
org.jfree.chart.plot.DefaultDrawingSupplier.intArray(double, double, double):::EXIT
return[] elements one of { -3, 0, 3 }
size(return[]) == 3
===========================================================================
org.jfree.chart.plot.DefaultDrawingSupplier.intArray(double, double, double, double):::ENTER
a one of { -3.0, 0.0 }
b one of { 0.0, 3.0 }
c one of { 0.0, 3.0 }
d one of { -3.0, 0.0 }
===========================================================================
org.jfree.chart.plot.DefaultDrawingSupplier.intArray(double, double, double, double):::EXIT
return[] elements one of { -3, 0, 3 }
return[] one of { [-3, 0, 3, 0], [0, 3, 0, -3] }
size(return[]) == 4
===========================================================================
org.jfree.chart.plot.PieLabelDistributor:::OBJECT
this.minGap == 4.0
this.labels[] == []
this.labels[].getClass().getName() == []
this.labels.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.jfree.chart.plot.PieLabelDistributor.PieLabelDistributor(int):::ENTER
labelCount == 0
===========================================================================
org.jfree.chart.plot.PieLabelDistributor.PieLabelDistributor(int):::EXIT
===========================================================================
org.jfree.chart.plot.PiePlot:::CLASS
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_PAINT
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT.getClass().getName()
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_PAINT.getClass().getName()
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT.getClass().getName()
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName()
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName()
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName()
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_FONT has only one value
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_FONT != null
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT has only one value
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT != null
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == java.awt.Color.class
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT has only one value
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT != null
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE has only one value
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE != null
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == java.awt.BasicStroke.class
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT has only one value
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT != null
org.jfree.chart.plot.PiePlot.localizationResources has only one value
org.jfree.chart.plot.PiePlot.localizationResources != null
org.jfree.chart.plot.PiePlot.localizationResources.getClass().getName() == java.util.PropertyResourceBundle.class
org.jfree.chart.plot.Plot.ZERO has only one value
org.jfree.chart.plot.Plot.ZERO != null
org.jfree.chart.plot.Plot.ZERO.getClass().getName() == java.lang.Integer.class
org.jfree.chart.plot.Plot.DEFAULT_INSETS has only one value
org.jfree.chart.plot.Plot.DEFAULT_INSETS != null
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType has only one value
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType != null
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name has only one value
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name != null
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name.toString == "UnitType.ABSOLUTE"
org.jfree.chart.plot.Plot.DEFAULT_INSETS.top == 4.0
org.jfree.chart.plot.Plot.DEFAULT_INSETS.left == 8.0
org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom == 4.0
org.jfree.chart.plot.Plot.DEFAULT_INSETS.right == 8.0
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE has only one value
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE != null
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT has only one value
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT != null
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT has only one value
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT != null
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX has only one value
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX != null
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName() == java.awt.geom.Rectangle2D$Double.class
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE has only one value
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE != null
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == java.awt.geom.Ellipse2D$Double.class
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() != org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName()
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() != org.jfree.chart.plot.PiePlot.localizationResources.getClass().getName()
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() != org.jfree.chart.plot.Plot.ZERO.getClass().getName()
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() != org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName()
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() != org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName()
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() != org.jfree.chart.plot.PiePlot.localizationResources.getClass().getName()
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() != org.jfree.chart.plot.Plot.ZERO.getClass().getName()
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() != org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName()
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() != org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName()
org.jfree.chart.plot.PiePlot.localizationResources.getClass().getName() != org.jfree.chart.plot.Plot.ZERO.getClass().getName()
org.jfree.chart.plot.PiePlot.localizationResources.getClass().getName() != org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName()
org.jfree.chart.plot.PiePlot.localizationResources.getClass().getName() != org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName()
org.jfree.chart.plot.Plot.ZERO.getClass().getName() != org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName()
org.jfree.chart.plot.Plot.ZERO.getClass().getName() != org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName()
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName() != org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName()
===========================================================================
org.jfree.chart.plot.PiePlot:::OBJECT
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_FONT == this.labelFont
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == this.labelPaint
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == this.labelOutlinePaint
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == this.labelLinkPaint
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == this.noDataMessagePaint
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == this.baseSectionPaint.getClass().getName()
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == this.baseSectionOutlinePaint.getClass().getName()
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == this.shadowPaint.getClass().getName()
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == this.labelPaint.getClass().getName()
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == this.labelBackgroundPaint.getClass().getName()
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == this.labelOutlinePaint.getClass().getName()
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == this.labelShadowPaint.getClass().getName()
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == this.labelLinkPaint.getClass().getName()
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == this.noDataMessagePaint.getClass().getName()
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == this.outlinePaint.getClass().getName()
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == this.backgroundPaint.getClass().getName()
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT == this.labelBackgroundPaint
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE == this.labelOutlineStroke
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == this.baseSectionOutlineStroke.getClass().getName()
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == this.labelOutlineStroke.getClass().getName()
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == this.labelLinkStroke.getClass().getName()
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == this.outlineStroke.getClass().getName()
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT == this.labelShadowPaint
this.direction == org.jfree.chart.util.Rotation.CLOCKWISE
org.jfree.chart.util.Rotation.CLOCKWISE.name == this.direction.name
org.jfree.chart.util.Rotation.CLOCKWISE.factor == this.direction.factor
this.sectionPaintMap.store.getClass().getName() == this.sectionOutlinePaintMap.store.getClass().getName()
this.baseSectionPaint == this.baseSectionOutlinePaint
this.baseSectionPaint == this.shadowPaint
this.baseSectionPaint == this.outlinePaint
this.sectionOutlineStrokeMap.store.getClass().getName() == this.explodePercentages.getClass().getName()
this.baseSectionOutlineStroke == this.outlineStroke
this.labelPadding.unitType == org.jfree.chart.util.UnitType.ABSOLUTE
org.jfree.chart.util.UnitType.ABSOLUTE == this.insets.unitType
org.jfree.chart.util.UnitType.RELATIVE == this.simpleLabelOffset.unitType
this.labelPadding.unitType.name == org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name
this.legendItemShape.getClass().getName() == org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName()
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name == this.insets.unitType.name
this.dataset != null
this.dataset.getClass().getName() == org.jfree.data.general.DefaultPieDataset.class
this.pieIndex == 0
this.interiorGap == 0.08
this.startAngle == 90.0
org.jfree.chart.util.Rotation.CLOCKWISE has only one value
org.jfree.chart.util.Rotation.CLOCKWISE != null
org.jfree.chart.util.Rotation.ANTICLOCKWISE has only one value
org.jfree.chart.util.Rotation.ANTICLOCKWISE != null
org.jfree.chart.util.Rotation.CLOCKWISE.name has only one value
org.jfree.chart.util.Rotation.CLOCKWISE.name != null
org.jfree.chart.util.Rotation.CLOCKWISE.name.toString == "Rotation.CLOCKWISE"
org.jfree.chart.util.Rotation.CLOCKWISE.factor == -1.0
org.jfree.chart.util.Rotation.ANTICLOCKWISE.name has only one value
org.jfree.chart.util.Rotation.ANTICLOCKWISE.name != null
org.jfree.chart.util.Rotation.ANTICLOCKWISE.name.toString == "Rotation.ANTICLOCKWISE"
org.jfree.chart.util.Rotation.ANTICLOCKWISE.factor == 1.0
this.direction.name.toString == "Rotation.CLOCKWISE"
this.sectionPaintMap != null
this.sectionPaintMap.store != null
this.sectionPaintMap.store.getClass().getName() == java.util.HashMap.class
this.baseSectionPaint has only one value
this.baseSectionPaint != null
this.sectionOutlinesVisible == true
this.sectionOutlinePaintMap != null
this.sectionOutlinePaintMap.store != null
this.sectionOutlineStrokeMap != null
this.sectionOutlineStrokeMap.store != null
this.baseSectionOutlineStroke has only one value
this.baseSectionOutlineStroke != null
this.shadowXOffset == 4.0
this.shadowYOffset == 4.0
this.explodePercentages != null
this.explodePercentages.getClass().getName() == java.util.TreeMap.class
this.labelGenerator != null
this.labelGenerator.getClass().getName() == org.jfree.chart.labels.StandardPieSectionLabelGenerator.class
this.simpleLabels == false
this.labelPadding != null
org.jfree.chart.util.RectangleInsets.ZERO_INSETS has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS != null
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType != null
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == 0.0
org.jfree.chart.util.UnitType.ABSOLUTE has only one value
org.jfree.chart.util.UnitType.ABSOLUTE != null
org.jfree.chart.util.UnitType.RELATIVE has only one value
org.jfree.chart.util.UnitType.RELATIVE != null
this.labelPadding.unitType.name.toString == "UnitType.ABSOLUTE"
this.labelPadding.top == 2.0
this.labelPadding.left == 2.0
this.labelPadding.bottom == 2.0
this.labelPadding.right == 2.0
this.simpleLabelOffset != null
this.simpleLabelOffset.unitType.name has only one value
this.simpleLabelOffset.unitType.name != null
this.simpleLabelOffset.unitType.name.toString == "UnitType.RELATIVE"
this.simpleLabelOffset.top == 0.18
this.simpleLabelOffset.left == 0.18
this.simpleLabelOffset.bottom == 0.18
this.simpleLabelOffset.right == 0.18
this.maximumLabelWidth == 0.14
this.labelGap == 0.025
this.labelLinksVisible == true
this.labelLinkMargin == 0.025
this.labelLinkStroke != null
this.labelDistributor != null
this.labelDistributor.getClass().getName() == org.jfree.chart.plot.PieLabelDistributor.class
this.labelDistributor.labels != null
this.labelDistributor.labels[] == []
this.labelDistributor.labels[].getClass().getName() == []
this.labelDistributor.labels.getClass().getName() == java.util.ArrayList.class
this.toolTipGenerator.getClass().getName() == org.jfree.chart.labels.StandardPieToolTipGenerator.class
this.urlGenerator == null
this.legendLabelGenerator != null
this.legendLabelToolTipGenerator == null
this.legendLabelURLGenerator == null
this.ignoreNullValues == false
this.ignoreZeroValues == false
this.legendItemShape has only one value
this.legendItemShape != null
this.minimumArcAngleToDraw == 1.0E-5
this.parent == null
this.datasetGroup == null
this.noDataMessage == null
this.noDataMessageFont != null
this.insets != null
this.insets.unitType.name.toString == "UnitType.ABSOLUTE"
this.insets.top one of { 0.0, 4.0 }
this.insets.left one of { 5.0, 8.0 }
this.insets.bottom one of { 4.0, 5.0 }
this.insets.right one of { 5.0, 8.0 }
this.outlineVisible == true
this.backgroundPaint has only one value
this.backgroundPaint != null
this.backgroundImage == null
this.backgroundImageAlignment == 15
this.backgroundImageAlpha == 0.5
this.foregroundAlpha == 1.0
this.backgroundAlpha == 1.0
this.drawingSupplier != null
this.drawingSupplier.getClass().getName() == org.jfree.chart.plot.DefaultDrawingSupplier.class
this.listenerList != null
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() != this.dataset.getClass().getName()
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() != this.sectionPaintMap.store.getClass().getName()
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() != this.explodePercentages.getClass().getName()
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() != this.labelGenerator.getClass().getName()
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() != this.labelDistributor.getClass().getName()
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() != this.labelDistributor.labels.getClass().getName()
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() != this.toolTipGenerator.getClass().getName()
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() != this.legendLabelGenerator.getClass().getName()
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() != this.drawingSupplier.getClass().getName()
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() != this.dataset.getClass().getName()
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() != this.sectionPaintMap.store.getClass().getName()
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() != this.explodePercentages.getClass().getName()
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() != this.labelGenerator.getClass().getName()
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() != this.labelDistributor.getClass().getName()
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() != this.labelDistributor.labels.getClass().getName()
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() != this.toolTipGenerator.getClass().getName()
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() != this.legendLabelGenerator.getClass().getName()
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() != this.drawingSupplier.getClass().getName()
this.dataset.getClass().getName() != this.sectionPaintMap.store.getClass().getName()
this.dataset.getClass().getName() != this.explodePercentages.getClass().getName()
this.dataset.getClass().getName() != this.labelGenerator.getClass().getName()
this.dataset.getClass().getName() != this.labelDistributor.getClass().getName()
this.dataset.getClass().getName() != this.labelDistributor.labels.getClass().getName()
this.dataset.getClass().getName() != this.toolTipGenerator.getClass().getName()
this.dataset.getClass().getName() != this.legendLabelGenerator.getClass().getName()
this.dataset.getClass().getName() != org.jfree.chart.plot.PiePlot.localizationResources.getClass().getName()
this.dataset.getClass().getName() != org.jfree.chart.plot.Plot.ZERO.getClass().getName()
this.dataset.getClass().getName() != org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName()
this.dataset.getClass().getName() != org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName()
this.dataset.getClass().getName() != this.drawingSupplier.getClass().getName()
this.sectionPaintMap.store.getClass().getName() != this.explodePercentages.getClass().getName()
this.sectionPaintMap.store.getClass().getName() != this.labelGenerator.getClass().getName()
this.sectionPaintMap.store.getClass().getName() != this.labelDistributor.getClass().getName()
this.sectionPaintMap.store.getClass().getName() != this.labelDistributor.labels.getClass().getName()
this.sectionPaintMap.store.getClass().getName() != this.toolTipGenerator.getClass().getName()
this.sectionPaintMap.store.getClass().getName() != this.legendLabelGenerator.getClass().getName()
this.sectionPaintMap.store.getClass().getName() != org.jfree.chart.plot.PiePlot.localizationResources.getClass().getName()
this.sectionPaintMap.store.getClass().getName() != org.jfree.chart.plot.Plot.ZERO.getClass().getName()
this.sectionPaintMap.store.getClass().getName() != org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName()
this.sectionPaintMap.store.getClass().getName() != org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName()
this.sectionPaintMap.store.getClass().getName() != this.drawingSupplier.getClass().getName()
this.explodePercentages.getClass().getName() != this.labelGenerator.getClass().getName()
this.explodePercentages.getClass().getName() != this.labelDistributor.getClass().getName()
this.explodePercentages.getClass().getName() != this.labelDistributor.labels.getClass().getName()
this.explodePercentages.getClass().getName() != this.toolTipGenerator.getClass().getName()
this.explodePercentages.getClass().getName() != this.legendLabelGenerator.getClass().getName()
this.explodePercentages.getClass().getName() != org.jfree.chart.plot.PiePlot.localizationResources.getClass().getName()
this.explodePercentages.getClass().getName() != org.jfree.chart.plot.Plot.ZERO.getClass().getName()
this.explodePercentages.getClass().getName() != org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName()
this.explodePercentages.getClass().getName() != org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName()
this.explodePercentages.getClass().getName() != this.drawingSupplier.getClass().getName()
this.labelGenerator.getClass().getName() != this.labelDistributor.getClass().getName()
this.labelGenerator.getClass().getName() != this.labelDistributor.labels.getClass().getName()
this.labelGenerator.getClass().getName() != this.toolTipGenerator.getClass().getName()
this.labelGenerator.getClass().getName() != org.jfree.chart.plot.PiePlot.localizationResources.getClass().getName()
this.labelGenerator.getClass().getName() != org.jfree.chart.plot.Plot.ZERO.getClass().getName()
this.labelGenerator.getClass().getName() != org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName()
this.labelGenerator.getClass().getName() != org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName()
this.labelGenerator.getClass().getName() != this.drawingSupplier.getClass().getName()
this.labelDistributor.getClass().getName() != this.labelDistributor.labels.getClass().getName()
this.labelDistributor.getClass().getName() != this.toolTipGenerator.getClass().getName()
this.labelDistributor.getClass().getName() != this.legendLabelGenerator.getClass().getName()
this.labelDistributor.getClass().getName() != org.jfree.chart.plot.PiePlot.localizationResources.getClass().getName()
this.labelDistributor.getClass().getName() != org.jfree.chart.plot.Plot.ZERO.getClass().getName()
this.labelDistributor.getClass().getName() != org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName()
this.labelDistributor.getClass().getName() != org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName()
this.labelDistributor.getClass().getName() != this.drawingSupplier.getClass().getName()
this.labelDistributor.labels.getClass().getName() != this.toolTipGenerator.getClass().getName()
this.labelDistributor.labels.getClass().getName() != this.legendLabelGenerator.getClass().getName()
this.labelDistributor.labels.getClass().getName() != org.jfree.chart.plot.PiePlot.localizationResources.getClass().getName()
this.labelDistributor.labels.getClass().getName() != org.jfree.chart.plot.Plot.ZERO.getClass().getName()
this.labelDistributor.labels.getClass().getName() != org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName()
this.labelDistributor.labels.getClass().getName() != org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName()
this.labelDistributor.labels.getClass().getName() != this.drawingSupplier.getClass().getName()
this.toolTipGenerator.getClass().getName() != this.legendLabelGenerator.getClass().getName()
this.toolTipGenerator.getClass().getName() != org.jfree.chart.plot.PiePlot.localizationResources.getClass().getName()
this.toolTipGenerator.getClass().getName() != org.jfree.chart.plot.Plot.ZERO.getClass().getName()
this.toolTipGenerator.getClass().getName() != org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName()
this.toolTipGenerator.getClass().getName() != org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName()
this.toolTipGenerator.getClass().getName() != this.drawingSupplier.getClass().getName()
this.legendLabelGenerator.getClass().getName() != org.jfree.chart.plot.PiePlot.localizationResources.getClass().getName()
this.legendLabelGenerator.getClass().getName() != org.jfree.chart.plot.Plot.ZERO.getClass().getName()
this.legendLabelGenerator.getClass().getName() != org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName()
this.legendLabelGenerator.getClass().getName() != org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName()
this.legendLabelGenerator.getClass().getName() != this.drawingSupplier.getClass().getName()
org.jfree.chart.plot.PiePlot.localizationResources.getClass().getName() != this.drawingSupplier.getClass().getName()
org.jfree.chart.plot.Plot.ZERO.getClass().getName() != this.drawingSupplier.getClass().getName()
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName() != this.drawingSupplier.getClass().getName()
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() != this.drawingSupplier.getClass().getName()
===========================================================================
org.jfree.chart.plot.PiePlot3D:::CLASS
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_FONT has only one value
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT has only one value
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == java.awt.Color.class
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT has only one value
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT.getClass().getName() == java.awt.Color.class
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_PAINT has only one value
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_PAINT.getClass().getName() == java.awt.Color.class
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE has only one value
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == java.awt.BasicStroke.class
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT has only one value
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT.getClass().getName() == java.awt.Color.class
org.jfree.chart.plot.PiePlot.localizationResources has only one value
org.jfree.chart.plot.PiePlot.localizationResources.getClass().getName() == java.util.PropertyResourceBundle.class
org.jfree.chart.plot.Plot.ZERO has only one value
org.jfree.chart.plot.Plot.ZERO.getClass().getName() == java.lang.Integer.class
org.jfree.chart.plot.Plot.DEFAULT_INSETS has only one value
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType has only one value
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name has only one value
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name.toString == "UnitType.ABSOLUTE"
org.jfree.chart.plot.Plot.DEFAULT_INSETS.top == 4.0
org.jfree.chart.plot.Plot.DEFAULT_INSETS.left == 8.0
org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom == 4.0
org.jfree.chart.plot.Plot.DEFAULT_INSETS.right == 8.0
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE has only one value
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName() == java.awt.BasicStroke.class
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT has only one value
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName() == java.awt.Color.class
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT has only one value
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName() == java.awt.Color.class
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX has only one value
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName() == java.awt.geom.Rectangle2D$Double.class
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE has only one value
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == java.awt.geom.Ellipse2D$Double.class
===========================================================================
org.jfree.chart.plot.PiePlot3D:::OBJECT
this.depthFactor == 0.12
this.darkerSides == false
this.dataset.getClass().getName() == org.jfree.data.general.DefaultPieDataset.class
this.pieIndex == 0
this.interiorGap == 0.08
this.circular == false
this.startAngle == 90.0
this.direction has only one value
org.jfree.chart.util.Rotation.CLOCKWISE has only one value
org.jfree.chart.util.Rotation.ANTICLOCKWISE has only one value
org.jfree.chart.util.Rotation.CLOCKWISE.name has only one value
org.jfree.chart.util.Rotation.CLOCKWISE.name.toString == "Rotation.CLOCKWISE"
org.jfree.chart.util.Rotation.CLOCKWISE.factor == -1.0
org.jfree.chart.util.Rotation.ANTICLOCKWISE.name has only one value
org.jfree.chart.util.Rotation.ANTICLOCKWISE.name.toString == "Rotation.ANTICLOCKWISE"
org.jfree.chart.util.Rotation.ANTICLOCKWISE.factor == 1.0
this.direction.name has only one value
this.direction.name.toString == "Rotation.CLOCKWISE"
this.direction.factor == -1.0
this.sectionPaintMap.store.getClass().getName() == java.util.HashMap.class
this.baseSectionPaint has only one value
this.baseSectionPaint.getClass().getName() == java.awt.Color.class
this.sectionOutlinesVisible == true
this.sectionOutlinePaintMap.store.getClass().getName() == java.util.HashMap.class
this.baseSectionOutlinePaint has only one value
this.baseSectionOutlinePaint.getClass().getName() == java.awt.Color.class
this.sectionOutlineStrokeMap.store.getClass().getName() == java.util.TreeMap.class
this.baseSectionOutlineStroke has only one value
this.baseSectionOutlineStroke.getClass().getName() == java.awt.BasicStroke.class
this.shadowPaint has only one value
this.shadowPaint.getClass().getName() == java.awt.Color.class
this.shadowXOffset == 4.0
this.shadowYOffset == 4.0
this.explodePercentages.getClass().getName() == java.util.TreeMap.class
this.labelGenerator.getClass().getName() == org.jfree.chart.labels.StandardPieSectionLabelGenerator.class
this.labelFont has only one value
this.labelPaint has only one value
this.labelPaint.getClass().getName() == java.awt.Color.class
this.labelBackgroundPaint has only one value
this.labelBackgroundPaint.getClass().getName() == java.awt.Color.class
this.labelOutlinePaint has only one value
this.labelOutlinePaint.getClass().getName() == java.awt.Color.class
this.labelOutlineStroke has only one value
this.labelOutlineStroke.getClass().getName() == java.awt.BasicStroke.class
this.labelShadowPaint has only one value
this.labelShadowPaint.getClass().getName() == java.awt.Color.class
this.simpleLabels == false
org.jfree.chart.util.RectangleInsets.ZERO_INSETS has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == 0.0
this.labelPadding.unitType has only one value
org.jfree.chart.util.UnitType.ABSOLUTE has only one value
org.jfree.chart.util.UnitType.RELATIVE has only one value
this.labelPadding.unitType.name has only one value
this.labelPadding.unitType.name.toString == "UnitType.ABSOLUTE"
this.labelPadding.top == 2.0
this.labelPadding.left == 2.0
this.labelPadding.bottom == 2.0
this.labelPadding.right == 2.0
this.simpleLabelOffset.unitType has only one value
this.simpleLabelOffset.unitType.name has only one value
this.simpleLabelOffset.unitType.name.toString == "UnitType.RELATIVE"
this.simpleLabelOffset.top == 0.18
this.simpleLabelOffset.left == 0.18
this.simpleLabelOffset.bottom == 0.18
this.simpleLabelOffset.right == 0.18
this.maximumLabelWidth == 0.14
this.labelGap == 0.025
this.labelLinksVisible == true
this.labelLinkMargin == 0.025
this.labelLinkPaint has only one value
this.labelLinkPaint.getClass().getName() == java.awt.Color.class
this.labelLinkStroke.getClass().getName() == java.awt.BasicStroke.class
this.labelDistributor.getClass().getName() == org.jfree.chart.plot.PieLabelDistributor.class
this.labelDistributor.labels[] == []
this.labelDistributor.labels[].getClass().getName() == []
this.labelDistributor.labels.getClass().getName() == java.util.ArrayList.class
this.toolTipGenerator == null
this.urlGenerator == null
this.legendLabelGenerator.getClass().getName() == org.jfree.chart.labels.StandardPieSectionLabelGenerator.class
this.legendLabelToolTipGenerator == null
this.legendLabelURLGenerator == null
this.ignoreNullValues == false
this.ignoreZeroValues == false
this.legendItemShape has only one value
this.legendItemShape.getClass().getName() == java.awt.geom.Ellipse2D$Double.class
this.minimumArcAngleToDraw == 1.0E-5
this.parent == null
this.datasetGroup == null
this.noDataMessage == null
this.noDataMessagePaint has only one value
this.noDataMessagePaint.getClass().getName() == java.awt.Color.class
this.insets has only one value
this.insets.unitType has only one value
this.insets.unitType.name has only one value
this.insets.unitType.name.toString == "UnitType.ABSOLUTE"
this.insets.top == 4.0
this.insets.left == 8.0
this.insets.bottom == 4.0
this.insets.right == 8.0
this.outlineVisible == true
this.outlineStroke has only one value
this.outlineStroke.getClass().getName() == java.awt.BasicStroke.class
this.outlinePaint has only one value
this.outlinePaint.getClass().getName() == java.awt.Color.class
this.backgroundPaint has only one value
this.backgroundPaint.getClass().getName() == java.awt.Color.class
this.backgroundImage == null
this.backgroundImageAlignment == 15
this.backgroundImageAlpha == 0.5
this.foregroundAlpha == 1.0
this.backgroundAlpha == 1.0
this.drawingSupplier.getClass().getName() == org.jfree.chart.plot.DefaultDrawingSupplier.class
===========================================================================
org.jfree.chart.plot.PiePlot3D.PiePlot3D(org.jfree.data.general.PieDataset):::ENTER
dataset.getClass().getName() == org.jfree.data.general.DefaultPieDataset.class
===========================================================================
org.jfree.chart.plot.PiePlot3D.PiePlot3D(org.jfree.data.general.PieDataset):::EXIT
===========================================================================
org.jfree.chart.plot.PiePlot.PiePlot(org.jfree.data.general.PieDataset):::ENTER
dataset.getClass().getName() == org.jfree.data.general.DefaultPieDataset.class
===========================================================================
org.jfree.chart.plot.PiePlot.PiePlot(org.jfree.data.general.PieDataset):::EXIT
this.dataset == orig(dataset)
this.dataset.getClass().getName() == orig(dataset.getClass().getName())
this.baseSectionPaint == org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT
this.baseSectionOutlinePaint == org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT
this.baseSectionOutlineStroke == org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE
this.shadowPaint == org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT
this.labelGenerator.getClass().getName() == this.legendLabelGenerator.getClass().getName()
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == org.jfree.chart.util.UnitType.ABSOLUTE
org.jfree.chart.util.UnitType.ABSOLUTE == org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType
this.legendItemShape == org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE
org.jfree.chart.plot.Plot.DEFAULT_INSETS == this.insets
org.jfree.chart.plot.Plot.DEFAULT_INSETS.top == this.insets.top
org.jfree.chart.plot.Plot.DEFAULT_INSETS.left == this.insets.left
org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom == this.insets.bottom
org.jfree.chart.plot.Plot.DEFAULT_INSETS.right == this.insets.right
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE == this.outlineStroke
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT == this.outlinePaint
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT == this.backgroundPaint
this.circular == true
this.toolTipGenerator == null
===========================================================================
org.jfree.chart.plot.PiePlot.getDataset():::ENTER
this.labelGenerator.getClass().getName() == this.legendLabelGenerator.getClass().getName()
this has only one value
this.dataset has only one value
this.circular == false
this.sectionPaintMap has only one value
this.sectionPaintMap.store has only one value
this.sectionOutlinePaintMap has only one value
this.sectionOutlinePaintMap.store has only one value
this.sectionOutlineStrokeMap has only one value
this.sectionOutlineStrokeMap.store has only one value
this.explodePercentages has only one value
this.labelGenerator has only one value
this.labelPadding has only one value
this.simpleLabelOffset has only one value
this.labelLinkStroke has only one value
this.labelDistributor has only one value
this.labelDistributor.labels has only one value
this.toolTipGenerator has only one value
this.legendLabelGenerator has only one value
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener has only one value
this.noDataMessageFont has only one value
this.insets has only one value
this.insets.top == 0.0
this.insets.left == 5.0
this.insets.bottom == 5.0
this.insets.right == 5.0
this.drawingSupplier has only one value
this.listenerList has only one value
===========================================================================
org.jfree.chart.plot.PiePlot.getDataset():::EXIT
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_FONT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_FONT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_FONT == orig(this.labelFont)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_PAINT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(this.labelPaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(this.labelOutlinePaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(this.labelLinkPaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(this.noDataMessagePaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.baseSectionPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.baseSectionOutlinePaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.shadowPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelBackgroundPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelOutlinePaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelShadowPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelLinkPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.noDataMessagePaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.outlinePaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.backgroundPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT == orig(this.labelBackgroundPaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE == orig(this.labelOutlineStroke)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(this.baseSectionOutlineStroke.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(this.labelOutlineStroke.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(this.labelLinkStroke.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(this.outlineStroke.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT == orig(this.labelShadowPaint)
this.dataset == orig(this.dataset)
this.dataset.getClass().getName() == return.getClass().getName()
this.pieIndex == orig(this.pieIndex)
this.interiorGap == orig(this.interiorGap)
this.circular == orig(this.circular)
this.startAngle == orig(this.startAngle)
org.jfree.chart.util.Rotation.CLOCKWISE == orig(this.direction)
org.jfree.chart.util.Rotation.CLOCKWISE == orig(org.jfree.chart.util.Rotation.CLOCKWISE)
org.jfree.chart.util.Rotation.ANTICLOCKWISE == orig(org.jfree.chart.util.Rotation.ANTICLOCKWISE)
org.jfree.chart.util.Rotation.CLOCKWISE.name == orig(org.jfree.chart.util.Rotation.CLOCKWISE.name)
org.jfree.chart.util.Rotation.CLOCKWISE.name == orig(this.direction.name)
org.jfree.chart.util.Rotation.CLOCKWISE.name.toString == orig(org.jfree.chart.util.Rotation.CLOCKWISE.name.toString)
org.jfree.chart.util.Rotation.CLOCKWISE.factor == orig(org.jfree.chart.util.Rotation.CLOCKWISE.factor)
org.jfree.chart.util.Rotation.CLOCKWISE.factor == orig(this.direction.factor)
org.jfree.chart.util.Rotation.ANTICLOCKWISE.name == orig(org.jfree.chart.util.Rotation.ANTICLOCKWISE.name)
org.jfree.chart.util.Rotation.ANTICLOCKWISE.name.toString == orig(org.jfree.chart.util.Rotation.ANTICLOCKWISE.name.toString)
org.jfree.chart.util.Rotation.ANTICLOCKWISE.factor == orig(org.jfree.chart.util.Rotation.ANTICLOCKWISE.factor)
this.direction.name.toString == orig(this.direction.name.toString)
this.sectionPaintMap == orig(this.sectionPaintMap)
this.sectionPaintMap.store == orig(this.sectionPaintMap.store)
this.sectionPaintMap.store.getClass().getName() == orig(this.sectionPaintMap.store.getClass().getName())
this.sectionPaintMap.store.getClass().getName() == orig(this.sectionOutlinePaintMap.store.getClass().getName())
this.baseSectionPaint == orig(this.baseSectionPaint)
this.baseSectionPaint == orig(this.baseSectionOutlinePaint)
this.baseSectionPaint == orig(this.shadowPaint)
this.baseSectionPaint == orig(this.outlinePaint)
this.sectionOutlinesVisible == orig(this.sectionOutlinesVisible)
this.sectionOutlinePaintMap == orig(this.sectionOutlinePaintMap)
this.sectionOutlinePaintMap.store == orig(this.sectionOutlinePaintMap.store)
this.sectionOutlineStrokeMap == orig(this.sectionOutlineStrokeMap)
this.sectionOutlineStrokeMap.store == orig(this.sectionOutlineStrokeMap.store)
this.baseSectionOutlineStroke == orig(this.baseSectionOutlineStroke)
this.baseSectionOutlineStroke == orig(this.outlineStroke)
this.shadowXOffset == orig(this.shadowXOffset)
this.shadowYOffset == orig(this.shadowYOffset)
this.explodePercentages == orig(this.explodePercentages)
this.explodePercentages.getClass().getName() == orig(this.sectionOutlineStrokeMap.store.getClass().getName())
this.explodePercentages.getClass().getName() == orig(this.explodePercentages.getClass().getName())
this.labelGenerator == orig(this.labelGenerator)
this.labelGenerator.getClass().getName() == this.legendLabelGenerator.getClass().getName()
this.labelGenerator.getClass().getName() == orig(this.labelGenerator.getClass().getName())
this.labelGenerator.getClass().getName() == orig(this.legendLabelGenerator.getClass().getName())
this.simpleLabels == orig(this.simpleLabels)
this.labelPadding == orig(this.labelPadding)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(this.labelPadding.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(this.insets.unitType)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
org.jfree.chart.util.UnitType.RELATIVE == orig(this.simpleLabelOffset.unitType)
this.labelPadding.unitType.name.toString == orig(this.labelPadding.unitType.name.toString)
this.labelPadding.top == orig(this.labelPadding.top)
this.labelPadding.left == orig(this.labelPadding.left)
this.labelPadding.bottom == orig(this.labelPadding.bottom)
this.labelPadding.right == orig(this.labelPadding.right)
this.simpleLabelOffset == orig(this.simpleLabelOffset)
this.simpleLabelOffset.unitType.name == orig(this.simpleLabelOffset.unitType.name)
this.simpleLabelOffset.unitType.name.toString == orig(this.simpleLabelOffset.unitType.name.toString)
this.simpleLabelOffset.top == orig(this.simpleLabelOffset.top)
this.simpleLabelOffset.left == orig(this.simpleLabelOffset.left)
this.simpleLabelOffset.bottom == orig(this.simpleLabelOffset.bottom)
this.simpleLabelOffset.right == orig(this.simpleLabelOffset.right)
this.maximumLabelWidth == orig(this.maximumLabelWidth)
this.labelGap == orig(this.labelGap)
this.labelLinksVisible == orig(this.labelLinksVisible)
this.labelLinkMargin == orig(this.labelLinkMargin)
this.labelLinkStroke == orig(this.labelLinkStroke)
this.labelDistributor == orig(this.labelDistributor)
this.labelDistributor.getClass().getName() == orig(this.labelDistributor.getClass().getName())
this.labelDistributor.labels == orig(this.labelDistributor.labels)
this.labelDistributor.labels[] == orig(this.labelDistributor.labels[])
this.labelDistributor.labels.getClass().getName() == orig(this.labelDistributor.labels.getClass().getName())
this.toolTipGenerator == orig(this.toolTipGenerator)
this.toolTipGenerator.getClass().getName() == orig(this.toolTipGenerator.getClass().getName())
this.urlGenerator == orig(this.urlGenerator)
this.legendLabelGenerator == orig(this.legendLabelGenerator)
this.legendLabelToolTipGenerator == orig(this.legendLabelToolTipGenerator)
this.legendLabelURLGenerator == orig(this.legendLabelURLGenerator)
this.ignoreNullValues == orig(this.ignoreNullValues)
this.ignoreZeroValues == orig(this.ignoreZeroValues)
this.legendItemShape == orig(this.legendItemShape)
this.minimumArcAngleToDraw == orig(this.minimumArcAngleToDraw)
org.jfree.chart.plot.PiePlot.localizationResources == orig(org.jfree.chart.plot.PiePlot.localizationResources)
org.jfree.chart.plot.PiePlot.localizationResources.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.localizationResources.getClass().getName())
org.jfree.chart.plot.Plot.ZERO == orig(org.jfree.chart.plot.Plot.ZERO)
org.jfree.chart.plot.Plot.ZERO.getClass().getName() == orig(org.jfree.chart.plot.Plot.ZERO.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_INSETS == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name == orig(this.labelPadding.unitType.name)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name == orig(this.insets.unitType.name)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name.toString == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name.toString)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.top == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.top)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.left == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.left)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.right == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.right)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == orig(this.legendItemShape.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName())
this.parent == orig(this.parent)
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener == orig(org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener)
this.datasetGroup == orig(this.datasetGroup)
this.noDataMessage == orig(this.noDataMessage)
this.noDataMessageFont == orig(this.noDataMessageFont)
this.insets == orig(this.insets)
this.insets.unitType.name.toString == orig(this.insets.unitType.name.toString)
this.insets.top == orig(this.insets.top)
this.insets.left == orig(this.insets.left)
this.insets.bottom == orig(this.insets.bottom)
this.insets.right == orig(this.insets.right)
this.outlineVisible == orig(this.outlineVisible)
this.backgroundPaint == orig(this.backgroundPaint)
this.backgroundImage == orig(this.backgroundImage)
this.backgroundImageAlignment == orig(this.backgroundImageAlignment)
this.backgroundImageAlpha == orig(this.backgroundImageAlpha)
this.foregroundAlpha == orig(this.foregroundAlpha)
this.backgroundAlpha == orig(this.backgroundAlpha)
this.drawingSupplier == orig(this.drawingSupplier)
this.drawingSupplier.getClass().getName() == orig(this.drawingSupplier.getClass().getName())
this.listenerList == orig(this.listenerList)
return.getClass().getName() == orig(this.dataset.getClass().getName())
this.dataset has only one value
this.circular == false
this.sectionPaintMap has only one value
this.sectionPaintMap.store has only one value
this.sectionOutlinePaintMap has only one value
this.sectionOutlinePaintMap.store has only one value
this.sectionOutlineStrokeMap has only one value
this.sectionOutlineStrokeMap.store has only one value
this.explodePercentages has only one value
this.labelGenerator has only one value
this.labelPadding has only one value
this.simpleLabelOffset has only one value
this.labelLinkStroke has only one value
this.labelDistributor has only one value
this.labelDistributor.labels has only one value
this.toolTipGenerator has only one value
this.legendLabelGenerator has only one value
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener has only one value
this.noDataMessageFont has only one value
this.insets has only one value
this.insets.top == 0.0
this.insets.left == 5.0
this.insets.bottom == 5.0
this.insets.right == 5.0
this.drawingSupplier has only one value
this.listenerList has only one value
return has only one value
return.getClass().getName() == org.jfree.data.general.DefaultPieDataset.class
===========================================================================
org.jfree.chart.plot.PiePlot.getLegendItemShape():::ENTER
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener has only one value
this.insets.top == 0.0
this.insets.left == 5.0
this.insets.bottom == 5.0
this.insets.right == 5.0
===========================================================================
org.jfree.chart.plot.PiePlot.getLegendItemShape():::EXIT
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_FONT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_FONT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_FONT == orig(this.labelFont)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_PAINT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(this.labelPaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(this.labelOutlinePaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(this.labelLinkPaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(this.noDataMessagePaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.baseSectionPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.baseSectionOutlinePaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.shadowPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelBackgroundPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelOutlinePaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelShadowPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelLinkPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.noDataMessagePaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.outlinePaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.backgroundPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT == orig(this.labelBackgroundPaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE == orig(this.labelOutlineStroke)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(this.baseSectionOutlineStroke.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(this.labelOutlineStroke.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(this.labelLinkStroke.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(this.outlineStroke.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT == orig(this.labelShadowPaint)
this.dataset == orig(this.dataset)
this.dataset.getClass().getName() == orig(this.dataset.getClass().getName())
this.pieIndex == orig(this.pieIndex)
this.interiorGap == orig(this.interiorGap)
this.circular == orig(this.circular)
this.startAngle == orig(this.startAngle)
org.jfree.chart.util.Rotation.CLOCKWISE == orig(this.direction)
org.jfree.chart.util.Rotation.CLOCKWISE == orig(org.jfree.chart.util.Rotation.CLOCKWISE)
org.jfree.chart.util.Rotation.ANTICLOCKWISE == orig(org.jfree.chart.util.Rotation.ANTICLOCKWISE)
org.jfree.chart.util.Rotation.CLOCKWISE.name == orig(org.jfree.chart.util.Rotation.CLOCKWISE.name)
org.jfree.chart.util.Rotation.CLOCKWISE.name == orig(this.direction.name)
org.jfree.chart.util.Rotation.CLOCKWISE.name.toString == orig(org.jfree.chart.util.Rotation.CLOCKWISE.name.toString)
org.jfree.chart.util.Rotation.CLOCKWISE.factor == orig(org.jfree.chart.util.Rotation.CLOCKWISE.factor)
org.jfree.chart.util.Rotation.CLOCKWISE.factor == orig(this.direction.factor)
org.jfree.chart.util.Rotation.ANTICLOCKWISE.name == orig(org.jfree.chart.util.Rotation.ANTICLOCKWISE.name)
org.jfree.chart.util.Rotation.ANTICLOCKWISE.name.toString == orig(org.jfree.chart.util.Rotation.ANTICLOCKWISE.name.toString)
org.jfree.chart.util.Rotation.ANTICLOCKWISE.factor == orig(org.jfree.chart.util.Rotation.ANTICLOCKWISE.factor)
this.direction.name.toString == orig(this.direction.name.toString)
this.sectionPaintMap == orig(this.sectionPaintMap)
this.sectionPaintMap.store == orig(this.sectionPaintMap.store)
this.sectionPaintMap.store.getClass().getName() == orig(this.sectionPaintMap.store.getClass().getName())
this.sectionPaintMap.store.getClass().getName() == orig(this.sectionOutlinePaintMap.store.getClass().getName())
this.baseSectionPaint == orig(this.baseSectionPaint)
this.baseSectionPaint == orig(this.baseSectionOutlinePaint)
this.baseSectionPaint == orig(this.shadowPaint)
this.baseSectionPaint == orig(this.outlinePaint)
this.sectionOutlinesVisible == orig(this.sectionOutlinesVisible)
this.sectionOutlinePaintMap == orig(this.sectionOutlinePaintMap)
this.sectionOutlinePaintMap.store == orig(this.sectionOutlinePaintMap.store)
this.sectionOutlineStrokeMap == orig(this.sectionOutlineStrokeMap)
this.sectionOutlineStrokeMap.store == orig(this.sectionOutlineStrokeMap.store)
this.baseSectionOutlineStroke == orig(this.baseSectionOutlineStroke)
this.baseSectionOutlineStroke == orig(this.outlineStroke)
this.shadowXOffset == orig(this.shadowXOffset)
this.shadowYOffset == orig(this.shadowYOffset)
this.explodePercentages == orig(this.explodePercentages)
this.explodePercentages.getClass().getName() == orig(this.sectionOutlineStrokeMap.store.getClass().getName())
this.explodePercentages.getClass().getName() == orig(this.explodePercentages.getClass().getName())
this.labelGenerator == orig(this.labelGenerator)
this.labelGenerator.getClass().getName() == orig(this.labelGenerator.getClass().getName())
this.simpleLabels == orig(this.simpleLabels)
this.labelPadding == orig(this.labelPadding)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(this.labelPadding.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(this.insets.unitType)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
org.jfree.chart.util.UnitType.RELATIVE == orig(this.simpleLabelOffset.unitType)
this.labelPadding.unitType.name.toString == orig(this.labelPadding.unitType.name.toString)
this.labelPadding.top == orig(this.labelPadding.top)
this.labelPadding.left == orig(this.labelPadding.left)
this.labelPadding.bottom == orig(this.labelPadding.bottom)
this.labelPadding.right == orig(this.labelPadding.right)
this.simpleLabelOffset == orig(this.simpleLabelOffset)
this.simpleLabelOffset.unitType.name == orig(this.simpleLabelOffset.unitType.name)
this.simpleLabelOffset.unitType.name.toString == orig(this.simpleLabelOffset.unitType.name.toString)
this.simpleLabelOffset.top == orig(this.simpleLabelOffset.top)
this.simpleLabelOffset.left == orig(this.simpleLabelOffset.left)
this.simpleLabelOffset.bottom == orig(this.simpleLabelOffset.bottom)
this.simpleLabelOffset.right == orig(this.simpleLabelOffset.right)
this.maximumLabelWidth == orig(this.maximumLabelWidth)
this.labelGap == orig(this.labelGap)
this.labelLinksVisible == orig(this.labelLinksVisible)
this.labelLinkMargin == orig(this.labelLinkMargin)
this.labelLinkStroke == orig(this.labelLinkStroke)
this.labelDistributor == orig(this.labelDistributor)
this.labelDistributor.getClass().getName() == orig(this.labelDistributor.getClass().getName())
this.labelDistributor.labels == orig(this.labelDistributor.labels)
this.labelDistributor.labels[] == orig(this.labelDistributor.labels[])
this.labelDistributor.labels.getClass().getName() == orig(this.labelDistributor.labels.getClass().getName())
this.toolTipGenerator == orig(this.toolTipGenerator)
this.toolTipGenerator.getClass().getName() == orig(this.toolTipGenerator.getClass().getName())
this.urlGenerator == orig(this.urlGenerator)
this.legendLabelGenerator == orig(this.legendLabelGenerator)
this.legendLabelGenerator.getClass().getName() == orig(this.legendLabelGenerator.getClass().getName())
this.legendLabelToolTipGenerator == orig(this.legendLabelToolTipGenerator)
this.legendLabelURLGenerator == orig(this.legendLabelURLGenerator)
this.ignoreNullValues == orig(this.ignoreNullValues)
this.ignoreZeroValues == orig(this.ignoreZeroValues)
this.legendItemShape == orig(this.legendItemShape)
this.minimumArcAngleToDraw == orig(this.minimumArcAngleToDraw)
org.jfree.chart.plot.PiePlot.localizationResources == orig(org.jfree.chart.plot.PiePlot.localizationResources)
org.jfree.chart.plot.PiePlot.localizationResources.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.localizationResources.getClass().getName())
org.jfree.chart.plot.Plot.ZERO == orig(org.jfree.chart.plot.Plot.ZERO)
org.jfree.chart.plot.Plot.ZERO.getClass().getName() == orig(org.jfree.chart.plot.Plot.ZERO.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_INSETS == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name == orig(this.labelPadding.unitType.name)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name == orig(this.insets.unitType.name)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name.toString == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name.toString)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.top == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.top)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.left == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.left)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.right == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.right)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == return.getClass().getName()
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == orig(this.legendItemShape.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName())
this.parent == orig(this.parent)
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener == orig(org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener)
this.datasetGroup == orig(this.datasetGroup)
this.noDataMessage == orig(this.noDataMessage)
this.noDataMessageFont == orig(this.noDataMessageFont)
this.insets == orig(this.insets)
this.insets.unitType.name.toString == orig(this.insets.unitType.name.toString)
this.insets.top == orig(this.insets.top)
this.insets.left == orig(this.insets.left)
this.insets.bottom == orig(this.insets.bottom)
this.insets.right == orig(this.insets.right)
this.outlineVisible == orig(this.outlineVisible)
this.backgroundPaint == orig(this.backgroundPaint)
this.backgroundImage == orig(this.backgroundImage)
this.backgroundImageAlignment == orig(this.backgroundImageAlignment)
this.backgroundImageAlpha == orig(this.backgroundImageAlpha)
this.foregroundAlpha == orig(this.foregroundAlpha)
this.backgroundAlpha == orig(this.backgroundAlpha)
this.drawingSupplier == orig(this.drawingSupplier)
this.drawingSupplier.getClass().getName() == orig(this.drawingSupplier.getClass().getName())
this.listenerList == orig(this.listenerList)
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener has only one value
this.insets.top == 0.0
this.insets.left == 5.0
this.insets.bottom == 5.0
this.insets.right == 5.0
return has only one value
===========================================================================
org.jfree.chart.plot.PiePlot.getLegendItems():::ENTER
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener has only one value
this.insets.top == 0.0
this.insets.left == 5.0
this.insets.bottom == 5.0
this.insets.right == 5.0
===========================================================================
org.jfree.chart.plot.PiePlot.getLegendItems():::EXIT2667
===========================================================================
org.jfree.chart.plot.PiePlot.getLegendItems():::EXIT
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_FONT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_FONT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_FONT == orig(this.labelFont)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_PAINT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(this.labelPaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(this.labelOutlinePaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(this.labelLinkPaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(this.noDataMessagePaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.baseSectionPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.baseSectionOutlinePaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.shadowPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelBackgroundPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelOutlinePaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelShadowPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelLinkPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.noDataMessagePaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.outlinePaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.backgroundPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT == orig(this.labelBackgroundPaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE == orig(this.labelOutlineStroke)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(this.baseSectionOutlineStroke.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(this.labelOutlineStroke.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(this.labelLinkStroke.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(this.outlineStroke.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT == orig(this.labelShadowPaint)
this.dataset == orig(this.dataset)
this.dataset.getClass().getName() == orig(this.dataset.getClass().getName())
this.pieIndex == orig(this.pieIndex)
this.interiorGap == orig(this.interiorGap)
this.circular == orig(this.circular)
this.startAngle == orig(this.startAngle)
org.jfree.chart.util.Rotation.CLOCKWISE == orig(this.direction)
org.jfree.chart.util.Rotation.CLOCKWISE == orig(org.jfree.chart.util.Rotation.CLOCKWISE)
org.jfree.chart.util.Rotation.ANTICLOCKWISE == orig(org.jfree.chart.util.Rotation.ANTICLOCKWISE)
org.jfree.chart.util.Rotation.CLOCKWISE.name == orig(org.jfree.chart.util.Rotation.CLOCKWISE.name)
org.jfree.chart.util.Rotation.CLOCKWISE.name == orig(this.direction.name)
org.jfree.chart.util.Rotation.CLOCKWISE.name.toString == orig(org.jfree.chart.util.Rotation.CLOCKWISE.name.toString)
org.jfree.chart.util.Rotation.CLOCKWISE.factor == orig(org.jfree.chart.util.Rotation.CLOCKWISE.factor)
org.jfree.chart.util.Rotation.CLOCKWISE.factor == orig(this.direction.factor)
org.jfree.chart.util.Rotation.ANTICLOCKWISE.name == orig(org.jfree.chart.util.Rotation.ANTICLOCKWISE.name)
org.jfree.chart.util.Rotation.ANTICLOCKWISE.name.toString == orig(org.jfree.chart.util.Rotation.ANTICLOCKWISE.name.toString)
org.jfree.chart.util.Rotation.ANTICLOCKWISE.factor == orig(org.jfree.chart.util.Rotation.ANTICLOCKWISE.factor)
this.direction.name.toString == orig(this.direction.name.toString)
this.sectionPaintMap == orig(this.sectionPaintMap)
this.sectionPaintMap.store == orig(this.sectionPaintMap.store)
this.sectionPaintMap.store.getClass().getName() == orig(this.sectionPaintMap.store.getClass().getName())
this.sectionPaintMap.store.getClass().getName() == orig(this.sectionOutlinePaintMap.store.getClass().getName())
this.baseSectionPaint == orig(this.baseSectionPaint)
this.baseSectionPaint == orig(this.baseSectionOutlinePaint)
this.baseSectionPaint == orig(this.shadowPaint)
this.baseSectionPaint == orig(this.outlinePaint)
this.sectionOutlinesVisible == orig(this.sectionOutlinesVisible)
this.sectionOutlinePaintMap == orig(this.sectionOutlinePaintMap)
this.sectionOutlinePaintMap.store == orig(this.sectionOutlinePaintMap.store)
this.sectionOutlineStrokeMap == orig(this.sectionOutlineStrokeMap)
this.sectionOutlineStrokeMap.store == orig(this.sectionOutlineStrokeMap.store)
this.baseSectionOutlineStroke == orig(this.baseSectionOutlineStroke)
this.baseSectionOutlineStroke == orig(this.outlineStroke)
this.shadowXOffset == orig(this.shadowXOffset)
this.shadowYOffset == orig(this.shadowYOffset)
this.explodePercentages == orig(this.explodePercentages)
this.explodePercentages.getClass().getName() == orig(this.sectionOutlineStrokeMap.store.getClass().getName())
this.explodePercentages.getClass().getName() == orig(this.explodePercentages.getClass().getName())
this.labelGenerator == orig(this.labelGenerator)
this.labelGenerator.getClass().getName() == orig(this.labelGenerator.getClass().getName())
this.simpleLabels == orig(this.simpleLabels)
this.labelPadding == orig(this.labelPadding)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(this.labelPadding.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(this.insets.unitType)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
org.jfree.chart.util.UnitType.RELATIVE == orig(this.simpleLabelOffset.unitType)
this.labelPadding.unitType.name.toString == orig(this.labelPadding.unitType.name.toString)
this.labelPadding.top == orig(this.labelPadding.top)
this.labelPadding.left == orig(this.labelPadding.left)
this.labelPadding.bottom == orig(this.labelPadding.bottom)
this.labelPadding.right == orig(this.labelPadding.right)
this.simpleLabelOffset == orig(this.simpleLabelOffset)
this.simpleLabelOffset.unitType.name == orig(this.simpleLabelOffset.unitType.name)
this.simpleLabelOffset.unitType.name.toString == orig(this.simpleLabelOffset.unitType.name.toString)
this.simpleLabelOffset.top == orig(this.simpleLabelOffset.top)
this.simpleLabelOffset.left == orig(this.simpleLabelOffset.left)
this.simpleLabelOffset.bottom == orig(this.simpleLabelOffset.bottom)
this.simpleLabelOffset.right == orig(this.simpleLabelOffset.right)
this.maximumLabelWidth == orig(this.maximumLabelWidth)
this.labelGap == orig(this.labelGap)
this.labelLinksVisible == orig(this.labelLinksVisible)
this.labelLinkMargin == orig(this.labelLinkMargin)
this.labelLinkStroke == orig(this.labelLinkStroke)
this.labelDistributor == orig(this.labelDistributor)
this.labelDistributor.getClass().getName() == orig(this.labelDistributor.getClass().getName())
this.labelDistributor.labels == orig(this.labelDistributor.labels)
this.labelDistributor.labels[] == orig(this.labelDistributor.labels[])
this.labelDistributor.labels.getClass().getName() == return.items.getClass().getName()
this.toolTipGenerator == orig(this.toolTipGenerator)
this.toolTipGenerator.getClass().getName() == orig(this.toolTipGenerator.getClass().getName())
this.urlGenerator == orig(this.urlGenerator)
this.legendLabelGenerator == orig(this.legendLabelGenerator)
this.legendLabelGenerator.getClass().getName() == orig(this.legendLabelGenerator.getClass().getName())
this.legendLabelToolTipGenerator == orig(this.legendLabelToolTipGenerator)
this.legendLabelURLGenerator == orig(this.legendLabelURLGenerator)
this.ignoreNullValues == orig(this.ignoreNullValues)
this.ignoreZeroValues == orig(this.ignoreZeroValues)
this.legendItemShape == orig(this.legendItemShape)
this.minimumArcAngleToDraw == orig(this.minimumArcAngleToDraw)
org.jfree.chart.plot.PiePlot.localizationResources == orig(org.jfree.chart.plot.PiePlot.localizationResources)
org.jfree.chart.plot.PiePlot.localizationResources.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.localizationResources.getClass().getName())
org.jfree.chart.plot.Plot.ZERO == orig(org.jfree.chart.plot.Plot.ZERO)
org.jfree.chart.plot.Plot.ZERO.getClass().getName() == orig(org.jfree.chart.plot.Plot.ZERO.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_INSETS == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name == orig(this.labelPadding.unitType.name)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name == orig(this.insets.unitType.name)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name.toString == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name.toString)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.top == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.top)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.left == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.left)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.right == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.right)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == orig(this.legendItemShape.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName())
this.parent == orig(this.parent)
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener == orig(org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener)
this.datasetGroup == orig(this.datasetGroup)
this.noDataMessage == orig(this.noDataMessage)
this.noDataMessageFont == orig(this.noDataMessageFont)
this.insets == orig(this.insets)
this.insets.unitType.name.toString == orig(this.insets.unitType.name.toString)
this.insets.top == orig(this.insets.top)
this.insets.left == orig(this.insets.left)
this.insets.bottom == orig(this.insets.bottom)
this.insets.right == orig(this.insets.right)
this.outlineVisible == orig(this.outlineVisible)
this.backgroundPaint == orig(this.backgroundPaint)
this.backgroundImage == orig(this.backgroundImage)
this.backgroundImageAlignment == orig(this.backgroundImageAlignment)
this.backgroundImageAlpha == orig(this.backgroundImageAlpha)
this.foregroundAlpha == orig(this.foregroundAlpha)
this.backgroundAlpha == orig(this.backgroundAlpha)
this.drawingSupplier == orig(this.drawingSupplier)
this.drawingSupplier.getClass().getName() == orig(this.drawingSupplier.getClass().getName())
this.listenerList == orig(this.listenerList)
return.items.getClass().getName() == orig(this.labelDistributor.labels.getClass().getName())
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener has only one value
this.insets.top == 0.0
this.insets.left == 5.0
this.insets.bottom == 5.0
this.insets.right == 5.0
return.items[].getClass().getName() elements == org.jfree.chart.LegendItem.class
return.items[].getClass().getName() one of { [], [org.jfree.chart.LegendItem, org.jfree.chart.LegendItem, org.jfree.chart.LegendItem] }
return.items.getClass().getName() == java.util.ArrayList.class
size(return.items[]) one of { 0, 3 }
===========================================================================
org.jfree.chart.plot.PiePlot.lookupSectionOutlinePaint(java.lang.Comparable):::ENTER
this.labelGenerator.getClass().getName() == this.legendLabelGenerator.getClass().getName()
this has only one value
this.dataset has only one value
this.circular == false
this.sectionPaintMap has only one value
this.sectionPaintMap.store has only one value
this.sectionOutlinePaintMap has only one value
this.sectionOutlinePaintMap.store has only one value
this.sectionOutlineStrokeMap has only one value
this.sectionOutlineStrokeMap.store has only one value
this.explodePercentages has only one value
this.labelGenerator has only one value
this.labelPadding has only one value
this.simpleLabelOffset has only one value
this.labelLinkStroke has only one value
this.labelDistributor has only one value
this.labelDistributor.labels has only one value
this.toolTipGenerator has only one value
this.legendLabelGenerator has only one value
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener has only one value
this.noDataMessageFont has only one value
this.insets has only one value
this.insets.top == 0.0
this.insets.left == 5.0
this.insets.bottom == 5.0
this.insets.right == 5.0
this.drawingSupplier has only one value
this.listenerList has only one value
key.getClass().getName() == java.lang.String.class
===========================================================================
org.jfree.chart.plot.PiePlot.lookupSectionOutlinePaint(java.lang.Comparable):::EXIT
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_FONT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_FONT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_FONT == orig(this.labelFont)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_PAINT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(this.labelPaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(this.labelOutlinePaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(this.labelLinkPaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(this.noDataMessagePaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == return.getClass().getName()
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.baseSectionPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.baseSectionOutlinePaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.shadowPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelBackgroundPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelOutlinePaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelShadowPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelLinkPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.noDataMessagePaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.outlinePaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.backgroundPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT == orig(this.labelBackgroundPaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE == orig(this.labelOutlineStroke)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(this.baseSectionOutlineStroke.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(this.labelOutlineStroke.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(this.labelLinkStroke.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(this.outlineStroke.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT == orig(this.labelShadowPaint)
this.dataset == orig(this.dataset)
this.dataset.getClass().getName() == orig(this.dataset.getClass().getName())
this.pieIndex == orig(this.pieIndex)
this.interiorGap == orig(this.interiorGap)
this.circular == orig(this.circular)
this.startAngle == orig(this.startAngle)
org.jfree.chart.util.Rotation.CLOCKWISE == orig(this.direction)
org.jfree.chart.util.Rotation.CLOCKWISE == orig(org.jfree.chart.util.Rotation.CLOCKWISE)
org.jfree.chart.util.Rotation.ANTICLOCKWISE == orig(org.jfree.chart.util.Rotation.ANTICLOCKWISE)
org.jfree.chart.util.Rotation.CLOCKWISE.name == orig(org.jfree.chart.util.Rotation.CLOCKWISE.name)
org.jfree.chart.util.Rotation.CLOCKWISE.name == orig(this.direction.name)
org.jfree.chart.util.Rotation.CLOCKWISE.name.toString == orig(org.jfree.chart.util.Rotation.CLOCKWISE.name.toString)
org.jfree.chart.util.Rotation.CLOCKWISE.factor == orig(org.jfree.chart.util.Rotation.CLOCKWISE.factor)
org.jfree.chart.util.Rotation.CLOCKWISE.factor == orig(this.direction.factor)
org.jfree.chart.util.Rotation.ANTICLOCKWISE.name == orig(org.jfree.chart.util.Rotation.ANTICLOCKWISE.name)
org.jfree.chart.util.Rotation.ANTICLOCKWISE.name.toString == orig(org.jfree.chart.util.Rotation.ANTICLOCKWISE.name.toString)
org.jfree.chart.util.Rotation.ANTICLOCKWISE.factor == orig(org.jfree.chart.util.Rotation.ANTICLOCKWISE.factor)
this.direction.name.toString == orig(this.direction.name.toString)
this.sectionPaintMap == orig(this.sectionPaintMap)
this.sectionPaintMap.store == orig(this.sectionPaintMap.store)
this.sectionPaintMap.store.getClass().getName() == orig(this.sectionPaintMap.store.getClass().getName())
this.sectionPaintMap.store.getClass().getName() == orig(this.sectionOutlinePaintMap.store.getClass().getName())
this.baseSectionPaint == orig(this.baseSectionPaint)
this.baseSectionPaint == orig(this.baseSectionOutlinePaint)
this.baseSectionPaint == orig(this.shadowPaint)
this.baseSectionPaint == orig(this.outlinePaint)
this.sectionOutlinesVisible == orig(this.sectionOutlinesVisible)
this.sectionOutlinePaintMap == orig(this.sectionOutlinePaintMap)
this.sectionOutlinePaintMap.store == orig(this.sectionOutlinePaintMap.store)
this.sectionOutlineStrokeMap == orig(this.sectionOutlineStrokeMap)
this.sectionOutlineStrokeMap.store == orig(this.sectionOutlineStrokeMap.store)
this.baseSectionOutlineStroke == orig(this.baseSectionOutlineStroke)
this.baseSectionOutlineStroke == orig(this.outlineStroke)
this.shadowXOffset == orig(this.shadowXOffset)
this.shadowYOffset == orig(this.shadowYOffset)
this.explodePercentages == orig(this.explodePercentages)
this.explodePercentages.getClass().getName() == orig(this.sectionOutlineStrokeMap.store.getClass().getName())
this.explodePercentages.getClass().getName() == orig(this.explodePercentages.getClass().getName())
this.labelGenerator == orig(this.labelGenerator)
this.labelGenerator.getClass().getName() == this.legendLabelGenerator.getClass().getName()
this.labelGenerator.getClass().getName() == orig(this.labelGenerator.getClass().getName())
this.labelGenerator.getClass().getName() == orig(this.legendLabelGenerator.getClass().getName())
this.simpleLabels == orig(this.simpleLabels)
this.labelPadding == orig(this.labelPadding)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(this.labelPadding.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(this.insets.unitType)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
org.jfree.chart.util.UnitType.RELATIVE == orig(this.simpleLabelOffset.unitType)
this.labelPadding.unitType.name.toString == orig(this.labelPadding.unitType.name.toString)
this.labelPadding.top == orig(this.labelPadding.top)
this.labelPadding.left == orig(this.labelPadding.left)
this.labelPadding.bottom == orig(this.labelPadding.bottom)
this.labelPadding.right == orig(this.labelPadding.right)
this.simpleLabelOffset == orig(this.simpleLabelOffset)
this.simpleLabelOffset.unitType.name == orig(this.simpleLabelOffset.unitType.name)
this.simpleLabelOffset.unitType.name.toString == orig(this.simpleLabelOffset.unitType.name.toString)
this.simpleLabelOffset.top == orig(this.simpleLabelOffset.top)
this.simpleLabelOffset.left == orig(this.simpleLabelOffset.left)
this.simpleLabelOffset.bottom == orig(this.simpleLabelOffset.bottom)
this.simpleLabelOffset.right == orig(this.simpleLabelOffset.right)
this.maximumLabelWidth == orig(this.maximumLabelWidth)
this.labelGap == orig(this.labelGap)
this.labelLinksVisible == orig(this.labelLinksVisible)
this.labelLinkMargin == orig(this.labelLinkMargin)
this.labelLinkStroke == orig(this.labelLinkStroke)
this.labelDistributor == orig(this.labelDistributor)
this.labelDistributor.getClass().getName() == orig(this.labelDistributor.getClass().getName())
this.labelDistributor.labels == orig(this.labelDistributor.labels)
this.labelDistributor.labels[] == orig(this.labelDistributor.labels[])
this.labelDistributor.labels.getClass().getName() == orig(this.labelDistributor.labels.getClass().getName())
this.toolTipGenerator == orig(this.toolTipGenerator)
this.toolTipGenerator.getClass().getName() == orig(this.toolTipGenerator.getClass().getName())
this.urlGenerator == orig(this.urlGenerator)
this.legendLabelGenerator == orig(this.legendLabelGenerator)
this.legendLabelToolTipGenerator == orig(this.legendLabelToolTipGenerator)
this.legendLabelURLGenerator == orig(this.legendLabelURLGenerator)
this.ignoreNullValues == orig(this.ignoreNullValues)
this.ignoreZeroValues == orig(this.ignoreZeroValues)
this.legendItemShape == orig(this.legendItemShape)
this.minimumArcAngleToDraw == orig(this.minimumArcAngleToDraw)
org.jfree.chart.plot.PiePlot.localizationResources == orig(org.jfree.chart.plot.PiePlot.localizationResources)
org.jfree.chart.plot.PiePlot.localizationResources.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.localizationResources.getClass().getName())
org.jfree.chart.plot.Plot.ZERO == orig(org.jfree.chart.plot.Plot.ZERO)
org.jfree.chart.plot.Plot.ZERO.getClass().getName() == orig(org.jfree.chart.plot.Plot.ZERO.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_INSETS == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name == orig(this.labelPadding.unitType.name)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name == orig(this.insets.unitType.name)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name.toString == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name.toString)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.top == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.top)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.left == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.left)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.right == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.right)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == orig(this.legendItemShape.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName())
this.parent == orig(this.parent)
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener == orig(org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener)
this.datasetGroup == orig(this.datasetGroup)
this.noDataMessage == orig(this.noDataMessage)
this.noDataMessageFont == orig(this.noDataMessageFont)
this.insets == orig(this.insets)
this.insets.unitType.name.toString == orig(this.insets.unitType.name.toString)
this.insets.top == orig(this.insets.top)
this.insets.left == orig(this.insets.left)
this.insets.bottom == orig(this.insets.bottom)
this.insets.right == orig(this.insets.right)
this.outlineVisible == orig(this.outlineVisible)
this.backgroundPaint == orig(this.backgroundPaint)
this.backgroundImage == orig(this.backgroundImage)
this.backgroundImageAlignment == orig(this.backgroundImageAlignment)
this.backgroundImageAlpha == orig(this.backgroundImageAlpha)
this.foregroundAlpha == orig(this.foregroundAlpha)
this.backgroundAlpha == orig(this.backgroundAlpha)
this.drawingSupplier == orig(this.drawingSupplier)
this.drawingSupplier.getClass().getName() == orig(this.drawingSupplier.getClass().getName())
this.listenerList == orig(this.listenerList)
this.dataset has only one value
this.circular == false
this.sectionPaintMap has only one value
this.sectionPaintMap.store has only one value
this.sectionOutlinePaintMap has only one value
this.sectionOutlinePaintMap.store has only one value
this.sectionOutlineStrokeMap has only one value
this.sectionOutlineStrokeMap.store has only one value
this.explodePercentages has only one value
this.labelGenerator has only one value
this.labelPadding has only one value
this.simpleLabelOffset has only one value
this.labelLinkStroke has only one value
this.labelDistributor has only one value
this.labelDistributor.labels has only one value
this.toolTipGenerator has only one value
this.legendLabelGenerator has only one value
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener has only one value
this.noDataMessageFont has only one value
this.insets has only one value
this.insets.top == 0.0
this.insets.left == 5.0
this.insets.bottom == 5.0
this.insets.right == 5.0
this.drawingSupplier has only one value
this.listenerList has only one value
return has only one value
===========================================================================
org.jfree.chart.plot.PiePlot.lookupSectionOutlinePaint(java.lang.Comparable, boolean):::ENTER
this.labelGenerator.getClass().getName() == this.legendLabelGenerator.getClass().getName()
this has only one value
this.dataset has only one value
this.circular == false
this.sectionPaintMap has only one value
this.sectionPaintMap.store has only one value
this.sectionOutlinePaintMap has only one value
this.sectionOutlinePaintMap.store has only one value
this.sectionOutlineStrokeMap has only one value
this.sectionOutlineStrokeMap.store has only one value
this.explodePercentages has only one value
this.labelGenerator has only one value
this.labelPadding has only one value
this.simpleLabelOffset has only one value
this.labelLinkStroke has only one value
this.labelDistributor has only one value
this.labelDistributor.labels has only one value
this.toolTipGenerator has only one value
this.legendLabelGenerator has only one value
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener has only one value
this.noDataMessageFont has only one value
this.insets has only one value
this.insets.top == 0.0
this.insets.left == 5.0
this.insets.bottom == 5.0
this.insets.right == 5.0
this.drawingSupplier has only one value
this.listenerList has only one value
key.getClass().getName() == java.lang.String.class
autoPopulate == false
===========================================================================
org.jfree.chart.plot.PiePlot.lookupSectionOutlinePaint(java.lang.Comparable, boolean):::EXIT1045
===========================================================================
org.jfree.chart.plot.PiePlot.lookupSectionOutlinePaint(java.lang.Comparable, boolean):::EXIT
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_FONT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_FONT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_FONT == orig(this.labelFont)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_PAINT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(this.labelPaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(this.labelOutlinePaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(this.labelLinkPaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(this.noDataMessagePaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == return.getClass().getName()
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.baseSectionPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.baseSectionOutlinePaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.shadowPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelBackgroundPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelOutlinePaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelShadowPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelLinkPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.noDataMessagePaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.outlinePaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.backgroundPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT == orig(this.labelBackgroundPaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE == orig(this.labelOutlineStroke)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(this.baseSectionOutlineStroke.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(this.labelOutlineStroke.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(this.labelLinkStroke.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(this.outlineStroke.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT == orig(this.labelShadowPaint)
this.dataset == orig(this.dataset)
this.dataset.getClass().getName() == orig(this.dataset.getClass().getName())
this.pieIndex == orig(this.pieIndex)
this.interiorGap == orig(this.interiorGap)
this.circular == orig(this.circular)
this.startAngle == orig(this.startAngle)
org.jfree.chart.util.Rotation.CLOCKWISE == orig(this.direction)
org.jfree.chart.util.Rotation.CLOCKWISE == orig(org.jfree.chart.util.Rotation.CLOCKWISE)
org.jfree.chart.util.Rotation.ANTICLOCKWISE == orig(org.jfree.chart.util.Rotation.ANTICLOCKWISE)
org.jfree.chart.util.Rotation.CLOCKWISE.name == orig(org.jfree.chart.util.Rotation.CLOCKWISE.name)
org.jfree.chart.util.Rotation.CLOCKWISE.name == orig(this.direction.name)
org.jfree.chart.util.Rotation.CLOCKWISE.name.toString == orig(org.jfree.chart.util.Rotation.CLOCKWISE.name.toString)
org.jfree.chart.util.Rotation.CLOCKWISE.factor == orig(org.jfree.chart.util.Rotation.CLOCKWISE.factor)
org.jfree.chart.util.Rotation.CLOCKWISE.factor == orig(this.direction.factor)
org.jfree.chart.util.Rotation.ANTICLOCKWISE.name == orig(org.jfree.chart.util.Rotation.ANTICLOCKWISE.name)
org.jfree.chart.util.Rotation.ANTICLOCKWISE.name.toString == orig(org.jfree.chart.util.Rotation.ANTICLOCKWISE.name.toString)
org.jfree.chart.util.Rotation.ANTICLOCKWISE.factor == orig(org.jfree.chart.util.Rotation.ANTICLOCKWISE.factor)
this.direction.name.toString == orig(this.direction.name.toString)
this.sectionPaintMap == orig(this.sectionPaintMap)
this.sectionPaintMap.store == orig(this.sectionPaintMap.store)
this.sectionPaintMap.store.getClass().getName() == orig(this.sectionPaintMap.store.getClass().getName())
this.sectionPaintMap.store.getClass().getName() == orig(this.sectionOutlinePaintMap.store.getClass().getName())
this.baseSectionPaint == orig(this.baseSectionPaint)
this.baseSectionPaint == orig(this.baseSectionOutlinePaint)
this.baseSectionPaint == orig(this.shadowPaint)
this.baseSectionPaint == orig(this.outlinePaint)
this.sectionOutlinesVisible == orig(this.sectionOutlinesVisible)
this.sectionOutlinePaintMap == orig(this.sectionOutlinePaintMap)
this.sectionOutlinePaintMap.store == orig(this.sectionOutlinePaintMap.store)
this.sectionOutlineStrokeMap == orig(this.sectionOutlineStrokeMap)
this.sectionOutlineStrokeMap.store == orig(this.sectionOutlineStrokeMap.store)
this.baseSectionOutlineStroke == orig(this.baseSectionOutlineStroke)
this.baseSectionOutlineStroke == orig(this.outlineStroke)
this.shadowXOffset == orig(this.shadowXOffset)
this.shadowYOffset == orig(this.shadowYOffset)
this.explodePercentages == orig(this.explodePercentages)
this.explodePercentages.getClass().getName() == orig(this.sectionOutlineStrokeMap.store.getClass().getName())
this.explodePercentages.getClass().getName() == orig(this.explodePercentages.getClass().getName())
this.labelGenerator == orig(this.labelGenerator)
this.labelGenerator.getClass().getName() == this.legendLabelGenerator.getClass().getName()
this.labelGenerator.getClass().getName() == orig(this.labelGenerator.getClass().getName())
this.labelGenerator.getClass().getName() == orig(this.legendLabelGenerator.getClass().getName())
this.simpleLabels == orig(this.simpleLabels)
this.labelPadding == orig(this.labelPadding)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(this.labelPadding.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(this.insets.unitType)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
org.jfree.chart.util.UnitType.RELATIVE == orig(this.simpleLabelOffset.unitType)
this.labelPadding.unitType.name.toString == orig(this.labelPadding.unitType.name.toString)
this.labelPadding.top == orig(this.labelPadding.top)
this.labelPadding.left == orig(this.labelPadding.left)
this.labelPadding.bottom == orig(this.labelPadding.bottom)
this.labelPadding.right == orig(this.labelPadding.right)
this.simpleLabelOffset == orig(this.simpleLabelOffset)
this.simpleLabelOffset.unitType.name == orig(this.simpleLabelOffset.unitType.name)
this.simpleLabelOffset.unitType.name.toString == orig(this.simpleLabelOffset.unitType.name.toString)
this.simpleLabelOffset.top == orig(this.simpleLabelOffset.top)
this.simpleLabelOffset.left == orig(this.simpleLabelOffset.left)
this.simpleLabelOffset.bottom == orig(this.simpleLabelOffset.bottom)
this.simpleLabelOffset.right == orig(this.simpleLabelOffset.right)
this.maximumLabelWidth == orig(this.maximumLabelWidth)
this.labelGap == orig(this.labelGap)
this.labelLinksVisible == orig(this.labelLinksVisible)
this.labelLinkMargin == orig(this.labelLinkMargin)
this.labelLinkStroke == orig(this.labelLinkStroke)
this.labelDistributor == orig(this.labelDistributor)
this.labelDistributor.getClass().getName() == orig(this.labelDistributor.getClass().getName())
this.labelDistributor.labels == orig(this.labelDistributor.labels)
this.labelDistributor.labels[] == orig(this.labelDistributor.labels[])
this.labelDistributor.labels.getClass().getName() == orig(this.labelDistributor.labels.getClass().getName())
this.toolTipGenerator == orig(this.toolTipGenerator)
this.toolTipGenerator.getClass().getName() == orig(this.toolTipGenerator.getClass().getName())
this.urlGenerator == orig(this.urlGenerator)
this.legendLabelGenerator == orig(this.legendLabelGenerator)
this.legendLabelToolTipGenerator == orig(this.legendLabelToolTipGenerator)
this.legendLabelURLGenerator == orig(this.legendLabelURLGenerator)
this.ignoreNullValues == orig(this.ignoreNullValues)
this.ignoreZeroValues == orig(this.ignoreZeroValues)
this.legendItemShape == orig(this.legendItemShape)
this.minimumArcAngleToDraw == orig(this.minimumArcAngleToDraw)
org.jfree.chart.plot.PiePlot.localizationResources == orig(org.jfree.chart.plot.PiePlot.localizationResources)
org.jfree.chart.plot.PiePlot.localizationResources.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.localizationResources.getClass().getName())
org.jfree.chart.plot.Plot.ZERO == orig(org.jfree.chart.plot.Plot.ZERO)
org.jfree.chart.plot.Plot.ZERO.getClass().getName() == orig(org.jfree.chart.plot.Plot.ZERO.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_INSETS == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name == orig(this.labelPadding.unitType.name)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name == orig(this.insets.unitType.name)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name.toString == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name.toString)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.top == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.top)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.left == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.left)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.right == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.right)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == orig(this.legendItemShape.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName())
this.parent == orig(this.parent)
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener == orig(org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener)
this.datasetGroup == orig(this.datasetGroup)
this.noDataMessage == orig(this.noDataMessage)
this.noDataMessageFont == orig(this.noDataMessageFont)
this.insets == orig(this.insets)
this.insets.unitType.name.toString == orig(this.insets.unitType.name.toString)
this.insets.top == orig(this.insets.top)
this.insets.left == orig(this.insets.left)
this.insets.bottom == orig(this.insets.bottom)
this.insets.right == orig(this.insets.right)
this.outlineVisible == orig(this.outlineVisible)
this.backgroundPaint == orig(this.backgroundPaint)
this.backgroundImage == orig(this.backgroundImage)
this.backgroundImageAlignment == orig(this.backgroundImageAlignment)
this.backgroundImageAlpha == orig(this.backgroundImageAlpha)
this.foregroundAlpha == orig(this.foregroundAlpha)
this.backgroundAlpha == orig(this.backgroundAlpha)
this.drawingSupplier == orig(this.drawingSupplier)
this.drawingSupplier.getClass().getName() == orig(this.drawingSupplier.getClass().getName())
this.listenerList == orig(this.listenerList)
this.dataset has only one value
this.circular == false
this.sectionPaintMap has only one value
this.sectionPaintMap.store has only one value
this.sectionOutlinePaintMap has only one value
this.sectionOutlinePaintMap.store has only one value
this.sectionOutlineStrokeMap has only one value
this.sectionOutlineStrokeMap.store has only one value
this.explodePercentages has only one value
this.labelGenerator has only one value
this.labelPadding has only one value
this.simpleLabelOffset has only one value
this.labelLinkStroke has only one value
this.labelDistributor has only one value
this.labelDistributor.labels has only one value
this.toolTipGenerator has only one value
this.legendLabelGenerator has only one value
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener has only one value
this.noDataMessageFont has only one value
this.insets has only one value
this.insets.top == 0.0
this.insets.left == 5.0
this.insets.bottom == 5.0
this.insets.right == 5.0
this.drawingSupplier has only one value
this.listenerList has only one value
return has only one value
===========================================================================
org.jfree.chart.plot.PiePlot.lookupSectionOutlineStroke(java.lang.Comparable):::ENTER
this.labelGenerator.getClass().getName() == this.legendLabelGenerator.getClass().getName()
this has only one value
this.dataset has only one value
this.circular == false
this.sectionPaintMap has only one value
this.sectionPaintMap.store has only one value
this.sectionOutlinePaintMap has only one value
this.sectionOutlinePaintMap.store has only one value
this.sectionOutlineStrokeMap has only one value
this.sectionOutlineStrokeMap.store has only one value
this.explodePercentages has only one value
this.labelGenerator has only one value
this.labelPadding has only one value
this.simpleLabelOffset has only one value
this.labelLinkStroke has only one value
this.labelDistributor has only one value
this.labelDistributor.labels has only one value
this.toolTipGenerator has only one value
this.legendLabelGenerator has only one value
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener has only one value
this.noDataMessageFont has only one value
this.insets has only one value
this.insets.top == 0.0
this.insets.left == 5.0
this.insets.bottom == 5.0
this.insets.right == 5.0
this.drawingSupplier has only one value
this.listenerList has only one value
key.getClass().getName() == java.lang.String.class
===========================================================================
org.jfree.chart.plot.PiePlot.lookupSectionOutlineStroke(java.lang.Comparable):::EXIT
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_FONT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_FONT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_FONT == orig(this.labelFont)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_PAINT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(this.labelPaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(this.labelOutlinePaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(this.labelLinkPaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(this.noDataMessagePaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.baseSectionPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.baseSectionOutlinePaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.shadowPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelBackgroundPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelOutlinePaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelShadowPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelLinkPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.noDataMessagePaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.outlinePaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.backgroundPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT == orig(this.labelBackgroundPaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE == orig(this.labelOutlineStroke)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == return.getClass().getName()
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(this.baseSectionOutlineStroke.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(this.labelOutlineStroke.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(this.labelLinkStroke.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(this.outlineStroke.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT == orig(this.labelShadowPaint)
this.dataset == orig(this.dataset)
this.dataset.getClass().getName() == orig(this.dataset.getClass().getName())
this.pieIndex == orig(this.pieIndex)
this.interiorGap == orig(this.interiorGap)
this.circular == orig(this.circular)
this.startAngle == orig(this.startAngle)
org.jfree.chart.util.Rotation.CLOCKWISE == orig(this.direction)
org.jfree.chart.util.Rotation.CLOCKWISE == orig(org.jfree.chart.util.Rotation.CLOCKWISE)
org.jfree.chart.util.Rotation.ANTICLOCKWISE == orig(org.jfree.chart.util.Rotation.ANTICLOCKWISE)
org.jfree.chart.util.Rotation.CLOCKWISE.name == orig(org.jfree.chart.util.Rotation.CLOCKWISE.name)
org.jfree.chart.util.Rotation.CLOCKWISE.name == orig(this.direction.name)
org.jfree.chart.util.Rotation.CLOCKWISE.name.toString == orig(org.jfree.chart.util.Rotation.CLOCKWISE.name.toString)
org.jfree.chart.util.Rotation.CLOCKWISE.factor == orig(org.jfree.chart.util.Rotation.CLOCKWISE.factor)
org.jfree.chart.util.Rotation.CLOCKWISE.factor == orig(this.direction.factor)
org.jfree.chart.util.Rotation.ANTICLOCKWISE.name == orig(org.jfree.chart.util.Rotation.ANTICLOCKWISE.name)
org.jfree.chart.util.Rotation.ANTICLOCKWISE.name.toString == orig(org.jfree.chart.util.Rotation.ANTICLOCKWISE.name.toString)
org.jfree.chart.util.Rotation.ANTICLOCKWISE.factor == orig(org.jfree.chart.util.Rotation.ANTICLOCKWISE.factor)
this.direction.name.toString == orig(this.direction.name.toString)
this.sectionPaintMap == orig(this.sectionPaintMap)
this.sectionPaintMap.store == orig(this.sectionPaintMap.store)
this.sectionPaintMap.store.getClass().getName() == orig(this.sectionPaintMap.store.getClass().getName())
this.sectionPaintMap.store.getClass().getName() == orig(this.sectionOutlinePaintMap.store.getClass().getName())
this.baseSectionPaint == orig(this.baseSectionPaint)
this.baseSectionPaint == orig(this.baseSectionOutlinePaint)
this.baseSectionPaint == orig(this.shadowPaint)
this.baseSectionPaint == orig(this.outlinePaint)
this.sectionOutlinesVisible == orig(this.sectionOutlinesVisible)
this.sectionOutlinePaintMap == orig(this.sectionOutlinePaintMap)
this.sectionOutlinePaintMap.store == orig(this.sectionOutlinePaintMap.store)
this.sectionOutlineStrokeMap == orig(this.sectionOutlineStrokeMap)
this.sectionOutlineStrokeMap.store == orig(this.sectionOutlineStrokeMap.store)
this.baseSectionOutlineStroke == orig(this.baseSectionOutlineStroke)
this.baseSectionOutlineStroke == orig(this.outlineStroke)
this.shadowXOffset == orig(this.shadowXOffset)
this.shadowYOffset == orig(this.shadowYOffset)
this.explodePercentages == orig(this.explodePercentages)
this.explodePercentages.getClass().getName() == orig(this.sectionOutlineStrokeMap.store.getClass().getName())
this.explodePercentages.getClass().getName() == orig(this.explodePercentages.getClass().getName())
this.labelGenerator == orig(this.labelGenerator)
this.labelGenerator.getClass().getName() == this.legendLabelGenerator.getClass().getName()
this.labelGenerator.getClass().getName() == orig(this.labelGenerator.getClass().getName())
this.labelGenerator.getClass().getName() == orig(this.legendLabelGenerator.getClass().getName())
this.simpleLabels == orig(this.simpleLabels)
this.labelPadding == orig(this.labelPadding)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(this.labelPadding.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(this.insets.unitType)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
org.jfree.chart.util.UnitType.RELATIVE == orig(this.simpleLabelOffset.unitType)
this.labelPadding.unitType.name.toString == orig(this.labelPadding.unitType.name.toString)
this.labelPadding.top == orig(this.labelPadding.top)
this.labelPadding.left == orig(this.labelPadding.left)
this.labelPadding.bottom == orig(this.labelPadding.bottom)
this.labelPadding.right == orig(this.labelPadding.right)
this.simpleLabelOffset == orig(this.simpleLabelOffset)
this.simpleLabelOffset.unitType.name == orig(this.simpleLabelOffset.unitType.name)
this.simpleLabelOffset.unitType.name.toString == orig(this.simpleLabelOffset.unitType.name.toString)
this.simpleLabelOffset.top == orig(this.simpleLabelOffset.top)
this.simpleLabelOffset.left == orig(this.simpleLabelOffset.left)
this.simpleLabelOffset.bottom == orig(this.simpleLabelOffset.bottom)
this.simpleLabelOffset.right == orig(this.simpleLabelOffset.right)
this.maximumLabelWidth == orig(this.maximumLabelWidth)
this.labelGap == orig(this.labelGap)
this.labelLinksVisible == orig(this.labelLinksVisible)
this.labelLinkMargin == orig(this.labelLinkMargin)
this.labelLinkStroke == orig(this.labelLinkStroke)
this.labelDistributor == orig(this.labelDistributor)
this.labelDistributor.getClass().getName() == orig(this.labelDistributor.getClass().getName())
this.labelDistributor.labels == orig(this.labelDistributor.labels)
this.labelDistributor.labels[] == orig(this.labelDistributor.labels[])
this.labelDistributor.labels.getClass().getName() == orig(this.labelDistributor.labels.getClass().getName())
this.toolTipGenerator == orig(this.toolTipGenerator)
this.toolTipGenerator.getClass().getName() == orig(this.toolTipGenerator.getClass().getName())
this.urlGenerator == orig(this.urlGenerator)
this.legendLabelGenerator == orig(this.legendLabelGenerator)
this.legendLabelToolTipGenerator == orig(this.legendLabelToolTipGenerator)
this.legendLabelURLGenerator == orig(this.legendLabelURLGenerator)
this.ignoreNullValues == orig(this.ignoreNullValues)
this.ignoreZeroValues == orig(this.ignoreZeroValues)
this.legendItemShape == orig(this.legendItemShape)
this.minimumArcAngleToDraw == orig(this.minimumArcAngleToDraw)
org.jfree.chart.plot.PiePlot.localizationResources == orig(org.jfree.chart.plot.PiePlot.localizationResources)
org.jfree.chart.plot.PiePlot.localizationResources.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.localizationResources.getClass().getName())
org.jfree.chart.plot.Plot.ZERO == orig(org.jfree.chart.plot.Plot.ZERO)
org.jfree.chart.plot.Plot.ZERO.getClass().getName() == orig(org.jfree.chart.plot.Plot.ZERO.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_INSETS == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name == orig(this.labelPadding.unitType.name)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name == orig(this.insets.unitType.name)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name.toString == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name.toString)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.top == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.top)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.left == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.left)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.right == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.right)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == orig(this.legendItemShape.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName())
this.parent == orig(this.parent)
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener == orig(org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener)
this.datasetGroup == orig(this.datasetGroup)
this.noDataMessage == orig(this.noDataMessage)
this.noDataMessageFont == orig(this.noDataMessageFont)
this.insets == orig(this.insets)
this.insets.unitType.name.toString == orig(this.insets.unitType.name.toString)
this.insets.top == orig(this.insets.top)
this.insets.left == orig(this.insets.left)
this.insets.bottom == orig(this.insets.bottom)
this.insets.right == orig(this.insets.right)
this.outlineVisible == orig(this.outlineVisible)
this.backgroundPaint == orig(this.backgroundPaint)
this.backgroundImage == orig(this.backgroundImage)
this.backgroundImageAlignment == orig(this.backgroundImageAlignment)
this.backgroundImageAlpha == orig(this.backgroundImageAlpha)
this.foregroundAlpha == orig(this.foregroundAlpha)
this.backgroundAlpha == orig(this.backgroundAlpha)
this.drawingSupplier == orig(this.drawingSupplier)
this.drawingSupplier.getClass().getName() == orig(this.drawingSupplier.getClass().getName())
this.listenerList == orig(this.listenerList)
this.dataset has only one value
this.circular == false
this.sectionPaintMap has only one value
this.sectionPaintMap.store has only one value
this.sectionOutlinePaintMap has only one value
this.sectionOutlinePaintMap.store has only one value
this.sectionOutlineStrokeMap has only one value
this.sectionOutlineStrokeMap.store has only one value
this.explodePercentages has only one value
this.labelGenerator has only one value
this.labelPadding has only one value
this.simpleLabelOffset has only one value
this.labelLinkStroke has only one value
this.labelDistributor has only one value
this.labelDistributor.labels has only one value
this.toolTipGenerator has only one value
this.legendLabelGenerator has only one value
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener has only one value
this.noDataMessageFont has only one value
this.insets has only one value
this.insets.top == 0.0
this.insets.left == 5.0
this.insets.bottom == 5.0
this.insets.right == 5.0
this.drawingSupplier has only one value
this.listenerList has only one value
return has only one value
===========================================================================
org.jfree.chart.plot.PiePlot.lookupSectionOutlineStroke(java.lang.Comparable, boolean):::ENTER
this.labelGenerator.getClass().getName() == this.legendLabelGenerator.getClass().getName()
this has only one value
this.dataset has only one value
this.circular == false
this.sectionPaintMap has only one value
this.sectionPaintMap.store has only one value
this.sectionOutlinePaintMap has only one value
this.sectionOutlinePaintMap.store has only one value
this.sectionOutlineStrokeMap has only one value
this.sectionOutlineStrokeMap.store has only one value
this.explodePercentages has only one value
this.labelGenerator has only one value
this.labelPadding has only one value
this.simpleLabelOffset has only one value
this.labelLinkStroke has only one value
this.labelDistributor has only one value
this.labelDistributor.labels has only one value
this.toolTipGenerator has only one value
this.legendLabelGenerator has only one value
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener has only one value
this.noDataMessageFont has only one value
this.insets has only one value
this.insets.top == 0.0
this.insets.left == 5.0
this.insets.bottom == 5.0
this.insets.right == 5.0
this.drawingSupplier has only one value
this.listenerList has only one value
key.getClass().getName() == java.lang.String.class
autoPopulate == false
===========================================================================
org.jfree.chart.plot.PiePlot.lookupSectionOutlineStroke(java.lang.Comparable, boolean):::EXIT1180
===========================================================================
org.jfree.chart.plot.PiePlot.lookupSectionOutlineStroke(java.lang.Comparable, boolean):::EXIT
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_FONT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_FONT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_FONT == orig(this.labelFont)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_PAINT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(this.labelPaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(this.labelOutlinePaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(this.labelLinkPaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(this.noDataMessagePaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.baseSectionPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.baseSectionOutlinePaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.shadowPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelBackgroundPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelOutlinePaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelShadowPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelLinkPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.noDataMessagePaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.outlinePaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.backgroundPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT == orig(this.labelBackgroundPaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE == orig(this.labelOutlineStroke)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == return.getClass().getName()
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(this.baseSectionOutlineStroke.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(this.labelOutlineStroke.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(this.labelLinkStroke.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(this.outlineStroke.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT == orig(this.labelShadowPaint)
this.dataset == orig(this.dataset)
this.dataset.getClass().getName() == orig(this.dataset.getClass().getName())
this.pieIndex == orig(this.pieIndex)
this.interiorGap == orig(this.interiorGap)
this.circular == orig(this.circular)
this.startAngle == orig(this.startAngle)
org.jfree.chart.util.Rotation.CLOCKWISE == orig(this.direction)
org.jfree.chart.util.Rotation.CLOCKWISE == orig(org.jfree.chart.util.Rotation.CLOCKWISE)
org.jfree.chart.util.Rotation.ANTICLOCKWISE == orig(org.jfree.chart.util.Rotation.ANTICLOCKWISE)
org.jfree.chart.util.Rotation.CLOCKWISE.name == orig(org.jfree.chart.util.Rotation.CLOCKWISE.name)
org.jfree.chart.util.Rotation.CLOCKWISE.name == orig(this.direction.name)
org.jfree.chart.util.Rotation.CLOCKWISE.name.toString == orig(org.jfree.chart.util.Rotation.CLOCKWISE.name.toString)
org.jfree.chart.util.Rotation.CLOCKWISE.factor == orig(org.jfree.chart.util.Rotation.CLOCKWISE.factor)
org.jfree.chart.util.Rotation.CLOCKWISE.factor == orig(this.direction.factor)
org.jfree.chart.util.Rotation.ANTICLOCKWISE.name == orig(org.jfree.chart.util.Rotation.ANTICLOCKWISE.name)
org.jfree.chart.util.Rotation.ANTICLOCKWISE.name.toString == orig(org.jfree.chart.util.Rotation.ANTICLOCKWISE.name.toString)
org.jfree.chart.util.Rotation.ANTICLOCKWISE.factor == orig(org.jfree.chart.util.Rotation.ANTICLOCKWISE.factor)
this.direction.name.toString == orig(this.direction.name.toString)
this.sectionPaintMap == orig(this.sectionPaintMap)
this.sectionPaintMap.store == orig(this.sectionPaintMap.store)
this.sectionPaintMap.store.getClass().getName() == orig(this.sectionPaintMap.store.getClass().getName())
this.sectionPaintMap.store.getClass().getName() == orig(this.sectionOutlinePaintMap.store.getClass().getName())
this.baseSectionPaint == orig(this.baseSectionPaint)
this.baseSectionPaint == orig(this.baseSectionOutlinePaint)
this.baseSectionPaint == orig(this.shadowPaint)
this.baseSectionPaint == orig(this.outlinePaint)
this.sectionOutlinesVisible == orig(this.sectionOutlinesVisible)
this.sectionOutlinePaintMap == orig(this.sectionOutlinePaintMap)
this.sectionOutlinePaintMap.store == orig(this.sectionOutlinePaintMap.store)
this.sectionOutlineStrokeMap == orig(this.sectionOutlineStrokeMap)
this.sectionOutlineStrokeMap.store == orig(this.sectionOutlineStrokeMap.store)
this.baseSectionOutlineStroke == orig(this.baseSectionOutlineStroke)
this.baseSectionOutlineStroke == orig(this.outlineStroke)
this.shadowXOffset == orig(this.shadowXOffset)
this.shadowYOffset == orig(this.shadowYOffset)
this.explodePercentages == orig(this.explodePercentages)
this.explodePercentages.getClass().getName() == orig(this.sectionOutlineStrokeMap.store.getClass().getName())
this.explodePercentages.getClass().getName() == orig(this.explodePercentages.getClass().getName())
this.labelGenerator == orig(this.labelGenerator)
this.labelGenerator.getClass().getName() == this.legendLabelGenerator.getClass().getName()
this.labelGenerator.getClass().getName() == orig(this.labelGenerator.getClass().getName())
this.labelGenerator.getClass().getName() == orig(this.legendLabelGenerator.getClass().getName())
this.simpleLabels == orig(this.simpleLabels)
this.labelPadding == orig(this.labelPadding)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(this.labelPadding.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(this.insets.unitType)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
org.jfree.chart.util.UnitType.RELATIVE == orig(this.simpleLabelOffset.unitType)
this.labelPadding.unitType.name.toString == orig(this.labelPadding.unitType.name.toString)
this.labelPadding.top == orig(this.labelPadding.top)
this.labelPadding.left == orig(this.labelPadding.left)
this.labelPadding.bottom == orig(this.labelPadding.bottom)
this.labelPadding.right == orig(this.labelPadding.right)
this.simpleLabelOffset == orig(this.simpleLabelOffset)
this.simpleLabelOffset.unitType.name == orig(this.simpleLabelOffset.unitType.name)
this.simpleLabelOffset.unitType.name.toString == orig(this.simpleLabelOffset.unitType.name.toString)
this.simpleLabelOffset.top == orig(this.simpleLabelOffset.top)
this.simpleLabelOffset.left == orig(this.simpleLabelOffset.left)
this.simpleLabelOffset.bottom == orig(this.simpleLabelOffset.bottom)
this.simpleLabelOffset.right == orig(this.simpleLabelOffset.right)
this.maximumLabelWidth == orig(this.maximumLabelWidth)
this.labelGap == orig(this.labelGap)
this.labelLinksVisible == orig(this.labelLinksVisible)
this.labelLinkMargin == orig(this.labelLinkMargin)
this.labelLinkStroke == orig(this.labelLinkStroke)
this.labelDistributor == orig(this.labelDistributor)
this.labelDistributor.getClass().getName() == orig(this.labelDistributor.getClass().getName())
this.labelDistributor.labels == orig(this.labelDistributor.labels)
this.labelDistributor.labels[] == orig(this.labelDistributor.labels[])
this.labelDistributor.labels.getClass().getName() == orig(this.labelDistributor.labels.getClass().getName())
this.toolTipGenerator == orig(this.toolTipGenerator)
this.toolTipGenerator.getClass().getName() == orig(this.toolTipGenerator.getClass().getName())
this.urlGenerator == orig(this.urlGenerator)
this.legendLabelGenerator == orig(this.legendLabelGenerator)
this.legendLabelToolTipGenerator == orig(this.legendLabelToolTipGenerator)
this.legendLabelURLGenerator == orig(this.legendLabelURLGenerator)
this.ignoreNullValues == orig(this.ignoreNullValues)
this.ignoreZeroValues == orig(this.ignoreZeroValues)
this.legendItemShape == orig(this.legendItemShape)
this.minimumArcAngleToDraw == orig(this.minimumArcAngleToDraw)
org.jfree.chart.plot.PiePlot.localizationResources == orig(org.jfree.chart.plot.PiePlot.localizationResources)
org.jfree.chart.plot.PiePlot.localizationResources.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.localizationResources.getClass().getName())
org.jfree.chart.plot.Plot.ZERO == orig(org.jfree.chart.plot.Plot.ZERO)
org.jfree.chart.plot.Plot.ZERO.getClass().getName() == orig(org.jfree.chart.plot.Plot.ZERO.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_INSETS == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name == orig(this.labelPadding.unitType.name)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name == orig(this.insets.unitType.name)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name.toString == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name.toString)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.top == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.top)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.left == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.left)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.right == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.right)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == orig(this.legendItemShape.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName())
this.parent == orig(this.parent)
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener == orig(org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener)
this.datasetGroup == orig(this.datasetGroup)
this.noDataMessage == orig(this.noDataMessage)
this.noDataMessageFont == orig(this.noDataMessageFont)
this.insets == orig(this.insets)
this.insets.unitType.name.toString == orig(this.insets.unitType.name.toString)
this.insets.top == orig(this.insets.top)
this.insets.left == orig(this.insets.left)
this.insets.bottom == orig(this.insets.bottom)
this.insets.right == orig(this.insets.right)
this.outlineVisible == orig(this.outlineVisible)
this.backgroundPaint == orig(this.backgroundPaint)
this.backgroundImage == orig(this.backgroundImage)
this.backgroundImageAlignment == orig(this.backgroundImageAlignment)
this.backgroundImageAlpha == orig(this.backgroundImageAlpha)
this.foregroundAlpha == orig(this.foregroundAlpha)
this.backgroundAlpha == orig(this.backgroundAlpha)
this.drawingSupplier == orig(this.drawingSupplier)
this.drawingSupplier.getClass().getName() == orig(this.drawingSupplier.getClass().getName())
this.listenerList == orig(this.listenerList)
this.dataset has only one value
this.circular == false
this.sectionPaintMap has only one value
this.sectionPaintMap.store has only one value
this.sectionOutlinePaintMap has only one value
this.sectionOutlinePaintMap.store has only one value
this.sectionOutlineStrokeMap has only one value
this.sectionOutlineStrokeMap.store has only one value
this.explodePercentages has only one value
this.labelGenerator has only one value
this.labelPadding has only one value
this.simpleLabelOffset has only one value
this.labelLinkStroke has only one value
this.labelDistributor has only one value
this.labelDistributor.labels has only one value
this.toolTipGenerator has only one value
this.legendLabelGenerator has only one value
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener has only one value
this.noDataMessageFont has only one value
this.insets has only one value
this.insets.top == 0.0
this.insets.left == 5.0
this.insets.bottom == 5.0
this.insets.right == 5.0
this.drawingSupplier has only one value
this.listenerList has only one value
return has only one value
===========================================================================
org.jfree.chart.plot.PiePlot.lookupSectionPaint(java.lang.Comparable, boolean):::ENTER
this.labelGenerator.getClass().getName() == this.legendLabelGenerator.getClass().getName()
this has only one value
this.dataset has only one value
this.circular == false
this.sectionPaintMap has only one value
this.sectionPaintMap.store has only one value
this.sectionOutlinePaintMap has only one value
this.sectionOutlinePaintMap.store has only one value
this.sectionOutlineStrokeMap has only one value
this.sectionOutlineStrokeMap.store has only one value
this.explodePercentages has only one value
this.labelGenerator has only one value
this.labelPadding has only one value
this.simpleLabelOffset has only one value
this.labelLinkStroke has only one value
this.labelDistributor has only one value
this.labelDistributor.labels has only one value
this.toolTipGenerator has only one value
this.legendLabelGenerator has only one value
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener has only one value
this.noDataMessageFont has only one value
this.insets has only one value
this.insets.top == 0.0
this.insets.left == 5.0
this.insets.bottom == 5.0
this.insets.right == 5.0
this.drawingSupplier has only one value
this.listenerList has only one value
key.getClass().getName() == java.lang.String.class
autoPopulate == true
===========================================================================
org.jfree.chart.plot.PiePlot.lookupSectionPaint(java.lang.Comparable, boolean):::EXIT855
===========================================================================
org.jfree.chart.plot.PiePlot.lookupSectionPaint(java.lang.Comparable, boolean):::EXIT
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_FONT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_FONT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_FONT == orig(this.labelFont)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_PAINT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(this.labelPaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(this.labelOutlinePaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(this.labelLinkPaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(this.noDataMessagePaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == return.getClass().getName()
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.baseSectionPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.baseSectionOutlinePaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.shadowPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelBackgroundPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelOutlinePaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelShadowPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelLinkPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.noDataMessagePaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.outlinePaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.backgroundPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT == orig(this.labelBackgroundPaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE == orig(this.labelOutlineStroke)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(this.baseSectionOutlineStroke.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(this.labelOutlineStroke.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(this.labelLinkStroke.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(this.outlineStroke.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT == orig(this.labelShadowPaint)
this.dataset == orig(this.dataset)
this.dataset.getClass().getName() == orig(this.dataset.getClass().getName())
this.pieIndex == orig(this.pieIndex)
this.interiorGap == orig(this.interiorGap)
this.circular == orig(this.circular)
this.startAngle == orig(this.startAngle)
org.jfree.chart.util.Rotation.CLOCKWISE == orig(this.direction)
org.jfree.chart.util.Rotation.CLOCKWISE == orig(org.jfree.chart.util.Rotation.CLOCKWISE)
org.jfree.chart.util.Rotation.ANTICLOCKWISE == orig(org.jfree.chart.util.Rotation.ANTICLOCKWISE)
org.jfree.chart.util.Rotation.CLOCKWISE.name == orig(org.jfree.chart.util.Rotation.CLOCKWISE.name)
org.jfree.chart.util.Rotation.CLOCKWISE.name == orig(this.direction.name)
org.jfree.chart.util.Rotation.CLOCKWISE.name.toString == orig(org.jfree.chart.util.Rotation.CLOCKWISE.name.toString)
org.jfree.chart.util.Rotation.CLOCKWISE.factor == orig(org.jfree.chart.util.Rotation.CLOCKWISE.factor)
org.jfree.chart.util.Rotation.CLOCKWISE.factor == orig(this.direction.factor)
org.jfree.chart.util.Rotation.ANTICLOCKWISE.name == orig(org.jfree.chart.util.Rotation.ANTICLOCKWISE.name)
org.jfree.chart.util.Rotation.ANTICLOCKWISE.name.toString == orig(org.jfree.chart.util.Rotation.ANTICLOCKWISE.name.toString)
org.jfree.chart.util.Rotation.ANTICLOCKWISE.factor == orig(org.jfree.chart.util.Rotation.ANTICLOCKWISE.factor)
this.direction.name.toString == orig(this.direction.name.toString)
this.sectionPaintMap == orig(this.sectionPaintMap)
this.sectionPaintMap.store == orig(this.sectionPaintMap.store)
this.sectionPaintMap.store.getClass().getName() == orig(this.sectionPaintMap.store.getClass().getName())
this.sectionPaintMap.store.getClass().getName() == orig(this.sectionOutlinePaintMap.store.getClass().getName())
this.baseSectionPaint == orig(this.baseSectionPaint)
this.baseSectionPaint == orig(this.baseSectionOutlinePaint)
this.baseSectionPaint == orig(this.shadowPaint)
this.baseSectionPaint == orig(this.outlinePaint)
this.sectionOutlinesVisible == orig(this.sectionOutlinesVisible)
this.sectionOutlinePaintMap == orig(this.sectionOutlinePaintMap)
this.sectionOutlinePaintMap.store == orig(this.sectionOutlinePaintMap.store)
this.sectionOutlineStrokeMap == orig(this.sectionOutlineStrokeMap)
this.sectionOutlineStrokeMap.store == orig(this.sectionOutlineStrokeMap.store)
this.baseSectionOutlineStroke == orig(this.baseSectionOutlineStroke)
this.baseSectionOutlineStroke == orig(this.outlineStroke)
this.shadowXOffset == orig(this.shadowXOffset)
this.shadowYOffset == orig(this.shadowYOffset)
this.explodePercentages == orig(this.explodePercentages)
this.explodePercentages.getClass().getName() == orig(this.sectionOutlineStrokeMap.store.getClass().getName())
this.explodePercentages.getClass().getName() == orig(this.explodePercentages.getClass().getName())
this.labelGenerator == orig(this.labelGenerator)
this.labelGenerator.getClass().getName() == this.legendLabelGenerator.getClass().getName()
this.labelGenerator.getClass().getName() == orig(this.labelGenerator.getClass().getName())
this.labelGenerator.getClass().getName() == orig(this.legendLabelGenerator.getClass().getName())
this.simpleLabels == orig(this.simpleLabels)
this.labelPadding == orig(this.labelPadding)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(this.labelPadding.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(this.insets.unitType)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
org.jfree.chart.util.UnitType.RELATIVE == orig(this.simpleLabelOffset.unitType)
this.labelPadding.unitType.name.toString == orig(this.labelPadding.unitType.name.toString)
this.labelPadding.top == orig(this.labelPadding.top)
this.labelPadding.left == orig(this.labelPadding.left)
this.labelPadding.bottom == orig(this.labelPadding.bottom)
this.labelPadding.right == orig(this.labelPadding.right)
this.simpleLabelOffset == orig(this.simpleLabelOffset)
this.simpleLabelOffset.unitType.name == orig(this.simpleLabelOffset.unitType.name)
this.simpleLabelOffset.unitType.name.toString == orig(this.simpleLabelOffset.unitType.name.toString)
this.simpleLabelOffset.top == orig(this.simpleLabelOffset.top)
this.simpleLabelOffset.left == orig(this.simpleLabelOffset.left)
this.simpleLabelOffset.bottom == orig(this.simpleLabelOffset.bottom)
this.simpleLabelOffset.right == orig(this.simpleLabelOffset.right)
this.maximumLabelWidth == orig(this.maximumLabelWidth)
this.labelGap == orig(this.labelGap)
this.labelLinksVisible == orig(this.labelLinksVisible)
this.labelLinkMargin == orig(this.labelLinkMargin)
this.labelLinkStroke == orig(this.labelLinkStroke)
this.labelDistributor == orig(this.labelDistributor)
this.labelDistributor.getClass().getName() == orig(this.labelDistributor.getClass().getName())
this.labelDistributor.labels == orig(this.labelDistributor.labels)
this.labelDistributor.labels[] == orig(this.labelDistributor.labels[])
this.labelDistributor.labels.getClass().getName() == orig(this.labelDistributor.labels.getClass().getName())
this.toolTipGenerator == orig(this.toolTipGenerator)
this.toolTipGenerator.getClass().getName() == orig(this.toolTipGenerator.getClass().getName())
this.urlGenerator == orig(this.urlGenerator)
this.legendLabelGenerator == orig(this.legendLabelGenerator)
this.legendLabelToolTipGenerator == orig(this.legendLabelToolTipGenerator)
this.legendLabelURLGenerator == orig(this.legendLabelURLGenerator)
this.ignoreNullValues == orig(this.ignoreNullValues)
this.ignoreZeroValues == orig(this.ignoreZeroValues)
this.legendItemShape == orig(this.legendItemShape)
this.minimumArcAngleToDraw == orig(this.minimumArcAngleToDraw)
org.jfree.chart.plot.PiePlot.localizationResources == orig(org.jfree.chart.plot.PiePlot.localizationResources)
org.jfree.chart.plot.PiePlot.localizationResources.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.localizationResources.getClass().getName())
org.jfree.chart.plot.Plot.ZERO == orig(org.jfree.chart.plot.Plot.ZERO)
org.jfree.chart.plot.Plot.ZERO.getClass().getName() == orig(org.jfree.chart.plot.Plot.ZERO.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_INSETS == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name == orig(this.labelPadding.unitType.name)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name == orig(this.insets.unitType.name)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name.toString == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name.toString)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.top == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.top)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.left == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.left)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.right == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.right)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == orig(this.legendItemShape.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName())
this.parent == orig(this.parent)
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener == orig(org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener)
this.datasetGroup == orig(this.datasetGroup)
this.noDataMessage == orig(this.noDataMessage)
this.noDataMessageFont == orig(this.noDataMessageFont)
this.insets == orig(this.insets)
this.insets.unitType.name.toString == orig(this.insets.unitType.name.toString)
this.insets.top == orig(this.insets.top)
this.insets.left == orig(this.insets.left)
this.insets.bottom == orig(this.insets.bottom)
this.insets.right == orig(this.insets.right)
this.outlineVisible == orig(this.outlineVisible)
this.backgroundPaint == orig(this.backgroundPaint)
this.backgroundImage == orig(this.backgroundImage)
this.backgroundImageAlignment == orig(this.backgroundImageAlignment)
this.backgroundImageAlpha == orig(this.backgroundImageAlpha)
this.foregroundAlpha == orig(this.foregroundAlpha)
this.backgroundAlpha == orig(this.backgroundAlpha)
this.drawingSupplier == orig(this.drawingSupplier)
this.drawingSupplier.getClass().getName() == orig(this.drawingSupplier.getClass().getName())
this.listenerList == orig(this.listenerList)
this.dataset has only one value
this.circular == false
this.sectionPaintMap has only one value
this.sectionPaintMap.store has only one value
this.sectionOutlinePaintMap has only one value
this.sectionOutlinePaintMap.store has only one value
this.sectionOutlineStrokeMap has only one value
this.sectionOutlineStrokeMap.store has only one value
this.explodePercentages has only one value
this.labelGenerator has only one value
this.labelPadding has only one value
this.simpleLabelOffset has only one value
this.labelLinkStroke has only one value
this.labelDistributor has only one value
this.labelDistributor.labels has only one value
this.toolTipGenerator has only one value
this.legendLabelGenerator has only one value
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener has only one value
this.noDataMessageFont has only one value
this.insets has only one value
this.insets.top == 0.0
this.insets.left == 5.0
this.insets.bottom == 5.0
this.insets.right == 5.0
this.drawingSupplier has only one value
this.listenerList has only one value
===========================================================================
org.jfree.chart.plot.PiePlot.setCircular(boolean, boolean):::ENTER
this.baseSectionPaint == org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT
this.baseSectionOutlinePaint == org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT
this.baseSectionOutlineStroke == org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE
this.shadowPaint == org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT
this.labelGenerator.getClass().getName() == this.legendLabelGenerator.getClass().getName()
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == org.jfree.chart.util.UnitType.ABSOLUTE
org.jfree.chart.util.UnitType.ABSOLUTE == org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType
this.legendItemShape == org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE
org.jfree.chart.plot.Plot.DEFAULT_INSETS == this.insets
org.jfree.chart.plot.Plot.DEFAULT_INSETS.top == this.insets.top
org.jfree.chart.plot.Plot.DEFAULT_INSETS.left == this.insets.left
org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom == this.insets.bottom
org.jfree.chart.plot.Plot.DEFAULT_INSETS.right == this.insets.right
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE == this.outlineStroke
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT == this.outlinePaint
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT == this.backgroundPaint
this.circular == true
this.toolTipGenerator == null
circular == false
notify == false
===========================================================================
org.jfree.chart.plot.PiePlot.setCircular(boolean, boolean):::EXIT
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_FONT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_FONT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_FONT == orig(this.labelFont)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_PAINT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(this.labelPaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(this.labelOutlinePaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(this.labelLinkPaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(this.noDataMessagePaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.baseSectionPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.baseSectionOutlinePaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.shadowPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelBackgroundPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelOutlinePaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelShadowPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelLinkPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.noDataMessagePaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.outlinePaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.backgroundPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT == orig(this.labelBackgroundPaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE == orig(this.labelOutlineStroke)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(this.baseSectionOutlineStroke.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(this.labelOutlineStroke.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(this.labelLinkStroke.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(this.outlineStroke.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT == orig(this.labelShadowPaint)
this.dataset == orig(this.dataset)
this.dataset.getClass().getName() == orig(this.dataset.getClass().getName())
this.pieIndex == orig(this.pieIndex)
this.interiorGap == orig(this.interiorGap)
this.circular == orig(circular)
this.startAngle == orig(this.startAngle)
org.jfree.chart.util.Rotation.CLOCKWISE == orig(this.direction)
org.jfree.chart.util.Rotation.CLOCKWISE == orig(org.jfree.chart.util.Rotation.CLOCKWISE)
org.jfree.chart.util.Rotation.ANTICLOCKWISE == orig(org.jfree.chart.util.Rotation.ANTICLOCKWISE)
org.jfree.chart.util.Rotation.CLOCKWISE.name == orig(org.jfree.chart.util.Rotation.CLOCKWISE.name)
org.jfree.chart.util.Rotation.CLOCKWISE.name == orig(this.direction.name)
org.jfree.chart.util.Rotation.CLOCKWISE.name.toString == orig(org.jfree.chart.util.Rotation.CLOCKWISE.name.toString)
org.jfree.chart.util.Rotation.CLOCKWISE.factor == orig(org.jfree.chart.util.Rotation.CLOCKWISE.factor)
org.jfree.chart.util.Rotation.CLOCKWISE.factor == orig(this.direction.factor)
org.jfree.chart.util.Rotation.ANTICLOCKWISE.name == orig(org.jfree.chart.util.Rotation.ANTICLOCKWISE.name)
org.jfree.chart.util.Rotation.ANTICLOCKWISE.name.toString == orig(org.jfree.chart.util.Rotation.ANTICLOCKWISE.name.toString)
org.jfree.chart.util.Rotation.ANTICLOCKWISE.factor == orig(org.jfree.chart.util.Rotation.ANTICLOCKWISE.factor)
this.direction.name.toString == orig(this.direction.name.toString)
this.sectionPaintMap == orig(this.sectionPaintMap)
this.sectionPaintMap.store == orig(this.sectionPaintMap.store)
this.sectionPaintMap.store.getClass().getName() == orig(this.sectionPaintMap.store.getClass().getName())
this.sectionPaintMap.store.getClass().getName() == orig(this.sectionOutlinePaintMap.store.getClass().getName())
this.baseSectionPaint == org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT
this.sectionOutlinesVisible == orig(this.sectionOutlinesVisible)
this.sectionOutlinePaintMap == orig(this.sectionOutlinePaintMap)
this.sectionOutlinePaintMap.store == orig(this.sectionOutlinePaintMap.store)
this.baseSectionOutlinePaint == org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT
this.sectionOutlineStrokeMap == orig(this.sectionOutlineStrokeMap)
this.sectionOutlineStrokeMap.store == orig(this.sectionOutlineStrokeMap.store)
this.baseSectionOutlineStroke == org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE
this.shadowPaint == org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT
this.shadowXOffset == orig(this.shadowXOffset)
this.shadowYOffset == orig(this.shadowYOffset)
this.explodePercentages == orig(this.explodePercentages)
this.explodePercentages.getClass().getName() == orig(this.sectionOutlineStrokeMap.store.getClass().getName())
this.explodePercentages.getClass().getName() == orig(this.explodePercentages.getClass().getName())
this.labelGenerator == orig(this.labelGenerator)
this.labelGenerator.getClass().getName() == this.legendLabelGenerator.getClass().getName()
this.labelGenerator.getClass().getName() == orig(this.labelGenerator.getClass().getName())
this.labelGenerator.getClass().getName() == orig(this.legendLabelGenerator.getClass().getName())
this.simpleLabels == orig(this.simpleLabels)
this.labelPadding == orig(this.labelPadding)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == org.jfree.chart.util.UnitType.ABSOLUTE
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
org.jfree.chart.util.UnitType.ABSOLUTE == org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(this.labelPadding.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(this.insets.unitType)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
org.jfree.chart.util.UnitType.RELATIVE == orig(this.simpleLabelOffset.unitType)
this.labelPadding.unitType.name.toString == orig(this.labelPadding.unitType.name.toString)
this.labelPadding.top == orig(this.labelPadding.top)
this.labelPadding.left == orig(this.labelPadding.left)
this.labelPadding.bottom == orig(this.labelPadding.bottom)
this.labelPadding.right == orig(this.labelPadding.right)
this.simpleLabelOffset == orig(this.simpleLabelOffset)
this.simpleLabelOffset.unitType.name == orig(this.simpleLabelOffset.unitType.name)
this.simpleLabelOffset.unitType.name.toString == orig(this.simpleLabelOffset.unitType.name.toString)
this.simpleLabelOffset.top == orig(this.simpleLabelOffset.top)
this.simpleLabelOffset.left == orig(this.simpleLabelOffset.left)
this.simpleLabelOffset.bottom == orig(this.simpleLabelOffset.bottom)
this.simpleLabelOffset.right == orig(this.simpleLabelOffset.right)
this.maximumLabelWidth == orig(this.maximumLabelWidth)
this.labelGap == orig(this.labelGap)
this.labelLinksVisible == orig(this.labelLinksVisible)
this.labelLinkMargin == orig(this.labelLinkMargin)
this.labelLinkStroke == orig(this.labelLinkStroke)
this.labelDistributor == orig(this.labelDistributor)
this.labelDistributor.getClass().getName() == orig(this.labelDistributor.getClass().getName())
this.labelDistributor.labels == orig(this.labelDistributor.labels)
this.labelDistributor.labels[] == orig(this.labelDistributor.labels[])
this.labelDistributor.labels.getClass().getName() == orig(this.labelDistributor.labels.getClass().getName())
this.toolTipGenerator == orig(this.toolTipGenerator)
this.urlGenerator == orig(this.urlGenerator)
this.legendLabelGenerator == orig(this.legendLabelGenerator)
this.legendLabelToolTipGenerator == orig(this.legendLabelToolTipGenerator)
this.legendLabelURLGenerator == orig(this.legendLabelURLGenerator)
this.ignoreNullValues == orig(this.ignoreNullValues)
this.ignoreZeroValues == orig(this.ignoreZeroValues)
this.legendItemShape == org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE
this.minimumArcAngleToDraw == orig(this.minimumArcAngleToDraw)
org.jfree.chart.plot.PiePlot.localizationResources == orig(org.jfree.chart.plot.PiePlot.localizationResources)
org.jfree.chart.plot.PiePlot.localizationResources.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.localizationResources.getClass().getName())
org.jfree.chart.plot.Plot.ZERO == orig(org.jfree.chart.plot.Plot.ZERO)
org.jfree.chart.plot.Plot.ZERO.getClass().getName() == orig(org.jfree.chart.plot.Plot.ZERO.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_INSETS == this.insets
org.jfree.chart.plot.Plot.DEFAULT_INSETS == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS)
org.jfree.chart.plot.Plot.DEFAULT_INSETS == orig(this.insets)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name == orig(this.labelPadding.unitType.name)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name == orig(this.insets.unitType.name)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name.toString == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name.toString)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.top == this.insets.top
org.jfree.chart.plot.Plot.DEFAULT_INSETS.top == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.top)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.top == orig(this.insets.top)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.left == this.insets.left
org.jfree.chart.plot.Plot.DEFAULT_INSETS.left == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.left)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.left == orig(this.insets.left)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom == this.insets.bottom
org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom == orig(this.insets.bottom)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.right == this.insets.right
org.jfree.chart.plot.Plot.DEFAULT_INSETS.right == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.right)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.right == orig(this.insets.right)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE == this.outlineStroke
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE == orig(this.baseSectionOutlineStroke)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE == orig(this.outlineStroke)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT == this.outlinePaint
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT == orig(this.baseSectionPaint)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT == orig(this.baseSectionOutlinePaint)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT == orig(this.shadowPaint)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT == orig(this.outlinePaint)
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT == this.backgroundPaint
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT == orig(this.backgroundPaint)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE == orig(this.legendItemShape)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == orig(this.legendItemShape.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName())
this.parent == orig(this.parent)
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener == orig(org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener)
this.datasetGroup == orig(this.datasetGroup)
this.noDataMessage == orig(this.noDataMessage)
this.noDataMessageFont == orig(this.noDataMessageFont)
this.insets.unitType.name.toString == orig(this.insets.unitType.name.toString)
this.outlineVisible == orig(this.outlineVisible)
this.backgroundImage == orig(this.backgroundImage)
this.backgroundImageAlignment == orig(this.backgroundImageAlignment)
this.backgroundImageAlpha == orig(this.backgroundImageAlpha)
this.foregroundAlpha == orig(this.foregroundAlpha)
this.backgroundAlpha == orig(this.backgroundAlpha)
this.drawingSupplier == orig(this.drawingSupplier)
this.drawingSupplier.getClass().getName() == orig(this.drawingSupplier.getClass().getName())
this.listenerList == orig(this.listenerList)
this.circular == false
this.toolTipGenerator == null
===========================================================================
org.jfree.chart.plot.PiePlot.setLabelGenerator(org.jfree.chart.labels.PieSectionLabelGenerator):::ENTER
this.labelGenerator.getClass().getName() == this.legendLabelGenerator.getClass().getName()
this.labelGenerator.getClass().getName() == generator.getClass().getName()
this has only one value
this.dataset has only one value
this.circular == true
this.sectionPaintMap has only one value
this.sectionPaintMap.store has only one value
this.sectionOutlinePaintMap has only one value
this.sectionOutlinePaintMap.store has only one value
this.sectionOutlineStrokeMap has only one value
this.sectionOutlineStrokeMap.store has only one value
this.explodePercentages has only one value
this.labelGenerator has only one value
this.labelPadding has only one value
this.simpleLabelOffset has only one value
this.labelLinkStroke has only one value
this.labelDistributor has only one value
this.labelDistributor.labels has only one value
this.toolTipGenerator == null
this.legendLabelGenerator has only one value
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener has only one value
this.noDataMessageFont has only one value
this.insets has only one value
this.insets.top == 4.0
this.insets.left == 8.0
this.insets.bottom == 4.0
this.insets.right == 8.0
this.drawingSupplier has only one value
this.listenerList has only one value
generator has only one value
===========================================================================
org.jfree.chart.plot.PiePlot.setLabelGenerator(org.jfree.chart.labels.PieSectionLabelGenerator):::EXIT
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_FONT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_FONT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_FONT == orig(this.labelFont)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_PAINT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(this.labelPaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(this.labelOutlinePaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(this.labelLinkPaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(this.noDataMessagePaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.baseSectionPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.baseSectionOutlinePaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.shadowPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelBackgroundPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelOutlinePaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelShadowPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelLinkPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.noDataMessagePaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.outlinePaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.backgroundPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT == orig(this.labelBackgroundPaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE == orig(this.labelOutlineStroke)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(this.baseSectionOutlineStroke.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(this.labelOutlineStroke.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(this.labelLinkStroke.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(this.outlineStroke.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT == orig(this.labelShadowPaint)
this.dataset == orig(this.dataset)
this.dataset.getClass().getName() == orig(this.dataset.getClass().getName())
this.pieIndex == orig(this.pieIndex)
this.interiorGap == orig(this.interiorGap)
this.circular == orig(this.circular)
this.startAngle == orig(this.startAngle)
org.jfree.chart.util.Rotation.CLOCKWISE == orig(this.direction)
org.jfree.chart.util.Rotation.CLOCKWISE == orig(org.jfree.chart.util.Rotation.CLOCKWISE)
org.jfree.chart.util.Rotation.ANTICLOCKWISE == orig(org.jfree.chart.util.Rotation.ANTICLOCKWISE)
org.jfree.chart.util.Rotation.CLOCKWISE.name == orig(org.jfree.chart.util.Rotation.CLOCKWISE.name)
org.jfree.chart.util.Rotation.CLOCKWISE.name == orig(this.direction.name)
org.jfree.chart.util.Rotation.CLOCKWISE.name.toString == orig(org.jfree.chart.util.Rotation.CLOCKWISE.name.toString)
org.jfree.chart.util.Rotation.CLOCKWISE.factor == orig(org.jfree.chart.util.Rotation.CLOCKWISE.factor)
org.jfree.chart.util.Rotation.CLOCKWISE.factor == orig(this.direction.factor)
org.jfree.chart.util.Rotation.ANTICLOCKWISE.name == orig(org.jfree.chart.util.Rotation.ANTICLOCKWISE.name)
org.jfree.chart.util.Rotation.ANTICLOCKWISE.name.toString == orig(org.jfree.chart.util.Rotation.ANTICLOCKWISE.name.toString)
org.jfree.chart.util.Rotation.ANTICLOCKWISE.factor == orig(org.jfree.chart.util.Rotation.ANTICLOCKWISE.factor)
this.direction.name.toString == orig(this.direction.name.toString)
this.sectionPaintMap == orig(this.sectionPaintMap)
this.sectionPaintMap.store == orig(this.sectionPaintMap.store)
this.sectionPaintMap.store.getClass().getName() == orig(this.sectionPaintMap.store.getClass().getName())
this.sectionPaintMap.store.getClass().getName() == orig(this.sectionOutlinePaintMap.store.getClass().getName())
this.baseSectionPaint == orig(this.baseSectionPaint)
this.baseSectionPaint == orig(this.baseSectionOutlinePaint)
this.baseSectionPaint == orig(this.shadowPaint)
this.baseSectionPaint == orig(this.outlinePaint)
this.sectionOutlinesVisible == orig(this.sectionOutlinesVisible)
this.sectionOutlinePaintMap == orig(this.sectionOutlinePaintMap)
this.sectionOutlinePaintMap.store == orig(this.sectionOutlinePaintMap.store)
this.sectionOutlineStrokeMap == orig(this.sectionOutlineStrokeMap)
this.sectionOutlineStrokeMap.store == orig(this.sectionOutlineStrokeMap.store)
this.baseSectionOutlineStroke == orig(this.baseSectionOutlineStroke)
this.baseSectionOutlineStroke == orig(this.outlineStroke)
this.shadowXOffset == orig(this.shadowXOffset)
this.shadowYOffset == orig(this.shadowYOffset)
this.explodePercentages == orig(this.explodePercentages)
this.explodePercentages.getClass().getName() == orig(this.sectionOutlineStrokeMap.store.getClass().getName())
this.explodePercentages.getClass().getName() == orig(this.explodePercentages.getClass().getName())
this.labelGenerator.getClass().getName() == this.legendLabelGenerator.getClass().getName()
this.labelGenerator.getClass().getName() == orig(this.labelGenerator.getClass().getName())
this.labelGenerator.getClass().getName() == orig(this.legendLabelGenerator.getClass().getName())
this.labelGenerator.getClass().getName() == orig(generator.getClass().getName())
this.simpleLabels == orig(this.simpleLabels)
this.labelPadding == orig(this.labelPadding)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(this.labelPadding.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(this.insets.unitType)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
org.jfree.chart.util.UnitType.RELATIVE == orig(this.simpleLabelOffset.unitType)
this.labelPadding.unitType.name.toString == orig(this.labelPadding.unitType.name.toString)
this.labelPadding.top == orig(this.labelPadding.top)
this.labelPadding.left == orig(this.labelPadding.left)
this.labelPadding.bottom == orig(this.labelPadding.bottom)
this.labelPadding.right == orig(this.labelPadding.right)
this.simpleLabelOffset == orig(this.simpleLabelOffset)
this.simpleLabelOffset.unitType.name == orig(this.simpleLabelOffset.unitType.name)
this.simpleLabelOffset.unitType.name.toString == orig(this.simpleLabelOffset.unitType.name.toString)
this.simpleLabelOffset.top == orig(this.simpleLabelOffset.top)
this.simpleLabelOffset.left == orig(this.simpleLabelOffset.left)
this.simpleLabelOffset.bottom == orig(this.simpleLabelOffset.bottom)
this.simpleLabelOffset.right == orig(this.simpleLabelOffset.right)
this.maximumLabelWidth == orig(this.maximumLabelWidth)
this.labelGap == orig(this.labelGap)
this.labelLinksVisible == orig(this.labelLinksVisible)
this.labelLinkMargin == orig(this.labelLinkMargin)
this.labelLinkStroke == orig(this.labelLinkStroke)
this.labelDistributor == orig(this.labelDistributor)
this.labelDistributor.getClass().getName() == orig(this.labelDistributor.getClass().getName())
this.labelDistributor.labels == orig(this.labelDistributor.labels)
this.labelDistributor.labels[] == orig(this.labelDistributor.labels[])
this.labelDistributor.labels.getClass().getName() == orig(this.labelDistributor.labels.getClass().getName())
this.toolTipGenerator == orig(this.toolTipGenerator)
this.urlGenerator == orig(this.urlGenerator)
this.legendLabelGenerator == orig(this.legendLabelGenerator)
this.legendLabelToolTipGenerator == orig(this.legendLabelToolTipGenerator)
this.legendLabelURLGenerator == orig(this.legendLabelURLGenerator)
this.ignoreNullValues == orig(this.ignoreNullValues)
this.ignoreZeroValues == orig(this.ignoreZeroValues)
this.legendItemShape == orig(this.legendItemShape)
this.minimumArcAngleToDraw == orig(this.minimumArcAngleToDraw)
org.jfree.chart.plot.PiePlot.localizationResources == orig(org.jfree.chart.plot.PiePlot.localizationResources)
org.jfree.chart.plot.PiePlot.localizationResources.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.localizationResources.getClass().getName())
org.jfree.chart.plot.Plot.ZERO == orig(org.jfree.chart.plot.Plot.ZERO)
org.jfree.chart.plot.Plot.ZERO.getClass().getName() == orig(org.jfree.chart.plot.Plot.ZERO.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_INSETS == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name == orig(this.labelPadding.unitType.name)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name == orig(this.insets.unitType.name)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name.toString == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name.toString)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.top == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.top)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.left == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.left)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.right == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.right)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == orig(this.legendItemShape.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName())
this.parent == orig(this.parent)
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener == orig(org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener)
this.datasetGroup == orig(this.datasetGroup)
this.noDataMessage == orig(this.noDataMessage)
this.noDataMessageFont == orig(this.noDataMessageFont)
this.insets == orig(this.insets)
this.insets.unitType.name.toString == orig(this.insets.unitType.name.toString)
this.insets.top == orig(this.insets.top)
this.insets.left == orig(this.insets.left)
this.insets.bottom == orig(this.insets.bottom)
this.insets.right == orig(this.insets.right)
this.outlineVisible == orig(this.outlineVisible)
this.backgroundPaint == orig(this.backgroundPaint)
this.backgroundImage == orig(this.backgroundImage)
this.backgroundImageAlignment == orig(this.backgroundImageAlignment)
this.backgroundImageAlpha == orig(this.backgroundImageAlpha)
this.foregroundAlpha == orig(this.foregroundAlpha)
this.backgroundAlpha == orig(this.backgroundAlpha)
this.drawingSupplier == orig(this.drawingSupplier)
this.drawingSupplier.getClass().getName() == orig(this.drawingSupplier.getClass().getName())
this.listenerList == orig(this.listenerList)
this.dataset has only one value
this.circular == true
this.sectionPaintMap has only one value
this.sectionPaintMap.store has only one value
this.sectionOutlinePaintMap has only one value
this.sectionOutlinePaintMap.store has only one value
this.sectionOutlineStrokeMap has only one value
this.sectionOutlineStrokeMap.store has only one value
this.explodePercentages has only one value
this.labelGenerator has only one value
this.labelPadding has only one value
this.simpleLabelOffset has only one value
this.labelLinkStroke has only one value
this.labelDistributor has only one value
this.labelDistributor.labels has only one value
this.toolTipGenerator == null
this.legendLabelGenerator has only one value
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener has only one value
this.noDataMessageFont has only one value
this.insets has only one value
this.insets.top == 4.0
this.insets.left == 8.0
this.insets.bottom == 4.0
this.insets.right == 8.0
this.drawingSupplier has only one value
this.listenerList has only one value
===========================================================================
org.jfree.chart.plot.PiePlot.setLegendLabelGenerator(org.jfree.chart.labels.PieSectionLabelGenerator):::ENTER
this.labelGenerator.getClass().getName() == this.legendLabelGenerator.getClass().getName()
this has only one value
this.dataset has only one value
this.circular == true
this.sectionPaintMap has only one value
this.sectionPaintMap.store has only one value
this.sectionOutlinePaintMap has only one value
this.sectionOutlinePaintMap.store has only one value
this.sectionOutlineStrokeMap has only one value
this.sectionOutlineStrokeMap.store has only one value
this.explodePercentages has only one value
this.labelGenerator has only one value
this.labelPadding has only one value
this.simpleLabelOffset has only one value
this.labelLinkStroke has only one value
this.labelDistributor has only one value
this.labelDistributor.labels has only one value
this.toolTipGenerator == null
this.legendLabelGenerator has only one value
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener has only one value
this.noDataMessageFont has only one value
this.insets has only one value
this.insets.top == 0.0
this.insets.left == 5.0
this.insets.bottom == 5.0
this.insets.right == 5.0
this.drawingSupplier has only one value
this.listenerList has only one value
generator has only one value
generator.getClass().getName() == org.jfree.chart.plot.junit.PiePlotTests$NullLegendLabelGenerator.class
===========================================================================
org.jfree.chart.plot.PiePlot.setLegendLabelGenerator(org.jfree.chart.labels.PieSectionLabelGenerator):::EXIT
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_FONT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_FONT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_FONT == orig(this.labelFont)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_PAINT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(this.labelPaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(this.labelOutlinePaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(this.labelLinkPaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(this.noDataMessagePaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.baseSectionPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.baseSectionOutlinePaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.shadowPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelBackgroundPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelOutlinePaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelShadowPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelLinkPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.noDataMessagePaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.outlinePaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.backgroundPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT == orig(this.labelBackgroundPaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE == orig(this.labelOutlineStroke)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(this.baseSectionOutlineStroke.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(this.labelOutlineStroke.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(this.labelLinkStroke.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(this.outlineStroke.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT == orig(this.labelShadowPaint)
this.dataset == orig(this.dataset)
this.dataset.getClass().getName() == orig(this.dataset.getClass().getName())
this.pieIndex == orig(this.pieIndex)
this.interiorGap == orig(this.interiorGap)
this.circular == orig(this.circular)
this.startAngle == orig(this.startAngle)
org.jfree.chart.util.Rotation.CLOCKWISE == orig(this.direction)
org.jfree.chart.util.Rotation.CLOCKWISE == orig(org.jfree.chart.util.Rotation.CLOCKWISE)
org.jfree.chart.util.Rotation.ANTICLOCKWISE == orig(org.jfree.chart.util.Rotation.ANTICLOCKWISE)
org.jfree.chart.util.Rotation.CLOCKWISE.name == orig(org.jfree.chart.util.Rotation.CLOCKWISE.name)
org.jfree.chart.util.Rotation.CLOCKWISE.name == orig(this.direction.name)
org.jfree.chart.util.Rotation.CLOCKWISE.name.toString == orig(org.jfree.chart.util.Rotation.CLOCKWISE.name.toString)
org.jfree.chart.util.Rotation.CLOCKWISE.factor == orig(org.jfree.chart.util.Rotation.CLOCKWISE.factor)
org.jfree.chart.util.Rotation.CLOCKWISE.factor == orig(this.direction.factor)
org.jfree.chart.util.Rotation.ANTICLOCKWISE.name == orig(org.jfree.chart.util.Rotation.ANTICLOCKWISE.name)
org.jfree.chart.util.Rotation.ANTICLOCKWISE.name.toString == orig(org.jfree.chart.util.Rotation.ANTICLOCKWISE.name.toString)
org.jfree.chart.util.Rotation.ANTICLOCKWISE.factor == orig(org.jfree.chart.util.Rotation.ANTICLOCKWISE.factor)
this.direction.name.toString == orig(this.direction.name.toString)
this.sectionPaintMap == orig(this.sectionPaintMap)
this.sectionPaintMap.store == orig(this.sectionPaintMap.store)
this.sectionPaintMap.store.getClass().getName() == orig(this.sectionPaintMap.store.getClass().getName())
this.sectionPaintMap.store.getClass().getName() == orig(this.sectionOutlinePaintMap.store.getClass().getName())
this.baseSectionPaint == orig(this.baseSectionPaint)
this.baseSectionPaint == orig(this.baseSectionOutlinePaint)
this.baseSectionPaint == orig(this.shadowPaint)
this.baseSectionPaint == orig(this.outlinePaint)
this.sectionOutlinesVisible == orig(this.sectionOutlinesVisible)
this.sectionOutlinePaintMap == orig(this.sectionOutlinePaintMap)
this.sectionOutlinePaintMap.store == orig(this.sectionOutlinePaintMap.store)
this.sectionOutlineStrokeMap == orig(this.sectionOutlineStrokeMap)
this.sectionOutlineStrokeMap.store == orig(this.sectionOutlineStrokeMap.store)
this.baseSectionOutlineStroke == orig(this.baseSectionOutlineStroke)
this.baseSectionOutlineStroke == orig(this.outlineStroke)
this.shadowXOffset == orig(this.shadowXOffset)
this.shadowYOffset == orig(this.shadowYOffset)
this.explodePercentages == orig(this.explodePercentages)
this.explodePercentages.getClass().getName() == orig(this.sectionOutlineStrokeMap.store.getClass().getName())
this.explodePercentages.getClass().getName() == orig(this.explodePercentages.getClass().getName())
this.labelGenerator == orig(this.labelGenerator)
this.labelGenerator.getClass().getName() == orig(this.labelGenerator.getClass().getName())
this.labelGenerator.getClass().getName() == orig(this.legendLabelGenerator.getClass().getName())
this.simpleLabels == orig(this.simpleLabels)
this.labelPadding == orig(this.labelPadding)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(this.labelPadding.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(this.insets.unitType)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
org.jfree.chart.util.UnitType.RELATIVE == orig(this.simpleLabelOffset.unitType)
this.labelPadding.unitType.name.toString == orig(this.labelPadding.unitType.name.toString)
this.labelPadding.top == orig(this.labelPadding.top)
this.labelPadding.left == orig(this.labelPadding.left)
this.labelPadding.bottom == orig(this.labelPadding.bottom)
this.labelPadding.right == orig(this.labelPadding.right)
this.simpleLabelOffset == orig(this.simpleLabelOffset)
this.simpleLabelOffset.unitType.name == orig(this.simpleLabelOffset.unitType.name)
this.simpleLabelOffset.unitType.name.toString == orig(this.simpleLabelOffset.unitType.name.toString)
this.simpleLabelOffset.top == orig(this.simpleLabelOffset.top)
this.simpleLabelOffset.left == orig(this.simpleLabelOffset.left)
this.simpleLabelOffset.bottom == orig(this.simpleLabelOffset.bottom)
this.simpleLabelOffset.right == orig(this.simpleLabelOffset.right)
this.maximumLabelWidth == orig(this.maximumLabelWidth)
this.labelGap == orig(this.labelGap)
this.labelLinksVisible == orig(this.labelLinksVisible)
this.labelLinkMargin == orig(this.labelLinkMargin)
this.labelLinkStroke == orig(this.labelLinkStroke)
this.labelDistributor == orig(this.labelDistributor)
this.labelDistributor.getClass().getName() == orig(this.labelDistributor.getClass().getName())
this.labelDistributor.labels == orig(this.labelDistributor.labels)
this.labelDistributor.labels[] == orig(this.labelDistributor.labels[])
this.labelDistributor.labels.getClass().getName() == orig(this.labelDistributor.labels.getClass().getName())
this.toolTipGenerator == orig(this.toolTipGenerator)
this.urlGenerator == orig(this.urlGenerator)
this.legendLabelGenerator.getClass().getName() == orig(generator.getClass().getName())
this.legendLabelToolTipGenerator == orig(this.legendLabelToolTipGenerator)
this.legendLabelURLGenerator == orig(this.legendLabelURLGenerator)
this.ignoreNullValues == orig(this.ignoreNullValues)
this.ignoreZeroValues == orig(this.ignoreZeroValues)
this.legendItemShape == orig(this.legendItemShape)
this.minimumArcAngleToDraw == orig(this.minimumArcAngleToDraw)
org.jfree.chart.plot.PiePlot.localizationResources == orig(org.jfree.chart.plot.PiePlot.localizationResources)
org.jfree.chart.plot.PiePlot.localizationResources.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.localizationResources.getClass().getName())
org.jfree.chart.plot.Plot.ZERO == orig(org.jfree.chart.plot.Plot.ZERO)
org.jfree.chart.plot.Plot.ZERO.getClass().getName() == orig(org.jfree.chart.plot.Plot.ZERO.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_INSETS == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name == orig(this.labelPadding.unitType.name)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name == orig(this.insets.unitType.name)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name.toString == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name.toString)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.top == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.top)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.left == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.left)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.right == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.right)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == orig(this.legendItemShape.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName())
this.parent == orig(this.parent)
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener == orig(org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener)
this.datasetGroup == orig(this.datasetGroup)
this.noDataMessage == orig(this.noDataMessage)
this.noDataMessageFont == orig(this.noDataMessageFont)
this.insets == orig(this.insets)
this.insets.unitType.name.toString == orig(this.insets.unitType.name.toString)
this.insets.top == orig(this.insets.top)
this.insets.left == orig(this.insets.left)
this.insets.bottom == orig(this.insets.bottom)
this.insets.right == orig(this.insets.right)
this.outlineVisible == orig(this.outlineVisible)
this.backgroundPaint == orig(this.backgroundPaint)
this.backgroundImage == orig(this.backgroundImage)
this.backgroundImageAlignment == orig(this.backgroundImageAlignment)
this.backgroundImageAlpha == orig(this.backgroundImageAlpha)
this.foregroundAlpha == orig(this.foregroundAlpha)
this.backgroundAlpha == orig(this.backgroundAlpha)
this.drawingSupplier == orig(this.drawingSupplier)
this.drawingSupplier.getClass().getName() == orig(this.drawingSupplier.getClass().getName())
this.listenerList == orig(this.listenerList)
this.dataset has only one value
this.circular == true
this.sectionPaintMap has only one value
this.sectionPaintMap.store has only one value
this.sectionOutlinePaintMap has only one value
this.sectionOutlinePaintMap.store has only one value
this.sectionOutlineStrokeMap has only one value
this.sectionOutlineStrokeMap.store has only one value
this.explodePercentages has only one value
this.labelGenerator has only one value
this.labelPadding has only one value
this.simpleLabelOffset has only one value
this.labelLinkStroke has only one value
this.labelDistributor has only one value
this.labelDistributor.labels has only one value
this.toolTipGenerator == null
this.legendLabelGenerator has only one value
this.legendLabelGenerator.getClass().getName() == org.jfree.chart.plot.junit.PiePlotTests$NullLegendLabelGenerator.class
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener has only one value
this.noDataMessageFont has only one value
this.insets has only one value
this.insets.top == 0.0
this.insets.left == 5.0
this.insets.bottom == 5.0
this.insets.right == 5.0
this.drawingSupplier has only one value
this.listenerList has only one value
===========================================================================
org.jfree.chart.plot.PiePlot.setToolTipGenerator(org.jfree.chart.labels.PieToolTipGenerator):::ENTER
this.baseSectionPaint == org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT
this.baseSectionOutlinePaint == org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT
this.baseSectionOutlineStroke == org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE
this.shadowPaint == org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT
this.labelGenerator.getClass().getName() == this.legendLabelGenerator.getClass().getName()
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == org.jfree.chart.util.UnitType.ABSOLUTE
org.jfree.chart.util.UnitType.ABSOLUTE == org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType
this.legendItemShape == org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE == this.outlineStroke
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT == this.outlinePaint
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT == this.backgroundPaint
this.circular == false
this.toolTipGenerator == null
this.insets.top == 0.0
this.insets.left == 5.0
this.insets.bottom == 5.0
this.insets.right == 5.0
generator.getClass().getName() == org.jfree.chart.labels.StandardPieToolTipGenerator.class
===========================================================================
org.jfree.chart.plot.PiePlot.setToolTipGenerator(org.jfree.chart.labels.PieToolTipGenerator):::EXIT
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_FONT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_FONT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_FONT == orig(this.labelFont)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_PAINT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(this.labelPaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(this.labelOutlinePaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(this.labelLinkPaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT == orig(this.noDataMessagePaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.baseSectionPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.baseSectionOutlinePaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.shadowPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelBackgroundPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelOutlinePaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelShadowPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.labelLinkPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.noDataMessagePaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.outlinePaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_PAINT.getClass().getName() == orig(this.backgroundPaint.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT == orig(this.labelBackgroundPaint)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE == orig(this.labelOutlineStroke)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(this.baseSectionOutlineStroke.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(this.labelOutlineStroke.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(this.labelLinkStroke.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_OUTLINE_STROKE.getClass().getName() == orig(this.outlineStroke.getClass().getName())
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT == orig(org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT)
org.jfree.chart.plot.PiePlot.DEFAULT_LABEL_SHADOW_PAINT == orig(this.labelShadowPaint)
this.dataset == orig(this.dataset)
this.dataset.getClass().getName() == orig(this.dataset.getClass().getName())
this.pieIndex == orig(this.pieIndex)
this.interiorGap == orig(this.interiorGap)
this.circular == orig(this.circular)
this.startAngle == orig(this.startAngle)
org.jfree.chart.util.Rotation.CLOCKWISE == orig(this.direction)
org.jfree.chart.util.Rotation.CLOCKWISE == orig(org.jfree.chart.util.Rotation.CLOCKWISE)
org.jfree.chart.util.Rotation.ANTICLOCKWISE == orig(org.jfree.chart.util.Rotation.ANTICLOCKWISE)
org.jfree.chart.util.Rotation.CLOCKWISE.name == orig(org.jfree.chart.util.Rotation.CLOCKWISE.name)
org.jfree.chart.util.Rotation.CLOCKWISE.name == orig(this.direction.name)
org.jfree.chart.util.Rotation.CLOCKWISE.name.toString == orig(org.jfree.chart.util.Rotation.CLOCKWISE.name.toString)
org.jfree.chart.util.Rotation.CLOCKWISE.factor == orig(org.jfree.chart.util.Rotation.CLOCKWISE.factor)
org.jfree.chart.util.Rotation.CLOCKWISE.factor == orig(this.direction.factor)
org.jfree.chart.util.Rotation.ANTICLOCKWISE.name == orig(org.jfree.chart.util.Rotation.ANTICLOCKWISE.name)
org.jfree.chart.util.Rotation.ANTICLOCKWISE.name.toString == orig(org.jfree.chart.util.Rotation.ANTICLOCKWISE.name.toString)
org.jfree.chart.util.Rotation.ANTICLOCKWISE.factor == orig(org.jfree.chart.util.Rotation.ANTICLOCKWISE.factor)
this.direction.name.toString == orig(this.direction.name.toString)
this.sectionPaintMap == orig(this.sectionPaintMap)
this.sectionPaintMap.store == orig(this.sectionPaintMap.store)
this.sectionPaintMap.store.getClass().getName() == orig(this.sectionPaintMap.store.getClass().getName())
this.sectionPaintMap.store.getClass().getName() == orig(this.sectionOutlinePaintMap.store.getClass().getName())
this.baseSectionPaint == org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT
this.sectionOutlinesVisible == orig(this.sectionOutlinesVisible)
this.sectionOutlinePaintMap == orig(this.sectionOutlinePaintMap)
this.sectionOutlinePaintMap.store == orig(this.sectionOutlinePaintMap.store)
this.baseSectionOutlinePaint == org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT
this.sectionOutlineStrokeMap == orig(this.sectionOutlineStrokeMap)
this.sectionOutlineStrokeMap.store == orig(this.sectionOutlineStrokeMap.store)
this.baseSectionOutlineStroke == org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE
this.shadowPaint == org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT
this.shadowXOffset == orig(this.shadowXOffset)
this.shadowYOffset == orig(this.shadowYOffset)
this.explodePercentages == orig(this.explodePercentages)
this.explodePercentages.getClass().getName() == orig(this.sectionOutlineStrokeMap.store.getClass().getName())
this.explodePercentages.getClass().getName() == orig(this.explodePercentages.getClass().getName())
this.labelGenerator == orig(this.labelGenerator)
this.labelGenerator.getClass().getName() == this.legendLabelGenerator.getClass().getName()
this.labelGenerator.getClass().getName() == orig(this.labelGenerator.getClass().getName())
this.labelGenerator.getClass().getName() == orig(this.legendLabelGenerator.getClass().getName())
this.simpleLabels == orig(this.simpleLabels)
this.labelPadding == orig(this.labelPadding)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == org.jfree.chart.util.UnitType.ABSOLUTE
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
org.jfree.chart.util.UnitType.ABSOLUTE == org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(this.labelPadding.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(this.insets.unitType)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
org.jfree.chart.util.UnitType.RELATIVE == orig(this.simpleLabelOffset.unitType)
this.labelPadding.unitType.name.toString == orig(this.labelPadding.unitType.name.toString)
this.labelPadding.top == orig(this.labelPadding.top)
this.labelPadding.left == orig(this.labelPadding.left)
this.labelPadding.bottom == orig(this.labelPadding.bottom)
this.labelPadding.right == orig(this.labelPadding.right)
this.simpleLabelOffset == orig(this.simpleLabelOffset)
this.simpleLabelOffset.unitType.name == orig(this.simpleLabelOffset.unitType.name)
this.simpleLabelOffset.unitType.name.toString == orig(this.simpleLabelOffset.unitType.name.toString)
this.simpleLabelOffset.top == orig(this.simpleLabelOffset.top)
this.simpleLabelOffset.left == orig(this.simpleLabelOffset.left)
this.simpleLabelOffset.bottom == orig(this.simpleLabelOffset.bottom)
this.simpleLabelOffset.right == orig(this.simpleLabelOffset.right)
this.maximumLabelWidth == orig(this.maximumLabelWidth)
this.labelGap == orig(this.labelGap)
this.labelLinksVisible == orig(this.labelLinksVisible)
this.labelLinkMargin == orig(this.labelLinkMargin)
this.labelLinkStroke == orig(this.labelLinkStroke)
this.labelDistributor == orig(this.labelDistributor)
this.labelDistributor.getClass().getName() == orig(this.labelDistributor.getClass().getName())
this.labelDistributor.labels == orig(this.labelDistributor.labels)
this.labelDistributor.labels[] == orig(this.labelDistributor.labels[])
this.labelDistributor.labels.getClass().getName() == orig(this.labelDistributor.labels.getClass().getName())
this.toolTipGenerator == orig(generator)
this.toolTipGenerator.getClass().getName() == orig(generator.getClass().getName())
this.urlGenerator == orig(this.urlGenerator)
this.legendLabelGenerator == orig(this.legendLabelGenerator)
this.legendLabelToolTipGenerator == orig(this.legendLabelToolTipGenerator)
this.legendLabelURLGenerator == orig(this.legendLabelURLGenerator)
this.ignoreNullValues == orig(this.ignoreNullValues)
this.ignoreZeroValues == orig(this.ignoreZeroValues)
this.legendItemShape == org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE
this.minimumArcAngleToDraw == orig(this.minimumArcAngleToDraw)
org.jfree.chart.plot.PiePlot.localizationResources == orig(org.jfree.chart.plot.PiePlot.localizationResources)
org.jfree.chart.plot.PiePlot.localizationResources.getClass().getName() == orig(org.jfree.chart.plot.PiePlot.localizationResources.getClass().getName())
org.jfree.chart.plot.Plot.ZERO == orig(org.jfree.chart.plot.Plot.ZERO)
org.jfree.chart.plot.Plot.ZERO.getClass().getName() == orig(org.jfree.chart.plot.Plot.ZERO.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_INSETS == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name == orig(this.labelPadding.unitType.name)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name == orig(this.insets.unitType.name)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name.toString == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name.toString)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.top == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.top)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.left == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.left)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.right == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.right)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE == this.outlineStroke
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE == orig(this.baseSectionOutlineStroke)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE == orig(this.outlineStroke)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT == this.outlinePaint
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT == orig(this.baseSectionPaint)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT == orig(this.baseSectionOutlinePaint)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT == orig(this.shadowPaint)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT == orig(this.outlinePaint)
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT == this.backgroundPaint
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT == orig(this.backgroundPaint)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE == orig(this.legendItemShape)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == orig(this.legendItemShape.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName())
this.parent == orig(this.parent)
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener == orig(org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener)
this.datasetGroup == orig(this.datasetGroup)
this.noDataMessage == orig(this.noDataMessage)
this.noDataMessageFont == orig(this.noDataMessageFont)
this.insets == orig(this.insets)
this.insets.unitType.name.toString == orig(this.insets.unitType.name.toString)
this.insets.top == orig(this.insets.top)
this.insets.left == orig(this.insets.left)
this.insets.bottom == orig(this.insets.bottom)
this.insets.right == orig(this.insets.right)
this.outlineVisible == orig(this.outlineVisible)
this.backgroundImage == orig(this.backgroundImage)
this.backgroundImageAlignment == orig(this.backgroundImageAlignment)
this.backgroundImageAlpha == orig(this.backgroundImageAlpha)
this.foregroundAlpha == orig(this.foregroundAlpha)
this.backgroundAlpha == orig(this.backgroundAlpha)
this.drawingSupplier == orig(this.drawingSupplier)
this.drawingSupplier.getClass().getName() == orig(this.drawingSupplier.getClass().getName())
this.listenerList == orig(this.listenerList)
this.circular == false
this.insets.top == 0.0
this.insets.left == 5.0
this.insets.bottom == 5.0
this.insets.right == 5.0
===========================================================================
org.jfree.chart.plot.Plot:::CLASS
org.jfree.chart.plot.Plot.ZERO has only one value
org.jfree.chart.plot.Plot.ZERO != null
org.jfree.chart.plot.Plot.ZERO.getClass().getName() == java.lang.Integer.class
org.jfree.chart.plot.Plot.DEFAULT_INSETS has only one value
org.jfree.chart.plot.Plot.DEFAULT_INSETS != null
org.jfree.chart.util.RectangleInsets.ZERO_INSETS has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS != null
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType != null
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == 0.0
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType has only one value
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType != null
org.jfree.chart.util.UnitType.ABSOLUTE has only one value
org.jfree.chart.util.UnitType.ABSOLUTE != null
org.jfree.chart.util.UnitType.RELATIVE has only one value
org.jfree.chart.util.UnitType.RELATIVE != null
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name has only one value
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name != null
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name.toString == "UnitType.ABSOLUTE"
org.jfree.chart.plot.Plot.DEFAULT_INSETS.top == 4.0
org.jfree.chart.plot.Plot.DEFAULT_INSETS.left == 8.0
org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom == 4.0
org.jfree.chart.plot.Plot.DEFAULT_INSETS.right == 8.0
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE has only one value
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE != null
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName() == java.awt.BasicStroke.class
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT has only one value
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT != null
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName() == java.awt.Color.class
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT has only one value
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT != null
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName() == java.awt.Color.class
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX has only one value
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX != null
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName() == java.awt.geom.Rectangle2D$Double.class
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE has only one value
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE != null
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == java.awt.geom.Ellipse2D$Double.class
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener == null
===========================================================================
org.jfree.chart.plot.Plot:::OBJECT
this.parent == null
this.datasetGroup == null
this.noDataMessage == null
this.noDataMessageFont != null
this.noDataMessagePaint has only one value
this.noDataMessagePaint != null
this.noDataMessagePaint.getClass().getName() == java.awt.Color.class
this.insets != null
this.insets.unitType has only one value
this.insets.unitType != null
this.insets.unitType.name has only one value
this.insets.unitType.name != null
this.insets.unitType.name.toString == "UnitType.ABSOLUTE"
this.insets.top one of { 0.0, 4.0 }
this.insets.left one of { 5.0, 8.0 }
this.insets.bottom one of { 4.0, 5.0 }
this.insets.right one of { 5.0, 8.0 }
this.outlineVisible == true
this.outlineStroke has only one value
this.outlineStroke != null
this.outlineStroke.getClass().getName() == java.awt.BasicStroke.class
this.outlinePaint has only one value
this.outlinePaint != null
this.outlinePaint.getClass().getName() == java.awt.Color.class
this.backgroundPaint has only one value
this.backgroundPaint != null
this.backgroundPaint.getClass().getName() == java.awt.Color.class
this.backgroundImage == null
this.backgroundImageAlignment == 15
this.backgroundImageAlpha == 0.5
this.foregroundAlpha == 1.0
this.backgroundAlpha == 1.0
this.drawingSupplier != null
this.drawingSupplier.getClass().getName() == org.jfree.chart.plot.DefaultDrawingSupplier.class
this.listenerList != null
===========================================================================
org.jfree.chart.plot.Plot.Plot():::EXIT
this.insets has only one value
this.insets.top == 4.0
this.insets.left == 8.0
this.insets.bottom == 4.0
this.insets.right == 8.0
===========================================================================
org.jfree.chart.plot.Plot.addChangeListener(org.jfree.chart.event.PlotChangeListener):::ENTER
this.insets.top == 0.0
this.insets.left == 5.0
this.insets.bottom == 5.0
this.insets.right == 5.0
listener.getClass().getName() == org.jfree.chart.JFreeChart.class
===========================================================================
org.jfree.chart.plot.Plot.addChangeListener(org.jfree.chart.event.PlotChangeListener):::EXIT
org.jfree.chart.plot.Plot.ZERO == orig(org.jfree.chart.plot.Plot.ZERO)
org.jfree.chart.plot.Plot.ZERO.getClass().getName() == orig(org.jfree.chart.plot.Plot.ZERO.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_INSETS == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name.toString == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name.toString)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.top == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.top)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.left == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.left)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.right == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.right)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName())
this.parent == orig(this.parent)
this.datasetGroup == orig(this.datasetGroup)
this.noDataMessage == orig(this.noDataMessage)
this.noDataMessageFont == orig(this.noDataMessageFont)
this.noDataMessagePaint == orig(this.noDataMessagePaint)
this.noDataMessagePaint.getClass().getName() == orig(this.noDataMessagePaint.getClass().getName())
this.insets == orig(this.insets)
this.insets.unitType == orig(this.insets.unitType)
this.insets.unitType.name == orig(this.insets.unitType.name)
this.insets.unitType.name.toString == orig(this.insets.unitType.name.toString)
this.insets.top == orig(this.insets.top)
this.insets.left == orig(this.insets.left)
this.insets.bottom == orig(this.insets.bottom)
this.insets.right == orig(this.insets.right)
this.outlineVisible == orig(this.outlineVisible)
this.outlineStroke == orig(this.outlineStroke)
this.outlineStroke.getClass().getName() == orig(this.outlineStroke.getClass().getName())
this.outlinePaint == orig(this.outlinePaint)
this.outlinePaint.getClass().getName() == orig(this.outlinePaint.getClass().getName())
this.backgroundPaint == orig(this.backgroundPaint)
this.backgroundPaint.getClass().getName() == orig(this.backgroundPaint.getClass().getName())
this.backgroundImage == orig(this.backgroundImage)
this.backgroundImageAlignment == orig(this.backgroundImageAlignment)
this.backgroundImageAlpha == orig(this.backgroundImageAlpha)
this.foregroundAlpha == orig(this.foregroundAlpha)
this.backgroundAlpha == orig(this.backgroundAlpha)
this.drawingSupplier == orig(this.drawingSupplier)
this.drawingSupplier.getClass().getName() == orig(this.drawingSupplier.getClass().getName())
this.listenerList == orig(this.listenerList)
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener has only one value
this.insets.top == 0.0
this.insets.left == 5.0
this.insets.bottom == 5.0
this.insets.right == 5.0
===========================================================================
org.jfree.chart.plot.Plot.class$(java.lang.String):::ENTER
x0 has only one value
x0.toString == "org.jfree.chart.event.PlotChangeListener"
===========================================================================
org.jfree.chart.plot.Plot.class$(java.lang.String):::EXIT
org.jfree.chart.plot.Plot.ZERO == orig(org.jfree.chart.plot.Plot.ZERO)
org.jfree.chart.plot.Plot.ZERO.getClass().getName() == orig(org.jfree.chart.plot.Plot.ZERO.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_INSETS == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name.toString == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name.toString)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.top == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.top)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.left == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.left)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.right == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.right)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName())
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener == orig(org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener)
x0.toString == orig(x0.toString)
x0.toString == "org.jfree.chart.event.PlotChangeListener"
return has only one value
===========================================================================
org.jfree.chart.plot.Plot.getDrawingSupplier():::ENTER
this has only one value
this.getClass().getName() == org.jfree.chart.plot.PiePlot3D.class
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener has only one value
this.noDataMessageFont has only one value
this.insets has only one value
this.insets.top == 0.0
this.insets.left == 5.0
this.insets.bottom == 5.0
this.insets.right == 5.0
this.drawingSupplier has only one value
this.listenerList has only one value
===========================================================================
org.jfree.chart.plot.Plot.getDrawingSupplier():::EXIT
org.jfree.chart.plot.Plot.ZERO == orig(org.jfree.chart.plot.Plot.ZERO)
org.jfree.chart.plot.Plot.ZERO.getClass().getName() == orig(org.jfree.chart.plot.Plot.ZERO.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_INSETS == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name.toString == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name.toString)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.top == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.top)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.left == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.left)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.right == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.right)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName())
this.parent == orig(this.parent)
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener == orig(org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener)
this.datasetGroup == orig(this.datasetGroup)
this.noDataMessage == orig(this.noDataMessage)
this.noDataMessageFont == orig(this.noDataMessageFont)
this.noDataMessagePaint == orig(this.noDataMessagePaint)
this.noDataMessagePaint.getClass().getName() == orig(this.noDataMessagePaint.getClass().getName())
this.insets == orig(this.insets)
this.insets.unitType == orig(this.insets.unitType)
this.insets.unitType.name == orig(this.insets.unitType.name)
this.insets.unitType.name.toString == orig(this.insets.unitType.name.toString)
this.insets.top == orig(this.insets.top)
this.insets.left == orig(this.insets.left)
this.insets.bottom == orig(this.insets.bottom)
this.insets.right == orig(this.insets.right)
this.outlineVisible == orig(this.outlineVisible)
this.outlineStroke == orig(this.outlineStroke)
this.outlineStroke.getClass().getName() == orig(this.outlineStroke.getClass().getName())
this.outlinePaint == orig(this.outlinePaint)
this.outlinePaint.getClass().getName() == orig(this.outlinePaint.getClass().getName())
this.backgroundPaint == orig(this.backgroundPaint)
this.backgroundPaint.getClass().getName() == orig(this.backgroundPaint.getClass().getName())
this.backgroundImage == orig(this.backgroundImage)
this.backgroundImageAlignment == orig(this.backgroundImageAlignment)
this.backgroundImageAlpha == orig(this.backgroundImageAlpha)
this.foregroundAlpha == orig(this.foregroundAlpha)
this.backgroundAlpha == orig(this.backgroundAlpha)
this.drawingSupplier == orig(this.drawingSupplier)
this.drawingSupplier.getClass().getName() == orig(this.drawingSupplier.getClass().getName())
this.listenerList == orig(this.listenerList)
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener has only one value
this.noDataMessageFont has only one value
this.insets has only one value
this.insets.top == 0.0
this.insets.left == 5.0
this.insets.bottom == 5.0
this.insets.right == 5.0
this.drawingSupplier has only one value
this.listenerList has only one value
return has only one value
return.getClass().getName() == org.jfree.chart.plot.DefaultDrawingSupplier.class
===========================================================================
org.jfree.chart.plot.Plot.getParent():::ENTER
this has only one value
this.getClass().getName() == org.jfree.chart.plot.PiePlot3D.class
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener has only one value
this.noDataMessageFont has only one value
this.insets has only one value
this.insets.top == 0.0
this.insets.left == 5.0
this.insets.bottom == 5.0
this.insets.right == 5.0
this.drawingSupplier has only one value
this.listenerList has only one value
===========================================================================
org.jfree.chart.plot.Plot.getParent():::EXIT
org.jfree.chart.plot.Plot.ZERO == orig(org.jfree.chart.plot.Plot.ZERO)
org.jfree.chart.plot.Plot.ZERO.getClass().getName() == orig(org.jfree.chart.plot.Plot.ZERO.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_INSETS == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name.toString == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name.toString)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.top == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.top)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.left == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.left)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.right == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.right)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName())
this.parent == orig(this.parent)
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener == orig(org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener)
this.datasetGroup == orig(this.datasetGroup)
this.noDataMessage == orig(this.noDataMessage)
this.noDataMessageFont == orig(this.noDataMessageFont)
this.noDataMessagePaint == orig(this.noDataMessagePaint)
this.noDataMessagePaint.getClass().getName() == orig(this.noDataMessagePaint.getClass().getName())
this.insets == orig(this.insets)
this.insets.unitType == orig(this.insets.unitType)
this.insets.unitType.name == orig(this.insets.unitType.name)
this.insets.unitType.name.toString == orig(this.insets.unitType.name.toString)
this.insets.top == orig(this.insets.top)
this.insets.left == orig(this.insets.left)
this.insets.bottom == orig(this.insets.bottom)
this.insets.right == orig(this.insets.right)
this.outlineVisible == orig(this.outlineVisible)
this.outlineStroke == orig(this.outlineStroke)
this.outlineStroke.getClass().getName() == orig(this.outlineStroke.getClass().getName())
this.outlinePaint == orig(this.outlinePaint)
this.outlinePaint.getClass().getName() == orig(this.outlinePaint.getClass().getName())
this.backgroundPaint == orig(this.backgroundPaint)
this.backgroundPaint.getClass().getName() == orig(this.backgroundPaint.getClass().getName())
this.backgroundImage == orig(this.backgroundImage)
this.backgroundImageAlignment == orig(this.backgroundImageAlignment)
this.backgroundImageAlpha == orig(this.backgroundImageAlpha)
this.foregroundAlpha == orig(this.foregroundAlpha)
this.backgroundAlpha == orig(this.backgroundAlpha)
this.drawingSupplier == orig(this.drawingSupplier)
this.drawingSupplier.getClass().getName() == orig(this.drawingSupplier.getClass().getName())
this.listenerList == orig(this.listenerList)
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener has only one value
this.noDataMessageFont has only one value
this.insets has only one value
this.insets.top == 0.0
this.insets.left == 5.0
this.insets.bottom == 5.0
this.insets.right == 5.0
this.drawingSupplier has only one value
this.listenerList has only one value
return == null
===========================================================================
org.jfree.chart.plot.Plot.notifyListeners(org.jfree.chart.event.PlotChangeEvent):::ENTER
event.plot.parent == null
event.plot.datasetGroup == null
event.plot.noDataMessage == null
event.plot.noDataMessagePaint has only one value
event.plot.noDataMessagePaint.getClass().getName() == java.awt.Color.class
event.plot.outlineVisible == true
event.plot.outlineStroke has only one value
event.plot.outlineStroke.getClass().getName() == java.awt.BasicStroke.class
event.plot.outlinePaint has only one value
event.plot.outlinePaint.getClass().getName() == java.awt.Color.class
event.plot.backgroundPaint has only one value
event.plot.backgroundPaint.getClass().getName() == java.awt.Color.class
event.plot.backgroundImage == null
event.plot.backgroundImageAlignment == 15
event.plot.backgroundImageAlpha == 0.5
event.plot.foregroundAlpha == 1.0
event.plot.backgroundAlpha == 1.0
event.plot.drawingSupplier.getClass().getName() == org.jfree.chart.plot.DefaultDrawingSupplier.class
event.type has only one value
org.jfree.chart.event.ChartChangeEventType.GENERAL has only one value
org.jfree.chart.event.ChartChangeEventType.NEW_DATASET has only one value
org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED has only one value
event.type.name has only one value
event.type.name.toString == "ChartChangeEventType.GENERAL"
event.chart == null
org.jfree.chart.JFreeChart.INFO has only one value
org.jfree.chart.JFreeChart.DEFAULT_TITLE_FONT has only one value
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT has only one value
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName() == java.awt.Color.class
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_IMAGE == null
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartChangeListener == null
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartProgressListener == null
===========================================================================
org.jfree.chart.plot.Plot.notifyListeners(org.jfree.chart.event.PlotChangeEvent):::EXIT
org.jfree.chart.plot.Plot.ZERO == orig(org.jfree.chart.plot.Plot.ZERO)
org.jfree.chart.plot.Plot.ZERO.getClass().getName() == orig(org.jfree.chart.plot.Plot.ZERO.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_INSETS == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name.toString == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name.toString)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.top == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.top)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.left == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.left)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.right == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.right)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName())
this.parent == orig(this.parent)
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener == orig(org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener)
this.datasetGroup == orig(this.datasetGroup)
this.noDataMessage == orig(this.noDataMessage)
this.noDataMessageFont == orig(this.noDataMessageFont)
this.noDataMessagePaint == orig(this.noDataMessagePaint)
this.noDataMessagePaint.getClass().getName() == orig(this.noDataMessagePaint.getClass().getName())
this.insets == orig(this.insets)
this.insets.unitType == orig(this.insets.unitType)
this.insets.unitType.name == orig(this.insets.unitType.name)
this.insets.unitType.name.toString == orig(this.insets.unitType.name.toString)
this.insets.top == orig(this.insets.top)
this.insets.left == orig(this.insets.left)
this.insets.bottom == orig(this.insets.bottom)
this.insets.right == orig(this.insets.right)
this.outlineVisible == orig(this.outlineVisible)
this.outlineStroke == orig(this.outlineStroke)
this.outlineStroke.getClass().getName() == orig(this.outlineStroke.getClass().getName())
this.outlinePaint == orig(this.outlinePaint)
this.outlinePaint.getClass().getName() == orig(this.outlinePaint.getClass().getName())
this.backgroundPaint == orig(this.backgroundPaint)
this.backgroundPaint.getClass().getName() == orig(this.backgroundPaint.getClass().getName())
this.backgroundImage == orig(this.backgroundImage)
this.backgroundImageAlignment == orig(this.backgroundImageAlignment)
this.backgroundImageAlpha == orig(this.backgroundImageAlpha)
this.foregroundAlpha == orig(this.foregroundAlpha)
this.backgroundAlpha == orig(this.backgroundAlpha)
this.drawingSupplier == orig(this.drawingSupplier)
this.drawingSupplier.getClass().getName() == orig(this.drawingSupplier.getClass().getName())
this.listenerList == orig(this.listenerList)
event.plot == orig(event.plot)
event.plot.getClass().getName() == orig(event.plot.getClass().getName())
event.plot.parent == orig(event.plot.parent)
event.plot.datasetGroup == orig(event.plot.datasetGroup)
event.plot.noDataMessage == orig(event.plot.noDataMessage)
event.plot.noDataMessageFont == orig(event.plot.noDataMessageFont)
event.plot.noDataMessagePaint == orig(event.plot.noDataMessagePaint)
event.plot.noDataMessagePaint.getClass().getName() == orig(event.plot.noDataMessagePaint.getClass().getName())
event.plot.insets == orig(event.plot.insets)
event.plot.outlineVisible == orig(event.plot.outlineVisible)
event.plot.outlineStroke == orig(event.plot.outlineStroke)
event.plot.outlineStroke.getClass().getName() == orig(event.plot.outlineStroke.getClass().getName())
event.plot.outlinePaint == orig(event.plot.outlinePaint)
event.plot.outlinePaint.getClass().getName() == orig(event.plot.outlinePaint.getClass().getName())
event.plot.backgroundPaint == orig(event.plot.backgroundPaint)
event.plot.backgroundPaint.getClass().getName() == orig(event.plot.backgroundPaint.getClass().getName())
event.plot.backgroundImage == orig(event.plot.backgroundImage)
event.plot.backgroundImageAlignment == orig(event.plot.backgroundImageAlignment)
event.plot.backgroundImageAlpha == orig(event.plot.backgroundImageAlpha)
event.plot.foregroundAlpha == orig(event.plot.foregroundAlpha)
event.plot.backgroundAlpha == orig(event.plot.backgroundAlpha)
event.plot.drawingSupplier == orig(event.plot.drawingSupplier)
event.plot.drawingSupplier.getClass().getName() == orig(event.plot.drawingSupplier.getClass().getName())
event.plot.listenerList == orig(event.plot.listenerList)
event.type == orig(event.type)
org.jfree.chart.event.ChartChangeEventType.GENERAL == orig(org.jfree.chart.event.ChartChangeEventType.GENERAL)
org.jfree.chart.event.ChartChangeEventType.NEW_DATASET == orig(org.jfree.chart.event.ChartChangeEventType.NEW_DATASET)
org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED == orig(org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED)
event.type.name == orig(event.type.name)
event.type.name.toString == orig(event.type.name.toString)
org.jfree.chart.JFreeChart.INFO == orig(org.jfree.chart.JFreeChart.INFO)
org.jfree.chart.JFreeChart.DEFAULT_TITLE_FONT == orig(org.jfree.chart.JFreeChart.DEFAULT_TITLE_FONT)
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT == orig(org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT)
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName() == orig(org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_IMAGE == orig(org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_IMAGE)
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartChangeListener == orig(org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartChangeListener)
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartProgressListener == orig(org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartProgressListener)
event.plot.parent == null
event.plot.datasetGroup == null
event.plot.noDataMessage == null
event.plot.noDataMessagePaint has only one value
event.plot.noDataMessagePaint.getClass().getName() == java.awt.Color.class
event.plot.outlineVisible == true
event.plot.outlineStroke has only one value
event.plot.outlineStroke.getClass().getName() == java.awt.BasicStroke.class
event.plot.outlinePaint has only one value
event.plot.outlinePaint.getClass().getName() == java.awt.Color.class
event.plot.backgroundPaint has only one value
event.plot.backgroundPaint.getClass().getName() == java.awt.Color.class
event.plot.backgroundImage == null
event.plot.backgroundImageAlignment == 15
event.plot.backgroundImageAlpha == 0.5
event.plot.foregroundAlpha == 1.0
event.plot.backgroundAlpha == 1.0
event.plot.drawingSupplier.getClass().getName() == org.jfree.chart.plot.DefaultDrawingSupplier.class
event.type has only one value
org.jfree.chart.event.ChartChangeEventType.GENERAL has only one value
org.jfree.chart.event.ChartChangeEventType.NEW_DATASET has only one value
org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED has only one value
event.type.name has only one value
event.type.name.toString == "ChartChangeEventType.GENERAL"
org.jfree.chart.JFreeChart.INFO has only one value
org.jfree.chart.JFreeChart.DEFAULT_TITLE_FONT has only one value
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT has only one value
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName() == java.awt.Color.class
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_IMAGE == null
event.chart.renderingHints has only one value
event.chart.borderVisible == false
event.chart.borderStroke has only one value
event.chart.borderStroke.getClass().getName() == java.awt.BasicStroke.class
event.chart.borderPaint has only one value
event.chart.borderPaint.getClass().getName() == java.awt.Color.class
event.chart.padding has only one value
event.chart.title has only one value
event.chart.subtitles has only one value
event.chart.subtitles[] contains no nulls and has only one value, of length 1
event.chart.subtitles[] elements has only one value
event.chart.subtitles[].getClass().getName() == [org.jfree.chart.title.LegendTitle]
event.chart.subtitles[].getClass().getName() elements == org.jfree.chart.title.LegendTitle.class
event.chart.subtitles.getClass().getName() == java.util.ArrayList.class
event.chart.plot has only one value
event.chart.plot.getClass().getName() == org.jfree.chart.plot.PiePlot.class
event.chart.backgroundPaint has only one value
event.chart.backgroundPaint.getClass().getName() == java.awt.Color.class
event.chart.backgroundImage == null
event.chart.backgroundImageAlignment == 15
event.chart.backgroundImageAlpha == 0.5
event.chart.changeListeners has only one value
event.chart.progressListeners has only one value
event.chart.notify == true
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartChangeListener == null
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartProgressListener == null
size(event.chart.subtitles[]) == 1
===========================================================================
org.jfree.chart.plot.Plot.setInsets(org.jfree.chart.util.RectangleInsets):::ENTER
this.insets has only one value
this.insets.top == 4.0
this.insets.left == 8.0
this.insets.bottom == 4.0
this.insets.right == 8.0
insets.unitType has only one value
insets.unitType.name has only one value
insets.unitType.name.toString == "UnitType.ABSOLUTE"
insets.top == 0.0
insets.left == 5.0
insets.bottom == 5.0
insets.right == 5.0
===========================================================================
org.jfree.chart.plot.Plot.setInsets(org.jfree.chart.util.RectangleInsets):::EXIT
org.jfree.chart.plot.Plot.ZERO == orig(org.jfree.chart.plot.Plot.ZERO)
org.jfree.chart.plot.Plot.ZERO.getClass().getName() == orig(org.jfree.chart.plot.Plot.ZERO.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_INSETS == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name.toString == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name.toString)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.top == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.top)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.left == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.left)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.right == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.right)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName())
this.parent == orig(this.parent)
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener == orig(org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener)
this.datasetGroup == orig(this.datasetGroup)
this.noDataMessage == orig(this.noDataMessage)
this.noDataMessageFont == orig(this.noDataMessageFont)
this.noDataMessagePaint == orig(this.noDataMessagePaint)
this.noDataMessagePaint.getClass().getName() == orig(this.noDataMessagePaint.getClass().getName())
this.insets.unitType == orig(this.insets.unitType)
this.insets.unitType.name == orig(this.insets.unitType.name)
this.insets.unitType.name.toString == orig(this.insets.unitType.name.toString)
this.outlineVisible == orig(this.outlineVisible)
this.outlineStroke == orig(this.outlineStroke)
this.outlineStroke.getClass().getName() == orig(this.outlineStroke.getClass().getName())
this.outlinePaint == orig(this.outlinePaint)
this.outlinePaint.getClass().getName() == orig(this.outlinePaint.getClass().getName())
this.backgroundPaint == orig(this.backgroundPaint)
this.backgroundPaint.getClass().getName() == orig(this.backgroundPaint.getClass().getName())
this.backgroundImage == orig(this.backgroundImage)
this.backgroundImageAlignment == orig(this.backgroundImageAlignment)
this.backgroundImageAlpha == orig(this.backgroundImageAlpha)
this.foregroundAlpha == orig(this.foregroundAlpha)
this.backgroundAlpha == orig(this.backgroundAlpha)
this.drawingSupplier == orig(this.drawingSupplier)
this.drawingSupplier.getClass().getName() == orig(this.drawingSupplier.getClass().getName())
this.listenerList == orig(this.listenerList)
insets.unitType == orig(insets.unitType)
insets.unitType.name == orig(insets.unitType.name)
insets.unitType.name.toString == orig(insets.unitType.name.toString)
insets.top == orig(insets.top)
insets.left == orig(insets.left)
insets.bottom == orig(insets.bottom)
insets.right == orig(insets.right)
this.insets.top == 0.0
this.insets.left == 5.0
this.insets.bottom == 5.0
this.insets.right == 5.0
insets.unitType has only one value
insets.unitType.name has only one value
insets.unitType.name.toString == "UnitType.ABSOLUTE"
insets.top == 0.0
insets.left == 5.0
insets.bottom == 5.0
insets.right == 5.0
===========================================================================
org.jfree.chart.plot.Plot.setInsets(org.jfree.chart.util.RectangleInsets, boolean):::ENTER
this.insets has only one value
this.insets.top == 4.0
this.insets.left == 8.0
this.insets.bottom == 4.0
this.insets.right == 8.0
insets.unitType has only one value
insets.unitType.name has only one value
insets.unitType.name.toString == "UnitType.ABSOLUTE"
insets.top == 0.0
insets.left == 5.0
insets.bottom == 5.0
insets.right == 5.0
notify == true
===========================================================================
org.jfree.chart.plot.Plot.setInsets(org.jfree.chart.util.RectangleInsets, boolean):::EXIT
org.jfree.chart.plot.Plot.ZERO == orig(org.jfree.chart.plot.Plot.ZERO)
org.jfree.chart.plot.Plot.ZERO.getClass().getName() == orig(org.jfree.chart.plot.Plot.ZERO.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_INSETS == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name.toString == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.unitType.name.toString)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.top == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.top)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.left == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.left)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.bottom)
org.jfree.chart.plot.Plot.DEFAULT_INSETS.right == orig(org.jfree.chart.plot.Plot.DEFAULT_INSETS.right)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT)
org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX.getClass().getName())
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE)
org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName() == orig(org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE.getClass().getName())
this.parent == orig(this.parent)
org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener == orig(org.jfree.chart.plot.Plot.class$org$jfree$chart$event$PlotChangeListener)
this.datasetGroup == orig(this.datasetGroup)
this.noDataMessage == orig(this.noDataMessage)
this.noDataMessageFont == orig(this.noDataMessageFont)
this.noDataMessagePaint == orig(this.noDataMessagePaint)
this.noDataMessagePaint.getClass().getName() == orig(this.noDataMessagePaint.getClass().getName())
this.insets.unitType == orig(this.insets.unitType)
this.insets.unitType.name == orig(this.insets.unitType.name)
this.insets.unitType.name.toString == orig(this.insets.unitType.name.toString)
this.outlineVisible == orig(this.outlineVisible)
this.outlineStroke == orig(this.outlineStroke)
this.outlineStroke.getClass().getName() == orig(this.outlineStroke.getClass().getName())
this.outlinePaint == orig(this.outlinePaint)
this.outlinePaint.getClass().getName() == orig(this.outlinePaint.getClass().getName())
this.backgroundPaint == orig(this.backgroundPaint)
this.backgroundPaint.getClass().getName() == orig(this.backgroundPaint.getClass().getName())
this.backgroundImage == orig(this.backgroundImage)
this.backgroundImageAlignment == orig(this.backgroundImageAlignment)
this.backgroundImageAlpha == orig(this.backgroundImageAlpha)
this.foregroundAlpha == orig(this.foregroundAlpha)
this.backgroundAlpha == orig(this.backgroundAlpha)
this.drawingSupplier == orig(this.drawingSupplier)
this.drawingSupplier.getClass().getName() == orig(this.drawingSupplier.getClass().getName())
this.listenerList == orig(this.listenerList)
insets.unitType == orig(insets.unitType)
insets.unitType.name == orig(insets.unitType.name)
insets.unitType.name.toString == orig(insets.unitType.name.toString)
insets.top == orig(insets.top)
insets.left == orig(insets.left)
insets.bottom == orig(insets.bottom)
insets.right == orig(insets.right)
this.insets.top == 0.0
this.insets.left == 5.0
this.insets.bottom == 5.0
this.insets.right == 5.0
insets.unitType has only one value
insets.unitType.name has only one value
insets.unitType.name.toString == "UnitType.ABSOLUTE"
insets.top == 0.0
insets.left == 5.0
insets.bottom == 5.0
insets.right == 5.0
===========================================================================
org.jfree.chart.plot.junit.PiePlotTests$NullLegendLabelGenerator:::OBJECT
this has only one value
===========================================================================
org.jfree.chart.plot.junit.PiePlotTests$NullLegendLabelGenerator.NullLegendLabelGenerator():::EXIT
===========================================================================
org.jfree.chart.plot.junit.PiePlotTests$NullLegendLabelGenerator.generateSectionLabel(org.jfree.data.general.PieDataset, java.lang.Comparable):::ENTER
dataset has only one value
dataset.getClass().getName() == org.jfree.data.general.DefaultPieDataset.class
key.getClass().getName() == java.lang.String.class
===========================================================================
org.jfree.chart.plot.junit.PiePlotTests$NullLegendLabelGenerator.generateSectionLabel(org.jfree.data.general.PieDataset, java.lang.Comparable):::EXIT
return == null
===========================================================================
org.jfree.chart.plot.junit.PiePlotTests:::CLASS
===========================================================================
org.jfree.chart.plot.junit.PiePlotTests:::OBJECT
org.jfree.chart.plot.junit.PiePlotTests.class$org$jfree$chart$plot$junit$PiePlotTests has only one value
org.jfree.chart.plot.junit.PiePlotTests.class$org$jfree$chart$plot$junit$PiePlotTests != null
===========================================================================
org.jfree.chart.plot.junit.PiePlotTests.PiePlotTests(java.lang.String):::ENTER
===========================================================================
org.jfree.chart.plot.junit.PiePlotTests.PiePlotTests(java.lang.String):::EXIT
name.toString == orig(name.toString)
===========================================================================
org.jfree.chart.plot.junit.PiePlotTests.class$(java.lang.String):::ENTER
org.jfree.chart.plot.junit.PiePlotTests.class$org$jfree$chart$plot$junit$PiePlotTests == null
x0 has only one value
x0.toString == "org.jfree.chart.plot.junit.PiePlotTests"
===========================================================================
org.jfree.chart.plot.junit.PiePlotTests.class$(java.lang.String):::EXIT
org.jfree.chart.plot.junit.PiePlotTests.class$org$jfree$chart$plot$junit$PiePlotTests == orig(org.jfree.chart.plot.junit.PiePlotTests.class$org$jfree$chart$plot$junit$PiePlotTests)
x0.toString == orig(x0.toString)
org.jfree.chart.plot.junit.PiePlotTests.class$org$jfree$chart$plot$junit$PiePlotTests == null
x0.toString == "org.jfree.chart.plot.junit.PiePlotTests"
return has only one value
===========================================================================
org.jfree.chart.plot.junit.PiePlotTests.suite():::ENTER
org.jfree.chart.plot.junit.PiePlotTests.class$org$jfree$chart$plot$junit$PiePlotTests == null
===========================================================================
org.jfree.chart.plot.junit.PiePlotTests.suite():::EXIT
org.jfree.chart.plot.junit.PiePlotTests.class$org$jfree$chart$plot$junit$PiePlotTests has only one value
return has only one value
return.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.jfree.chart.plot.junit.PiePlotTests.testDrawWithNullLegendLabels():::ENTER
this has only one value
===========================================================================
org.jfree.chart.plot.junit.PiePlotTests.testDrawWithNullLegendLabels():::EXIT
org.jfree.chart.plot.junit.PiePlotTests.class$org$jfree$chart$plot$junit$PiePlotTests == orig(org.jfree.chart.plot.junit.PiePlotTests.class$org$jfree$chart$plot$junit$PiePlotTests)
===========================================================================
org.jfree.chart.resources.JFreeChartResources:::CLASS
org.jfree.chart.resources.JFreeChartResources.CONTENTS has only one value
org.jfree.chart.resources.JFreeChartResources.CONTENTS.getClass().getName() == java.lang.Object[][].class
org.jfree.chart.resources.JFreeChartResources.CONTENTS[] contains no nulls and has only one value, of length 4
size(org.jfree.chart.resources.JFreeChartResources.CONTENTS[]) == 4
===========================================================================
org.jfree.chart.resources.JFreeChartResources:::OBJECT
this has only one value
===========================================================================
org.jfree.chart.resources.JFreeChartResources.JFreeChartResources():::EXIT
===========================================================================
org.jfree.chart.resources.JFreeChartResources.getContents():::ENTER
===========================================================================
org.jfree.chart.resources.JFreeChartResources.getContents():::EXIT
org.jfree.chart.resources.JFreeChartResources.CONTENTS == return
org.jfree.chart.resources.JFreeChartResources.CONTENTS == orig(org.jfree.chart.resources.JFreeChartResources.CONTENTS)
org.jfree.chart.resources.JFreeChartResources.CONTENTS.getClass().getName() == return.getClass().getName()
org.jfree.chart.resources.JFreeChartResources.CONTENTS.getClass().getName() == orig(org.jfree.chart.resources.JFreeChartResources.CONTENTS.getClass().getName())
org.jfree.chart.resources.JFreeChartResources.CONTENTS[] == orig(org.jfree.chart.resources.JFreeChartResources.CONTENTS[])
return[] contains no nulls and has only one value, of length 4
size(return[]) == 4
===========================================================================
org.jfree.chart.text.G2TextMeasurer:::OBJECT
this.g2.getClass().getName() == sun.java2d.SunGraphics2D.class
===========================================================================
org.jfree.chart.text.G2TextMeasurer.G2TextMeasurer(java.awt.Graphics2D):::ENTER
g2.getClass().getName() == sun.java2d.SunGraphics2D.class
===========================================================================
org.jfree.chart.text.G2TextMeasurer.G2TextMeasurer(java.awt.Graphics2D):::EXIT
===========================================================================
org.jfree.chart.text.G2TextMeasurer.getStringWidth(java.lang.String, int, int):::ENTER
text.toString one of { "Pie Chart", "Test" }
start one of { 0, 4 }
end one of { 4, 9 }
===========================================================================
org.jfree.chart.text.G2TextMeasurer.getStringWidth(java.lang.String, int, int):::EXIT
this.g2 == orig(this.g2)
this.g2.getClass().getName() == orig(this.g2.getClass().getName())
text.toString == orig(text.toString)
text.toString one of { "Pie Chart", "Test" }
return one of { 37.0, 44.0, 56.0 }
===========================================================================
org.jfree.chart.text.TextAnchor:::CLASS
===========================================================================
org.jfree.chart.text.TextAnchor:::OBJECT
this.name != null
===========================================================================
org.jfree.chart.text.TextAnchor.TextAnchor(java.lang.String):::ENTER
name != null
===========================================================================
org.jfree.chart.text.TextAnchor.TextAnchor(java.lang.String):::EXIT
name.toString == orig(name.toString)
===========================================================================
org.jfree.chart.text.TextBlock:::CLASS
===========================================================================
org.jfree.chart.text.TextBlock:::OBJECT
this.lines != null
this.lines[] elements != null
this.lines[].getClass().getName() elements == org.jfree.chart.text.TextLine.class
this.lines[].getClass().getName() one of { [], [org.jfree.chart.text.TextLine] }
this.lines.getClass().getName() == java.util.ArrayList.class
this.lineAlignment has only one value
this.lineAlignment != null
org.jfree.chart.util.HorizontalAlignment.LEFT has only one value
org.jfree.chart.util.HorizontalAlignment.LEFT != null
org.jfree.chart.util.HorizontalAlignment.RIGHT has only one value
org.jfree.chart.util.HorizontalAlignment.RIGHT != null
org.jfree.chart.util.HorizontalAlignment.CENTER has only one value
org.jfree.chart.util.HorizontalAlignment.CENTER != null
org.jfree.chart.util.HorizontalAlignment.LEFT.name has only one value
org.jfree.chart.util.HorizontalAlignment.LEFT.name != null
org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString == "HorizontalAlignment.LEFT"
org.jfree.chart.util.HorizontalAlignment.RIGHT.name has only one value
org.jfree.chart.util.HorizontalAlignment.RIGHT.name != null
org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString == "HorizontalAlignment.RIGHT"
org.jfree.chart.util.HorizontalAlignment.CENTER.name has only one value
org.jfree.chart.util.HorizontalAlignment.CENTER.name != null
org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString == "HorizontalAlignment.CENTER"
this.lineAlignment.name has only one value
this.lineAlignment.name != null
this.lineAlignment.name.toString == "HorizontalAlignment.CENTER"
size(this.lines[]) one of { 0, 1 }
===========================================================================
org.jfree.chart.text.TextBlock.TextBlock():::EXIT
this.lines[] == []
this.lines[].getClass().getName() == []
===========================================================================
org.jfree.chart.text.TextBlock.addLine(java.lang.String, java.awt.Font, java.awt.Paint):::ENTER
this.lines[] == []
this.lines[].getClass().getName() == []
paint has only one value
paint.getClass().getName() == java.awt.Color.class
===========================================================================
org.jfree.chart.text.TextBlock.addLine(java.lang.String, java.awt.Font, java.awt.Paint):::EXIT
this.lines == orig(this.lines)
this.lines.getClass().getName() == orig(this.lines.getClass().getName())
this.lineAlignment == orig(this.lineAlignment)
org.jfree.chart.util.HorizontalAlignment.LEFT == orig(org.jfree.chart.util.HorizontalAlignment.LEFT)
org.jfree.chart.util.HorizontalAlignment.RIGHT == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT)
org.jfree.chart.util.HorizontalAlignment.CENTER == orig(org.jfree.chart.util.HorizontalAlignment.CENTER)
org.jfree.chart.util.HorizontalAlignment.LEFT.name == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name)
org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString)
org.jfree.chart.util.HorizontalAlignment.CENTER.name == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name)
org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString)
this.lineAlignment.name == orig(this.lineAlignment.name)
this.lineAlignment.name.toString == orig(this.lineAlignment.name.toString)
text.toString == orig(text.toString)
size(this.lines[])-1 == orig(size(this.lines[]))
this.lines[].getClass().getName() == [org.jfree.chart.text.TextLine]
size(this.lines[]) == 1
===========================================================================
org.jfree.chart.text.TextBlock.addLine(org.jfree.chart.text.TextLine):::ENTER
this.lines[] == []
this.lines[].getClass().getName() == []
line.fragments[].getClass().getName() == [org.jfree.chart.text.TextFragment]
line.fragments[].getClass().getName() elements == org.jfree.chart.text.TextFragment.class
line.fragments.getClass().getName() == java.util.ArrayList.class
size(line.fragments[]) == 1
===========================================================================
org.jfree.chart.text.TextBlock.addLine(org.jfree.chart.text.TextLine):::EXIT
this.lines == orig(this.lines)
this.lines.getClass().getName() == orig(this.lines.getClass().getName())
this.lineAlignment == orig(this.lineAlignment)
org.jfree.chart.util.HorizontalAlignment.LEFT == orig(org.jfree.chart.util.HorizontalAlignment.LEFT)
org.jfree.chart.util.HorizontalAlignment.RIGHT == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT)
org.jfree.chart.util.HorizontalAlignment.CENTER == orig(org.jfree.chart.util.HorizontalAlignment.CENTER)
org.jfree.chart.util.HorizontalAlignment.LEFT.name == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name)
org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString)
org.jfree.chart.util.HorizontalAlignment.CENTER.name == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name)
org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString)
this.lineAlignment.name == orig(this.lineAlignment.name)
this.lineAlignment.name.toString == orig(this.lineAlignment.name.toString)
line.fragments == orig(line.fragments)
line.fragments[] == orig(line.fragments[])
line.fragments.getClass().getName() == orig(line.fragments.getClass().getName())
size(this.lines[])-1 == orig(size(this.lines[]))
this.lines[].getClass().getName() == [org.jfree.chart.text.TextLine]
line.fragments[].getClass().getName() == [org.jfree.chart.text.TextFragment]
line.fragments[].getClass().getName() elements == org.jfree.chart.text.TextFragment.class
line.fragments.getClass().getName() == java.util.ArrayList.class
size(this.lines[]) == 1
size(line.fragments[]) == 1
===========================================================================
org.jfree.chart.text.TextBlock.calculateDimensions(java.awt.Graphics2D):::ENTER
this.lines[].getClass().getName() == [org.jfree.chart.text.TextLine]
g2 != null
g2.getClass().getName() == sun.java2d.SunGraphics2D.class
size(this.lines[]) == 1
===========================================================================
org.jfree.chart.text.TextBlock.calculateDimensions(java.awt.Graphics2D):::EXIT
this.lines == orig(this.lines)
this.lines[] == orig(this.lines[])
this.lines.getClass().getName() == orig(this.lines.getClass().getName())
this.lineAlignment == orig(this.lineAlignment)
org.jfree.chart.util.HorizontalAlignment.LEFT == orig(org.jfree.chart.util.HorizontalAlignment.LEFT)
org.jfree.chart.util.HorizontalAlignment.RIGHT == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT)
org.jfree.chart.util.HorizontalAlignment.CENTER == orig(org.jfree.chart.util.HorizontalAlignment.CENTER)
org.jfree.chart.util.HorizontalAlignment.LEFT.name == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name)
org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString)
org.jfree.chart.util.HorizontalAlignment.CENTER.name == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name)
org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString)
this.lineAlignment.name == orig(this.lineAlignment.name)
this.lineAlignment.name.toString == orig(this.lineAlignment.name.toString)
this.lines[].getClass().getName() == [org.jfree.chart.text.TextLine]
return != null
return.width one of { 44.0, 59.0, 93.0 }
return.height one of { 13.96875, 20.953125 }
size(this.lines[]) == 1
===========================================================================
org.jfree.chart.text.TextBlock.calculateOffsets(org.jfree.chart.text.TextBlockAnchor, double, double):::ENTER
this.lines[].getClass().getName() == [org.jfree.chart.text.TextLine]
org.jfree.chart.text.TextBlockAnchor.TOP_LEFT has only one value
org.jfree.chart.text.TextBlockAnchor.TOP_CENTER has only one value
org.jfree.chart.text.TextBlockAnchor.TOP_RIGHT has only one value
org.jfree.chart.text.TextBlockAnchor.CENTER_LEFT has only one value
org.jfree.chart.text.TextBlockAnchor.CENTER has only one value
org.jfree.chart.text.TextBlockAnchor.CENTER_RIGHT has only one value
org.jfree.chart.text.TextBlockAnchor.BOTTOM_LEFT has only one value
org.jfree.chart.text.TextBlockAnchor.BOTTOM_CENTER has only one value
org.jfree.chart.text.TextBlockAnchor.BOTTOM_RIGHT has only one value
org.jfree.chart.text.TextBlockAnchor.TOP_LEFT.name has only one value
org.jfree.chart.text.TextBlockAnchor.TOP_LEFT.name.toString == "TextBlockAnchor.TOP_LEFT"
org.jfree.chart.text.TextBlockAnchor.TOP_CENTER.name has only one value
org.jfree.chart.text.TextBlockAnchor.TOP_CENTER.name.toString == "TextBlockAnchor.TOP_CENTER"
org.jfree.chart.text.TextBlockAnchor.TOP_RIGHT.name has only one value
org.jfree.chart.text.TextBlockAnchor.TOP_RIGHT.name.toString == "TextBlockAnchor.TOP_RIGHT"
org.jfree.chart.text.TextBlockAnchor.CENTER_LEFT.name has only one value
org.jfree.chart.text.TextBlockAnchor.CENTER_LEFT.name.toString == "TextBlockAnchor.CENTER_LEFT"
org.jfree.chart.text.TextBlockAnchor.CENTER.name has only one value
org.jfree.chart.text.TextBlockAnchor.CENTER.name.toString == "TextBlockAnchor.CENTER"
org.jfree.chart.text.TextBlockAnchor.CENTER_RIGHT.name has only one value
org.jfree.chart.text.TextBlockAnchor.CENTER_RIGHT.name.toString == "TextBlockAnchor.CENTER_RIGHT"
org.jfree.chart.text.TextBlockAnchor.BOTTOM_LEFT.name has only one value
org.jfree.chart.text.TextBlockAnchor.BOTTOM_LEFT.name.toString == "TextBlockAnchor.BOTTOM_LEFT"
org.jfree.chart.text.TextBlockAnchor.BOTTOM_CENTER.name has only one value
org.jfree.chart.text.TextBlockAnchor.BOTTOM_CENTER.name.toString == "TextBlockAnchor.BOTTOM_CENTER"
org.jfree.chart.text.TextBlockAnchor.BOTTOM_RIGHT.name has only one value
org.jfree.chart.text.TextBlockAnchor.BOTTOM_RIGHT.name.toString == "TextBlockAnchor.BOTTOM_RIGHT"
anchor.name.toString one of { "TextBlockAnchor.TOP_CENTER", "TextBlockAnchor.TOP_LEFT" }
width one of { 44.0, 59.0, 93.0 }
height one of { 13.96875, 20.953125 }
size(this.lines[]) == 1
===========================================================================
org.jfree.chart.text.TextBlock.calculateOffsets(org.jfree.chart.text.TextBlockAnchor, double, double):::EXIT
this.lines == orig(this.lines)
this.lines[] == orig(this.lines[])
this.lines.getClass().getName() == orig(this.lines.getClass().getName())
this.lineAlignment == orig(this.lineAlignment)
org.jfree.chart.util.HorizontalAlignment.LEFT == orig(org.jfree.chart.util.HorizontalAlignment.LEFT)
org.jfree.chart.util.HorizontalAlignment.RIGHT == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT)
org.jfree.chart.util.HorizontalAlignment.CENTER == orig(org.jfree.chart.util.HorizontalAlignment.CENTER)
org.jfree.chart.util.HorizontalAlignment.LEFT.name == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name)
org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString)
org.jfree.chart.util.HorizontalAlignment.CENTER.name == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name)
org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString)
this.lineAlignment.name == orig(this.lineAlignment.name)
this.lineAlignment.name.toString == orig(this.lineAlignment.name.toString)
org.jfree.chart.text.TextBlockAnchor.TOP_LEFT == orig(org.jfree.chart.text.TextBlockAnchor.TOP_LEFT)
org.jfree.chart.text.TextBlockAnchor.TOP_CENTER == orig(org.jfree.chart.text.TextBlockAnchor.TOP_CENTER)
org.jfree.chart.text.TextBlockAnchor.TOP_RIGHT == orig(org.jfree.chart.text.TextBlockAnchor.TOP_RIGHT)
org.jfree.chart.text.TextBlockAnchor.CENTER_LEFT == orig(org.jfree.chart.text.TextBlockAnchor.CENTER_LEFT)
org.jfree.chart.text.TextBlockAnchor.CENTER == orig(org.jfree.chart.text.TextBlockAnchor.CENTER)
org.jfree.chart.text.TextBlockAnchor.CENTER_RIGHT == orig(org.jfree.chart.text.TextBlockAnchor.CENTER_RIGHT)
org.jfree.chart.text.TextBlockAnchor.BOTTOM_LEFT == orig(org.jfree.chart.text.TextBlockAnchor.BOTTOM_LEFT)
org.jfree.chart.text.TextBlockAnchor.BOTTOM_CENTER == orig(org.jfree.chart.text.TextBlockAnchor.BOTTOM_CENTER)
org.jfree.chart.text.TextBlockAnchor.BOTTOM_RIGHT == orig(org.jfree.chart.text.TextBlockAnchor.BOTTOM_RIGHT)
org.jfree.chart.text.TextBlockAnchor.TOP_LEFT.name == orig(org.jfree.chart.text.TextBlockAnchor.TOP_LEFT.name)
org.jfree.chart.text.TextBlockAnchor.TOP_LEFT.name.toString == orig(org.jfree.chart.text.TextBlockAnchor.TOP_LEFT.name.toString)
org.jfree.chart.text.TextBlockAnchor.TOP_CENTER.name == orig(org.jfree.chart.text.TextBlockAnchor.TOP_CENTER.name)
org.jfree.chart.text.TextBlockAnchor.TOP_CENTER.name.toString == orig(org.jfree.chart.text.TextBlockAnchor.TOP_CENTER.name.toString)
org.jfree.chart.text.TextBlockAnchor.TOP_RIGHT.name == orig(org.jfree.chart.text.TextBlockAnchor.TOP_RIGHT.name)
org.jfree.chart.text.TextBlockAnchor.TOP_RIGHT.name.toString == orig(org.jfree.chart.text.TextBlockAnchor.TOP_RIGHT.name.toString)
org.jfree.chart.text.TextBlockAnchor.CENTER_LEFT.name == orig(org.jfree.chart.text.TextBlockAnchor.CENTER_LEFT.name)
org.jfree.chart.text.TextBlockAnchor.CENTER_LEFT.name.toString == orig(org.jfree.chart.text.TextBlockAnchor.CENTER_LEFT.name.toString)
org.jfree.chart.text.TextBlockAnchor.CENTER.name == orig(org.jfree.chart.text.TextBlockAnchor.CENTER.name)
org.jfree.chart.text.TextBlockAnchor.CENTER.name.toString == orig(org.jfree.chart.text.TextBlockAnchor.CENTER.name.toString)
org.jfree.chart.text.TextBlockAnchor.CENTER_RIGHT.name == orig(org.jfree.chart.text.TextBlockAnchor.CENTER_RIGHT.name)
org.jfree.chart.text.TextBlockAnchor.CENTER_RIGHT.name.toString == orig(org.jfree.chart.text.TextBlockAnchor.CENTER_RIGHT.name.toString)
org.jfree.chart.text.TextBlockAnchor.BOTTOM_LEFT.name == orig(org.jfree.chart.text.TextBlockAnchor.BOTTOM_LEFT.name)
org.jfree.chart.text.TextBlockAnchor.BOTTOM_LEFT.name.toString == orig(org.jfree.chart.text.TextBlockAnchor.BOTTOM_LEFT.name.toString)
org.jfree.chart.text.TextBlockAnchor.BOTTOM_CENTER.name == orig(org.jfree.chart.text.TextBlockAnchor.BOTTOM_CENTER.name)
org.jfree.chart.text.TextBlockAnchor.BOTTOM_CENTER.name.toString == orig(org.jfree.chart.text.TextBlockAnchor.BOTTOM_CENTER.name.toString)
org.jfree.chart.text.TextBlockAnchor.BOTTOM_RIGHT.name == orig(org.jfree.chart.text.TextBlockAnchor.BOTTOM_RIGHT.name)
org.jfree.chart.text.TextBlockAnchor.BOTTOM_RIGHT.name.toString == orig(org.jfree.chart.text.TextBlockAnchor.BOTTOM_RIGHT.name.toString)
anchor.name == orig(anchor.name)
anchor.name.toString == orig(anchor.name.toString)
this.lines[].getClass().getName() == [org.jfree.chart.text.TextLine]
org.jfree.chart.text.TextBlockAnchor.TOP_LEFT has only one value
org.jfree.chart.text.TextBlockAnchor.TOP_CENTER has only one value
org.jfree.chart.text.TextBlockAnchor.TOP_RIGHT has only one value
org.jfree.chart.text.TextBlockAnchor.CENTER_LEFT has only one value
org.jfree.chart.text.TextBlockAnchor.CENTER has only one value
org.jfree.chart.text.TextBlockAnchor.CENTER_RIGHT has only one value
org.jfree.chart.text.TextBlockAnchor.BOTTOM_LEFT has only one value
org.jfree.chart.text.TextBlockAnchor.BOTTOM_CENTER has only one value
org.jfree.chart.text.TextBlockAnchor.BOTTOM_RIGHT has only one value
org.jfree.chart.text.TextBlockAnchor.TOP_LEFT.name has only one value
org.jfree.chart.text.TextBlockAnchor.TOP_LEFT.name.toString == "TextBlockAnchor.TOP_LEFT"
org.jfree.chart.text.TextBlockAnchor.TOP_CENTER.name has only one value
org.jfree.chart.text.TextBlockAnchor.TOP_CENTER.name.toString == "TextBlockAnchor.TOP_CENTER"
org.jfree.chart.text.TextBlockAnchor.TOP_RIGHT.name has only one value
org.jfree.chart.text.TextBlockAnchor.TOP_RIGHT.name.toString == "TextBlockAnchor.TOP_RIGHT"
org.jfree.chart.text.TextBlockAnchor.CENTER_LEFT.name has only one value
org.jfree.chart.text.TextBlockAnchor.CENTER_LEFT.name.toString == "TextBlockAnchor.CENTER_LEFT"
org.jfree.chart.text.TextBlockAnchor.CENTER.name has only one value
org.jfree.chart.text.TextBlockAnchor.CENTER.name.toString == "TextBlockAnchor.CENTER"
org.jfree.chart.text.TextBlockAnchor.CENTER_RIGHT.name has only one value
org.jfree.chart.text.TextBlockAnchor.CENTER_RIGHT.name.toString == "TextBlockAnchor.CENTER_RIGHT"
org.jfree.chart.text.TextBlockAnchor.BOTTOM_LEFT.name has only one value
org.jfree.chart.text.TextBlockAnchor.BOTTOM_LEFT.name.toString == "TextBlockAnchor.BOTTOM_LEFT"
org.jfree.chart.text.TextBlockAnchor.BOTTOM_CENTER.name has only one value
org.jfree.chart.text.TextBlockAnchor.BOTTOM_CENTER.name.toString == "TextBlockAnchor.BOTTOM_CENTER"
org.jfree.chart.text.TextBlockAnchor.BOTTOM_RIGHT.name has only one value
org.jfree.chart.text.TextBlockAnchor.BOTTOM_RIGHT.name.toString == "TextBlockAnchor.BOTTOM_RIGHT"
anchor.name.toString one of { "TextBlockAnchor.TOP_CENTER", "TextBlockAnchor.TOP_LEFT" }
return[] elements one of { -46.5, -22.0, 0.0 }
return[] one of { [-46.5, 0.0], [-22.0, 0.0], [0.0, 0.0] }
size(this.lines[]) == 1
size(return[]) == 2
===========================================================================
org.jfree.chart.text.TextBlock.draw(java.awt.Graphics2D, float, float, org.jfree.chart.text.TextBlockAnchor):::ENTER
this.lines[].getClass().getName() == [org.jfree.chart.text.TextLine]
g2.getClass().getName() == sun.java2d.SunGraphics2D.class
x one of { 17.0, 94.0, 100.0 }
y one of { 1.0, 61.0625, 81.03125 }
org.jfree.chart.text.TextBlockAnchor.TOP_LEFT has only one value
org.jfree.chart.text.TextBlockAnchor.TOP_CENTER has only one value
org.jfree.chart.text.TextBlockAnchor.TOP_RIGHT has only one value
org.jfree.chart.text.TextBlockAnchor.CENTER_LEFT has only one value
org.jfree.chart.text.TextBlockAnchor.CENTER has only one value
org.jfree.chart.text.TextBlockAnchor.CENTER_RIGHT has only one value
org.jfree.chart.text.TextBlockAnchor.BOTTOM_LEFT has only one value
org.jfree.chart.text.TextBlockAnchor.BOTTOM_CENTER has only one value
org.jfree.chart.text.TextBlockAnchor.BOTTOM_RIGHT has only one value
org.jfree.chart.text.TextBlockAnchor.TOP_LEFT.name has only one value
org.jfree.chart.text.TextBlockAnchor.TOP_LEFT.name.toString == "TextBlockAnchor.TOP_LEFT"
org.jfree.chart.text.TextBlockAnchor.TOP_CENTER.name has only one value
org.jfree.chart.text.TextBlockAnchor.TOP_CENTER.name.toString == "TextBlockAnchor.TOP_CENTER"
org.jfree.chart.text.TextBlockAnchor.TOP_RIGHT.name has only one value
org.jfree.chart.text.TextBlockAnchor.TOP_RIGHT.name.toString == "TextBlockAnchor.TOP_RIGHT"
org.jfree.chart.text.TextBlockAnchor.CENTER_LEFT.name has only one value
org.jfree.chart.text.TextBlockAnchor.CENTER_LEFT.name.toString == "TextBlockAnchor.CENTER_LEFT"
org.jfree.chart.text.TextBlockAnchor.CENTER.name has only one value
org.jfree.chart.text.TextBlockAnchor.CENTER.name.toString == "TextBlockAnchor.CENTER"
org.jfree.chart.text.TextBlockAnchor.CENTER_RIGHT.name has only one value
org.jfree.chart.text.TextBlockAnchor.CENTER_RIGHT.name.toString == "TextBlockAnchor.CENTER_RIGHT"
org.jfree.chart.text.TextBlockAnchor.BOTTOM_LEFT.name has only one value
org.jfree.chart.text.TextBlockAnchor.BOTTOM_LEFT.name.toString == "TextBlockAnchor.BOTTOM_LEFT"
org.jfree.chart.text.TextBlockAnchor.BOTTOM_CENTER.name has only one value
org.jfree.chart.text.TextBlockAnchor.BOTTOM_CENTER.name.toString == "TextBlockAnchor.BOTTOM_CENTER"
org.jfree.chart.text.TextBlockAnchor.BOTTOM_RIGHT.name has only one value
org.jfree.chart.text.TextBlockAnchor.BOTTOM_RIGHT.name.toString == "TextBlockAnchor.BOTTOM_RIGHT"
anchor.name.toString one of { "TextBlockAnchor.TOP_CENTER", "TextBlockAnchor.TOP_LEFT" }
size(this.lines[]) == 1
===========================================================================
org.jfree.chart.text.TextBlock.draw(java.awt.Graphics2D, float, float, org.jfree.chart.text.TextBlockAnchor):::EXIT
this.lines == orig(this.lines)
this.lines[] == orig(this.lines[])
this.lines.getClass().getName() == orig(this.lines.getClass().getName())
this.lineAlignment == orig(this.lineAlignment)
org.jfree.chart.util.HorizontalAlignment.LEFT == orig(org.jfree.chart.util.HorizontalAlignment.LEFT)
org.jfree.chart.util.HorizontalAlignment.RIGHT == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT)
org.jfree.chart.util.HorizontalAlignment.CENTER == orig(org.jfree.chart.util.HorizontalAlignment.CENTER)
org.jfree.chart.util.HorizontalAlignment.LEFT.name == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name)
org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString)
org.jfree.chart.util.HorizontalAlignment.CENTER.name == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name)
org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString)
this.lineAlignment.name == orig(this.lineAlignment.name)
this.lineAlignment.name.toString == orig(this.lineAlignment.name.toString)
org.jfree.chart.text.TextBlockAnchor.TOP_LEFT == orig(org.jfree.chart.text.TextBlockAnchor.TOP_LEFT)
org.jfree.chart.text.TextBlockAnchor.TOP_CENTER == orig(org.jfree.chart.text.TextBlockAnchor.TOP_CENTER)
org.jfree.chart.text.TextBlockAnchor.TOP_RIGHT == orig(org.jfree.chart.text.TextBlockAnchor.TOP_RIGHT)
org.jfree.chart.text.TextBlockAnchor.CENTER_LEFT == orig(org.jfree.chart.text.TextBlockAnchor.CENTER_LEFT)
org.jfree.chart.text.TextBlockAnchor.CENTER == orig(org.jfree.chart.text.TextBlockAnchor.CENTER)
org.jfree.chart.text.TextBlockAnchor.CENTER_RIGHT == orig(org.jfree.chart.text.TextBlockAnchor.CENTER_RIGHT)
org.jfree.chart.text.TextBlockAnchor.BOTTOM_LEFT == orig(org.jfree.chart.text.TextBlockAnchor.BOTTOM_LEFT)
org.jfree.chart.text.TextBlockAnchor.BOTTOM_CENTER == orig(org.jfree.chart.text.TextBlockAnchor.BOTTOM_CENTER)
org.jfree.chart.text.TextBlockAnchor.BOTTOM_RIGHT == orig(org.jfree.chart.text.TextBlockAnchor.BOTTOM_RIGHT)
org.jfree.chart.text.TextBlockAnchor.TOP_LEFT.name == orig(org.jfree.chart.text.TextBlockAnchor.TOP_LEFT.name)
org.jfree.chart.text.TextBlockAnchor.TOP_LEFT.name.toString == orig(org.jfree.chart.text.TextBlockAnchor.TOP_LEFT.name.toString)
org.jfree.chart.text.TextBlockAnchor.TOP_CENTER.name == orig(org.jfree.chart.text.TextBlockAnchor.TOP_CENTER.name)
org.jfree.chart.text.TextBlockAnchor.TOP_CENTER.name.toString == orig(org.jfree.chart.text.TextBlockAnchor.TOP_CENTER.name.toString)
org.jfree.chart.text.TextBlockAnchor.TOP_RIGHT.name == orig(org.jfree.chart.text.TextBlockAnchor.TOP_RIGHT.name)
org.jfree.chart.text.TextBlockAnchor.TOP_RIGHT.name.toString == orig(org.jfree.chart.text.TextBlockAnchor.TOP_RIGHT.name.toString)
org.jfree.chart.text.TextBlockAnchor.CENTER_LEFT.name == orig(org.jfree.chart.text.TextBlockAnchor.CENTER_LEFT.name)
org.jfree.chart.text.TextBlockAnchor.CENTER_LEFT.name.toString == orig(org.jfree.chart.text.TextBlockAnchor.CENTER_LEFT.name.toString)
org.jfree.chart.text.TextBlockAnchor.CENTER.name == orig(org.jfree.chart.text.TextBlockAnchor.CENTER.name)
org.jfree.chart.text.TextBlockAnchor.CENTER.name.toString == orig(org.jfree.chart.text.TextBlockAnchor.CENTER.name.toString)
org.jfree.chart.text.TextBlockAnchor.CENTER_RIGHT.name == orig(org.jfree.chart.text.TextBlockAnchor.CENTER_RIGHT.name)
org.jfree.chart.text.TextBlockAnchor.CENTER_RIGHT.name.toString == orig(org.jfree.chart.text.TextBlockAnchor.CENTER_RIGHT.name.toString)
org.jfree.chart.text.TextBlockAnchor.BOTTOM_LEFT.name == orig(org.jfree.chart.text.TextBlockAnchor.BOTTOM_LEFT.name)
org.jfree.chart.text.TextBlockAnchor.BOTTOM_LEFT.name.toString == orig(org.jfree.chart.text.TextBlockAnchor.BOTTOM_LEFT.name.toString)
org.jfree.chart.text.TextBlockAnchor.BOTTOM_CENTER.name == orig(org.jfree.chart.text.TextBlockAnchor.BOTTOM_CENTER.name)
org.jfree.chart.text.TextBlockAnchor.BOTTOM_CENTER.name.toString == orig(org.jfree.chart.text.TextBlockAnchor.BOTTOM_CENTER.name.toString)
org.jfree.chart.text.TextBlockAnchor.BOTTOM_RIGHT.name == orig(org.jfree.chart.text.TextBlockAnchor.BOTTOM_RIGHT.name)
org.jfree.chart.text.TextBlockAnchor.BOTTOM_RIGHT.name.toString == orig(org.jfree.chart.text.TextBlockAnchor.BOTTOM_RIGHT.name.toString)
anchor.name == orig(anchor.name)
anchor.name.toString == orig(anchor.name.toString)
this.lines[].getClass().getName() == [org.jfree.chart.text.TextLine]
org.jfree.chart.text.TextBlockAnchor.TOP_LEFT has only one value
org.jfree.chart.text.TextBlockAnchor.TOP_CENTER has only one value
org.jfree.chart.text.TextBlockAnchor.TOP_RIGHT has only one value
org.jfree.chart.text.TextBlockAnchor.CENTER_LEFT has only one value
org.jfree.chart.text.TextBlockAnchor.CENTER has only one value
org.jfree.chart.text.TextBlockAnchor.CENTER_RIGHT has only one value
org.jfree.chart.text.TextBlockAnchor.BOTTOM_LEFT has only one value
org.jfree.chart.text.TextBlockAnchor.BOTTOM_CENTER has only one value
org.jfree.chart.text.TextBlockAnchor.BOTTOM_RIGHT has only one value
org.jfree.chart.text.TextBlockAnchor.TOP_LEFT.name has only one value
org.jfree.chart.text.TextBlockAnchor.TOP_LEFT.name.toString == "TextBlockAnchor.TOP_LEFT"
org.jfree.chart.text.TextBlockAnchor.TOP_CENTER.name has only one value
org.jfree.chart.text.TextBlockAnchor.TOP_CENTER.name.toString == "TextBlockAnchor.TOP_CENTER"
org.jfree.chart.text.TextBlockAnchor.TOP_RIGHT.name has only one value
org.jfree.chart.text.TextBlockAnchor.TOP_RIGHT.name.toString == "TextBlockAnchor.TOP_RIGHT"
org.jfree.chart.text.TextBlockAnchor.CENTER_LEFT.name has only one value
org.jfree.chart.text.TextBlockAnchor.CENTER_LEFT.name.toString == "TextBlockAnchor.CENTER_LEFT"
org.jfree.chart.text.TextBlockAnchor.CENTER.name has only one value
org.jfree.chart.text.TextBlockAnchor.CENTER.name.toString == "TextBlockAnchor.CENTER"
org.jfree.chart.text.TextBlockAnchor.CENTER_RIGHT.name has only one value
org.jfree.chart.text.TextBlockAnchor.CENTER_RIGHT.name.toString == "TextBlockAnchor.CENTER_RIGHT"
org.jfree.chart.text.TextBlockAnchor.BOTTOM_LEFT.name has only one value
org.jfree.chart.text.TextBlockAnchor.BOTTOM_LEFT.name.toString == "TextBlockAnchor.BOTTOM_LEFT"
org.jfree.chart.text.TextBlockAnchor.BOTTOM_CENTER.name has only one value
org.jfree.chart.text.TextBlockAnchor.BOTTOM_CENTER.name.toString == "TextBlockAnchor.BOTTOM_CENTER"
org.jfree.chart.text.TextBlockAnchor.BOTTOM_RIGHT.name has only one value
org.jfree.chart.text.TextBlockAnchor.BOTTOM_RIGHT.name.toString == "TextBlockAnchor.BOTTOM_RIGHT"
anchor.name.toString one of { "TextBlockAnchor.TOP_CENTER", "TextBlockAnchor.TOP_LEFT" }
size(this.lines[]) == 1
===========================================================================
org.jfree.chart.text.TextBlock.draw(java.awt.Graphics2D, float, float, org.jfree.chart.text.TextBlockAnchor, float, float, double):::ENTER
this.lines[].getClass().getName() == [org.jfree.chart.text.TextLine]
g2.getClass().getName() == sun.java2d.SunGraphics2D.class
anchorX one of { 17.0, 94.0, 100.0 }
anchorY one of { 1.0, 61.0625, 81.03125 }
org.jfree.chart.text.TextBlockAnchor.TOP_LEFT has only one value
org.jfree.chart.text.TextBlockAnchor.TOP_CENTER has only one value
org.jfree.chart.text.TextBlockAnchor.TOP_RIGHT has only one value
org.jfree.chart.text.TextBlockAnchor.CENTER_LEFT has only one value
org.jfree.chart.text.TextBlockAnchor.CENTER has only one value
org.jfree.chart.text.TextBlockAnchor.CENTER_RIGHT has only one value
org.jfree.chart.text.TextBlockAnchor.BOTTOM_LEFT has only one value
org.jfree.chart.text.TextBlockAnchor.BOTTOM_CENTER has only one value
org.jfree.chart.text.TextBlockAnchor.BOTTOM_RIGHT has only one value
org.jfree.chart.text.TextBlockAnchor.TOP_LEFT.name has only one value
org.jfree.chart.text.TextBlockAnchor.TOP_LEFT.name.toString == "TextBlockAnchor.TOP_LEFT"
org.jfree.chart.text.TextBlockAnchor.TOP_CENTER.name has only one value
org.jfree.chart.text.TextBlockAnchor.TOP_CENTER.name.toString == "TextBlockAnchor.TOP_CENTER"
org.jfree.chart.text.TextBlockAnchor.TOP_RIGHT.name has only one value
org.jfree.chart.text.TextBlockAnchor.TOP_RIGHT.name.toString == "TextBlockAnchor.TOP_RIGHT"
org.jfree.chart.text.TextBlockAnchor.CENTER_LEFT.name has only one value
org.jfree.chart.text.TextBlockAnchor.CENTER_LEFT.name.toString == "TextBlockAnchor.CENTER_LEFT"
org.jfree.chart.text.TextBlockAnchor.CENTER.name has only one value
org.jfree.chart.text.TextBlockAnchor.CENTER.name.toString == "TextBlockAnchor.CENTER"
org.jfree.chart.text.TextBlockAnchor.CENTER_RIGHT.name has only one value
org.jfree.chart.text.TextBlockAnchor.CENTER_RIGHT.name.toString == "TextBlockAnchor.CENTER_RIGHT"
org.jfree.chart.text.TextBlockAnchor.BOTTOM_LEFT.name has only one value
org.jfree.chart.text.TextBlockAnchor.BOTTOM_LEFT.name.toString == "TextBlockAnchor.BOTTOM_LEFT"
org.jfree.chart.text.TextBlockAnchor.BOTTOM_CENTER.name has only one value
org.jfree.chart.text.TextBlockAnchor.BOTTOM_CENTER.name.toString == "TextBlockAnchor.BOTTOM_CENTER"
org.jfree.chart.text.TextBlockAnchor.BOTTOM_RIGHT.name has only one value
org.jfree.chart.text.TextBlockAnchor.BOTTOM_RIGHT.name.toString == "TextBlockAnchor.BOTTOM_RIGHT"
anchor.name.toString one of { "TextBlockAnchor.TOP_CENTER", "TextBlockAnchor.TOP_LEFT" }
rotateX == 0.0
rotateY == 0.0
angle == 0.0
size(this.lines[]) == 1
===========================================================================
org.jfree.chart.text.TextBlock.draw(java.awt.Graphics2D, float, float, org.jfree.chart.text.TextBlockAnchor, float, float, double):::EXIT
this.lines == orig(this.lines)
this.lines[] == orig(this.lines[])
this.lines.getClass().getName() == orig(this.lines.getClass().getName())
this.lineAlignment == orig(this.lineAlignment)
org.jfree.chart.util.HorizontalAlignment.LEFT == orig(org.jfree.chart.util.HorizontalAlignment.LEFT)
org.jfree.chart.util.HorizontalAlignment.RIGHT == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT)
org.jfree.chart.util.HorizontalAlignment.CENTER == orig(org.jfree.chart.util.HorizontalAlignment.CENTER)
org.jfree.chart.util.HorizontalAlignment.LEFT.name == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name)
org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString)
org.jfree.chart.util.HorizontalAlignment.CENTER.name == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name)
org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString)
this.lineAlignment.name == orig(this.lineAlignment.name)
this.lineAlignment.name.toString == orig(this.lineAlignment.name.toString)
org.jfree.chart.text.TextBlockAnchor.TOP_LEFT == orig(org.jfree.chart.text.TextBlockAnchor.TOP_LEFT)
org.jfree.chart.text.TextBlockAnchor.TOP_CENTER == orig(org.jfree.chart.text.TextBlockAnchor.TOP_CENTER)
org.jfree.chart.text.TextBlockAnchor.TOP_RIGHT == orig(org.jfree.chart.text.TextBlockAnchor.TOP_RIGHT)
org.jfree.chart.text.TextBlockAnchor.CENTER_LEFT == orig(org.jfree.chart.text.TextBlockAnchor.CENTER_LEFT)
org.jfree.chart.text.TextBlockAnchor.CENTER == orig(org.jfree.chart.text.TextBlockAnchor.CENTER)
org.jfree.chart.text.TextBlockAnchor.CENTER_RIGHT == orig(org.jfree.chart.text.TextBlockAnchor.CENTER_RIGHT)
org.jfree.chart.text.TextBlockAnchor.BOTTOM_LEFT == orig(org.jfree.chart.text.TextBlockAnchor.BOTTOM_LEFT)
org.jfree.chart.text.TextBlockAnchor.BOTTOM_CENTER == orig(org.jfree.chart.text.TextBlockAnchor.BOTTOM_CENTER)
org.jfree.chart.text.TextBlockAnchor.BOTTOM_RIGHT == orig(org.jfree.chart.text.TextBlockAnchor.BOTTOM_RIGHT)
org.jfree.chart.text.TextBlockAnchor.TOP_LEFT.name == orig(org.jfree.chart.text.TextBlockAnchor.TOP_LEFT.name)
org.jfree.chart.text.TextBlockAnchor.TOP_LEFT.name.toString == orig(org.jfree.chart.text.TextBlockAnchor.TOP_LEFT.name.toString)
org.jfree.chart.text.TextBlockAnchor.TOP_CENTER.name == orig(org.jfree.chart.text.TextBlockAnchor.TOP_CENTER.name)
org.jfree.chart.text.TextBlockAnchor.TOP_CENTER.name.toString == orig(org.jfree.chart.text.TextBlockAnchor.TOP_CENTER.name.toString)
org.jfree.chart.text.TextBlockAnchor.TOP_RIGHT.name == orig(org.jfree.chart.text.TextBlockAnchor.TOP_RIGHT.name)
org.jfree.chart.text.TextBlockAnchor.TOP_RIGHT.name.toString == orig(org.jfree.chart.text.TextBlockAnchor.TOP_RIGHT.name.toString)
org.jfree.chart.text.TextBlockAnchor.CENTER_LEFT.name == orig(org.jfree.chart.text.TextBlockAnchor.CENTER_LEFT.name)
org.jfree.chart.text.TextBlockAnchor.CENTER_LEFT.name.toString == orig(org.jfree.chart.text.TextBlockAnchor.CENTER_LEFT.name.toString)
org.jfree.chart.text.TextBlockAnchor.CENTER.name == orig(org.jfree.chart.text.TextBlockAnchor.CENTER.name)
org.jfree.chart.text.TextBlockAnchor.CENTER.name.toString == orig(org.jfree.chart.text.TextBlockAnchor.CENTER.name.toString)
org.jfree.chart.text.TextBlockAnchor.CENTER_RIGHT.name == orig(org.jfree.chart.text.TextBlockAnchor.CENTER_RIGHT.name)
org.jfree.chart.text.TextBlockAnchor.CENTER_RIGHT.name.toString == orig(org.jfree.chart.text.TextBlockAnchor.CENTER_RIGHT.name.toString)
org.jfree.chart.text.TextBlockAnchor.BOTTOM_LEFT.name == orig(org.jfree.chart.text.TextBlockAnchor.BOTTOM_LEFT.name)
org.jfree.chart.text.TextBlockAnchor.BOTTOM_LEFT.name.toString == orig(org.jfree.chart.text.TextBlockAnchor.BOTTOM_LEFT.name.toString)
org.jfree.chart.text.TextBlockAnchor.BOTTOM_CENTER.name == orig(org.jfree.chart.text.TextBlockAnchor.BOTTOM_CENTER.name)
org.jfree.chart.text.TextBlockAnchor.BOTTOM_CENTER.name.toString == orig(org.jfree.chart.text.TextBlockAnchor.BOTTOM_CENTER.name.toString)
org.jfree.chart.text.TextBlockAnchor.BOTTOM_RIGHT.name == orig(org.jfree.chart.text.TextBlockAnchor.BOTTOM_RIGHT.name)
org.jfree.chart.text.TextBlockAnchor.BOTTOM_RIGHT.name.toString == orig(org.jfree.chart.text.TextBlockAnchor.BOTTOM_RIGHT.name.toString)
anchor.name == orig(anchor.name)
anchor.name.toString == orig(anchor.name.toString)
this.lines[].getClass().getName() == [org.jfree.chart.text.TextLine]
org.jfree.chart.text.TextBlockAnchor.TOP_LEFT has only one value
org.jfree.chart.text.TextBlockAnchor.TOP_CENTER has only one value
org.jfree.chart.text.TextBlockAnchor.TOP_RIGHT has only one value
org.jfree.chart.text.TextBlockAnchor.CENTER_LEFT has only one value
org.jfree.chart.text.TextBlockAnchor.CENTER has only one value
org.jfree.chart.text.TextBlockAnchor.CENTER_RIGHT has only one value
org.jfree.chart.text.TextBlockAnchor.BOTTOM_LEFT has only one value
org.jfree.chart.text.TextBlockAnchor.BOTTOM_CENTER has only one value
org.jfree.chart.text.TextBlockAnchor.BOTTOM_RIGHT has only one value
org.jfree.chart.text.TextBlockAnchor.TOP_LEFT.name has only one value
org.jfree.chart.text.TextBlockAnchor.TOP_LEFT.name.toString == "TextBlockAnchor.TOP_LEFT"
org.jfree.chart.text.TextBlockAnchor.TOP_CENTER.name has only one value
org.jfree.chart.text.TextBlockAnchor.TOP_CENTER.name.toString == "TextBlockAnchor.TOP_CENTER"
org.jfree.chart.text.TextBlockAnchor.TOP_RIGHT.name has only one value
org.jfree.chart.text.TextBlockAnchor.TOP_RIGHT.name.toString == "TextBlockAnchor.TOP_RIGHT"
org.jfree.chart.text.TextBlockAnchor.CENTER_LEFT.name has only one value
org.jfree.chart.text.TextBlockAnchor.CENTER_LEFT.name.toString == "TextBlockAnchor.CENTER_LEFT"
org.jfree.chart.text.TextBlockAnchor.CENTER.name has only one value
org.jfree.chart.text.TextBlockAnchor.CENTER.name.toString == "TextBlockAnchor.CENTER"
org.jfree.chart.text.TextBlockAnchor.CENTER_RIGHT.name has only one value
org.jfree.chart.text.TextBlockAnchor.CENTER_RIGHT.name.toString == "TextBlockAnchor.CENTER_RIGHT"
org.jfree.chart.text.TextBlockAnchor.BOTTOM_LEFT.name has only one value
org.jfree.chart.text.TextBlockAnchor.BOTTOM_LEFT.name.toString == "TextBlockAnchor.BOTTOM_LEFT"
org.jfree.chart.text.TextBlockAnchor.BOTTOM_CENTER.name has only one value
org.jfree.chart.text.TextBlockAnchor.BOTTOM_CENTER.name.toString == "TextBlockAnchor.BOTTOM_CENTER"
org.jfree.chart.text.TextBlockAnchor.BOTTOM_RIGHT.name has only one value
org.jfree.chart.text.TextBlockAnchor.BOTTOM_RIGHT.name.toString == "TextBlockAnchor.BOTTOM_RIGHT"
anchor.name.toString one of { "TextBlockAnchor.TOP_CENTER", "TextBlockAnchor.TOP_LEFT" }
size(this.lines[]) == 1
===========================================================================
org.jfree.chart.text.TextBlock.setLineAlignment(org.jfree.chart.util.HorizontalAlignment):::ENTER
this.lines[].getClass().getName() == [org.jfree.chart.text.TextLine]
alignment has only one value
alignment.name has only one value
alignment.name.toString == "HorizontalAlignment.CENTER"
size(this.lines[]) == 1
===========================================================================
org.jfree.chart.text.TextBlock.setLineAlignment(org.jfree.chart.util.HorizontalAlignment):::EXIT
this.lines == orig(this.lines)
this.lines[] == orig(this.lines[])
this.lines.getClass().getName() == orig(this.lines.getClass().getName())
this.lineAlignment == orig(this.lineAlignment)
org.jfree.chart.util.HorizontalAlignment.LEFT == orig(org.jfree.chart.util.HorizontalAlignment.LEFT)
org.jfree.chart.util.HorizontalAlignment.RIGHT == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT)
org.jfree.chart.util.HorizontalAlignment.CENTER == orig(org.jfree.chart.util.HorizontalAlignment.CENTER)
org.jfree.chart.util.HorizontalAlignment.LEFT.name == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name)
org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString)
org.jfree.chart.util.HorizontalAlignment.CENTER.name == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name)
org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString)
this.lineAlignment.name == orig(this.lineAlignment.name)
this.lineAlignment.name.toString == orig(this.lineAlignment.name.toString)
alignment.name == orig(alignment.name)
alignment.name.toString == orig(alignment.name.toString)
this.lines[].getClass().getName() == [org.jfree.chart.text.TextLine]
alignment.name has only one value
alignment.name.toString == "HorizontalAlignment.CENTER"
size(this.lines[]) == 1
===========================================================================
org.jfree.chart.text.TextBlockAnchor:::CLASS
===========================================================================
org.jfree.chart.text.TextBlockAnchor:::OBJECT
===========================================================================
org.jfree.chart.text.TextBlockAnchor.TextBlockAnchor(java.lang.String):::ENTER
===========================================================================
org.jfree.chart.text.TextBlockAnchor.TextBlockAnchor(java.lang.String):::EXIT
name.toString == orig(name.toString)
===========================================================================
org.jfree.chart.text.TextFragment:::CLASS
org.jfree.chart.text.TextFragment.DEFAULT_FONT has only one value
org.jfree.chart.text.TextFragment.DEFAULT_FONT != null
org.jfree.chart.text.TextFragment.DEFAULT_PAINT has only one value
org.jfree.chart.text.TextFragment.DEFAULT_PAINT != null
org.jfree.chart.text.TextFragment.DEFAULT_PAINT.getClass().getName() == java.awt.Color.class
===========================================================================
org.jfree.chart.text.TextFragment:::OBJECT
this.text != null
this.font != null
this.paint has only one value
this.paint != null
this.paint.getClass().getName() == java.awt.Color.class
this.baselineOffset == 0.0
===========================================================================
org.jfree.chart.text.TextFragment.TextFragment(java.lang.String, java.awt.Font, java.awt.Paint):::ENTER
paint has only one value
paint.getClass().getName() == java.awt.Color.class
===========================================================================
org.jfree.chart.text.TextFragment.TextFragment(java.lang.String, java.awt.Font, java.awt.Paint):::EXIT
text.toString == orig(text.toString)
===========================================================================
org.jfree.chart.text.TextFragment.TextFragment(java.lang.String, java.awt.Font, java.awt.Paint, float):::ENTER
paint has only one value
paint.getClass().getName() == java.awt.Color.class
baselineOffset == 0.0
===========================================================================
org.jfree.chart.text.TextFragment.TextFragment(java.lang.String, java.awt.Font, java.awt.Paint, float):::EXIT
text.toString == orig(text.toString)
===========================================================================
org.jfree.chart.text.TextFragment.calculateBaselineOffset(java.awt.Graphics2D, org.jfree.chart.text.TextAnchor):::ENTER
g2.getClass().getName() == sun.java2d.SunGraphics2D.class
anchor has only one value
org.jfree.chart.text.TextAnchor.TOP_LEFT has only one value
org.jfree.chart.text.TextAnchor.TOP_CENTER has only one value
org.jfree.chart.text.TextAnchor.TOP_RIGHT has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT has only one value
org.jfree.chart.text.TextAnchor.CENTER_LEFT has only one value
org.jfree.chart.text.TextAnchor.CENTER has only one value
org.jfree.chart.text.TextAnchor.CENTER_RIGHT has only one value
org.jfree.chart.text.TextAnchor.BASELINE_LEFT has only one value
org.jfree.chart.text.TextAnchor.BASELINE_CENTER has only one value
org.jfree.chart.text.TextAnchor.BASELINE_RIGHT has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_LEFT has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_CENTER has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT has only one value
org.jfree.chart.text.TextAnchor.TOP_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.TOP_LEFT.name.toString == "TextAnchor.TOP_LEFT"
org.jfree.chart.text.TextAnchor.TOP_CENTER.name has only one value
org.jfree.chart.text.TextAnchor.TOP_CENTER.name.toString == "TextAnchor.TOP_CENTER"
org.jfree.chart.text.TextAnchor.TOP_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.TOP_RIGHT.name.toString == "TextAnchor.TOP_RIGHT"
org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT.name.toString == "TextAnchor.HALF_ASCENT_LEFT"
org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER.name has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER.name.toString == "TextAnchor.HALF_ASCENT_CENTER"
org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT.name.toString == "TextAnchor.HALF_ASCENT_RIGHT"
org.jfree.chart.text.TextAnchor.CENTER_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.CENTER_LEFT.name.toString == "TextAnchor.CENTER_LEFT"
org.jfree.chart.text.TextAnchor.CENTER.name has only one value
org.jfree.chart.text.TextAnchor.CENTER.name.toString == "TextAnchor.CENTER"
org.jfree.chart.text.TextAnchor.CENTER_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.CENTER_RIGHT.name.toString == "TextAnchor.CENTER_RIGHT"
org.jfree.chart.text.TextAnchor.BASELINE_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.BASELINE_LEFT.name.toString == "TextAnchor.BASELINE_LEFT"
org.jfree.chart.text.TextAnchor.BASELINE_CENTER.name has only one value
org.jfree.chart.text.TextAnchor.BASELINE_CENTER.name.toString == "TextAnchor.BASELINE_CENTER"
org.jfree.chart.text.TextAnchor.BASELINE_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.BASELINE_RIGHT.name.toString == "TextAnchor.BASELINE_RIGHT"
org.jfree.chart.text.TextAnchor.BOTTOM_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_LEFT.name.toString == "TextAnchor.BOTTOM_LEFT"
org.jfree.chart.text.TextAnchor.BOTTOM_CENTER.name has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_CENTER.name.toString == "TextAnchor.BOTTOM_CENTER"
org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT.name.toString == "TextAnchor.BOTTOM_RIGHT"
anchor.name has only one value
anchor.name.toString == "TextAnchor.TOP_LEFT"
===========================================================================
org.jfree.chart.text.TextFragment.calculateBaselineOffset(java.awt.Graphics2D, org.jfree.chart.text.TextAnchor):::EXIT
org.jfree.chart.text.TextFragment.DEFAULT_FONT == orig(org.jfree.chart.text.TextFragment.DEFAULT_FONT)
org.jfree.chart.text.TextFragment.DEFAULT_PAINT == orig(org.jfree.chart.text.TextFragment.DEFAULT_PAINT)
org.jfree.chart.text.TextFragment.DEFAULT_PAINT.getClass().getName() == orig(org.jfree.chart.text.TextFragment.DEFAULT_PAINT.getClass().getName())
this.text == orig(this.text)
this.text.toString == orig(this.text.toString)
this.font == orig(this.font)
this.paint == orig(this.paint)
this.paint.getClass().getName() == orig(this.paint.getClass().getName())
this.baselineOffset == orig(this.baselineOffset)
org.jfree.chart.text.TextAnchor.TOP_LEFT == orig(org.jfree.chart.text.TextAnchor.TOP_LEFT)
org.jfree.chart.text.TextAnchor.TOP_CENTER == orig(org.jfree.chart.text.TextAnchor.TOP_CENTER)
org.jfree.chart.text.TextAnchor.TOP_RIGHT == orig(org.jfree.chart.text.TextAnchor.TOP_RIGHT)
org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT == orig(org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT)
org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER == orig(org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER)
org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT == orig(org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT)
org.jfree.chart.text.TextAnchor.CENTER_LEFT == orig(org.jfree.chart.text.TextAnchor.CENTER_LEFT)
org.jfree.chart.text.TextAnchor.CENTER == orig(org.jfree.chart.text.TextAnchor.CENTER)
org.jfree.chart.text.TextAnchor.CENTER_RIGHT == orig(org.jfree.chart.text.TextAnchor.CENTER_RIGHT)
org.jfree.chart.text.TextAnchor.BASELINE_LEFT == orig(org.jfree.chart.text.TextAnchor.BASELINE_LEFT)
org.jfree.chart.text.TextAnchor.BASELINE_CENTER == orig(org.jfree.chart.text.TextAnchor.BASELINE_CENTER)
org.jfree.chart.text.TextAnchor.BASELINE_RIGHT == orig(org.jfree.chart.text.TextAnchor.BASELINE_RIGHT)
org.jfree.chart.text.TextAnchor.BOTTOM_LEFT == orig(org.jfree.chart.text.TextAnchor.BOTTOM_LEFT)
org.jfree.chart.text.TextAnchor.BOTTOM_CENTER == orig(org.jfree.chart.text.TextAnchor.BOTTOM_CENTER)
org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT == orig(org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT)
org.jfree.chart.text.TextAnchor.TOP_LEFT.name == orig(org.jfree.chart.text.TextAnchor.TOP_LEFT.name)
org.jfree.chart.text.TextAnchor.TOP_LEFT.name.toString == orig(org.jfree.chart.text.TextAnchor.TOP_LEFT.name.toString)
org.jfree.chart.text.TextAnchor.TOP_CENTER.name == orig(org.jfree.chart.text.TextAnchor.TOP_CENTER.name)
org.jfree.chart.text.TextAnchor.TOP_CENTER.name.toString == orig(org.jfree.chart.text.TextAnchor.TOP_CENTER.name.toString)
org.jfree.chart.text.TextAnchor.TOP_RIGHT.name == orig(org.jfree.chart.text.TextAnchor.TOP_RIGHT.name)
org.jfree.chart.text.TextAnchor.TOP_RIGHT.name.toString == orig(org.jfree.chart.text.TextAnchor.TOP_RIGHT.name.toString)
org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT.name == orig(org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT.name)
org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT.name.toString == orig(org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT.name.toString)
org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER.name == orig(org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER.name)
org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER.name.toString == orig(org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER.name.toString)
org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT.name == orig(org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT.name)
org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT.name.toString == orig(org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT.name.toString)
org.jfree.chart.text.TextAnchor.CENTER_LEFT.name == orig(org.jfree.chart.text.TextAnchor.CENTER_LEFT.name)
org.jfree.chart.text.TextAnchor.CENTER_LEFT.name.toString == orig(org.jfree.chart.text.TextAnchor.CENTER_LEFT.name.toString)
org.jfree.chart.text.TextAnchor.CENTER.name == orig(org.jfree.chart.text.TextAnchor.CENTER.name)
org.jfree.chart.text.TextAnchor.CENTER.name.toString == orig(org.jfree.chart.text.TextAnchor.CENTER.name.toString)
org.jfree.chart.text.TextAnchor.CENTER_RIGHT.name == orig(org.jfree.chart.text.TextAnchor.CENTER_RIGHT.name)
org.jfree.chart.text.TextAnchor.CENTER_RIGHT.name.toString == orig(org.jfree.chart.text.TextAnchor.CENTER_RIGHT.name.toString)
org.jfree.chart.text.TextAnchor.BASELINE_LEFT.name == orig(org.jfree.chart.text.TextAnchor.BASELINE_LEFT.name)
org.jfree.chart.text.TextAnchor.BASELINE_LEFT.name.toString == orig(org.jfree.chart.text.TextAnchor.BASELINE_LEFT.name.toString)
org.jfree.chart.text.TextAnchor.BASELINE_CENTER.name == orig(org.jfree.chart.text.TextAnchor.BASELINE_CENTER.name)
org.jfree.chart.text.TextAnchor.BASELINE_CENTER.name.toString == orig(org.jfree.chart.text.TextAnchor.BASELINE_CENTER.name.toString)
org.jfree.chart.text.TextAnchor.BASELINE_RIGHT.name == orig(org.jfree.chart.text.TextAnchor.BASELINE_RIGHT.name)
org.jfree.chart.text.TextAnchor.BASELINE_RIGHT.name.toString == orig(org.jfree.chart.text.TextAnchor.BASELINE_RIGHT.name.toString)
org.jfree.chart.text.TextAnchor.BOTTOM_LEFT.name == orig(org.jfree.chart.text.TextAnchor.BOTTOM_LEFT.name)
org.jfree.chart.text.TextAnchor.BOTTOM_LEFT.name.toString == orig(org.jfree.chart.text.TextAnchor.BOTTOM_LEFT.name.toString)
org.jfree.chart.text.TextAnchor.BOTTOM_CENTER.name == orig(org.jfree.chart.text.TextAnchor.BOTTOM_CENTER.name)
org.jfree.chart.text.TextAnchor.BOTTOM_CENTER.name.toString == orig(org.jfree.chart.text.TextAnchor.BOTTOM_CENTER.name.toString)
org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT.name == orig(org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT.name)
org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT.name.toString == orig(org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT.name.toString)
anchor.name == orig(anchor.name)
anchor.name.toString == orig(anchor.name.toString)
org.jfree.chart.text.TextAnchor.TOP_LEFT has only one value
org.jfree.chart.text.TextAnchor.TOP_CENTER has only one value
org.jfree.chart.text.TextAnchor.TOP_RIGHT has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT has only one value
org.jfree.chart.text.TextAnchor.CENTER_LEFT has only one value
org.jfree.chart.text.TextAnchor.CENTER has only one value
org.jfree.chart.text.TextAnchor.CENTER_RIGHT has only one value
org.jfree.chart.text.TextAnchor.BASELINE_LEFT has only one value
org.jfree.chart.text.TextAnchor.BASELINE_CENTER has only one value
org.jfree.chart.text.TextAnchor.BASELINE_RIGHT has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_LEFT has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_CENTER has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT has only one value
org.jfree.chart.text.TextAnchor.TOP_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.TOP_LEFT.name.toString == "TextAnchor.TOP_LEFT"
org.jfree.chart.text.TextAnchor.TOP_CENTER.name has only one value
org.jfree.chart.text.TextAnchor.TOP_CENTER.name.toString == "TextAnchor.TOP_CENTER"
org.jfree.chart.text.TextAnchor.TOP_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.TOP_RIGHT.name.toString == "TextAnchor.TOP_RIGHT"
org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT.name.toString == "TextAnchor.HALF_ASCENT_LEFT"
org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER.name has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER.name.toString == "TextAnchor.HALF_ASCENT_CENTER"
org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT.name.toString == "TextAnchor.HALF_ASCENT_RIGHT"
org.jfree.chart.text.TextAnchor.CENTER_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.CENTER_LEFT.name.toString == "TextAnchor.CENTER_LEFT"
org.jfree.chart.text.TextAnchor.CENTER.name has only one value
org.jfree.chart.text.TextAnchor.CENTER.name.toString == "TextAnchor.CENTER"
org.jfree.chart.text.TextAnchor.CENTER_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.CENTER_RIGHT.name.toString == "TextAnchor.CENTER_RIGHT"
org.jfree.chart.text.TextAnchor.BASELINE_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.BASELINE_LEFT.name.toString == "TextAnchor.BASELINE_LEFT"
org.jfree.chart.text.TextAnchor.BASELINE_CENTER.name has only one value
org.jfree.chart.text.TextAnchor.BASELINE_CENTER.name.toString == "TextAnchor.BASELINE_CENTER"
org.jfree.chart.text.TextAnchor.BASELINE_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.BASELINE_RIGHT.name.toString == "TextAnchor.BASELINE_RIGHT"
org.jfree.chart.text.TextAnchor.BOTTOM_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_LEFT.name.toString == "TextAnchor.BOTTOM_LEFT"
org.jfree.chart.text.TextAnchor.BOTTOM_CENTER.name has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_CENTER.name.toString == "TextAnchor.BOTTOM_CENTER"
org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT.name.toString == "TextAnchor.BOTTOM_RIGHT"
anchor.name has only one value
anchor.name.toString == "TextAnchor.TOP_LEFT"
return one of { 11.138672, 16.708008 }
===========================================================================
org.jfree.chart.text.TextFragment.calculateDimensions(java.awt.Graphics2D):::ENTER
g2 != null
g2.getClass().getName() == sun.java2d.SunGraphics2D.class
===========================================================================
org.jfree.chart.text.TextFragment.calculateDimensions(java.awt.Graphics2D):::EXIT
org.jfree.chart.text.TextFragment.DEFAULT_FONT == orig(org.jfree.chart.text.TextFragment.DEFAULT_FONT)
org.jfree.chart.text.TextFragment.DEFAULT_PAINT == orig(org.jfree.chart.text.TextFragment.DEFAULT_PAINT)
org.jfree.chart.text.TextFragment.DEFAULT_PAINT.getClass().getName() == orig(org.jfree.chart.text.TextFragment.DEFAULT_PAINT.getClass().getName())
this.text == orig(this.text)
this.text.toString == orig(this.text.toString)
this.font == orig(this.font)
this.paint == orig(this.paint)
this.paint.getClass().getName() == orig(this.paint.getClass().getName())
this.baselineOffset == orig(this.baselineOffset)
return != null
return.width one of { 44.0, 59.0, 93.0 }
return.height one of { 13.96875, 20.953125 }
===========================================================================
org.jfree.chart.text.TextFragment.draw(java.awt.Graphics2D, float, float, org.jfree.chart.text.TextAnchor, float, float, double):::ENTER
g2.getClass().getName() == sun.java2d.SunGraphics2D.class
anchorY one of { 17.708008, 72.20117, 92.16992 }
anchor has only one value
org.jfree.chart.text.TextAnchor.TOP_LEFT has only one value
org.jfree.chart.text.TextAnchor.TOP_CENTER has only one value
org.jfree.chart.text.TextAnchor.TOP_RIGHT has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT has only one value
org.jfree.chart.text.TextAnchor.CENTER_LEFT has only one value
org.jfree.chart.text.TextAnchor.CENTER has only one value
org.jfree.chart.text.TextAnchor.CENTER_RIGHT has only one value
org.jfree.chart.text.TextAnchor.BASELINE_LEFT has only one value
org.jfree.chart.text.TextAnchor.BASELINE_CENTER has only one value
org.jfree.chart.text.TextAnchor.BASELINE_RIGHT has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_LEFT has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_CENTER has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT has only one value
org.jfree.chart.text.TextAnchor.TOP_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.TOP_LEFT.name.toString == "TextAnchor.TOP_LEFT"
org.jfree.chart.text.TextAnchor.TOP_CENTER.name has only one value
org.jfree.chart.text.TextAnchor.TOP_CENTER.name.toString == "TextAnchor.TOP_CENTER"
org.jfree.chart.text.TextAnchor.TOP_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.TOP_RIGHT.name.toString == "TextAnchor.TOP_RIGHT"
org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT.name.toString == "TextAnchor.HALF_ASCENT_LEFT"
org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER.name has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER.name.toString == "TextAnchor.HALF_ASCENT_CENTER"
org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT.name.toString == "TextAnchor.HALF_ASCENT_RIGHT"
org.jfree.chart.text.TextAnchor.CENTER_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.CENTER_LEFT.name.toString == "TextAnchor.CENTER_LEFT"
org.jfree.chart.text.TextAnchor.CENTER.name has only one value
org.jfree.chart.text.TextAnchor.CENTER.name.toString == "TextAnchor.CENTER"
org.jfree.chart.text.TextAnchor.CENTER_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.CENTER_RIGHT.name.toString == "TextAnchor.CENTER_RIGHT"
org.jfree.chart.text.TextAnchor.BASELINE_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.BASELINE_LEFT.name.toString == "TextAnchor.BASELINE_LEFT"
org.jfree.chart.text.TextAnchor.BASELINE_CENTER.name has only one value
org.jfree.chart.text.TextAnchor.BASELINE_CENTER.name.toString == "TextAnchor.BASELINE_CENTER"
org.jfree.chart.text.TextAnchor.BASELINE_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.BASELINE_RIGHT.name.toString == "TextAnchor.BASELINE_RIGHT"
org.jfree.chart.text.TextAnchor.BOTTOM_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_LEFT.name.toString == "TextAnchor.BOTTOM_LEFT"
org.jfree.chart.text.TextAnchor.BOTTOM_CENTER.name has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_CENTER.name.toString == "TextAnchor.BOTTOM_CENTER"
org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT.name.toString == "TextAnchor.BOTTOM_RIGHT"
anchor.name has only one value
anchor.name.toString == "TextAnchor.BASELINE_LEFT"
rotateX == 0.0
rotateY == 0.0
angle == 0.0
===========================================================================
org.jfree.chart.text.TextFragment.draw(java.awt.Graphics2D, float, float, org.jfree.chart.text.TextAnchor, float, float, double):::EXIT
org.jfree.chart.text.TextFragment.DEFAULT_FONT == orig(org.jfree.chart.text.TextFragment.DEFAULT_FONT)
org.jfree.chart.text.TextFragment.DEFAULT_PAINT == orig(org.jfree.chart.text.TextFragment.DEFAULT_PAINT)
org.jfree.chart.text.TextFragment.DEFAULT_PAINT.getClass().getName() == orig(org.jfree.chart.text.TextFragment.DEFAULT_PAINT.getClass().getName())
this.text == orig(this.text)
this.text.toString == orig(this.text.toString)
this.font == orig(this.font)
this.paint == orig(this.paint)
this.paint.getClass().getName() == orig(this.paint.getClass().getName())
this.baselineOffset == orig(this.baselineOffset)
org.jfree.chart.text.TextAnchor.TOP_LEFT == orig(org.jfree.chart.text.TextAnchor.TOP_LEFT)
org.jfree.chart.text.TextAnchor.TOP_CENTER == orig(org.jfree.chart.text.TextAnchor.TOP_CENTER)
org.jfree.chart.text.TextAnchor.TOP_RIGHT == orig(org.jfree.chart.text.TextAnchor.TOP_RIGHT)
org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT == orig(org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT)
org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER == orig(org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER)
org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT == orig(org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT)
org.jfree.chart.text.TextAnchor.CENTER_LEFT == orig(org.jfree.chart.text.TextAnchor.CENTER_LEFT)
org.jfree.chart.text.TextAnchor.CENTER == orig(org.jfree.chart.text.TextAnchor.CENTER)
org.jfree.chart.text.TextAnchor.CENTER_RIGHT == orig(org.jfree.chart.text.TextAnchor.CENTER_RIGHT)
org.jfree.chart.text.TextAnchor.BASELINE_LEFT == orig(org.jfree.chart.text.TextAnchor.BASELINE_LEFT)
org.jfree.chart.text.TextAnchor.BASELINE_CENTER == orig(org.jfree.chart.text.TextAnchor.BASELINE_CENTER)
org.jfree.chart.text.TextAnchor.BASELINE_RIGHT == orig(org.jfree.chart.text.TextAnchor.BASELINE_RIGHT)
org.jfree.chart.text.TextAnchor.BOTTOM_LEFT == orig(org.jfree.chart.text.TextAnchor.BOTTOM_LEFT)
org.jfree.chart.text.TextAnchor.BOTTOM_CENTER == orig(org.jfree.chart.text.TextAnchor.BOTTOM_CENTER)
org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT == orig(org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT)
org.jfree.chart.text.TextAnchor.TOP_LEFT.name == orig(org.jfree.chart.text.TextAnchor.TOP_LEFT.name)
org.jfree.chart.text.TextAnchor.TOP_LEFT.name.toString == orig(org.jfree.chart.text.TextAnchor.TOP_LEFT.name.toString)
org.jfree.chart.text.TextAnchor.TOP_CENTER.name == orig(org.jfree.chart.text.TextAnchor.TOP_CENTER.name)
org.jfree.chart.text.TextAnchor.TOP_CENTER.name.toString == orig(org.jfree.chart.text.TextAnchor.TOP_CENTER.name.toString)
org.jfree.chart.text.TextAnchor.TOP_RIGHT.name == orig(org.jfree.chart.text.TextAnchor.TOP_RIGHT.name)
org.jfree.chart.text.TextAnchor.TOP_RIGHT.name.toString == orig(org.jfree.chart.text.TextAnchor.TOP_RIGHT.name.toString)
org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT.name == orig(org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT.name)
org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT.name.toString == orig(org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT.name.toString)
org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER.name == orig(org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER.name)
org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER.name.toString == orig(org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER.name.toString)
org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT.name == orig(org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT.name)
org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT.name.toString == orig(org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT.name.toString)
org.jfree.chart.text.TextAnchor.CENTER_LEFT.name == orig(org.jfree.chart.text.TextAnchor.CENTER_LEFT.name)
org.jfree.chart.text.TextAnchor.CENTER_LEFT.name.toString == orig(org.jfree.chart.text.TextAnchor.CENTER_LEFT.name.toString)
org.jfree.chart.text.TextAnchor.CENTER.name == orig(org.jfree.chart.text.TextAnchor.CENTER.name)
org.jfree.chart.text.TextAnchor.CENTER.name.toString == orig(org.jfree.chart.text.TextAnchor.CENTER.name.toString)
org.jfree.chart.text.TextAnchor.CENTER_RIGHT.name == orig(org.jfree.chart.text.TextAnchor.CENTER_RIGHT.name)
org.jfree.chart.text.TextAnchor.CENTER_RIGHT.name.toString == orig(org.jfree.chart.text.TextAnchor.CENTER_RIGHT.name.toString)
org.jfree.chart.text.TextAnchor.BASELINE_LEFT.name == orig(org.jfree.chart.text.TextAnchor.BASELINE_LEFT.name)
org.jfree.chart.text.TextAnchor.BASELINE_LEFT.name.toString == orig(org.jfree.chart.text.TextAnchor.BASELINE_LEFT.name.toString)
org.jfree.chart.text.TextAnchor.BASELINE_CENTER.name == orig(org.jfree.chart.text.TextAnchor.BASELINE_CENTER.name)
org.jfree.chart.text.TextAnchor.BASELINE_CENTER.name.toString == orig(org.jfree.chart.text.TextAnchor.BASELINE_CENTER.name.toString)
org.jfree.chart.text.TextAnchor.BASELINE_RIGHT.name == orig(org.jfree.chart.text.TextAnchor.BASELINE_RIGHT.name)
org.jfree.chart.text.TextAnchor.BASELINE_RIGHT.name.toString == orig(org.jfree.chart.text.TextAnchor.BASELINE_RIGHT.name.toString)
org.jfree.chart.text.TextAnchor.BOTTOM_LEFT.name == orig(org.jfree.chart.text.TextAnchor.BOTTOM_LEFT.name)
org.jfree.chart.text.TextAnchor.BOTTOM_LEFT.name.toString == orig(org.jfree.chart.text.TextAnchor.BOTTOM_LEFT.name.toString)
org.jfree.chart.text.TextAnchor.BOTTOM_CENTER.name == orig(org.jfree.chart.text.TextAnchor.BOTTOM_CENTER.name)
org.jfree.chart.text.TextAnchor.BOTTOM_CENTER.name.toString == orig(org.jfree.chart.text.TextAnchor.BOTTOM_CENTER.name.toString)
org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT.name == orig(org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT.name)
org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT.name.toString == orig(org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT.name.toString)
anchor.name == orig(anchor.name)
anchor.name.toString == orig(anchor.name.toString)
org.jfree.chart.text.TextAnchor.TOP_LEFT has only one value
org.jfree.chart.text.TextAnchor.TOP_CENTER has only one value
org.jfree.chart.text.TextAnchor.TOP_RIGHT has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT has only one value
org.jfree.chart.text.TextAnchor.CENTER_LEFT has only one value
org.jfree.chart.text.TextAnchor.CENTER has only one value
org.jfree.chart.text.TextAnchor.CENTER_RIGHT has only one value
org.jfree.chart.text.TextAnchor.BASELINE_LEFT has only one value
org.jfree.chart.text.TextAnchor.BASELINE_CENTER has only one value
org.jfree.chart.text.TextAnchor.BASELINE_RIGHT has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_LEFT has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_CENTER has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT has only one value
org.jfree.chart.text.TextAnchor.TOP_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.TOP_LEFT.name.toString == "TextAnchor.TOP_LEFT"
org.jfree.chart.text.TextAnchor.TOP_CENTER.name has only one value
org.jfree.chart.text.TextAnchor.TOP_CENTER.name.toString == "TextAnchor.TOP_CENTER"
org.jfree.chart.text.TextAnchor.TOP_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.TOP_RIGHT.name.toString == "TextAnchor.TOP_RIGHT"
org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT.name.toString == "TextAnchor.HALF_ASCENT_LEFT"
org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER.name has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER.name.toString == "TextAnchor.HALF_ASCENT_CENTER"
org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT.name.toString == "TextAnchor.HALF_ASCENT_RIGHT"
org.jfree.chart.text.TextAnchor.CENTER_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.CENTER_LEFT.name.toString == "TextAnchor.CENTER_LEFT"
org.jfree.chart.text.TextAnchor.CENTER.name has only one value
org.jfree.chart.text.TextAnchor.CENTER.name.toString == "TextAnchor.CENTER"
org.jfree.chart.text.TextAnchor.CENTER_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.CENTER_RIGHT.name.toString == "TextAnchor.CENTER_RIGHT"
org.jfree.chart.text.TextAnchor.BASELINE_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.BASELINE_LEFT.name.toString == "TextAnchor.BASELINE_LEFT"
org.jfree.chart.text.TextAnchor.BASELINE_CENTER.name has only one value
org.jfree.chart.text.TextAnchor.BASELINE_CENTER.name.toString == "TextAnchor.BASELINE_CENTER"
org.jfree.chart.text.TextAnchor.BASELINE_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.BASELINE_RIGHT.name.toString == "TextAnchor.BASELINE_RIGHT"
org.jfree.chart.text.TextAnchor.BOTTOM_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_LEFT.name.toString == "TextAnchor.BOTTOM_LEFT"
org.jfree.chart.text.TextAnchor.BOTTOM_CENTER.name has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_CENTER.name.toString == "TextAnchor.BOTTOM_CENTER"
org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT.name.toString == "TextAnchor.BOTTOM_RIGHT"
anchor.name has only one value
anchor.name.toString == "TextAnchor.BASELINE_LEFT"
===========================================================================
org.jfree.chart.text.TextLine:::CLASS
===========================================================================
org.jfree.chart.text.TextLine:::OBJECT
this.fragments != null
this.fragments[] elements != null
this.fragments[].getClass().getName() == [org.jfree.chart.text.TextFragment]
this.fragments[].getClass().getName() elements == org.jfree.chart.text.TextFragment.class
this.fragments.getClass().getName() == java.util.ArrayList.class
size(this.fragments[]) == 1
===========================================================================
org.jfree.chart.text.TextLine.TextLine(java.lang.String, java.awt.Font, java.awt.Paint):::ENTER
paint has only one value
paint.getClass().getName() == java.awt.Color.class
===========================================================================
org.jfree.chart.text.TextLine.TextLine(java.lang.String, java.awt.Font, java.awt.Paint):::EXIT
text.toString == orig(text.toString)
===========================================================================
org.jfree.chart.text.TextLine.calculateBaselineOffset(java.awt.Graphics2D, org.jfree.chart.text.TextAnchor):::ENTER
g2.getClass().getName() == sun.java2d.SunGraphics2D.class
anchor has only one value
org.jfree.chart.text.TextAnchor.TOP_LEFT has only one value
org.jfree.chart.text.TextAnchor.TOP_CENTER has only one value
org.jfree.chart.text.TextAnchor.TOP_RIGHT has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT has only one value
org.jfree.chart.text.TextAnchor.CENTER_LEFT has only one value
org.jfree.chart.text.TextAnchor.CENTER has only one value
org.jfree.chart.text.TextAnchor.CENTER_RIGHT has only one value
org.jfree.chart.text.TextAnchor.BASELINE_LEFT has only one value
org.jfree.chart.text.TextAnchor.BASELINE_CENTER has only one value
org.jfree.chart.text.TextAnchor.BASELINE_RIGHT has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_LEFT has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_CENTER has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT has only one value
org.jfree.chart.text.TextAnchor.TOP_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.TOP_LEFT.name.toString == "TextAnchor.TOP_LEFT"
org.jfree.chart.text.TextAnchor.TOP_CENTER.name has only one value
org.jfree.chart.text.TextAnchor.TOP_CENTER.name.toString == "TextAnchor.TOP_CENTER"
org.jfree.chart.text.TextAnchor.TOP_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.TOP_RIGHT.name.toString == "TextAnchor.TOP_RIGHT"
org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT.name.toString == "TextAnchor.HALF_ASCENT_LEFT"
org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER.name has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER.name.toString == "TextAnchor.HALF_ASCENT_CENTER"
org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT.name.toString == "TextAnchor.HALF_ASCENT_RIGHT"
org.jfree.chart.text.TextAnchor.CENTER_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.CENTER_LEFT.name.toString == "TextAnchor.CENTER_LEFT"
org.jfree.chart.text.TextAnchor.CENTER.name has only one value
org.jfree.chart.text.TextAnchor.CENTER.name.toString == "TextAnchor.CENTER"
org.jfree.chart.text.TextAnchor.CENTER_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.CENTER_RIGHT.name.toString == "TextAnchor.CENTER_RIGHT"
org.jfree.chart.text.TextAnchor.BASELINE_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.BASELINE_LEFT.name.toString == "TextAnchor.BASELINE_LEFT"
org.jfree.chart.text.TextAnchor.BASELINE_CENTER.name has only one value
org.jfree.chart.text.TextAnchor.BASELINE_CENTER.name.toString == "TextAnchor.BASELINE_CENTER"
org.jfree.chart.text.TextAnchor.BASELINE_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.BASELINE_RIGHT.name.toString == "TextAnchor.BASELINE_RIGHT"
org.jfree.chart.text.TextAnchor.BOTTOM_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_LEFT.name.toString == "TextAnchor.BOTTOM_LEFT"
org.jfree.chart.text.TextAnchor.BOTTOM_CENTER.name has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_CENTER.name.toString == "TextAnchor.BOTTOM_CENTER"
org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT.name.toString == "TextAnchor.BOTTOM_RIGHT"
anchor.name has only one value
anchor.name.toString == "TextAnchor.TOP_LEFT"
===========================================================================
org.jfree.chart.text.TextLine.calculateBaselineOffset(java.awt.Graphics2D, org.jfree.chart.text.TextAnchor):::EXIT
this.fragments == orig(this.fragments)
this.fragments[] == orig(this.fragments[])
this.fragments.getClass().getName() == orig(this.fragments.getClass().getName())
org.jfree.chart.text.TextAnchor.TOP_LEFT == orig(org.jfree.chart.text.TextAnchor.TOP_LEFT)
org.jfree.chart.text.TextAnchor.TOP_CENTER == orig(org.jfree.chart.text.TextAnchor.TOP_CENTER)
org.jfree.chart.text.TextAnchor.TOP_RIGHT == orig(org.jfree.chart.text.TextAnchor.TOP_RIGHT)
org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT == orig(org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT)
org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER == orig(org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER)
org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT == orig(org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT)
org.jfree.chart.text.TextAnchor.CENTER_LEFT == orig(org.jfree.chart.text.TextAnchor.CENTER_LEFT)
org.jfree.chart.text.TextAnchor.CENTER == orig(org.jfree.chart.text.TextAnchor.CENTER)
org.jfree.chart.text.TextAnchor.CENTER_RIGHT == orig(org.jfree.chart.text.TextAnchor.CENTER_RIGHT)
org.jfree.chart.text.TextAnchor.BASELINE_LEFT == orig(org.jfree.chart.text.TextAnchor.BASELINE_LEFT)
org.jfree.chart.text.TextAnchor.BASELINE_CENTER == orig(org.jfree.chart.text.TextAnchor.BASELINE_CENTER)
org.jfree.chart.text.TextAnchor.BASELINE_RIGHT == orig(org.jfree.chart.text.TextAnchor.BASELINE_RIGHT)
org.jfree.chart.text.TextAnchor.BOTTOM_LEFT == orig(org.jfree.chart.text.TextAnchor.BOTTOM_LEFT)
org.jfree.chart.text.TextAnchor.BOTTOM_CENTER == orig(org.jfree.chart.text.TextAnchor.BOTTOM_CENTER)
org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT == orig(org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT)
org.jfree.chart.text.TextAnchor.TOP_LEFT.name == orig(org.jfree.chart.text.TextAnchor.TOP_LEFT.name)
org.jfree.chart.text.TextAnchor.TOP_LEFT.name.toString == orig(org.jfree.chart.text.TextAnchor.TOP_LEFT.name.toString)
org.jfree.chart.text.TextAnchor.TOP_CENTER.name == orig(org.jfree.chart.text.TextAnchor.TOP_CENTER.name)
org.jfree.chart.text.TextAnchor.TOP_CENTER.name.toString == orig(org.jfree.chart.text.TextAnchor.TOP_CENTER.name.toString)
org.jfree.chart.text.TextAnchor.TOP_RIGHT.name == orig(org.jfree.chart.text.TextAnchor.TOP_RIGHT.name)
org.jfree.chart.text.TextAnchor.TOP_RIGHT.name.toString == orig(org.jfree.chart.text.TextAnchor.TOP_RIGHT.name.toString)
org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT.name == orig(org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT.name)
org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT.name.toString == orig(org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT.name.toString)
org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER.name == orig(org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER.name)
org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER.name.toString == orig(org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER.name.toString)
org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT.name == orig(org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT.name)
org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT.name.toString == orig(org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT.name.toString)
org.jfree.chart.text.TextAnchor.CENTER_LEFT.name == orig(org.jfree.chart.text.TextAnchor.CENTER_LEFT.name)
org.jfree.chart.text.TextAnchor.CENTER_LEFT.name.toString == orig(org.jfree.chart.text.TextAnchor.CENTER_LEFT.name.toString)
org.jfree.chart.text.TextAnchor.CENTER.name == orig(org.jfree.chart.text.TextAnchor.CENTER.name)
org.jfree.chart.text.TextAnchor.CENTER.name.toString == orig(org.jfree.chart.text.TextAnchor.CENTER.name.toString)
org.jfree.chart.text.TextAnchor.CENTER_RIGHT.name == orig(org.jfree.chart.text.TextAnchor.CENTER_RIGHT.name)
org.jfree.chart.text.TextAnchor.CENTER_RIGHT.name.toString == orig(org.jfree.chart.text.TextAnchor.CENTER_RIGHT.name.toString)
org.jfree.chart.text.TextAnchor.BASELINE_LEFT.name == orig(org.jfree.chart.text.TextAnchor.BASELINE_LEFT.name)
org.jfree.chart.text.TextAnchor.BASELINE_LEFT.name.toString == orig(org.jfree.chart.text.TextAnchor.BASELINE_LEFT.name.toString)
org.jfree.chart.text.TextAnchor.BASELINE_CENTER.name == orig(org.jfree.chart.text.TextAnchor.BASELINE_CENTER.name)
org.jfree.chart.text.TextAnchor.BASELINE_CENTER.name.toString == orig(org.jfree.chart.text.TextAnchor.BASELINE_CENTER.name.toString)
org.jfree.chart.text.TextAnchor.BASELINE_RIGHT.name == orig(org.jfree.chart.text.TextAnchor.BASELINE_RIGHT.name)
org.jfree.chart.text.TextAnchor.BASELINE_RIGHT.name.toString == orig(org.jfree.chart.text.TextAnchor.BASELINE_RIGHT.name.toString)
org.jfree.chart.text.TextAnchor.BOTTOM_LEFT.name == orig(org.jfree.chart.text.TextAnchor.BOTTOM_LEFT.name)
org.jfree.chart.text.TextAnchor.BOTTOM_LEFT.name.toString == orig(org.jfree.chart.text.TextAnchor.BOTTOM_LEFT.name.toString)
org.jfree.chart.text.TextAnchor.BOTTOM_CENTER.name == orig(org.jfree.chart.text.TextAnchor.BOTTOM_CENTER.name)
org.jfree.chart.text.TextAnchor.BOTTOM_CENTER.name.toString == orig(org.jfree.chart.text.TextAnchor.BOTTOM_CENTER.name.toString)
org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT.name == orig(org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT.name)
org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT.name.toString == orig(org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT.name.toString)
anchor.name == orig(anchor.name)
anchor.name.toString == orig(anchor.name.toString)
org.jfree.chart.text.TextAnchor.TOP_LEFT has only one value
org.jfree.chart.text.TextAnchor.TOP_CENTER has only one value
org.jfree.chart.text.TextAnchor.TOP_RIGHT has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT has only one value
org.jfree.chart.text.TextAnchor.CENTER_LEFT has only one value
org.jfree.chart.text.TextAnchor.CENTER has only one value
org.jfree.chart.text.TextAnchor.CENTER_RIGHT has only one value
org.jfree.chart.text.TextAnchor.BASELINE_LEFT has only one value
org.jfree.chart.text.TextAnchor.BASELINE_CENTER has only one value
org.jfree.chart.text.TextAnchor.BASELINE_RIGHT has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_LEFT has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_CENTER has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT has only one value
org.jfree.chart.text.TextAnchor.TOP_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.TOP_LEFT.name.toString == "TextAnchor.TOP_LEFT"
org.jfree.chart.text.TextAnchor.TOP_CENTER.name has only one value
org.jfree.chart.text.TextAnchor.TOP_CENTER.name.toString == "TextAnchor.TOP_CENTER"
org.jfree.chart.text.TextAnchor.TOP_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.TOP_RIGHT.name.toString == "TextAnchor.TOP_RIGHT"
org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT.name.toString == "TextAnchor.HALF_ASCENT_LEFT"
org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER.name has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER.name.toString == "TextAnchor.HALF_ASCENT_CENTER"
org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT.name.toString == "TextAnchor.HALF_ASCENT_RIGHT"
org.jfree.chart.text.TextAnchor.CENTER_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.CENTER_LEFT.name.toString == "TextAnchor.CENTER_LEFT"
org.jfree.chart.text.TextAnchor.CENTER.name has only one value
org.jfree.chart.text.TextAnchor.CENTER.name.toString == "TextAnchor.CENTER"
org.jfree.chart.text.TextAnchor.CENTER_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.CENTER_RIGHT.name.toString == "TextAnchor.CENTER_RIGHT"
org.jfree.chart.text.TextAnchor.BASELINE_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.BASELINE_LEFT.name.toString == "TextAnchor.BASELINE_LEFT"
org.jfree.chart.text.TextAnchor.BASELINE_CENTER.name has only one value
org.jfree.chart.text.TextAnchor.BASELINE_CENTER.name.toString == "TextAnchor.BASELINE_CENTER"
org.jfree.chart.text.TextAnchor.BASELINE_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.BASELINE_RIGHT.name.toString == "TextAnchor.BASELINE_RIGHT"
org.jfree.chart.text.TextAnchor.BOTTOM_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_LEFT.name.toString == "TextAnchor.BOTTOM_LEFT"
org.jfree.chart.text.TextAnchor.BOTTOM_CENTER.name has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_CENTER.name.toString == "TextAnchor.BOTTOM_CENTER"
org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT.name.toString == "TextAnchor.BOTTOM_RIGHT"
anchor.name has only one value
anchor.name.toString == "TextAnchor.TOP_LEFT"
return one of { 11.138672, 16.708008 }
===========================================================================
org.jfree.chart.text.TextLine.calculateDimensions(java.awt.Graphics2D):::ENTER
g2 != null
g2.getClass().getName() == sun.java2d.SunGraphics2D.class
===========================================================================
org.jfree.chart.text.TextLine.calculateDimensions(java.awt.Graphics2D):::EXIT
this.fragments == orig(this.fragments)
this.fragments[] == orig(this.fragments[])
this.fragments.getClass().getName() == orig(this.fragments.getClass().getName())
return != null
return.width one of { 44.0, 59.0, 93.0 }
return.height one of { 13.96875, 20.953125 }
===========================================================================
org.jfree.chart.text.TextLine.draw(java.awt.Graphics2D, float, float, org.jfree.chart.text.TextAnchor, float, float, double):::ENTER
g2.getClass().getName() == sun.java2d.SunGraphics2D.class
anchorY one of { 1.0, 61.0625, 81.03125 }
anchor has only one value
org.jfree.chart.text.TextAnchor.TOP_LEFT has only one value
org.jfree.chart.text.TextAnchor.TOP_CENTER has only one value
org.jfree.chart.text.TextAnchor.TOP_RIGHT has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT has only one value
org.jfree.chart.text.TextAnchor.CENTER_LEFT has only one value
org.jfree.chart.text.TextAnchor.CENTER has only one value
org.jfree.chart.text.TextAnchor.CENTER_RIGHT has only one value
org.jfree.chart.text.TextAnchor.BASELINE_LEFT has only one value
org.jfree.chart.text.TextAnchor.BASELINE_CENTER has only one value
org.jfree.chart.text.TextAnchor.BASELINE_RIGHT has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_LEFT has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_CENTER has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT has only one value
org.jfree.chart.text.TextAnchor.TOP_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.TOP_LEFT.name.toString == "TextAnchor.TOP_LEFT"
org.jfree.chart.text.TextAnchor.TOP_CENTER.name has only one value
org.jfree.chart.text.TextAnchor.TOP_CENTER.name.toString == "TextAnchor.TOP_CENTER"
org.jfree.chart.text.TextAnchor.TOP_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.TOP_RIGHT.name.toString == "TextAnchor.TOP_RIGHT"
org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT.name.toString == "TextAnchor.HALF_ASCENT_LEFT"
org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER.name has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER.name.toString == "TextAnchor.HALF_ASCENT_CENTER"
org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT.name.toString == "TextAnchor.HALF_ASCENT_RIGHT"
org.jfree.chart.text.TextAnchor.CENTER_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.CENTER_LEFT.name.toString == "TextAnchor.CENTER_LEFT"
org.jfree.chart.text.TextAnchor.CENTER.name has only one value
org.jfree.chart.text.TextAnchor.CENTER.name.toString == "TextAnchor.CENTER"
org.jfree.chart.text.TextAnchor.CENTER_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.CENTER_RIGHT.name.toString == "TextAnchor.CENTER_RIGHT"
org.jfree.chart.text.TextAnchor.BASELINE_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.BASELINE_LEFT.name.toString == "TextAnchor.BASELINE_LEFT"
org.jfree.chart.text.TextAnchor.BASELINE_CENTER.name has only one value
org.jfree.chart.text.TextAnchor.BASELINE_CENTER.name.toString == "TextAnchor.BASELINE_CENTER"
org.jfree.chart.text.TextAnchor.BASELINE_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.BASELINE_RIGHT.name.toString == "TextAnchor.BASELINE_RIGHT"
org.jfree.chart.text.TextAnchor.BOTTOM_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_LEFT.name.toString == "TextAnchor.BOTTOM_LEFT"
org.jfree.chart.text.TextAnchor.BOTTOM_CENTER.name has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_CENTER.name.toString == "TextAnchor.BOTTOM_CENTER"
org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT.name.toString == "TextAnchor.BOTTOM_RIGHT"
anchor.name has only one value
anchor.name.toString == "TextAnchor.TOP_LEFT"
rotateX == 0.0
rotateY == 0.0
angle == 0.0
===========================================================================
org.jfree.chart.text.TextLine.draw(java.awt.Graphics2D, float, float, org.jfree.chart.text.TextAnchor, float, float, double):::EXIT
this.fragments == orig(this.fragments)
this.fragments[] == orig(this.fragments[])
this.fragments.getClass().getName() == orig(this.fragments.getClass().getName())
org.jfree.chart.text.TextAnchor.TOP_LEFT == orig(org.jfree.chart.text.TextAnchor.TOP_LEFT)
org.jfree.chart.text.TextAnchor.TOP_CENTER == orig(org.jfree.chart.text.TextAnchor.TOP_CENTER)
org.jfree.chart.text.TextAnchor.TOP_RIGHT == orig(org.jfree.chart.text.TextAnchor.TOP_RIGHT)
org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT == orig(org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT)
org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER == orig(org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER)
org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT == orig(org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT)
org.jfree.chart.text.TextAnchor.CENTER_LEFT == orig(org.jfree.chart.text.TextAnchor.CENTER_LEFT)
org.jfree.chart.text.TextAnchor.CENTER == orig(org.jfree.chart.text.TextAnchor.CENTER)
org.jfree.chart.text.TextAnchor.CENTER_RIGHT == orig(org.jfree.chart.text.TextAnchor.CENTER_RIGHT)
org.jfree.chart.text.TextAnchor.BASELINE_LEFT == orig(org.jfree.chart.text.TextAnchor.BASELINE_LEFT)
org.jfree.chart.text.TextAnchor.BASELINE_CENTER == orig(org.jfree.chart.text.TextAnchor.BASELINE_CENTER)
org.jfree.chart.text.TextAnchor.BASELINE_RIGHT == orig(org.jfree.chart.text.TextAnchor.BASELINE_RIGHT)
org.jfree.chart.text.TextAnchor.BOTTOM_LEFT == orig(org.jfree.chart.text.TextAnchor.BOTTOM_LEFT)
org.jfree.chart.text.TextAnchor.BOTTOM_CENTER == orig(org.jfree.chart.text.TextAnchor.BOTTOM_CENTER)
org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT == orig(org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT)
org.jfree.chart.text.TextAnchor.TOP_LEFT.name == orig(org.jfree.chart.text.TextAnchor.TOP_LEFT.name)
org.jfree.chart.text.TextAnchor.TOP_LEFT.name.toString == orig(org.jfree.chart.text.TextAnchor.TOP_LEFT.name.toString)
org.jfree.chart.text.TextAnchor.TOP_CENTER.name == orig(org.jfree.chart.text.TextAnchor.TOP_CENTER.name)
org.jfree.chart.text.TextAnchor.TOP_CENTER.name.toString == orig(org.jfree.chart.text.TextAnchor.TOP_CENTER.name.toString)
org.jfree.chart.text.TextAnchor.TOP_RIGHT.name == orig(org.jfree.chart.text.TextAnchor.TOP_RIGHT.name)
org.jfree.chart.text.TextAnchor.TOP_RIGHT.name.toString == orig(org.jfree.chart.text.TextAnchor.TOP_RIGHT.name.toString)
org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT.name == orig(org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT.name)
org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT.name.toString == orig(org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT.name.toString)
org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER.name == orig(org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER.name)
org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER.name.toString == orig(org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER.name.toString)
org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT.name == orig(org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT.name)
org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT.name.toString == orig(org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT.name.toString)
org.jfree.chart.text.TextAnchor.CENTER_LEFT.name == orig(org.jfree.chart.text.TextAnchor.CENTER_LEFT.name)
org.jfree.chart.text.TextAnchor.CENTER_LEFT.name.toString == orig(org.jfree.chart.text.TextAnchor.CENTER_LEFT.name.toString)
org.jfree.chart.text.TextAnchor.CENTER.name == orig(org.jfree.chart.text.TextAnchor.CENTER.name)
org.jfree.chart.text.TextAnchor.CENTER.name.toString == orig(org.jfree.chart.text.TextAnchor.CENTER.name.toString)
org.jfree.chart.text.TextAnchor.CENTER_RIGHT.name == orig(org.jfree.chart.text.TextAnchor.CENTER_RIGHT.name)
org.jfree.chart.text.TextAnchor.CENTER_RIGHT.name.toString == orig(org.jfree.chart.text.TextAnchor.CENTER_RIGHT.name.toString)
org.jfree.chart.text.TextAnchor.BASELINE_LEFT.name == orig(org.jfree.chart.text.TextAnchor.BASELINE_LEFT.name)
org.jfree.chart.text.TextAnchor.BASELINE_LEFT.name.toString == orig(org.jfree.chart.text.TextAnchor.BASELINE_LEFT.name.toString)
org.jfree.chart.text.TextAnchor.BASELINE_CENTER.name == orig(org.jfree.chart.text.TextAnchor.BASELINE_CENTER.name)
org.jfree.chart.text.TextAnchor.BASELINE_CENTER.name.toString == orig(org.jfree.chart.text.TextAnchor.BASELINE_CENTER.name.toString)
org.jfree.chart.text.TextAnchor.BASELINE_RIGHT.name == orig(org.jfree.chart.text.TextAnchor.BASELINE_RIGHT.name)
org.jfree.chart.text.TextAnchor.BASELINE_RIGHT.name.toString == orig(org.jfree.chart.text.TextAnchor.BASELINE_RIGHT.name.toString)
org.jfree.chart.text.TextAnchor.BOTTOM_LEFT.name == orig(org.jfree.chart.text.TextAnchor.BOTTOM_LEFT.name)
org.jfree.chart.text.TextAnchor.BOTTOM_LEFT.name.toString == orig(org.jfree.chart.text.TextAnchor.BOTTOM_LEFT.name.toString)
org.jfree.chart.text.TextAnchor.BOTTOM_CENTER.name == orig(org.jfree.chart.text.TextAnchor.BOTTOM_CENTER.name)
org.jfree.chart.text.TextAnchor.BOTTOM_CENTER.name.toString == orig(org.jfree.chart.text.TextAnchor.BOTTOM_CENTER.name.toString)
org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT.name == orig(org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT.name)
org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT.name.toString == orig(org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT.name.toString)
anchor.name == orig(anchor.name)
anchor.name.toString == orig(anchor.name.toString)
org.jfree.chart.text.TextAnchor.TOP_LEFT has only one value
org.jfree.chart.text.TextAnchor.TOP_CENTER has only one value
org.jfree.chart.text.TextAnchor.TOP_RIGHT has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT has only one value
org.jfree.chart.text.TextAnchor.CENTER_LEFT has only one value
org.jfree.chart.text.TextAnchor.CENTER has only one value
org.jfree.chart.text.TextAnchor.CENTER_RIGHT has only one value
org.jfree.chart.text.TextAnchor.BASELINE_LEFT has only one value
org.jfree.chart.text.TextAnchor.BASELINE_CENTER has only one value
org.jfree.chart.text.TextAnchor.BASELINE_RIGHT has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_LEFT has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_CENTER has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT has only one value
org.jfree.chart.text.TextAnchor.TOP_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.TOP_LEFT.name.toString == "TextAnchor.TOP_LEFT"
org.jfree.chart.text.TextAnchor.TOP_CENTER.name has only one value
org.jfree.chart.text.TextAnchor.TOP_CENTER.name.toString == "TextAnchor.TOP_CENTER"
org.jfree.chart.text.TextAnchor.TOP_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.TOP_RIGHT.name.toString == "TextAnchor.TOP_RIGHT"
org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT.name.toString == "TextAnchor.HALF_ASCENT_LEFT"
org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER.name has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER.name.toString == "TextAnchor.HALF_ASCENT_CENTER"
org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT.name.toString == "TextAnchor.HALF_ASCENT_RIGHT"
org.jfree.chart.text.TextAnchor.CENTER_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.CENTER_LEFT.name.toString == "TextAnchor.CENTER_LEFT"
org.jfree.chart.text.TextAnchor.CENTER.name has only one value
org.jfree.chart.text.TextAnchor.CENTER.name.toString == "TextAnchor.CENTER"
org.jfree.chart.text.TextAnchor.CENTER_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.CENTER_RIGHT.name.toString == "TextAnchor.CENTER_RIGHT"
org.jfree.chart.text.TextAnchor.BASELINE_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.BASELINE_LEFT.name.toString == "TextAnchor.BASELINE_LEFT"
org.jfree.chart.text.TextAnchor.BASELINE_CENTER.name has only one value
org.jfree.chart.text.TextAnchor.BASELINE_CENTER.name.toString == "TextAnchor.BASELINE_CENTER"
org.jfree.chart.text.TextAnchor.BASELINE_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.BASELINE_RIGHT.name.toString == "TextAnchor.BASELINE_RIGHT"
org.jfree.chart.text.TextAnchor.BOTTOM_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_LEFT.name.toString == "TextAnchor.BOTTOM_LEFT"
org.jfree.chart.text.TextAnchor.BOTTOM_CENTER.name has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_CENTER.name.toString == "TextAnchor.BOTTOM_CENTER"
org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT.name.toString == "TextAnchor.BOTTOM_RIGHT"
anchor.name has only one value
anchor.name.toString == "TextAnchor.TOP_LEFT"
===========================================================================
org.jfree.chart.text.TextUtilities:::CLASS
org.jfree.chart.text.TextUtilities.useDrawRotatedStringWorkaround == false
org.jfree.chart.text.TextUtilities.useFontMetricsGetStringBounds == true
===========================================================================
org.jfree.chart.text.TextUtilities.createTextBlock(java.lang.String, java.awt.Font, java.awt.Paint):::ENTER
text.toString one of { "Section 1", "Section 2", "Section 3" }
font has only one value
paint has only one value
paint.getClass().getName() == java.awt.Color.class
===========================================================================
org.jfree.chart.text.TextUtilities.createTextBlock(java.lang.String, java.awt.Font, java.awt.Paint):::EXIT
org.jfree.chart.text.TextUtilities.useDrawRotatedStringWorkaround == orig(org.jfree.chart.text.TextUtilities.useDrawRotatedStringWorkaround)
org.jfree.chart.text.TextUtilities.useFontMetricsGetStringBounds == orig(org.jfree.chart.text.TextUtilities.useFontMetricsGetStringBounds)
text.toString == orig(text.toString)
text.toString one of { "Section 1", "Section 2", "Section 3" }
return.lines[].getClass().getName() == [org.jfree.chart.text.TextLine]
return.lines[].getClass().getName() elements == org.jfree.chart.text.TextLine.class
return.lines.getClass().getName() == java.util.ArrayList.class
return.lineAlignment has only one value
org.jfree.chart.util.HorizontalAlignment.LEFT has only one value
org.jfree.chart.util.HorizontalAlignment.RIGHT has only one value
org.jfree.chart.util.HorizontalAlignment.CENTER has only one value
return.lineAlignment.name has only one value
return.lineAlignment.name.toString == "HorizontalAlignment.CENTER"
size(return.lines[]) == 1
===========================================================================
org.jfree.chart.text.TextUtilities.createTextBlock(java.lang.String, java.awt.Font, java.awt.Paint, float, int, org.jfree.chart.text.TextMeasurer):::ENTER
text.toString one of { "Pie Chart", "Test" }
font has only one value
paint has only one value
paint.getClass().getName() == java.awt.Color.class
maxWidth == 198.0
maxLines == 2147483647
measurer.getClass().getName() == org.jfree.chart.text.G2TextMeasurer.class
===========================================================================
org.jfree.chart.text.TextUtilities.createTextBlock(java.lang.String, java.awt.Font, java.awt.Paint, float, int, org.jfree.chart.text.TextMeasurer):::EXIT197
===========================================================================
org.jfree.chart.text.TextUtilities.createTextBlock(java.lang.String, java.awt.Font, java.awt.Paint, float, int, org.jfree.chart.text.TextMeasurer):::EXIT
org.jfree.chart.text.TextUtilities.useDrawRotatedStringWorkaround == orig(org.jfree.chart.text.TextUtilities.useDrawRotatedStringWorkaround)
org.jfree.chart.text.TextUtilities.useFontMetricsGetStringBounds == orig(org.jfree.chart.text.TextUtilities.useFontMetricsGetStringBounds)
text.toString == orig(text.toString)
text.toString one of { "Pie Chart", "Test" }
return.lines[].getClass().getName() == [org.jfree.chart.text.TextLine]
return.lines[].getClass().getName() elements == org.jfree.chart.text.TextLine.class
return.lines.getClass().getName() == java.util.ArrayList.class
return.lineAlignment has only one value
org.jfree.chart.util.HorizontalAlignment.LEFT has only one value
org.jfree.chart.util.HorizontalAlignment.RIGHT has only one value
org.jfree.chart.util.HorizontalAlignment.CENTER has only one value
return.lineAlignment.name has only one value
return.lineAlignment.name.toString == "HorizontalAlignment.CENTER"
size(return.lines[]) == 1
===========================================================================
org.jfree.chart.text.TextUtilities.createTextBlock(java.lang.String, java.awt.Font, java.awt.Paint, float, org.jfree.chart.text.TextMeasurer):::ENTER
text.toString one of { "Pie Chart", "Test" }
font has only one value
paint has only one value
paint.getClass().getName() == java.awt.Color.class
maxWidth == 198.0
measurer.getClass().getName() == org.jfree.chart.text.G2TextMeasurer.class
===========================================================================
org.jfree.chart.text.TextUtilities.createTextBlock(java.lang.String, java.awt.Font, java.awt.Paint, float, org.jfree.chart.text.TextMeasurer):::EXIT
org.jfree.chart.text.TextUtilities.useDrawRotatedStringWorkaround == orig(org.jfree.chart.text.TextUtilities.useDrawRotatedStringWorkaround)
org.jfree.chart.text.TextUtilities.useFontMetricsGetStringBounds == orig(org.jfree.chart.text.TextUtilities.useFontMetricsGetStringBounds)
text.toString == orig(text.toString)
text.toString one of { "Pie Chart", "Test" }
return.lines[].getClass().getName() == [org.jfree.chart.text.TextLine]
return.lines[].getClass().getName() elements == org.jfree.chart.text.TextLine.class
return.lines.getClass().getName() == java.util.ArrayList.class
return.lineAlignment has only one value
org.jfree.chart.util.HorizontalAlignment.LEFT has only one value
org.jfree.chart.util.HorizontalAlignment.RIGHT has only one value
org.jfree.chart.util.HorizontalAlignment.CENTER has only one value
return.lineAlignment.name has only one value
return.lineAlignment.name.toString == "HorizontalAlignment.CENTER"
size(return.lines[]) == 1
===========================================================================
org.jfree.chart.text.TextUtilities.deriveTextBoundsAnchorOffsets(java.awt.Graphics2D, java.lang.String, org.jfree.chart.text.TextAnchor):::ENTER
g2.getClass().getName() == sun.java2d.SunGraphics2D.class
anchor has only one value
org.jfree.chart.text.TextAnchor.TOP_LEFT has only one value
org.jfree.chart.text.TextAnchor.TOP_CENTER has only one value
org.jfree.chart.text.TextAnchor.TOP_RIGHT has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT has only one value
org.jfree.chart.text.TextAnchor.CENTER_LEFT has only one value
org.jfree.chart.text.TextAnchor.CENTER has only one value
org.jfree.chart.text.TextAnchor.CENTER_RIGHT has only one value
org.jfree.chart.text.TextAnchor.BASELINE_LEFT has only one value
org.jfree.chart.text.TextAnchor.BASELINE_CENTER has only one value
org.jfree.chart.text.TextAnchor.BASELINE_RIGHT has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_LEFT has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_CENTER has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT has only one value
org.jfree.chart.text.TextAnchor.TOP_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.TOP_LEFT.name.toString == "TextAnchor.TOP_LEFT"
org.jfree.chart.text.TextAnchor.TOP_CENTER.name has only one value
org.jfree.chart.text.TextAnchor.TOP_CENTER.name.toString == "TextAnchor.TOP_CENTER"
org.jfree.chart.text.TextAnchor.TOP_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.TOP_RIGHT.name.toString == "TextAnchor.TOP_RIGHT"
org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT.name.toString == "TextAnchor.HALF_ASCENT_LEFT"
org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER.name has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER.name.toString == "TextAnchor.HALF_ASCENT_CENTER"
org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT.name.toString == "TextAnchor.HALF_ASCENT_RIGHT"
org.jfree.chart.text.TextAnchor.CENTER_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.CENTER_LEFT.name.toString == "TextAnchor.CENTER_LEFT"
org.jfree.chart.text.TextAnchor.CENTER.name has only one value
org.jfree.chart.text.TextAnchor.CENTER.name.toString == "TextAnchor.CENTER"
org.jfree.chart.text.TextAnchor.CENTER_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.CENTER_RIGHT.name.toString == "TextAnchor.CENTER_RIGHT"
org.jfree.chart.text.TextAnchor.BASELINE_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.BASELINE_LEFT.name.toString == "TextAnchor.BASELINE_LEFT"
org.jfree.chart.text.TextAnchor.BASELINE_CENTER.name has only one value
org.jfree.chart.text.TextAnchor.BASELINE_CENTER.name.toString == "TextAnchor.BASELINE_CENTER"
org.jfree.chart.text.TextAnchor.BASELINE_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.BASELINE_RIGHT.name.toString == "TextAnchor.BASELINE_RIGHT"
org.jfree.chart.text.TextAnchor.BOTTOM_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_LEFT.name.toString == "TextAnchor.BOTTOM_LEFT"
org.jfree.chart.text.TextAnchor.BOTTOM_CENTER.name has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_CENTER.name.toString == "TextAnchor.BOTTOM_CENTER"
org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT.name.toString == "TextAnchor.BOTTOM_RIGHT"
anchor.name has only one value
anchor.name.toString == "TextAnchor.BASELINE_LEFT"
===========================================================================
org.jfree.chart.text.TextUtilities.deriveTextBoundsAnchorOffsets(java.awt.Graphics2D, java.lang.String, org.jfree.chart.text.TextAnchor):::EXIT
org.jfree.chart.text.TextUtilities.useDrawRotatedStringWorkaround == orig(org.jfree.chart.text.TextUtilities.useDrawRotatedStringWorkaround)
org.jfree.chart.text.TextUtilities.useFontMetricsGetStringBounds == orig(org.jfree.chart.text.TextUtilities.useFontMetricsGetStringBounds)
text.toString == orig(text.toString)
org.jfree.chart.text.TextAnchor.TOP_LEFT == orig(org.jfree.chart.text.TextAnchor.TOP_LEFT)
org.jfree.chart.text.TextAnchor.TOP_CENTER == orig(org.jfree.chart.text.TextAnchor.TOP_CENTER)
org.jfree.chart.text.TextAnchor.TOP_RIGHT == orig(org.jfree.chart.text.TextAnchor.TOP_RIGHT)
org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT == orig(org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT)
org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER == orig(org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER)
org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT == orig(org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT)
org.jfree.chart.text.TextAnchor.CENTER_LEFT == orig(org.jfree.chart.text.TextAnchor.CENTER_LEFT)
org.jfree.chart.text.TextAnchor.CENTER == orig(org.jfree.chart.text.TextAnchor.CENTER)
org.jfree.chart.text.TextAnchor.CENTER_RIGHT == orig(org.jfree.chart.text.TextAnchor.CENTER_RIGHT)
org.jfree.chart.text.TextAnchor.BASELINE_LEFT == orig(org.jfree.chart.text.TextAnchor.BASELINE_LEFT)
org.jfree.chart.text.TextAnchor.BASELINE_CENTER == orig(org.jfree.chart.text.TextAnchor.BASELINE_CENTER)
org.jfree.chart.text.TextAnchor.BASELINE_RIGHT == orig(org.jfree.chart.text.TextAnchor.BASELINE_RIGHT)
org.jfree.chart.text.TextAnchor.BOTTOM_LEFT == orig(org.jfree.chart.text.TextAnchor.BOTTOM_LEFT)
org.jfree.chart.text.TextAnchor.BOTTOM_CENTER == orig(org.jfree.chart.text.TextAnchor.BOTTOM_CENTER)
org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT == orig(org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT)
org.jfree.chart.text.TextAnchor.TOP_LEFT.name == orig(org.jfree.chart.text.TextAnchor.TOP_LEFT.name)
org.jfree.chart.text.TextAnchor.TOP_LEFT.name.toString == orig(org.jfree.chart.text.TextAnchor.TOP_LEFT.name.toString)
org.jfree.chart.text.TextAnchor.TOP_CENTER.name == orig(org.jfree.chart.text.TextAnchor.TOP_CENTER.name)
org.jfree.chart.text.TextAnchor.TOP_CENTER.name.toString == orig(org.jfree.chart.text.TextAnchor.TOP_CENTER.name.toString)
org.jfree.chart.text.TextAnchor.TOP_RIGHT.name == orig(org.jfree.chart.text.TextAnchor.TOP_RIGHT.name)
org.jfree.chart.text.TextAnchor.TOP_RIGHT.name.toString == orig(org.jfree.chart.text.TextAnchor.TOP_RIGHT.name.toString)
org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT.name == orig(org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT.name)
org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT.name.toString == orig(org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT.name.toString)
org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER.name == orig(org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER.name)
org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER.name.toString == orig(org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER.name.toString)
org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT.name == orig(org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT.name)
org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT.name.toString == orig(org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT.name.toString)
org.jfree.chart.text.TextAnchor.CENTER_LEFT.name == orig(org.jfree.chart.text.TextAnchor.CENTER_LEFT.name)
org.jfree.chart.text.TextAnchor.CENTER_LEFT.name.toString == orig(org.jfree.chart.text.TextAnchor.CENTER_LEFT.name.toString)
org.jfree.chart.text.TextAnchor.CENTER.name == orig(org.jfree.chart.text.TextAnchor.CENTER.name)
org.jfree.chart.text.TextAnchor.CENTER.name.toString == orig(org.jfree.chart.text.TextAnchor.CENTER.name.toString)
org.jfree.chart.text.TextAnchor.CENTER_RIGHT.name == orig(org.jfree.chart.text.TextAnchor.CENTER_RIGHT.name)
org.jfree.chart.text.TextAnchor.CENTER_RIGHT.name.toString == orig(org.jfree.chart.text.TextAnchor.CENTER_RIGHT.name.toString)
org.jfree.chart.text.TextAnchor.BASELINE_LEFT.name == orig(org.jfree.chart.text.TextAnchor.BASELINE_LEFT.name)
org.jfree.chart.text.TextAnchor.BASELINE_LEFT.name.toString == orig(org.jfree.chart.text.TextAnchor.BASELINE_LEFT.name.toString)
org.jfree.chart.text.TextAnchor.BASELINE_CENTER.name == orig(org.jfree.chart.text.TextAnchor.BASELINE_CENTER.name)
org.jfree.chart.text.TextAnchor.BASELINE_CENTER.name.toString == orig(org.jfree.chart.text.TextAnchor.BASELINE_CENTER.name.toString)
org.jfree.chart.text.TextAnchor.BASELINE_RIGHT.name == orig(org.jfree.chart.text.TextAnchor.BASELINE_RIGHT.name)
org.jfree.chart.text.TextAnchor.BASELINE_RIGHT.name.toString == orig(org.jfree.chart.text.TextAnchor.BASELINE_RIGHT.name.toString)
org.jfree.chart.text.TextAnchor.BOTTOM_LEFT.name == orig(org.jfree.chart.text.TextAnchor.BOTTOM_LEFT.name)
org.jfree.chart.text.TextAnchor.BOTTOM_LEFT.name.toString == orig(org.jfree.chart.text.TextAnchor.BOTTOM_LEFT.name.toString)
org.jfree.chart.text.TextAnchor.BOTTOM_CENTER.name == orig(org.jfree.chart.text.TextAnchor.BOTTOM_CENTER.name)
org.jfree.chart.text.TextAnchor.BOTTOM_CENTER.name.toString == orig(org.jfree.chart.text.TextAnchor.BOTTOM_CENTER.name.toString)
org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT.name == orig(org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT.name)
org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT.name.toString == orig(org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT.name.toString)
anchor.name == orig(anchor.name)
anchor.name.toString == orig(anchor.name.toString)
org.jfree.chart.text.TextAnchor.TOP_LEFT has only one value
org.jfree.chart.text.TextAnchor.TOP_CENTER has only one value
org.jfree.chart.text.TextAnchor.TOP_RIGHT has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT has only one value
org.jfree.chart.text.TextAnchor.CENTER_LEFT has only one value
org.jfree.chart.text.TextAnchor.CENTER has only one value
org.jfree.chart.text.TextAnchor.CENTER_RIGHT has only one value
org.jfree.chart.text.TextAnchor.BASELINE_LEFT has only one value
org.jfree.chart.text.TextAnchor.BASELINE_CENTER has only one value
org.jfree.chart.text.TextAnchor.BASELINE_RIGHT has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_LEFT has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_CENTER has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT has only one value
org.jfree.chart.text.TextAnchor.TOP_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.TOP_LEFT.name.toString == "TextAnchor.TOP_LEFT"
org.jfree.chart.text.TextAnchor.TOP_CENTER.name has only one value
org.jfree.chart.text.TextAnchor.TOP_CENTER.name.toString == "TextAnchor.TOP_CENTER"
org.jfree.chart.text.TextAnchor.TOP_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.TOP_RIGHT.name.toString == "TextAnchor.TOP_RIGHT"
org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT.name.toString == "TextAnchor.HALF_ASCENT_LEFT"
org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER.name has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER.name.toString == "TextAnchor.HALF_ASCENT_CENTER"
org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT.name.toString == "TextAnchor.HALF_ASCENT_RIGHT"
org.jfree.chart.text.TextAnchor.CENTER_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.CENTER_LEFT.name.toString == "TextAnchor.CENTER_LEFT"
org.jfree.chart.text.TextAnchor.CENTER.name has only one value
org.jfree.chart.text.TextAnchor.CENTER.name.toString == "TextAnchor.CENTER"
org.jfree.chart.text.TextAnchor.CENTER_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.CENTER_RIGHT.name.toString == "TextAnchor.CENTER_RIGHT"
org.jfree.chart.text.TextAnchor.BASELINE_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.BASELINE_LEFT.name.toString == "TextAnchor.BASELINE_LEFT"
org.jfree.chart.text.TextAnchor.BASELINE_CENTER.name has only one value
org.jfree.chart.text.TextAnchor.BASELINE_CENTER.name.toString == "TextAnchor.BASELINE_CENTER"
org.jfree.chart.text.TextAnchor.BASELINE_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.BASELINE_RIGHT.name.toString == "TextAnchor.BASELINE_RIGHT"
org.jfree.chart.text.TextAnchor.BOTTOM_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_LEFT.name.toString == "TextAnchor.BOTTOM_LEFT"
org.jfree.chart.text.TextAnchor.BOTTOM_CENTER.name has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_CENTER.name.toString == "TextAnchor.BOTTOM_CENTER"
org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT.name.toString == "TextAnchor.BOTTOM_RIGHT"
anchor.name has only one value
anchor.name.toString == "TextAnchor.BASELINE_LEFT"
return[] == [0.0, 0.0]
return[] elements == 0.0
size(return[]) == 2
===========================================================================
org.jfree.chart.text.TextUtilities.drawRotatedString(java.lang.String, java.awt.Graphics2D, float, float, double, float, float):::ENTER
g2.getClass().getName() == sun.java2d.SunGraphics2D.class
textY one of { 17.708008, 72.20117, 92.16992 }
angle == 0.0
rotateX == 0.0
rotateY == 0.0
===========================================================================
org.jfree.chart.text.TextUtilities.drawRotatedString(java.lang.String, java.awt.Graphics2D, float, float, double, float, float):::EXIT499
===========================================================================
org.jfree.chart.text.TextUtilities.drawRotatedString(java.lang.String, java.awt.Graphics2D, float, float, double, float, float):::EXIT
org.jfree.chart.text.TextUtilities.useDrawRotatedStringWorkaround == orig(org.jfree.chart.text.TextUtilities.useDrawRotatedStringWorkaround)
org.jfree.chart.text.TextUtilities.useFontMetricsGetStringBounds == orig(org.jfree.chart.text.TextUtilities.useFontMetricsGetStringBounds)
text.toString == orig(text.toString)
===========================================================================
org.jfree.chart.text.TextUtilities.drawRotatedString(java.lang.String, java.awt.Graphics2D, float, float, org.jfree.chart.text.TextAnchor, double, float, float):::ENTER
g2.getClass().getName() == sun.java2d.SunGraphics2D.class
y one of { 17.708008, 72.20117, 92.16992 }
textAnchor has only one value
org.jfree.chart.text.TextAnchor.TOP_LEFT has only one value
org.jfree.chart.text.TextAnchor.TOP_CENTER has only one value
org.jfree.chart.text.TextAnchor.TOP_RIGHT has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT has only one value
org.jfree.chart.text.TextAnchor.CENTER_LEFT has only one value
org.jfree.chart.text.TextAnchor.CENTER has only one value
org.jfree.chart.text.TextAnchor.CENTER_RIGHT has only one value
org.jfree.chart.text.TextAnchor.BASELINE_LEFT has only one value
org.jfree.chart.text.TextAnchor.BASELINE_CENTER has only one value
org.jfree.chart.text.TextAnchor.BASELINE_RIGHT has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_LEFT has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_CENTER has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT has only one value
org.jfree.chart.text.TextAnchor.TOP_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.TOP_LEFT.name.toString == "TextAnchor.TOP_LEFT"
org.jfree.chart.text.TextAnchor.TOP_CENTER.name has only one value
org.jfree.chart.text.TextAnchor.TOP_CENTER.name.toString == "TextAnchor.TOP_CENTER"
org.jfree.chart.text.TextAnchor.TOP_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.TOP_RIGHT.name.toString == "TextAnchor.TOP_RIGHT"
org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT.name.toString == "TextAnchor.HALF_ASCENT_LEFT"
org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER.name has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER.name.toString == "TextAnchor.HALF_ASCENT_CENTER"
org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT.name.toString == "TextAnchor.HALF_ASCENT_RIGHT"
org.jfree.chart.text.TextAnchor.CENTER_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.CENTER_LEFT.name.toString == "TextAnchor.CENTER_LEFT"
org.jfree.chart.text.TextAnchor.CENTER.name has only one value
org.jfree.chart.text.TextAnchor.CENTER.name.toString == "TextAnchor.CENTER"
org.jfree.chart.text.TextAnchor.CENTER_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.CENTER_RIGHT.name.toString == "TextAnchor.CENTER_RIGHT"
org.jfree.chart.text.TextAnchor.BASELINE_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.BASELINE_LEFT.name.toString == "TextAnchor.BASELINE_LEFT"
org.jfree.chart.text.TextAnchor.BASELINE_CENTER.name has only one value
org.jfree.chart.text.TextAnchor.BASELINE_CENTER.name.toString == "TextAnchor.BASELINE_CENTER"
org.jfree.chart.text.TextAnchor.BASELINE_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.BASELINE_RIGHT.name.toString == "TextAnchor.BASELINE_RIGHT"
org.jfree.chart.text.TextAnchor.BOTTOM_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_LEFT.name.toString == "TextAnchor.BOTTOM_LEFT"
org.jfree.chart.text.TextAnchor.BOTTOM_CENTER.name has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_CENTER.name.toString == "TextAnchor.BOTTOM_CENTER"
org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT.name.toString == "TextAnchor.BOTTOM_RIGHT"
textAnchor.name has only one value
textAnchor.name.toString == "TextAnchor.BASELINE_LEFT"
angle == 0.0
rotationX == 0.0
rotationY == 0.0
===========================================================================
org.jfree.chart.text.TextUtilities.drawRotatedString(java.lang.String, java.awt.Graphics2D, float, float, org.jfree.chart.text.TextAnchor, double, float, float):::EXIT524
===========================================================================
org.jfree.chart.text.TextUtilities.drawRotatedString(java.lang.String, java.awt.Graphics2D, float, float, org.jfree.chart.text.TextAnchor, double, float, float):::EXIT
org.jfree.chart.text.TextUtilities.useDrawRotatedStringWorkaround == orig(org.jfree.chart.text.TextUtilities.useDrawRotatedStringWorkaround)
org.jfree.chart.text.TextUtilities.useFontMetricsGetStringBounds == orig(org.jfree.chart.text.TextUtilities.useFontMetricsGetStringBounds)
text.toString == orig(text.toString)
org.jfree.chart.text.TextAnchor.TOP_LEFT == orig(org.jfree.chart.text.TextAnchor.TOP_LEFT)
org.jfree.chart.text.TextAnchor.TOP_CENTER == orig(org.jfree.chart.text.TextAnchor.TOP_CENTER)
org.jfree.chart.text.TextAnchor.TOP_RIGHT == orig(org.jfree.chart.text.TextAnchor.TOP_RIGHT)
org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT == orig(org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT)
org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER == orig(org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER)
org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT == orig(org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT)
org.jfree.chart.text.TextAnchor.CENTER_LEFT == orig(org.jfree.chart.text.TextAnchor.CENTER_LEFT)
org.jfree.chart.text.TextAnchor.CENTER == orig(org.jfree.chart.text.TextAnchor.CENTER)
org.jfree.chart.text.TextAnchor.CENTER_RIGHT == orig(org.jfree.chart.text.TextAnchor.CENTER_RIGHT)
org.jfree.chart.text.TextAnchor.BASELINE_LEFT == orig(org.jfree.chart.text.TextAnchor.BASELINE_LEFT)
org.jfree.chart.text.TextAnchor.BASELINE_CENTER == orig(org.jfree.chart.text.TextAnchor.BASELINE_CENTER)
org.jfree.chart.text.TextAnchor.BASELINE_RIGHT == orig(org.jfree.chart.text.TextAnchor.BASELINE_RIGHT)
org.jfree.chart.text.TextAnchor.BOTTOM_LEFT == orig(org.jfree.chart.text.TextAnchor.BOTTOM_LEFT)
org.jfree.chart.text.TextAnchor.BOTTOM_CENTER == orig(org.jfree.chart.text.TextAnchor.BOTTOM_CENTER)
org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT == orig(org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT)
org.jfree.chart.text.TextAnchor.TOP_LEFT.name == orig(org.jfree.chart.text.TextAnchor.TOP_LEFT.name)
org.jfree.chart.text.TextAnchor.TOP_LEFT.name.toString == orig(org.jfree.chart.text.TextAnchor.TOP_LEFT.name.toString)
org.jfree.chart.text.TextAnchor.TOP_CENTER.name == orig(org.jfree.chart.text.TextAnchor.TOP_CENTER.name)
org.jfree.chart.text.TextAnchor.TOP_CENTER.name.toString == orig(org.jfree.chart.text.TextAnchor.TOP_CENTER.name.toString)
org.jfree.chart.text.TextAnchor.TOP_RIGHT.name == orig(org.jfree.chart.text.TextAnchor.TOP_RIGHT.name)
org.jfree.chart.text.TextAnchor.TOP_RIGHT.name.toString == orig(org.jfree.chart.text.TextAnchor.TOP_RIGHT.name.toString)
org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT.name == orig(org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT.name)
org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT.name.toString == orig(org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT.name.toString)
org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER.name == orig(org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER.name)
org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER.name.toString == orig(org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER.name.toString)
org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT.name == orig(org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT.name)
org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT.name.toString == orig(org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT.name.toString)
org.jfree.chart.text.TextAnchor.CENTER_LEFT.name == orig(org.jfree.chart.text.TextAnchor.CENTER_LEFT.name)
org.jfree.chart.text.TextAnchor.CENTER_LEFT.name.toString == orig(org.jfree.chart.text.TextAnchor.CENTER_LEFT.name.toString)
org.jfree.chart.text.TextAnchor.CENTER.name == orig(org.jfree.chart.text.TextAnchor.CENTER.name)
org.jfree.chart.text.TextAnchor.CENTER.name.toString == orig(org.jfree.chart.text.TextAnchor.CENTER.name.toString)
org.jfree.chart.text.TextAnchor.CENTER_RIGHT.name == orig(org.jfree.chart.text.TextAnchor.CENTER_RIGHT.name)
org.jfree.chart.text.TextAnchor.CENTER_RIGHT.name.toString == orig(org.jfree.chart.text.TextAnchor.CENTER_RIGHT.name.toString)
org.jfree.chart.text.TextAnchor.BASELINE_LEFT.name == orig(org.jfree.chart.text.TextAnchor.BASELINE_LEFT.name)
org.jfree.chart.text.TextAnchor.BASELINE_LEFT.name.toString == orig(org.jfree.chart.text.TextAnchor.BASELINE_LEFT.name.toString)
org.jfree.chart.text.TextAnchor.BASELINE_CENTER.name == orig(org.jfree.chart.text.TextAnchor.BASELINE_CENTER.name)
org.jfree.chart.text.TextAnchor.BASELINE_CENTER.name.toString == orig(org.jfree.chart.text.TextAnchor.BASELINE_CENTER.name.toString)
org.jfree.chart.text.TextAnchor.BASELINE_RIGHT.name == orig(org.jfree.chart.text.TextAnchor.BASELINE_RIGHT.name)
org.jfree.chart.text.TextAnchor.BASELINE_RIGHT.name.toString == orig(org.jfree.chart.text.TextAnchor.BASELINE_RIGHT.name.toString)
org.jfree.chart.text.TextAnchor.BOTTOM_LEFT.name == orig(org.jfree.chart.text.TextAnchor.BOTTOM_LEFT.name)
org.jfree.chart.text.TextAnchor.BOTTOM_LEFT.name.toString == orig(org.jfree.chart.text.TextAnchor.BOTTOM_LEFT.name.toString)
org.jfree.chart.text.TextAnchor.BOTTOM_CENTER.name == orig(org.jfree.chart.text.TextAnchor.BOTTOM_CENTER.name)
org.jfree.chart.text.TextAnchor.BOTTOM_CENTER.name.toString == orig(org.jfree.chart.text.TextAnchor.BOTTOM_CENTER.name.toString)
org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT.name == orig(org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT.name)
org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT.name.toString == orig(org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT.name.toString)
textAnchor.name == orig(textAnchor.name)
textAnchor.name.toString == orig(textAnchor.name.toString)
org.jfree.chart.text.TextAnchor.TOP_LEFT has only one value
org.jfree.chart.text.TextAnchor.TOP_CENTER has only one value
org.jfree.chart.text.TextAnchor.TOP_RIGHT has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT has only one value
org.jfree.chart.text.TextAnchor.CENTER_LEFT has only one value
org.jfree.chart.text.TextAnchor.CENTER has only one value
org.jfree.chart.text.TextAnchor.CENTER_RIGHT has only one value
org.jfree.chart.text.TextAnchor.BASELINE_LEFT has only one value
org.jfree.chart.text.TextAnchor.BASELINE_CENTER has only one value
org.jfree.chart.text.TextAnchor.BASELINE_RIGHT has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_LEFT has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_CENTER has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT has only one value
org.jfree.chart.text.TextAnchor.TOP_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.TOP_LEFT.name.toString == "TextAnchor.TOP_LEFT"
org.jfree.chart.text.TextAnchor.TOP_CENTER.name has only one value
org.jfree.chart.text.TextAnchor.TOP_CENTER.name.toString == "TextAnchor.TOP_CENTER"
org.jfree.chart.text.TextAnchor.TOP_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.TOP_RIGHT.name.toString == "TextAnchor.TOP_RIGHT"
org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT.name.toString == "TextAnchor.HALF_ASCENT_LEFT"
org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER.name has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER.name.toString == "TextAnchor.HALF_ASCENT_CENTER"
org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT.name.toString == "TextAnchor.HALF_ASCENT_RIGHT"
org.jfree.chart.text.TextAnchor.CENTER_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.CENTER_LEFT.name.toString == "TextAnchor.CENTER_LEFT"
org.jfree.chart.text.TextAnchor.CENTER.name has only one value
org.jfree.chart.text.TextAnchor.CENTER.name.toString == "TextAnchor.CENTER"
org.jfree.chart.text.TextAnchor.CENTER_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.CENTER_RIGHT.name.toString == "TextAnchor.CENTER_RIGHT"
org.jfree.chart.text.TextAnchor.BASELINE_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.BASELINE_LEFT.name.toString == "TextAnchor.BASELINE_LEFT"
org.jfree.chart.text.TextAnchor.BASELINE_CENTER.name has only one value
org.jfree.chart.text.TextAnchor.BASELINE_CENTER.name.toString == "TextAnchor.BASELINE_CENTER"
org.jfree.chart.text.TextAnchor.BASELINE_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.BASELINE_RIGHT.name.toString == "TextAnchor.BASELINE_RIGHT"
org.jfree.chart.text.TextAnchor.BOTTOM_LEFT.name has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_LEFT.name.toString == "TextAnchor.BOTTOM_LEFT"
org.jfree.chart.text.TextAnchor.BOTTOM_CENTER.name has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_CENTER.name.toString == "TextAnchor.BOTTOM_CENTER"
org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT.name has only one value
org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT.name.toString == "TextAnchor.BOTTOM_RIGHT"
textAnchor.name has only one value
textAnchor.name.toString == "TextAnchor.BASELINE_LEFT"
===========================================================================
org.jfree.chart.text.TextUtilities.getTextBounds(java.lang.String, java.awt.Graphics2D, java.awt.FontMetrics):::ENTER
text != null
g2 != null
g2.getClass().getName() == sun.java2d.SunGraphics2D.class
fm != null
fm.getClass().getName() == sun.font.FontDesignMetrics.class
g2.getClass().getName() != fm.getClass().getName()
===========================================================================
org.jfree.chart.text.TextUtilities.getTextBounds(java.lang.String, java.awt.Graphics2D, java.awt.FontMetrics):::EXIT
org.jfree.chart.text.TextUtilities.useDrawRotatedStringWorkaround == orig(org.jfree.chart.text.TextUtilities.useDrawRotatedStringWorkaround)
org.jfree.chart.text.TextUtilities.useFontMetricsGetStringBounds == orig(org.jfree.chart.text.TextUtilities.useFontMetricsGetStringBounds)
text.toString == orig(text.toString)
return != null
return.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
return.getClass().getName() != orig(g2.getClass().getName())
return.getClass().getName() != orig(fm.getClass().getName())
===========================================================================
org.jfree.chart.text.TextUtilities.nextLineBreak(java.lang.String, int, float, java.text.BreakIterator, org.jfree.chart.text.TextMeasurer):::ENTER
text.toString one of { "Pie Chart", "Test" }
start == 0
width == 198.0
iterator.getClass().getName() == sun.util.locale.provider.RuleBasedBreakIterator.class
measurer.getClass().getName() == org.jfree.chart.text.G2TextMeasurer.class
===========================================================================
org.jfree.chart.text.TextUtilities.nextLineBreak(java.lang.String, int, float, java.text.BreakIterator, org.jfree.chart.text.TextMeasurer):::EXIT271
===========================================================================
org.jfree.chart.text.TextUtilities.nextLineBreak(java.lang.String, int, float, java.text.BreakIterator, org.jfree.chart.text.TextMeasurer):::EXIT
org.jfree.chart.text.TextUtilities.useDrawRotatedStringWorkaround == orig(org.jfree.chart.text.TextUtilities.useDrawRotatedStringWorkaround)
org.jfree.chart.text.TextUtilities.useFontMetricsGetStringBounds == orig(org.jfree.chart.text.TextUtilities.useFontMetricsGetStringBounds)
text.toString == orig(text.toString)
text.toString one of { "Pie Chart", "Test" }
return == -1
===========================================================================
org.jfree.chart.title.LegendGraphic:::CLASS
===========================================================================
org.jfree.chart.title.LegendGraphic:::OBJECT
this.shapeVisible == true
this.shape has only one value
this.shape != null
this.shape.getClass().getName() == java.awt.geom.Ellipse2D$Double.class
this.shapeLocation has only one value
this.shapeLocation != null
org.jfree.chart.util.RectangleAnchor.CENTER has only one value
org.jfree.chart.util.RectangleAnchor.CENTER != null
org.jfree.chart.util.RectangleAnchor.TOP has only one value
org.jfree.chart.util.RectangleAnchor.TOP != null
org.jfree.chart.util.RectangleAnchor.TOP_LEFT has only one value
org.jfree.chart.util.RectangleAnchor.TOP_LEFT != null
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT has only one value
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT != null
org.jfree.chart.util.RectangleAnchor.BOTTOM has only one value
org.jfree.chart.util.RectangleAnchor.BOTTOM != null
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT has only one value
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT != null
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT has only one value
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT != null
org.jfree.chart.util.RectangleAnchor.LEFT has only one value
org.jfree.chart.util.RectangleAnchor.LEFT != null
org.jfree.chart.util.RectangleAnchor.RIGHT has only one value
org.jfree.chart.util.RectangleAnchor.RIGHT != null
org.jfree.chart.util.RectangleAnchor.CENTER.name has only one value
org.jfree.chart.util.RectangleAnchor.CENTER.name != null
org.jfree.chart.util.RectangleAnchor.CENTER.name.toString == "RectangleAnchor.CENTER"
org.jfree.chart.util.RectangleAnchor.TOP.name has only one value
org.jfree.chart.util.RectangleAnchor.TOP.name != null
org.jfree.chart.util.RectangleAnchor.TOP.name.toString == "RectangleAnchor.TOP"
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name has only one value
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name != null
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name.toString == "RectangleAnchor.TOP_LEFT"
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name has only one value
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name != null
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name.toString == "RectangleAnchor.TOP_RIGHT"
org.jfree.chart.util.RectangleAnchor.BOTTOM.name has only one value
org.jfree.chart.util.RectangleAnchor.BOTTOM.name != null
org.jfree.chart.util.RectangleAnchor.BOTTOM.name.toString == "RectangleAnchor.BOTTOM"
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name has only one value
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name != null
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name.toString == "RectangleAnchor.BOTTOM_LEFT"
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name has only one value
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name != null
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name.toString == "RectangleAnchor.BOTTOM_RIGHT"
org.jfree.chart.util.RectangleAnchor.LEFT.name has only one value
org.jfree.chart.util.RectangleAnchor.LEFT.name != null
org.jfree.chart.util.RectangleAnchor.LEFT.name.toString == "RectangleAnchor.LEFT"
org.jfree.chart.util.RectangleAnchor.RIGHT.name has only one value
org.jfree.chart.util.RectangleAnchor.RIGHT.name != null
org.jfree.chart.util.RectangleAnchor.RIGHT.name.toString == "RectangleAnchor.RIGHT"
this.shapeLocation.name has only one value
this.shapeLocation.name != null
this.shapeLocation.name.toString == "RectangleAnchor.CENTER"
this.shapeAnchor has only one value
this.shapeAnchor != null
this.shapeAnchor.name has only one value
this.shapeAnchor.name != null
this.shapeAnchor.name.toString == "RectangleAnchor.CENTER"
this.shapeFilled == true
this.fillPaint != null
this.fillPaint.getClass().getName() == java.awt.Color.class
this.fillPaintTransformer != null
this.fillPaintTransformer.getClass().getName() == org.jfree.chart.util.StandardGradientPaintTransformer.class
this.outlinePaint.getClass().getName() == java.awt.Color.class
this.outlineStroke.getClass().getName() == java.awt.BasicStroke.class
this.lineVisible == false
this.line.getClass().getName() == java.awt.geom.Line2D$Float.class
this.lineStroke.getClass().getName() == java.awt.BasicStroke.class
this.linePaint.getClass().getName() == java.awt.Color.class
this.id == null
this.margin has only one value
this.margin != null
org.jfree.chart.util.RectangleInsets.ZERO_INSETS has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS != null
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType != null
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == 0.0
this.margin.unitType has only one value
this.margin.unitType != null
org.jfree.chart.util.UnitType.ABSOLUTE has only one value
org.jfree.chart.util.UnitType.ABSOLUTE != null
org.jfree.chart.util.UnitType.RELATIVE has only one value
org.jfree.chart.util.UnitType.RELATIVE != null
this.margin.unitType.name has only one value
this.margin.unitType.name != null
this.margin.unitType.name.toString == "UnitType.ABSOLUTE"
this.margin.top == 0.0
this.margin.left == 0.0
this.margin.bottom == 0.0
this.margin.right == 0.0
this.frame has only one value
this.frame != null
this.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class
this.padding != null
this.padding.unitType has only one value
this.padding.unitType != null
this.padding.unitType.name has only one value
this.padding.unitType.name != null
this.padding.unitType.name.toString == "UnitType.ABSOLUTE"
this.padding.top == 2.0
this.padding.left == 2.0
this.padding.bottom == 2.0
this.padding.right == 2.0
this.width == 0.0
this.height == 0.0
this.bounds != null
===========================================================================
org.jfree.chart.title.LegendGraphic.LegendGraphic(java.awt.Shape, java.awt.Paint):::ENTER
shape has only one value
shape.getClass().getName() == java.awt.geom.Ellipse2D$Double.class
fillPaint.getClass().getName() == java.awt.Color.class
===========================================================================
org.jfree.chart.title.LegendGraphic.LegendGraphic(java.awt.Shape, java.awt.Paint):::EXIT
this.shapeOutlineVisible == false
this.outlinePaint == null
this.outlineStroke == null
this.line == null
this.lineStroke == null
this.linePaint == null
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
===========================================================================
org.jfree.chart.title.LegendGraphic.arrange(java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint):::ENTER
this.shapeOutlineVisible == true
this.outlinePaint has only one value
this.outlineStroke has only one value
this.linePaint has only one value
this.padding has only one value
g2 has only one value
g2.getClass().getName() == sun.java2d.SunGraphics2D.class
constraint has only one value
org.jfree.chart.block.RectangleConstraint.NONE has only one value
org.jfree.chart.block.RectangleConstraint.NONE.width == 0.0
org.jfree.chart.block.RectangleConstraint.NONE.widthRange == null
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType has only one value
org.jfree.chart.block.RectangleConstraint.NONE.height == 0.0
org.jfree.chart.block.RectangleConstraint.NONE.heightRange == null
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType has only one value
constraint.width == 0.0
constraint.widthRange == null
constraint.widthConstraintType has only one value
org.jfree.chart.block.LengthConstraintType.NONE has only one value
org.jfree.chart.block.LengthConstraintType.RANGE has only one value
org.jfree.chart.block.LengthConstraintType.FIXED has only one value
constraint.widthConstraintType.name has only one value
constraint.widthConstraintType.name.toString == "LengthConstraintType.NONE"
constraint.height == 0.0
constraint.heightRange == null
constraint.heightConstraintType has only one value
constraint.heightConstraintType.name has only one value
constraint.heightConstraintType.name.toString == "LengthConstraintType.NONE"
===========================================================================
org.jfree.chart.title.LegendGraphic.arrange(java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint):::EXIT
this.shapeVisible == orig(this.shapeVisible)
this.shape == orig(this.shape)
this.shape.getClass().getName() == orig(this.shape.getClass().getName())
this.shapeLocation == orig(this.shapeLocation)
org.jfree.chart.util.RectangleAnchor.CENTER == orig(org.jfree.chart.util.RectangleAnchor.CENTER)
org.jfree.chart.util.RectangleAnchor.TOP == orig(org.jfree.chart.util.RectangleAnchor.TOP)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT)
org.jfree.chart.util.RectangleAnchor.BOTTOM == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)
org.jfree.chart.util.RectangleAnchor.LEFT == orig(org.jfree.chart.util.RectangleAnchor.LEFT)
org.jfree.chart.util.RectangleAnchor.RIGHT == orig(org.jfree.chart.util.RectangleAnchor.RIGHT)
org.jfree.chart.util.RectangleAnchor.CENTER.name == orig(org.jfree.chart.util.RectangleAnchor.CENTER.name)
org.jfree.chart.util.RectangleAnchor.CENTER.name.toString == orig(org.jfree.chart.util.RectangleAnchor.CENTER.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP.name == orig(org.jfree.chart.util.RectangleAnchor.TOP.name)
org.jfree.chart.util.RectangleAnchor.TOP.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name.toString)
org.jfree.chart.util.RectangleAnchor.LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.LEFT.name)
org.jfree.chart.util.RectangleAnchor.LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.RIGHT.name)
org.jfree.chart.util.RectangleAnchor.RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.RIGHT.name.toString)
this.shapeLocation.name == orig(this.shapeLocation.name)
this.shapeLocation.name.toString == orig(this.shapeLocation.name.toString)
this.shapeAnchor == orig(this.shapeAnchor)
this.shapeAnchor.name == orig(this.shapeAnchor.name)
this.shapeAnchor.name.toString == orig(this.shapeAnchor.name.toString)
this.shapeFilled == orig(this.shapeFilled)
this.fillPaint == orig(this.fillPaint)
this.fillPaint.getClass().getName() == orig(this.fillPaint.getClass().getName())
this.fillPaintTransformer == orig(this.fillPaintTransformer)
this.fillPaintTransformer.getClass().getName() == orig(this.fillPaintTransformer.getClass().getName())
this.shapeOutlineVisible == orig(this.shapeOutlineVisible)
this.outlinePaint == orig(this.outlinePaint)
this.outlinePaint.getClass().getName() == orig(this.outlinePaint.getClass().getName())
this.outlineStroke == orig(this.outlineStroke)
this.outlineStroke.getClass().getName() == orig(this.outlineStroke.getClass().getName())
this.lineVisible == orig(this.lineVisible)
this.line == orig(this.line)
this.line.getClass().getName() == orig(this.line.getClass().getName())
this.lineStroke == orig(this.lineStroke)
this.lineStroke.getClass().getName() == orig(this.lineStroke.getClass().getName())
this.linePaint == orig(this.linePaint)
this.linePaint.getClass().getName() == orig(this.linePaint.getClass().getName())
this.id == orig(this.id)
this.margin == orig(this.margin)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.margin.unitType == orig(this.margin.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
org.jfree.chart.block.RectangleConstraint.NONE == orig(org.jfree.chart.block.RectangleConstraint.NONE)
org.jfree.chart.block.RectangleConstraint.NONE.width == orig(org.jfree.chart.block.RectangleConstraint.NONE.width)
org.jfree.chart.block.RectangleConstraint.NONE.widthRange == orig(org.jfree.chart.block.RectangleConstraint.NONE.widthRange)
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType == orig(org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType)
org.jfree.chart.block.RectangleConstraint.NONE.height == orig(org.jfree.chart.block.RectangleConstraint.NONE.height)
org.jfree.chart.block.RectangleConstraint.NONE.heightRange == orig(org.jfree.chart.block.RectangleConstraint.NONE.heightRange)
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType == orig(org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType)
constraint.width == orig(constraint.width)
constraint.widthRange == orig(constraint.widthRange)
constraint.widthConstraintType == orig(constraint.widthConstraintType)
org.jfree.chart.block.LengthConstraintType.NONE == orig(org.jfree.chart.block.LengthConstraintType.NONE)
org.jfree.chart.block.LengthConstraintType.RANGE == orig(org.jfree.chart.block.LengthConstraintType.RANGE)
org.jfree.chart.block.LengthConstraintType.FIXED == orig(org.jfree.chart.block.LengthConstraintType.FIXED)
constraint.widthConstraintType.name == orig(constraint.widthConstraintType.name)
constraint.widthConstraintType.name.toString == orig(constraint.widthConstraintType.name.toString)
constraint.height == orig(constraint.height)
constraint.heightRange == orig(constraint.heightRange)
constraint.heightConstraintType == orig(constraint.heightConstraintType)
constraint.heightConstraintType.name == orig(constraint.heightConstraintType.name)
constraint.heightConstraintType.name.toString == orig(constraint.heightConstraintType.name.toString)
this.shapeOutlineVisible == true
this.outlinePaint has only one value
this.outlineStroke has only one value
this.linePaint has only one value
this.padding has only one value
org.jfree.chart.block.RectangleConstraint.NONE has only one value
org.jfree.chart.block.RectangleConstraint.NONE.width == 0.0
org.jfree.chart.block.RectangleConstraint.NONE.widthRange == null
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType has only one value
org.jfree.chart.block.RectangleConstraint.NONE.height == 0.0
org.jfree.chart.block.RectangleConstraint.NONE.heightRange == null
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType has only one value
constraint.width == 0.0
constraint.widthRange == null
constraint.widthConstraintType has only one value
org.jfree.chart.block.LengthConstraintType.NONE has only one value
org.jfree.chart.block.LengthConstraintType.RANGE has only one value
org.jfree.chart.block.LengthConstraintType.FIXED has only one value
constraint.widthConstraintType.name has only one value
constraint.widthConstraintType.name.toString == "LengthConstraintType.NONE"
constraint.height == 0.0
constraint.heightRange == null
constraint.heightConstraintType has only one value
constraint.heightConstraintType.name has only one value
constraint.heightConstraintType.name.toString == "LengthConstraintType.NONE"
return.width == 12.0
return.height == 12.0
===========================================================================
org.jfree.chart.title.LegendGraphic.arrangeNN(java.awt.Graphics2D):::ENTER
this.shapeOutlineVisible == true
this.outlinePaint has only one value
this.outlineStroke has only one value
this.linePaint has only one value
this.padding has only one value
g2 has only one value
g2.getClass().getName() == sun.java2d.SunGraphics2D.class
===========================================================================
org.jfree.chart.title.LegendGraphic.arrangeNN(java.awt.Graphics2D):::EXIT
this.shapeVisible == orig(this.shapeVisible)
this.shape == orig(this.shape)
this.shape.getClass().getName() == orig(this.shape.getClass().getName())
this.shapeLocation == orig(this.shapeLocation)
org.jfree.chart.util.RectangleAnchor.CENTER == orig(org.jfree.chart.util.RectangleAnchor.CENTER)
org.jfree.chart.util.RectangleAnchor.TOP == orig(org.jfree.chart.util.RectangleAnchor.TOP)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT)
org.jfree.chart.util.RectangleAnchor.BOTTOM == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)
org.jfree.chart.util.RectangleAnchor.LEFT == orig(org.jfree.chart.util.RectangleAnchor.LEFT)
org.jfree.chart.util.RectangleAnchor.RIGHT == orig(org.jfree.chart.util.RectangleAnchor.RIGHT)
org.jfree.chart.util.RectangleAnchor.CENTER.name == orig(org.jfree.chart.util.RectangleAnchor.CENTER.name)
org.jfree.chart.util.RectangleAnchor.CENTER.name.toString == orig(org.jfree.chart.util.RectangleAnchor.CENTER.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP.name == orig(org.jfree.chart.util.RectangleAnchor.TOP.name)
org.jfree.chart.util.RectangleAnchor.TOP.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name.toString)
org.jfree.chart.util.RectangleAnchor.LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.LEFT.name)
org.jfree.chart.util.RectangleAnchor.LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.RIGHT.name)
org.jfree.chart.util.RectangleAnchor.RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.RIGHT.name.toString)
this.shapeLocation.name == orig(this.shapeLocation.name)
this.shapeLocation.name.toString == orig(this.shapeLocation.name.toString)
this.shapeAnchor == orig(this.shapeAnchor)
this.shapeAnchor.name == orig(this.shapeAnchor.name)
this.shapeAnchor.name.toString == orig(this.shapeAnchor.name.toString)
this.shapeFilled == orig(this.shapeFilled)
this.fillPaint == orig(this.fillPaint)
this.fillPaint.getClass().getName() == orig(this.fillPaint.getClass().getName())
this.fillPaintTransformer == orig(this.fillPaintTransformer)
this.fillPaintTransformer.getClass().getName() == orig(this.fillPaintTransformer.getClass().getName())
this.shapeOutlineVisible == orig(this.shapeOutlineVisible)
this.outlinePaint == orig(this.outlinePaint)
this.outlinePaint.getClass().getName() == orig(this.outlinePaint.getClass().getName())
this.outlineStroke == orig(this.outlineStroke)
this.outlineStroke.getClass().getName() == orig(this.outlineStroke.getClass().getName())
this.lineVisible == orig(this.lineVisible)
this.line == orig(this.line)
this.line.getClass().getName() == orig(this.line.getClass().getName())
this.lineStroke == orig(this.lineStroke)
this.lineStroke.getClass().getName() == orig(this.lineStroke.getClass().getName())
this.linePaint == orig(this.linePaint)
this.linePaint.getClass().getName() == orig(this.linePaint.getClass().getName())
this.id == orig(this.id)
this.margin == orig(this.margin)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.margin.unitType == orig(this.margin.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
this.shapeOutlineVisible == true
this.outlinePaint has only one value
this.outlineStroke has only one value
this.linePaint has only one value
this.padding has only one value
return.width == 8.0
return.height == 8.0
===========================================================================
org.jfree.chart.title.LegendGraphic.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D):::ENTER
this.shapeOutlineVisible == true
this.outlinePaint has only one value
this.outlineStroke has only one value
this.linePaint has only one value
this.padding has only one value
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Double.class
g2 has only one value
g2.getClass().getName() == sun.java2d.SunGraphics2D.class
area.getClass().getName() == java.awt.geom.Rectangle2D$Double.class
===========================================================================
org.jfree.chart.title.LegendGraphic.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D):::EXIT
this.shapeVisible == orig(this.shapeVisible)
this.shape == orig(this.shape)
this.shape.getClass().getName() == orig(this.shape.getClass().getName())
this.shapeLocation == orig(this.shapeLocation)
org.jfree.chart.util.RectangleAnchor.CENTER == orig(org.jfree.chart.util.RectangleAnchor.CENTER)
org.jfree.chart.util.RectangleAnchor.TOP == orig(org.jfree.chart.util.RectangleAnchor.TOP)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT)
org.jfree.chart.util.RectangleAnchor.BOTTOM == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)
org.jfree.chart.util.RectangleAnchor.LEFT == orig(org.jfree.chart.util.RectangleAnchor.LEFT)
org.jfree.chart.util.RectangleAnchor.RIGHT == orig(org.jfree.chart.util.RectangleAnchor.RIGHT)
org.jfree.chart.util.RectangleAnchor.CENTER.name == orig(org.jfree.chart.util.RectangleAnchor.CENTER.name)
org.jfree.chart.util.RectangleAnchor.CENTER.name.toString == orig(org.jfree.chart.util.RectangleAnchor.CENTER.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP.name == orig(org.jfree.chart.util.RectangleAnchor.TOP.name)
org.jfree.chart.util.RectangleAnchor.TOP.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name.toString)
org.jfree.chart.util.RectangleAnchor.LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.LEFT.name)
org.jfree.chart.util.RectangleAnchor.LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.RIGHT.name)
org.jfree.chart.util.RectangleAnchor.RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.RIGHT.name.toString)
this.shapeLocation.name == orig(this.shapeLocation.name)
this.shapeLocation.name.toString == orig(this.shapeLocation.name.toString)
this.shapeAnchor == orig(this.shapeAnchor)
this.shapeAnchor.name == orig(this.shapeAnchor.name)
this.shapeAnchor.name.toString == orig(this.shapeAnchor.name.toString)
this.shapeFilled == orig(this.shapeFilled)
this.fillPaint == orig(this.fillPaint)
this.fillPaint.getClass().getName() == orig(this.fillPaint.getClass().getName())
this.fillPaintTransformer == orig(this.fillPaintTransformer)
this.fillPaintTransformer.getClass().getName() == orig(this.fillPaintTransformer.getClass().getName())
this.shapeOutlineVisible == orig(this.shapeOutlineVisible)
this.outlinePaint == orig(this.outlinePaint)
this.outlinePaint.getClass().getName() == orig(this.outlinePaint.getClass().getName())
this.outlineStroke == orig(this.outlineStroke)
this.outlineStroke.getClass().getName() == orig(this.outlineStroke.getClass().getName())
this.lineVisible == orig(this.lineVisible)
this.line == orig(this.line)
this.line.getClass().getName() == orig(this.line.getClass().getName())
this.lineStroke == orig(this.lineStroke)
this.lineStroke.getClass().getName() == orig(this.lineStroke.getClass().getName())
this.linePaint == orig(this.linePaint)
this.linePaint.getClass().getName() == orig(this.linePaint.getClass().getName())
this.id == orig(this.id)
this.margin == orig(this.margin)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.margin.unitType == orig(this.margin.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
this.shapeOutlineVisible == true
this.outlinePaint has only one value
this.outlineStroke has only one value
this.linePaint has only one value
this.padding has only one value
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Double.class
===========================================================================
org.jfree.chart.title.LegendGraphic.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.lang.Object):::ENTER
this.shapeOutlineVisible == true
this.outlinePaint has only one value
this.outlineStroke has only one value
this.linePaint has only one value
this.padding has only one value
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Double.class
g2 has only one value
g2.getClass().getName() == sun.java2d.SunGraphics2D.class
area.getClass().getName() == java.awt.geom.Rectangle2D$Double.class
params == null
===========================================================================
org.jfree.chart.title.LegendGraphic.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.lang.Object):::EXIT
this.shapeVisible == orig(this.shapeVisible)
this.shape == orig(this.shape)
this.shape.getClass().getName() == orig(this.shape.getClass().getName())
this.shapeLocation == orig(this.shapeLocation)
org.jfree.chart.util.RectangleAnchor.CENTER == orig(org.jfree.chart.util.RectangleAnchor.CENTER)
org.jfree.chart.util.RectangleAnchor.TOP == orig(org.jfree.chart.util.RectangleAnchor.TOP)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT)
org.jfree.chart.util.RectangleAnchor.BOTTOM == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)
org.jfree.chart.util.RectangleAnchor.LEFT == orig(org.jfree.chart.util.RectangleAnchor.LEFT)
org.jfree.chart.util.RectangleAnchor.RIGHT == orig(org.jfree.chart.util.RectangleAnchor.RIGHT)
org.jfree.chart.util.RectangleAnchor.CENTER.name == orig(org.jfree.chart.util.RectangleAnchor.CENTER.name)
org.jfree.chart.util.RectangleAnchor.CENTER.name.toString == orig(org.jfree.chart.util.RectangleAnchor.CENTER.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP.name == orig(org.jfree.chart.util.RectangleAnchor.TOP.name)
org.jfree.chart.util.RectangleAnchor.TOP.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name.toString)
org.jfree.chart.util.RectangleAnchor.LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.LEFT.name)
org.jfree.chart.util.RectangleAnchor.LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.RIGHT.name)
org.jfree.chart.util.RectangleAnchor.RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.RIGHT.name.toString)
this.shapeLocation.name == orig(this.shapeLocation.name)
this.shapeLocation.name.toString == orig(this.shapeLocation.name.toString)
this.shapeAnchor == orig(this.shapeAnchor)
this.shapeAnchor.name == orig(this.shapeAnchor.name)
this.shapeAnchor.name.toString == orig(this.shapeAnchor.name.toString)
this.shapeFilled == orig(this.shapeFilled)
this.fillPaint == orig(this.fillPaint)
this.fillPaint.getClass().getName() == orig(this.fillPaint.getClass().getName())
this.fillPaintTransformer == orig(this.fillPaintTransformer)
this.fillPaintTransformer.getClass().getName() == orig(this.fillPaintTransformer.getClass().getName())
this.shapeOutlineVisible == orig(this.shapeOutlineVisible)
this.outlinePaint == orig(this.outlinePaint)
this.outlinePaint.getClass().getName() == orig(this.outlinePaint.getClass().getName())
this.outlineStroke == orig(this.outlineStroke)
this.outlineStroke.getClass().getName() == orig(this.outlineStroke.getClass().getName())
this.lineVisible == orig(this.lineVisible)
this.line == orig(this.line)
this.line.getClass().getName() == orig(this.line.getClass().getName())
this.lineStroke == orig(this.lineStroke)
this.lineStroke.getClass().getName() == orig(this.lineStroke.getClass().getName())
this.linePaint == orig(this.linePaint)
this.linePaint.getClass().getName() == orig(this.linePaint.getClass().getName())
this.id == orig(this.id)
this.margin == orig(this.margin)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.margin.unitType == orig(this.margin.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
this.shapeOutlineVisible == true
this.outlinePaint has only one value
this.outlineStroke has only one value
this.linePaint has only one value
this.padding has only one value
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Double.class
return == null
===========================================================================
org.jfree.chart.title.LegendGraphic.setFillPaintTransformer(org.jfree.chart.util.GradientPaintTransformer):::ENTER
this.shapeOutlineVisible == false
this.outlinePaint == null
this.outlineStroke == null
this.line == null
this.lineStroke == null
this.linePaint == null
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
transformer.getClass().getName() == org.jfree.chart.util.StandardGradientPaintTransformer.class
===========================================================================
org.jfree.chart.title.LegendGraphic.setFillPaintTransformer(org.jfree.chart.util.GradientPaintTransformer):::EXIT
this.shapeVisible == orig(this.shapeVisible)
this.shape == orig(this.shape)
this.shape.getClass().getName() == orig(this.shape.getClass().getName())
this.shapeLocation == orig(this.shapeLocation)
org.jfree.chart.util.RectangleAnchor.CENTER == orig(org.jfree.chart.util.RectangleAnchor.CENTER)
org.jfree.chart.util.RectangleAnchor.TOP == orig(org.jfree.chart.util.RectangleAnchor.TOP)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT)
org.jfree.chart.util.RectangleAnchor.BOTTOM == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)
org.jfree.chart.util.RectangleAnchor.LEFT == orig(org.jfree.chart.util.RectangleAnchor.LEFT)
org.jfree.chart.util.RectangleAnchor.RIGHT == orig(org.jfree.chart.util.RectangleAnchor.RIGHT)
org.jfree.chart.util.RectangleAnchor.CENTER.name == orig(org.jfree.chart.util.RectangleAnchor.CENTER.name)
org.jfree.chart.util.RectangleAnchor.CENTER.name.toString == orig(org.jfree.chart.util.RectangleAnchor.CENTER.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP.name == orig(org.jfree.chart.util.RectangleAnchor.TOP.name)
org.jfree.chart.util.RectangleAnchor.TOP.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name.toString)
org.jfree.chart.util.RectangleAnchor.LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.LEFT.name)
org.jfree.chart.util.RectangleAnchor.LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.RIGHT.name)
org.jfree.chart.util.RectangleAnchor.RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.RIGHT.name.toString)
this.shapeLocation.name == orig(this.shapeLocation.name)
this.shapeLocation.name.toString == orig(this.shapeLocation.name.toString)
this.shapeAnchor == orig(this.shapeAnchor)
this.shapeAnchor.name == orig(this.shapeAnchor.name)
this.shapeAnchor.name.toString == orig(this.shapeAnchor.name.toString)
this.shapeFilled == orig(this.shapeFilled)
this.fillPaint == orig(this.fillPaint)
this.fillPaint.getClass().getName() == orig(this.fillPaint.getClass().getName())
this.fillPaintTransformer.getClass().getName() == orig(this.fillPaintTransformer.getClass().getName())
this.shapeOutlineVisible == orig(this.shapeOutlineVisible)
this.outlinePaint == orig(this.outlinePaint)
this.outlineStroke == orig(this.outlineStroke)
this.lineVisible == orig(this.lineVisible)
this.line == orig(this.line)
this.lineStroke == orig(this.lineStroke)
this.linePaint == orig(this.linePaint)
this.id == orig(this.id)
this.margin == orig(this.margin)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.margin.unitType == orig(this.margin.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
this.shapeOutlineVisible == false
this.outlinePaint == null
this.outlineStroke == null
this.line == null
this.lineStroke == null
this.linePaint == null
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
===========================================================================
org.jfree.chart.title.LegendGraphic.setLine(java.awt.Shape):::ENTER
this.shapeOutlineVisible == false
this.outlinePaint == null
this.outlineStroke == null
this.line == null
this.lineStroke == null
this.linePaint == null
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
line.getClass().getName() == java.awt.geom.Line2D$Float.class
===========================================================================
org.jfree.chart.title.LegendGraphic.setLine(java.awt.Shape):::EXIT
this.shapeVisible == orig(this.shapeVisible)
this.shape == orig(this.shape)
this.shape.getClass().getName() == orig(this.shape.getClass().getName())
this.shapeLocation == orig(this.shapeLocation)
org.jfree.chart.util.RectangleAnchor.CENTER == orig(org.jfree.chart.util.RectangleAnchor.CENTER)
org.jfree.chart.util.RectangleAnchor.TOP == orig(org.jfree.chart.util.RectangleAnchor.TOP)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT)
org.jfree.chart.util.RectangleAnchor.BOTTOM == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)
org.jfree.chart.util.RectangleAnchor.LEFT == orig(org.jfree.chart.util.RectangleAnchor.LEFT)
org.jfree.chart.util.RectangleAnchor.RIGHT == orig(org.jfree.chart.util.RectangleAnchor.RIGHT)
org.jfree.chart.util.RectangleAnchor.CENTER.name == orig(org.jfree.chart.util.RectangleAnchor.CENTER.name)
org.jfree.chart.util.RectangleAnchor.CENTER.name.toString == orig(org.jfree.chart.util.RectangleAnchor.CENTER.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP.name == orig(org.jfree.chart.util.RectangleAnchor.TOP.name)
org.jfree.chart.util.RectangleAnchor.TOP.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name.toString)
org.jfree.chart.util.RectangleAnchor.LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.LEFT.name)
org.jfree.chart.util.RectangleAnchor.LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.RIGHT.name)
org.jfree.chart.util.RectangleAnchor.RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.RIGHT.name.toString)
this.shapeLocation.name == orig(this.shapeLocation.name)
this.shapeLocation.name.toString == orig(this.shapeLocation.name.toString)
this.shapeAnchor == orig(this.shapeAnchor)
this.shapeAnchor.name == orig(this.shapeAnchor.name)
this.shapeAnchor.name.toString == orig(this.shapeAnchor.name.toString)
this.shapeFilled == orig(this.shapeFilled)
this.fillPaint == orig(this.fillPaint)
this.fillPaint.getClass().getName() == orig(this.fillPaint.getClass().getName())
this.fillPaintTransformer == orig(this.fillPaintTransformer)
this.fillPaintTransformer.getClass().getName() == orig(this.fillPaintTransformer.getClass().getName())
this.shapeOutlineVisible == orig(this.shapeOutlineVisible)
this.outlinePaint == orig(this.outlinePaint)
this.outlineStroke == orig(this.outlineStroke)
this.lineVisible == orig(this.lineVisible)
this.lineStroke == orig(this.lineStroke)
this.linePaint == orig(this.linePaint)
this.id == orig(this.id)
this.margin == orig(this.margin)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.margin.unitType == orig(this.margin.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
this.shapeOutlineVisible == false
this.outlinePaint == null
this.outlineStroke == null
this.lineStroke == null
this.linePaint == null
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
===========================================================================
org.jfree.chart.title.LegendGraphic.setLinePaint(java.awt.Paint):::ENTER
this.shapeOutlineVisible == false
this.outlinePaint == null
this.outlineStroke == null
this.linePaint == null
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
paint has only one value
paint.getClass().getName() == java.awt.Color.class
===========================================================================
org.jfree.chart.title.LegendGraphic.setLinePaint(java.awt.Paint):::EXIT
this.shapeVisible == orig(this.shapeVisible)
this.shape == orig(this.shape)
this.shape.getClass().getName() == orig(this.shape.getClass().getName())
this.shapeLocation == orig(this.shapeLocation)
org.jfree.chart.util.RectangleAnchor.CENTER == orig(org.jfree.chart.util.RectangleAnchor.CENTER)
org.jfree.chart.util.RectangleAnchor.TOP == orig(org.jfree.chart.util.RectangleAnchor.TOP)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT)
org.jfree.chart.util.RectangleAnchor.BOTTOM == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)
org.jfree.chart.util.RectangleAnchor.LEFT == orig(org.jfree.chart.util.RectangleAnchor.LEFT)
org.jfree.chart.util.RectangleAnchor.RIGHT == orig(org.jfree.chart.util.RectangleAnchor.RIGHT)
org.jfree.chart.util.RectangleAnchor.CENTER.name == orig(org.jfree.chart.util.RectangleAnchor.CENTER.name)
org.jfree.chart.util.RectangleAnchor.CENTER.name.toString == orig(org.jfree.chart.util.RectangleAnchor.CENTER.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP.name == orig(org.jfree.chart.util.RectangleAnchor.TOP.name)
org.jfree.chart.util.RectangleAnchor.TOP.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name.toString)
org.jfree.chart.util.RectangleAnchor.LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.LEFT.name)
org.jfree.chart.util.RectangleAnchor.LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.RIGHT.name)
org.jfree.chart.util.RectangleAnchor.RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.RIGHT.name.toString)
this.shapeLocation.name == orig(this.shapeLocation.name)
this.shapeLocation.name.toString == orig(this.shapeLocation.name.toString)
this.shapeAnchor == orig(this.shapeAnchor)
this.shapeAnchor.name == orig(this.shapeAnchor.name)
this.shapeAnchor.name.toString == orig(this.shapeAnchor.name.toString)
this.shapeFilled == orig(this.shapeFilled)
this.fillPaint == orig(this.fillPaint)
this.fillPaint.getClass().getName() == orig(this.fillPaint.getClass().getName())
this.fillPaintTransformer == orig(this.fillPaintTransformer)
this.fillPaintTransformer.getClass().getName() == orig(this.fillPaintTransformer.getClass().getName())
this.shapeOutlineVisible == orig(this.shapeOutlineVisible)
this.outlinePaint == orig(this.outlinePaint)
this.outlineStroke == orig(this.outlineStroke)
this.lineVisible == orig(this.lineVisible)
this.line == orig(this.line)
this.line.getClass().getName() == orig(this.line.getClass().getName())
this.lineStroke == orig(this.lineStroke)
this.lineStroke.getClass().getName() == orig(this.lineStroke.getClass().getName())
this.id == orig(this.id)
this.margin == orig(this.margin)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.margin.unitType == orig(this.margin.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
this.shapeOutlineVisible == false
this.outlinePaint == null
this.outlineStroke == null
this.linePaint has only one value
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
===========================================================================
org.jfree.chart.title.LegendGraphic.setLineStroke(java.awt.Stroke):::ENTER
this.shapeOutlineVisible == false
this.outlinePaint == null
this.outlineStroke == null
this.lineStroke == null
this.linePaint == null
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
stroke.getClass().getName() == java.awt.BasicStroke.class
===========================================================================
org.jfree.chart.title.LegendGraphic.setLineStroke(java.awt.Stroke):::EXIT
this.shapeVisible == orig(this.shapeVisible)
this.shape == orig(this.shape)
this.shape.getClass().getName() == orig(this.shape.getClass().getName())
this.shapeLocation == orig(this.shapeLocation)
org.jfree.chart.util.RectangleAnchor.CENTER == orig(org.jfree.chart.util.RectangleAnchor.CENTER)
org.jfree.chart.util.RectangleAnchor.TOP == orig(org.jfree.chart.util.RectangleAnchor.TOP)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT)
org.jfree.chart.util.RectangleAnchor.BOTTOM == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)
org.jfree.chart.util.RectangleAnchor.LEFT == orig(org.jfree.chart.util.RectangleAnchor.LEFT)
org.jfree.chart.util.RectangleAnchor.RIGHT == orig(org.jfree.chart.util.RectangleAnchor.RIGHT)
org.jfree.chart.util.RectangleAnchor.CENTER.name == orig(org.jfree.chart.util.RectangleAnchor.CENTER.name)
org.jfree.chart.util.RectangleAnchor.CENTER.name.toString == orig(org.jfree.chart.util.RectangleAnchor.CENTER.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP.name == orig(org.jfree.chart.util.RectangleAnchor.TOP.name)
org.jfree.chart.util.RectangleAnchor.TOP.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name.toString)
org.jfree.chart.util.RectangleAnchor.LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.LEFT.name)
org.jfree.chart.util.RectangleAnchor.LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.RIGHT.name)
org.jfree.chart.util.RectangleAnchor.RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.RIGHT.name.toString)
this.shapeLocation.name == orig(this.shapeLocation.name)
this.shapeLocation.name.toString == orig(this.shapeLocation.name.toString)
this.shapeAnchor == orig(this.shapeAnchor)
this.shapeAnchor.name == orig(this.shapeAnchor.name)
this.shapeAnchor.name.toString == orig(this.shapeAnchor.name.toString)
this.shapeFilled == orig(this.shapeFilled)
this.fillPaint == orig(this.fillPaint)
this.fillPaint.getClass().getName() == orig(this.fillPaint.getClass().getName())
this.fillPaintTransformer == orig(this.fillPaintTransformer)
this.fillPaintTransformer.getClass().getName() == orig(this.fillPaintTransformer.getClass().getName())
this.shapeOutlineVisible == orig(this.shapeOutlineVisible)
this.outlinePaint == orig(this.outlinePaint)
this.outlineStroke == orig(this.outlineStroke)
this.lineVisible == orig(this.lineVisible)
this.line == orig(this.line)
this.line.getClass().getName() == orig(this.line.getClass().getName())
this.linePaint == orig(this.linePaint)
this.id == orig(this.id)
this.margin == orig(this.margin)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.margin.unitType == orig(this.margin.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
this.shapeOutlineVisible == false
this.outlinePaint == null
this.outlineStroke == null
this.linePaint == null
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
===========================================================================
org.jfree.chart.title.LegendGraphic.setLineVisible(boolean):::ENTER
this.shapeOutlineVisible == false
this.outlinePaint == null
this.outlineStroke == null
this.linePaint has only one value
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
visible == false
===========================================================================
org.jfree.chart.title.LegendGraphic.setLineVisible(boolean):::EXIT
this.shapeVisible == orig(this.shapeVisible)
this.shape == orig(this.shape)
this.shape.getClass().getName() == orig(this.shape.getClass().getName())
this.shapeLocation == orig(this.shapeLocation)
org.jfree.chart.util.RectangleAnchor.CENTER == orig(org.jfree.chart.util.RectangleAnchor.CENTER)
org.jfree.chart.util.RectangleAnchor.TOP == orig(org.jfree.chart.util.RectangleAnchor.TOP)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT)
org.jfree.chart.util.RectangleAnchor.BOTTOM == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)
org.jfree.chart.util.RectangleAnchor.LEFT == orig(org.jfree.chart.util.RectangleAnchor.LEFT)
org.jfree.chart.util.RectangleAnchor.RIGHT == orig(org.jfree.chart.util.RectangleAnchor.RIGHT)
org.jfree.chart.util.RectangleAnchor.CENTER.name == orig(org.jfree.chart.util.RectangleAnchor.CENTER.name)
org.jfree.chart.util.RectangleAnchor.CENTER.name.toString == orig(org.jfree.chart.util.RectangleAnchor.CENTER.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP.name == orig(org.jfree.chart.util.RectangleAnchor.TOP.name)
org.jfree.chart.util.RectangleAnchor.TOP.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name.toString)
org.jfree.chart.util.RectangleAnchor.LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.LEFT.name)
org.jfree.chart.util.RectangleAnchor.LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.RIGHT.name)
org.jfree.chart.util.RectangleAnchor.RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.RIGHT.name.toString)
this.shapeLocation.name == orig(this.shapeLocation.name)
this.shapeLocation.name.toString == orig(this.shapeLocation.name.toString)
this.shapeAnchor == orig(this.shapeAnchor)
this.shapeAnchor.name == orig(this.shapeAnchor.name)
this.shapeAnchor.name.toString == orig(this.shapeAnchor.name.toString)
this.shapeFilled == orig(this.shapeFilled)
this.fillPaint == orig(this.fillPaint)
this.fillPaint.getClass().getName() == orig(this.fillPaint.getClass().getName())
this.fillPaintTransformer == orig(this.fillPaintTransformer)
this.fillPaintTransformer.getClass().getName() == orig(this.fillPaintTransformer.getClass().getName())
this.shapeOutlineVisible == orig(this.shapeOutlineVisible)
this.outlinePaint == orig(this.outlinePaint)
this.outlineStroke == orig(this.outlineStroke)
this.lineVisible == orig(this.lineVisible)
this.line == orig(this.line)
this.line.getClass().getName() == orig(this.line.getClass().getName())
this.lineStroke == orig(this.lineStroke)
this.lineStroke.getClass().getName() == orig(this.lineStroke.getClass().getName())
this.linePaint == orig(this.linePaint)
this.linePaint.getClass().getName() == orig(this.linePaint.getClass().getName())
this.id == orig(this.id)
this.margin == orig(this.margin)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.margin.unitType == orig(this.margin.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
this.shapeOutlineVisible == false
this.outlinePaint == null
this.outlineStroke == null
this.linePaint has only one value
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
===========================================================================
org.jfree.chart.title.LegendGraphic.setOutlinePaint(java.awt.Paint):::ENTER
this.shapeOutlineVisible == true
this.outlinePaint == null
this.outlineStroke == null
this.linePaint has only one value
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
paint has only one value
paint.getClass().getName() == java.awt.Color.class
===========================================================================
org.jfree.chart.title.LegendGraphic.setOutlinePaint(java.awt.Paint):::EXIT
this.shapeVisible == orig(this.shapeVisible)
this.shape == orig(this.shape)
this.shape.getClass().getName() == orig(this.shape.getClass().getName())
this.shapeLocation == orig(this.shapeLocation)
org.jfree.chart.util.RectangleAnchor.CENTER == orig(org.jfree.chart.util.RectangleAnchor.CENTER)
org.jfree.chart.util.RectangleAnchor.TOP == orig(org.jfree.chart.util.RectangleAnchor.TOP)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT)
org.jfree.chart.util.RectangleAnchor.BOTTOM == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)
org.jfree.chart.util.RectangleAnchor.LEFT == orig(org.jfree.chart.util.RectangleAnchor.LEFT)
org.jfree.chart.util.RectangleAnchor.RIGHT == orig(org.jfree.chart.util.RectangleAnchor.RIGHT)
org.jfree.chart.util.RectangleAnchor.CENTER.name == orig(org.jfree.chart.util.RectangleAnchor.CENTER.name)
org.jfree.chart.util.RectangleAnchor.CENTER.name.toString == orig(org.jfree.chart.util.RectangleAnchor.CENTER.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP.name == orig(org.jfree.chart.util.RectangleAnchor.TOP.name)
org.jfree.chart.util.RectangleAnchor.TOP.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name.toString)
org.jfree.chart.util.RectangleAnchor.LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.LEFT.name)
org.jfree.chart.util.RectangleAnchor.LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.RIGHT.name)
org.jfree.chart.util.RectangleAnchor.RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.RIGHT.name.toString)
this.shapeLocation.name == orig(this.shapeLocation.name)
this.shapeLocation.name.toString == orig(this.shapeLocation.name.toString)
this.shapeAnchor == orig(this.shapeAnchor)
this.shapeAnchor.name == orig(this.shapeAnchor.name)
this.shapeAnchor.name.toString == orig(this.shapeAnchor.name.toString)
this.shapeFilled == orig(this.shapeFilled)
this.fillPaint == orig(this.fillPaint)
this.fillPaint.getClass().getName() == orig(this.fillPaint.getClass().getName())
this.fillPaintTransformer == orig(this.fillPaintTransformer)
this.fillPaintTransformer.getClass().getName() == orig(this.fillPaintTransformer.getClass().getName())
this.shapeOutlineVisible == orig(this.shapeOutlineVisible)
this.outlineStroke == orig(this.outlineStroke)
this.lineVisible == orig(this.lineVisible)
this.line == orig(this.line)
this.line.getClass().getName() == orig(this.line.getClass().getName())
this.lineStroke == orig(this.lineStroke)
this.lineStroke.getClass().getName() == orig(this.lineStroke.getClass().getName())
this.linePaint == orig(this.linePaint)
this.linePaint.getClass().getName() == orig(this.linePaint.getClass().getName())
this.id == orig(this.id)
this.margin == orig(this.margin)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.margin.unitType == orig(this.margin.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
this.shapeOutlineVisible == true
this.outlinePaint has only one value
this.outlineStroke == null
this.linePaint has only one value
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
===========================================================================
org.jfree.chart.title.LegendGraphic.setOutlineStroke(java.awt.Stroke):::ENTER
this.shapeOutlineVisible == true
this.outlinePaint has only one value
this.outlineStroke == null
this.linePaint has only one value
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
stroke has only one value
stroke.getClass().getName() == java.awt.BasicStroke.class
===========================================================================
org.jfree.chart.title.LegendGraphic.setOutlineStroke(java.awt.Stroke):::EXIT
this.shapeVisible == orig(this.shapeVisible)
this.shape == orig(this.shape)
this.shape.getClass().getName() == orig(this.shape.getClass().getName())
this.shapeLocation == orig(this.shapeLocation)
org.jfree.chart.util.RectangleAnchor.CENTER == orig(org.jfree.chart.util.RectangleAnchor.CENTER)
org.jfree.chart.util.RectangleAnchor.TOP == orig(org.jfree.chart.util.RectangleAnchor.TOP)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT)
org.jfree.chart.util.RectangleAnchor.BOTTOM == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)
org.jfree.chart.util.RectangleAnchor.LEFT == orig(org.jfree.chart.util.RectangleAnchor.LEFT)
org.jfree.chart.util.RectangleAnchor.RIGHT == orig(org.jfree.chart.util.RectangleAnchor.RIGHT)
org.jfree.chart.util.RectangleAnchor.CENTER.name == orig(org.jfree.chart.util.RectangleAnchor.CENTER.name)
org.jfree.chart.util.RectangleAnchor.CENTER.name.toString == orig(org.jfree.chart.util.RectangleAnchor.CENTER.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP.name == orig(org.jfree.chart.util.RectangleAnchor.TOP.name)
org.jfree.chart.util.RectangleAnchor.TOP.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name.toString)
org.jfree.chart.util.RectangleAnchor.LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.LEFT.name)
org.jfree.chart.util.RectangleAnchor.LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.RIGHT.name)
org.jfree.chart.util.RectangleAnchor.RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.RIGHT.name.toString)
this.shapeLocation.name == orig(this.shapeLocation.name)
this.shapeLocation.name.toString == orig(this.shapeLocation.name.toString)
this.shapeAnchor == orig(this.shapeAnchor)
this.shapeAnchor.name == orig(this.shapeAnchor.name)
this.shapeAnchor.name.toString == orig(this.shapeAnchor.name.toString)
this.shapeFilled == orig(this.shapeFilled)
this.fillPaint == orig(this.fillPaint)
this.fillPaint.getClass().getName() == orig(this.fillPaint.getClass().getName())
this.fillPaintTransformer == orig(this.fillPaintTransformer)
this.fillPaintTransformer.getClass().getName() == orig(this.fillPaintTransformer.getClass().getName())
this.shapeOutlineVisible == orig(this.shapeOutlineVisible)
this.outlinePaint == orig(this.outlinePaint)
this.outlinePaint.getClass().getName() == orig(this.outlinePaint.getClass().getName())
this.lineVisible == orig(this.lineVisible)
this.line == orig(this.line)
this.line.getClass().getName() == orig(this.line.getClass().getName())
this.lineStroke == orig(this.lineStroke)
this.lineStroke.getClass().getName() == orig(this.lineStroke.getClass().getName())
this.linePaint == orig(this.linePaint)
this.linePaint.getClass().getName() == orig(this.linePaint.getClass().getName())
this.id == orig(this.id)
this.margin == orig(this.margin)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.margin.unitType == orig(this.margin.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
this.shapeOutlineVisible == true
this.outlinePaint has only one value
this.outlineStroke has only one value
this.linePaint has only one value
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
===========================================================================
org.jfree.chart.title.LegendGraphic.setShapeAnchor(org.jfree.chart.util.RectangleAnchor):::ENTER
this.shapeOutlineVisible == true
this.outlinePaint has only one value
this.outlineStroke has only one value
this.linePaint has only one value
this.padding has only one value
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
anchor has only one value
anchor.name has only one value
anchor.name.toString == "RectangleAnchor.CENTER"
===========================================================================
org.jfree.chart.title.LegendGraphic.setShapeAnchor(org.jfree.chart.util.RectangleAnchor):::EXIT
this.shapeVisible == orig(this.shapeVisible)
this.shape == orig(this.shape)
this.shape.getClass().getName() == orig(this.shape.getClass().getName())
this.shapeLocation == orig(this.shapeLocation)
org.jfree.chart.util.RectangleAnchor.CENTER == orig(org.jfree.chart.util.RectangleAnchor.CENTER)
org.jfree.chart.util.RectangleAnchor.TOP == orig(org.jfree.chart.util.RectangleAnchor.TOP)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT)
org.jfree.chart.util.RectangleAnchor.BOTTOM == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)
org.jfree.chart.util.RectangleAnchor.LEFT == orig(org.jfree.chart.util.RectangleAnchor.LEFT)
org.jfree.chart.util.RectangleAnchor.RIGHT == orig(org.jfree.chart.util.RectangleAnchor.RIGHT)
org.jfree.chart.util.RectangleAnchor.CENTER.name == orig(org.jfree.chart.util.RectangleAnchor.CENTER.name)
org.jfree.chart.util.RectangleAnchor.CENTER.name.toString == orig(org.jfree.chart.util.RectangleAnchor.CENTER.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP.name == orig(org.jfree.chart.util.RectangleAnchor.TOP.name)
org.jfree.chart.util.RectangleAnchor.TOP.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name.toString)
org.jfree.chart.util.RectangleAnchor.LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.LEFT.name)
org.jfree.chart.util.RectangleAnchor.LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.RIGHT.name)
org.jfree.chart.util.RectangleAnchor.RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.RIGHT.name.toString)
this.shapeLocation.name == orig(this.shapeLocation.name)
this.shapeLocation.name.toString == orig(this.shapeLocation.name.toString)
this.shapeAnchor == orig(this.shapeAnchor)
this.shapeAnchor.name == orig(this.shapeAnchor.name)
this.shapeAnchor.name.toString == orig(this.shapeAnchor.name.toString)
this.shapeFilled == orig(this.shapeFilled)
this.fillPaint == orig(this.fillPaint)
this.fillPaint.getClass().getName() == orig(this.fillPaint.getClass().getName())
this.fillPaintTransformer == orig(this.fillPaintTransformer)
this.fillPaintTransformer.getClass().getName() == orig(this.fillPaintTransformer.getClass().getName())
this.shapeOutlineVisible == orig(this.shapeOutlineVisible)
this.outlinePaint == orig(this.outlinePaint)
this.outlinePaint.getClass().getName() == orig(this.outlinePaint.getClass().getName())
this.outlineStroke == orig(this.outlineStroke)
this.outlineStroke.getClass().getName() == orig(this.outlineStroke.getClass().getName())
this.lineVisible == orig(this.lineVisible)
this.line == orig(this.line)
this.line.getClass().getName() == orig(this.line.getClass().getName())
this.lineStroke == orig(this.lineStroke)
this.lineStroke.getClass().getName() == orig(this.lineStroke.getClass().getName())
this.linePaint == orig(this.linePaint)
this.linePaint.getClass().getName() == orig(this.linePaint.getClass().getName())
this.id == orig(this.id)
this.margin == orig(this.margin)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.margin.unitType == orig(this.margin.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
anchor.name == orig(anchor.name)
anchor.name.toString == orig(anchor.name.toString)
this.shapeOutlineVisible == true
this.outlinePaint has only one value
this.outlineStroke has only one value
this.linePaint has only one value
this.padding has only one value
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
anchor.name has only one value
anchor.name.toString == "RectangleAnchor.CENTER"
===========================================================================
org.jfree.chart.title.LegendGraphic.setShapeFilled(boolean):::ENTER
this.shapeOutlineVisible == false
this.outlinePaint == null
this.outlineStroke == null
this.line == null
this.lineStroke == null
this.linePaint == null
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
filled == true
===========================================================================
org.jfree.chart.title.LegendGraphic.setShapeFilled(boolean):::EXIT
this.shapeVisible == orig(this.shapeVisible)
this.shape == orig(this.shape)
this.shape.getClass().getName() == orig(this.shape.getClass().getName())
this.shapeLocation == orig(this.shapeLocation)
org.jfree.chart.util.RectangleAnchor.CENTER == orig(org.jfree.chart.util.RectangleAnchor.CENTER)
org.jfree.chart.util.RectangleAnchor.TOP == orig(org.jfree.chart.util.RectangleAnchor.TOP)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT)
org.jfree.chart.util.RectangleAnchor.BOTTOM == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)
org.jfree.chart.util.RectangleAnchor.LEFT == orig(org.jfree.chart.util.RectangleAnchor.LEFT)
org.jfree.chart.util.RectangleAnchor.RIGHT == orig(org.jfree.chart.util.RectangleAnchor.RIGHT)
org.jfree.chart.util.RectangleAnchor.CENTER.name == orig(org.jfree.chart.util.RectangleAnchor.CENTER.name)
org.jfree.chart.util.RectangleAnchor.CENTER.name.toString == orig(org.jfree.chart.util.RectangleAnchor.CENTER.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP.name == orig(org.jfree.chart.util.RectangleAnchor.TOP.name)
org.jfree.chart.util.RectangleAnchor.TOP.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name.toString)
org.jfree.chart.util.RectangleAnchor.LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.LEFT.name)
org.jfree.chart.util.RectangleAnchor.LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.RIGHT.name)
org.jfree.chart.util.RectangleAnchor.RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.RIGHT.name.toString)
this.shapeLocation.name == orig(this.shapeLocation.name)
this.shapeLocation.name.toString == orig(this.shapeLocation.name.toString)
this.shapeAnchor == orig(this.shapeAnchor)
this.shapeAnchor.name == orig(this.shapeAnchor.name)
this.shapeAnchor.name.toString == orig(this.shapeAnchor.name.toString)
this.shapeFilled == orig(this.shapeFilled)
this.fillPaint == orig(this.fillPaint)
this.fillPaint.getClass().getName() == orig(this.fillPaint.getClass().getName())
this.fillPaintTransformer == orig(this.fillPaintTransformer)
this.fillPaintTransformer.getClass().getName() == orig(this.fillPaintTransformer.getClass().getName())
this.shapeOutlineVisible == orig(this.shapeOutlineVisible)
this.outlinePaint == orig(this.outlinePaint)
this.outlineStroke == orig(this.outlineStroke)
this.lineVisible == orig(this.lineVisible)
this.line == orig(this.line)
this.lineStroke == orig(this.lineStroke)
this.linePaint == orig(this.linePaint)
this.id == orig(this.id)
this.margin == orig(this.margin)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.margin.unitType == orig(this.margin.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
this.shapeOutlineVisible == false
this.outlinePaint == null
this.outlineStroke == null
this.line == null
this.lineStroke == null
this.linePaint == null
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
===========================================================================
org.jfree.chart.title.LegendGraphic.setShapeLocation(org.jfree.chart.util.RectangleAnchor):::ENTER
this.shapeOutlineVisible == true
this.outlinePaint has only one value
this.outlineStroke has only one value
this.linePaint has only one value
this.padding has only one value
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
location has only one value
location.name has only one value
location.name.toString == "RectangleAnchor.CENTER"
===========================================================================
org.jfree.chart.title.LegendGraphic.setShapeLocation(org.jfree.chart.util.RectangleAnchor):::EXIT
this.shapeVisible == orig(this.shapeVisible)
this.shape == orig(this.shape)
this.shape.getClass().getName() == orig(this.shape.getClass().getName())
this.shapeLocation == orig(this.shapeLocation)
org.jfree.chart.util.RectangleAnchor.CENTER == orig(org.jfree.chart.util.RectangleAnchor.CENTER)
org.jfree.chart.util.RectangleAnchor.TOP == orig(org.jfree.chart.util.RectangleAnchor.TOP)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT)
org.jfree.chart.util.RectangleAnchor.BOTTOM == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)
org.jfree.chart.util.RectangleAnchor.LEFT == orig(org.jfree.chart.util.RectangleAnchor.LEFT)
org.jfree.chart.util.RectangleAnchor.RIGHT == orig(org.jfree.chart.util.RectangleAnchor.RIGHT)
org.jfree.chart.util.RectangleAnchor.CENTER.name == orig(org.jfree.chart.util.RectangleAnchor.CENTER.name)
org.jfree.chart.util.RectangleAnchor.CENTER.name.toString == orig(org.jfree.chart.util.RectangleAnchor.CENTER.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP.name == orig(org.jfree.chart.util.RectangleAnchor.TOP.name)
org.jfree.chart.util.RectangleAnchor.TOP.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name.toString)
org.jfree.chart.util.RectangleAnchor.LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.LEFT.name)
org.jfree.chart.util.RectangleAnchor.LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.RIGHT.name)
org.jfree.chart.util.RectangleAnchor.RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.RIGHT.name.toString)
this.shapeLocation.name == orig(this.shapeLocation.name)
this.shapeLocation.name.toString == orig(this.shapeLocation.name.toString)
this.shapeAnchor == orig(this.shapeAnchor)
this.shapeAnchor.name == orig(this.shapeAnchor.name)
this.shapeAnchor.name.toString == orig(this.shapeAnchor.name.toString)
this.shapeFilled == orig(this.shapeFilled)
this.fillPaint == orig(this.fillPaint)
this.fillPaint.getClass().getName() == orig(this.fillPaint.getClass().getName())
this.fillPaintTransformer == orig(this.fillPaintTransformer)
this.fillPaintTransformer.getClass().getName() == orig(this.fillPaintTransformer.getClass().getName())
this.shapeOutlineVisible == orig(this.shapeOutlineVisible)
this.outlinePaint == orig(this.outlinePaint)
this.outlinePaint.getClass().getName() == orig(this.outlinePaint.getClass().getName())
this.outlineStroke == orig(this.outlineStroke)
this.outlineStroke.getClass().getName() == orig(this.outlineStroke.getClass().getName())
this.lineVisible == orig(this.lineVisible)
this.line == orig(this.line)
this.line.getClass().getName() == orig(this.line.getClass().getName())
this.lineStroke == orig(this.lineStroke)
this.lineStroke.getClass().getName() == orig(this.lineStroke.getClass().getName())
this.linePaint == orig(this.linePaint)
this.linePaint.getClass().getName() == orig(this.linePaint.getClass().getName())
this.id == orig(this.id)
this.margin == orig(this.margin)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.margin.unitType == orig(this.margin.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
location.name == orig(location.name)
location.name.toString == orig(location.name.toString)
this.shapeOutlineVisible == true
this.outlinePaint has only one value
this.outlineStroke has only one value
this.linePaint has only one value
this.padding has only one value
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
location.name has only one value
location.name.toString == "RectangleAnchor.CENTER"
===========================================================================
org.jfree.chart.title.LegendGraphic.setShapeOutlineVisible(boolean):::ENTER
this.shapeOutlineVisible == false
this.outlinePaint == null
this.outlineStroke == null
this.linePaint has only one value
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
visible == true
===========================================================================
org.jfree.chart.title.LegendGraphic.setShapeOutlineVisible(boolean):::EXIT
this.shapeVisible == orig(this.shapeVisible)
this.shape == orig(this.shape)
this.shape.getClass().getName() == orig(this.shape.getClass().getName())
this.shapeLocation == orig(this.shapeLocation)
org.jfree.chart.util.RectangleAnchor.CENTER == orig(org.jfree.chart.util.RectangleAnchor.CENTER)
org.jfree.chart.util.RectangleAnchor.TOP == orig(org.jfree.chart.util.RectangleAnchor.TOP)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT)
org.jfree.chart.util.RectangleAnchor.BOTTOM == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)
org.jfree.chart.util.RectangleAnchor.LEFT == orig(org.jfree.chart.util.RectangleAnchor.LEFT)
org.jfree.chart.util.RectangleAnchor.RIGHT == orig(org.jfree.chart.util.RectangleAnchor.RIGHT)
org.jfree.chart.util.RectangleAnchor.CENTER.name == orig(org.jfree.chart.util.RectangleAnchor.CENTER.name)
org.jfree.chart.util.RectangleAnchor.CENTER.name.toString == orig(org.jfree.chart.util.RectangleAnchor.CENTER.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP.name == orig(org.jfree.chart.util.RectangleAnchor.TOP.name)
org.jfree.chart.util.RectangleAnchor.TOP.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name.toString)
org.jfree.chart.util.RectangleAnchor.LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.LEFT.name)
org.jfree.chart.util.RectangleAnchor.LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.RIGHT.name)
org.jfree.chart.util.RectangleAnchor.RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.RIGHT.name.toString)
this.shapeLocation.name == orig(this.shapeLocation.name)
this.shapeLocation.name.toString == orig(this.shapeLocation.name.toString)
this.shapeAnchor == orig(this.shapeAnchor)
this.shapeAnchor.name == orig(this.shapeAnchor.name)
this.shapeAnchor.name.toString == orig(this.shapeAnchor.name.toString)
this.shapeFilled == orig(this.shapeFilled)
this.fillPaint == orig(this.fillPaint)
this.fillPaint.getClass().getName() == orig(this.fillPaint.getClass().getName())
this.fillPaintTransformer == orig(this.fillPaintTransformer)
this.fillPaintTransformer.getClass().getName() == orig(this.fillPaintTransformer.getClass().getName())
this.outlinePaint == orig(this.outlinePaint)
this.outlineStroke == orig(this.outlineStroke)
this.lineVisible == orig(this.lineVisible)
this.line == orig(this.line)
this.line.getClass().getName() == orig(this.line.getClass().getName())
this.lineStroke == orig(this.lineStroke)
this.lineStroke.getClass().getName() == orig(this.lineStroke.getClass().getName())
this.linePaint == orig(this.linePaint)
this.linePaint.getClass().getName() == orig(this.linePaint.getClass().getName())
this.id == orig(this.id)
this.margin == orig(this.margin)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.margin.unitType == orig(this.margin.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
this.shapeOutlineVisible == true
this.outlinePaint == null
this.outlineStroke == null
this.linePaint has only one value
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
===========================================================================
org.jfree.chart.title.LegendGraphic.setShapeVisible(boolean):::ENTER
this.shapeOutlineVisible == false
this.outlinePaint == null
this.outlineStroke == null
this.linePaint has only one value
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
visible == true
===========================================================================
org.jfree.chart.title.LegendGraphic.setShapeVisible(boolean):::EXIT
this.shapeVisible == orig(this.shapeVisible)
this.shape == orig(this.shape)
this.shape.getClass().getName() == orig(this.shape.getClass().getName())
this.shapeLocation == orig(this.shapeLocation)
org.jfree.chart.util.RectangleAnchor.CENTER == orig(org.jfree.chart.util.RectangleAnchor.CENTER)
org.jfree.chart.util.RectangleAnchor.TOP == orig(org.jfree.chart.util.RectangleAnchor.TOP)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT)
org.jfree.chart.util.RectangleAnchor.BOTTOM == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)
org.jfree.chart.util.RectangleAnchor.LEFT == orig(org.jfree.chart.util.RectangleAnchor.LEFT)
org.jfree.chart.util.RectangleAnchor.RIGHT == orig(org.jfree.chart.util.RectangleAnchor.RIGHT)
org.jfree.chart.util.RectangleAnchor.CENTER.name == orig(org.jfree.chart.util.RectangleAnchor.CENTER.name)
org.jfree.chart.util.RectangleAnchor.CENTER.name.toString == orig(org.jfree.chart.util.RectangleAnchor.CENTER.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP.name == orig(org.jfree.chart.util.RectangleAnchor.TOP.name)
org.jfree.chart.util.RectangleAnchor.TOP.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name.toString)
org.jfree.chart.util.RectangleAnchor.LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.LEFT.name)
org.jfree.chart.util.RectangleAnchor.LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.RIGHT.name)
org.jfree.chart.util.RectangleAnchor.RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.RIGHT.name.toString)
this.shapeLocation.name == orig(this.shapeLocation.name)
this.shapeLocation.name.toString == orig(this.shapeLocation.name.toString)
this.shapeAnchor == orig(this.shapeAnchor)
this.shapeAnchor.name == orig(this.shapeAnchor.name)
this.shapeAnchor.name.toString == orig(this.shapeAnchor.name.toString)
this.shapeFilled == orig(this.shapeFilled)
this.fillPaint == orig(this.fillPaint)
this.fillPaint.getClass().getName() == orig(this.fillPaint.getClass().getName())
this.fillPaintTransformer == orig(this.fillPaintTransformer)
this.fillPaintTransformer.getClass().getName() == orig(this.fillPaintTransformer.getClass().getName())
this.shapeOutlineVisible == orig(this.shapeOutlineVisible)
this.outlinePaint == orig(this.outlinePaint)
this.outlineStroke == orig(this.outlineStroke)
this.lineVisible == orig(this.lineVisible)
this.line == orig(this.line)
this.line.getClass().getName() == orig(this.line.getClass().getName())
this.lineStroke == orig(this.lineStroke)
this.lineStroke.getClass().getName() == orig(this.lineStroke.getClass().getName())
this.linePaint == orig(this.linePaint)
this.linePaint.getClass().getName() == orig(this.linePaint.getClass().getName())
this.id == orig(this.id)
this.margin == orig(this.margin)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.margin.unitType == orig(this.margin.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
this.shapeOutlineVisible == false
this.outlinePaint == null
this.outlineStroke == null
this.linePaint has only one value
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
===========================================================================
org.jfree.chart.title.LegendItemBlockContainer:::CLASS
===========================================================================
org.jfree.chart.title.LegendItemBlockContainer:::OBJECT
this.dataset has only one value
this.dataset != null
this.dataset.getClass().getName() == org.jfree.data.general.DefaultPieDataset.class
this.seriesKey == null
this.toolTipText == null
this.urlText == null
this.blocks != null
this.blocks[] elements != null
this.blocks[].getClass().getName() one of { [], [org.jfree.chart.title.LegendGraphic, org.jfree.chart.block.LabelBlock] }
this.blocks.getClass().getName() == java.util.ArrayList.class
this.arrangement != null
this.arrangement.getClass().getName() == org.jfree.chart.block.BorderArrangement.class
this.id == null
this.margin has only one value
this.margin != null
org.jfree.chart.util.RectangleInsets.ZERO_INSETS has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS != null
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType != null
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == 0.0
this.margin.unitType has only one value
this.margin.unitType != null
org.jfree.chart.util.UnitType.ABSOLUTE has only one value
org.jfree.chart.util.UnitType.ABSOLUTE != null
org.jfree.chart.util.UnitType.RELATIVE has only one value
org.jfree.chart.util.UnitType.RELATIVE != null
this.margin.unitType.name has only one value
this.margin.unitType.name != null
this.margin.unitType.name.toString == "UnitType.ABSOLUTE"
this.margin.top == 0.0
this.margin.left == 0.0
this.margin.bottom == 0.0
this.margin.right == 0.0
this.frame has only one value
this.frame != null
this.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class
this.padding has only one value
this.padding != null
this.padding.unitType has only one value
this.padding.unitType != null
this.padding.unitType.name has only one value
this.padding.unitType.name != null
this.padding.unitType.name.toString == "UnitType.ABSOLUTE"
this.padding.top == 0.0
this.padding.left == 0.0
this.padding.bottom == 0.0
this.padding.right == 0.0
this.width == 0.0
this.height == 0.0
this.bounds != null
size(this.blocks[]) one of { 0, 2 }
size(this.blocks[])-1 != 0
===========================================================================
org.jfree.chart.title.LegendItemBlockContainer.LegendItemBlockContainer(org.jfree.chart.block.Arrangement, org.jfree.data.general.Dataset, java.lang.Comparable):::ENTER
arrangement.getClass().getName() == org.jfree.chart.block.BorderArrangement.class
dataset has only one value
dataset.getClass().getName() == org.jfree.data.general.DefaultPieDataset.class
seriesKey == null
===========================================================================
org.jfree.chart.title.LegendItemBlockContainer.LegendItemBlockContainer(org.jfree.chart.block.Arrangement, org.jfree.data.general.Dataset, java.lang.Comparable):::EXIT
this.blocks[] == []
this.blocks[].getClass().getName() == []
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
===========================================================================
org.jfree.chart.title.LegendItemBlockContainer.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.lang.Object):::ENTER
this.blocks[].getClass().getName() == [org.jfree.chart.title.LegendGraphic, org.jfree.chart.block.LabelBlock]
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Double.class
g2 has only one value
g2.getClass().getName() == sun.java2d.SunGraphics2D.class
area.getClass().getName() == java.awt.geom.Rectangle2D$Double.class
params has only one value
params.getClass().getName() == org.jfree.chart.block.BlockParams.class
size(this.blocks[]) == 2
===========================================================================
org.jfree.chart.title.LegendItemBlockContainer.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.lang.Object):::EXIT
this.dataset == orig(this.dataset)
this.dataset.getClass().getName() == orig(this.dataset.getClass().getName())
this.seriesKey == orig(this.seriesKey)
this.toolTipText == orig(this.toolTipText)
this.urlText == orig(this.urlText)
this.blocks == orig(this.blocks)
this.blocks[] == orig(this.blocks[])
this.blocks.getClass().getName() == orig(this.blocks.getClass().getName())
this.arrangement == orig(this.arrangement)
this.arrangement.getClass().getName() == orig(this.arrangement.getClass().getName())
this.id == orig(this.id)
this.margin == orig(this.margin)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.margin.unitType == orig(this.margin.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
this.blocks[].getClass().getName() == [org.jfree.chart.title.LegendGraphic, org.jfree.chart.block.LabelBlock]
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Double.class
return.getClass().getName() == org.jfree.chart.block.BlockResult.class
size(this.blocks[]) == 2
===========================================================================
org.jfree.chart.title.LegendItemBlockContainer.setToolTipText(java.lang.String):::ENTER
this.blocks[].getClass().getName() == [org.jfree.chart.title.LegendGraphic, org.jfree.chart.block.LabelBlock]
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
text == null
size(this.blocks[]) == 2
===========================================================================
org.jfree.chart.title.LegendItemBlockContainer.setToolTipText(java.lang.String):::EXIT
this.dataset == orig(this.dataset)
this.dataset.getClass().getName() == orig(this.dataset.getClass().getName())
this.seriesKey == orig(this.seriesKey)
this.toolTipText == orig(this.toolTipText)
this.urlText == orig(this.urlText)
this.blocks == orig(this.blocks)
this.blocks[] == orig(this.blocks[])
this.blocks.getClass().getName() == orig(this.blocks.getClass().getName())
this.arrangement == orig(this.arrangement)
this.arrangement.getClass().getName() == orig(this.arrangement.getClass().getName())
this.id == orig(this.id)
this.margin == orig(this.margin)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.margin.unitType == orig(this.margin.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
this.blocks[].getClass().getName() == [org.jfree.chart.title.LegendGraphic, org.jfree.chart.block.LabelBlock]
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
size(this.blocks[]) == 2
===========================================================================
org.jfree.chart.title.LegendItemBlockContainer.setURLText(java.lang.String):::ENTER
this.blocks[].getClass().getName() == [org.jfree.chart.title.LegendGraphic, org.jfree.chart.block.LabelBlock]
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
text == null
size(this.blocks[]) == 2
===========================================================================
org.jfree.chart.title.LegendItemBlockContainer.setURLText(java.lang.String):::EXIT
this.dataset == orig(this.dataset)
this.dataset.getClass().getName() == orig(this.dataset.getClass().getName())
this.seriesKey == orig(this.seriesKey)
this.toolTipText == orig(this.toolTipText)
this.urlText == orig(this.urlText)
this.blocks == orig(this.blocks)
this.blocks[] == orig(this.blocks[])
this.blocks.getClass().getName() == orig(this.blocks.getClass().getName())
this.arrangement == orig(this.arrangement)
this.arrangement.getClass().getName() == orig(this.arrangement.getClass().getName())
this.id == orig(this.id)
this.margin == orig(this.margin)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.margin.unitType == orig(this.margin.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
this.blocks[].getClass().getName() == [org.jfree.chart.title.LegendGraphic, org.jfree.chart.block.LabelBlock]
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
size(this.blocks[]) == 2
===========================================================================
org.jfree.chart.title.LegendTitle:::CLASS
org.jfree.chart.title.LegendTitle.DEFAULT_ITEM_FONT has only one value
org.jfree.chart.title.LegendTitle.DEFAULT_ITEM_FONT != null
org.jfree.chart.title.LegendTitle.DEFAULT_ITEM_PAINT has only one value
org.jfree.chart.title.LegendTitle.DEFAULT_ITEM_PAINT != null
org.jfree.chart.title.LegendTitle.DEFAULT_ITEM_PAINT.getClass().getName() == java.awt.Color.class
org.jfree.chart.title.Title.DEFAULT_POSITION has only one value
org.jfree.chart.title.Title.DEFAULT_POSITION != null
org.jfree.chart.title.Title.DEFAULT_POSITION.name has only one value
org.jfree.chart.title.Title.DEFAULT_POSITION.name != null
org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString == "RectangleEdge.TOP"
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT has only one value
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT != null
org.jfree.chart.util.HorizontalAlignment.LEFT has only one value
org.jfree.chart.util.HorizontalAlignment.LEFT != null
org.jfree.chart.util.HorizontalAlignment.RIGHT has only one value
org.jfree.chart.util.HorizontalAlignment.RIGHT != null
org.jfree.chart.util.HorizontalAlignment.CENTER has only one value
org.jfree.chart.util.HorizontalAlignment.CENTER != null
org.jfree.chart.util.HorizontalAlignment.LEFT.name has only one value
org.jfree.chart.util.HorizontalAlignment.LEFT.name != null
org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString == "HorizontalAlignment.LEFT"
org.jfree.chart.util.HorizontalAlignment.RIGHT.name has only one value
org.jfree.chart.util.HorizontalAlignment.RIGHT.name != null
org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString == "HorizontalAlignment.RIGHT"
org.jfree.chart.util.HorizontalAlignment.CENTER.name has only one value
org.jfree.chart.util.HorizontalAlignment.CENTER.name != null
org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString == "HorizontalAlignment.CENTER"
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name has only one value
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name != null
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString == "HorizontalAlignment.CENTER"
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT has only one value
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT != null
org.jfree.chart.util.VerticalAlignment.TOP has only one value
org.jfree.chart.util.VerticalAlignment.TOP != null
org.jfree.chart.util.VerticalAlignment.BOTTOM has only one value
org.jfree.chart.util.VerticalAlignment.BOTTOM != null
org.jfree.chart.util.VerticalAlignment.CENTER has only one value
org.jfree.chart.util.VerticalAlignment.CENTER != null
org.jfree.chart.util.VerticalAlignment.TOP.name has only one value
org.jfree.chart.util.VerticalAlignment.TOP.name != null
org.jfree.chart.util.VerticalAlignment.TOP.name.toString == "VerticalAlignment.TOP"
org.jfree.chart.util.VerticalAlignment.BOTTOM.name has only one value
org.jfree.chart.util.VerticalAlignment.BOTTOM.name != null
org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString == "VerticalAlignment.BOTTOM"
org.jfree.chart.util.VerticalAlignment.CENTER.name has only one value
org.jfree.chart.util.VerticalAlignment.CENTER.name != null
org.jfree.chart.util.VerticalAlignment.CENTER.name.toString == "VerticalAlignment.CENTER"
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name has only one value
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name != null
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString == "VerticalAlignment.CENTER"
org.jfree.chart.title.Title.DEFAULT_PADDING has only one value
org.jfree.chart.title.Title.DEFAULT_PADDING != null
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType has only one value
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType != null
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name has only one value
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name != null
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name.toString == "UnitType.ABSOLUTE"
org.jfree.chart.title.Title.DEFAULT_PADDING.top == 1.0
org.jfree.chart.title.Title.DEFAULT_PADDING.left == 1.0
org.jfree.chart.title.Title.DEFAULT_PADDING.bottom == 1.0
org.jfree.chart.title.Title.DEFAULT_PADDING.right == 1.0
===========================================================================
org.jfree.chart.title.LegendTitle:::OBJECT
this.sources != null
this.sources.getClass().getName() == org.jfree.chart.LegendItemSource[].class
this.sources[] elements != null
this.sources[].getClass().getName() one of { [org.jfree.chart.plot.PiePlot], [org.jfree.chart.plot.PiePlot3D] }
this.backgroundPaint.getClass().getName() == java.awt.Color.class
this.legendItemGraphicEdge has only one value
this.legendItemGraphicEdge != null
org.jfree.chart.util.RectangleEdge.TOP has only one value
org.jfree.chart.util.RectangleEdge.TOP != null
org.jfree.chart.util.RectangleEdge.BOTTOM has only one value
org.jfree.chart.util.RectangleEdge.BOTTOM != null
org.jfree.chart.util.RectangleEdge.LEFT has only one value
org.jfree.chart.util.RectangleEdge.LEFT != null
org.jfree.chart.util.RectangleEdge.RIGHT has only one value
org.jfree.chart.util.RectangleEdge.RIGHT != null
org.jfree.chart.util.RectangleEdge.TOP.name has only one value
org.jfree.chart.util.RectangleEdge.TOP.name != null
org.jfree.chart.util.RectangleEdge.TOP.name.toString == "RectangleEdge.TOP"
org.jfree.chart.util.RectangleEdge.BOTTOM.name has only one value
org.jfree.chart.util.RectangleEdge.BOTTOM.name != null
org.jfree.chart.util.RectangleEdge.BOTTOM.name.toString == "RectangleEdge.BOTTOM"
org.jfree.chart.util.RectangleEdge.LEFT.name has only one value
org.jfree.chart.util.RectangleEdge.LEFT.name != null
org.jfree.chart.util.RectangleEdge.LEFT.name.toString == "RectangleEdge.LEFT"
org.jfree.chart.util.RectangleEdge.RIGHT.name has only one value
org.jfree.chart.util.RectangleEdge.RIGHT.name != null
org.jfree.chart.util.RectangleEdge.RIGHT.name.toString == "RectangleEdge.RIGHT"
this.legendItemGraphicEdge.name has only one value
this.legendItemGraphicEdge.name != null
this.legendItemGraphicEdge.name.toString == "RectangleEdge.LEFT"
this.legendItemGraphicAnchor has only one value
this.legendItemGraphicAnchor != null
org.jfree.chart.util.RectangleAnchor.CENTER has only one value
org.jfree.chart.util.RectangleAnchor.CENTER != null
org.jfree.chart.util.RectangleAnchor.TOP has only one value
org.jfree.chart.util.RectangleAnchor.TOP != null
org.jfree.chart.util.RectangleAnchor.TOP_LEFT has only one value
org.jfree.chart.util.RectangleAnchor.TOP_LEFT != null
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT has only one value
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT != null
org.jfree.chart.util.RectangleAnchor.BOTTOM has only one value
org.jfree.chart.util.RectangleAnchor.BOTTOM != null
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT has only one value
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT != null
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT has only one value
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT != null
org.jfree.chart.util.RectangleAnchor.LEFT has only one value
org.jfree.chart.util.RectangleAnchor.LEFT != null
org.jfree.chart.util.RectangleAnchor.RIGHT has only one value
org.jfree.chart.util.RectangleAnchor.RIGHT != null
org.jfree.chart.util.RectangleAnchor.CENTER.name has only one value
org.jfree.chart.util.RectangleAnchor.CENTER.name != null
org.jfree.chart.util.RectangleAnchor.CENTER.name.toString == "RectangleAnchor.CENTER"
org.jfree.chart.util.RectangleAnchor.TOP.name has only one value
org.jfree.chart.util.RectangleAnchor.TOP.name != null
org.jfree.chart.util.RectangleAnchor.TOP.name.toString == "RectangleAnchor.TOP"
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name has only one value
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name != null
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name.toString == "RectangleAnchor.TOP_LEFT"
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name has only one value
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name != null
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name.toString == "RectangleAnchor.TOP_RIGHT"
org.jfree.chart.util.RectangleAnchor.BOTTOM.name has only one value
org.jfree.chart.util.RectangleAnchor.BOTTOM.name != null
org.jfree.chart.util.RectangleAnchor.BOTTOM.name.toString == "RectangleAnchor.BOTTOM"
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name has only one value
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name != null
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name.toString == "RectangleAnchor.BOTTOM_LEFT"
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name has only one value
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name != null
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name.toString == "RectangleAnchor.BOTTOM_RIGHT"
org.jfree.chart.util.RectangleAnchor.LEFT.name has only one value
org.jfree.chart.util.RectangleAnchor.LEFT.name != null
org.jfree.chart.util.RectangleAnchor.LEFT.name.toString == "RectangleAnchor.LEFT"
org.jfree.chart.util.RectangleAnchor.RIGHT.name has only one value
org.jfree.chart.util.RectangleAnchor.RIGHT.name != null
org.jfree.chart.util.RectangleAnchor.RIGHT.name.toString == "RectangleAnchor.RIGHT"
this.legendItemGraphicAnchor.name has only one value
this.legendItemGraphicAnchor.name != null
this.legendItemGraphicAnchor.name.toString == "RectangleAnchor.CENTER"
this.legendItemGraphicLocation has only one value
this.legendItemGraphicLocation != null
this.legendItemGraphicLocation.name has only one value
this.legendItemGraphicLocation.name != null
this.legendItemGraphicLocation.name.toString == "RectangleAnchor.CENTER"
this.legendItemGraphicPadding != null
org.jfree.chart.util.RectangleInsets.ZERO_INSETS has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS != null
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType != null
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == 0.0
this.legendItemGraphicPadding.unitType has only one value
this.legendItemGraphicPadding.unitType != null
org.jfree.chart.util.UnitType.ABSOLUTE has only one value
org.jfree.chart.util.UnitType.ABSOLUTE != null
org.jfree.chart.util.UnitType.RELATIVE has only one value
org.jfree.chart.util.UnitType.RELATIVE != null
this.legendItemGraphicPadding.unitType.name has only one value
this.legendItemGraphicPadding.unitType.name != null
this.legendItemGraphicPadding.unitType.name.toString == "UnitType.ABSOLUTE"
this.legendItemGraphicPadding.top == 2.0
this.legendItemGraphicPadding.left == 2.0
this.legendItemGraphicPadding.bottom == 2.0
this.legendItemGraphicPadding.right == 2.0
this.itemFont has only one value
this.itemFont != null
this.itemPaint has only one value
this.itemPaint != null
this.itemPaint.getClass().getName() == java.awt.Color.class
this.itemLabelPadding != null
this.itemLabelPadding.unitType has only one value
this.itemLabelPadding.unitType != null
this.itemLabelPadding.unitType.name has only one value
this.itemLabelPadding.unitType.name != null
this.itemLabelPadding.unitType.name.toString == "UnitType.ABSOLUTE"
this.itemLabelPadding.top == 2.0
this.itemLabelPadding.left == 2.0
this.itemLabelPadding.bottom == 2.0
this.itemLabelPadding.right == 2.0
this.items != null
this.items.blocks != null
this.items.blocks[] elements != null
this.items.blocks[].getClass().getName() elements == org.jfree.chart.block.BlockContainer.class
this.items.blocks.getClass().getName() == java.util.ArrayList.class
this.items.arrangement != null
this.items.arrangement.getClass().getName() == org.jfree.chart.block.FlowArrangement.class
this.items.id == null
this.items.margin has only one value
this.items.margin != null
this.items.margin.unitType has only one value
this.items.margin.unitType != null
this.items.margin.top == 0.0
this.items.margin.left == 0.0
this.items.margin.bottom == 0.0
this.items.margin.right == 0.0
this.items.frame has only one value
this.items.frame != null
this.items.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class
this.items.padding has only one value
this.items.padding != null
this.items.padding.unitType has only one value
this.items.padding.unitType != null
this.items.padding.top == 0.0
this.items.padding.left == 0.0
this.items.padding.bottom == 0.0
this.items.padding.right == 0.0
this.items.width == 0.0
this.items.height == 0.0
this.items.bounds != null
this.items.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
this.hLayout != null
this.hLayout.getClass().getName() == org.jfree.chart.block.FlowArrangement.class
this.vLayout != null
this.vLayout.getClass().getName() == org.jfree.chart.block.ColumnArrangement.class
this.wrapper == null
this.position != null
this.position.name != null
this.position.name.toString one of { "RectangleEdge.BOTTOM", "RectangleEdge.TOP" }
this.horizontalAlignment has only one value
this.horizontalAlignment != null
this.horizontalAlignment.name has only one value
this.horizontalAlignment.name != null
this.horizontalAlignment.name.toString == "HorizontalAlignment.CENTER"
this.verticalAlignment has only one value
this.verticalAlignment != null
this.verticalAlignment.name has only one value
this.verticalAlignment.name != null
this.verticalAlignment.name.toString == "VerticalAlignment.CENTER"
this.listenerList != null
this.notify == true
this.id == null
this.margin != null
this.margin.unitType has only one value
this.margin.unitType != null
this.margin.unitType.name has only one value
this.margin.unitType.name != null
this.margin.unitType.name.toString == "UnitType.ABSOLUTE"
this.margin.top one of { 0.0, 1.0 }
this.margin.left one of { 0.0, 1.0 }
this.margin.bottom one of { 0.0, 1.0 }
this.margin.right one of { 0.0, 1.0 }
this.frame != null
this.padding has only one value
this.padding != null
this.padding.unitType has only one value
this.padding.unitType != null
this.padding.unitType.name has only one value
this.padding.unitType.name != null
this.padding.unitType.name.toString == "UnitType.ABSOLUTE"
this.padding.top == 1.0
this.padding.left == 1.0
this.padding.bottom == 1.0
this.padding.right == 1.0
this.width == 0.0
this.height == 0.0
this.bounds != null
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
size(this.sources[]) == 1
===========================================================================
org.jfree.chart.title.LegendTitle.LegendTitle(org.jfree.chart.LegendItemSource):::ENTER
===========================================================================
org.jfree.chart.title.LegendTitle.LegendTitle(org.jfree.chart.LegendItemSource):::EXIT
this.backgroundPaint == null
this.items.blocks[] == []
this.items.blocks[].getClass().getName() == []
this.position has only one value
this.position.name has only one value
this.position.name.toString == "RectangleEdge.TOP"
this.margin has only one value
this.margin.top == 0.0
this.margin.left == 0.0
this.margin.bottom == 0.0
this.margin.right == 0.0
this.frame has only one value
this.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class
===========================================================================
org.jfree.chart.title.LegendTitle.LegendTitle(org.jfree.chart.LegendItemSource, org.jfree.chart.block.Arrangement, org.jfree.chart.block.Arrangement):::ENTER
hLayout.getClass().getName() == org.jfree.chart.block.FlowArrangement.class
vLayout.getClass().getName() == org.jfree.chart.block.ColumnArrangement.class
===========================================================================
org.jfree.chart.title.LegendTitle.LegendTitle(org.jfree.chart.LegendItemSource, org.jfree.chart.block.Arrangement, org.jfree.chart.block.Arrangement):::EXIT
this.backgroundPaint == null
this.items.blocks[] == []
this.items.blocks[].getClass().getName() == []
this.position has only one value
this.position.name has only one value
this.position.name.toString == "RectangleEdge.TOP"
this.margin has only one value
this.margin.top == 0.0
this.margin.left == 0.0
this.margin.bottom == 0.0
this.margin.right == 0.0
this.frame has only one value
this.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class
===========================================================================
org.jfree.chart.title.LegendTitle.arrange(java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint):::ENTER
this.backgroundPaint has only one value
this.items.blocks[] == []
this.items.blocks[].getClass().getName() == []
this.position has only one value
this.position.name has only one value
this.position.name.toString == "RectangleEdge.BOTTOM"
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener has only one value
this.margin.top == 1.0
this.margin.left == 1.0
this.margin.bottom == 1.0
this.margin.right == 1.0
this.frame.getClass().getName() == org.jfree.chart.block.LineBorder.class
g2.getClass().getName() == sun.java2d.SunGraphics2D.class
org.jfree.chart.block.RectangleConstraint.NONE has only one value
org.jfree.chart.block.RectangleConstraint.NONE.width == 0.0
org.jfree.chart.block.RectangleConstraint.NONE.widthRange == null
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType has only one value
org.jfree.chart.block.RectangleConstraint.NONE.height == 0.0
org.jfree.chart.block.RectangleConstraint.NONE.heightRange == null
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType has only one value
constraint.width == 200.0
constraint.widthRange.lower == 0.0
constraint.widthRange.upper == 200.0
constraint.widthConstraintType has only one value
org.jfree.chart.block.LengthConstraintType.NONE has only one value
org.jfree.chart.block.LengthConstraintType.RANGE has only one value
org.jfree.chart.block.LengthConstraintType.FIXED has only one value
constraint.widthConstraintType.name has only one value
constraint.widthConstraintType.name.toString == "RectangleConstraintType.RANGE"
constraint.height == 77.046875
constraint.heightRange.lower == 0.0
constraint.heightRange.upper == 77.046875
constraint.heightConstraintType has only one value
constraint.heightConstraintType.name has only one value
constraint.heightConstraintType.name.toString == "RectangleConstraintType.RANGE"
===========================================================================
org.jfree.chart.title.LegendTitle.arrange(java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint):::EXIT472
this.items.blocks[] == orig(this.items.blocks[])
this.sources has only one value
this.sources[] contains no nulls and has only one value, of length 1
this.sources[] elements has only one value
this.sources[].getClass().getName() == [org.jfree.chart.plot.PiePlot]
this.sources[].getClass().getName() elements == org.jfree.chart.plot.PiePlot.class
this.legendItemGraphicPadding has only one value
this.itemLabelPadding has only one value
this.items has only one value
this.items.blocks has only one value
this.items.blocks[] == []
this.items.blocks[].getClass().getName() == []
this.items.arrangement has only one value
this.items.bounds has only one value
this.hLayout has only one value
this.vLayout has only one value
this.listenerList has only one value
this.margin has only one value
this.frame has only one value
this.bounds has only one value
constraint.widthRange has only one value
constraint.heightRange has only one value
return has only one value
return.width == 0.0
return.height == 0.0
orig(this) has only one value
orig(g2) has only one value
orig(constraint) has only one value
===========================================================================
org.jfree.chart.title.LegendTitle.arrange(java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint):::EXIT482
this.sources has only one value
this.sources[] contains no nulls and has only one value, of length 1
this.sources[] elements has only one value
this.sources[].getClass().getName() == [org.jfree.chart.plot.PiePlot3D]
this.sources[].getClass().getName() elements == org.jfree.chart.plot.PiePlot3D.class
this.legendItemGraphicPadding has only one value
this.itemLabelPadding has only one value
this.items has only one value
this.items.blocks has only one value
this.items.blocks[] contains no nulls and has only one value, of length 3
this.items.blocks[].getClass().getName() == [org.jfree.chart.block.BlockContainer, org.jfree.chart.block.BlockContainer, org.jfree.chart.block.BlockContainer]
this.items.arrangement has only one value
this.items.bounds has only one value
this.hLayout has only one value
this.vLayout has only one value
this.listenerList has only one value
this.margin has only one value
this.frame has only one value
this.bounds has only one value
constraint.widthRange has only one value
constraint.heightRange has only one value
return has only one value
return.width == 200.0
return.height == 43.9375
orig(this) has only one value
orig(g2) has only one value
orig(constraint) has only one value
size(this.items.blocks[]) == 3
===========================================================================
org.jfree.chart.title.LegendTitle.arrange(java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint):::EXIT
org.jfree.chart.title.LegendTitle.DEFAULT_ITEM_FONT == orig(org.jfree.chart.title.LegendTitle.DEFAULT_ITEM_FONT)
org.jfree.chart.title.LegendTitle.DEFAULT_ITEM_PAINT == orig(org.jfree.chart.title.LegendTitle.DEFAULT_ITEM_PAINT)
org.jfree.chart.title.LegendTitle.DEFAULT_ITEM_PAINT.getClass().getName() == orig(org.jfree.chart.title.LegendTitle.DEFAULT_ITEM_PAINT.getClass().getName())
this.sources == orig(this.sources)
this.sources.getClass().getName() == orig(this.sources.getClass().getName())
this.sources[] == orig(this.sources[])
this.backgroundPaint == orig(this.backgroundPaint)
this.backgroundPaint.getClass().getName() == orig(this.backgroundPaint.getClass().getName())
this.legendItemGraphicEdge == orig(this.legendItemGraphicEdge)
org.jfree.chart.util.RectangleEdge.TOP == orig(org.jfree.chart.util.RectangleEdge.TOP)
org.jfree.chart.util.RectangleEdge.BOTTOM == orig(org.jfree.chart.util.RectangleEdge.BOTTOM)
org.jfree.chart.util.RectangleEdge.LEFT == orig(org.jfree.chart.util.RectangleEdge.LEFT)
org.jfree.chart.util.RectangleEdge.RIGHT == orig(org.jfree.chart.util.RectangleEdge.RIGHT)
org.jfree.chart.util.RectangleEdge.TOP.name == orig(org.jfree.chart.util.RectangleEdge.TOP.name)
org.jfree.chart.util.RectangleEdge.TOP.name.toString == orig(org.jfree.chart.util.RectangleEdge.TOP.name.toString)
org.jfree.chart.util.RectangleEdge.BOTTOM.name == orig(org.jfree.chart.util.RectangleEdge.BOTTOM.name)
org.jfree.chart.util.RectangleEdge.BOTTOM.name.toString == orig(org.jfree.chart.util.RectangleEdge.BOTTOM.name.toString)
org.jfree.chart.util.RectangleEdge.LEFT.name == orig(org.jfree.chart.util.RectangleEdge.LEFT.name)
org.jfree.chart.util.RectangleEdge.LEFT.name.toString == orig(org.jfree.chart.util.RectangleEdge.LEFT.name.toString)
org.jfree.chart.util.RectangleEdge.RIGHT.name == orig(org.jfree.chart.util.RectangleEdge.RIGHT.name)
org.jfree.chart.util.RectangleEdge.RIGHT.name.toString == orig(org.jfree.chart.util.RectangleEdge.RIGHT.name.toString)
this.legendItemGraphicEdge.name == orig(this.legendItemGraphicEdge.name)
this.legendItemGraphicEdge.name.toString == orig(this.legendItemGraphicEdge.name.toString)
this.legendItemGraphicAnchor == orig(this.legendItemGraphicAnchor)
org.jfree.chart.util.RectangleAnchor.CENTER == orig(org.jfree.chart.util.RectangleAnchor.CENTER)
org.jfree.chart.util.RectangleAnchor.TOP == orig(org.jfree.chart.util.RectangleAnchor.TOP)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT)
org.jfree.chart.util.RectangleAnchor.BOTTOM == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)
org.jfree.chart.util.RectangleAnchor.LEFT == orig(org.jfree.chart.util.RectangleAnchor.LEFT)
org.jfree.chart.util.RectangleAnchor.RIGHT == orig(org.jfree.chart.util.RectangleAnchor.RIGHT)
org.jfree.chart.util.RectangleAnchor.CENTER.name == orig(org.jfree.chart.util.RectangleAnchor.CENTER.name)
org.jfree.chart.util.RectangleAnchor.CENTER.name.toString == orig(org.jfree.chart.util.RectangleAnchor.CENTER.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP.name == orig(org.jfree.chart.util.RectangleAnchor.TOP.name)
org.jfree.chart.util.RectangleAnchor.TOP.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name.toString)
org.jfree.chart.util.RectangleAnchor.LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.LEFT.name)
org.jfree.chart.util.RectangleAnchor.LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.RIGHT.name)
org.jfree.chart.util.RectangleAnchor.RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.RIGHT.name.toString)
this.legendItemGraphicAnchor.name == orig(this.legendItemGraphicAnchor.name)
this.legendItemGraphicAnchor.name.toString == orig(this.legendItemGraphicAnchor.name.toString)
this.legendItemGraphicLocation == orig(this.legendItemGraphicLocation)
this.legendItemGraphicLocation.name == orig(this.legendItemGraphicLocation.name)
this.legendItemGraphicLocation.name.toString == orig(this.legendItemGraphicLocation.name.toString)
this.legendItemGraphicPadding == orig(this.legendItemGraphicPadding)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.legendItemGraphicPadding.unitType == orig(this.legendItemGraphicPadding.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.legendItemGraphicPadding.unitType.name == orig(this.legendItemGraphicPadding.unitType.name)
this.legendItemGraphicPadding.unitType.name.toString == orig(this.legendItemGraphicPadding.unitType.name.toString)
this.legendItemGraphicPadding.top == orig(this.legendItemGraphicPadding.top)
this.legendItemGraphicPadding.left == orig(this.legendItemGraphicPadding.left)
this.legendItemGraphicPadding.bottom == orig(this.legendItemGraphicPadding.bottom)
this.legendItemGraphicPadding.right == orig(this.legendItemGraphicPadding.right)
this.itemFont == orig(this.itemFont)
this.itemPaint == orig(this.itemPaint)
this.itemPaint.getClass().getName() == orig(this.itemPaint.getClass().getName())
this.itemLabelPadding == orig(this.itemLabelPadding)
this.itemLabelPadding.unitType == orig(this.itemLabelPadding.unitType)
this.itemLabelPadding.unitType.name == orig(this.itemLabelPadding.unitType.name)
this.itemLabelPadding.unitType.name.toString == orig(this.itemLabelPadding.unitType.name.toString)
this.itemLabelPadding.top == orig(this.itemLabelPadding.top)
this.itemLabelPadding.left == orig(this.itemLabelPadding.left)
this.itemLabelPadding.bottom == orig(this.itemLabelPadding.bottom)
this.itemLabelPadding.right == orig(this.itemLabelPadding.right)
this.items == orig(this.items)
this.items.blocks == orig(this.items.blocks)
this.items.blocks.getClass().getName() == orig(this.items.blocks.getClass().getName())
this.items.arrangement == orig(this.items.arrangement)
this.items.arrangement.getClass().getName() == orig(this.items.arrangement.getClass().getName())
this.items.id == orig(this.items.id)
this.items.margin == orig(this.items.margin)
this.items.margin.unitType == orig(this.items.margin.unitType)
this.items.margin.top == orig(this.items.margin.top)
this.items.margin.left == orig(this.items.margin.left)
this.items.margin.bottom == orig(this.items.margin.bottom)
this.items.margin.right == orig(this.items.margin.right)
this.items.frame == orig(this.items.frame)
this.items.frame.getClass().getName() == orig(this.items.frame.getClass().getName())
this.items.padding == orig(this.items.padding)
this.items.padding.unitType == orig(this.items.padding.unitType)
this.items.padding.top == orig(this.items.padding.top)
this.items.padding.left == orig(this.items.padding.left)
this.items.padding.bottom == orig(this.items.padding.bottom)
this.items.padding.right == orig(this.items.padding.right)
this.items.width == orig(this.items.width)
this.items.height == orig(this.items.height)
this.items.bounds == orig(this.items.bounds)
this.items.bounds.getClass().getName() == orig(this.items.bounds.getClass().getName())
this.hLayout == orig(this.hLayout)
this.hLayout.getClass().getName() == orig(this.hLayout.getClass().getName())
this.vLayout == orig(this.vLayout)
this.vLayout.getClass().getName() == orig(this.vLayout.getClass().getName())
this.wrapper == orig(this.wrapper)
org.jfree.chart.title.Title.DEFAULT_POSITION == orig(org.jfree.chart.title.Title.DEFAULT_POSITION)
org.jfree.chart.title.Title.DEFAULT_POSITION.name == orig(org.jfree.chart.title.Title.DEFAULT_POSITION.name)
org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT)
org.jfree.chart.util.HorizontalAlignment.LEFT == orig(org.jfree.chart.util.HorizontalAlignment.LEFT)
org.jfree.chart.util.HorizontalAlignment.RIGHT == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT)
org.jfree.chart.util.HorizontalAlignment.CENTER == orig(org.jfree.chart.util.HorizontalAlignment.CENTER)
org.jfree.chart.util.HorizontalAlignment.LEFT.name == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name)
org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString)
org.jfree.chart.util.HorizontalAlignment.CENTER.name == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name)
org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT)
org.jfree.chart.util.VerticalAlignment.TOP == orig(org.jfree.chart.util.VerticalAlignment.TOP)
org.jfree.chart.util.VerticalAlignment.BOTTOM == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM)
org.jfree.chart.util.VerticalAlignment.CENTER == orig(org.jfree.chart.util.VerticalAlignment.CENTER)
org.jfree.chart.util.VerticalAlignment.TOP.name == orig(org.jfree.chart.util.VerticalAlignment.TOP.name)
org.jfree.chart.util.VerticalAlignment.TOP.name.toString == orig(org.jfree.chart.util.VerticalAlignment.TOP.name.toString)
org.jfree.chart.util.VerticalAlignment.BOTTOM.name == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM.name)
org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString)
org.jfree.chart.util.VerticalAlignment.CENTER.name == orig(org.jfree.chart.util.VerticalAlignment.CENTER.name)
org.jfree.chart.util.VerticalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.VerticalAlignment.CENTER.name.toString)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString)
org.jfree.chart.title.Title.DEFAULT_PADDING == orig(org.jfree.chart.title.Title.DEFAULT_PADDING)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name.toString)
org.jfree.chart.title.Title.DEFAULT_PADDING.top == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.top)
org.jfree.chart.title.Title.DEFAULT_PADDING.left == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.left)
org.jfree.chart.title.Title.DEFAULT_PADDING.bottom == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.bottom)
org.jfree.chart.title.Title.DEFAULT_PADDING.right == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.right)
this.position == orig(this.position)
this.position.name == orig(this.position.name)
this.position.name.toString == orig(this.position.name.toString)
this.horizontalAlignment == orig(this.horizontalAlignment)
this.horizontalAlignment.name == orig(this.horizontalAlignment.name)
this.horizontalAlignment.name.toString == orig(this.horizontalAlignment.name.toString)
this.verticalAlignment == orig(this.verticalAlignment)
this.verticalAlignment.name == orig(this.verticalAlignment.name)
this.verticalAlignment.name.toString == orig(this.verticalAlignment.name.toString)
this.listenerList == orig(this.listenerList)
this.notify == orig(this.notify)
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener == orig(org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener)
this.id == orig(this.id)
this.margin == orig(this.margin)
this.margin.unitType == orig(this.margin.unitType)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
org.jfree.chart.block.RectangleConstraint.NONE == orig(org.jfree.chart.block.RectangleConstraint.NONE)
org.jfree.chart.block.RectangleConstraint.NONE.width == orig(org.jfree.chart.block.RectangleConstraint.NONE.width)
org.jfree.chart.block.RectangleConstraint.NONE.widthRange == orig(org.jfree.chart.block.RectangleConstraint.NONE.widthRange)
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType == orig(org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType)
org.jfree.chart.block.RectangleConstraint.NONE.height == orig(org.jfree.chart.block.RectangleConstraint.NONE.height)
org.jfree.chart.block.RectangleConstraint.NONE.heightRange == orig(org.jfree.chart.block.RectangleConstraint.NONE.heightRange)
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType == orig(org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType)
constraint.width == orig(constraint.width)
constraint.widthRange == orig(constraint.widthRange)
constraint.widthRange.lower == orig(constraint.widthRange.lower)
constraint.widthRange.upper == orig(constraint.widthRange.upper)
constraint.widthConstraintType == orig(constraint.widthConstraintType)
org.jfree.chart.block.LengthConstraintType.NONE == orig(org.jfree.chart.block.LengthConstraintType.NONE)
org.jfree.chart.block.LengthConstraintType.RANGE == orig(org.jfree.chart.block.LengthConstraintType.RANGE)
org.jfree.chart.block.LengthConstraintType.FIXED == orig(org.jfree.chart.block.LengthConstraintType.FIXED)
constraint.widthConstraintType.name == orig(constraint.widthConstraintType.name)
constraint.widthConstraintType.name.toString == orig(constraint.widthConstraintType.name.toString)
constraint.height == orig(constraint.height)
constraint.heightRange == orig(constraint.heightRange)
constraint.heightRange.lower == orig(constraint.heightRange.lower)
constraint.heightRange.upper == orig(constraint.heightRange.upper)
constraint.heightConstraintType == orig(constraint.heightConstraintType)
constraint.heightConstraintType.name == orig(constraint.heightConstraintType.name)
constraint.heightConstraintType.name.toString == orig(constraint.heightConstraintType.name.toString)
(this.sources[] contains no nulls and has only one value, of length 1)  <==>  (return.height == 0.0)
(this.sources[] contains no nulls and has only one value, of length 1)  <==>  (return.height == 43.9375)
(this.sources[] contains no nulls and has only one value, of length 1)  <==>  (return.width == 0.0)
(this.sources[] contains no nulls and has only one value, of length 1)  <==>  (return.width == 200.0)
(this.sources[] contains no nulls and has only one value, of length 1)  <==>  (size(this.items.blocks[]) == 3)
(this.sources[] contains no nulls and has only one value, of length 1)  <==>  (this.items.blocks[] == [])
(this.sources[] contains no nulls and has only one value, of length 1)  <==>  (this.items.blocks[] contains no nulls and has only one value, of length 3)
(this.sources[] contains no nulls and has only one value, of length 1)  <==>  (this.items.blocks[].getClass().getName() == [])
(this.sources[] contains no nulls and has only one value, of length 1)  <==>  (this.items.blocks[].getClass().getName() == [org.jfree.chart.block.BlockContainer, org.jfree.chart.block.BlockContainer, org.jfree.chart.block.BlockContainer])
(this.sources[] contains no nulls and has only one value, of length 1)  <==>  (this.sources[].getClass().getName() == [org.jfree.chart.plot.PiePlot3D])
(this.sources[] contains no nulls and has only one value, of length 1)  <==>  (this.sources[].getClass().getName() == [org.jfree.chart.plot.PiePlot])
(this.sources[] contains no nulls and has only one value, of length 1)  <==>  (this.sources[].getClass().getName() elements == org.jfree.chart.plot.PiePlot.class)
(this.sources[] contains no nulls and has only one value, of length 1)  <==>  (this.sources[].getClass().getName() elements == org.jfree.chart.plot.PiePlot3D.class)
(this.sources[] contains no nulls and has only one value, of length 1)  ==>  (this.items.blocks[] == orig(this.items.blocks[]))
(this.sources[] contains no nulls and has only one value, of length 1)  ==>  (this.items.blocks[].getClass().getName() elements == org.jfree.chart.block.BlockContainer.class)
this.backgroundPaint has only one value
this.items.blocks[].getClass().getName() one of { [], [org.jfree.chart.block.BlockContainer, org.jfree.chart.block.BlockContainer, org.jfree.chart.block.BlockContainer] }
this.position has only one value
this.position.name has only one value
this.position.name.toString == "RectangleEdge.BOTTOM"
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener has only one value
this.margin.top == 1.0
this.margin.left == 1.0
this.margin.bottom == 1.0
this.margin.right == 1.0
this.frame.getClass().getName() == org.jfree.chart.block.LineBorder.class
org.jfree.chart.block.RectangleConstraint.NONE has only one value
org.jfree.chart.block.RectangleConstraint.NONE.width == 0.0
org.jfree.chart.block.RectangleConstraint.NONE.widthRange == null
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType has only one value
org.jfree.chart.block.RectangleConstraint.NONE.height == 0.0
org.jfree.chart.block.RectangleConstraint.NONE.heightRange == null
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType has only one value
constraint.width == 200.0
constraint.widthRange.lower == 0.0
constraint.widthRange.upper == 200.0
constraint.widthConstraintType has only one value
org.jfree.chart.block.LengthConstraintType.NONE has only one value
org.jfree.chart.block.LengthConstraintType.RANGE has only one value
org.jfree.chart.block.LengthConstraintType.FIXED has only one value
constraint.widthConstraintType.name has only one value
constraint.widthConstraintType.name.toString == "RectangleConstraintType.RANGE"
constraint.height == 77.046875
constraint.heightRange.lower == 0.0
constraint.heightRange.upper == 77.046875
constraint.heightConstraintType has only one value
constraint.heightConstraintType.name has only one value
constraint.heightConstraintType.name.toString == "RectangleConstraintType.RANGE"
return.width one of { 0.0, 200.0 }
return.height one of { 0.0, 43.9375 }
size(this.items.blocks[]) one of { 0, 3 }
===========================================================================
org.jfree.chart.title.LegendTitle.createLegendItemBlock(org.jfree.chart.LegendItem):::ENTER
this has only one value
this.sources has only one value
this.sources[] contains no nulls and has only one value, of length 1
this.sources[] elements has only one value
this.sources[].getClass().getName() == [org.jfree.chart.plot.PiePlot3D]
this.sources[].getClass().getName() elements == org.jfree.chart.plot.PiePlot3D.class
this.backgroundPaint has only one value
this.legendItemGraphicPadding has only one value
this.itemLabelPadding has only one value
this.items has only one value
this.items.blocks has only one value
this.items.arrangement has only one value
this.items.bounds has only one value
this.hLayout has only one value
this.vLayout has only one value
this.position has only one value
this.position.name has only one value
this.position.name.toString == "RectangleEdge.BOTTOM"
this.listenerList has only one value
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener has only one value
this.margin has only one value
this.margin.top == 1.0
this.margin.left == 1.0
this.margin.bottom == 1.0
this.margin.right == 1.0
this.frame has only one value
this.frame.getClass().getName() == org.jfree.chart.block.LineBorder.class
this.bounds has only one value
item.dataset has only one value
item.dataset.getClass().getName() == org.jfree.data.general.DefaultPieDataset.class
item.seriesKey == null
item.datasetIndex == 0
item.series == 0
item.label.toString one of { "Section 1", "Section 2", "Section 3" }
item.attributedLabel == null
item.description.toString one of { "Section 1", "Section 2", "Section 3" }
item.toolTipText == null
item.urlText == null
item.shapeVisible == true
item.shape has only one value
item.shape.getClass().getName() == java.awt.geom.Ellipse2D$Double.class
item.shapeFilled == true
item.fillPaint.getClass().getName() == java.awt.Color.class
item.fillPaintTransformer.getClass().getName() == org.jfree.chart.util.StandardGradientPaintTransformer.class
item.shapeOutlineVisible == true
item.outlinePaint has only one value
item.outlinePaint.getClass().getName() == java.awt.Color.class
item.outlineStroke has only one value
item.outlineStroke.getClass().getName() == java.awt.BasicStroke.class
item.lineVisible == false
item.line.getClass().getName() == java.awt.geom.Line2D$Float.class
item.lineStroke.getClass().getName() == java.awt.BasicStroke.class
item.linePaint has only one value
item.linePaint.getClass().getName() == java.awt.Color.class
org.jfree.chart.LegendItem.UNUSED_SHAPE has only one value
org.jfree.chart.LegendItem.UNUSED_SHAPE.getClass().getName() == java.awt.geom.Line2D$Float.class
org.jfree.chart.LegendItem.UNUSED_STROKE has only one value
org.jfree.chart.LegendItem.UNUSED_STROKE.getClass().getName() == java.awt.BasicStroke.class
size(this.items.blocks[]) one of { 0, 1, 2 }
===========================================================================
org.jfree.chart.title.LegendTitle.createLegendItemBlock(org.jfree.chart.LegendItem):::EXIT
org.jfree.chart.title.LegendTitle.DEFAULT_ITEM_FONT == orig(org.jfree.chart.title.LegendTitle.DEFAULT_ITEM_FONT)
org.jfree.chart.title.LegendTitle.DEFAULT_ITEM_PAINT == orig(org.jfree.chart.title.LegendTitle.DEFAULT_ITEM_PAINT)
org.jfree.chart.title.LegendTitle.DEFAULT_ITEM_PAINT.getClass().getName() == orig(org.jfree.chart.title.LegendTitle.DEFAULT_ITEM_PAINT.getClass().getName())
this.sources == orig(this.sources)
this.sources.getClass().getName() == orig(this.sources.getClass().getName())
this.sources[] == orig(this.sources[])
this.backgroundPaint == orig(this.backgroundPaint)
this.backgroundPaint.getClass().getName() == orig(this.backgroundPaint.getClass().getName())
this.legendItemGraphicEdge == orig(this.legendItemGraphicEdge)
org.jfree.chart.util.RectangleEdge.TOP == orig(org.jfree.chart.util.RectangleEdge.TOP)
org.jfree.chart.util.RectangleEdge.BOTTOM == orig(org.jfree.chart.util.RectangleEdge.BOTTOM)
org.jfree.chart.util.RectangleEdge.LEFT == orig(org.jfree.chart.util.RectangleEdge.LEFT)
org.jfree.chart.util.RectangleEdge.RIGHT == orig(org.jfree.chart.util.RectangleEdge.RIGHT)
org.jfree.chart.util.RectangleEdge.TOP.name == orig(org.jfree.chart.util.RectangleEdge.TOP.name)
org.jfree.chart.util.RectangleEdge.TOP.name.toString == orig(org.jfree.chart.util.RectangleEdge.TOP.name.toString)
org.jfree.chart.util.RectangleEdge.BOTTOM.name == orig(org.jfree.chart.util.RectangleEdge.BOTTOM.name)
org.jfree.chart.util.RectangleEdge.BOTTOM.name.toString == orig(org.jfree.chart.util.RectangleEdge.BOTTOM.name.toString)
org.jfree.chart.util.RectangleEdge.LEFT.name == orig(org.jfree.chart.util.RectangleEdge.LEFT.name)
org.jfree.chart.util.RectangleEdge.LEFT.name.toString == orig(org.jfree.chart.util.RectangleEdge.LEFT.name.toString)
org.jfree.chart.util.RectangleEdge.RIGHT.name == orig(org.jfree.chart.util.RectangleEdge.RIGHT.name)
org.jfree.chart.util.RectangleEdge.RIGHT.name.toString == orig(org.jfree.chart.util.RectangleEdge.RIGHT.name.toString)
this.legendItemGraphicEdge.name == orig(this.legendItemGraphicEdge.name)
this.legendItemGraphicEdge.name.toString == orig(this.legendItemGraphicEdge.name.toString)
this.legendItemGraphicAnchor == orig(this.legendItemGraphicAnchor)
org.jfree.chart.util.RectangleAnchor.CENTER == orig(org.jfree.chart.util.RectangleAnchor.CENTER)
org.jfree.chart.util.RectangleAnchor.TOP == orig(org.jfree.chart.util.RectangleAnchor.TOP)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT)
org.jfree.chart.util.RectangleAnchor.BOTTOM == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)
org.jfree.chart.util.RectangleAnchor.LEFT == orig(org.jfree.chart.util.RectangleAnchor.LEFT)
org.jfree.chart.util.RectangleAnchor.RIGHT == orig(org.jfree.chart.util.RectangleAnchor.RIGHT)
org.jfree.chart.util.RectangleAnchor.CENTER.name == orig(org.jfree.chart.util.RectangleAnchor.CENTER.name)
org.jfree.chart.util.RectangleAnchor.CENTER.name.toString == orig(org.jfree.chart.util.RectangleAnchor.CENTER.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP.name == orig(org.jfree.chart.util.RectangleAnchor.TOP.name)
org.jfree.chart.util.RectangleAnchor.TOP.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name.toString)
org.jfree.chart.util.RectangleAnchor.LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.LEFT.name)
org.jfree.chart.util.RectangleAnchor.LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.RIGHT.name)
org.jfree.chart.util.RectangleAnchor.RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.RIGHT.name.toString)
this.legendItemGraphicAnchor.name == orig(this.legendItemGraphicAnchor.name)
this.legendItemGraphicAnchor.name.toString == orig(this.legendItemGraphicAnchor.name.toString)
this.legendItemGraphicLocation == orig(this.legendItemGraphicLocation)
this.legendItemGraphicLocation.name == orig(this.legendItemGraphicLocation.name)
this.legendItemGraphicLocation.name.toString == orig(this.legendItemGraphicLocation.name.toString)
this.legendItemGraphicPadding == orig(this.legendItemGraphicPadding)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.legendItemGraphicPadding.unitType == orig(this.legendItemGraphicPadding.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.legendItemGraphicPadding.unitType.name == orig(this.legendItemGraphicPadding.unitType.name)
this.legendItemGraphicPadding.unitType.name.toString == orig(this.legendItemGraphicPadding.unitType.name.toString)
this.legendItemGraphicPadding.top == orig(this.legendItemGraphicPadding.top)
this.legendItemGraphicPadding.left == orig(this.legendItemGraphicPadding.left)
this.legendItemGraphicPadding.bottom == orig(this.legendItemGraphicPadding.bottom)
this.legendItemGraphicPadding.right == orig(this.legendItemGraphicPadding.right)
this.itemFont == orig(this.itemFont)
this.itemPaint == orig(this.itemPaint)
this.itemPaint.getClass().getName() == orig(this.itemPaint.getClass().getName())
this.itemLabelPadding == orig(this.itemLabelPadding)
this.itemLabelPadding.unitType == orig(this.itemLabelPadding.unitType)
this.itemLabelPadding.unitType.name == orig(this.itemLabelPadding.unitType.name)
this.itemLabelPadding.unitType.name.toString == orig(this.itemLabelPadding.unitType.name.toString)
this.itemLabelPadding.top == orig(this.itemLabelPadding.top)
this.itemLabelPadding.left == orig(this.itemLabelPadding.left)
this.itemLabelPadding.bottom == orig(this.itemLabelPadding.bottom)
this.itemLabelPadding.right == orig(this.itemLabelPadding.right)
this.items == orig(this.items)
this.items.blocks == orig(this.items.blocks)
this.items.blocks[] == orig(this.items.blocks[])
this.items.blocks.getClass().getName() == orig(this.items.blocks.getClass().getName())
this.items.arrangement == orig(this.items.arrangement)
this.items.arrangement.getClass().getName() == orig(this.items.arrangement.getClass().getName())
this.items.id == orig(this.items.id)
this.items.margin == orig(this.items.margin)
this.items.margin.unitType == orig(this.items.margin.unitType)
this.items.margin.top == orig(this.items.margin.top)
this.items.margin.left == orig(this.items.margin.left)
this.items.margin.bottom == orig(this.items.margin.bottom)
this.items.margin.right == orig(this.items.margin.right)
this.items.frame == orig(this.items.frame)
this.items.frame.getClass().getName() == orig(this.items.frame.getClass().getName())
this.items.padding == orig(this.items.padding)
this.items.padding.unitType == orig(this.items.padding.unitType)
this.items.padding.top == orig(this.items.padding.top)
this.items.padding.left == orig(this.items.padding.left)
this.items.padding.bottom == orig(this.items.padding.bottom)
this.items.padding.right == orig(this.items.padding.right)
this.items.width == orig(this.items.width)
this.items.height == orig(this.items.height)
this.items.bounds == orig(this.items.bounds)
this.items.bounds.getClass().getName() == orig(this.items.bounds.getClass().getName())
this.hLayout == orig(this.hLayout)
this.hLayout.getClass().getName() == orig(this.hLayout.getClass().getName())
this.vLayout == orig(this.vLayout)
this.vLayout.getClass().getName() == orig(this.vLayout.getClass().getName())
this.wrapper == orig(this.wrapper)
org.jfree.chart.title.Title.DEFAULT_POSITION == orig(org.jfree.chart.title.Title.DEFAULT_POSITION)
org.jfree.chart.title.Title.DEFAULT_POSITION.name == orig(org.jfree.chart.title.Title.DEFAULT_POSITION.name)
org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT)
org.jfree.chart.util.HorizontalAlignment.LEFT == orig(org.jfree.chart.util.HorizontalAlignment.LEFT)
org.jfree.chart.util.HorizontalAlignment.RIGHT == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT)
org.jfree.chart.util.HorizontalAlignment.CENTER == orig(org.jfree.chart.util.HorizontalAlignment.CENTER)
org.jfree.chart.util.HorizontalAlignment.LEFT.name == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name)
org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString)
org.jfree.chart.util.HorizontalAlignment.CENTER.name == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name)
org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT)
org.jfree.chart.util.VerticalAlignment.TOP == orig(org.jfree.chart.util.VerticalAlignment.TOP)
org.jfree.chart.util.VerticalAlignment.BOTTOM == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM)
org.jfree.chart.util.VerticalAlignment.CENTER == orig(org.jfree.chart.util.VerticalAlignment.CENTER)
org.jfree.chart.util.VerticalAlignment.TOP.name == orig(org.jfree.chart.util.VerticalAlignment.TOP.name)
org.jfree.chart.util.VerticalAlignment.TOP.name.toString == orig(org.jfree.chart.util.VerticalAlignment.TOP.name.toString)
org.jfree.chart.util.VerticalAlignment.BOTTOM.name == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM.name)
org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString)
org.jfree.chart.util.VerticalAlignment.CENTER.name == orig(org.jfree.chart.util.VerticalAlignment.CENTER.name)
org.jfree.chart.util.VerticalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.VerticalAlignment.CENTER.name.toString)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString)
org.jfree.chart.title.Title.DEFAULT_PADDING == orig(org.jfree.chart.title.Title.DEFAULT_PADDING)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name.toString)
org.jfree.chart.title.Title.DEFAULT_PADDING.top == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.top)
org.jfree.chart.title.Title.DEFAULT_PADDING.left == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.left)
org.jfree.chart.title.Title.DEFAULT_PADDING.bottom == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.bottom)
org.jfree.chart.title.Title.DEFAULT_PADDING.right == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.right)
this.position == orig(this.position)
this.position.name == orig(this.position.name)
this.position.name.toString == orig(this.position.name.toString)
this.horizontalAlignment == orig(this.horizontalAlignment)
this.horizontalAlignment.name == orig(this.horizontalAlignment.name)
this.horizontalAlignment.name.toString == orig(this.horizontalAlignment.name.toString)
this.verticalAlignment == orig(this.verticalAlignment)
this.verticalAlignment.name == orig(this.verticalAlignment.name)
this.verticalAlignment.name.toString == orig(this.verticalAlignment.name.toString)
this.listenerList == orig(this.listenerList)
this.notify == orig(this.notify)
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener == orig(org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener)
this.id == orig(this.id)
this.margin == orig(this.margin)
this.margin.unitType == orig(this.margin.unitType)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
item.dataset == orig(item.dataset)
item.dataset.getClass().getName() == orig(item.dataset.getClass().getName())
item.seriesKey == orig(item.seriesKey)
item.datasetIndex == orig(item.datasetIndex)
item.series == orig(item.series)
item.label == orig(item.label)
item.label.toString == orig(item.label.toString)
item.attributedLabel == orig(item.attributedLabel)
item.description == orig(item.description)
item.description.toString == orig(item.description.toString)
item.toolTipText == orig(item.toolTipText)
item.urlText == orig(item.urlText)
item.shapeVisible == orig(item.shapeVisible)
item.shape == orig(item.shape)
item.shape.getClass().getName() == orig(item.shape.getClass().getName())
item.shapeFilled == orig(item.shapeFilled)
item.fillPaint == orig(item.fillPaint)
item.fillPaint.getClass().getName() == orig(item.fillPaint.getClass().getName())
item.fillPaintTransformer == orig(item.fillPaintTransformer)
item.fillPaintTransformer.getClass().getName() == orig(item.fillPaintTransformer.getClass().getName())
item.shapeOutlineVisible == orig(item.shapeOutlineVisible)
item.outlinePaint == orig(item.outlinePaint)
item.outlinePaint.getClass().getName() == orig(item.outlinePaint.getClass().getName())
item.outlineStroke == orig(item.outlineStroke)
item.outlineStroke.getClass().getName() == orig(item.outlineStroke.getClass().getName())
item.lineVisible == orig(item.lineVisible)
item.line == orig(item.line)
item.line.getClass().getName() == orig(item.line.getClass().getName())
item.lineStroke == orig(item.lineStroke)
item.lineStroke.getClass().getName() == orig(item.lineStroke.getClass().getName())
item.linePaint == orig(item.linePaint)
item.linePaint.getClass().getName() == orig(item.linePaint.getClass().getName())
org.jfree.chart.LegendItem.UNUSED_SHAPE == orig(org.jfree.chart.LegendItem.UNUSED_SHAPE)
org.jfree.chart.LegendItem.UNUSED_SHAPE.getClass().getName() == orig(org.jfree.chart.LegendItem.UNUSED_SHAPE.getClass().getName())
org.jfree.chart.LegendItem.UNUSED_STROKE == orig(org.jfree.chart.LegendItem.UNUSED_STROKE)
org.jfree.chart.LegendItem.UNUSED_STROKE.getClass().getName() == orig(org.jfree.chart.LegendItem.UNUSED_STROKE.getClass().getName())
this.sources has only one value
this.sources[] contains no nulls and has only one value, of length 1
this.sources[] elements has only one value
this.sources[].getClass().getName() == [org.jfree.chart.plot.PiePlot3D]
this.sources[].getClass().getName() elements == org.jfree.chart.plot.PiePlot3D.class
this.backgroundPaint has only one value
this.legendItemGraphicPadding has only one value
this.itemLabelPadding has only one value
this.items has only one value
this.items.blocks has only one value
this.items.arrangement has only one value
this.items.bounds has only one value
this.hLayout has only one value
this.vLayout has only one value
this.position has only one value
this.position.name has only one value
this.position.name.toString == "RectangleEdge.BOTTOM"
this.listenerList has only one value
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener has only one value
this.margin has only one value
this.margin.top == 1.0
this.margin.left == 1.0
this.margin.bottom == 1.0
this.margin.right == 1.0
this.frame has only one value
this.frame.getClass().getName() == org.jfree.chart.block.LineBorder.class
this.bounds has only one value
item.dataset has only one value
item.dataset.getClass().getName() == org.jfree.data.general.DefaultPieDataset.class
item.seriesKey == null
item.datasetIndex == 0
item.series == 0
item.label.toString one of { "Section 1", "Section 2", "Section 3" }
item.attributedLabel == null
item.description.toString one of { "Section 1", "Section 2", "Section 3" }
item.toolTipText == null
item.urlText == null
item.shapeVisible == true
item.shape has only one value
item.shape.getClass().getName() == java.awt.geom.Ellipse2D$Double.class
item.shapeFilled == true
item.fillPaint.getClass().getName() == java.awt.Color.class
item.fillPaintTransformer.getClass().getName() == org.jfree.chart.util.StandardGradientPaintTransformer.class
item.shapeOutlineVisible == true
item.outlinePaint has only one value
item.outlinePaint.getClass().getName() == java.awt.Color.class
item.outlineStroke has only one value
item.outlineStroke.getClass().getName() == java.awt.BasicStroke.class
item.lineVisible == false
item.line.getClass().getName() == java.awt.geom.Line2D$Float.class
item.lineStroke.getClass().getName() == java.awt.BasicStroke.class
item.linePaint has only one value
item.linePaint.getClass().getName() == java.awt.Color.class
org.jfree.chart.LegendItem.UNUSED_SHAPE has only one value
org.jfree.chart.LegendItem.UNUSED_SHAPE.getClass().getName() == java.awt.geom.Line2D$Float.class
org.jfree.chart.LegendItem.UNUSED_STROKE has only one value
org.jfree.chart.LegendItem.UNUSED_STROKE.getClass().getName() == java.awt.BasicStroke.class
return.getClass().getName() == org.jfree.chart.block.BlockContainer.class
size(this.items.blocks[]) one of { 0, 1, 2 }
===========================================================================
org.jfree.chart.title.LegendTitle.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.lang.Object):::ENTER
this.backgroundPaint has only one value
this.items.blocks[].getClass().getName() one of { [], [org.jfree.chart.block.BlockContainer, org.jfree.chart.block.BlockContainer, org.jfree.chart.block.BlockContainer] }
this.position has only one value
this.position.name has only one value
this.position.name.toString == "RectangleEdge.BOTTOM"
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener has only one value
this.margin.top == 1.0
this.margin.left == 1.0
this.margin.bottom == 1.0
this.margin.right == 1.0
this.frame.getClass().getName() == org.jfree.chart.block.LineBorder.class
g2.getClass().getName() == sun.java2d.SunGraphics2D.class
area.getClass().getName() == java.awt.geom.Rectangle2D$Double.class
params.getClass().getName() == org.jfree.chart.block.BlockParams.class
size(this.items.blocks[]) one of { 0, 3 }
===========================================================================
org.jfree.chart.title.LegendTitle.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.lang.Object):::EXIT
org.jfree.chart.title.LegendTitle.DEFAULT_ITEM_FONT == orig(org.jfree.chart.title.LegendTitle.DEFAULT_ITEM_FONT)
org.jfree.chart.title.LegendTitle.DEFAULT_ITEM_PAINT == orig(org.jfree.chart.title.LegendTitle.DEFAULT_ITEM_PAINT)
org.jfree.chart.title.LegendTitle.DEFAULT_ITEM_PAINT.getClass().getName() == orig(org.jfree.chart.title.LegendTitle.DEFAULT_ITEM_PAINT.getClass().getName())
this.sources == orig(this.sources)
this.sources.getClass().getName() == orig(this.sources.getClass().getName())
this.sources[] == orig(this.sources[])
this.backgroundPaint == orig(this.backgroundPaint)
this.backgroundPaint.getClass().getName() == orig(this.backgroundPaint.getClass().getName())
this.legendItemGraphicEdge == orig(this.legendItemGraphicEdge)
org.jfree.chart.util.RectangleEdge.TOP == orig(org.jfree.chart.util.RectangleEdge.TOP)
org.jfree.chart.util.RectangleEdge.BOTTOM == orig(org.jfree.chart.util.RectangleEdge.BOTTOM)
org.jfree.chart.util.RectangleEdge.LEFT == orig(org.jfree.chart.util.RectangleEdge.LEFT)
org.jfree.chart.util.RectangleEdge.RIGHT == orig(org.jfree.chart.util.RectangleEdge.RIGHT)
org.jfree.chart.util.RectangleEdge.TOP.name == orig(org.jfree.chart.util.RectangleEdge.TOP.name)
org.jfree.chart.util.RectangleEdge.TOP.name.toString == orig(org.jfree.chart.util.RectangleEdge.TOP.name.toString)
org.jfree.chart.util.RectangleEdge.BOTTOM.name == orig(org.jfree.chart.util.RectangleEdge.BOTTOM.name)
org.jfree.chart.util.RectangleEdge.BOTTOM.name.toString == orig(org.jfree.chart.util.RectangleEdge.BOTTOM.name.toString)
org.jfree.chart.util.RectangleEdge.LEFT.name == orig(org.jfree.chart.util.RectangleEdge.LEFT.name)
org.jfree.chart.util.RectangleEdge.LEFT.name.toString == orig(org.jfree.chart.util.RectangleEdge.LEFT.name.toString)
org.jfree.chart.util.RectangleEdge.RIGHT.name == orig(org.jfree.chart.util.RectangleEdge.RIGHT.name)
org.jfree.chart.util.RectangleEdge.RIGHT.name.toString == orig(org.jfree.chart.util.RectangleEdge.RIGHT.name.toString)
this.legendItemGraphicEdge.name == orig(this.legendItemGraphicEdge.name)
this.legendItemGraphicEdge.name.toString == orig(this.legendItemGraphicEdge.name.toString)
this.legendItemGraphicAnchor == orig(this.legendItemGraphicAnchor)
org.jfree.chart.util.RectangleAnchor.CENTER == orig(org.jfree.chart.util.RectangleAnchor.CENTER)
org.jfree.chart.util.RectangleAnchor.TOP == orig(org.jfree.chart.util.RectangleAnchor.TOP)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT)
org.jfree.chart.util.RectangleAnchor.BOTTOM == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)
org.jfree.chart.util.RectangleAnchor.LEFT == orig(org.jfree.chart.util.RectangleAnchor.LEFT)
org.jfree.chart.util.RectangleAnchor.RIGHT == orig(org.jfree.chart.util.RectangleAnchor.RIGHT)
org.jfree.chart.util.RectangleAnchor.CENTER.name == orig(org.jfree.chart.util.RectangleAnchor.CENTER.name)
org.jfree.chart.util.RectangleAnchor.CENTER.name.toString == orig(org.jfree.chart.util.RectangleAnchor.CENTER.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP.name == orig(org.jfree.chart.util.RectangleAnchor.TOP.name)
org.jfree.chart.util.RectangleAnchor.TOP.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name.toString)
org.jfree.chart.util.RectangleAnchor.LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.LEFT.name)
org.jfree.chart.util.RectangleAnchor.LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.RIGHT.name)
org.jfree.chart.util.RectangleAnchor.RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.RIGHT.name.toString)
this.legendItemGraphicAnchor.name == orig(this.legendItemGraphicAnchor.name)
this.legendItemGraphicAnchor.name.toString == orig(this.legendItemGraphicAnchor.name.toString)
this.legendItemGraphicLocation == orig(this.legendItemGraphicLocation)
this.legendItemGraphicLocation.name == orig(this.legendItemGraphicLocation.name)
this.legendItemGraphicLocation.name.toString == orig(this.legendItemGraphicLocation.name.toString)
this.legendItemGraphicPadding == orig(this.legendItemGraphicPadding)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.legendItemGraphicPadding.unitType == orig(this.legendItemGraphicPadding.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.legendItemGraphicPadding.unitType.name == orig(this.legendItemGraphicPadding.unitType.name)
this.legendItemGraphicPadding.unitType.name.toString == orig(this.legendItemGraphicPadding.unitType.name.toString)
this.legendItemGraphicPadding.top == orig(this.legendItemGraphicPadding.top)
this.legendItemGraphicPadding.left == orig(this.legendItemGraphicPadding.left)
this.legendItemGraphicPadding.bottom == orig(this.legendItemGraphicPadding.bottom)
this.legendItemGraphicPadding.right == orig(this.legendItemGraphicPadding.right)
this.itemFont == orig(this.itemFont)
this.itemPaint == orig(this.itemPaint)
this.itemPaint.getClass().getName() == orig(this.itemPaint.getClass().getName())
this.itemLabelPadding == orig(this.itemLabelPadding)
this.itemLabelPadding.unitType == orig(this.itemLabelPadding.unitType)
this.itemLabelPadding.unitType.name == orig(this.itemLabelPadding.unitType.name)
this.itemLabelPadding.unitType.name.toString == orig(this.itemLabelPadding.unitType.name.toString)
this.itemLabelPadding.top == orig(this.itemLabelPadding.top)
this.itemLabelPadding.left == orig(this.itemLabelPadding.left)
this.itemLabelPadding.bottom == orig(this.itemLabelPadding.bottom)
this.itemLabelPadding.right == orig(this.itemLabelPadding.right)
this.items == orig(this.items)
this.items.blocks == orig(this.items.blocks)
this.items.blocks[] == orig(this.items.blocks[])
this.items.blocks.getClass().getName() == orig(this.items.blocks.getClass().getName())
this.items.arrangement == orig(this.items.arrangement)
this.items.arrangement.getClass().getName() == orig(this.items.arrangement.getClass().getName())
this.items.id == orig(this.items.id)
this.items.margin == orig(this.items.margin)
this.items.margin.unitType == orig(this.items.margin.unitType)
this.items.margin.top == orig(this.items.margin.top)
this.items.margin.left == orig(this.items.margin.left)
this.items.margin.bottom == orig(this.items.margin.bottom)
this.items.margin.right == orig(this.items.margin.right)
this.items.frame == orig(this.items.frame)
this.items.frame.getClass().getName() == orig(this.items.frame.getClass().getName())
this.items.padding == orig(this.items.padding)
this.items.padding.unitType == orig(this.items.padding.unitType)
this.items.padding.top == orig(this.items.padding.top)
this.items.padding.left == orig(this.items.padding.left)
this.items.padding.bottom == orig(this.items.padding.bottom)
this.items.padding.right == orig(this.items.padding.right)
this.items.width == orig(this.items.width)
this.items.height == orig(this.items.height)
this.items.bounds == orig(this.items.bounds)
this.items.bounds.getClass().getName() == orig(this.items.bounds.getClass().getName())
this.hLayout == orig(this.hLayout)
this.hLayout.getClass().getName() == orig(this.hLayout.getClass().getName())
this.vLayout == orig(this.vLayout)
this.vLayout.getClass().getName() == orig(this.vLayout.getClass().getName())
this.wrapper == orig(this.wrapper)
org.jfree.chart.title.Title.DEFAULT_POSITION == orig(org.jfree.chart.title.Title.DEFAULT_POSITION)
org.jfree.chart.title.Title.DEFAULT_POSITION.name == orig(org.jfree.chart.title.Title.DEFAULT_POSITION.name)
org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT)
org.jfree.chart.util.HorizontalAlignment.LEFT == orig(org.jfree.chart.util.HorizontalAlignment.LEFT)
org.jfree.chart.util.HorizontalAlignment.RIGHT == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT)
org.jfree.chart.util.HorizontalAlignment.CENTER == orig(org.jfree.chart.util.HorizontalAlignment.CENTER)
org.jfree.chart.util.HorizontalAlignment.LEFT.name == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name)
org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString)
org.jfree.chart.util.HorizontalAlignment.CENTER.name == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name)
org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT)
org.jfree.chart.util.VerticalAlignment.TOP == orig(org.jfree.chart.util.VerticalAlignment.TOP)
org.jfree.chart.util.VerticalAlignment.BOTTOM == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM)
org.jfree.chart.util.VerticalAlignment.CENTER == orig(org.jfree.chart.util.VerticalAlignment.CENTER)
org.jfree.chart.util.VerticalAlignment.TOP.name == orig(org.jfree.chart.util.VerticalAlignment.TOP.name)
org.jfree.chart.util.VerticalAlignment.TOP.name.toString == orig(org.jfree.chart.util.VerticalAlignment.TOP.name.toString)
org.jfree.chart.util.VerticalAlignment.BOTTOM.name == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM.name)
org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString)
org.jfree.chart.util.VerticalAlignment.CENTER.name == orig(org.jfree.chart.util.VerticalAlignment.CENTER.name)
org.jfree.chart.util.VerticalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.VerticalAlignment.CENTER.name.toString)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString)
org.jfree.chart.title.Title.DEFAULT_PADDING == orig(org.jfree.chart.title.Title.DEFAULT_PADDING)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name.toString)
org.jfree.chart.title.Title.DEFAULT_PADDING.top == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.top)
org.jfree.chart.title.Title.DEFAULT_PADDING.left == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.left)
org.jfree.chart.title.Title.DEFAULT_PADDING.bottom == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.bottom)
org.jfree.chart.title.Title.DEFAULT_PADDING.right == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.right)
this.position == orig(this.position)
this.position.name == orig(this.position.name)
this.position.name.toString == orig(this.position.name.toString)
this.horizontalAlignment == orig(this.horizontalAlignment)
this.horizontalAlignment.name == orig(this.horizontalAlignment.name)
this.horizontalAlignment.name.toString == orig(this.horizontalAlignment.name.toString)
this.verticalAlignment == orig(this.verticalAlignment)
this.verticalAlignment.name == orig(this.verticalAlignment.name)
this.verticalAlignment.name.toString == orig(this.verticalAlignment.name.toString)
this.listenerList == orig(this.listenerList)
this.notify == orig(this.notify)
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener == orig(org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener)
this.id == orig(this.id)
this.margin == orig(this.margin)
this.margin.unitType == orig(this.margin.unitType)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
this.backgroundPaint has only one value
this.items.blocks[].getClass().getName() one of { [], [org.jfree.chart.block.BlockContainer, org.jfree.chart.block.BlockContainer, org.jfree.chart.block.BlockContainer] }
this.position has only one value
this.position.name has only one value
this.position.name.toString == "RectangleEdge.BOTTOM"
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener has only one value
this.margin.top == 1.0
this.margin.left == 1.0
this.margin.bottom == 1.0
this.margin.right == 1.0
this.frame.getClass().getName() == org.jfree.chart.block.LineBorder.class
return == null
size(this.items.blocks[]) one of { 0, 3 }
===========================================================================
org.jfree.chart.title.LegendTitle.fetchLegendItems():::ENTER
this.backgroundPaint has only one value
this.items.blocks[] == []
this.items.blocks[].getClass().getName() == []
this.position has only one value
this.position.name has only one value
this.position.name.toString == "RectangleEdge.BOTTOM"
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener has only one value
this.margin.top == 1.0
this.margin.left == 1.0
this.margin.bottom == 1.0
this.margin.right == 1.0
this.frame.getClass().getName() == org.jfree.chart.block.LineBorder.class
===========================================================================
org.jfree.chart.title.LegendTitle.fetchLegendItems():::EXIT
org.jfree.chart.title.LegendTitle.DEFAULT_ITEM_FONT == orig(org.jfree.chart.title.LegendTitle.DEFAULT_ITEM_FONT)
org.jfree.chart.title.LegendTitle.DEFAULT_ITEM_PAINT == orig(org.jfree.chart.title.LegendTitle.DEFAULT_ITEM_PAINT)
org.jfree.chart.title.LegendTitle.DEFAULT_ITEM_PAINT.getClass().getName() == orig(org.jfree.chart.title.LegendTitle.DEFAULT_ITEM_PAINT.getClass().getName())
this.sources == orig(this.sources)
this.sources.getClass().getName() == orig(this.sources.getClass().getName())
this.sources[] == orig(this.sources[])
this.backgroundPaint == orig(this.backgroundPaint)
this.backgroundPaint.getClass().getName() == orig(this.backgroundPaint.getClass().getName())
this.legendItemGraphicEdge == orig(this.legendItemGraphicEdge)
org.jfree.chart.util.RectangleEdge.TOP == orig(org.jfree.chart.util.RectangleEdge.TOP)
org.jfree.chart.util.RectangleEdge.BOTTOM == orig(org.jfree.chart.util.RectangleEdge.BOTTOM)
org.jfree.chart.util.RectangleEdge.LEFT == orig(org.jfree.chart.util.RectangleEdge.LEFT)
org.jfree.chart.util.RectangleEdge.RIGHT == orig(org.jfree.chart.util.RectangleEdge.RIGHT)
org.jfree.chart.util.RectangleEdge.TOP.name == orig(org.jfree.chart.util.RectangleEdge.TOP.name)
org.jfree.chart.util.RectangleEdge.TOP.name.toString == orig(org.jfree.chart.util.RectangleEdge.TOP.name.toString)
org.jfree.chart.util.RectangleEdge.BOTTOM.name == orig(org.jfree.chart.util.RectangleEdge.BOTTOM.name)
org.jfree.chart.util.RectangleEdge.BOTTOM.name.toString == orig(org.jfree.chart.util.RectangleEdge.BOTTOM.name.toString)
org.jfree.chart.util.RectangleEdge.LEFT.name == orig(org.jfree.chart.util.RectangleEdge.LEFT.name)
org.jfree.chart.util.RectangleEdge.LEFT.name.toString == orig(org.jfree.chart.util.RectangleEdge.LEFT.name.toString)
org.jfree.chart.util.RectangleEdge.RIGHT.name == orig(org.jfree.chart.util.RectangleEdge.RIGHT.name)
org.jfree.chart.util.RectangleEdge.RIGHT.name.toString == orig(org.jfree.chart.util.RectangleEdge.RIGHT.name.toString)
this.legendItemGraphicEdge.name == orig(this.legendItemGraphicEdge.name)
this.legendItemGraphicEdge.name.toString == orig(this.legendItemGraphicEdge.name.toString)
this.legendItemGraphicAnchor == orig(this.legendItemGraphicAnchor)
org.jfree.chart.util.RectangleAnchor.CENTER == orig(org.jfree.chart.util.RectangleAnchor.CENTER)
org.jfree.chart.util.RectangleAnchor.TOP == orig(org.jfree.chart.util.RectangleAnchor.TOP)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT)
org.jfree.chart.util.RectangleAnchor.BOTTOM == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)
org.jfree.chart.util.RectangleAnchor.LEFT == orig(org.jfree.chart.util.RectangleAnchor.LEFT)
org.jfree.chart.util.RectangleAnchor.RIGHT == orig(org.jfree.chart.util.RectangleAnchor.RIGHT)
org.jfree.chart.util.RectangleAnchor.CENTER.name == orig(org.jfree.chart.util.RectangleAnchor.CENTER.name)
org.jfree.chart.util.RectangleAnchor.CENTER.name.toString == orig(org.jfree.chart.util.RectangleAnchor.CENTER.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP.name == orig(org.jfree.chart.util.RectangleAnchor.TOP.name)
org.jfree.chart.util.RectangleAnchor.TOP.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name.toString)
org.jfree.chart.util.RectangleAnchor.LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.LEFT.name)
org.jfree.chart.util.RectangleAnchor.LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.RIGHT.name)
org.jfree.chart.util.RectangleAnchor.RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.RIGHT.name.toString)
this.legendItemGraphicAnchor.name == orig(this.legendItemGraphicAnchor.name)
this.legendItemGraphicAnchor.name.toString == orig(this.legendItemGraphicAnchor.name.toString)
this.legendItemGraphicLocation == orig(this.legendItemGraphicLocation)
this.legendItemGraphicLocation.name == orig(this.legendItemGraphicLocation.name)
this.legendItemGraphicLocation.name.toString == orig(this.legendItemGraphicLocation.name.toString)
this.legendItemGraphicPadding == orig(this.legendItemGraphicPadding)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.legendItemGraphicPadding.unitType == orig(this.legendItemGraphicPadding.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.legendItemGraphicPadding.unitType.name == orig(this.legendItemGraphicPadding.unitType.name)
this.legendItemGraphicPadding.unitType.name.toString == orig(this.legendItemGraphicPadding.unitType.name.toString)
this.legendItemGraphicPadding.top == orig(this.legendItemGraphicPadding.top)
this.legendItemGraphicPadding.left == orig(this.legendItemGraphicPadding.left)
this.legendItemGraphicPadding.bottom == orig(this.legendItemGraphicPadding.bottom)
this.legendItemGraphicPadding.right == orig(this.legendItemGraphicPadding.right)
this.itemFont == orig(this.itemFont)
this.itemPaint == orig(this.itemPaint)
this.itemPaint.getClass().getName() == orig(this.itemPaint.getClass().getName())
this.itemLabelPadding == orig(this.itemLabelPadding)
this.itemLabelPadding.unitType == orig(this.itemLabelPadding.unitType)
this.itemLabelPadding.unitType.name == orig(this.itemLabelPadding.unitType.name)
this.itemLabelPadding.unitType.name.toString == orig(this.itemLabelPadding.unitType.name.toString)
this.itemLabelPadding.top == orig(this.itemLabelPadding.top)
this.itemLabelPadding.left == orig(this.itemLabelPadding.left)
this.itemLabelPadding.bottom == orig(this.itemLabelPadding.bottom)
this.itemLabelPadding.right == orig(this.itemLabelPadding.right)
this.items == orig(this.items)
this.items.blocks == orig(this.items.blocks)
this.items.blocks.getClass().getName() == orig(this.items.blocks.getClass().getName())
this.items.arrangement == orig(this.items.arrangement)
this.items.arrangement.getClass().getName() == orig(this.items.arrangement.getClass().getName())
this.items.id == orig(this.items.id)
this.items.margin == orig(this.items.margin)
this.items.margin.unitType == orig(this.items.margin.unitType)
this.items.margin.top == orig(this.items.margin.top)
this.items.margin.left == orig(this.items.margin.left)
this.items.margin.bottom == orig(this.items.margin.bottom)
this.items.margin.right == orig(this.items.margin.right)
this.items.frame == orig(this.items.frame)
this.items.frame.getClass().getName() == orig(this.items.frame.getClass().getName())
this.items.padding == orig(this.items.padding)
this.items.padding.unitType == orig(this.items.padding.unitType)
this.items.padding.top == orig(this.items.padding.top)
this.items.padding.left == orig(this.items.padding.left)
this.items.padding.bottom == orig(this.items.padding.bottom)
this.items.padding.right == orig(this.items.padding.right)
this.items.width == orig(this.items.width)
this.items.height == orig(this.items.height)
this.items.bounds == orig(this.items.bounds)
this.items.bounds.getClass().getName() == orig(this.items.bounds.getClass().getName())
this.hLayout == orig(this.hLayout)
this.hLayout.getClass().getName() == orig(this.hLayout.getClass().getName())
this.vLayout == orig(this.vLayout)
this.vLayout.getClass().getName() == orig(this.vLayout.getClass().getName())
this.wrapper == orig(this.wrapper)
org.jfree.chart.title.Title.DEFAULT_POSITION == orig(org.jfree.chart.title.Title.DEFAULT_POSITION)
org.jfree.chart.title.Title.DEFAULT_POSITION.name == orig(org.jfree.chart.title.Title.DEFAULT_POSITION.name)
org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT)
org.jfree.chart.util.HorizontalAlignment.LEFT == orig(org.jfree.chart.util.HorizontalAlignment.LEFT)
org.jfree.chart.util.HorizontalAlignment.RIGHT == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT)
org.jfree.chart.util.HorizontalAlignment.CENTER == orig(org.jfree.chart.util.HorizontalAlignment.CENTER)
org.jfree.chart.util.HorizontalAlignment.LEFT.name == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name)
org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString)
org.jfree.chart.util.HorizontalAlignment.CENTER.name == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name)
org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT)
org.jfree.chart.util.VerticalAlignment.TOP == orig(org.jfree.chart.util.VerticalAlignment.TOP)
org.jfree.chart.util.VerticalAlignment.BOTTOM == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM)
org.jfree.chart.util.VerticalAlignment.CENTER == orig(org.jfree.chart.util.VerticalAlignment.CENTER)
org.jfree.chart.util.VerticalAlignment.TOP.name == orig(org.jfree.chart.util.VerticalAlignment.TOP.name)
org.jfree.chart.util.VerticalAlignment.TOP.name.toString == orig(org.jfree.chart.util.VerticalAlignment.TOP.name.toString)
org.jfree.chart.util.VerticalAlignment.BOTTOM.name == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM.name)
org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString)
org.jfree.chart.util.VerticalAlignment.CENTER.name == orig(org.jfree.chart.util.VerticalAlignment.CENTER.name)
org.jfree.chart.util.VerticalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.VerticalAlignment.CENTER.name.toString)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString)
org.jfree.chart.title.Title.DEFAULT_PADDING == orig(org.jfree.chart.title.Title.DEFAULT_PADDING)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name.toString)
org.jfree.chart.title.Title.DEFAULT_PADDING.top == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.top)
org.jfree.chart.title.Title.DEFAULT_PADDING.left == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.left)
org.jfree.chart.title.Title.DEFAULT_PADDING.bottom == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.bottom)
org.jfree.chart.title.Title.DEFAULT_PADDING.right == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.right)
this.position == orig(this.position)
this.position.name == orig(this.position.name)
this.position.name.toString == orig(this.position.name.toString)
this.horizontalAlignment == orig(this.horizontalAlignment)
this.horizontalAlignment.name == orig(this.horizontalAlignment.name)
this.horizontalAlignment.name.toString == orig(this.horizontalAlignment.name.toString)
this.verticalAlignment == orig(this.verticalAlignment)
this.verticalAlignment.name == orig(this.verticalAlignment.name)
this.verticalAlignment.name.toString == orig(this.verticalAlignment.name.toString)
this.listenerList == orig(this.listenerList)
this.notify == orig(this.notify)
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener == orig(org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener)
this.id == orig(this.id)
this.margin == orig(this.margin)
this.margin.unitType == orig(this.margin.unitType)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
this.backgroundPaint has only one value
this.items.blocks[].getClass().getName() one of { [], [org.jfree.chart.block.BlockContainer, org.jfree.chart.block.BlockContainer, org.jfree.chart.block.BlockContainer] }
this.position has only one value
this.position.name has only one value
this.position.name.toString == "RectangleEdge.BOTTOM"
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener has only one value
this.margin.top == 1.0
this.margin.left == 1.0
this.margin.bottom == 1.0
this.margin.right == 1.0
this.frame.getClass().getName() == org.jfree.chart.block.LineBorder.class
size(this.items.blocks[]) one of { 0, 3 }
===========================================================================
org.jfree.chart.title.LegendTitle.getLegendItemGraphicAnchor():::ENTER
this has only one value
this.sources has only one value
this.sources[] contains no nulls and has only one value, of length 1
this.sources[] elements has only one value
this.sources[].getClass().getName() == [org.jfree.chart.plot.PiePlot3D]
this.sources[].getClass().getName() elements == org.jfree.chart.plot.PiePlot3D.class
this.backgroundPaint has only one value
this.legendItemGraphicPadding has only one value
this.itemLabelPadding has only one value
this.items has only one value
this.items.blocks has only one value
this.items.arrangement has only one value
this.items.bounds has only one value
this.hLayout has only one value
this.vLayout has only one value
this.position has only one value
this.position.name has only one value
this.position.name.toString == "RectangleEdge.BOTTOM"
this.listenerList has only one value
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener has only one value
this.margin has only one value
this.margin.top == 1.0
this.margin.left == 1.0
this.margin.bottom == 1.0
this.margin.right == 1.0
this.frame has only one value
this.frame.getClass().getName() == org.jfree.chart.block.LineBorder.class
this.bounds has only one value
size(this.items.blocks[]) one of { 0, 1, 2 }
===========================================================================
org.jfree.chart.title.LegendTitle.getLegendItemGraphicAnchor():::EXIT
org.jfree.chart.title.LegendTitle.DEFAULT_ITEM_FONT == orig(org.jfree.chart.title.LegendTitle.DEFAULT_ITEM_FONT)
org.jfree.chart.title.LegendTitle.DEFAULT_ITEM_PAINT == orig(org.jfree.chart.title.LegendTitle.DEFAULT_ITEM_PAINT)
org.jfree.chart.title.LegendTitle.DEFAULT_ITEM_PAINT.getClass().getName() == orig(org.jfree.chart.title.LegendTitle.DEFAULT_ITEM_PAINT.getClass().getName())
this.sources == orig(this.sources)
this.sources.getClass().getName() == orig(this.sources.getClass().getName())
this.sources[] == orig(this.sources[])
this.backgroundPaint == orig(this.backgroundPaint)
this.backgroundPaint.getClass().getName() == orig(this.backgroundPaint.getClass().getName())
this.legendItemGraphicEdge == orig(this.legendItemGraphicEdge)
org.jfree.chart.util.RectangleEdge.TOP == orig(org.jfree.chart.util.RectangleEdge.TOP)
org.jfree.chart.util.RectangleEdge.BOTTOM == orig(org.jfree.chart.util.RectangleEdge.BOTTOM)
org.jfree.chart.util.RectangleEdge.LEFT == orig(org.jfree.chart.util.RectangleEdge.LEFT)
org.jfree.chart.util.RectangleEdge.RIGHT == orig(org.jfree.chart.util.RectangleEdge.RIGHT)
org.jfree.chart.util.RectangleEdge.TOP.name == orig(org.jfree.chart.util.RectangleEdge.TOP.name)
org.jfree.chart.util.RectangleEdge.TOP.name.toString == orig(org.jfree.chart.util.RectangleEdge.TOP.name.toString)
org.jfree.chart.util.RectangleEdge.BOTTOM.name == orig(org.jfree.chart.util.RectangleEdge.BOTTOM.name)
org.jfree.chart.util.RectangleEdge.BOTTOM.name.toString == orig(org.jfree.chart.util.RectangleEdge.BOTTOM.name.toString)
org.jfree.chart.util.RectangleEdge.LEFT.name == orig(org.jfree.chart.util.RectangleEdge.LEFT.name)
org.jfree.chart.util.RectangleEdge.LEFT.name.toString == orig(org.jfree.chart.util.RectangleEdge.LEFT.name.toString)
org.jfree.chart.util.RectangleEdge.RIGHT.name == orig(org.jfree.chart.util.RectangleEdge.RIGHT.name)
org.jfree.chart.util.RectangleEdge.RIGHT.name.toString == orig(org.jfree.chart.util.RectangleEdge.RIGHT.name.toString)
this.legendItemGraphicEdge.name == orig(this.legendItemGraphicEdge.name)
this.legendItemGraphicEdge.name.toString == orig(this.legendItemGraphicEdge.name.toString)
this.legendItemGraphicAnchor == orig(this.legendItemGraphicAnchor)
org.jfree.chart.util.RectangleAnchor.CENTER == orig(org.jfree.chart.util.RectangleAnchor.CENTER)
org.jfree.chart.util.RectangleAnchor.TOP == orig(org.jfree.chart.util.RectangleAnchor.TOP)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT)
org.jfree.chart.util.RectangleAnchor.BOTTOM == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)
org.jfree.chart.util.RectangleAnchor.LEFT == orig(org.jfree.chart.util.RectangleAnchor.LEFT)
org.jfree.chart.util.RectangleAnchor.RIGHT == orig(org.jfree.chart.util.RectangleAnchor.RIGHT)
org.jfree.chart.util.RectangleAnchor.CENTER.name == orig(org.jfree.chart.util.RectangleAnchor.CENTER.name)
org.jfree.chart.util.RectangleAnchor.CENTER.name.toString == orig(org.jfree.chart.util.RectangleAnchor.CENTER.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP.name == orig(org.jfree.chart.util.RectangleAnchor.TOP.name)
org.jfree.chart.util.RectangleAnchor.TOP.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name.toString)
org.jfree.chart.util.RectangleAnchor.LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.LEFT.name)
org.jfree.chart.util.RectangleAnchor.LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.RIGHT.name)
org.jfree.chart.util.RectangleAnchor.RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.RIGHT.name.toString)
this.legendItemGraphicAnchor.name == orig(this.legendItemGraphicAnchor.name)
this.legendItemGraphicAnchor.name.toString == orig(this.legendItemGraphicAnchor.name.toString)
this.legendItemGraphicLocation == orig(this.legendItemGraphicLocation)
this.legendItemGraphicLocation.name == orig(this.legendItemGraphicLocation.name)
this.legendItemGraphicLocation.name.toString == orig(this.legendItemGraphicLocation.name.toString)
this.legendItemGraphicPadding == orig(this.legendItemGraphicPadding)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.legendItemGraphicPadding.unitType == orig(this.legendItemGraphicPadding.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.legendItemGraphicPadding.unitType.name == orig(this.legendItemGraphicPadding.unitType.name)
this.legendItemGraphicPadding.unitType.name.toString == orig(this.legendItemGraphicPadding.unitType.name.toString)
this.legendItemGraphicPadding.top == orig(this.legendItemGraphicPadding.top)
this.legendItemGraphicPadding.left == orig(this.legendItemGraphicPadding.left)
this.legendItemGraphicPadding.bottom == orig(this.legendItemGraphicPadding.bottom)
this.legendItemGraphicPadding.right == orig(this.legendItemGraphicPadding.right)
this.itemFont == orig(this.itemFont)
this.itemPaint == orig(this.itemPaint)
this.itemPaint.getClass().getName() == orig(this.itemPaint.getClass().getName())
this.itemLabelPadding == orig(this.itemLabelPadding)
this.itemLabelPadding.unitType == orig(this.itemLabelPadding.unitType)
this.itemLabelPadding.unitType.name == orig(this.itemLabelPadding.unitType.name)
this.itemLabelPadding.unitType.name.toString == orig(this.itemLabelPadding.unitType.name.toString)
this.itemLabelPadding.top == orig(this.itemLabelPadding.top)
this.itemLabelPadding.left == orig(this.itemLabelPadding.left)
this.itemLabelPadding.bottom == orig(this.itemLabelPadding.bottom)
this.itemLabelPadding.right == orig(this.itemLabelPadding.right)
this.items == orig(this.items)
this.items.blocks == orig(this.items.blocks)
this.items.blocks[] == orig(this.items.blocks[])
this.items.blocks.getClass().getName() == orig(this.items.blocks.getClass().getName())
this.items.arrangement == orig(this.items.arrangement)
this.items.arrangement.getClass().getName() == orig(this.items.arrangement.getClass().getName())
this.items.id == orig(this.items.id)
this.items.margin == orig(this.items.margin)
this.items.margin.unitType == orig(this.items.margin.unitType)
this.items.margin.top == orig(this.items.margin.top)
this.items.margin.left == orig(this.items.margin.left)
this.items.margin.bottom == orig(this.items.margin.bottom)
this.items.margin.right == orig(this.items.margin.right)
this.items.frame == orig(this.items.frame)
this.items.frame.getClass().getName() == orig(this.items.frame.getClass().getName())
this.items.padding == orig(this.items.padding)
this.items.padding.unitType == orig(this.items.padding.unitType)
this.items.padding.top == orig(this.items.padding.top)
this.items.padding.left == orig(this.items.padding.left)
this.items.padding.bottom == orig(this.items.padding.bottom)
this.items.padding.right == orig(this.items.padding.right)
this.items.width == orig(this.items.width)
this.items.height == orig(this.items.height)
this.items.bounds == orig(this.items.bounds)
this.items.bounds.getClass().getName() == orig(this.items.bounds.getClass().getName())
this.hLayout == orig(this.hLayout)
this.hLayout.getClass().getName() == orig(this.hLayout.getClass().getName())
this.vLayout == orig(this.vLayout)
this.vLayout.getClass().getName() == orig(this.vLayout.getClass().getName())
this.wrapper == orig(this.wrapper)
org.jfree.chart.title.Title.DEFAULT_POSITION == orig(org.jfree.chart.title.Title.DEFAULT_POSITION)
org.jfree.chart.title.Title.DEFAULT_POSITION.name == orig(org.jfree.chart.title.Title.DEFAULT_POSITION.name)
org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT)
org.jfree.chart.util.HorizontalAlignment.LEFT == orig(org.jfree.chart.util.HorizontalAlignment.LEFT)
org.jfree.chart.util.HorizontalAlignment.RIGHT == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT)
org.jfree.chart.util.HorizontalAlignment.CENTER == orig(org.jfree.chart.util.HorizontalAlignment.CENTER)
org.jfree.chart.util.HorizontalAlignment.LEFT.name == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name)
org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString)
org.jfree.chart.util.HorizontalAlignment.CENTER.name == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name)
org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT)
org.jfree.chart.util.VerticalAlignment.TOP == orig(org.jfree.chart.util.VerticalAlignment.TOP)
org.jfree.chart.util.VerticalAlignment.BOTTOM == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM)
org.jfree.chart.util.VerticalAlignment.CENTER == orig(org.jfree.chart.util.VerticalAlignment.CENTER)
org.jfree.chart.util.VerticalAlignment.TOP.name == orig(org.jfree.chart.util.VerticalAlignment.TOP.name)
org.jfree.chart.util.VerticalAlignment.TOP.name.toString == orig(org.jfree.chart.util.VerticalAlignment.TOP.name.toString)
org.jfree.chart.util.VerticalAlignment.BOTTOM.name == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM.name)
org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString)
org.jfree.chart.util.VerticalAlignment.CENTER.name == orig(org.jfree.chart.util.VerticalAlignment.CENTER.name)
org.jfree.chart.util.VerticalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.VerticalAlignment.CENTER.name.toString)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString)
org.jfree.chart.title.Title.DEFAULT_PADDING == orig(org.jfree.chart.title.Title.DEFAULT_PADDING)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name.toString)
org.jfree.chart.title.Title.DEFAULT_PADDING.top == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.top)
org.jfree.chart.title.Title.DEFAULT_PADDING.left == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.left)
org.jfree.chart.title.Title.DEFAULT_PADDING.bottom == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.bottom)
org.jfree.chart.title.Title.DEFAULT_PADDING.right == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.right)
this.position == orig(this.position)
this.position.name == orig(this.position.name)
this.position.name.toString == orig(this.position.name.toString)
this.horizontalAlignment == orig(this.horizontalAlignment)
this.horizontalAlignment.name == orig(this.horizontalAlignment.name)
this.horizontalAlignment.name.toString == orig(this.horizontalAlignment.name.toString)
this.verticalAlignment == orig(this.verticalAlignment)
this.verticalAlignment.name == orig(this.verticalAlignment.name)
this.verticalAlignment.name.toString == orig(this.verticalAlignment.name.toString)
this.listenerList == orig(this.listenerList)
this.notify == orig(this.notify)
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener == orig(org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener)
this.id == orig(this.id)
this.margin == orig(this.margin)
this.margin.unitType == orig(this.margin.unitType)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
this.sources has only one value
this.sources[] contains no nulls and has only one value, of length 1
this.sources[] elements has only one value
this.sources[].getClass().getName() == [org.jfree.chart.plot.PiePlot3D]
this.sources[].getClass().getName() elements == org.jfree.chart.plot.PiePlot3D.class
this.backgroundPaint has only one value
this.legendItemGraphicPadding has only one value
this.itemLabelPadding has only one value
this.items has only one value
this.items.blocks has only one value
this.items.arrangement has only one value
this.items.bounds has only one value
this.hLayout has only one value
this.vLayout has only one value
this.position has only one value
this.position.name has only one value
this.position.name.toString == "RectangleEdge.BOTTOM"
this.listenerList has only one value
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener has only one value
this.margin has only one value
this.margin.top == 1.0
this.margin.left == 1.0
this.margin.bottom == 1.0
this.margin.right == 1.0
this.frame has only one value
this.frame.getClass().getName() == org.jfree.chart.block.LineBorder.class
this.bounds has only one value
return has only one value
return.name has only one value
return.name.toString == "RectangleAnchor.CENTER"
size(this.items.blocks[]) one of { 0, 1, 2 }
===========================================================================
org.jfree.chart.title.LegendTitle.getLegendItemGraphicLocation():::ENTER
this has only one value
this.sources has only one value
this.sources[] contains no nulls and has only one value, of length 1
this.sources[] elements has only one value
this.sources[].getClass().getName() == [org.jfree.chart.plot.PiePlot3D]
this.sources[].getClass().getName() elements == org.jfree.chart.plot.PiePlot3D.class
this.backgroundPaint has only one value
this.legendItemGraphicPadding has only one value
this.itemLabelPadding has only one value
this.items has only one value
this.items.blocks has only one value
this.items.arrangement has only one value
this.items.bounds has only one value
this.hLayout has only one value
this.vLayout has only one value
this.position has only one value
this.position.name has only one value
this.position.name.toString == "RectangleEdge.BOTTOM"
this.listenerList has only one value
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener has only one value
this.margin has only one value
this.margin.top == 1.0
this.margin.left == 1.0
this.margin.bottom == 1.0
this.margin.right == 1.0
this.frame has only one value
this.frame.getClass().getName() == org.jfree.chart.block.LineBorder.class
this.bounds has only one value
size(this.items.blocks[]) one of { 0, 1, 2 }
===========================================================================
org.jfree.chart.title.LegendTitle.getLegendItemGraphicLocation():::EXIT
org.jfree.chart.title.LegendTitle.DEFAULT_ITEM_FONT == orig(org.jfree.chart.title.LegendTitle.DEFAULT_ITEM_FONT)
org.jfree.chart.title.LegendTitle.DEFAULT_ITEM_PAINT == orig(org.jfree.chart.title.LegendTitle.DEFAULT_ITEM_PAINT)
org.jfree.chart.title.LegendTitle.DEFAULT_ITEM_PAINT.getClass().getName() == orig(org.jfree.chart.title.LegendTitle.DEFAULT_ITEM_PAINT.getClass().getName())
this.sources == orig(this.sources)
this.sources.getClass().getName() == orig(this.sources.getClass().getName())
this.sources[] == orig(this.sources[])
this.backgroundPaint == orig(this.backgroundPaint)
this.backgroundPaint.getClass().getName() == orig(this.backgroundPaint.getClass().getName())
this.legendItemGraphicEdge == orig(this.legendItemGraphicEdge)
org.jfree.chart.util.RectangleEdge.TOP == orig(org.jfree.chart.util.RectangleEdge.TOP)
org.jfree.chart.util.RectangleEdge.BOTTOM == orig(org.jfree.chart.util.RectangleEdge.BOTTOM)
org.jfree.chart.util.RectangleEdge.LEFT == orig(org.jfree.chart.util.RectangleEdge.LEFT)
org.jfree.chart.util.RectangleEdge.RIGHT == orig(org.jfree.chart.util.RectangleEdge.RIGHT)
org.jfree.chart.util.RectangleEdge.TOP.name == orig(org.jfree.chart.util.RectangleEdge.TOP.name)
org.jfree.chart.util.RectangleEdge.TOP.name.toString == orig(org.jfree.chart.util.RectangleEdge.TOP.name.toString)
org.jfree.chart.util.RectangleEdge.BOTTOM.name == orig(org.jfree.chart.util.RectangleEdge.BOTTOM.name)
org.jfree.chart.util.RectangleEdge.BOTTOM.name.toString == orig(org.jfree.chart.util.RectangleEdge.BOTTOM.name.toString)
org.jfree.chart.util.RectangleEdge.LEFT.name == orig(org.jfree.chart.util.RectangleEdge.LEFT.name)
org.jfree.chart.util.RectangleEdge.LEFT.name.toString == orig(org.jfree.chart.util.RectangleEdge.LEFT.name.toString)
org.jfree.chart.util.RectangleEdge.RIGHT.name == orig(org.jfree.chart.util.RectangleEdge.RIGHT.name)
org.jfree.chart.util.RectangleEdge.RIGHT.name.toString == orig(org.jfree.chart.util.RectangleEdge.RIGHT.name.toString)
this.legendItemGraphicEdge.name == orig(this.legendItemGraphicEdge.name)
this.legendItemGraphicEdge.name.toString == orig(this.legendItemGraphicEdge.name.toString)
this.legendItemGraphicAnchor == orig(this.legendItemGraphicAnchor)
org.jfree.chart.util.RectangleAnchor.CENTER == orig(org.jfree.chart.util.RectangleAnchor.CENTER)
org.jfree.chart.util.RectangleAnchor.TOP == orig(org.jfree.chart.util.RectangleAnchor.TOP)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT)
org.jfree.chart.util.RectangleAnchor.BOTTOM == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)
org.jfree.chart.util.RectangleAnchor.LEFT == orig(org.jfree.chart.util.RectangleAnchor.LEFT)
org.jfree.chart.util.RectangleAnchor.RIGHT == orig(org.jfree.chart.util.RectangleAnchor.RIGHT)
org.jfree.chart.util.RectangleAnchor.CENTER.name == orig(org.jfree.chart.util.RectangleAnchor.CENTER.name)
org.jfree.chart.util.RectangleAnchor.CENTER.name.toString == orig(org.jfree.chart.util.RectangleAnchor.CENTER.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP.name == orig(org.jfree.chart.util.RectangleAnchor.TOP.name)
org.jfree.chart.util.RectangleAnchor.TOP.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name.toString)
org.jfree.chart.util.RectangleAnchor.LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.LEFT.name)
org.jfree.chart.util.RectangleAnchor.LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.RIGHT.name)
org.jfree.chart.util.RectangleAnchor.RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.RIGHT.name.toString)
this.legendItemGraphicAnchor.name == orig(this.legendItemGraphicAnchor.name)
this.legendItemGraphicAnchor.name.toString == orig(this.legendItemGraphicAnchor.name.toString)
this.legendItemGraphicLocation == orig(this.legendItemGraphicLocation)
this.legendItemGraphicLocation.name == orig(this.legendItemGraphicLocation.name)
this.legendItemGraphicLocation.name.toString == orig(this.legendItemGraphicLocation.name.toString)
this.legendItemGraphicPadding == orig(this.legendItemGraphicPadding)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.legendItemGraphicPadding.unitType == orig(this.legendItemGraphicPadding.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.legendItemGraphicPadding.unitType.name == orig(this.legendItemGraphicPadding.unitType.name)
this.legendItemGraphicPadding.unitType.name.toString == orig(this.legendItemGraphicPadding.unitType.name.toString)
this.legendItemGraphicPadding.top == orig(this.legendItemGraphicPadding.top)
this.legendItemGraphicPadding.left == orig(this.legendItemGraphicPadding.left)
this.legendItemGraphicPadding.bottom == orig(this.legendItemGraphicPadding.bottom)
this.legendItemGraphicPadding.right == orig(this.legendItemGraphicPadding.right)
this.itemFont == orig(this.itemFont)
this.itemPaint == orig(this.itemPaint)
this.itemPaint.getClass().getName() == orig(this.itemPaint.getClass().getName())
this.itemLabelPadding == orig(this.itemLabelPadding)
this.itemLabelPadding.unitType == orig(this.itemLabelPadding.unitType)
this.itemLabelPadding.unitType.name == orig(this.itemLabelPadding.unitType.name)
this.itemLabelPadding.unitType.name.toString == orig(this.itemLabelPadding.unitType.name.toString)
this.itemLabelPadding.top == orig(this.itemLabelPadding.top)
this.itemLabelPadding.left == orig(this.itemLabelPadding.left)
this.itemLabelPadding.bottom == orig(this.itemLabelPadding.bottom)
this.itemLabelPadding.right == orig(this.itemLabelPadding.right)
this.items == orig(this.items)
this.items.blocks == orig(this.items.blocks)
this.items.blocks[] == orig(this.items.blocks[])
this.items.blocks.getClass().getName() == orig(this.items.blocks.getClass().getName())
this.items.arrangement == orig(this.items.arrangement)
this.items.arrangement.getClass().getName() == orig(this.items.arrangement.getClass().getName())
this.items.id == orig(this.items.id)
this.items.margin == orig(this.items.margin)
this.items.margin.unitType == orig(this.items.margin.unitType)
this.items.margin.top == orig(this.items.margin.top)
this.items.margin.left == orig(this.items.margin.left)
this.items.margin.bottom == orig(this.items.margin.bottom)
this.items.margin.right == orig(this.items.margin.right)
this.items.frame == orig(this.items.frame)
this.items.frame.getClass().getName() == orig(this.items.frame.getClass().getName())
this.items.padding == orig(this.items.padding)
this.items.padding.unitType == orig(this.items.padding.unitType)
this.items.padding.top == orig(this.items.padding.top)
this.items.padding.left == orig(this.items.padding.left)
this.items.padding.bottom == orig(this.items.padding.bottom)
this.items.padding.right == orig(this.items.padding.right)
this.items.width == orig(this.items.width)
this.items.height == orig(this.items.height)
this.items.bounds == orig(this.items.bounds)
this.items.bounds.getClass().getName() == orig(this.items.bounds.getClass().getName())
this.hLayout == orig(this.hLayout)
this.hLayout.getClass().getName() == orig(this.hLayout.getClass().getName())
this.vLayout == orig(this.vLayout)
this.vLayout.getClass().getName() == orig(this.vLayout.getClass().getName())
this.wrapper == orig(this.wrapper)
org.jfree.chart.title.Title.DEFAULT_POSITION == orig(org.jfree.chart.title.Title.DEFAULT_POSITION)
org.jfree.chart.title.Title.DEFAULT_POSITION.name == orig(org.jfree.chart.title.Title.DEFAULT_POSITION.name)
org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT)
org.jfree.chart.util.HorizontalAlignment.LEFT == orig(org.jfree.chart.util.HorizontalAlignment.LEFT)
org.jfree.chart.util.HorizontalAlignment.RIGHT == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT)
org.jfree.chart.util.HorizontalAlignment.CENTER == orig(org.jfree.chart.util.HorizontalAlignment.CENTER)
org.jfree.chart.util.HorizontalAlignment.LEFT.name == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name)
org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString)
org.jfree.chart.util.HorizontalAlignment.CENTER.name == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name)
org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT)
org.jfree.chart.util.VerticalAlignment.TOP == orig(org.jfree.chart.util.VerticalAlignment.TOP)
org.jfree.chart.util.VerticalAlignment.BOTTOM == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM)
org.jfree.chart.util.VerticalAlignment.CENTER == orig(org.jfree.chart.util.VerticalAlignment.CENTER)
org.jfree.chart.util.VerticalAlignment.TOP.name == orig(org.jfree.chart.util.VerticalAlignment.TOP.name)
org.jfree.chart.util.VerticalAlignment.TOP.name.toString == orig(org.jfree.chart.util.VerticalAlignment.TOP.name.toString)
org.jfree.chart.util.VerticalAlignment.BOTTOM.name == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM.name)
org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString)
org.jfree.chart.util.VerticalAlignment.CENTER.name == orig(org.jfree.chart.util.VerticalAlignment.CENTER.name)
org.jfree.chart.util.VerticalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.VerticalAlignment.CENTER.name.toString)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString)
org.jfree.chart.title.Title.DEFAULT_PADDING == orig(org.jfree.chart.title.Title.DEFAULT_PADDING)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name.toString)
org.jfree.chart.title.Title.DEFAULT_PADDING.top == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.top)
org.jfree.chart.title.Title.DEFAULT_PADDING.left == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.left)
org.jfree.chart.title.Title.DEFAULT_PADDING.bottom == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.bottom)
org.jfree.chart.title.Title.DEFAULT_PADDING.right == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.right)
this.position == orig(this.position)
this.position.name == orig(this.position.name)
this.position.name.toString == orig(this.position.name.toString)
this.horizontalAlignment == orig(this.horizontalAlignment)
this.horizontalAlignment.name == orig(this.horizontalAlignment.name)
this.horizontalAlignment.name.toString == orig(this.horizontalAlignment.name.toString)
this.verticalAlignment == orig(this.verticalAlignment)
this.verticalAlignment.name == orig(this.verticalAlignment.name)
this.verticalAlignment.name.toString == orig(this.verticalAlignment.name.toString)
this.listenerList == orig(this.listenerList)
this.notify == orig(this.notify)
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener == orig(org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener)
this.id == orig(this.id)
this.margin == orig(this.margin)
this.margin.unitType == orig(this.margin.unitType)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
this.sources has only one value
this.sources[] contains no nulls and has only one value, of length 1
this.sources[] elements has only one value
this.sources[].getClass().getName() == [org.jfree.chart.plot.PiePlot3D]
this.sources[].getClass().getName() elements == org.jfree.chart.plot.PiePlot3D.class
this.backgroundPaint has only one value
this.legendItemGraphicPadding has only one value
this.itemLabelPadding has only one value
this.items has only one value
this.items.blocks has only one value
this.items.arrangement has only one value
this.items.bounds has only one value
this.hLayout has only one value
this.vLayout has only one value
this.position has only one value
this.position.name has only one value
this.position.name.toString == "RectangleEdge.BOTTOM"
this.listenerList has only one value
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener has only one value
this.margin has only one value
this.margin.top == 1.0
this.margin.left == 1.0
this.margin.bottom == 1.0
this.margin.right == 1.0
this.frame has only one value
this.frame.getClass().getName() == org.jfree.chart.block.LineBorder.class
this.bounds has only one value
return has only one value
return.name has only one value
return.name.toString == "RectangleAnchor.CENTER"
size(this.items.blocks[]) one of { 0, 1, 2 }
===========================================================================
org.jfree.chart.title.LegendTitle.setBackgroundPaint(java.awt.Paint):::ENTER
this.backgroundPaint == null
this.items.blocks[] == []
this.items.blocks[].getClass().getName() == []
this.position has only one value
this.position.name has only one value
this.position.name.toString == "RectangleEdge.TOP"
this.margin.top == 1.0
this.margin.left == 1.0
this.margin.bottom == 1.0
this.margin.right == 1.0
this.frame.getClass().getName() == org.jfree.chart.block.LineBorder.class
paint has only one value
paint.getClass().getName() == java.awt.Color.class
===========================================================================
org.jfree.chart.title.LegendTitle.setBackgroundPaint(java.awt.Paint):::EXIT
org.jfree.chart.title.LegendTitle.DEFAULT_ITEM_FONT == orig(org.jfree.chart.title.LegendTitle.DEFAULT_ITEM_FONT)
org.jfree.chart.title.LegendTitle.DEFAULT_ITEM_PAINT == orig(org.jfree.chart.title.LegendTitle.DEFAULT_ITEM_PAINT)
org.jfree.chart.title.LegendTitle.DEFAULT_ITEM_PAINT.getClass().getName() == orig(org.jfree.chart.title.LegendTitle.DEFAULT_ITEM_PAINT.getClass().getName())
this.sources == orig(this.sources)
this.sources.getClass().getName() == orig(this.sources.getClass().getName())
this.sources[] == orig(this.sources[])
this.legendItemGraphicEdge == orig(this.legendItemGraphicEdge)
org.jfree.chart.util.RectangleEdge.TOP == orig(org.jfree.chart.util.RectangleEdge.TOP)
org.jfree.chart.util.RectangleEdge.BOTTOM == orig(org.jfree.chart.util.RectangleEdge.BOTTOM)
org.jfree.chart.util.RectangleEdge.LEFT == orig(org.jfree.chart.util.RectangleEdge.LEFT)
org.jfree.chart.util.RectangleEdge.RIGHT == orig(org.jfree.chart.util.RectangleEdge.RIGHT)
org.jfree.chart.util.RectangleEdge.TOP.name == orig(org.jfree.chart.util.RectangleEdge.TOP.name)
org.jfree.chart.util.RectangleEdge.TOP.name.toString == orig(org.jfree.chart.util.RectangleEdge.TOP.name.toString)
org.jfree.chart.util.RectangleEdge.BOTTOM.name == orig(org.jfree.chart.util.RectangleEdge.BOTTOM.name)
org.jfree.chart.util.RectangleEdge.BOTTOM.name.toString == orig(org.jfree.chart.util.RectangleEdge.BOTTOM.name.toString)
org.jfree.chart.util.RectangleEdge.LEFT.name == orig(org.jfree.chart.util.RectangleEdge.LEFT.name)
org.jfree.chart.util.RectangleEdge.LEFT.name.toString == orig(org.jfree.chart.util.RectangleEdge.LEFT.name.toString)
org.jfree.chart.util.RectangleEdge.RIGHT.name == orig(org.jfree.chart.util.RectangleEdge.RIGHT.name)
org.jfree.chart.util.RectangleEdge.RIGHT.name.toString == orig(org.jfree.chart.util.RectangleEdge.RIGHT.name.toString)
this.legendItemGraphicEdge.name == orig(this.legendItemGraphicEdge.name)
this.legendItemGraphicEdge.name.toString == orig(this.legendItemGraphicEdge.name.toString)
this.legendItemGraphicAnchor == orig(this.legendItemGraphicAnchor)
org.jfree.chart.util.RectangleAnchor.CENTER == orig(org.jfree.chart.util.RectangleAnchor.CENTER)
org.jfree.chart.util.RectangleAnchor.TOP == orig(org.jfree.chart.util.RectangleAnchor.TOP)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT)
org.jfree.chart.util.RectangleAnchor.BOTTOM == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)
org.jfree.chart.util.RectangleAnchor.LEFT == orig(org.jfree.chart.util.RectangleAnchor.LEFT)
org.jfree.chart.util.RectangleAnchor.RIGHT == orig(org.jfree.chart.util.RectangleAnchor.RIGHT)
org.jfree.chart.util.RectangleAnchor.CENTER.name == orig(org.jfree.chart.util.RectangleAnchor.CENTER.name)
org.jfree.chart.util.RectangleAnchor.CENTER.name.toString == orig(org.jfree.chart.util.RectangleAnchor.CENTER.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP.name == orig(org.jfree.chart.util.RectangleAnchor.TOP.name)
org.jfree.chart.util.RectangleAnchor.TOP.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name.toString)
org.jfree.chart.util.RectangleAnchor.LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.LEFT.name)
org.jfree.chart.util.RectangleAnchor.LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.RIGHT.name)
org.jfree.chart.util.RectangleAnchor.RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.RIGHT.name.toString)
this.legendItemGraphicAnchor.name == orig(this.legendItemGraphicAnchor.name)
this.legendItemGraphicAnchor.name.toString == orig(this.legendItemGraphicAnchor.name.toString)
this.legendItemGraphicLocation == orig(this.legendItemGraphicLocation)
this.legendItemGraphicLocation.name == orig(this.legendItemGraphicLocation.name)
this.legendItemGraphicLocation.name.toString == orig(this.legendItemGraphicLocation.name.toString)
this.legendItemGraphicPadding == orig(this.legendItemGraphicPadding)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
this.legendItemGraphicPadding.unitType == orig(this.legendItemGraphicPadding.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
this.legendItemGraphicPadding.unitType.name == orig(this.legendItemGraphicPadding.unitType.name)
this.legendItemGraphicPadding.unitType.name.toString == orig(this.legendItemGraphicPadding.unitType.name.toString)
this.legendItemGraphicPadding.top == orig(this.legendItemGraphicPadding.top)
this.legendItemGraphicPadding.left == orig(this.legendItemGraphicPadding.left)
this.legendItemGraphicPadding.bottom == orig(this.legendItemGraphicPadding.bottom)
this.legendItemGraphicPadding.right == orig(this.legendItemGraphicPadding.right)
this.itemFont == orig(this.itemFont)
this.itemPaint == orig(this.itemPaint)
this.itemPaint.getClass().getName() == orig(this.itemPaint.getClass().getName())
this.itemLabelPadding == orig(this.itemLabelPadding)
this.itemLabelPadding.unitType == orig(this.itemLabelPadding.unitType)
this.itemLabelPadding.unitType.name == orig(this.itemLabelPadding.unitType.name)
this.itemLabelPadding.unitType.name.toString == orig(this.itemLabelPadding.unitType.name.toString)
this.itemLabelPadding.top == orig(this.itemLabelPadding.top)
this.itemLabelPadding.left == orig(this.itemLabelPadding.left)
this.itemLabelPadding.bottom == orig(this.itemLabelPadding.bottom)
this.itemLabelPadding.right == orig(this.itemLabelPadding.right)
this.items == orig(this.items)
this.items.blocks == orig(this.items.blocks)
this.items.blocks[] == orig(this.items.blocks[])
this.items.blocks.getClass().getName() == orig(this.items.blocks.getClass().getName())
this.items.arrangement == orig(this.items.arrangement)
this.items.arrangement.getClass().getName() == orig(this.items.arrangement.getClass().getName())
this.items.id == orig(this.items.id)
this.items.margin == orig(this.items.margin)
this.items.margin.unitType == orig(this.items.margin.unitType)
this.items.margin.top == orig(this.items.margin.top)
this.items.margin.left == orig(this.items.margin.left)
this.items.margin.bottom == orig(this.items.margin.bottom)
this.items.margin.right == orig(this.items.margin.right)
this.items.frame == orig(this.items.frame)
this.items.frame.getClass().getName() == orig(this.items.frame.getClass().getName())
this.items.padding == orig(this.items.padding)
this.items.padding.unitType == orig(this.items.padding.unitType)
this.items.padding.top == orig(this.items.padding.top)
this.items.padding.left == orig(this.items.padding.left)
this.items.padding.bottom == orig(this.items.padding.bottom)
this.items.padding.right == orig(this.items.padding.right)
this.items.width == orig(this.items.width)
this.items.height == orig(this.items.height)
this.items.bounds == orig(this.items.bounds)
this.items.bounds.getClass().getName() == orig(this.items.bounds.getClass().getName())
this.hLayout == orig(this.hLayout)
this.hLayout.getClass().getName() == orig(this.hLayout.getClass().getName())
this.vLayout == orig(this.vLayout)
this.vLayout.getClass().getName() == orig(this.vLayout.getClass().getName())
this.wrapper == orig(this.wrapper)
org.jfree.chart.title.Title.DEFAULT_POSITION == orig(org.jfree.chart.title.Title.DEFAULT_POSITION)
org.jfree.chart.title.Title.DEFAULT_POSITION.name == orig(org.jfree.chart.title.Title.DEFAULT_POSITION.name)
org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT)
org.jfree.chart.util.HorizontalAlignment.LEFT == orig(org.jfree.chart.util.HorizontalAlignment.LEFT)
org.jfree.chart.util.HorizontalAlignment.RIGHT == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT)
org.jfree.chart.util.HorizontalAlignment.CENTER == orig(org.jfree.chart.util.HorizontalAlignment.CENTER)
org.jfree.chart.util.HorizontalAlignment.LEFT.name == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name)
org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString)
org.jfree.chart.util.HorizontalAlignment.CENTER.name == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name)
org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT)
org.jfree.chart.util.VerticalAlignment.TOP == orig(org.jfree.chart.util.VerticalAlignment.TOP)
org.jfree.chart.util.VerticalAlignment.BOTTOM == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM)
org.jfree.chart.util.VerticalAlignment.CENTER == orig(org.jfree.chart.util.VerticalAlignment.CENTER)
org.jfree.chart.util.VerticalAlignment.TOP.name == orig(org.jfree.chart.util.VerticalAlignment.TOP.name)
org.jfree.chart.util.VerticalAlignment.TOP.name.toString == orig(org.jfree.chart.util.VerticalAlignment.TOP.name.toString)
org.jfree.chart.util.VerticalAlignment.BOTTOM.name == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM.name)
org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString)
org.jfree.chart.util.VerticalAlignment.CENTER.name == orig(org.jfree.chart.util.VerticalAlignment.CENTER.name)
org.jfree.chart.util.VerticalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.VerticalAlignment.CENTER.name.toString)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString)
org.jfree.chart.title.Title.DEFAULT_PADDING == orig(org.jfree.chart.title.Title.DEFAULT_PADDING)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name.toString)
org.jfree.chart.title.Title.DEFAULT_PADDING.top == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.top)
org.jfree.chart.title.Title.DEFAULT_PADDING.left == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.left)
org.jfree.chart.title.Title.DEFAULT_PADDING.bottom == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.bottom)
org.jfree.chart.title.Title.DEFAULT_PADDING.right == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.right)
this.position == orig(this.position)
this.position.name == orig(this.position.name)
this.position.name.toString == orig(this.position.name.toString)
this.horizontalAlignment == orig(this.horizontalAlignment)
this.horizontalAlignment.name == orig(this.horizontalAlignment.name)
this.horizontalAlignment.name.toString == orig(this.horizontalAlignment.name.toString)
this.verticalAlignment == orig(this.verticalAlignment)
this.verticalAlignment.name == orig(this.verticalAlignment.name)
this.verticalAlignment.name.toString == orig(this.verticalAlignment.name.toString)
this.listenerList == orig(this.listenerList)
this.notify == orig(this.notify)
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener == orig(org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener)
this.id == orig(this.id)
this.margin == orig(this.margin)
this.margin.unitType == orig(this.margin.unitType)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
this.backgroundPaint has only one value
this.items.blocks[] == []
this.items.blocks[].getClass().getName() == []
this.position has only one value
this.position.name has only one value
this.position.name.toString == "RectangleEdge.TOP"
this.margin.top == 1.0
this.margin.left == 1.0
this.margin.bottom == 1.0
this.margin.right == 1.0
this.frame.getClass().getName() == org.jfree.chart.block.LineBorder.class
===========================================================================
org.jfree.chart.title.TextTitle:::CLASS
org.jfree.chart.title.TextTitle.DEFAULT_FONT has only one value
org.jfree.chart.title.TextTitle.DEFAULT_FONT != null
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT has only one value
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT != null
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT.getClass().getName() == java.awt.Color.class
org.jfree.chart.title.Title.DEFAULT_POSITION has only one value
org.jfree.chart.title.Title.DEFAULT_POSITION != null
org.jfree.chart.util.RectangleEdge.TOP has only one value
org.jfree.chart.util.RectangleEdge.TOP != null
org.jfree.chart.util.RectangleEdge.BOTTOM has only one value
org.jfree.chart.util.RectangleEdge.BOTTOM != null
org.jfree.chart.util.RectangleEdge.LEFT has only one value
org.jfree.chart.util.RectangleEdge.LEFT != null
org.jfree.chart.util.RectangleEdge.RIGHT has only one value
org.jfree.chart.util.RectangleEdge.RIGHT != null
org.jfree.chart.util.RectangleEdge.TOP.name has only one value
org.jfree.chart.util.RectangleEdge.TOP.name != null
org.jfree.chart.util.RectangleEdge.TOP.name.toString == "RectangleEdge.TOP"
org.jfree.chart.util.RectangleEdge.BOTTOM.name has only one value
org.jfree.chart.util.RectangleEdge.BOTTOM.name != null
org.jfree.chart.util.RectangleEdge.BOTTOM.name.toString == "RectangleEdge.BOTTOM"
org.jfree.chart.util.RectangleEdge.LEFT.name has only one value
org.jfree.chart.util.RectangleEdge.LEFT.name != null
org.jfree.chart.util.RectangleEdge.LEFT.name.toString == "RectangleEdge.LEFT"
org.jfree.chart.util.RectangleEdge.RIGHT.name has only one value
org.jfree.chart.util.RectangleEdge.RIGHT.name != null
org.jfree.chart.util.RectangleEdge.RIGHT.name.toString == "RectangleEdge.RIGHT"
org.jfree.chart.title.Title.DEFAULT_POSITION.name has only one value
org.jfree.chart.title.Title.DEFAULT_POSITION.name != null
org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString == "RectangleEdge.TOP"
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT has only one value
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT != null
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name has only one value
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name != null
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString == "HorizontalAlignment.CENTER"
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT has only one value
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT != null
org.jfree.chart.util.VerticalAlignment.TOP has only one value
org.jfree.chart.util.VerticalAlignment.TOP != null
org.jfree.chart.util.VerticalAlignment.BOTTOM has only one value
org.jfree.chart.util.VerticalAlignment.BOTTOM != null
org.jfree.chart.util.VerticalAlignment.CENTER has only one value
org.jfree.chart.util.VerticalAlignment.CENTER != null
org.jfree.chart.util.VerticalAlignment.TOP.name has only one value
org.jfree.chart.util.VerticalAlignment.TOP.name != null
org.jfree.chart.util.VerticalAlignment.TOP.name.toString == "VerticalAlignment.TOP"
org.jfree.chart.util.VerticalAlignment.BOTTOM.name has only one value
org.jfree.chart.util.VerticalAlignment.BOTTOM.name != null
org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString == "VerticalAlignment.BOTTOM"
org.jfree.chart.util.VerticalAlignment.CENTER.name has only one value
org.jfree.chart.util.VerticalAlignment.CENTER.name != null
org.jfree.chart.util.VerticalAlignment.CENTER.name.toString == "VerticalAlignment.CENTER"
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name has only one value
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name != null
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString == "VerticalAlignment.CENTER"
org.jfree.chart.title.Title.DEFAULT_PADDING has only one value
org.jfree.chart.title.Title.DEFAULT_PADDING != null
org.jfree.chart.util.RectangleInsets.ZERO_INSETS has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS != null
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType != null
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == 0.0
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType has only one value
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType != null
org.jfree.chart.util.UnitType.ABSOLUTE has only one value
org.jfree.chart.util.UnitType.ABSOLUTE != null
org.jfree.chart.util.UnitType.RELATIVE has only one value
org.jfree.chart.util.UnitType.RELATIVE != null
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name has only one value
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name != null
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name.toString == "UnitType.ABSOLUTE"
org.jfree.chart.title.Title.DEFAULT_PADDING.top == 1.0
org.jfree.chart.title.Title.DEFAULT_PADDING.left == 1.0
org.jfree.chart.title.Title.DEFAULT_PADDING.bottom == 1.0
org.jfree.chart.title.Title.DEFAULT_PADDING.right == 1.0
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener has only one value
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener != null
===========================================================================
org.jfree.chart.title.TextTitle:::OBJECT
this.text != null
this.text.toString one of { "Pie Chart", "Test" }
this.font has only one value
this.font != null
this.textAlignment has only one value
this.textAlignment != null
org.jfree.chart.util.HorizontalAlignment.LEFT has only one value
org.jfree.chart.util.HorizontalAlignment.LEFT != null
org.jfree.chart.util.HorizontalAlignment.RIGHT has only one value
org.jfree.chart.util.HorizontalAlignment.RIGHT != null
org.jfree.chart.util.HorizontalAlignment.CENTER has only one value
org.jfree.chart.util.HorizontalAlignment.CENTER != null
org.jfree.chart.util.HorizontalAlignment.LEFT.name has only one value
org.jfree.chart.util.HorizontalAlignment.LEFT.name != null
org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString == "HorizontalAlignment.LEFT"
org.jfree.chart.util.HorizontalAlignment.RIGHT.name has only one value
org.jfree.chart.util.HorizontalAlignment.RIGHT.name != null
org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString == "HorizontalAlignment.RIGHT"
org.jfree.chart.util.HorizontalAlignment.CENTER.name has only one value
org.jfree.chart.util.HorizontalAlignment.CENTER.name != null
org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString == "HorizontalAlignment.CENTER"
this.textAlignment.name has only one value
this.textAlignment.name != null
this.textAlignment.name.toString == "HorizontalAlignment.CENTER"
this.paint has only one value
this.paint != null
this.paint.getClass().getName() == java.awt.Color.class
this.backgroundPaint == null
this.toolTipText == null
this.urlText == null
this.content.lines != null
this.content.lines[] elements != null
this.content.lines[].getClass().getName() == [org.jfree.chart.text.TextLine]
this.content.lines[].getClass().getName() elements == org.jfree.chart.text.TextLine.class
this.content.lines.getClass().getName() == java.util.ArrayList.class
this.content.lineAlignment has only one value
this.content.lineAlignment != null
this.content.lineAlignment.name has only one value
this.content.lineAlignment.name != null
this.content.lineAlignment.name.toString == "HorizontalAlignment.CENTER"
this.expandToFitSpace == false
this.position has only one value
this.position != null
this.position.name has only one value
this.position.name != null
this.position.name.toString == "RectangleEdge.TOP"
this.horizontalAlignment has only one value
this.horizontalAlignment != null
this.horizontalAlignment.name has only one value
this.horizontalAlignment.name != null
this.horizontalAlignment.name.toString == "HorizontalAlignment.CENTER"
this.verticalAlignment has only one value
this.verticalAlignment != null
this.verticalAlignment.name has only one value
this.verticalAlignment.name != null
this.verticalAlignment.name.toString == "VerticalAlignment.CENTER"
this.listenerList != null
this.notify == true
this.id == null
this.margin has only one value
this.margin != null
this.margin.unitType has only one value
this.margin.unitType != null
this.margin.unitType.name has only one value
this.margin.unitType.name != null
this.margin.unitType.name.toString == "UnitType.ABSOLUTE"
this.margin.top == 0.0
this.margin.left == 0.0
this.margin.bottom == 0.0
this.margin.right == 0.0
this.frame has only one value
this.frame != null
this.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class
this.padding has only one value
this.padding != null
this.padding.unitType has only one value
this.padding.unitType != null
this.padding.unitType.name has only one value
this.padding.unitType.name != null
this.padding.unitType.name.toString == "UnitType.ABSOLUTE"
this.padding.top == 1.0
this.padding.left == 1.0
this.padding.bottom == 1.0
this.padding.right == 1.0
this.width == 0.0
this.height == 0.0
this.bounds != null
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
size(this.content.lines[]) == 1
===========================================================================
org.jfree.chart.title.TextTitle.TextTitle(java.lang.String, java.awt.Font):::ENTER
text.toString one of { "Pie Chart", "Test" }
font has only one value
===========================================================================
org.jfree.chart.title.TextTitle.TextTitle(java.lang.String, java.awt.Font):::EXIT
text.toString == orig(text.toString)
this.content == null
text.toString one of { "Pie Chart", "Test" }
===========================================================================
org.jfree.chart.title.TextTitle.TextTitle(java.lang.String, java.awt.Font, java.awt.Paint, org.jfree.chart.util.RectangleEdge, org.jfree.chart.util.HorizontalAlignment, org.jfree.chart.util.VerticalAlignment, org.jfree.chart.util.RectangleInsets):::ENTER
text.toString one of { "Pie Chart", "Test" }
font has only one value
paint has only one value
paint.getClass().getName() == java.awt.Color.class
position has only one value
org.jfree.chart.util.RectangleEdge.TOP has only one value
org.jfree.chart.util.RectangleEdge.BOTTOM has only one value
org.jfree.chart.util.RectangleEdge.LEFT has only one value
org.jfree.chart.util.RectangleEdge.RIGHT has only one value
org.jfree.chart.util.RectangleEdge.TOP.name has only one value
org.jfree.chart.util.RectangleEdge.TOP.name.toString == "RectangleEdge.TOP"
org.jfree.chart.util.RectangleEdge.BOTTOM.name has only one value
org.jfree.chart.util.RectangleEdge.BOTTOM.name.toString == "RectangleEdge.BOTTOM"
org.jfree.chart.util.RectangleEdge.LEFT.name has only one value
org.jfree.chart.util.RectangleEdge.LEFT.name.toString == "RectangleEdge.LEFT"
org.jfree.chart.util.RectangleEdge.RIGHT.name has only one value
org.jfree.chart.util.RectangleEdge.RIGHT.name.toString == "RectangleEdge.RIGHT"
position.name has only one value
position.name.toString == "RectangleEdge.TOP"
horizontalAlignment has only one value
org.jfree.chart.util.HorizontalAlignment.LEFT has only one value
org.jfree.chart.util.HorizontalAlignment.RIGHT has only one value
org.jfree.chart.util.HorizontalAlignment.CENTER has only one value
org.jfree.chart.util.HorizontalAlignment.LEFT.name has only one value
org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString == "HorizontalAlignment.LEFT"
org.jfree.chart.util.HorizontalAlignment.RIGHT.name has only one value
org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString == "HorizontalAlignment.RIGHT"
org.jfree.chart.util.HorizontalAlignment.CENTER.name has only one value
org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString == "HorizontalAlignment.CENTER"
horizontalAlignment.name has only one value
horizontalAlignment.name.toString == "HorizontalAlignment.CENTER"
verticalAlignment has only one value
org.jfree.chart.util.VerticalAlignment.TOP has only one value
org.jfree.chart.util.VerticalAlignment.BOTTOM has only one value
org.jfree.chart.util.VerticalAlignment.CENTER has only one value
org.jfree.chart.util.VerticalAlignment.TOP.name has only one value
org.jfree.chart.util.VerticalAlignment.TOP.name.toString == "VerticalAlignment.TOP"
org.jfree.chart.util.VerticalAlignment.BOTTOM.name has only one value
org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString == "VerticalAlignment.BOTTOM"
org.jfree.chart.util.VerticalAlignment.CENTER.name has only one value
org.jfree.chart.util.VerticalAlignment.CENTER.name.toString == "VerticalAlignment.CENTER"
verticalAlignment.name has only one value
verticalAlignment.name.toString == "VerticalAlignment.CENTER"
padding has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == 0.0
padding.unitType has only one value
org.jfree.chart.util.UnitType.ABSOLUTE has only one value
org.jfree.chart.util.UnitType.RELATIVE has only one value
padding.unitType.name has only one value
padding.unitType.name.toString == "UnitType.ABSOLUTE"
padding.top == 1.0
padding.left == 1.0
padding.bottom == 1.0
padding.right == 1.0
===========================================================================
org.jfree.chart.title.TextTitle.TextTitle(java.lang.String, java.awt.Font, java.awt.Paint, org.jfree.chart.util.RectangleEdge, org.jfree.chart.util.HorizontalAlignment, org.jfree.chart.util.VerticalAlignment, org.jfree.chart.util.RectangleInsets):::EXIT
org.jfree.chart.util.HorizontalAlignment.LEFT == orig(org.jfree.chart.util.HorizontalAlignment.LEFT)
org.jfree.chart.util.HorizontalAlignment.RIGHT == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT)
org.jfree.chart.util.HorizontalAlignment.CENTER == orig(org.jfree.chart.util.HorizontalAlignment.CENTER)
org.jfree.chart.util.HorizontalAlignment.LEFT.name == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name)
org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString)
org.jfree.chart.util.HorizontalAlignment.CENTER.name == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name)
org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString)
org.jfree.chart.util.RectangleEdge.TOP == orig(org.jfree.chart.util.RectangleEdge.TOP)
org.jfree.chart.util.RectangleEdge.BOTTOM == orig(org.jfree.chart.util.RectangleEdge.BOTTOM)
org.jfree.chart.util.RectangleEdge.LEFT == orig(org.jfree.chart.util.RectangleEdge.LEFT)
org.jfree.chart.util.RectangleEdge.RIGHT == orig(org.jfree.chart.util.RectangleEdge.RIGHT)
org.jfree.chart.util.RectangleEdge.TOP.name == orig(org.jfree.chart.util.RectangleEdge.TOP.name)
org.jfree.chart.util.RectangleEdge.TOP.name.toString == orig(org.jfree.chart.util.RectangleEdge.TOP.name.toString)
org.jfree.chart.util.RectangleEdge.BOTTOM.name == orig(org.jfree.chart.util.RectangleEdge.BOTTOM.name)
org.jfree.chart.util.RectangleEdge.BOTTOM.name.toString == orig(org.jfree.chart.util.RectangleEdge.BOTTOM.name.toString)
org.jfree.chart.util.RectangleEdge.LEFT.name == orig(org.jfree.chart.util.RectangleEdge.LEFT.name)
org.jfree.chart.util.RectangleEdge.LEFT.name.toString == orig(org.jfree.chart.util.RectangleEdge.LEFT.name.toString)
org.jfree.chart.util.RectangleEdge.RIGHT.name == orig(org.jfree.chart.util.RectangleEdge.RIGHT.name)
org.jfree.chart.util.RectangleEdge.RIGHT.name.toString == orig(org.jfree.chart.util.RectangleEdge.RIGHT.name.toString)
org.jfree.chart.util.VerticalAlignment.TOP == orig(org.jfree.chart.util.VerticalAlignment.TOP)
org.jfree.chart.util.VerticalAlignment.BOTTOM == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM)
org.jfree.chart.util.VerticalAlignment.CENTER == orig(org.jfree.chart.util.VerticalAlignment.CENTER)
org.jfree.chart.util.VerticalAlignment.TOP.name == orig(org.jfree.chart.util.VerticalAlignment.TOP.name)
org.jfree.chart.util.VerticalAlignment.TOP.name.toString == orig(org.jfree.chart.util.VerticalAlignment.TOP.name.toString)
org.jfree.chart.util.VerticalAlignment.BOTTOM.name == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM.name)
org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString)
org.jfree.chart.util.VerticalAlignment.CENTER.name == orig(org.jfree.chart.util.VerticalAlignment.CENTER.name)
org.jfree.chart.util.VerticalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.VerticalAlignment.CENTER.name.toString)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
text.toString == orig(text.toString)
position.name == orig(position.name)
position.name.toString == orig(position.name.toString)
horizontalAlignment.name == orig(horizontalAlignment.name)
horizontalAlignment.name.toString == orig(horizontalAlignment.name.toString)
verticalAlignment.name == orig(verticalAlignment.name)
verticalAlignment.name.toString == orig(verticalAlignment.name.toString)
padding.unitType == orig(padding.unitType)
padding.unitType.name == orig(padding.unitType.name)
padding.unitType.name.toString == orig(padding.unitType.name.toString)
padding.top == orig(padding.top)
padding.left == orig(padding.left)
padding.bottom == orig(padding.bottom)
padding.right == orig(padding.right)
this.content == null
text.toString one of { "Pie Chart", "Test" }
position.name has only one value
position.name.toString == "RectangleEdge.TOP"
horizontalAlignment.name has only one value
horizontalAlignment.name.toString == "HorizontalAlignment.CENTER"
verticalAlignment.name has only one value
verticalAlignment.name.toString == "VerticalAlignment.CENTER"
padding.unitType has only one value
padding.unitType.name has only one value
padding.unitType.name.toString == "UnitType.ABSOLUTE"
padding.top == 1.0
padding.left == 1.0
padding.bottom == 1.0
padding.right == 1.0
===========================================================================
org.jfree.chart.title.TextTitle.arrange(java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint):::ENTER
this.content == null
g2.getClass().getName() == sun.java2d.SunGraphics2D.class
org.jfree.chart.block.RectangleConstraint.NONE has only one value
org.jfree.chart.block.RectangleConstraint.NONE.width == 0.0
org.jfree.chart.block.RectangleConstraint.NONE.widthRange == null
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType has only one value
org.jfree.chart.block.RectangleConstraint.NONE.height == 0.0
org.jfree.chart.block.RectangleConstraint.NONE.heightRange == null
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType has only one value
constraint.width == 200.0
constraint.widthRange.lower == 0.0
constraint.widthRange.upper == 200.0
constraint.widthConstraintType has only one value
org.jfree.chart.block.LengthConstraintType.NONE has only one value
org.jfree.chart.block.LengthConstraintType.RANGE has only one value
org.jfree.chart.block.LengthConstraintType.FIXED has only one value
constraint.widthConstraintType.name has only one value
constraint.widthConstraintType.name.toString == "RectangleConstraintType.RANGE"
constraint.height == 100.0
constraint.heightRange.lower == 0.0
constraint.heightRange.upper == 100.0
constraint.heightConstraintType has only one value
constraint.heightConstraintType.name has only one value
constraint.heightConstraintType.name.toString == "RectangleConstraintType.RANGE"
===========================================================================
org.jfree.chart.title.TextTitle.arrange(java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint):::EXIT
org.jfree.chart.title.TextTitle.DEFAULT_FONT == orig(org.jfree.chart.title.TextTitle.DEFAULT_FONT)
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT == orig(org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT)
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT.getClass().getName() == orig(org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT.getClass().getName())
this.text == orig(this.text)
this.text.toString == orig(this.text.toString)
this.font == orig(this.font)
this.textAlignment == orig(this.textAlignment)
org.jfree.chart.util.HorizontalAlignment.LEFT == orig(org.jfree.chart.util.HorizontalAlignment.LEFT)
org.jfree.chart.util.HorizontalAlignment.RIGHT == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT)
org.jfree.chart.util.HorizontalAlignment.CENTER == orig(org.jfree.chart.util.HorizontalAlignment.CENTER)
org.jfree.chart.util.HorizontalAlignment.LEFT.name == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name)
org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString)
org.jfree.chart.util.HorizontalAlignment.CENTER.name == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name)
org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString)
this.textAlignment.name == orig(this.textAlignment.name)
this.textAlignment.name.toString == orig(this.textAlignment.name.toString)
this.paint == orig(this.paint)
this.paint.getClass().getName() == orig(this.paint.getClass().getName())
this.backgroundPaint == orig(this.backgroundPaint)
this.toolTipText == orig(this.toolTipText)
this.urlText == orig(this.urlText)
this.expandToFitSpace == orig(this.expandToFitSpace)
org.jfree.chart.title.Title.DEFAULT_POSITION == orig(org.jfree.chart.title.Title.DEFAULT_POSITION)
org.jfree.chart.util.RectangleEdge.TOP == orig(org.jfree.chart.util.RectangleEdge.TOP)
org.jfree.chart.util.RectangleEdge.BOTTOM == orig(org.jfree.chart.util.RectangleEdge.BOTTOM)
org.jfree.chart.util.RectangleEdge.LEFT == orig(org.jfree.chart.util.RectangleEdge.LEFT)
org.jfree.chart.util.RectangleEdge.RIGHT == orig(org.jfree.chart.util.RectangleEdge.RIGHT)
org.jfree.chart.util.RectangleEdge.TOP.name == orig(org.jfree.chart.util.RectangleEdge.TOP.name)
org.jfree.chart.util.RectangleEdge.TOP.name.toString == orig(org.jfree.chart.util.RectangleEdge.TOP.name.toString)
org.jfree.chart.util.RectangleEdge.BOTTOM.name == orig(org.jfree.chart.util.RectangleEdge.BOTTOM.name)
org.jfree.chart.util.RectangleEdge.BOTTOM.name.toString == orig(org.jfree.chart.util.RectangleEdge.BOTTOM.name.toString)
org.jfree.chart.util.RectangleEdge.LEFT.name == orig(org.jfree.chart.util.RectangleEdge.LEFT.name)
org.jfree.chart.util.RectangleEdge.LEFT.name.toString == orig(org.jfree.chart.util.RectangleEdge.LEFT.name.toString)
org.jfree.chart.util.RectangleEdge.RIGHT.name == orig(org.jfree.chart.util.RectangleEdge.RIGHT.name)
org.jfree.chart.util.RectangleEdge.RIGHT.name.toString == orig(org.jfree.chart.util.RectangleEdge.RIGHT.name.toString)
org.jfree.chart.title.Title.DEFAULT_POSITION.name == orig(org.jfree.chart.title.Title.DEFAULT_POSITION.name)
org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT)
org.jfree.chart.util.VerticalAlignment.TOP == orig(org.jfree.chart.util.VerticalAlignment.TOP)
org.jfree.chart.util.VerticalAlignment.BOTTOM == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM)
org.jfree.chart.util.VerticalAlignment.CENTER == orig(org.jfree.chart.util.VerticalAlignment.CENTER)
org.jfree.chart.util.VerticalAlignment.TOP.name == orig(org.jfree.chart.util.VerticalAlignment.TOP.name)
org.jfree.chart.util.VerticalAlignment.TOP.name.toString == orig(org.jfree.chart.util.VerticalAlignment.TOP.name.toString)
org.jfree.chart.util.VerticalAlignment.BOTTOM.name == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM.name)
org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString)
org.jfree.chart.util.VerticalAlignment.CENTER.name == orig(org.jfree.chart.util.VerticalAlignment.CENTER.name)
org.jfree.chart.util.VerticalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.VerticalAlignment.CENTER.name.toString)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString)
org.jfree.chart.title.Title.DEFAULT_PADDING == orig(org.jfree.chart.title.Title.DEFAULT_PADDING)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name.toString)
org.jfree.chart.title.Title.DEFAULT_PADDING.top == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.top)
org.jfree.chart.title.Title.DEFAULT_PADDING.left == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.left)
org.jfree.chart.title.Title.DEFAULT_PADDING.bottom == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.bottom)
org.jfree.chart.title.Title.DEFAULT_PADDING.right == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.right)
this.position == orig(this.position)
this.position.name == orig(this.position.name)
this.position.name.toString == orig(this.position.name.toString)
this.horizontalAlignment == orig(this.horizontalAlignment)
this.horizontalAlignment.name == orig(this.horizontalAlignment.name)
this.horizontalAlignment.name.toString == orig(this.horizontalAlignment.name.toString)
this.verticalAlignment == orig(this.verticalAlignment)
this.verticalAlignment.name == orig(this.verticalAlignment.name)
this.verticalAlignment.name.toString == orig(this.verticalAlignment.name.toString)
this.listenerList == orig(this.listenerList)
this.notify == orig(this.notify)
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener == orig(org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener)
this.id == orig(this.id)
this.margin == orig(this.margin)
this.margin.unitType == orig(this.margin.unitType)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
org.jfree.chart.block.RectangleConstraint.NONE == orig(org.jfree.chart.block.RectangleConstraint.NONE)
org.jfree.chart.block.RectangleConstraint.NONE.width == orig(org.jfree.chart.block.RectangleConstraint.NONE.width)
org.jfree.chart.block.RectangleConstraint.NONE.widthRange == orig(org.jfree.chart.block.RectangleConstraint.NONE.widthRange)
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType == orig(org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType)
org.jfree.chart.block.RectangleConstraint.NONE.height == orig(org.jfree.chart.block.RectangleConstraint.NONE.height)
org.jfree.chart.block.RectangleConstraint.NONE.heightRange == orig(org.jfree.chart.block.RectangleConstraint.NONE.heightRange)
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType == orig(org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType)
constraint.width == orig(constraint.width)
constraint.widthRange == orig(constraint.widthRange)
constraint.widthRange.lower == orig(constraint.widthRange.lower)
constraint.widthRange.upper == orig(constraint.widthRange.upper)
constraint.widthConstraintType == orig(constraint.widthConstraintType)
org.jfree.chart.block.LengthConstraintType.NONE == orig(org.jfree.chart.block.LengthConstraintType.NONE)
org.jfree.chart.block.LengthConstraintType.RANGE == orig(org.jfree.chart.block.LengthConstraintType.RANGE)
org.jfree.chart.block.LengthConstraintType.FIXED == orig(org.jfree.chart.block.LengthConstraintType.FIXED)
constraint.widthConstraintType.name == orig(constraint.widthConstraintType.name)
constraint.widthConstraintType.name.toString == orig(constraint.widthConstraintType.name.toString)
constraint.height == orig(constraint.height)
constraint.heightRange == orig(constraint.heightRange)
constraint.heightRange.lower == orig(constraint.heightRange.lower)
constraint.heightRange.upper == orig(constraint.heightRange.upper)
constraint.heightConstraintType == orig(constraint.heightConstraintType)
constraint.heightConstraintType.name == orig(constraint.heightConstraintType.name)
constraint.heightConstraintType.name.toString == orig(constraint.heightConstraintType.name.toString)
org.jfree.chart.block.RectangleConstraint.NONE has only one value
org.jfree.chart.block.RectangleConstraint.NONE.width == 0.0
org.jfree.chart.block.RectangleConstraint.NONE.widthRange == null
org.jfree.chart.block.RectangleConstraint.NONE.widthConstraintType has only one value
org.jfree.chart.block.RectangleConstraint.NONE.height == 0.0
org.jfree.chart.block.RectangleConstraint.NONE.heightRange == null
org.jfree.chart.block.RectangleConstraint.NONE.heightConstraintType has only one value
constraint.width == 200.0
constraint.widthRange.lower == 0.0
constraint.widthRange.upper == 200.0
constraint.widthConstraintType has only one value
org.jfree.chart.block.LengthConstraintType.NONE has only one value
org.jfree.chart.block.LengthConstraintType.RANGE has only one value
org.jfree.chart.block.LengthConstraintType.FIXED has only one value
constraint.widthConstraintType.name has only one value
constraint.widthConstraintType.name.toString == "RectangleConstraintType.RANGE"
constraint.height == 100.0
constraint.heightRange.lower == 0.0
constraint.heightRange.upper == 100.0
constraint.heightConstraintType has only one value
constraint.heightConstraintType.name has only one value
constraint.heightConstraintType.name.toString == "RectangleConstraintType.RANGE"
return.width one of { 46.0, 95.0 }
return.height == 22.953125
===========================================================================
org.jfree.chart.title.TextTitle.arrangeRR(java.awt.Graphics2D, org.jfree.data.Range, org.jfree.data.Range):::ENTER
this.content == null
g2.getClass().getName() == sun.java2d.SunGraphics2D.class
widthRange.lower == 0.0
widthRange.upper == 198.0
heightRange.lower == 0.0
heightRange.upper == 98.0
===========================================================================
org.jfree.chart.title.TextTitle.arrangeRR(java.awt.Graphics2D, org.jfree.data.Range, org.jfree.data.Range):::EXIT506
===========================================================================
org.jfree.chart.title.TextTitle.arrangeRR(java.awt.Graphics2D, org.jfree.data.Range, org.jfree.data.Range):::EXIT
org.jfree.chart.title.TextTitle.DEFAULT_FONT == orig(org.jfree.chart.title.TextTitle.DEFAULT_FONT)
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT == orig(org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT)
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT.getClass().getName() == orig(org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT.getClass().getName())
this.text == orig(this.text)
this.text.toString == orig(this.text.toString)
this.font == orig(this.font)
this.textAlignment == orig(this.textAlignment)
org.jfree.chart.util.HorizontalAlignment.LEFT == orig(org.jfree.chart.util.HorizontalAlignment.LEFT)
org.jfree.chart.util.HorizontalAlignment.RIGHT == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT)
org.jfree.chart.util.HorizontalAlignment.CENTER == orig(org.jfree.chart.util.HorizontalAlignment.CENTER)
org.jfree.chart.util.HorizontalAlignment.LEFT.name == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name)
org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString)
org.jfree.chart.util.HorizontalAlignment.CENTER.name == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name)
org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString)
this.textAlignment.name == orig(this.textAlignment.name)
this.textAlignment.name.toString == orig(this.textAlignment.name.toString)
this.paint == orig(this.paint)
this.paint.getClass().getName() == orig(this.paint.getClass().getName())
this.backgroundPaint == orig(this.backgroundPaint)
this.toolTipText == orig(this.toolTipText)
this.urlText == orig(this.urlText)
this.expandToFitSpace == orig(this.expandToFitSpace)
org.jfree.chart.title.Title.DEFAULT_POSITION == orig(org.jfree.chart.title.Title.DEFAULT_POSITION)
org.jfree.chart.util.RectangleEdge.TOP == orig(org.jfree.chart.util.RectangleEdge.TOP)
org.jfree.chart.util.RectangleEdge.BOTTOM == orig(org.jfree.chart.util.RectangleEdge.BOTTOM)
org.jfree.chart.util.RectangleEdge.LEFT == orig(org.jfree.chart.util.RectangleEdge.LEFT)
org.jfree.chart.util.RectangleEdge.RIGHT == orig(org.jfree.chart.util.RectangleEdge.RIGHT)
org.jfree.chart.util.RectangleEdge.TOP.name == orig(org.jfree.chart.util.RectangleEdge.TOP.name)
org.jfree.chart.util.RectangleEdge.TOP.name.toString == orig(org.jfree.chart.util.RectangleEdge.TOP.name.toString)
org.jfree.chart.util.RectangleEdge.BOTTOM.name == orig(org.jfree.chart.util.RectangleEdge.BOTTOM.name)
org.jfree.chart.util.RectangleEdge.BOTTOM.name.toString == orig(org.jfree.chart.util.RectangleEdge.BOTTOM.name.toString)
org.jfree.chart.util.RectangleEdge.LEFT.name == orig(org.jfree.chart.util.RectangleEdge.LEFT.name)
org.jfree.chart.util.RectangleEdge.LEFT.name.toString == orig(org.jfree.chart.util.RectangleEdge.LEFT.name.toString)
org.jfree.chart.util.RectangleEdge.RIGHT.name == orig(org.jfree.chart.util.RectangleEdge.RIGHT.name)
org.jfree.chart.util.RectangleEdge.RIGHT.name.toString == orig(org.jfree.chart.util.RectangleEdge.RIGHT.name.toString)
org.jfree.chart.title.Title.DEFAULT_POSITION.name == orig(org.jfree.chart.title.Title.DEFAULT_POSITION.name)
org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT)
org.jfree.chart.util.VerticalAlignment.TOP == orig(org.jfree.chart.util.VerticalAlignment.TOP)
org.jfree.chart.util.VerticalAlignment.BOTTOM == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM)
org.jfree.chart.util.VerticalAlignment.CENTER == orig(org.jfree.chart.util.VerticalAlignment.CENTER)
org.jfree.chart.util.VerticalAlignment.TOP.name == orig(org.jfree.chart.util.VerticalAlignment.TOP.name)
org.jfree.chart.util.VerticalAlignment.TOP.name.toString == orig(org.jfree.chart.util.VerticalAlignment.TOP.name.toString)
org.jfree.chart.util.VerticalAlignment.BOTTOM.name == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM.name)
org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString)
org.jfree.chart.util.VerticalAlignment.CENTER.name == orig(org.jfree.chart.util.VerticalAlignment.CENTER.name)
org.jfree.chart.util.VerticalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.VerticalAlignment.CENTER.name.toString)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString)
org.jfree.chart.title.Title.DEFAULT_PADDING == orig(org.jfree.chart.title.Title.DEFAULT_PADDING)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name.toString)
org.jfree.chart.title.Title.DEFAULT_PADDING.top == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.top)
org.jfree.chart.title.Title.DEFAULT_PADDING.left == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.left)
org.jfree.chart.title.Title.DEFAULT_PADDING.bottom == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.bottom)
org.jfree.chart.title.Title.DEFAULT_PADDING.right == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.right)
this.position == orig(this.position)
this.position.name == orig(this.position.name)
this.position.name.toString == orig(this.position.name.toString)
this.horizontalAlignment == orig(this.horizontalAlignment)
this.horizontalAlignment.name == orig(this.horizontalAlignment.name)
this.horizontalAlignment.name.toString == orig(this.horizontalAlignment.name.toString)
this.verticalAlignment == orig(this.verticalAlignment)
this.verticalAlignment.name == orig(this.verticalAlignment.name)
this.verticalAlignment.name.toString == orig(this.verticalAlignment.name.toString)
this.listenerList == orig(this.listenerList)
this.notify == orig(this.notify)
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener == orig(org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener)
this.id == orig(this.id)
this.margin == orig(this.margin)
this.margin.unitType == orig(this.margin.unitType)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
widthRange.lower == orig(widthRange.lower)
widthRange.upper == orig(widthRange.upper)
heightRange.lower == orig(heightRange.lower)
heightRange.upper == orig(heightRange.upper)
widthRange.lower == 0.0
widthRange.upper == 198.0
heightRange.lower == 0.0
heightRange.upper == 98.0
return.width one of { 44.0, 93.0 }
return.height == 20.953125
===========================================================================
org.jfree.chart.title.TextTitle.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.lang.Object):::ENTER
g2.getClass().getName() == sun.java2d.SunGraphics2D.class
area.getClass().getName() == java.awt.geom.Rectangle2D$Double.class
params.getClass().getName() == org.jfree.chart.block.BlockParams.class
===========================================================================
org.jfree.chart.title.TextTitle.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.lang.Object):::EXIT590
===========================================================================
org.jfree.chart.title.TextTitle.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.lang.Object):::EXIT
org.jfree.chart.title.TextTitle.DEFAULT_FONT == orig(org.jfree.chart.title.TextTitle.DEFAULT_FONT)
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT == orig(org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT)
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT.getClass().getName() == orig(org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT.getClass().getName())
this.text == orig(this.text)
this.text.toString == orig(this.text.toString)
this.font == orig(this.font)
this.textAlignment == orig(this.textAlignment)
org.jfree.chart.util.HorizontalAlignment.LEFT == orig(org.jfree.chart.util.HorizontalAlignment.LEFT)
org.jfree.chart.util.HorizontalAlignment.RIGHT == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT)
org.jfree.chart.util.HorizontalAlignment.CENTER == orig(org.jfree.chart.util.HorizontalAlignment.CENTER)
org.jfree.chart.util.HorizontalAlignment.LEFT.name == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name)
org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString)
org.jfree.chart.util.HorizontalAlignment.CENTER.name == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name)
org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString)
this.textAlignment.name == orig(this.textAlignment.name)
this.textAlignment.name.toString == orig(this.textAlignment.name.toString)
this.paint == orig(this.paint)
this.paint.getClass().getName() == orig(this.paint.getClass().getName())
this.backgroundPaint == orig(this.backgroundPaint)
this.toolTipText == orig(this.toolTipText)
this.urlText == orig(this.urlText)
this.content == orig(this.content)
this.content.lines == orig(this.content.lines)
this.content.lines[] == orig(this.content.lines[])
this.content.lines.getClass().getName() == orig(this.content.lines.getClass().getName())
this.content.lineAlignment == orig(this.content.lineAlignment)
this.content.lineAlignment.name == orig(this.content.lineAlignment.name)
this.content.lineAlignment.name.toString == orig(this.content.lineAlignment.name.toString)
this.expandToFitSpace == orig(this.expandToFitSpace)
org.jfree.chart.title.Title.DEFAULT_POSITION == orig(org.jfree.chart.title.Title.DEFAULT_POSITION)
org.jfree.chart.util.RectangleEdge.TOP == orig(org.jfree.chart.util.RectangleEdge.TOP)
org.jfree.chart.util.RectangleEdge.BOTTOM == orig(org.jfree.chart.util.RectangleEdge.BOTTOM)
org.jfree.chart.util.RectangleEdge.LEFT == orig(org.jfree.chart.util.RectangleEdge.LEFT)
org.jfree.chart.util.RectangleEdge.RIGHT == orig(org.jfree.chart.util.RectangleEdge.RIGHT)
org.jfree.chart.util.RectangleEdge.TOP.name == orig(org.jfree.chart.util.RectangleEdge.TOP.name)
org.jfree.chart.util.RectangleEdge.TOP.name.toString == orig(org.jfree.chart.util.RectangleEdge.TOP.name.toString)
org.jfree.chart.util.RectangleEdge.BOTTOM.name == orig(org.jfree.chart.util.RectangleEdge.BOTTOM.name)
org.jfree.chart.util.RectangleEdge.BOTTOM.name.toString == orig(org.jfree.chart.util.RectangleEdge.BOTTOM.name.toString)
org.jfree.chart.util.RectangleEdge.LEFT.name == orig(org.jfree.chart.util.RectangleEdge.LEFT.name)
org.jfree.chart.util.RectangleEdge.LEFT.name.toString == orig(org.jfree.chart.util.RectangleEdge.LEFT.name.toString)
org.jfree.chart.util.RectangleEdge.RIGHT.name == orig(org.jfree.chart.util.RectangleEdge.RIGHT.name)
org.jfree.chart.util.RectangleEdge.RIGHT.name.toString == orig(org.jfree.chart.util.RectangleEdge.RIGHT.name.toString)
org.jfree.chart.title.Title.DEFAULT_POSITION.name == orig(org.jfree.chart.title.Title.DEFAULT_POSITION.name)
org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT)
org.jfree.chart.util.VerticalAlignment.TOP == orig(org.jfree.chart.util.VerticalAlignment.TOP)
org.jfree.chart.util.VerticalAlignment.BOTTOM == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM)
org.jfree.chart.util.VerticalAlignment.CENTER == orig(org.jfree.chart.util.VerticalAlignment.CENTER)
org.jfree.chart.util.VerticalAlignment.TOP.name == orig(org.jfree.chart.util.VerticalAlignment.TOP.name)
org.jfree.chart.util.VerticalAlignment.TOP.name.toString == orig(org.jfree.chart.util.VerticalAlignment.TOP.name.toString)
org.jfree.chart.util.VerticalAlignment.BOTTOM.name == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM.name)
org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString)
org.jfree.chart.util.VerticalAlignment.CENTER.name == orig(org.jfree.chart.util.VerticalAlignment.CENTER.name)
org.jfree.chart.util.VerticalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.VerticalAlignment.CENTER.name.toString)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString)
org.jfree.chart.title.Title.DEFAULT_PADDING == orig(org.jfree.chart.title.Title.DEFAULT_PADDING)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name.toString)
org.jfree.chart.title.Title.DEFAULT_PADDING.top == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.top)
org.jfree.chart.title.Title.DEFAULT_PADDING.left == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.left)
org.jfree.chart.title.Title.DEFAULT_PADDING.bottom == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.bottom)
org.jfree.chart.title.Title.DEFAULT_PADDING.right == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.right)
this.position == orig(this.position)
this.position.name == orig(this.position.name)
this.position.name.toString == orig(this.position.name.toString)
this.horizontalAlignment == orig(this.horizontalAlignment)
this.horizontalAlignment.name == orig(this.horizontalAlignment.name)
this.horizontalAlignment.name.toString == orig(this.horizontalAlignment.name.toString)
this.verticalAlignment == orig(this.verticalAlignment)
this.verticalAlignment.name == orig(this.verticalAlignment.name)
this.verticalAlignment.name.toString == orig(this.verticalAlignment.name.toString)
this.listenerList == orig(this.listenerList)
this.notify == orig(this.notify)
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener == orig(org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener)
this.id == orig(this.id)
this.margin == orig(this.margin)
this.margin.unitType == orig(this.margin.unitType)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
return.getClass().getName() == org.jfree.chart.block.BlockResult.class
===========================================================================
org.jfree.chart.title.TextTitle.drawHorizontal(java.awt.Graphics2D, java.awt.geom.Rectangle2D):::ENTER
g2.getClass().getName() == sun.java2d.SunGraphics2D.class
area.getClass().getName() == java.awt.geom.Rectangle2D$Double.class
===========================================================================
org.jfree.chart.title.TextTitle.drawHorizontal(java.awt.Graphics2D, java.awt.geom.Rectangle2D):::EXIT
org.jfree.chart.title.TextTitle.DEFAULT_FONT == orig(org.jfree.chart.title.TextTitle.DEFAULT_FONT)
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT == orig(org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT)
org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT.getClass().getName() == orig(org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT.getClass().getName())
this.text == orig(this.text)
this.text.toString == orig(this.text.toString)
this.font == orig(this.font)
this.textAlignment == orig(this.textAlignment)
org.jfree.chart.util.HorizontalAlignment.LEFT == orig(org.jfree.chart.util.HorizontalAlignment.LEFT)
org.jfree.chart.util.HorizontalAlignment.RIGHT == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT)
org.jfree.chart.util.HorizontalAlignment.CENTER == orig(org.jfree.chart.util.HorizontalAlignment.CENTER)
org.jfree.chart.util.HorizontalAlignment.LEFT.name == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name)
org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString)
org.jfree.chart.util.HorizontalAlignment.CENTER.name == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name)
org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString)
this.textAlignment.name == orig(this.textAlignment.name)
this.textAlignment.name.toString == orig(this.textAlignment.name.toString)
this.paint == orig(this.paint)
this.paint.getClass().getName() == orig(this.paint.getClass().getName())
this.backgroundPaint == orig(this.backgroundPaint)
this.toolTipText == orig(this.toolTipText)
this.urlText == orig(this.urlText)
this.content == orig(this.content)
this.content.lines == orig(this.content.lines)
this.content.lines[] == orig(this.content.lines[])
this.content.lines.getClass().getName() == orig(this.content.lines.getClass().getName())
this.content.lineAlignment == orig(this.content.lineAlignment)
this.content.lineAlignment.name == orig(this.content.lineAlignment.name)
this.content.lineAlignment.name.toString == orig(this.content.lineAlignment.name.toString)
this.expandToFitSpace == orig(this.expandToFitSpace)
org.jfree.chart.title.Title.DEFAULT_POSITION == orig(org.jfree.chart.title.Title.DEFAULT_POSITION)
org.jfree.chart.util.RectangleEdge.TOP == orig(org.jfree.chart.util.RectangleEdge.TOP)
org.jfree.chart.util.RectangleEdge.BOTTOM == orig(org.jfree.chart.util.RectangleEdge.BOTTOM)
org.jfree.chart.util.RectangleEdge.LEFT == orig(org.jfree.chart.util.RectangleEdge.LEFT)
org.jfree.chart.util.RectangleEdge.RIGHT == orig(org.jfree.chart.util.RectangleEdge.RIGHT)
org.jfree.chart.util.RectangleEdge.TOP.name == orig(org.jfree.chart.util.RectangleEdge.TOP.name)
org.jfree.chart.util.RectangleEdge.TOP.name.toString == orig(org.jfree.chart.util.RectangleEdge.TOP.name.toString)
org.jfree.chart.util.RectangleEdge.BOTTOM.name == orig(org.jfree.chart.util.RectangleEdge.BOTTOM.name)
org.jfree.chart.util.RectangleEdge.BOTTOM.name.toString == orig(org.jfree.chart.util.RectangleEdge.BOTTOM.name.toString)
org.jfree.chart.util.RectangleEdge.LEFT.name == orig(org.jfree.chart.util.RectangleEdge.LEFT.name)
org.jfree.chart.util.RectangleEdge.LEFT.name.toString == orig(org.jfree.chart.util.RectangleEdge.LEFT.name.toString)
org.jfree.chart.util.RectangleEdge.RIGHT.name == orig(org.jfree.chart.util.RectangleEdge.RIGHT.name)
org.jfree.chart.util.RectangleEdge.RIGHT.name.toString == orig(org.jfree.chart.util.RectangleEdge.RIGHT.name.toString)
org.jfree.chart.title.Title.DEFAULT_POSITION.name == orig(org.jfree.chart.title.Title.DEFAULT_POSITION.name)
org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT)
org.jfree.chart.util.VerticalAlignment.TOP == orig(org.jfree.chart.util.VerticalAlignment.TOP)
org.jfree.chart.util.VerticalAlignment.BOTTOM == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM)
org.jfree.chart.util.VerticalAlignment.CENTER == orig(org.jfree.chart.util.VerticalAlignment.CENTER)
org.jfree.chart.util.VerticalAlignment.TOP.name == orig(org.jfree.chart.util.VerticalAlignment.TOP.name)
org.jfree.chart.util.VerticalAlignment.TOP.name.toString == orig(org.jfree.chart.util.VerticalAlignment.TOP.name.toString)
org.jfree.chart.util.VerticalAlignment.BOTTOM.name == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM.name)
org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString)
org.jfree.chart.util.VerticalAlignment.CENTER.name == orig(org.jfree.chart.util.VerticalAlignment.CENTER.name)
org.jfree.chart.util.VerticalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.VerticalAlignment.CENTER.name.toString)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString)
org.jfree.chart.title.Title.DEFAULT_PADDING == orig(org.jfree.chart.title.Title.DEFAULT_PADDING)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name.toString)
org.jfree.chart.title.Title.DEFAULT_PADDING.top == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.top)
org.jfree.chart.title.Title.DEFAULT_PADDING.left == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.left)
org.jfree.chart.title.Title.DEFAULT_PADDING.bottom == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.bottom)
org.jfree.chart.title.Title.DEFAULT_PADDING.right == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.right)
this.position == orig(this.position)
this.position.name == orig(this.position.name)
this.position.name.toString == orig(this.position.name.toString)
this.horizontalAlignment == orig(this.horizontalAlignment)
this.horizontalAlignment.name == orig(this.horizontalAlignment.name)
this.horizontalAlignment.name.toString == orig(this.horizontalAlignment.name.toString)
this.verticalAlignment == orig(this.verticalAlignment)
this.verticalAlignment.name == orig(this.verticalAlignment.name)
this.verticalAlignment.name.toString == orig(this.verticalAlignment.name.toString)
this.listenerList == orig(this.listenerList)
this.notify == orig(this.notify)
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener == orig(org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener)
this.id == orig(this.id)
this.margin == orig(this.margin)
this.margin.unitType == orig(this.margin.unitType)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
===========================================================================
org.jfree.chart.title.Title:::CLASS
org.jfree.chart.title.Title.DEFAULT_POSITION has only one value
org.jfree.chart.title.Title.DEFAULT_POSITION != null
org.jfree.chart.util.RectangleEdge.TOP has only one value
org.jfree.chart.util.RectangleEdge.TOP != null
org.jfree.chart.util.RectangleEdge.BOTTOM has only one value
org.jfree.chart.util.RectangleEdge.BOTTOM != null
org.jfree.chart.util.RectangleEdge.LEFT has only one value
org.jfree.chart.util.RectangleEdge.LEFT != null
org.jfree.chart.util.RectangleEdge.RIGHT has only one value
org.jfree.chart.util.RectangleEdge.RIGHT != null
org.jfree.chart.util.RectangleEdge.TOP.name has only one value
org.jfree.chart.util.RectangleEdge.TOP.name != null
org.jfree.chart.util.RectangleEdge.TOP.name.toString == "RectangleEdge.TOP"
org.jfree.chart.util.RectangleEdge.BOTTOM.name has only one value
org.jfree.chart.util.RectangleEdge.BOTTOM.name != null
org.jfree.chart.util.RectangleEdge.BOTTOM.name.toString == "RectangleEdge.BOTTOM"
org.jfree.chart.util.RectangleEdge.LEFT.name has only one value
org.jfree.chart.util.RectangleEdge.LEFT.name != null
org.jfree.chart.util.RectangleEdge.LEFT.name.toString == "RectangleEdge.LEFT"
org.jfree.chart.util.RectangleEdge.RIGHT.name has only one value
org.jfree.chart.util.RectangleEdge.RIGHT.name != null
org.jfree.chart.util.RectangleEdge.RIGHT.name.toString == "RectangleEdge.RIGHT"
org.jfree.chart.title.Title.DEFAULT_POSITION.name has only one value
org.jfree.chart.title.Title.DEFAULT_POSITION.name != null
org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString == "RectangleEdge.TOP"
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT has only one value
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT != null
org.jfree.chart.util.HorizontalAlignment.LEFT has only one value
org.jfree.chart.util.HorizontalAlignment.LEFT != null
org.jfree.chart.util.HorizontalAlignment.RIGHT has only one value
org.jfree.chart.util.HorizontalAlignment.RIGHT != null
org.jfree.chart.util.HorizontalAlignment.CENTER has only one value
org.jfree.chart.util.HorizontalAlignment.CENTER != null
org.jfree.chart.util.HorizontalAlignment.LEFT.name has only one value
org.jfree.chart.util.HorizontalAlignment.LEFT.name != null
org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString == "HorizontalAlignment.LEFT"
org.jfree.chart.util.HorizontalAlignment.RIGHT.name has only one value
org.jfree.chart.util.HorizontalAlignment.RIGHT.name != null
org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString == "HorizontalAlignment.RIGHT"
org.jfree.chart.util.HorizontalAlignment.CENTER.name has only one value
org.jfree.chart.util.HorizontalAlignment.CENTER.name != null
org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString == "HorizontalAlignment.CENTER"
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name has only one value
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name != null
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString == "HorizontalAlignment.CENTER"
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT has only one value
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT != null
org.jfree.chart.util.VerticalAlignment.TOP has only one value
org.jfree.chart.util.VerticalAlignment.TOP != null
org.jfree.chart.util.VerticalAlignment.BOTTOM has only one value
org.jfree.chart.util.VerticalAlignment.BOTTOM != null
org.jfree.chart.util.VerticalAlignment.CENTER has only one value
org.jfree.chart.util.VerticalAlignment.CENTER != null
org.jfree.chart.util.VerticalAlignment.TOP.name has only one value
org.jfree.chart.util.VerticalAlignment.TOP.name != null
org.jfree.chart.util.VerticalAlignment.TOP.name.toString == "VerticalAlignment.TOP"
org.jfree.chart.util.VerticalAlignment.BOTTOM.name has only one value
org.jfree.chart.util.VerticalAlignment.BOTTOM.name != null
org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString == "VerticalAlignment.BOTTOM"
org.jfree.chart.util.VerticalAlignment.CENTER.name has only one value
org.jfree.chart.util.VerticalAlignment.CENTER.name != null
org.jfree.chart.util.VerticalAlignment.CENTER.name.toString == "VerticalAlignment.CENTER"
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name has only one value
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name != null
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString == "VerticalAlignment.CENTER"
org.jfree.chart.title.Title.DEFAULT_PADDING has only one value
org.jfree.chart.title.Title.DEFAULT_PADDING != null
org.jfree.chart.util.RectangleInsets.ZERO_INSETS has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS != null
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType != null
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == 0.0
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType has only one value
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType != null
org.jfree.chart.util.UnitType.ABSOLUTE has only one value
org.jfree.chart.util.UnitType.ABSOLUTE != null
org.jfree.chart.util.UnitType.RELATIVE has only one value
org.jfree.chart.util.UnitType.RELATIVE != null
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name has only one value
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name != null
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name.toString == "UnitType.ABSOLUTE"
org.jfree.chart.title.Title.DEFAULT_PADDING.top == 1.0
org.jfree.chart.title.Title.DEFAULT_PADDING.left == 1.0
org.jfree.chart.title.Title.DEFAULT_PADDING.bottom == 1.0
org.jfree.chart.title.Title.DEFAULT_PADDING.right == 1.0
===========================================================================
org.jfree.chart.title.Title:::OBJECT
this.position != null
this.position.name != null
this.position.name.toString one of { "RectangleEdge.BOTTOM", "RectangleEdge.TOP" }
this.horizontalAlignment has only one value
this.horizontalAlignment != null
this.horizontalAlignment.name has only one value
this.horizontalAlignment.name != null
this.horizontalAlignment.name.toString == "HorizontalAlignment.CENTER"
this.verticalAlignment has only one value
this.verticalAlignment != null
this.verticalAlignment.name has only one value
this.verticalAlignment.name != null
this.verticalAlignment.name.toString == "VerticalAlignment.CENTER"
this.listenerList != null
this.notify == true
this.id == null
this.margin != null
this.margin.unitType has only one value
this.margin.unitType != null
this.margin.unitType.name has only one value
this.margin.unitType.name != null
this.margin.unitType.name.toString == "UnitType.ABSOLUTE"
this.margin.top one of { 0.0, 1.0 }
this.margin.left one of { 0.0, 1.0 }
this.margin.bottom one of { 0.0, 1.0 }
this.margin.right one of { 0.0, 1.0 }
this.frame != null
this.padding has only one value
this.padding != null
this.padding.unitType has only one value
this.padding.unitType != null
this.padding.unitType.name has only one value
this.padding.unitType.name != null
this.padding.unitType.name.toString == "UnitType.ABSOLUTE"
this.padding.top == 1.0
this.padding.left == 1.0
this.padding.bottom == 1.0
this.padding.right == 1.0
this.width == 0.0
this.height == 0.0
this.bounds != null
this.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
===========================================================================
org.jfree.chart.title.Title.Title():::EXIT
this.position has only one value
this.position.name has only one value
this.position.name.toString == "RectangleEdge.TOP"
this.margin has only one value
this.margin.top == 0.0
this.margin.left == 0.0
this.margin.bottom == 0.0
this.margin.right == 0.0
this.frame has only one value
this.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class
===========================================================================
org.jfree.chart.title.Title.Title(org.jfree.chart.util.RectangleEdge, org.jfree.chart.util.HorizontalAlignment, org.jfree.chart.util.VerticalAlignment, org.jfree.chart.util.RectangleInsets):::ENTER
position has only one value
org.jfree.chart.util.RectangleEdge.TOP has only one value
org.jfree.chart.util.RectangleEdge.BOTTOM has only one value
org.jfree.chart.util.RectangleEdge.LEFT has only one value
org.jfree.chart.util.RectangleEdge.RIGHT has only one value
org.jfree.chart.util.RectangleEdge.TOP.name has only one value
org.jfree.chart.util.RectangleEdge.TOP.name.toString == "RectangleEdge.TOP"
org.jfree.chart.util.RectangleEdge.BOTTOM.name has only one value
org.jfree.chart.util.RectangleEdge.BOTTOM.name.toString == "RectangleEdge.BOTTOM"
org.jfree.chart.util.RectangleEdge.LEFT.name has only one value
org.jfree.chart.util.RectangleEdge.LEFT.name.toString == "RectangleEdge.LEFT"
org.jfree.chart.util.RectangleEdge.RIGHT.name has only one value
org.jfree.chart.util.RectangleEdge.RIGHT.name.toString == "RectangleEdge.RIGHT"
position.name has only one value
position.name.toString == "RectangleEdge.TOP"
horizontalAlignment has only one value
org.jfree.chart.util.HorizontalAlignment.LEFT has only one value
org.jfree.chart.util.HorizontalAlignment.RIGHT has only one value
org.jfree.chart.util.HorizontalAlignment.CENTER has only one value
org.jfree.chart.util.HorizontalAlignment.LEFT.name has only one value
org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString == "HorizontalAlignment.LEFT"
org.jfree.chart.util.HorizontalAlignment.RIGHT.name has only one value
org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString == "HorizontalAlignment.RIGHT"
org.jfree.chart.util.HorizontalAlignment.CENTER.name has only one value
org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString == "HorizontalAlignment.CENTER"
horizontalAlignment.name has only one value
horizontalAlignment.name.toString == "HorizontalAlignment.CENTER"
verticalAlignment has only one value
org.jfree.chart.util.VerticalAlignment.TOP has only one value
org.jfree.chart.util.VerticalAlignment.BOTTOM has only one value
org.jfree.chart.util.VerticalAlignment.CENTER has only one value
org.jfree.chart.util.VerticalAlignment.TOP.name has only one value
org.jfree.chart.util.VerticalAlignment.TOP.name.toString == "VerticalAlignment.TOP"
org.jfree.chart.util.VerticalAlignment.BOTTOM.name has only one value
org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString == "VerticalAlignment.BOTTOM"
org.jfree.chart.util.VerticalAlignment.CENTER.name has only one value
org.jfree.chart.util.VerticalAlignment.CENTER.name.toString == "VerticalAlignment.CENTER"
verticalAlignment.name has only one value
verticalAlignment.name.toString == "VerticalAlignment.CENTER"
padding has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == 0.0
padding.unitType has only one value
org.jfree.chart.util.UnitType.ABSOLUTE has only one value
org.jfree.chart.util.UnitType.RELATIVE has only one value
padding.unitType.name has only one value
padding.unitType.name.toString == "UnitType.ABSOLUTE"
padding.top == 1.0
padding.left == 1.0
padding.bottom == 1.0
padding.right == 1.0
===========================================================================
org.jfree.chart.title.Title.Title(org.jfree.chart.util.RectangleEdge, org.jfree.chart.util.HorizontalAlignment, org.jfree.chart.util.VerticalAlignment, org.jfree.chart.util.RectangleInsets):::EXIT
org.jfree.chart.util.RectangleEdge.TOP == orig(org.jfree.chart.util.RectangleEdge.TOP)
org.jfree.chart.util.RectangleEdge.BOTTOM == orig(org.jfree.chart.util.RectangleEdge.BOTTOM)
org.jfree.chart.util.RectangleEdge.LEFT == orig(org.jfree.chart.util.RectangleEdge.LEFT)
org.jfree.chart.util.RectangleEdge.RIGHT == orig(org.jfree.chart.util.RectangleEdge.RIGHT)
org.jfree.chart.util.RectangleEdge.TOP.name == orig(org.jfree.chart.util.RectangleEdge.TOP.name)
org.jfree.chart.util.RectangleEdge.TOP.name.toString == orig(org.jfree.chart.util.RectangleEdge.TOP.name.toString)
org.jfree.chart.util.RectangleEdge.BOTTOM.name == orig(org.jfree.chart.util.RectangleEdge.BOTTOM.name)
org.jfree.chart.util.RectangleEdge.BOTTOM.name.toString == orig(org.jfree.chart.util.RectangleEdge.BOTTOM.name.toString)
org.jfree.chart.util.RectangleEdge.LEFT.name == orig(org.jfree.chart.util.RectangleEdge.LEFT.name)
org.jfree.chart.util.RectangleEdge.LEFT.name.toString == orig(org.jfree.chart.util.RectangleEdge.LEFT.name.toString)
org.jfree.chart.util.RectangleEdge.RIGHT.name == orig(org.jfree.chart.util.RectangleEdge.RIGHT.name)
org.jfree.chart.util.RectangleEdge.RIGHT.name.toString == orig(org.jfree.chart.util.RectangleEdge.RIGHT.name.toString)
org.jfree.chart.util.HorizontalAlignment.LEFT == orig(org.jfree.chart.util.HorizontalAlignment.LEFT)
org.jfree.chart.util.HorizontalAlignment.RIGHT == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT)
org.jfree.chart.util.HorizontalAlignment.CENTER == orig(org.jfree.chart.util.HorizontalAlignment.CENTER)
org.jfree.chart.util.HorizontalAlignment.LEFT.name == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name)
org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString)
org.jfree.chart.util.HorizontalAlignment.CENTER.name == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name)
org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString)
org.jfree.chart.util.VerticalAlignment.TOP == orig(org.jfree.chart.util.VerticalAlignment.TOP)
org.jfree.chart.util.VerticalAlignment.BOTTOM == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM)
org.jfree.chart.util.VerticalAlignment.CENTER == orig(org.jfree.chart.util.VerticalAlignment.CENTER)
org.jfree.chart.util.VerticalAlignment.TOP.name == orig(org.jfree.chart.util.VerticalAlignment.TOP.name)
org.jfree.chart.util.VerticalAlignment.TOP.name.toString == orig(org.jfree.chart.util.VerticalAlignment.TOP.name.toString)
org.jfree.chart.util.VerticalAlignment.BOTTOM.name == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM.name)
org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString)
org.jfree.chart.util.VerticalAlignment.CENTER.name == orig(org.jfree.chart.util.VerticalAlignment.CENTER.name)
org.jfree.chart.util.VerticalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.VerticalAlignment.CENTER.name.toString)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
position.name == orig(position.name)
position.name.toString == orig(position.name.toString)
horizontalAlignment.name == orig(horizontalAlignment.name)
horizontalAlignment.name.toString == orig(horizontalAlignment.name.toString)
verticalAlignment.name == orig(verticalAlignment.name)
verticalAlignment.name.toString == orig(verticalAlignment.name.toString)
padding.unitType == orig(padding.unitType)
padding.unitType.name == orig(padding.unitType.name)
padding.unitType.name.toString == orig(padding.unitType.name.toString)
padding.top == orig(padding.top)
padding.left == orig(padding.left)
padding.bottom == orig(padding.bottom)
padding.right == orig(padding.right)
this.position has only one value
this.position.name has only one value
this.position.name.toString == "RectangleEdge.TOP"
this.margin has only one value
this.margin.top == 0.0
this.margin.left == 0.0
this.margin.bottom == 0.0
this.margin.right == 0.0
this.frame has only one value
this.frame.getClass().getName() == org.jfree.chart.block.BlockBorder.class
position.name has only one value
position.name.toString == "RectangleEdge.TOP"
horizontalAlignment.name has only one value
horizontalAlignment.name.toString == "HorizontalAlignment.CENTER"
verticalAlignment.name has only one value
verticalAlignment.name.toString == "VerticalAlignment.CENTER"
padding.unitType has only one value
padding.unitType.name has only one value
padding.unitType.name.toString == "UnitType.ABSOLUTE"
padding.top == 1.0
padding.left == 1.0
padding.bottom == 1.0
padding.right == 1.0
===========================================================================
org.jfree.chart.title.Title.addChangeListener(org.jfree.chart.event.TitleChangeListener):::ENTER
listener.getClass().getName() == org.jfree.chart.JFreeChart.class
===========================================================================
org.jfree.chart.title.Title.addChangeListener(org.jfree.chart.event.TitleChangeListener):::EXIT
org.jfree.chart.title.Title.DEFAULT_POSITION == orig(org.jfree.chart.title.Title.DEFAULT_POSITION)
org.jfree.chart.util.RectangleEdge.TOP == orig(org.jfree.chart.util.RectangleEdge.TOP)
org.jfree.chart.util.RectangleEdge.BOTTOM == orig(org.jfree.chart.util.RectangleEdge.BOTTOM)
org.jfree.chart.util.RectangleEdge.LEFT == orig(org.jfree.chart.util.RectangleEdge.LEFT)
org.jfree.chart.util.RectangleEdge.RIGHT == orig(org.jfree.chart.util.RectangleEdge.RIGHT)
org.jfree.chart.util.RectangleEdge.TOP.name == orig(org.jfree.chart.util.RectangleEdge.TOP.name)
org.jfree.chart.util.RectangleEdge.TOP.name.toString == orig(org.jfree.chart.util.RectangleEdge.TOP.name.toString)
org.jfree.chart.util.RectangleEdge.BOTTOM.name == orig(org.jfree.chart.util.RectangleEdge.BOTTOM.name)
org.jfree.chart.util.RectangleEdge.BOTTOM.name.toString == orig(org.jfree.chart.util.RectangleEdge.BOTTOM.name.toString)
org.jfree.chart.util.RectangleEdge.LEFT.name == orig(org.jfree.chart.util.RectangleEdge.LEFT.name)
org.jfree.chart.util.RectangleEdge.LEFT.name.toString == orig(org.jfree.chart.util.RectangleEdge.LEFT.name.toString)
org.jfree.chart.util.RectangleEdge.RIGHT.name == orig(org.jfree.chart.util.RectangleEdge.RIGHT.name)
org.jfree.chart.util.RectangleEdge.RIGHT.name.toString == orig(org.jfree.chart.util.RectangleEdge.RIGHT.name.toString)
org.jfree.chart.title.Title.DEFAULT_POSITION.name == orig(org.jfree.chart.title.Title.DEFAULT_POSITION.name)
org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT)
org.jfree.chart.util.HorizontalAlignment.LEFT == orig(org.jfree.chart.util.HorizontalAlignment.LEFT)
org.jfree.chart.util.HorizontalAlignment.RIGHT == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT)
org.jfree.chart.util.HorizontalAlignment.CENTER == orig(org.jfree.chart.util.HorizontalAlignment.CENTER)
org.jfree.chart.util.HorizontalAlignment.LEFT.name == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name)
org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString)
org.jfree.chart.util.HorizontalAlignment.CENTER.name == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name)
org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT)
org.jfree.chart.util.VerticalAlignment.TOP == orig(org.jfree.chart.util.VerticalAlignment.TOP)
org.jfree.chart.util.VerticalAlignment.BOTTOM == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM)
org.jfree.chart.util.VerticalAlignment.CENTER == orig(org.jfree.chart.util.VerticalAlignment.CENTER)
org.jfree.chart.util.VerticalAlignment.TOP.name == orig(org.jfree.chart.util.VerticalAlignment.TOP.name)
org.jfree.chart.util.VerticalAlignment.TOP.name.toString == orig(org.jfree.chart.util.VerticalAlignment.TOP.name.toString)
org.jfree.chart.util.VerticalAlignment.BOTTOM.name == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM.name)
org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString)
org.jfree.chart.util.VerticalAlignment.CENTER.name == orig(org.jfree.chart.util.VerticalAlignment.CENTER.name)
org.jfree.chart.util.VerticalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.VerticalAlignment.CENTER.name.toString)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString)
org.jfree.chart.title.Title.DEFAULT_PADDING == orig(org.jfree.chart.title.Title.DEFAULT_PADDING)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name.toString)
org.jfree.chart.title.Title.DEFAULT_PADDING.top == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.top)
org.jfree.chart.title.Title.DEFAULT_PADDING.left == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.left)
org.jfree.chart.title.Title.DEFAULT_PADDING.bottom == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.bottom)
org.jfree.chart.title.Title.DEFAULT_PADDING.right == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.right)
this.position == orig(this.position)
this.position.name == orig(this.position.name)
this.position.name.toString == orig(this.position.name.toString)
this.horizontalAlignment == orig(this.horizontalAlignment)
this.horizontalAlignment.name == orig(this.horizontalAlignment.name)
this.horizontalAlignment.name.toString == orig(this.horizontalAlignment.name.toString)
this.verticalAlignment == orig(this.verticalAlignment)
this.verticalAlignment.name == orig(this.verticalAlignment.name)
this.verticalAlignment.name.toString == orig(this.verticalAlignment.name.toString)
this.listenerList == orig(this.listenerList)
this.notify == orig(this.notify)
this.id == orig(this.id)
this.margin == orig(this.margin)
this.margin.unitType == orig(this.margin.unitType)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener has only one value
===========================================================================
org.jfree.chart.title.Title.class$(java.lang.String):::ENTER
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener == null
x0 has only one value
x0.toString == "org.jfree.chart.event.TitleChangeListener"
===========================================================================
org.jfree.chart.title.Title.class$(java.lang.String):::EXIT
org.jfree.chart.title.Title.DEFAULT_POSITION == orig(org.jfree.chart.title.Title.DEFAULT_POSITION)
org.jfree.chart.util.RectangleEdge.TOP == orig(org.jfree.chart.util.RectangleEdge.TOP)
org.jfree.chart.util.RectangleEdge.BOTTOM == orig(org.jfree.chart.util.RectangleEdge.BOTTOM)
org.jfree.chart.util.RectangleEdge.LEFT == orig(org.jfree.chart.util.RectangleEdge.LEFT)
org.jfree.chart.util.RectangleEdge.RIGHT == orig(org.jfree.chart.util.RectangleEdge.RIGHT)
org.jfree.chart.util.RectangleEdge.TOP.name == orig(org.jfree.chart.util.RectangleEdge.TOP.name)
org.jfree.chart.util.RectangleEdge.TOP.name.toString == orig(org.jfree.chart.util.RectangleEdge.TOP.name.toString)
org.jfree.chart.util.RectangleEdge.BOTTOM.name == orig(org.jfree.chart.util.RectangleEdge.BOTTOM.name)
org.jfree.chart.util.RectangleEdge.BOTTOM.name.toString == orig(org.jfree.chart.util.RectangleEdge.BOTTOM.name.toString)
org.jfree.chart.util.RectangleEdge.LEFT.name == orig(org.jfree.chart.util.RectangleEdge.LEFT.name)
org.jfree.chart.util.RectangleEdge.LEFT.name.toString == orig(org.jfree.chart.util.RectangleEdge.LEFT.name.toString)
org.jfree.chart.util.RectangleEdge.RIGHT.name == orig(org.jfree.chart.util.RectangleEdge.RIGHT.name)
org.jfree.chart.util.RectangleEdge.RIGHT.name.toString == orig(org.jfree.chart.util.RectangleEdge.RIGHT.name.toString)
org.jfree.chart.title.Title.DEFAULT_POSITION.name == orig(org.jfree.chart.title.Title.DEFAULT_POSITION.name)
org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT)
org.jfree.chart.util.HorizontalAlignment.LEFT == orig(org.jfree.chart.util.HorizontalAlignment.LEFT)
org.jfree.chart.util.HorizontalAlignment.RIGHT == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT)
org.jfree.chart.util.HorizontalAlignment.CENTER == orig(org.jfree.chart.util.HorizontalAlignment.CENTER)
org.jfree.chart.util.HorizontalAlignment.LEFT.name == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name)
org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString)
org.jfree.chart.util.HorizontalAlignment.CENTER.name == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name)
org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT)
org.jfree.chart.util.VerticalAlignment.TOP == orig(org.jfree.chart.util.VerticalAlignment.TOP)
org.jfree.chart.util.VerticalAlignment.BOTTOM == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM)
org.jfree.chart.util.VerticalAlignment.CENTER == orig(org.jfree.chart.util.VerticalAlignment.CENTER)
org.jfree.chart.util.VerticalAlignment.TOP.name == orig(org.jfree.chart.util.VerticalAlignment.TOP.name)
org.jfree.chart.util.VerticalAlignment.TOP.name.toString == orig(org.jfree.chart.util.VerticalAlignment.TOP.name.toString)
org.jfree.chart.util.VerticalAlignment.BOTTOM.name == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM.name)
org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString)
org.jfree.chart.util.VerticalAlignment.CENTER.name == orig(org.jfree.chart.util.VerticalAlignment.CENTER.name)
org.jfree.chart.util.VerticalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.VerticalAlignment.CENTER.name.toString)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString)
org.jfree.chart.title.Title.DEFAULT_PADDING == orig(org.jfree.chart.title.Title.DEFAULT_PADDING)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name.toString)
org.jfree.chart.title.Title.DEFAULT_PADDING.top == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.top)
org.jfree.chart.title.Title.DEFAULT_PADDING.left == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.left)
org.jfree.chart.title.Title.DEFAULT_PADDING.bottom == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.bottom)
org.jfree.chart.title.Title.DEFAULT_PADDING.right == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.right)
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener == orig(org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener)
x0.toString == orig(x0.toString)
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener == null
x0.toString == "org.jfree.chart.event.TitleChangeListener"
return has only one value
===========================================================================
org.jfree.chart.title.Title.getHorizontalAlignment():::ENTER
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener has only one value
===========================================================================
org.jfree.chart.title.Title.getHorizontalAlignment():::EXIT
org.jfree.chart.title.Title.DEFAULT_POSITION == orig(org.jfree.chart.title.Title.DEFAULT_POSITION)
org.jfree.chart.util.RectangleEdge.TOP == orig(org.jfree.chart.util.RectangleEdge.TOP)
org.jfree.chart.util.RectangleEdge.BOTTOM == orig(org.jfree.chart.util.RectangleEdge.BOTTOM)
org.jfree.chart.util.RectangleEdge.LEFT == orig(org.jfree.chart.util.RectangleEdge.LEFT)
org.jfree.chart.util.RectangleEdge.RIGHT == orig(org.jfree.chart.util.RectangleEdge.RIGHT)
org.jfree.chart.util.RectangleEdge.TOP.name == orig(org.jfree.chart.util.RectangleEdge.TOP.name)
org.jfree.chart.util.RectangleEdge.TOP.name.toString == orig(org.jfree.chart.util.RectangleEdge.TOP.name.toString)
org.jfree.chart.util.RectangleEdge.BOTTOM.name == orig(org.jfree.chart.util.RectangleEdge.BOTTOM.name)
org.jfree.chart.util.RectangleEdge.BOTTOM.name.toString == orig(org.jfree.chart.util.RectangleEdge.BOTTOM.name.toString)
org.jfree.chart.util.RectangleEdge.LEFT.name == orig(org.jfree.chart.util.RectangleEdge.LEFT.name)
org.jfree.chart.util.RectangleEdge.LEFT.name.toString == orig(org.jfree.chart.util.RectangleEdge.LEFT.name.toString)
org.jfree.chart.util.RectangleEdge.RIGHT.name == orig(org.jfree.chart.util.RectangleEdge.RIGHT.name)
org.jfree.chart.util.RectangleEdge.RIGHT.name.toString == orig(org.jfree.chart.util.RectangleEdge.RIGHT.name.toString)
org.jfree.chart.title.Title.DEFAULT_POSITION.name == orig(org.jfree.chart.title.Title.DEFAULT_POSITION.name)
org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT)
org.jfree.chart.util.HorizontalAlignment.LEFT == orig(org.jfree.chart.util.HorizontalAlignment.LEFT)
org.jfree.chart.util.HorizontalAlignment.RIGHT == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT)
org.jfree.chart.util.HorizontalAlignment.CENTER == orig(org.jfree.chart.util.HorizontalAlignment.CENTER)
org.jfree.chart.util.HorizontalAlignment.LEFT.name == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name)
org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString)
org.jfree.chart.util.HorizontalAlignment.CENTER.name == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name)
org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT)
org.jfree.chart.util.VerticalAlignment.TOP == orig(org.jfree.chart.util.VerticalAlignment.TOP)
org.jfree.chart.util.VerticalAlignment.BOTTOM == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM)
org.jfree.chart.util.VerticalAlignment.CENTER == orig(org.jfree.chart.util.VerticalAlignment.CENTER)
org.jfree.chart.util.VerticalAlignment.TOP.name == orig(org.jfree.chart.util.VerticalAlignment.TOP.name)
org.jfree.chart.util.VerticalAlignment.TOP.name.toString == orig(org.jfree.chart.util.VerticalAlignment.TOP.name.toString)
org.jfree.chart.util.VerticalAlignment.BOTTOM.name == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM.name)
org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString)
org.jfree.chart.util.VerticalAlignment.CENTER.name == orig(org.jfree.chart.util.VerticalAlignment.CENTER.name)
org.jfree.chart.util.VerticalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.VerticalAlignment.CENTER.name.toString)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString)
org.jfree.chart.title.Title.DEFAULT_PADDING == orig(org.jfree.chart.title.Title.DEFAULT_PADDING)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name.toString)
org.jfree.chart.title.Title.DEFAULT_PADDING.top == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.top)
org.jfree.chart.title.Title.DEFAULT_PADDING.left == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.left)
org.jfree.chart.title.Title.DEFAULT_PADDING.bottom == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.bottom)
org.jfree.chart.title.Title.DEFAULT_PADDING.right == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.right)
this.position == orig(this.position)
this.position.name == orig(this.position.name)
this.position.name.toString == orig(this.position.name.toString)
this.horizontalAlignment == orig(this.horizontalAlignment)
this.horizontalAlignment.name == orig(this.horizontalAlignment.name)
this.horizontalAlignment.name.toString == orig(this.horizontalAlignment.name.toString)
this.verticalAlignment == orig(this.verticalAlignment)
this.verticalAlignment.name == orig(this.verticalAlignment.name)
this.verticalAlignment.name.toString == orig(this.verticalAlignment.name.toString)
this.listenerList == orig(this.listenerList)
this.notify == orig(this.notify)
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener == orig(org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener)
this.id == orig(this.id)
this.margin == orig(this.margin)
this.margin.unitType == orig(this.margin.unitType)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener has only one value
return has only one value
return.name has only one value
return.name.toString == "HorizontalAlignment.CENTER"
===========================================================================
org.jfree.chart.title.Title.getPosition():::ENTER
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener has only one value
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener != null
===========================================================================
org.jfree.chart.title.Title.getPosition():::EXIT
org.jfree.chart.title.Title.DEFAULT_POSITION == orig(org.jfree.chart.title.Title.DEFAULT_POSITION)
org.jfree.chart.util.RectangleEdge.TOP == orig(org.jfree.chart.util.RectangleEdge.TOP)
org.jfree.chart.util.RectangleEdge.BOTTOM == orig(org.jfree.chart.util.RectangleEdge.BOTTOM)
org.jfree.chart.util.RectangleEdge.LEFT == orig(org.jfree.chart.util.RectangleEdge.LEFT)
org.jfree.chart.util.RectangleEdge.RIGHT == orig(org.jfree.chart.util.RectangleEdge.RIGHT)
org.jfree.chart.util.RectangleEdge.TOP.name == orig(org.jfree.chart.util.RectangleEdge.TOP.name)
org.jfree.chart.util.RectangleEdge.TOP.name.toString == orig(org.jfree.chart.util.RectangleEdge.TOP.name.toString)
org.jfree.chart.util.RectangleEdge.BOTTOM.name == orig(org.jfree.chart.util.RectangleEdge.BOTTOM.name)
org.jfree.chart.util.RectangleEdge.BOTTOM.name.toString == orig(org.jfree.chart.util.RectangleEdge.BOTTOM.name.toString)
org.jfree.chart.util.RectangleEdge.LEFT.name == orig(org.jfree.chart.util.RectangleEdge.LEFT.name)
org.jfree.chart.util.RectangleEdge.LEFT.name.toString == orig(org.jfree.chart.util.RectangleEdge.LEFT.name.toString)
org.jfree.chart.util.RectangleEdge.RIGHT.name == orig(org.jfree.chart.util.RectangleEdge.RIGHT.name)
org.jfree.chart.util.RectangleEdge.RIGHT.name.toString == orig(org.jfree.chart.util.RectangleEdge.RIGHT.name.toString)
org.jfree.chart.title.Title.DEFAULT_POSITION.name == orig(org.jfree.chart.title.Title.DEFAULT_POSITION.name)
org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT)
org.jfree.chart.util.HorizontalAlignment.LEFT == orig(org.jfree.chart.util.HorizontalAlignment.LEFT)
org.jfree.chart.util.HorizontalAlignment.RIGHT == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT)
org.jfree.chart.util.HorizontalAlignment.CENTER == orig(org.jfree.chart.util.HorizontalAlignment.CENTER)
org.jfree.chart.util.HorizontalAlignment.LEFT.name == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name)
org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString)
org.jfree.chart.util.HorizontalAlignment.CENTER.name == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name)
org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT)
org.jfree.chart.util.VerticalAlignment.TOP == orig(org.jfree.chart.util.VerticalAlignment.TOP)
org.jfree.chart.util.VerticalAlignment.BOTTOM == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM)
org.jfree.chart.util.VerticalAlignment.CENTER == orig(org.jfree.chart.util.VerticalAlignment.CENTER)
org.jfree.chart.util.VerticalAlignment.TOP.name == orig(org.jfree.chart.util.VerticalAlignment.TOP.name)
org.jfree.chart.util.VerticalAlignment.TOP.name.toString == orig(org.jfree.chart.util.VerticalAlignment.TOP.name.toString)
org.jfree.chart.util.VerticalAlignment.BOTTOM.name == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM.name)
org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString)
org.jfree.chart.util.VerticalAlignment.CENTER.name == orig(org.jfree.chart.util.VerticalAlignment.CENTER.name)
org.jfree.chart.util.VerticalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.VerticalAlignment.CENTER.name.toString)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString)
org.jfree.chart.title.Title.DEFAULT_PADDING == orig(org.jfree.chart.title.Title.DEFAULT_PADDING)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name.toString)
org.jfree.chart.title.Title.DEFAULT_PADDING.top == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.top)
org.jfree.chart.title.Title.DEFAULT_PADDING.left == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.left)
org.jfree.chart.title.Title.DEFAULT_PADDING.bottom == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.bottom)
org.jfree.chart.title.Title.DEFAULT_PADDING.right == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.right)
this.position == orig(this.position)
this.position.name == orig(this.position.name)
this.position.name.toString == orig(this.position.name.toString)
this.horizontalAlignment == orig(this.horizontalAlignment)
this.horizontalAlignment.name == orig(this.horizontalAlignment.name)
this.horizontalAlignment.name.toString == orig(this.horizontalAlignment.name.toString)
this.verticalAlignment == orig(this.verticalAlignment)
this.verticalAlignment.name == orig(this.verticalAlignment.name)
this.verticalAlignment.name.toString == orig(this.verticalAlignment.name.toString)
this.listenerList == orig(this.listenerList)
this.notify == orig(this.notify)
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener == orig(org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener)
this.id == orig(this.id)
this.margin == orig(this.margin)
this.margin.unitType == orig(this.margin.unitType)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener has only one value
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener != null
return != null
return.name != null
return.name.toString one of { "RectangleEdge.BOTTOM", "RectangleEdge.TOP" }
===========================================================================
org.jfree.chart.title.Title.notifyListeners(org.jfree.chart.event.TitleChangeEvent):::ENTER
this.getClass().getName() == org.jfree.chart.title.LegendTitle.class
this.margin.top == 1.0
this.margin.left == 1.0
this.margin.bottom == 1.0
this.margin.right == 1.0
this.frame.getClass().getName() == org.jfree.chart.block.LineBorder.class
event.title.getClass().getName() == org.jfree.chart.title.LegendTitle.class
event.title.horizontalAlignment has only one value
event.title.verticalAlignment has only one value
event.title.notify == true
event.title.id == null
event.title.frame.getClass().getName() == org.jfree.chart.block.LineBorder.class
event.title.padding has only one value
event.title.width == 0.0
event.title.height == 0.0
event.title.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
event.type has only one value
org.jfree.chart.event.ChartChangeEventType.GENERAL has only one value
org.jfree.chart.event.ChartChangeEventType.NEW_DATASET has only one value
org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED has only one value
event.type.name has only one value
event.type.name.toString == "ChartChangeEventType.GENERAL"
event.chart == null
org.jfree.chart.JFreeChart.INFO has only one value
org.jfree.chart.JFreeChart.DEFAULT_TITLE_FONT has only one value
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT has only one value
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName() == java.awt.Color.class
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_IMAGE == null
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartChangeListener == null
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartProgressListener == null
===========================================================================
org.jfree.chart.title.Title.notifyListeners(org.jfree.chart.event.TitleChangeEvent):::EXIT
org.jfree.chart.title.Title.DEFAULT_POSITION == orig(org.jfree.chart.title.Title.DEFAULT_POSITION)
org.jfree.chart.util.RectangleEdge.TOP == orig(org.jfree.chart.util.RectangleEdge.TOP)
org.jfree.chart.util.RectangleEdge.BOTTOM == orig(org.jfree.chart.util.RectangleEdge.BOTTOM)
org.jfree.chart.util.RectangleEdge.LEFT == orig(org.jfree.chart.util.RectangleEdge.LEFT)
org.jfree.chart.util.RectangleEdge.RIGHT == orig(org.jfree.chart.util.RectangleEdge.RIGHT)
org.jfree.chart.util.RectangleEdge.TOP.name == orig(org.jfree.chart.util.RectangleEdge.TOP.name)
org.jfree.chart.util.RectangleEdge.TOP.name.toString == orig(org.jfree.chart.util.RectangleEdge.TOP.name.toString)
org.jfree.chart.util.RectangleEdge.BOTTOM.name == orig(org.jfree.chart.util.RectangleEdge.BOTTOM.name)
org.jfree.chart.util.RectangleEdge.BOTTOM.name.toString == orig(org.jfree.chart.util.RectangleEdge.BOTTOM.name.toString)
org.jfree.chart.util.RectangleEdge.LEFT.name == orig(org.jfree.chart.util.RectangleEdge.LEFT.name)
org.jfree.chart.util.RectangleEdge.LEFT.name.toString == orig(org.jfree.chart.util.RectangleEdge.LEFT.name.toString)
org.jfree.chart.util.RectangleEdge.RIGHT.name == orig(org.jfree.chart.util.RectangleEdge.RIGHT.name)
org.jfree.chart.util.RectangleEdge.RIGHT.name.toString == orig(org.jfree.chart.util.RectangleEdge.RIGHT.name.toString)
org.jfree.chart.title.Title.DEFAULT_POSITION.name == orig(org.jfree.chart.title.Title.DEFAULT_POSITION.name)
org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT)
org.jfree.chart.util.HorizontalAlignment.LEFT == orig(org.jfree.chart.util.HorizontalAlignment.LEFT)
org.jfree.chart.util.HorizontalAlignment.RIGHT == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT)
org.jfree.chart.util.HorizontalAlignment.CENTER == orig(org.jfree.chart.util.HorizontalAlignment.CENTER)
org.jfree.chart.util.HorizontalAlignment.LEFT.name == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name)
org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString)
org.jfree.chart.util.HorizontalAlignment.CENTER.name == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name)
org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT)
org.jfree.chart.util.VerticalAlignment.TOP == orig(org.jfree.chart.util.VerticalAlignment.TOP)
org.jfree.chart.util.VerticalAlignment.BOTTOM == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM)
org.jfree.chart.util.VerticalAlignment.CENTER == orig(org.jfree.chart.util.VerticalAlignment.CENTER)
org.jfree.chart.util.VerticalAlignment.TOP.name == orig(org.jfree.chart.util.VerticalAlignment.TOP.name)
org.jfree.chart.util.VerticalAlignment.TOP.name.toString == orig(org.jfree.chart.util.VerticalAlignment.TOP.name.toString)
org.jfree.chart.util.VerticalAlignment.BOTTOM.name == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM.name)
org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString)
org.jfree.chart.util.VerticalAlignment.CENTER.name == orig(org.jfree.chart.util.VerticalAlignment.CENTER.name)
org.jfree.chart.util.VerticalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.VerticalAlignment.CENTER.name.toString)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString)
org.jfree.chart.title.Title.DEFAULT_PADDING == orig(org.jfree.chart.title.Title.DEFAULT_PADDING)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name.toString)
org.jfree.chart.title.Title.DEFAULT_PADDING.top == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.top)
org.jfree.chart.title.Title.DEFAULT_PADDING.left == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.left)
org.jfree.chart.title.Title.DEFAULT_PADDING.bottom == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.bottom)
org.jfree.chart.title.Title.DEFAULT_PADDING.right == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.right)
this.position == orig(this.position)
this.position.name == orig(this.position.name)
this.position.name.toString == orig(this.position.name.toString)
this.horizontalAlignment == orig(this.horizontalAlignment)
this.horizontalAlignment.name == orig(this.horizontalAlignment.name)
this.horizontalAlignment.name.toString == orig(this.horizontalAlignment.name.toString)
this.verticalAlignment == orig(this.verticalAlignment)
this.verticalAlignment.name == orig(this.verticalAlignment.name)
this.verticalAlignment.name.toString == orig(this.verticalAlignment.name.toString)
this.listenerList == orig(this.listenerList)
this.notify == orig(this.notify)
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener == orig(org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener)
this.id == orig(this.id)
this.margin == orig(this.margin)
this.margin.unitType == orig(this.margin.unitType)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
event.title == orig(event.title)
event.title.getClass().getName() == orig(event.title.getClass().getName())
event.title.position == orig(event.title.position)
event.title.horizontalAlignment == orig(event.title.horizontalAlignment)
event.title.verticalAlignment == orig(event.title.verticalAlignment)
event.title.listenerList == orig(event.title.listenerList)
event.title.notify == orig(event.title.notify)
event.title.id == orig(event.title.id)
event.title.margin == orig(event.title.margin)
event.title.frame == orig(event.title.frame)
event.title.frame.getClass().getName() == orig(event.title.frame.getClass().getName())
event.title.padding == orig(event.title.padding)
event.title.width == orig(event.title.width)
event.title.height == orig(event.title.height)
event.title.bounds == orig(event.title.bounds)
event.title.bounds.getClass().getName() == orig(event.title.bounds.getClass().getName())
event.type == orig(event.type)
org.jfree.chart.event.ChartChangeEventType.GENERAL == orig(org.jfree.chart.event.ChartChangeEventType.GENERAL)
org.jfree.chart.event.ChartChangeEventType.NEW_DATASET == orig(org.jfree.chart.event.ChartChangeEventType.NEW_DATASET)
org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED == orig(org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED)
event.type.name == orig(event.type.name)
event.type.name.toString == orig(event.type.name.toString)
event.chart == orig(event.chart)
org.jfree.chart.JFreeChart.INFO == orig(org.jfree.chart.JFreeChart.INFO)
org.jfree.chart.JFreeChart.DEFAULT_TITLE_FONT == orig(org.jfree.chart.JFreeChart.DEFAULT_TITLE_FONT)
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT == orig(org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT)
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName() == orig(org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName())
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_IMAGE == orig(org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_IMAGE)
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartChangeListener == orig(org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartChangeListener)
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartProgressListener == orig(org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartProgressListener)
this.margin.top == 1.0
this.margin.left == 1.0
this.margin.bottom == 1.0
this.margin.right == 1.0
this.frame.getClass().getName() == org.jfree.chart.block.LineBorder.class
event.title.getClass().getName() == org.jfree.chart.title.LegendTitle.class
event.title.horizontalAlignment has only one value
event.title.verticalAlignment has only one value
event.title.notify == true
event.title.id == null
event.title.frame.getClass().getName() == org.jfree.chart.block.LineBorder.class
event.title.padding has only one value
event.title.width == 0.0
event.title.height == 0.0
event.title.bounds.getClass().getName() == java.awt.geom.Rectangle2D$Float.class
event.type has only one value
org.jfree.chart.event.ChartChangeEventType.GENERAL has only one value
org.jfree.chart.event.ChartChangeEventType.NEW_DATASET has only one value
org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED has only one value
event.type.name has only one value
event.type.name.toString == "ChartChangeEventType.GENERAL"
event.chart == null
org.jfree.chart.JFreeChart.INFO has only one value
org.jfree.chart.JFreeChart.DEFAULT_TITLE_FONT has only one value
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT has only one value
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT.getClass().getName() == java.awt.Color.class
org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_IMAGE == null
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartChangeListener == null
org.jfree.chart.JFreeChart.class$org$jfree$chart$event$ChartProgressListener == null
===========================================================================
org.jfree.chart.title.Title.setPosition(org.jfree.chart.util.RectangleEdge):::ENTER
this.getClass().getName() == org.jfree.chart.title.LegendTitle.class
this.position has only one value
this.position.name has only one value
this.position.name.toString == "RectangleEdge.TOP"
this.margin.top == 1.0
this.margin.left == 1.0
this.margin.bottom == 1.0
this.margin.right == 1.0
this.frame.getClass().getName() == org.jfree.chart.block.LineBorder.class
position has only one value
position.name has only one value
position.name.toString == "RectangleEdge.BOTTOM"
===========================================================================
org.jfree.chart.title.Title.setPosition(org.jfree.chart.util.RectangleEdge):::EXIT
org.jfree.chart.title.Title.DEFAULT_POSITION == orig(org.jfree.chart.title.Title.DEFAULT_POSITION)
org.jfree.chart.util.RectangleEdge.TOP == orig(org.jfree.chart.util.RectangleEdge.TOP)
org.jfree.chart.util.RectangleEdge.BOTTOM == orig(org.jfree.chart.util.RectangleEdge.BOTTOM)
org.jfree.chart.util.RectangleEdge.LEFT == orig(org.jfree.chart.util.RectangleEdge.LEFT)
org.jfree.chart.util.RectangleEdge.RIGHT == orig(org.jfree.chart.util.RectangleEdge.RIGHT)
org.jfree.chart.util.RectangleEdge.TOP.name == orig(org.jfree.chart.util.RectangleEdge.TOP.name)
org.jfree.chart.util.RectangleEdge.TOP.name.toString == orig(org.jfree.chart.util.RectangleEdge.TOP.name.toString)
org.jfree.chart.util.RectangleEdge.BOTTOM.name == orig(org.jfree.chart.util.RectangleEdge.BOTTOM.name)
org.jfree.chart.util.RectangleEdge.BOTTOM.name.toString == orig(org.jfree.chart.util.RectangleEdge.BOTTOM.name.toString)
org.jfree.chart.util.RectangleEdge.LEFT.name == orig(org.jfree.chart.util.RectangleEdge.LEFT.name)
org.jfree.chart.util.RectangleEdge.LEFT.name.toString == orig(org.jfree.chart.util.RectangleEdge.LEFT.name.toString)
org.jfree.chart.util.RectangleEdge.RIGHT.name == orig(org.jfree.chart.util.RectangleEdge.RIGHT.name)
org.jfree.chart.util.RectangleEdge.RIGHT.name.toString == orig(org.jfree.chart.util.RectangleEdge.RIGHT.name.toString)
org.jfree.chart.title.Title.DEFAULT_POSITION.name == orig(org.jfree.chart.title.Title.DEFAULT_POSITION.name)
org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_POSITION.name.toString)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT)
org.jfree.chart.util.HorizontalAlignment.LEFT == orig(org.jfree.chart.util.HorizontalAlignment.LEFT)
org.jfree.chart.util.HorizontalAlignment.RIGHT == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT)
org.jfree.chart.util.HorizontalAlignment.CENTER == orig(org.jfree.chart.util.HorizontalAlignment.CENTER)
org.jfree.chart.util.HorizontalAlignment.LEFT.name == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name)
org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.LEFT.name.toString)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name)
org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.RIGHT.name.toString)
org.jfree.chart.util.HorizontalAlignment.CENTER.name == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name)
org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.HorizontalAlignment.CENTER.name.toString)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name)
org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT.name.toString)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT)
org.jfree.chart.util.VerticalAlignment.TOP == orig(org.jfree.chart.util.VerticalAlignment.TOP)
org.jfree.chart.util.VerticalAlignment.BOTTOM == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM)
org.jfree.chart.util.VerticalAlignment.CENTER == orig(org.jfree.chart.util.VerticalAlignment.CENTER)
org.jfree.chart.util.VerticalAlignment.TOP.name == orig(org.jfree.chart.util.VerticalAlignment.TOP.name)
org.jfree.chart.util.VerticalAlignment.TOP.name.toString == orig(org.jfree.chart.util.VerticalAlignment.TOP.name.toString)
org.jfree.chart.util.VerticalAlignment.BOTTOM.name == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM.name)
org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString == orig(org.jfree.chart.util.VerticalAlignment.BOTTOM.name.toString)
org.jfree.chart.util.VerticalAlignment.CENTER.name == orig(org.jfree.chart.util.VerticalAlignment.CENTER.name)
org.jfree.chart.util.VerticalAlignment.CENTER.name.toString == orig(org.jfree.chart.util.VerticalAlignment.CENTER.name.toString)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name)
org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT.name.toString)
org.jfree.chart.title.Title.DEFAULT_PADDING == orig(org.jfree.chart.title.Title.DEFAULT_PADDING)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name)
org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name.toString == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.unitType.name.toString)
org.jfree.chart.title.Title.DEFAULT_PADDING.top == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.top)
org.jfree.chart.title.Title.DEFAULT_PADDING.left == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.left)
org.jfree.chart.title.Title.DEFAULT_PADDING.bottom == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.bottom)
org.jfree.chart.title.Title.DEFAULT_PADDING.right == orig(org.jfree.chart.title.Title.DEFAULT_PADDING.right)
this.horizontalAlignment == orig(this.horizontalAlignment)
this.horizontalAlignment.name == orig(this.horizontalAlignment.name)
this.horizontalAlignment.name.toString == orig(this.horizontalAlignment.name.toString)
this.verticalAlignment == orig(this.verticalAlignment)
this.verticalAlignment.name == orig(this.verticalAlignment.name)
this.verticalAlignment.name.toString == orig(this.verticalAlignment.name.toString)
this.listenerList == orig(this.listenerList)
this.notify == orig(this.notify)
org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener == orig(org.jfree.chart.title.Title.class$org$jfree$chart$event$TitleChangeListener)
this.id == orig(this.id)
this.margin == orig(this.margin)
this.margin.unitType == orig(this.margin.unitType)
this.margin.unitType.name == orig(this.margin.unitType.name)
this.margin.unitType.name.toString == orig(this.margin.unitType.name.toString)
this.margin.top == orig(this.margin.top)
this.margin.left == orig(this.margin.left)
this.margin.bottom == orig(this.margin.bottom)
this.margin.right == orig(this.margin.right)
this.frame == orig(this.frame)
this.frame.getClass().getName() == orig(this.frame.getClass().getName())
this.padding == orig(this.padding)
this.padding.unitType == orig(this.padding.unitType)
this.padding.unitType.name == orig(this.padding.unitType.name)
this.padding.unitType.name.toString == orig(this.padding.unitType.name.toString)
this.padding.top == orig(this.padding.top)
this.padding.left == orig(this.padding.left)
this.padding.bottom == orig(this.padding.bottom)
this.padding.right == orig(this.padding.right)
this.width == orig(this.width)
this.height == orig(this.height)
this.bounds == orig(this.bounds)
this.bounds.getClass().getName() == orig(this.bounds.getClass().getName())
position.name == orig(position.name)
position.name.toString == orig(position.name.toString)
this.position has only one value
this.position.name has only one value
this.position.name.toString == "RectangleEdge.BOTTOM"
this.margin.top == 1.0
this.margin.left == 1.0
this.margin.bottom == 1.0
this.margin.right == 1.0
this.frame.getClass().getName() == org.jfree.chart.block.LineBorder.class
position.name has only one value
position.name.toString == "RectangleEdge.BOTTOM"
===========================================================================
org.jfree.chart.ui.BasicProjectInfo:::OBJECT
this has only one value
this.copyright.toString == "(C)opyright 2000-2007, by Object Refinery Limited and Contributors"
this.libraries has only one value
this.libraries[] == []
this.libraries[].getClass().getName() == []
this.libraries.getClass().getName() == java.util.ArrayList.class
this.optionalLibraries has only one value
this.optionalLibraries[] == []
this.optionalLibraries[].getClass().getName() == []
this.optionalLibraries.getClass().getName() == java.util.ArrayList.class
this.name.toString == "JFreeChart"
this.version.toString == "1.2.0-pre"
this.licenceName.toString == "LGPL"
this.info.toString == "http://www.jfree.org/jfreechart/index.html"
===========================================================================
org.jfree.chart.ui.BasicProjectInfo.BasicProjectInfo():::EXIT
this.copyright == null
this.name == null
this.version == null
this.licenceName == null
this.info == null
===========================================================================
org.jfree.chart.ui.BasicProjectInfo.setCopyright(java.lang.String):::ENTER
this.copyright == null
this.name has only one value
this.version has only one value
this.licenceName == null
this.info has only one value
copyright has only one value
copyright.toString == "(C)opyright 2000-2007, by Object Refinery Limited and Contributors"
===========================================================================
org.jfree.chart.ui.BasicProjectInfo.setCopyright(java.lang.String):::EXIT
this.libraries == orig(this.libraries)
this.libraries[] == orig(this.libraries[])
this.libraries.getClass().getName() == orig(this.libraries.getClass().getName())
this.optionalLibraries == orig(this.optionalLibraries)
this.optionalLibraries[] == orig(this.optionalLibraries[])
this.optionalLibraries.getClass().getName() == orig(this.optionalLibraries.getClass().getName())
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.version == orig(this.version)
this.version.toString == orig(this.version.toString)
this.licenceName == orig(this.licenceName)
this.info == orig(this.info)
this.info.toString == orig(this.info.toString)
copyright.toString == orig(copyright.toString)
this.copyright has only one value
this.name has only one value
this.version has only one value
this.licenceName == null
this.info has only one value
copyright.toString == "(C)opyright 2000-2007, by Object Refinery Limited and Contributors"
===========================================================================
org.jfree.chart.ui.BasicProjectInfo.setInfo(java.lang.String):::ENTER
this.copyright == null
this.name has only one value
this.version has only one value
this.licenceName == null
this.info == null
info has only one value
info.toString == "http://www.jfree.org/jfreechart/index.html"
===========================================================================
org.jfree.chart.ui.BasicProjectInfo.setInfo(java.lang.String):::EXIT
this.copyright == orig(this.copyright)
this.libraries == orig(this.libraries)
this.libraries[] == orig(this.libraries[])
this.libraries.getClass().getName() == orig(this.libraries.getClass().getName())
this.optionalLibraries == orig(this.optionalLibraries)
this.optionalLibraries[] == orig(this.optionalLibraries[])
this.optionalLibraries.getClass().getName() == orig(this.optionalLibraries.getClass().getName())
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.version == orig(this.version)
this.version.toString == orig(this.version.toString)
this.licenceName == orig(this.licenceName)
info.toString == orig(info.toString)
this.copyright == null
this.name has only one value
this.version has only one value
this.licenceName == null
this.info has only one value
info.toString == "http://www.jfree.org/jfreechart/index.html"
===========================================================================
org.jfree.chart.ui.BasicProjectInfo.setLicenceName(java.lang.String):::ENTER
this.copyright has only one value
this.name has only one value
this.version has only one value
this.licenceName == null
this.info has only one value
licence has only one value
licence.toString == "LGPL"
===========================================================================
org.jfree.chart.ui.BasicProjectInfo.setLicenceName(java.lang.String):::EXIT
this.copyright == orig(this.copyright)
this.copyright.toString == orig(this.copyright.toString)
this.libraries == orig(this.libraries)
this.libraries[] == orig(this.libraries[])
this.libraries.getClass().getName() == orig(this.libraries.getClass().getName())
this.optionalLibraries == orig(this.optionalLibraries)
this.optionalLibraries[] == orig(this.optionalLibraries[])
this.optionalLibraries.getClass().getName() == orig(this.optionalLibraries.getClass().getName())
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.version == orig(this.version)
this.version.toString == orig(this.version.toString)
this.info == orig(this.info)
this.info.toString == orig(this.info.toString)
licence.toString == orig(licence.toString)
this.copyright has only one value
this.name has only one value
this.version has only one value
this.licenceName has only one value
this.info has only one value
licence.toString == "LGPL"
===========================================================================
org.jfree.chart.ui.BasicProjectInfo.setName(java.lang.String):::ENTER
this.copyright == null
this.name == null
this.version == null
this.licenceName == null
this.info == null
name has only one value
name.toString == "JFreeChart"
===========================================================================
org.jfree.chart.ui.BasicProjectInfo.setName(java.lang.String):::EXIT
this.copyright == orig(this.copyright)
this.libraries == orig(this.libraries)
this.libraries[] == orig(this.libraries[])
this.libraries.getClass().getName() == orig(this.libraries.getClass().getName())
this.optionalLibraries == orig(this.optionalLibraries)
this.optionalLibraries[] == orig(this.optionalLibraries[])
this.optionalLibraries.getClass().getName() == orig(this.optionalLibraries.getClass().getName())
this.version == orig(this.version)
this.licenceName == orig(this.licenceName)
this.info == orig(this.info)
name.toString == orig(name.toString)
this.copyright == null
this.name has only one value
this.version == null
this.licenceName == null
this.info == null
name.toString == "JFreeChart"
===========================================================================
org.jfree.chart.ui.BasicProjectInfo.setVersion(java.lang.String):::ENTER
this.copyright == null
this.name has only one value
this.version == null
this.licenceName == null
this.info == null
version has only one value
version.toString == "1.2.0-pre"
===========================================================================
org.jfree.chart.ui.BasicProjectInfo.setVersion(java.lang.String):::EXIT
this.copyright == orig(this.copyright)
this.libraries == orig(this.libraries)
this.libraries[] == orig(this.libraries[])
this.libraries.getClass().getName() == orig(this.libraries.getClass().getName())
this.optionalLibraries == orig(this.optionalLibraries)
this.optionalLibraries[] == orig(this.optionalLibraries[])
this.optionalLibraries.getClass().getName() == orig(this.optionalLibraries.getClass().getName())
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.licenceName == orig(this.licenceName)
this.info == orig(this.info)
version.toString == orig(version.toString)
this.copyright == null
this.name has only one value
this.version has only one value
this.licenceName == null
this.info == null
version.toString == "1.2.0-pre"
===========================================================================
org.jfree.chart.ui.Contributor:::OBJECT
this.name != null
this.email != null
===========================================================================
org.jfree.chart.ui.Contributor.Contributor(java.lang.String, java.lang.String):::ENTER
name != null
email != null
===========================================================================
org.jfree.chart.ui.Contributor.Contributor(java.lang.String, java.lang.String):::EXIT
this.name == orig(name)
this.email == orig(email)
name.toString == orig(name.toString)
email.toString == orig(email.toString)
===========================================================================
org.jfree.chart.ui.Library:::OBJECT
this has only one value
this.name.toString == "JFreeChart"
this.version.toString == "1.2.0-pre"
this.licenceName.toString == "LGPL"
this.info.toString == "http://www.jfree.org/jfreechart/index.html"
===========================================================================
org.jfree.chart.ui.Library.Library():::EXIT
this.name == null
this.version == null
this.licenceName == null
this.info == null
===========================================================================
org.jfree.chart.ui.Library.setInfo(java.lang.String):::ENTER
this.name has only one value
this.version has only one value
this.licenceName == null
this.info == null
info has only one value
info.toString == "http://www.jfree.org/jfreechart/index.html"
===========================================================================
org.jfree.chart.ui.Library.setInfo(java.lang.String):::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.version == orig(this.version)
this.version.toString == orig(this.version.toString)
this.licenceName == orig(this.licenceName)
info.toString == orig(info.toString)
this.name has only one value
this.version has only one value
this.licenceName == null
this.info has only one value
info.toString == "http://www.jfree.org/jfreechart/index.html"
===========================================================================
org.jfree.chart.ui.Library.setLicenceName(java.lang.String):::ENTER
this.name has only one value
this.version has only one value
this.licenceName == null
this.info has only one value
licenceName has only one value
licenceName.toString == "LGPL"
===========================================================================
org.jfree.chart.ui.Library.setLicenceName(java.lang.String):::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.version == orig(this.version)
this.version.toString == orig(this.version.toString)
this.info == orig(this.info)
this.info.toString == orig(this.info.toString)
licenceName.toString == orig(licenceName.toString)
this.name has only one value
this.version has only one value
this.licenceName has only one value
this.info has only one value
licenceName.toString == "LGPL"
===========================================================================
org.jfree.chart.ui.Library.setName(java.lang.String):::ENTER
this.name == null
this.version == null
this.licenceName == null
this.info == null
name has only one value
name.toString == "JFreeChart"
===========================================================================
org.jfree.chart.ui.Library.setName(java.lang.String):::EXIT
this.version == orig(this.version)
this.licenceName == orig(this.licenceName)
this.info == orig(this.info)
name.toString == orig(name.toString)
this.name has only one value
this.version == null
this.licenceName == null
this.info == null
name.toString == "JFreeChart"
===========================================================================
org.jfree.chart.ui.Library.setVersion(java.lang.String):::ENTER
this.name has only one value
this.version == null
this.licenceName == null
this.info == null
version has only one value
version.toString == "1.2.0-pre"
===========================================================================
org.jfree.chart.ui.Library.setVersion(java.lang.String):::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.licenceName == orig(this.licenceName)
this.info == orig(this.info)
version.toString == orig(version.toString)
this.name has only one value
this.version has only one value
this.licenceName == null
this.info == null
version.toString == "1.2.0-pre"
===========================================================================
org.jfree.chart.ui.Licences:::CLASS
org.jfree.chart.ui.Licences.GPL has only one value
org.jfree.chart.ui.Licences.GPL.toString == "GNU GENERAL PUBLIC LICENSE\n\nVersion 2, June 1991\n\nCopyright (C) 1989, 1991 Free Software Foundation, Inc. 675 Mass Ave, Cambridge, MA 02139, USA. Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.\n\nPreamble\nThe licenses for most software are designed to take away your freedom to share and change it. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users. This General Public License applies to most of the Free Software Foundation's software and to any other program whose authors commit to using it. (Some other Free Software Foundation software is covered by the GNU Library General Public License instead.) You can apply it to your programs, too.\n\nWhen we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs; and that you know you can do these things.\nTo protect your rights, we need to make restrictions that forbid anyone to deny you these rights or to ask you to surrender the rights. These restrictions translate to certain responsibilities for you if you distribute copies of the software, or if you modify it.\n\nFor example, if you distribute copies of such a program, whether gratis or for a fee, you must give the recipients all the rights that you have. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights.\n\nWe protect your rights with two steps: (1) copyright the software, and (2) offer you this license which gives you legal permission to copy, distribute and/or modify the software.\n\nAlso, for each author's protection and ours, we want to make certain that everyone understands that there is no warranty for this free software. If the software is modified by someone else and passed on, we want its recipients to know that what they have is not the original, so that any problems introduced by others will not reflect on the original authors' reputations.\n\nFinally, any free program is threatened constantly by software patents. We wish to avoid the danger that redistributors of a free program will individually obtain patent licenses, in effect making the program proprietary. To prevent this, we have made it clear that any patent must be licensed for everyone's free use or not licensed at all.\n\nThe precise terms and conditions for copying, distribution and modification follow.\n\nGNU GENERAL PUBLIC LICENSE\nTERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n0. This License applies to any program or other work which contains a notice placed by the copyright holder saying it may be distributed under the terms of this General Public License. The \"Program\", below, refers to any such program or work, and a \"work based on the Program\" means either the Program or any derivative work under copyright law: that is to say, a work containing the Program or a portion of it, either verbatim or with modifications and/or translated into another language. (Hereinafter, translation is included without limitation in the term \"modification\".) Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not covered by this License; they are outside its scope. The act of running the Program is not restricted, and the output from the Program is covered only if its contents constitute a work based on the Program (independent of having been made by running the Program). Whether that is true depends on what the Program does.\n\n1. You may copy and distribute verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and give any other recipients of the Program a copy of this License along with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee.\n\n2. You may modify your copy or copies of the Program or any portion of it, thus forming a work based on the Program, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions:\n\na) You must cause the modified files to carry prominent notices stating that you changed the files and the date of any change.\n\nb) You must cause any work that you distribute or publish, that in whole or in part contains or is derived from the Program or any part thereof, to be licensed as a whole at no charge to all third parties under the terms of this License.\n\nc) If the modified program normally reads commands interactively when run, you must cause it, when started running for such interactive use in the most ordinary way, to print or display an announcement including an appropriate copyright notice and a notice that there is no warranty (or else, saying that you provide a warranty) and that users may redistribute the program under these conditions, and telling the user how to view a copy of this License. (Exception: if the Program itself is interactive but does not normally print such an announcement, your work based on the Program is not required to print an announcement.)\n\nThese requirements apply to the modified work as a whole. If identifiable sections of that work are not derived from the Program, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works. But when you distribute the same sections as part of a whole which is a work based on the Program, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program with the Program (or with a work based on the Program) on a volume of a storage or distribution medium does not bring the other work under the scope of this License.\n\n3. You may copy and distribute the Program (or a work based on it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you also do one of the following:\n\na) Accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or,\nb) Accompany it with a written offer, valid for at least three years, to give any third party, for a charge no more than your cost of physically performing source distribution, a complete machine-readable copy of the corresponding source code, to be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or,\nc) Accompany it with the information you received as to the offer to distribute corresponding source code. (This alternative is allowed only for noncommercial distribution and only if you received the program in object code or executable form with such an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for making modifications to it. For an executable work, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the executable. However, as a special exception, the source code distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable.\n\nIf distribution of executable or object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place counts as distribution of the source code, even though third parties are not compelled to copy the source along with the object code.\n\n4. You may not copy, modify, sublicense, or distribute the Program except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense or distribute the Program is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance.\n5. You are not required to accept this License, since you have not signed it. However, nothing else grants you permission to modify or distribute the Program or its derivative works. These actions are prohibited by law if you do not accept this License. Therefore, by modifying or distributing the Program (or any work based on the Program), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Program or works based on it.\n\n6. Each time you redistribute the Program (or any work based on the Program), the recipient automatically receives a license from the original licensor to copy, distribute or modify the Program subject to these terms and conditions. You may not impose any further restrictions on the recipients' exercise of the rights granted herein. You are not responsible for enforcing compliance by third parties to this License.\n7. If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Program at all. For example, if a patent license would not permit royalty-free redistribution of the Program by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply and the section as a whole is intended to apply in other circumstances.\n\nIt is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system, which is implemented by public license practices. Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice.\n\nThis section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License.\n\n8. If the distribution and/or use of the Program is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Program under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded. In such case, this License incorporates the limitation as if written in the body of this License.\n\n9. The Free Software Foundation may publish revised and/or new versions of the General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.\n\nEach version is given a distinguishing version number. If the Program specifies a version number of this License which applies to it and \"any later version\", you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of this License, you may choose any version ever published by the Free Software Foundation.\n\n10. If you wish to incorporate parts of the Program into other free programs whose distribution conditions are different, write to the author to ask for permission. For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this. Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally.\n\nNO WARRANTY\n\n11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n\nEND OF TERMS AND CONDITIONS\n\n\nHow to Apply These Terms to Your New Programs\n\nIf you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.\n\nTo do so, attach the following notices to the program.  It is safest to attach them to the start of each source file to most effectively convey the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.\n\n<one line to give the program's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this when it starts in an interactive mode:\n\nGnomovision version 69, Copyright (C) year name of author Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\nThis is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate parts of the General Public License.  Of course, the commands you use may be called something other than `show w' and `show c'; they could even be mouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your school, if any, to sign a \"copyright disclaimer\" for the program, if necessary.  Here is a sample; alter the names:\n\nYoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n<signature of Ty Coon>, 1 April 1989\nTy Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into proprietary programs.  If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library.  If this is what you want to do, use the GNU Library General Public License instead of this License.\n"
org.jfree.chart.ui.Licences.LGPL has only one value
org.jfree.chart.ui.Licences.LGPL.toString == "GNU LESSER GENERAL PUBLIC LICENSE\n\nVersion 2.1, February 1999\n\nCopyright (C) 1991, 1999 Free Software Foundation, Inc.\n59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\nEveryone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.\n\n[This is the first released version of the Lesser GPL.  It also counts as the successor of the GNU Library Public License, version 2, hence the version number 2.1.]\n\nPreamble\n\nThe licenses for most software are designed to take away your freedom to share and change it. By contrast, the GNU General Public Licenses are intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users.\n\nThis license, the Lesser General Public License, applies to some specially designated software packages--typically libraries--of the Free Software Foundation and other authors who decide to use it. You can use it too, but we suggest you first think carefully about whether this license or the ordinary General Public License is the better strategy to use in any particular case, based on the explanations below.\n\nWhen we speak of free software, we are referring to freedom of use, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish); that you receive source code or can get it if you want it; that you can change the software and use pieces of it in new free programs; and that you are informed that you can do these things.\n\nTo protect your rights, we need to make restrictions that forbid distributors to deny you these rights or to ask you to surrender these rights. These restrictions translate to certain responsibilities for you if you distribute copies of the library or if you modify it.\n\nFor example, if you distribute copies of the library, whether gratis or for a fee, you must give the recipients all the rights that we gave you. You must make sure that they, too, receive or can get the source code. If you link other code with the library, you must provide complete object files to the recipients, so that they can relink them with the library after making changes to the library and recompiling it. And you must show them these terms so they know their rights.\n\nWe protect your rights with a two-step method: (1) we copyright the library, and (2) we offer you this license, which gives you legal permission to copy, distribute and/or modify the library.\n\nTo protect each distributor, we want to make it very clear that there is no warranty for the free library. Also, if the library is modified by someone else and passed on, the recipients should know that what they have is not the original version, so that the original author's reputation will not be affected by problems that might be introduced by others.\n\nFinally, software patents pose a constant threat to the existence of any free program. We wish to make sure that a company cannot effectively restrict the users of a free program by obtaining a restrictive license from a patent holder. Therefore, we insist that any patent license obtained for a version of the library must be consistent with the full freedom of use specified in this license.\n\nMost GNU software, including some libraries, is covered by the ordinary GNU General Public License. This license, the GNU Lesser General Public License, applies to certain designated libraries, and is quite different from the ordinary General Public License. We use this license for certain libraries in order to permit linking those libraries into non-free programs.\n\nWhen a program is linked with a library, whether statically or using a shared library, the combination of the two is legally speaking a combined work, a derivative of the original library. The ordinary General Public License therefore permits such linking only if the entire combination fits its criteria of freedom. The Lesser General Public License permits more lax criteria for linking other code with the library.\n\nWe call this license the \"Lesser\" General Public License because it does Less to protect the user's freedom than the ordinary General Public License. It also provides other free software developers Less of an advantage over competing non-free programs. These disadvantages are the reason we use the ordinary General Public License for many libraries. However, the Lesser license provides advantages in certain special circumstances.\n\nFor example, on rare occasions, there may be a special need to encourage the widest possible use of a certain library, so that it becomes a de-facto standard. To achieve this, non-free programs must be allowed to use the library. A more frequent case is that a free library does the same job as widely used non-free libraries. In this case, there is little to gain by limiting the free library to free software only, so we use the Lesser General Public License.\n\nIn other cases, permission to use a particular library in non-free programs enables a greater number of people to use a large body of free software. For example, permission to use the GNU C Library in non-free programs enables many more people to use the whole GNU operating system, as well as its variant, the GNU/Linux operating system.\n\nAlthough the Lesser General Public License is Less protective of the users' freedom, it does ensure that the user of a program that is linked with the Library has the freedom and the wherewithal to run that program using a modified version of the Library.\n\nThe precise terms and conditions for copying, distribution and modification follow. Pay close attention to the difference between a \"work based on the library\" and a \"work that uses the library\". The former contains code derived from the library, whereas the latter must be combined with the library in order to run.\n\nTERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n0. This License Agreement applies to any software library or other program which contains a notice placed by the copyright holder or other authorized party saying it may be distributed under the terms of this Lesser General Public License (also called \"this License\"). Each licensee is addressed as \"you\".\nA \"library\" means a collection of software functions and/or data prepared so as to be conveniently linked with application programs (which use some of those functions and data) to form executables.\n\nThe \"Library\", below, refers to any such software library or work which has been distributed under these terms. A \"work based on the Library\" means either the Library or any derivative work under copyright law: that is to say, a work containing the Library or a portion of it, either verbatim or with modifications and/or translated straightforwardly into another language. (Hereinafter, translation is included without limitation in the term \"modification\".)\n\n\"Source code\" for a work means the preferred form of the work for making modifications to it. For a library, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the library.\n\nActivities other than copying, distribution and modification are not covered by this License; they are outside its scope. The act of running a program using the Library is not restricted, and output from such a program is covered only if its contents constitute a work based on the Library (independent of the use of the Library in a tool for writing it). Whether that is true depends on what the Library does and what the program that uses the Library does.\n1. You may copy and distribute verbatim copies of the Library's complete source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and distribute a copy of this License along with the Library.\n\nYou may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee.\n\n2. You may modify your copy or copies of the Library or any portion of it, thus forming a work based on the Library, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions:\n\n*    a) The modified work must itself be a software library.\n*    b) You must cause the files modified to carry prominent notices stating that you changed the files and the date of any change.\n*    c) You must cause the whole of the work to be licensed at no charge to all third parties under the terms of this License.\n*    d) If a facility in the modified Library refers to a function or a table of data to be supplied by an application program that uses the facility, other than as an argument passed when the facility is invoked, then you must make a good faith effort to ensure that, in the event an application does not supply such function or table, the facility still operates, and performs whatever part of its purpose remains meaningful.\n\n(For example, a function in a library to compute square roots has a purpose that is entirely well-defined independent of the application. Therefore, Subsection 2d requires that any application-supplied function or table used by this function must be optional: if the application does not supply it, the square root function must still compute square roots.)\n\nThese requirements apply to the modified work as a whole. If identifiable sections of that work are not derived from the Library, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works. But when you distribute the same sections as part of a whole which is a work based on the Library, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Library.\n\nIn addition, mere aggregation of another work not based on the Library with the Library (or with a work based on the Library) on a volume of a storage or distribution medium does not bring the other work under the scope of this License.\n\n3. You may opt to apply the terms of the ordinary GNU General Public License instead of this License to a given copy of the Library. To do this, you must alter all the notices that refer to this License, so that they refer to the ordinary GNU General Public License, version 2, instead of to this License. (If a newer version than version 2 of the ordinary GNU General Public License has appeared, then you can specify that version instead if you wish.) Do not make any other change in these notices.\n\nOnce this change is made in a given copy, it is irreversible for that copy, so the ordinary GNU General Public License applies to all subsequent copies and derivative works made from that copy.\n\nThis option is useful when you wish to copy part of the code of the Library into a program that is not a library.\n\n4. You may copy and distribute the Library (or a portion or derivative of it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange.\n\nIf distribution of object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place satisfies the requirement to distribute the source code, even though third parties are not compelled to copy the source along with the object code.\n\n5. A program that contains no derivative of any portion of the Library, but is designed to work with the Library by being compiled or linked with it, is called a \"work that uses the Library\". Such a work, in isolation, is not a derivative work of the Library, and therefore falls outside the scope of this License.\n\nHowever, linking a \"work that uses the Library\" with the Library creates an executable that is a derivative of the Library (because it contains portions of the Library), rather than a \"work that uses the library\". The executable is therefore covered by this License. Section 6 states terms for distribution of such executables.\n\nWhen a \"work that uses the Library\" uses material from a header file that is part of the Library, the object code for the work may be a derivative work of the Library even though the source code is not. Whether this is true is especially significant if the work can be linked without the Library, or if the work is itself a library. The threshold for this to be true is not precisely defined by law.\n\nIf such an object file uses only numerical parameters, data structure layouts and accessors, and small macros and small inline functions (ten lines or less in length), then the use of the object file is unrestricted, regardless of whether it is legally a derivative work. (Executables containing this object code plus portions of the Library will still fall under Section 6.)\n\nOtherwise, if the work is a derivative of the Library, you may distribute the object code for the work under the terms of Section 6. Any executables containing that work also fall under Section 6, whether or not they are linked directly with the Library itself.\n\n6. As an exception to the Sections above, you may also combine or link a \"work that uses the Library\" with the Library to produce a work containing portions of the Library, and distribute that work under terms of your choice, provided that the terms permit modification of the work for the customer's own use and reverse engineering for debugging such modifications.\n\nYou must give prominent notice with each copy of the work that the Library is used in it and that the Library and its use are covered by this License. You must supply a copy of this License. If the work during execution displays copyright notices, you must include the copyright notice for the Library among them, as well as a reference directing the user to the copy of this License. Also, you must do one of these things:\n\n*    a) Accompany the work with the complete corresponding machine-readable source code for the Library including whatever changes were used in the work (which must be distributed under Sections 1 and 2 above); and, if the work is an executable linked with the Library, with the complete machine-readable \"work that uses the Library\", as object code and/or source code, so that the user can modify the Library and then relink to produce a modified executable containing the modified Library. (It is understood that the user who changes the contents of definitions files in the Library will not necessarily be able to recompile the application to use the modified definitions.)\n*    b) Use a suitable shared library mechanism for linking with the Library. A suitable mechanism is one that (1) uses at run time a copy of the library already present on the user's computer system, rather than copying library functions into the executable, and (2) will operate properly with a modified version of the library, if the user installs one, as long as the modified version is interface-compatible with the version that the work was made with.\n*    c) Accompany the work with a written offer, valid for at least three years, to give the same user the materials specified in Subsection 6a, above, for a charge no more than the cost of performing this distribution.\n*    d) If distribution of the work is made by offering access to copy from a designated place, offer equivalent access to copy the above specified materials from the same place.\n*    e) Verify that the user has already received a copy of these materials or that you have already sent this user a copy.\n\nFor an executable, the required form of the \"work that uses the Library\" must include any data and utility programs needed for reproducing the executable from it. However, as a special exception, the materials to be distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable.\n\nIt may happen that this requirement contradicts the license restrictions of other proprietary libraries that do not normally accompany the operating system. Such a contradiction means you cannot use both them and the Library together in an executable that you distribute.\n\n7. You may place library facilities that are a work based on the Library side-by-side in a single library together with other library facilities not covered by this License, and distribute such a combined library, provided that the separate distribution of the work based on the Library and of the other library facilities is otherwise permitted, and provided that you do these two things:\n\n*    a) Accompany the combined library with a copy of the same work based on the Library, uncombined with any other library facilities. This must be distributed under the terms of the Sections above.\n*    b) Give prominent notice with the combined library of the fact that part of it is a work based on the Library, and explaining where to find the accompanying uncombined form of the same work.\n\n8. You may not copy, modify, sublicense, link with, or distribute the Library except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense, link with, or distribute the Library is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance.\n\n9. You are not required to accept this License, since you have not signed it. However, nothing else grants you permission to modify or distribute the Library or its derivative works. These actions are prohibited by law if you do not accept this License. Therefore, by modifying or distributing the Library (or any work based on the Library), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Library or works based on it.\n\n10. Each time you redistribute the Library (or any work based on the Library), the recipient automatically receives a license from the original licensor to copy, distribute, link with or modify the Library subject to these terms and conditions. You may not impose any further restrictions on the recipients' exercise of the rights granted herein. You are not responsible for enforcing compliance by third parties with this License.\n\n11. If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Library at all. For example, if a patent license would not permit royalty-free redistribution of the Library by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Library.\n\nIf any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply, and the section as a whole is intended to apply in other circumstances.\n\nIt is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system which is implemented by public license practices. Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice.\n\nThis section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License.\n\n12. If the distribution and/or use of the Library is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Library under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded. In such case, this License incorporates the limitation as if written in the body of this License.\n\n13. The Free Software Foundation may publish revised and/or new versions of the Lesser General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.\n\nEach version is given a distinguishing version number. If the Library specifies a version number of this License which applies to it and \"any later version\", you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation. If the Library does not specify a license version number, you may choose any version ever published by the Free Software Foundation.\n\n14. If you wish to incorporate parts of the Library into other free programs whose distribution conditions are incompatible with these, write to the author to ask for permission. For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this. Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally.\n\nNO WARRANTY\n\n15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE LIBRARY \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE LIBRARY IS WITH YOU. SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n\nEND OF TERMS AND CONDITIONS\n\n\nHow to Apply These Terms to Your New Libraries\n\nIf you develop a new library, and you want it to be of the greatest possible use to the public, we recommend making it free software that everyone can redistribute and change. You can do so by permitting redistribution under these terms (or, alternatively, under the terms of the ordinary General Public License).\n\nTo apply these terms, attach the following notices to the library.  It is safest to attach them to the start of each source file to most effectively convey the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.\n\n<one line to give the library's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.\n\nThis library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\nAlso add information on how to contact you by electronic and paper mail.\n\nYou should also get your employer (if you work as a programmer) or your school, if any, to sign a \"copyright disclaimer\" for the library, if necessary.  Here is a sample; alter the names:\n\nYoyodyne, Inc., hereby disclaims all copyright interest in the library `Frob' (a library for tweaking knobs) written by James Random Hacker.\n\n<signature of Ty Coon>, 1 April 1990\nTy Coon, President of Vice\n\nThat's all there is to it!\n"
===========================================================================
org.jfree.chart.ui.Licences:::OBJECT
this has only one value
===========================================================================
org.jfree.chart.ui.Licences.Licences():::EXIT
org.jfree.chart.ui.Licences.singleton == null
===========================================================================
org.jfree.chart.ui.Licences.getInstance():::ENTER
org.jfree.chart.ui.Licences.singleton == null
===========================================================================
org.jfree.chart.ui.Licences.getInstance():::EXIT
org.jfree.chart.ui.Licences.GPL == orig(org.jfree.chart.ui.Licences.GPL)
org.jfree.chart.ui.Licences.GPL.toString == orig(org.jfree.chart.ui.Licences.GPL.toString)
org.jfree.chart.ui.Licences.LGPL == orig(org.jfree.chart.ui.Licences.LGPL)
org.jfree.chart.ui.Licences.LGPL.toString == orig(org.jfree.chart.ui.Licences.LGPL.toString)
org.jfree.chart.ui.Licences.singleton == return
org.jfree.chart.ui.Licences.singleton has only one value
===========================================================================
org.jfree.chart.ui.Licences.getLGPL():::ENTER
this == org.jfree.chart.ui.Licences.singleton
org.jfree.chart.ui.Licences.singleton has only one value
===========================================================================
org.jfree.chart.ui.Licences.getLGPL():::EXIT
org.jfree.chart.ui.Licences.GPL == orig(org.jfree.chart.ui.Licences.GPL)
org.jfree.chart.ui.Licences.GPL.toString == orig(org.jfree.chart.ui.Licences.GPL.toString)
org.jfree.chart.ui.Licences.LGPL == return
org.jfree.chart.ui.Licences.LGPL == orig(org.jfree.chart.ui.Licences.LGPL)
org.jfree.chart.ui.Licences.LGPL.toString == orig(org.jfree.chart.ui.Licences.LGPL.toString)
org.jfree.chart.ui.Licences.singleton == orig(this)
org.jfree.chart.ui.Licences.singleton == orig(org.jfree.chart.ui.Licences.singleton)
org.jfree.chart.ui.Licences.singleton has only one value
return.toString == "GNU LESSER GENERAL PUBLIC LICENSE\n\nVersion 2.1, February 1999\n\nCopyright (C) 1991, 1999 Free Software Foundation, Inc.\n59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\nEveryone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.\n\n[This is the first released version of the Lesser GPL.  It also counts as the successor of the GNU Library Public License, version 2, hence the version number 2.1.]\n\nPreamble\n\nThe licenses for most software are designed to take away your freedom to share and change it. By contrast, the GNU General Public Licenses are intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users.\n\nThis license, the Lesser General Public License, applies to some specially designated software packages--typically libraries--of the Free Software Foundation and other authors who decide to use it. You can use it too, but we suggest you first think carefully about whether this license or the ordinary General Public License is the better strategy to use in any particular case, based on the explanations below.\n\nWhen we speak of free software, we are referring to freedom of use, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish); that you receive source code or can get it if you want it; that you can change the software and use pieces of it in new free programs; and that you are informed that you can do these things.\n\nTo protect your rights, we need to make restrictions that forbid distributors to deny you these rights or to ask you to surrender these rights. These restrictions translate to certain responsibilities for you if you distribute copies of the library or if you modify it.\n\nFor example, if you distribute copies of the library, whether gratis or for a fee, you must give the recipients all the rights that we gave you. You must make sure that they, too, receive or can get the source code. If you link other code with the library, you must provide complete object files to the recipients, so that they can relink them with the library after making changes to the library and recompiling it. And you must show them these terms so they know their rights.\n\nWe protect your rights with a two-step method: (1) we copyright the library, and (2) we offer you this license, which gives you legal permission to copy, distribute and/or modify the library.\n\nTo protect each distributor, we want to make it very clear that there is no warranty for the free library. Also, if the library is modified by someone else and passed on, the recipients should know that what they have is not the original version, so that the original author's reputation will not be affected by problems that might be introduced by others.\n\nFinally, software patents pose a constant threat to the existence of any free program. We wish to make sure that a company cannot effectively restrict the users of a free program by obtaining a restrictive license from a patent holder. Therefore, we insist that any patent license obtained for a version of the library must be consistent with the full freedom of use specified in this license.\n\nMost GNU software, including some libraries, is covered by the ordinary GNU General Public License. This license, the GNU Lesser General Public License, applies to certain designated libraries, and is quite different from the ordinary General Public License. We use this license for certain libraries in order to permit linking those libraries into non-free programs.\n\nWhen a program is linked with a library, whether statically or using a shared library, the combination of the two is legally speaking a combined work, a derivative of the original library. The ordinary General Public License therefore permits such linking only if the entire combination fits its criteria of freedom. The Lesser General Public License permits more lax criteria for linking other code with the library.\n\nWe call this license the \"Lesser\" General Public License because it does Less to protect the user's freedom than the ordinary General Public License. It also provides other free software developers Less of an advantage over competing non-free programs. These disadvantages are the reason we use the ordinary General Public License for many libraries. However, the Lesser license provides advantages in certain special circumstances.\n\nFor example, on rare occasions, there may be a special need to encourage the widest possible use of a certain library, so that it becomes a de-facto standard. To achieve this, non-free programs must be allowed to use the library. A more frequent case is that a free library does the same job as widely used non-free libraries. In this case, there is little to gain by limiting the free library to free software only, so we use the Lesser General Public License.\n\nIn other cases, permission to use a particular library in non-free programs enables a greater number of people to use a large body of free software. For example, permission to use the GNU C Library in non-free programs enables many more people to use the whole GNU operating system, as well as its variant, the GNU/Linux operating system.\n\nAlthough the Lesser General Public License is Less protective of the users' freedom, it does ensure that the user of a program that is linked with the Library has the freedom and the wherewithal to run that program using a modified version of the Library.\n\nThe precise terms and conditions for copying, distribution and modification follow. Pay close attention to the difference between a \"work based on the library\" and a \"work that uses the library\". The former contains code derived from the library, whereas the latter must be combined with the library in order to run.\n\nTERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n0. This License Agreement applies to any software library or other program which contains a notice placed by the copyright holder or other authorized party saying it may be distributed under the terms of this Lesser General Public License (also called \"this License\"). Each licensee is addressed as \"you\".\nA \"library\" means a collection of software functions and/or data prepared so as to be conveniently linked with application programs (which use some of those functions and data) to form executables.\n\nThe \"Library\", below, refers to any such software library or work which has been distributed under these terms. A \"work based on the Library\" means either the Library or any derivative work under copyright law: that is to say, a work containing the Library or a portion of it, either verbatim or with modifications and/or translated straightforwardly into another language. (Hereinafter, translation is included without limitation in the term \"modification\".)\n\n\"Source code\" for a work means the preferred form of the work for making modifications to it. For a library, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the library.\n\nActivities other than copying, distribution and modification are not covered by this License; they are outside its scope. The act of running a program using the Library is not restricted, and output from such a program is covered only if its contents constitute a work based on the Library (independent of the use of the Library in a tool for writing it). Whether that is true depends on what the Library does and what the program that uses the Library does.\n1. You may copy and distribute verbatim copies of the Library's complete source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and distribute a copy of this License along with the Library.\n\nYou may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee.\n\n2. You may modify your copy or copies of the Library or any portion of it, thus forming a work based on the Library, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions:\n\n*    a) The modified work must itself be a software library.\n*    b) You must cause the files modified to carry prominent notices stating that you changed the files and the date of any change.\n*    c) You must cause the whole of the work to be licensed at no charge to all third parties under the terms of this License.\n*    d) If a facility in the modified Library refers to a function or a table of data to be supplied by an application program that uses the facility, other than as an argument passed when the facility is invoked, then you must make a good faith effort to ensure that, in the event an application does not supply such function or table, the facility still operates, and performs whatever part of its purpose remains meaningful.\n\n(For example, a function in a library to compute square roots has a purpose that is entirely well-defined independent of the application. Therefore, Subsection 2d requires that any application-supplied function or table used by this function must be optional: if the application does not supply it, the square root function must still compute square roots.)\n\nThese requirements apply to the modified work as a whole. If identifiable sections of that work are not derived from the Library, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works. But when you distribute the same sections as part of a whole which is a work based on the Library, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Library.\n\nIn addition, mere aggregation of another work not based on the Library with the Library (or with a work based on the Library) on a volume of a storage or distribution medium does not bring the other work under the scope of this License.\n\n3. You may opt to apply the terms of the ordinary GNU General Public License instead of this License to a given copy of the Library. To do this, you must alter all the notices that refer to this License, so that they refer to the ordinary GNU General Public License, version 2, instead of to this License. (If a newer version than version 2 of the ordinary GNU General Public License has appeared, then you can specify that version instead if you wish.) Do not make any other change in these notices.\n\nOnce this change is made in a given copy, it is irreversible for that copy, so the ordinary GNU General Public License applies to all subsequent copies and derivative works made from that copy.\n\nThis option is useful when you wish to copy part of the code of the Library into a program that is not a library.\n\n4. You may copy and distribute the Library (or a portion or derivative of it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange.\n\nIf distribution of object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place satisfies the requirement to distribute the source code, even though third parties are not compelled to copy the source along with the object code.\n\n5. A program that contains no derivative of any portion of the Library, but is designed to work with the Library by being compiled or linked with it, is called a \"work that uses the Library\". Such a work, in isolation, is not a derivative work of the Library, and therefore falls outside the scope of this License.\n\nHowever, linking a \"work that uses the Library\" with the Library creates an executable that is a derivative of the Library (because it contains portions of the Library), rather than a \"work that uses the library\". The executable is therefore covered by this License. Section 6 states terms for distribution of such executables.\n\nWhen a \"work that uses the Library\" uses material from a header file that is part of the Library, the object code for the work may be a derivative work of the Library even though the source code is not. Whether this is true is especially significant if the work can be linked without the Library, or if the work is itself a library. The threshold for this to be true is not precisely defined by law.\n\nIf such an object file uses only numerical parameters, data structure layouts and accessors, and small macros and small inline functions (ten lines or less in length), then the use of the object file is unrestricted, regardless of whether it is legally a derivative work. (Executables containing this object code plus portions of the Library will still fall under Section 6.)\n\nOtherwise, if the work is a derivative of the Library, you may distribute the object code for the work under the terms of Section 6. Any executables containing that work also fall under Section 6, whether or not they are linked directly with the Library itself.\n\n6. As an exception to the Sections above, you may also combine or link a \"work that uses the Library\" with the Library to produce a work containing portions of the Library, and distribute that work under terms of your choice, provided that the terms permit modification of the work for the customer's own use and reverse engineering for debugging such modifications.\n\nYou must give prominent notice with each copy of the work that the Library is used in it and that the Library and its use are covered by this License. You must supply a copy of this License. If the work during execution displays copyright notices, you must include the copyright notice for the Library among them, as well as a reference directing the user to the copy of this License. Also, you must do one of these things:\n\n*    a) Accompany the work with the complete corresponding machine-readable source code for the Library including whatever changes were used in the work (which must be distributed under Sections 1 and 2 above); and, if the work is an executable linked with the Library, with the complete machine-readable \"work that uses the Library\", as object code and/or source code, so that the user can modify the Library and then relink to produce a modified executable containing the modified Library. (It is understood that the user who changes the contents of definitions files in the Library will not necessarily be able to recompile the application to use the modified definitions.)\n*    b) Use a suitable shared library mechanism for linking with the Library. A suitable mechanism is one that (1) uses at run time a copy of the library already present on the user's computer system, rather than copying library functions into the executable, and (2) will operate properly with a modified version of the library, if the user installs one, as long as the modified version is interface-compatible with the version that the work was made with.\n*    c) Accompany the work with a written offer, valid for at least three years, to give the same user the materials specified in Subsection 6a, above, for a charge no more than the cost of performing this distribution.\n*    d) If distribution of the work is made by offering access to copy from a designated place, offer equivalent access to copy the above specified materials from the same place.\n*    e) Verify that the user has already received a copy of these materials or that you have already sent this user a copy.\n\nFor an executable, the required form of the \"work that uses the Library\" must include any data and utility programs needed for reproducing the executable from it. However, as a special exception, the materials to be distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable.\n\nIt may happen that this requirement contradicts the license restrictions of other proprietary libraries that do not normally accompany the operating system. Such a contradiction means you cannot use both them and the Library together in an executable that you distribute.\n\n7. You may place library facilities that are a work based on the Library side-by-side in a single library together with other library facilities not covered by this License, and distribute such a combined library, provided that the separate distribution of the work based on the Library and of the other library facilities is otherwise permitted, and provided that you do these two things:\n\n*    a) Accompany the combined library with a copy of the same work based on the Library, uncombined with any other library facilities. This must be distributed under the terms of the Sections above.\n*    b) Give prominent notice with the combined library of the fact that part of it is a work based on the Library, and explaining where to find the accompanying uncombined form of the same work.\n\n8. You may not copy, modify, sublicense, link with, or distribute the Library except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense, link with, or distribute the Library is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance.\n\n9. You are not required to accept this License, since you have not signed it. However, nothing else grants you permission to modify or distribute the Library or its derivative works. These actions are prohibited by law if you do not accept this License. Therefore, by modifying or distributing the Library (or any work based on the Library), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Library or works based on it.\n\n10. Each time you redistribute the Library (or any work based on the Library), the recipient automatically receives a license from the original licensor to copy, distribute, link with or modify the Library subject to these terms and conditions. You may not impose any further restrictions on the recipients' exercise of the rights granted herein. You are not responsible for enforcing compliance by third parties with this License.\n\n11. If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Library at all. For example, if a patent license would not permit royalty-free redistribution of the Library by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Library.\n\nIf any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply, and the section as a whole is intended to apply in other circumstances.\n\nIt is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system which is implemented by public license practices. Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice.\n\nThis section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License.\n\n12. If the distribution and/or use of the Library is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Library under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded. In such case, this License incorporates the limitation as if written in the body of this License.\n\n13. The Free Software Foundation may publish revised and/or new versions of the Lesser General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.\n\nEach version is given a distinguishing version number. If the Library specifies a version number of this License which applies to it and \"any later version\", you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation. If the Library does not specify a license version number, you may choose any version ever published by the Free Software Foundation.\n\n14. If you wish to incorporate parts of the Library into other free programs whose distribution conditions are incompatible with these, write to the author to ask for permission. For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this. Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally.\n\nNO WARRANTY\n\n15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE LIBRARY \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE LIBRARY IS WITH YOU. SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n\nEND OF TERMS AND CONDITIONS\n\n\nHow to Apply These Terms to Your New Libraries\n\nIf you develop a new library, and you want it to be of the greatest possible use to the public, we recommend making it free software that everyone can redistribute and change. You can do so by permitting redistribution under these terms (or, alternatively, under the terms of the ordinary General Public License).\n\nTo apply these terms, attach the following notices to the library.  It is safest to attach them to the start of each source file to most effectively convey the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.\n\n<one line to give the library's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.\n\nThis library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\nAlso add information on how to contact you by electronic and paper mail.\n\nYou should also get your employer (if you work as a programmer) or your school, if any, to sign a \"copyright disclaimer\" for the library, if necessary.  Here is a sample; alter the names:\n\nYoyodyne, Inc., hereby disclaims all copyright interest in the library `Frob' (a library for tweaking knobs) written by James Random Hacker.\n\n<signature of Ty Coon>, 1 April 1990\nTy Coon, President of Vice\n\nThat's all there is to it!\n"
===========================================================================
org.jfree.chart.ui.ProjectInfo:::OBJECT
this has only one value
this.logo == null
this.licenceText.toString == "GNU LESSER GENERAL PUBLIC LICENSE\n\nVersion 2.1, February 1999\n\nCopyright (C) 1991, 1999 Free Software Foundation, Inc.\n59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\nEveryone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.\n\n[This is the first released version of the Lesser GPL.  It also counts as the successor of the GNU Library Public License, version 2, hence the version number 2.1.]\n\nPreamble\n\nThe licenses for most software are designed to take away your freedom to share and change it. By contrast, the GNU General Public Licenses are intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users.\n\nThis license, the Lesser General Public License, applies to some specially designated software packages--typically libraries--of the Free Software Foundation and other authors who decide to use it. You can use it too, but we suggest you first think carefully about whether this license or the ordinary General Public License is the better strategy to use in any particular case, based on the explanations below.\n\nWhen we speak of free software, we are referring to freedom of use, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish); that you receive source code or can get it if you want it; that you can change the software and use pieces of it in new free programs; and that you are informed that you can do these things.\n\nTo protect your rights, we need to make restrictions that forbid distributors to deny you these rights or to ask you to surrender these rights. These restrictions translate to certain responsibilities for you if you distribute copies of the library or if you modify it.\n\nFor example, if you distribute copies of the library, whether gratis or for a fee, you must give the recipients all the rights that we gave you. You must make sure that they, too, receive or can get the source code. If you link other code with the library, you must provide complete object files to the recipients, so that they can relink them with the library after making changes to the library and recompiling it. And you must show them these terms so they know their rights.\n\nWe protect your rights with a two-step method: (1) we copyright the library, and (2) we offer you this license, which gives you legal permission to copy, distribute and/or modify the library.\n\nTo protect each distributor, we want to make it very clear that there is no warranty for the free library. Also, if the library is modified by someone else and passed on, the recipients should know that what they have is not the original version, so that the original author's reputation will not be affected by problems that might be introduced by others.\n\nFinally, software patents pose a constant threat to the existence of any free program. We wish to make sure that a company cannot effectively restrict the users of a free program by obtaining a restrictive license from a patent holder. Therefore, we insist that any patent license obtained for a version of the library must be consistent with the full freedom of use specified in this license.\n\nMost GNU software, including some libraries, is covered by the ordinary GNU General Public License. This license, the GNU Lesser General Public License, applies to certain designated libraries, and is quite different from the ordinary General Public License. We use this license for certain libraries in order to permit linking those libraries into non-free programs.\n\nWhen a program is linked with a library, whether statically or using a shared library, the combination of the two is legally speaking a combined work, a derivative of the original library. The ordinary General Public License therefore permits such linking only if the entire combination fits its criteria of freedom. The Lesser General Public License permits more lax criteria for linking other code with the library.\n\nWe call this license the \"Lesser\" General Public License because it does Less to protect the user's freedom than the ordinary General Public License. It also provides other free software developers Less of an advantage over competing non-free programs. These disadvantages are the reason we use the ordinary General Public License for many libraries. However, the Lesser license provides advantages in certain special circumstances.\n\nFor example, on rare occasions, there may be a special need to encourage the widest possible use of a certain library, so that it becomes a de-facto standard. To achieve this, non-free programs must be allowed to use the library. A more frequent case is that a free library does the same job as widely used non-free libraries. In this case, there is little to gain by limiting the free library to free software only, so we use the Lesser General Public License.\n\nIn other cases, permission to use a particular library in non-free programs enables a greater number of people to use a large body of free software. For example, permission to use the GNU C Library in non-free programs enables many more people to use the whole GNU operating system, as well as its variant, the GNU/Linux operating system.\n\nAlthough the Lesser General Public License is Less protective of the users' freedom, it does ensure that the user of a program that is linked with the Library has the freedom and the wherewithal to run that program using a modified version of the Library.\n\nThe precise terms and conditions for copying, distribution and modification follow. Pay close attention to the difference between a \"work based on the library\" and a \"work that uses the library\". The former contains code derived from the library, whereas the latter must be combined with the library in order to run.\n\nTERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n0. This License Agreement applies to any software library or other program which contains a notice placed by the copyright holder or other authorized party saying it may be distributed under the terms of this Lesser General Public License (also called \"this License\"). Each licensee is addressed as \"you\".\nA \"library\" means a collection of software functions and/or data prepared so as to be conveniently linked with application programs (which use some of those functions and data) to form executables.\n\nThe \"Library\", below, refers to any such software library or work which has been distributed under these terms. A \"work based on the Library\" means either the Library or any derivative work under copyright law: that is to say, a work containing the Library or a portion of it, either verbatim or with modifications and/or translated straightforwardly into another language. (Hereinafter, translation is included without limitation in the term \"modification\".)\n\n\"Source code\" for a work means the preferred form of the work for making modifications to it. For a library, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the library.\n\nActivities other than copying, distribution and modification are not covered by this License; they are outside its scope. The act of running a program using the Library is not restricted, and output from such a program is covered only if its contents constitute a work based on the Library (independent of the use of the Library in a tool for writing it). Whether that is true depends on what the Library does and what the program that uses the Library does.\n1. You may copy and distribute verbatim copies of the Library's complete source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and distribute a copy of this License along with the Library.\n\nYou may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee.\n\n2. You may modify your copy or copies of the Library or any portion of it, thus forming a work based on the Library, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions:\n\n*    a) The modified work must itself be a software library.\n*    b) You must cause the files modified to carry prominent notices stating that you changed the files and the date of any change.\n*    c) You must cause the whole of the work to be licensed at no charge to all third parties under the terms of this License.\n*    d) If a facility in the modified Library refers to a function or a table of data to be supplied by an application program that uses the facility, other than as an argument passed when the facility is invoked, then you must make a good faith effort to ensure that, in the event an application does not supply such function or table, the facility still operates, and performs whatever part of its purpose remains meaningful.\n\n(For example, a function in a library to compute square roots has a purpose that is entirely well-defined independent of the application. Therefore, Subsection 2d requires that any application-supplied function or table used by this function must be optional: if the application does not supply it, the square root function must still compute square roots.)\n\nThese requirements apply to the modified work as a whole. If identifiable sections of that work are not derived from the Library, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works. But when you distribute the same sections as part of a whole which is a work based on the Library, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Library.\n\nIn addition, mere aggregation of another work not based on the Library with the Library (or with a work based on the Library) on a volume of a storage or distribution medium does not bring the other work under the scope of this License.\n\n3. You may opt to apply the terms of the ordinary GNU General Public License instead of this License to a given copy of the Library. To do this, you must alter all the notices that refer to this License, so that they refer to the ordinary GNU General Public License, version 2, instead of to this License. (If a newer version than version 2 of the ordinary GNU General Public License has appeared, then you can specify that version instead if you wish.) Do not make any other change in these notices.\n\nOnce this change is made in a given copy, it is irreversible for that copy, so the ordinary GNU General Public License applies to all subsequent copies and derivative works made from that copy.\n\nThis option is useful when you wish to copy part of the code of the Library into a program that is not a library.\n\n4. You may copy and distribute the Library (or a portion or derivative of it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange.\n\nIf distribution of object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place satisfies the requirement to distribute the source code, even though third parties are not compelled to copy the source along with the object code.\n\n5. A program that contains no derivative of any portion of the Library, but is designed to work with the Library by being compiled or linked with it, is called a \"work that uses the Library\". Such a work, in isolation, is not a derivative work of the Library, and therefore falls outside the scope of this License.\n\nHowever, linking a \"work that uses the Library\" with the Library creates an executable that is a derivative of the Library (because it contains portions of the Library), rather than a \"work that uses the library\". The executable is therefore covered by this License. Section 6 states terms for distribution of such executables.\n\nWhen a \"work that uses the Library\" uses material from a header file that is part of the Library, the object code for the work may be a derivative work of the Library even though the source code is not. Whether this is true is especially significant if the work can be linked without the Library, or if the work is itself a library. The threshold for this to be true is not precisely defined by law.\n\nIf such an object file uses only numerical parameters, data structure layouts and accessors, and small macros and small inline functions (ten lines or less in length), then the use of the object file is unrestricted, regardless of whether it is legally a derivative work. (Executables containing this object code plus portions of the Library will still fall under Section 6.)\n\nOtherwise, if the work is a derivative of the Library, you may distribute the object code for the work under the terms of Section 6. Any executables containing that work also fall under Section 6, whether or not they are linked directly with the Library itself.\n\n6. As an exception to the Sections above, you may also combine or link a \"work that uses the Library\" with the Library to produce a work containing portions of the Library, and distribute that work under terms of your choice, provided that the terms permit modification of the work for the customer's own use and reverse engineering for debugging such modifications.\n\nYou must give prominent notice with each copy of the work that the Library is used in it and that the Library and its use are covered by this License. You must supply a copy of this License. If the work during execution displays copyright notices, you must include the copyright notice for the Library among them, as well as a reference directing the user to the copy of this License. Also, you must do one of these things:\n\n*    a) Accompany the work with the complete corresponding machine-readable source code for the Library including whatever changes were used in the work (which must be distributed under Sections 1 and 2 above); and, if the work is an executable linked with the Library, with the complete machine-readable \"work that uses the Library\", as object code and/or source code, so that the user can modify the Library and then relink to produce a modified executable containing the modified Library. (It is understood that the user who changes the contents of definitions files in the Library will not necessarily be able to recompile the application to use the modified definitions.)\n*    b) Use a suitable shared library mechanism for linking with the Library. A suitable mechanism is one that (1) uses at run time a copy of the library already present on the user's computer system, rather than copying library functions into the executable, and (2) will operate properly with a modified version of the library, if the user installs one, as long as the modified version is interface-compatible with the version that the work was made with.\n*    c) Accompany the work with a written offer, valid for at least three years, to give the same user the materials specified in Subsection 6a, above, for a charge no more than the cost of performing this distribution.\n*    d) If distribution of the work is made by offering access to copy from a designated place, offer equivalent access to copy the above specified materials from the same place.\n*    e) Verify that the user has already received a copy of these materials or that you have already sent this user a copy.\n\nFor an executable, the required form of the \"work that uses the Library\" must include any data and utility programs needed for reproducing the executable from it. However, as a special exception, the materials to be distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable.\n\nIt may happen that this requirement contradicts the license restrictions of other proprietary libraries that do not normally accompany the operating system. Such a contradiction means you cannot use both them and the Library together in an executable that you distribute.\n\n7. You may place library facilities that are a work based on the Library side-by-side in a single library together with other library facilities not covered by this License, and distribute such a combined library, provided that the separate distribution of the work based on the Library and of the other library facilities is otherwise permitted, and provided that you do these two things:\n\n*    a) Accompany the combined library with a copy of the same work based on the Library, uncombined with any other library facilities. This must be distributed under the terms of the Sections above.\n*    b) Give prominent notice with the combined library of the fact that part of it is a work based on the Library, and explaining where to find the accompanying uncombined form of the same work.\n\n8. You may not copy, modify, sublicense, link with, or distribute the Library except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense, link with, or distribute the Library is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance.\n\n9. You are not required to accept this License, since you have not signed it. However, nothing else grants you permission to modify or distribute the Library or its derivative works. These actions are prohibited by law if you do not accept this License. Therefore, by modifying or distributing the Library (or any work based on the Library), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Library or works based on it.\n\n10. Each time you redistribute the Library (or any work based on the Library), the recipient automatically receives a license from the original licensor to copy, distribute, link with or modify the Library subject to these terms and conditions. You may not impose any further restrictions on the recipients' exercise of the rights granted herein. You are not responsible for enforcing compliance by third parties with this License.\n\n11. If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Library at all. For example, if a patent license would not permit royalty-free redistribution of the Library by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Library.\n\nIf any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply, and the section as a whole is intended to apply in other circumstances.\n\nIt is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system which is implemented by public license practices. Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice.\n\nThis section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License.\n\n12. If the distribution and/or use of the Library is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Library under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded. In such case, this License incorporates the limitation as if written in the body of this License.\n\n13. The Free Software Foundation may publish revised and/or new versions of the Lesser General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.\n\nEach version is given a distinguishing version number. If the Library specifies a version number of this License which applies to it and \"any later version\", you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation. If the Library does not specify a license version number, you may choose any version ever published by the Free Software Foundation.\n\n14. If you wish to incorporate parts of the Library into other free programs whose distribution conditions are incompatible with these, write to the author to ask for permission. For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this. Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally.\n\nNO WARRANTY\n\n15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE LIBRARY \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE LIBRARY IS WITH YOU. SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n\nEND OF TERMS AND CONDITIONS\n\n\nHow to Apply These Terms to Your New Libraries\n\nIf you develop a new library, and you want it to be of the greatest possible use to the public, we recommend making it free software that everyone can redistribute and change. You can do so by permitting redistribution under these terms (or, alternatively, under the terms of the ordinary General Public License).\n\nTo apply these terms, attach the following notices to the library.  It is safest to attach them to the start of each source file to most effectively convey the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.\n\n<one line to give the library's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.\n\nThis library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\nAlso add information on how to contact you by electronic and paper mail.\n\nYou should also get your employer (if you work as a programmer) or your school, if any, to sign a \"copyright disclaimer\" for the library, if necessary.  Here is a sample; alter the names:\n\nYoyodyne, Inc., hereby disclaims all copyright interest in the library `Frob' (a library for tweaking knobs) written by James Random Hacker.\n\n<signature of Ty Coon>, 1 April 1990\nTy Coon, President of Vice\n\nThat's all there is to it!\n"
this.contributors[] contains no nulls and has only one value, of length 85
this.contributors[].getClass().getName() == [org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor]
this.contributors[].getClass().getName() elements == org.jfree.chart.ui.Contributor.class
this.contributors.getClass().getName() == java.util.Arrays$ArrayList.class
this.copyright.toString == "(C)opyright 2000-2007, by Object Refinery Limited and Contributors"
this.libraries has only one value
this.libraries[] == []
this.libraries[].getClass().getName() == []
this.libraries.getClass().getName() == java.util.ArrayList.class
this.optionalLibraries has only one value
this.optionalLibraries[] == []
this.optionalLibraries[].getClass().getName() == []
this.optionalLibraries.getClass().getName() == java.util.ArrayList.class
this.name.toString == "JFreeChart"
this.version.toString == "1.2.0-pre"
this.licenceName.toString == "LGPL"
this.info.toString == "http://www.jfree.org/jfreechart/index.html"
size(this.contributors[]) == 85
===========================================================================
org.jfree.chart.ui.ProjectInfo.ProjectInfo():::EXIT
this.licenceText == null
this.contributors == null
this.copyright == null
this.name == null
this.version == null
this.licenceName == null
this.info == null
===========================================================================
org.jfree.chart.ui.ProjectInfo.setContributors(java.util.List):::ENTER
this.licenceText has only one value
this.contributors == null
this.copyright has only one value
this.name has only one value
this.version has only one value
this.licenceName has only one value
this.info has only one value
contributors has only one value
contributors[] contains no nulls and has only one value, of length 85
contributors[].getClass().getName() == [org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor]
contributors[].getClass().getName() elements == org.jfree.chart.ui.Contributor.class
contributors.getClass().getName() == java.util.Arrays$ArrayList.class
size(contributors[]) == 85
===========================================================================
org.jfree.chart.ui.ProjectInfo.setContributors(java.util.List):::EXIT
this.logo == orig(this.logo)
this.licenceText == orig(this.licenceText)
this.licenceText.toString == orig(this.licenceText.toString)
this.copyright == orig(this.copyright)
this.copyright.toString == orig(this.copyright.toString)
this.libraries == orig(this.libraries)
this.libraries[] == orig(this.libraries[])
this.libraries.getClass().getName() == orig(this.libraries.getClass().getName())
this.optionalLibraries == orig(this.optionalLibraries)
this.optionalLibraries[] == orig(this.optionalLibraries[])
this.optionalLibraries.getClass().getName() == orig(this.optionalLibraries.getClass().getName())
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.version == orig(this.version)
this.version.toString == orig(this.version.toString)
this.licenceName == orig(this.licenceName)
this.licenceName.toString == orig(this.licenceName.toString)
this.info == orig(this.info)
this.info.toString == orig(this.info.toString)
contributors[] == orig(contributors[])
this.licenceText has only one value
this.contributors has only one value
this.copyright has only one value
this.name has only one value
this.version has only one value
this.licenceName has only one value
this.info has only one value
contributors[] contains no nulls and has only one value, of length 85
contributors[].getClass().getName() == [org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor, org.jfree.chart.ui.Contributor]
contributors[].getClass().getName() elements == org.jfree.chart.ui.Contributor.class
===========================================================================
org.jfree.chart.ui.ProjectInfo.setLicenceText(java.lang.String):::ENTER
this.licenceText == null
this.contributors == null
this.copyright has only one value
this.name has only one value
this.version has only one value
this.licenceName has only one value
this.info has only one value
licenceText has only one value
licenceText.toString == "GNU LESSER GENERAL PUBLIC LICENSE\n\nVersion 2.1, February 1999\n\nCopyright (C) 1991, 1999 Free Software Foundation, Inc.\n59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\nEveryone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.\n\n[This is the first released version of the Lesser GPL.  It also counts as the successor of the GNU Library Public License, version 2, hence the version number 2.1.]\n\nPreamble\n\nThe licenses for most software are designed to take away your freedom to share and change it. By contrast, the GNU General Public Licenses are intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users.\n\nThis license, the Lesser General Public License, applies to some specially designated software packages--typically libraries--of the Free Software Foundation and other authors who decide to use it. You can use it too, but we suggest you first think carefully about whether this license or the ordinary General Public License is the better strategy to use in any particular case, based on the explanations below.\n\nWhen we speak of free software, we are referring to freedom of use, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish); that you receive source code or can get it if you want it; that you can change the software and use pieces of it in new free programs; and that you are informed that you can do these things.\n\nTo protect your rights, we need to make restrictions that forbid distributors to deny you these rights or to ask you to surrender these rights. These restrictions translate to certain responsibilities for you if you distribute copies of the library or if you modify it.\n\nFor example, if you distribute copies of the library, whether gratis or for a fee, you must give the recipients all the rights that we gave you. You must make sure that they, too, receive or can get the source code. If you link other code with the library, you must provide complete object files to the recipients, so that they can relink them with the library after making changes to the library and recompiling it. And you must show them these terms so they know their rights.\n\nWe protect your rights with a two-step method: (1) we copyright the library, and (2) we offer you this license, which gives you legal permission to copy, distribute and/or modify the library.\n\nTo protect each distributor, we want to make it very clear that there is no warranty for the free library. Also, if the library is modified by someone else and passed on, the recipients should know that what they have is not the original version, so that the original author's reputation will not be affected by problems that might be introduced by others.\n\nFinally, software patents pose a constant threat to the existence of any free program. We wish to make sure that a company cannot effectively restrict the users of a free program by obtaining a restrictive license from a patent holder. Therefore, we insist that any patent license obtained for a version of the library must be consistent with the full freedom of use specified in this license.\n\nMost GNU software, including some libraries, is covered by the ordinary GNU General Public License. This license, the GNU Lesser General Public License, applies to certain designated libraries, and is quite different from the ordinary General Public License. We use this license for certain libraries in order to permit linking those libraries into non-free programs.\n\nWhen a program is linked with a library, whether statically or using a shared library, the combination of the two is legally speaking a combined work, a derivative of the original library. The ordinary General Public License therefore permits such linking only if the entire combination fits its criteria of freedom. The Lesser General Public License permits more lax criteria for linking other code with the library.\n\nWe call this license the \"Lesser\" General Public License because it does Less to protect the user's freedom than the ordinary General Public License. It also provides other free software developers Less of an advantage over competing non-free programs. These disadvantages are the reason we use the ordinary General Public License for many libraries. However, the Lesser license provides advantages in certain special circumstances.\n\nFor example, on rare occasions, there may be a special need to encourage the widest possible use of a certain library, so that it becomes a de-facto standard. To achieve this, non-free programs must be allowed to use the library. A more frequent case is that a free library does the same job as widely used non-free libraries. In this case, there is little to gain by limiting the free library to free software only, so we use the Lesser General Public License.\n\nIn other cases, permission to use a particular library in non-free programs enables a greater number of people to use a large body of free software. For example, permission to use the GNU C Library in non-free programs enables many more people to use the whole GNU operating system, as well as its variant, the GNU/Linux operating system.\n\nAlthough the Lesser General Public License is Less protective of the users' freedom, it does ensure that the user of a program that is linked with the Library has the freedom and the wherewithal to run that program using a modified version of the Library.\n\nThe precise terms and conditions for copying, distribution and modification follow. Pay close attention to the difference between a \"work based on the library\" and a \"work that uses the library\". The former contains code derived from the library, whereas the latter must be combined with the library in order to run.\n\nTERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n0. This License Agreement applies to any software library or other program which contains a notice placed by the copyright holder or other authorized party saying it may be distributed under the terms of this Lesser General Public License (also called \"this License\"). Each licensee is addressed as \"you\".\nA \"library\" means a collection of software functions and/or data prepared so as to be conveniently linked with application programs (which use some of those functions and data) to form executables.\n\nThe \"Library\", below, refers to any such software library or work which has been distributed under these terms. A \"work based on the Library\" means either the Library or any derivative work under copyright law: that is to say, a work containing the Library or a portion of it, either verbatim or with modifications and/or translated straightforwardly into another language. (Hereinafter, translation is included without limitation in the term \"modification\".)\n\n\"Source code\" for a work means the preferred form of the work for making modifications to it. For a library, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the library.\n\nActivities other than copying, distribution and modification are not covered by this License; they are outside its scope. The act of running a program using the Library is not restricted, and output from such a program is covered only if its contents constitute a work based on the Library (independent of the use of the Library in a tool for writing it). Whether that is true depends on what the Library does and what the program that uses the Library does.\n1. You may copy and distribute verbatim copies of the Library's complete source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and distribute a copy of this License along with the Library.\n\nYou may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee.\n\n2. You may modify your copy or copies of the Library or any portion of it, thus forming a work based on the Library, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions:\n\n*    a) The modified work must itself be a software library.\n*    b) You must cause the files modified to carry prominent notices stating that you changed the files and the date of any change.\n*    c) You must cause the whole of the work to be licensed at no charge to all third parties under the terms of this License.\n*    d) If a facility in the modified Library refers to a function or a table of data to be supplied by an application program that uses the facility, other than as an argument passed when the facility is invoked, then you must make a good faith effort to ensure that, in the event an application does not supply such function or table, the facility still operates, and performs whatever part of its purpose remains meaningful.\n\n(For example, a function in a library to compute square roots has a purpose that is entirely well-defined independent of the application. Therefore, Subsection 2d requires that any application-supplied function or table used by this function must be optional: if the application does not supply it, the square root function must still compute square roots.)\n\nThese requirements apply to the modified work as a whole. If identifiable sections of that work are not derived from the Library, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works. But when you distribute the same sections as part of a whole which is a work based on the Library, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Library.\n\nIn addition, mere aggregation of another work not based on the Library with the Library (or with a work based on the Library) on a volume of a storage or distribution medium does not bring the other work under the scope of this License.\n\n3. You may opt to apply the terms of the ordinary GNU General Public License instead of this License to a given copy of the Library. To do this, you must alter all the notices that refer to this License, so that they refer to the ordinary GNU General Public License, version 2, instead of to this License. (If a newer version than version 2 of the ordinary GNU General Public License has appeared, then you can specify that version instead if you wish.) Do not make any other change in these notices.\n\nOnce this change is made in a given copy, it is irreversible for that copy, so the ordinary GNU General Public License applies to all subsequent copies and derivative works made from that copy.\n\nThis option is useful when you wish to copy part of the code of the Library into a program that is not a library.\n\n4. You may copy and distribute the Library (or a portion or derivative of it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange.\n\nIf distribution of object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place satisfies the requirement to distribute the source code, even though third parties are not compelled to copy the source along with the object code.\n\n5. A program that contains no derivative of any portion of the Library, but is designed to work with the Library by being compiled or linked with it, is called a \"work that uses the Library\". Such a work, in isolation, is not a derivative work of the Library, and therefore falls outside the scope of this License.\n\nHowever, linking a \"work that uses the Library\" with the Library creates an executable that is a derivative of the Library (because it contains portions of the Library), rather than a \"work that uses the library\". The executable is therefore covered by this License. Section 6 states terms for distribution of such executables.\n\nWhen a \"work that uses the Library\" uses material from a header file that is part of the Library, the object code for the work may be a derivative work of the Library even though the source code is not. Whether this is true is especially significant if the work can be linked without the Library, or if the work is itself a library. The threshold for this to be true is not precisely defined by law.\n\nIf such an object file uses only numerical parameters, data structure layouts and accessors, and small macros and small inline functions (ten lines or less in length), then the use of the object file is unrestricted, regardless of whether it is legally a derivative work. (Executables containing this object code plus portions of the Library will still fall under Section 6.)\n\nOtherwise, if the work is a derivative of the Library, you may distribute the object code for the work under the terms of Section 6. Any executables containing that work also fall under Section 6, whether or not they are linked directly with the Library itself.\n\n6. As an exception to the Sections above, you may also combine or link a \"work that uses the Library\" with the Library to produce a work containing portions of the Library, and distribute that work under terms of your choice, provided that the terms permit modification of the work for the customer's own use and reverse engineering for debugging such modifications.\n\nYou must give prominent notice with each copy of the work that the Library is used in it and that the Library and its use are covered by this License. You must supply a copy of this License. If the work during execution displays copyright notices, you must include the copyright notice for the Library among them, as well as a reference directing the user to the copy of this License. Also, you must do one of these things:\n\n*    a) Accompany the work with the complete corresponding machine-readable source code for the Library including whatever changes were used in the work (which must be distributed under Sections 1 and 2 above); and, if the work is an executable linked with the Library, with the complete machine-readable \"work that uses the Library\", as object code and/or source code, so that the user can modify the Library and then relink to produce a modified executable containing the modified Library. (It is understood that the user who changes the contents of definitions files in the Library will not necessarily be able to recompile the application to use the modified definitions.)\n*    b) Use a suitable shared library mechanism for linking with the Library. A suitable mechanism is one that (1) uses at run time a copy of the library already present on the user's computer system, rather than copying library functions into the executable, and (2) will operate properly with a modified version of the library, if the user installs one, as long as the modified version is interface-compatible with the version that the work was made with.\n*    c) Accompany the work with a written offer, valid for at least three years, to give the same user the materials specified in Subsection 6a, above, for a charge no more than the cost of performing this distribution.\n*    d) If distribution of the work is made by offering access to copy from a designated place, offer equivalent access to copy the above specified materials from the same place.\n*    e) Verify that the user has already received a copy of these materials or that you have already sent this user a copy.\n\nFor an executable, the required form of the \"work that uses the Library\" must include any data and utility programs needed for reproducing the executable from it. However, as a special exception, the materials to be distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable.\n\nIt may happen that this requirement contradicts the license restrictions of other proprietary libraries that do not normally accompany the operating system. Such a contradiction means you cannot use both them and the Library together in an executable that you distribute.\n\n7. You may place library facilities that are a work based on the Library side-by-side in a single library together with other library facilities not covered by this License, and distribute such a combined library, provided that the separate distribution of the work based on the Library and of the other library facilities is otherwise permitted, and provided that you do these two things:\n\n*    a) Accompany the combined library with a copy of the same work based on the Library, uncombined with any other library facilities. This must be distributed under the terms of the Sections above.\n*    b) Give prominent notice with the combined library of the fact that part of it is a work based on the Library, and explaining where to find the accompanying uncombined form of the same work.\n\n8. You may not copy, modify, sublicense, link with, or distribute the Library except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense, link with, or distribute the Library is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance.\n\n9. You are not required to accept this License, since you have not signed it. However, nothing else grants you permission to modify or distribute the Library or its derivative works. These actions are prohibited by law if you do not accept this License. Therefore, by modifying or distributing the Library (or any work based on the Library), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Library or works based on it.\n\n10. Each time you redistribute the Library (or any work based on the Library), the recipient automatically receives a license from the original licensor to copy, distribute, link with or modify the Library subject to these terms and conditions. You may not impose any further restrictions on the recipients' exercise of the rights granted herein. You are not responsible for enforcing compliance by third parties with this License.\n\n11. If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Library at all. For example, if a patent license would not permit royalty-free redistribution of the Library by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Library.\n\nIf any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply, and the section as a whole is intended to apply in other circumstances.\n\nIt is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system which is implemented by public license practices. Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice.\n\nThis section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License.\n\n12. If the distribution and/or use of the Library is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Library under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded. In such case, this License incorporates the limitation as if written in the body of this License.\n\n13. The Free Software Foundation may publish revised and/or new versions of the Lesser General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.\n\nEach version is given a distinguishing version number. If the Library specifies a version number of this License which applies to it and \"any later version\", you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation. If the Library does not specify a license version number, you may choose any version ever published by the Free Software Foundation.\n\n14. If you wish to incorporate parts of the Library into other free programs whose distribution conditions are incompatible with these, write to the author to ask for permission. For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this. Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally.\n\nNO WARRANTY\n\n15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE LIBRARY \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE LIBRARY IS WITH YOU. SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n\nEND OF TERMS AND CONDITIONS\n\n\nHow to Apply These Terms to Your New Libraries\n\nIf you develop a new library, and you want it to be of the greatest possible use to the public, we recommend making it free software that everyone can redistribute and change. You can do so by permitting redistribution under these terms (or, alternatively, under the terms of the ordinary General Public License).\n\nTo apply these terms, attach the following notices to the library.  It is safest to attach them to the start of each source file to most effectively convey the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.\n\n<one line to give the library's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.\n\nThis library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\nAlso add information on how to contact you by electronic and paper mail.\n\nYou should also get your employer (if you work as a programmer) or your school, if any, to sign a \"copyright disclaimer\" for the library, if necessary.  Here is a sample; alter the names:\n\nYoyodyne, Inc., hereby disclaims all copyright interest in the library `Frob' (a library for tweaking knobs) written by James Random Hacker.\n\n<signature of Ty Coon>, 1 April 1990\nTy Coon, President of Vice\n\nThat's all there is to it!\n"
===========================================================================
org.jfree.chart.ui.ProjectInfo.setLicenceText(java.lang.String):::EXIT
this.logo == orig(this.logo)
this.contributors == orig(this.contributors)
this.copyright == orig(this.copyright)
this.copyright.toString == orig(this.copyright.toString)
this.libraries == orig(this.libraries)
this.libraries[] == orig(this.libraries[])
this.libraries.getClass().getName() == orig(this.libraries.getClass().getName())
this.optionalLibraries == orig(this.optionalLibraries)
this.optionalLibraries[] == orig(this.optionalLibraries[])
this.optionalLibraries.getClass().getName() == orig(this.optionalLibraries.getClass().getName())
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.version == orig(this.version)
this.version.toString == orig(this.version.toString)
this.licenceName == orig(this.licenceName)
this.licenceName.toString == orig(this.licenceName.toString)
this.info == orig(this.info)
this.info.toString == orig(this.info.toString)
licenceText.toString == orig(licenceText.toString)
this.licenceText has only one value
this.contributors == null
this.copyright has only one value
this.name has only one value
this.version has only one value
this.licenceName has only one value
this.info has only one value
licenceText.toString == "GNU LESSER GENERAL PUBLIC LICENSE\n\nVersion 2.1, February 1999\n\nCopyright (C) 1991, 1999 Free Software Foundation, Inc.\n59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\nEveryone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.\n\n[This is the first released version of the Lesser GPL.  It also counts as the successor of the GNU Library Public License, version 2, hence the version number 2.1.]\n\nPreamble\n\nThe licenses for most software are designed to take away your freedom to share and change it. By contrast, the GNU General Public Licenses are intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users.\n\nThis license, the Lesser General Public License, applies to some specially designated software packages--typically libraries--of the Free Software Foundation and other authors who decide to use it. You can use it too, but we suggest you first think carefully about whether this license or the ordinary General Public License is the better strategy to use in any particular case, based on the explanations below.\n\nWhen we speak of free software, we are referring to freedom of use, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish); that you receive source code or can get it if you want it; that you can change the software and use pieces of it in new free programs; and that you are informed that you can do these things.\n\nTo protect your rights, we need to make restrictions that forbid distributors to deny you these rights or to ask you to surrender these rights. These restrictions translate to certain responsibilities for you if you distribute copies of the library or if you modify it.\n\nFor example, if you distribute copies of the library, whether gratis or for a fee, you must give the recipients all the rights that we gave you. You must make sure that they, too, receive or can get the source code. If you link other code with the library, you must provide complete object files to the recipients, so that they can relink them with the library after making changes to the library and recompiling it. And you must show them these terms so they know their rights.\n\nWe protect your rights with a two-step method: (1) we copyright the library, and (2) we offer you this license, which gives you legal permission to copy, distribute and/or modify the library.\n\nTo protect each distributor, we want to make it very clear that there is no warranty for the free library. Also, if the library is modified by someone else and passed on, the recipients should know that what they have is not the original version, so that the original author's reputation will not be affected by problems that might be introduced by others.\n\nFinally, software patents pose a constant threat to the existence of any free program. We wish to make sure that a company cannot effectively restrict the users of a free program by obtaining a restrictive license from a patent holder. Therefore, we insist that any patent license obtained for a version of the library must be consistent with the full freedom of use specified in this license.\n\nMost GNU software, including some libraries, is covered by the ordinary GNU General Public License. This license, the GNU Lesser General Public License, applies to certain designated libraries, and is quite different from the ordinary General Public License. We use this license for certain libraries in order to permit linking those libraries into non-free programs.\n\nWhen a program is linked with a library, whether statically or using a shared library, the combination of the two is legally speaking a combined work, a derivative of the original library. The ordinary General Public License therefore permits such linking only if the entire combination fits its criteria of freedom. The Lesser General Public License permits more lax criteria for linking other code with the library.\n\nWe call this license the \"Lesser\" General Public License because it does Less to protect the user's freedom than the ordinary General Public License. It also provides other free software developers Less of an advantage over competing non-free programs. These disadvantages are the reason we use the ordinary General Public License for many libraries. However, the Lesser license provides advantages in certain special circumstances.\n\nFor example, on rare occasions, there may be a special need to encourage the widest possible use of a certain library, so that it becomes a de-facto standard. To achieve this, non-free programs must be allowed to use the library. A more frequent case is that a free library does the same job as widely used non-free libraries. In this case, there is little to gain by limiting the free library to free software only, so we use the Lesser General Public License.\n\nIn other cases, permission to use a particular library in non-free programs enables a greater number of people to use a large body of free software. For example, permission to use the GNU C Library in non-free programs enables many more people to use the whole GNU operating system, as well as its variant, the GNU/Linux operating system.\n\nAlthough the Lesser General Public License is Less protective of the users' freedom, it does ensure that the user of a program that is linked with the Library has the freedom and the wherewithal to run that program using a modified version of the Library.\n\nThe precise terms and conditions for copying, distribution and modification follow. Pay close attention to the difference between a \"work based on the library\" and a \"work that uses the library\". The former contains code derived from the library, whereas the latter must be combined with the library in order to run.\n\nTERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n0. This License Agreement applies to any software library or other program which contains a notice placed by the copyright holder or other authorized party saying it may be distributed under the terms of this Lesser General Public License (also called \"this License\"). Each licensee is addressed as \"you\".\nA \"library\" means a collection of software functions and/or data prepared so as to be conveniently linked with application programs (which use some of those functions and data) to form executables.\n\nThe \"Library\", below, refers to any such software library or work which has been distributed under these terms. A \"work based on the Library\" means either the Library or any derivative work under copyright law: that is to say, a work containing the Library or a portion of it, either verbatim or with modifications and/or translated straightforwardly into another language. (Hereinafter, translation is included without limitation in the term \"modification\".)\n\n\"Source code\" for a work means the preferred form of the work for making modifications to it. For a library, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the library.\n\nActivities other than copying, distribution and modification are not covered by this License; they are outside its scope. The act of running a program using the Library is not restricted, and output from such a program is covered only if its contents constitute a work based on the Library (independent of the use of the Library in a tool for writing it). Whether that is true depends on what the Library does and what the program that uses the Library does.\n1. You may copy and distribute verbatim copies of the Library's complete source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and distribute a copy of this License along with the Library.\n\nYou may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee.\n\n2. You may modify your copy or copies of the Library or any portion of it, thus forming a work based on the Library, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions:\n\n*    a) The modified work must itself be a software library.\n*    b) You must cause the files modified to carry prominent notices stating that you changed the files and the date of any change.\n*    c) You must cause the whole of the work to be licensed at no charge to all third parties under the terms of this License.\n*    d) If a facility in the modified Library refers to a function or a table of data to be supplied by an application program that uses the facility, other than as an argument passed when the facility is invoked, then you must make a good faith effort to ensure that, in the event an application does not supply such function or table, the facility still operates, and performs whatever part of its purpose remains meaningful.\n\n(For example, a function in a library to compute square roots has a purpose that is entirely well-defined independent of the application. Therefore, Subsection 2d requires that any application-supplied function or table used by this function must be optional: if the application does not supply it, the square root function must still compute square roots.)\n\nThese requirements apply to the modified work as a whole. If identifiable sections of that work are not derived from the Library, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works. But when you distribute the same sections as part of a whole which is a work based on the Library, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Library.\n\nIn addition, mere aggregation of another work not based on the Library with the Library (or with a work based on the Library) on a volume of a storage or distribution medium does not bring the other work under the scope of this License.\n\n3. You may opt to apply the terms of the ordinary GNU General Public License instead of this License to a given copy of the Library. To do this, you must alter all the notices that refer to this License, so that they refer to the ordinary GNU General Public License, version 2, instead of to this License. (If a newer version than version 2 of the ordinary GNU General Public License has appeared, then you can specify that version instead if you wish.) Do not make any other change in these notices.\n\nOnce this change is made in a given copy, it is irreversible for that copy, so the ordinary GNU General Public License applies to all subsequent copies and derivative works made from that copy.\n\nThis option is useful when you wish to copy part of the code of the Library into a program that is not a library.\n\n4. You may copy and distribute the Library (or a portion or derivative of it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange.\n\nIf distribution of object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place satisfies the requirement to distribute the source code, even though third parties are not compelled to copy the source along with the object code.\n\n5. A program that contains no derivative of any portion of the Library, but is designed to work with the Library by being compiled or linked with it, is called a \"work that uses the Library\". Such a work, in isolation, is not a derivative work of the Library, and therefore falls outside the scope of this License.\n\nHowever, linking a \"work that uses the Library\" with the Library creates an executable that is a derivative of the Library (because it contains portions of the Library), rather than a \"work that uses the library\". The executable is therefore covered by this License. Section 6 states terms for distribution of such executables.\n\nWhen a \"work that uses the Library\" uses material from a header file that is part of the Library, the object code for the work may be a derivative work of the Library even though the source code is not. Whether this is true is especially significant if the work can be linked without the Library, or if the work is itself a library. The threshold for this to be true is not precisely defined by law.\n\nIf such an object file uses only numerical parameters, data structure layouts and accessors, and small macros and small inline functions (ten lines or less in length), then the use of the object file is unrestricted, regardless of whether it is legally a derivative work. (Executables containing this object code plus portions of the Library will still fall under Section 6.)\n\nOtherwise, if the work is a derivative of the Library, you may distribute the object code for the work under the terms of Section 6. Any executables containing that work also fall under Section 6, whether or not they are linked directly with the Library itself.\n\n6. As an exception to the Sections above, you may also combine or link a \"work that uses the Library\" with the Library to produce a work containing portions of the Library, and distribute that work under terms of your choice, provided that the terms permit modification of the work for the customer's own use and reverse engineering for debugging such modifications.\n\nYou must give prominent notice with each copy of the work that the Library is used in it and that the Library and its use are covered by this License. You must supply a copy of this License. If the work during execution displays copyright notices, you must include the copyright notice for the Library among them, as well as a reference directing the user to the copy of this License. Also, you must do one of these things:\n\n*    a) Accompany the work with the complete corresponding machine-readable source code for the Library including whatever changes were used in the work (which must be distributed under Sections 1 and 2 above); and, if the work is an executable linked with the Library, with the complete machine-readable \"work that uses the Library\", as object code and/or source code, so that the user can modify the Library and then relink to produce a modified executable containing the modified Library. (It is understood that the user who changes the contents of definitions files in the Library will not necessarily be able to recompile the application to use the modified definitions.)\n*    b) Use a suitable shared library mechanism for linking with the Library. A suitable mechanism is one that (1) uses at run time a copy of the library already present on the user's computer system, rather than copying library functions into the executable, and (2) will operate properly with a modified version of the library, if the user installs one, as long as the modified version is interface-compatible with the version that the work was made with.\n*    c) Accompany the work with a written offer, valid for at least three years, to give the same user the materials specified in Subsection 6a, above, for a charge no more than the cost of performing this distribution.\n*    d) If distribution of the work is made by offering access to copy from a designated place, offer equivalent access to copy the above specified materials from the same place.\n*    e) Verify that the user has already received a copy of these materials or that you have already sent this user a copy.\n\nFor an executable, the required form of the \"work that uses the Library\" must include any data and utility programs needed for reproducing the executable from it. However, as a special exception, the materials to be distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable.\n\nIt may happen that this requirement contradicts the license restrictions of other proprietary libraries that do not normally accompany the operating system. Such a contradiction means you cannot use both them and the Library together in an executable that you distribute.\n\n7. You may place library facilities that are a work based on the Library side-by-side in a single library together with other library facilities not covered by this License, and distribute such a combined library, provided that the separate distribution of the work based on the Library and of the other library facilities is otherwise permitted, and provided that you do these two things:\n\n*    a) Accompany the combined library with a copy of the same work based on the Library, uncombined with any other library facilities. This must be distributed under the terms of the Sections above.\n*    b) Give prominent notice with the combined library of the fact that part of it is a work based on the Library, and explaining where to find the accompanying uncombined form of the same work.\n\n8. You may not copy, modify, sublicense, link with, or distribute the Library except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense, link with, or distribute the Library is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance.\n\n9. You are not required to accept this License, since you have not signed it. However, nothing else grants you permission to modify or distribute the Library or its derivative works. These actions are prohibited by law if you do not accept this License. Therefore, by modifying or distributing the Library (or any work based on the Library), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Library or works based on it.\n\n10. Each time you redistribute the Library (or any work based on the Library), the recipient automatically receives a license from the original licensor to copy, distribute, link with or modify the Library subject to these terms and conditions. You may not impose any further restrictions on the recipients' exercise of the rights granted herein. You are not responsible for enforcing compliance by third parties with this License.\n\n11. If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Library at all. For example, if a patent license would not permit royalty-free redistribution of the Library by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Library.\n\nIf any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply, and the section as a whole is intended to apply in other circumstances.\n\nIt is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system which is implemented by public license practices. Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice.\n\nThis section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License.\n\n12. If the distribution and/or use of the Library is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Library under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded. In such case, this License incorporates the limitation as if written in the body of this License.\n\n13. The Free Software Foundation may publish revised and/or new versions of the Lesser General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.\n\nEach version is given a distinguishing version number. If the Library specifies a version number of this License which applies to it and \"any later version\", you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation. If the Library does not specify a license version number, you may choose any version ever published by the Free Software Foundation.\n\n14. If you wish to incorporate parts of the Library into other free programs whose distribution conditions are incompatible with these, write to the author to ask for permission. For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this. Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally.\n\nNO WARRANTY\n\n15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE LIBRARY \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE LIBRARY IS WITH YOU. SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n\nEND OF TERMS AND CONDITIONS\n\n\nHow to Apply These Terms to Your New Libraries\n\nIf you develop a new library, and you want it to be of the greatest possible use to the public, we recommend making it free software that everyone can redistribute and change. You can do so by permitting redistribution under these terms (or, alternatively, under the terms of the ordinary General Public License).\n\nTo apply these terms, attach the following notices to the library.  It is safest to attach them to the start of each source file to most effectively convey the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.\n\n<one line to give the library's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.\n\nThis library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\nAlso add information on how to contact you by electronic and paper mail.\n\nYou should also get your employer (if you work as a programmer) or your school, if any, to sign a \"copyright disclaimer\" for the library, if necessary.  Here is a sample; alter the names:\n\nYoyodyne, Inc., hereby disclaims all copyright interest in the library `Frob' (a library for tweaking knobs) written by James Random Hacker.\n\n<signature of Ty Coon>, 1 April 1990\nTy Coon, President of Vice\n\nThat's all there is to it!\n"
===========================================================================
org.jfree.chart.ui.ProjectInfo.setLogo(java.awt.Image):::ENTER
this.licenceText == null
this.contributors == null
this.copyright has only one value
this.name has only one value
this.version has only one value
this.licenceName == null
this.info has only one value
logo == null
===========================================================================
org.jfree.chart.ui.ProjectInfo.setLogo(java.awt.Image):::EXIT
this.logo == orig(this.logo)
this.licenceText == orig(this.licenceText)
this.contributors == orig(this.contributors)
this.copyright == orig(this.copyright)
this.copyright.toString == orig(this.copyright.toString)
this.libraries == orig(this.libraries)
this.libraries[] == orig(this.libraries[])
this.libraries.getClass().getName() == orig(this.libraries.getClass().getName())
this.optionalLibraries == orig(this.optionalLibraries)
this.optionalLibraries[] == orig(this.optionalLibraries[])
this.optionalLibraries.getClass().getName() == orig(this.optionalLibraries.getClass().getName())
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.version == orig(this.version)
this.version.toString == orig(this.version.toString)
this.licenceName == orig(this.licenceName)
this.info == orig(this.info)
this.info.toString == orig(this.info.toString)
this.licenceText == null
this.contributors == null
this.copyright has only one value
this.name has only one value
this.version has only one value
this.licenceName == null
this.info has only one value
===========================================================================
org.jfree.chart.util.AbstractObjectList:::CLASS
===========================================================================
org.jfree.chart.util.AbstractObjectList:::OBJECT
this.objects != null
this.objects.getClass().getName() == java.lang.Object[].class
this.objects[] contains only nulls and has only one value, of length 8
this.objects[] elements == null
this.objects[].getClass().getName() == [null, null, null, null, null, null, null, null]
this.objects[].getClass().getName() elements == null
this.size == 0
this.increment == 8
size(this.objects[]) == 8
===========================================================================
org.jfree.chart.util.AbstractObjectList.AbstractObjectList():::EXIT
===========================================================================
org.jfree.chart.util.AbstractObjectList.AbstractObjectList(int):::ENTER
initialCapacity == 8
===========================================================================
org.jfree.chart.util.AbstractObjectList.AbstractObjectList(int):::EXIT
===========================================================================
org.jfree.chart.util.AbstractObjectList.AbstractObjectList(int, int):::ENTER
initialCapacity == 8
increment == 8
===========================================================================
org.jfree.chart.util.AbstractObjectList.AbstractObjectList(int, int):::EXIT
===========================================================================
org.jfree.chart.util.GradientPaintTransformType:::CLASS
===========================================================================
org.jfree.chart.util.GradientPaintTransformType:::OBJECT
===========================================================================
org.jfree.chart.util.GradientPaintTransformType.GradientPaintTransformType(java.lang.String):::ENTER
===========================================================================
org.jfree.chart.util.GradientPaintTransformType.GradientPaintTransformType(java.lang.String):::EXIT
this.name == orig(name)
name.toString == orig(name.toString)
===========================================================================
org.jfree.chart.util.HorizontalAlignment:::CLASS
===========================================================================
org.jfree.chart.util.HorizontalAlignment:::OBJECT
this.name.toString one of { "HorizontalAlignment.CENTER", "HorizontalAlignment.LEFT", "HorizontalAlignment.RIGHT" }
===========================================================================
org.jfree.chart.util.HorizontalAlignment.HorizontalAlignment(java.lang.String):::ENTER
name.toString one of { "HorizontalAlignment.CENTER", "HorizontalAlignment.LEFT", "HorizontalAlignment.RIGHT" }
===========================================================================
org.jfree.chart.util.HorizontalAlignment.HorizontalAlignment(java.lang.String):::EXIT
name.toString == orig(name.toString)
name.toString one of { "HorizontalAlignment.CENTER", "HorizontalAlignment.LEFT", "HorizontalAlignment.RIGHT" }
===========================================================================
org.jfree.chart.util.ObjectList:::CLASS
===========================================================================
org.jfree.chart.util.ObjectList:::OBJECT
this.objects.getClass().getName() == java.lang.Object[].class
this.objects[] contains only nulls and has only one value, of length 8
this.objects[] elements == null
this.objects[].getClass().getName() == [null, null, null, null, null, null, null, null]
this.objects[].getClass().getName() elements == null
this.size == 0
this.increment == 8
size(this.objects[]) == 8
===========================================================================
org.jfree.chart.util.ObjectList.ObjectList():::EXIT
===========================================================================
org.jfree.chart.util.ObjectUtilities:::CLASS
org.jfree.chart.util.ObjectUtilities.THREAD_CONTEXT == org.jfree.chart.util.ObjectUtilities.classLoaderSource
org.jfree.chart.util.ObjectUtilities.THREAD_CONTEXT has only one value
org.jfree.chart.util.ObjectUtilities.THREAD_CONTEXT.toString == "ThreadContext"
org.jfree.chart.util.ObjectUtilities.CLASS_CONTEXT has only one value
org.jfree.chart.util.ObjectUtilities.CLASS_CONTEXT.toString == "ClassContext"
org.jfree.chart.util.ObjectUtilities.classLoaderSource.toString == "ThreadContext"
org.jfree.chart.util.ObjectUtilities.classLoader == null
===========================================================================
org.jfree.chart.util.ObjectUtilities.class$(java.lang.String):::ENTER
org.jfree.chart.util.ObjectUtilities.class$org$jfree$chart$util$ObjectUtilities == null
x0 has only one value
x0.toString == "org.jfree.chart.util.ObjectUtilities"
===========================================================================
org.jfree.chart.util.ObjectUtilities.class$(java.lang.String):::EXIT
org.jfree.chart.util.ObjectUtilities.THREAD_CONTEXT == orig(org.jfree.chart.util.ObjectUtilities.THREAD_CONTEXT)
org.jfree.chart.util.ObjectUtilities.THREAD_CONTEXT == orig(org.jfree.chart.util.ObjectUtilities.classLoaderSource)
org.jfree.chart.util.ObjectUtilities.THREAD_CONTEXT.toString == orig(org.jfree.chart.util.ObjectUtilities.THREAD_CONTEXT.toString)
org.jfree.chart.util.ObjectUtilities.CLASS_CONTEXT == orig(org.jfree.chart.util.ObjectUtilities.CLASS_CONTEXT)
org.jfree.chart.util.ObjectUtilities.CLASS_CONTEXT.toString == orig(org.jfree.chart.util.ObjectUtilities.CLASS_CONTEXT.toString)
org.jfree.chart.util.ObjectUtilities.classLoaderSource.toString == orig(org.jfree.chart.util.ObjectUtilities.classLoaderSource.toString)
org.jfree.chart.util.ObjectUtilities.classLoader == orig(org.jfree.chart.util.ObjectUtilities.classLoader)
org.jfree.chart.util.ObjectUtilities.class$org$jfree$chart$util$ObjectUtilities == orig(org.jfree.chart.util.ObjectUtilities.class$org$jfree$chart$util$ObjectUtilities)
x0.toString == orig(x0.toString)
org.jfree.chart.util.ObjectUtilities.class$org$jfree$chart$util$ObjectUtilities == null
x0.toString == "org.jfree.chart.util.ObjectUtilities"
return has only one value
===========================================================================
org.jfree.chart.util.ObjectUtilities.getClassLoader(java.lang.Class):::ENTER
org.jfree.chart.util.ObjectUtilities.class$org$jfree$chart$util$ObjectUtilities == c
org.jfree.chart.util.ObjectUtilities.class$org$jfree$chart$util$ObjectUtilities has only one value
===========================================================================
org.jfree.chart.util.ObjectUtilities.getClassLoader(java.lang.Class):::EXIT262
===========================================================================
org.jfree.chart.util.ObjectUtilities.getClassLoader(java.lang.Class):::EXIT
org.jfree.chart.util.ObjectUtilities.THREAD_CONTEXT == orig(org.jfree.chart.util.ObjectUtilities.THREAD_CONTEXT)
org.jfree.chart.util.ObjectUtilities.THREAD_CONTEXT == orig(org.jfree.chart.util.ObjectUtilities.classLoaderSource)
org.jfree.chart.util.ObjectUtilities.THREAD_CONTEXT.toString == orig(org.jfree.chart.util.ObjectUtilities.THREAD_CONTEXT.toString)
org.jfree.chart.util.ObjectUtilities.CLASS_CONTEXT == orig(org.jfree.chart.util.ObjectUtilities.CLASS_CONTEXT)
org.jfree.chart.util.ObjectUtilities.CLASS_CONTEXT.toString == orig(org.jfree.chart.util.ObjectUtilities.CLASS_CONTEXT.toString)
org.jfree.chart.util.ObjectUtilities.classLoaderSource.toString == orig(org.jfree.chart.util.ObjectUtilities.classLoaderSource.toString)
org.jfree.chart.util.ObjectUtilities.classLoader == orig(org.jfree.chart.util.ObjectUtilities.classLoader)
org.jfree.chart.util.ObjectUtilities.class$org$jfree$chart$util$ObjectUtilities == orig(org.jfree.chart.util.ObjectUtilities.class$org$jfree$chart$util$ObjectUtilities)
org.jfree.chart.util.ObjectUtilities.class$org$jfree$chart$util$ObjectUtilities == orig(c)
org.jfree.chart.util.ObjectUtilities.class$org$jfree$chart$util$ObjectUtilities has only one value
return has only one value
return.getClass().getName() == sun.misc.Launcher$AppClassLoader.class
===========================================================================
org.jfree.chart.util.ObjectUtilities.isJDK14():::ENTER
org.jfree.chart.util.ObjectUtilities.class$org$jfree$chart$util$ObjectUtilities == null
===========================================================================
org.jfree.chart.util.ObjectUtilities.isJDK14():::EXIT443
===========================================================================
org.jfree.chart.util.ObjectUtilities.isJDK14():::EXIT443;condition="return == true"
===========================================================================
org.jfree.chart.util.ObjectUtilities.isJDK14():::EXIT
org.jfree.chart.util.ObjectUtilities.THREAD_CONTEXT == orig(org.jfree.chart.util.ObjectUtilities.THREAD_CONTEXT)
org.jfree.chart.util.ObjectUtilities.THREAD_CONTEXT == orig(org.jfree.chart.util.ObjectUtilities.classLoaderSource)
org.jfree.chart.util.ObjectUtilities.THREAD_CONTEXT.toString == orig(org.jfree.chart.util.ObjectUtilities.THREAD_CONTEXT.toString)
org.jfree.chart.util.ObjectUtilities.CLASS_CONTEXT == orig(org.jfree.chart.util.ObjectUtilities.CLASS_CONTEXT)
org.jfree.chart.util.ObjectUtilities.CLASS_CONTEXT.toString == orig(org.jfree.chart.util.ObjectUtilities.CLASS_CONTEXT.toString)
org.jfree.chart.util.ObjectUtilities.classLoaderSource.toString == orig(org.jfree.chart.util.ObjectUtilities.classLoaderSource.toString)
org.jfree.chart.util.ObjectUtilities.classLoader == orig(org.jfree.chart.util.ObjectUtilities.classLoader)
org.jfree.chart.util.ObjectUtilities.class$org$jfree$chart$util$ObjectUtilities has only one value
return == true
===========================================================================
org.jfree.chart.util.ObjectUtilities.isJDK14():::EXIT;condition="return == true"
===========================================================================
org.jfree.chart.util.RectangleAnchor:::CLASS
org.jfree.chart.util.RectangleAnchor.CENTER has only one value
org.jfree.chart.util.RectangleAnchor.CENTER != null
org.jfree.chart.util.RectangleAnchor.TOP has only one value
org.jfree.chart.util.RectangleAnchor.TOP != null
org.jfree.chart.util.RectangleAnchor.TOP_LEFT has only one value
org.jfree.chart.util.RectangleAnchor.TOP_LEFT != null
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT has only one value
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT != null
org.jfree.chart.util.RectangleAnchor.BOTTOM has only one value
org.jfree.chart.util.RectangleAnchor.BOTTOM != null
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT has only one value
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT != null
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT has only one value
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT != null
org.jfree.chart.util.RectangleAnchor.LEFT has only one value
org.jfree.chart.util.RectangleAnchor.LEFT != null
org.jfree.chart.util.RectangleAnchor.RIGHT has only one value
org.jfree.chart.util.RectangleAnchor.RIGHT != null
org.jfree.chart.util.RectangleAnchor.CENTER.name has only one value
org.jfree.chart.util.RectangleAnchor.CENTER.name != null
org.jfree.chart.util.RectangleAnchor.CENTER.name.toString == "RectangleAnchor.CENTER"
org.jfree.chart.util.RectangleAnchor.TOP.name has only one value
org.jfree.chart.util.RectangleAnchor.TOP.name != null
org.jfree.chart.util.RectangleAnchor.TOP.name.toString == "RectangleAnchor.TOP"
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name has only one value
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name != null
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name.toString == "RectangleAnchor.TOP_LEFT"
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name has only one value
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name != null
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name.toString == "RectangleAnchor.TOP_RIGHT"
org.jfree.chart.util.RectangleAnchor.BOTTOM.name has only one value
org.jfree.chart.util.RectangleAnchor.BOTTOM.name != null
org.jfree.chart.util.RectangleAnchor.BOTTOM.name.toString == "RectangleAnchor.BOTTOM"
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name has only one value
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name != null
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name.toString == "RectangleAnchor.BOTTOM_LEFT"
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name has only one value
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name != null
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name.toString == "RectangleAnchor.BOTTOM_RIGHT"
org.jfree.chart.util.RectangleAnchor.LEFT.name has only one value
org.jfree.chart.util.RectangleAnchor.LEFT.name != null
org.jfree.chart.util.RectangleAnchor.LEFT.name.toString == "RectangleAnchor.LEFT"
org.jfree.chart.util.RectangleAnchor.RIGHT.name has only one value
org.jfree.chart.util.RectangleAnchor.RIGHT.name != null
org.jfree.chart.util.RectangleAnchor.RIGHT.name.toString == "RectangleAnchor.RIGHT"
===========================================================================
org.jfree.chart.util.RectangleAnchor:::OBJECT
===========================================================================
org.jfree.chart.util.RectangleAnchor.RectangleAnchor(java.lang.String):::ENTER
===========================================================================
org.jfree.chart.util.RectangleAnchor.RectangleAnchor(java.lang.String):::EXIT
name.toString == orig(name.toString)
===========================================================================
org.jfree.chart.util.RectangleAnchor.coordinates(java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleAnchor):::ENTER
rectangle.getClass().getName() == java.awt.geom.Rectangle2D$Double.class
anchor has only one value
anchor.name has only one value
anchor.name.toString == "RectangleAnchor.CENTER"
===========================================================================
org.jfree.chart.util.RectangleAnchor.coordinates(java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleAnchor):::EXIT
org.jfree.chart.util.RectangleAnchor.CENTER == orig(org.jfree.chart.util.RectangleAnchor.CENTER)
org.jfree.chart.util.RectangleAnchor.TOP == orig(org.jfree.chart.util.RectangleAnchor.TOP)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT)
org.jfree.chart.util.RectangleAnchor.BOTTOM == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)
org.jfree.chart.util.RectangleAnchor.LEFT == orig(org.jfree.chart.util.RectangleAnchor.LEFT)
org.jfree.chart.util.RectangleAnchor.RIGHT == orig(org.jfree.chart.util.RectangleAnchor.RIGHT)
org.jfree.chart.util.RectangleAnchor.CENTER.name == orig(org.jfree.chart.util.RectangleAnchor.CENTER.name)
org.jfree.chart.util.RectangleAnchor.CENTER.name.toString == orig(org.jfree.chart.util.RectangleAnchor.CENTER.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP.name == orig(org.jfree.chart.util.RectangleAnchor.TOP.name)
org.jfree.chart.util.RectangleAnchor.TOP.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name.toString)
org.jfree.chart.util.RectangleAnchor.LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.LEFT.name)
org.jfree.chart.util.RectangleAnchor.LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.RIGHT.name)
org.jfree.chart.util.RectangleAnchor.RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.RIGHT.name.toString)
anchor.name == orig(anchor.name)
anchor.name.toString == orig(anchor.name.toString)
anchor.name has only one value
anchor.name.toString == "RectangleAnchor.CENTER"
return.getClass().getName() == java.awt.geom.Point2D$Double.class
===========================================================================
org.jfree.chart.util.RectangleEdge:::CLASS
org.jfree.chart.util.RectangleEdge.TOP has only one value
org.jfree.chart.util.RectangleEdge.BOTTOM has only one value
org.jfree.chart.util.RectangleEdge.LEFT has only one value
org.jfree.chart.util.RectangleEdge.RIGHT has only one value
org.jfree.chart.util.RectangleEdge.TOP.name has only one value
org.jfree.chart.util.RectangleEdge.TOP.name.toString == "RectangleEdge.TOP"
org.jfree.chart.util.RectangleEdge.BOTTOM.name has only one value
org.jfree.chart.util.RectangleEdge.BOTTOM.name.toString == "RectangleEdge.BOTTOM"
org.jfree.chart.util.RectangleEdge.LEFT.name has only one value
org.jfree.chart.util.RectangleEdge.LEFT.name.toString == "RectangleEdge.LEFT"
org.jfree.chart.util.RectangleEdge.RIGHT.name has only one value
org.jfree.chart.util.RectangleEdge.RIGHT.name.toString == "RectangleEdge.RIGHT"
===========================================================================
org.jfree.chart.util.RectangleEdge:::OBJECT
===========================================================================
org.jfree.chart.util.RectangleEdge.RectangleEdge(java.lang.String):::ENTER
===========================================================================
org.jfree.chart.util.RectangleEdge.RectangleEdge(java.lang.String):::EXIT
name.toString == orig(name.toString)
===========================================================================
org.jfree.chart.util.RectangleEdge.isTopOrBottom(org.jfree.chart.util.RectangleEdge):::ENTER
edge has only one value
edge.name has only one value
edge.name.toString == "RectangleEdge.BOTTOM"
===========================================================================
org.jfree.chart.util.RectangleEdge.isTopOrBottom(org.jfree.chart.util.RectangleEdge):::EXIT
org.jfree.chart.util.RectangleEdge.TOP == orig(org.jfree.chart.util.RectangleEdge.TOP)
org.jfree.chart.util.RectangleEdge.BOTTOM == orig(org.jfree.chart.util.RectangleEdge.BOTTOM)
org.jfree.chart.util.RectangleEdge.LEFT == orig(org.jfree.chart.util.RectangleEdge.LEFT)
org.jfree.chart.util.RectangleEdge.RIGHT == orig(org.jfree.chart.util.RectangleEdge.RIGHT)
org.jfree.chart.util.RectangleEdge.TOP.name == orig(org.jfree.chart.util.RectangleEdge.TOP.name)
org.jfree.chart.util.RectangleEdge.TOP.name.toString == orig(org.jfree.chart.util.RectangleEdge.TOP.name.toString)
org.jfree.chart.util.RectangleEdge.BOTTOM.name == orig(org.jfree.chart.util.RectangleEdge.BOTTOM.name)
org.jfree.chart.util.RectangleEdge.BOTTOM.name.toString == orig(org.jfree.chart.util.RectangleEdge.BOTTOM.name.toString)
org.jfree.chart.util.RectangleEdge.LEFT.name == orig(org.jfree.chart.util.RectangleEdge.LEFT.name)
org.jfree.chart.util.RectangleEdge.LEFT.name.toString == orig(org.jfree.chart.util.RectangleEdge.LEFT.name.toString)
org.jfree.chart.util.RectangleEdge.RIGHT.name == orig(org.jfree.chart.util.RectangleEdge.RIGHT.name)
org.jfree.chart.util.RectangleEdge.RIGHT.name.toString == orig(org.jfree.chart.util.RectangleEdge.RIGHT.name.toString)
edge.name == orig(edge.name)
edge.name.toString == orig(edge.name.toString)
edge.name has only one value
edge.name.toString == "RectangleEdge.BOTTOM"
return == true
===========================================================================
org.jfree.chart.util.RectangleEdge.isTopOrBottom(org.jfree.chart.util.RectangleEdge):::EXIT;condition="return == true"
===========================================================================
org.jfree.chart.util.RectangleInsets:::CLASS
org.jfree.chart.util.RectangleInsets.ZERO_INSETS has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS != null
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType != null
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == 0.0
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == 0.0
org.jfree.chart.util.UnitType.ABSOLUTE has only one value
org.jfree.chart.util.UnitType.ABSOLUTE != null
org.jfree.chart.util.UnitType.RELATIVE has only one value
org.jfree.chart.util.UnitType.RELATIVE != null
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name has only one value
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name != null
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name.toString == "UnitType.ABSOLUTE"
===========================================================================
org.jfree.chart.util.RectangleInsets:::OBJECT
this.unitType != null
org.jfree.chart.util.UnitType.ABSOLUTE.name has only one value
org.jfree.chart.util.UnitType.ABSOLUTE.name != null
org.jfree.chart.util.UnitType.ABSOLUTE.name.toString == "UnitType.ABSOLUTE"
org.jfree.chart.util.UnitType.RELATIVE.name has only one value
org.jfree.chart.util.UnitType.RELATIVE.name != null
org.jfree.chart.util.UnitType.RELATIVE.name.toString == "UnitType.RELATIVE"
this.unitType.name != null
this.unitType.name.toString one of { "UnitType.ABSOLUTE", "UnitType.RELATIVE" }
this.top >= 0.0
this.left >= 0.0
this.bottom >= 0.0
this.right >= 0.0
===========================================================================
org.jfree.chart.util.RectangleInsets.RectangleInsets(double, double, double, double):::ENTER
top >= 0.0
===========================================================================
org.jfree.chart.util.RectangleInsets.RectangleInsets(double, double, double, double):::EXIT
this.unitType has only one value
this.unitType.name has only one value
this.unitType.name.toString == "UnitType.ABSOLUTE"
===========================================================================
org.jfree.chart.util.RectangleInsets.RectangleInsets(org.jfree.chart.util.UnitType, double, double, double, double):::ENTER
unitType != null
org.jfree.chart.util.UnitType.ABSOLUTE has only one value
org.jfree.chart.util.UnitType.ABSOLUTE != null
org.jfree.chart.util.UnitType.RELATIVE has only one value
org.jfree.chart.util.UnitType.RELATIVE != null
org.jfree.chart.util.UnitType.ABSOLUTE.name has only one value
org.jfree.chart.util.UnitType.ABSOLUTE.name != null
org.jfree.chart.util.UnitType.ABSOLUTE.name.toString == "UnitType.ABSOLUTE"
org.jfree.chart.util.UnitType.RELATIVE.name has only one value
org.jfree.chart.util.UnitType.RELATIVE.name != null
org.jfree.chart.util.UnitType.RELATIVE.name.toString == "UnitType.RELATIVE"
unitType.name != null
unitType.name.toString one of { "UnitType.ABSOLUTE", "UnitType.RELATIVE" }
===========================================================================
org.jfree.chart.util.RectangleInsets.RectangleInsets(org.jfree.chart.util.UnitType, double, double, double, double):::EXIT
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
org.jfree.chart.util.UnitType.ABSOLUTE.name == orig(org.jfree.chart.util.UnitType.ABSOLUTE.name)
org.jfree.chart.util.UnitType.ABSOLUTE.name.toString == orig(org.jfree.chart.util.UnitType.ABSOLUTE.name.toString)
org.jfree.chart.util.UnitType.RELATIVE.name == orig(org.jfree.chart.util.UnitType.RELATIVE.name)
org.jfree.chart.util.UnitType.RELATIVE.name.toString == orig(org.jfree.chart.util.UnitType.RELATIVE.name.toString)
unitType.name == orig(unitType.name)
unitType.name.toString == orig(unitType.name.toString)
unitType.name != null
unitType.name.toString one of { "UnitType.ABSOLUTE", "UnitType.RELATIVE" }
===========================================================================
org.jfree.chart.util.RectangleInsets.calculateBottomInset(double):::ENTER
this.unitType has only one value
this.unitType.name has only one value
this.unitType.name.toString == "UnitType.ABSOLUTE"
this.top one of { 0.0, 1.0, 2.0 }
this.left one of { 0.0, 1.0, 2.0 }
this.bottom one of { 0.0, 1.0, 2.0 }
this.right one of { 0.0, 1.0, 2.0 }
===========================================================================
org.jfree.chart.util.RectangleInsets.calculateBottomInset(double):::EXIT
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name.toString == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name.toString)
this.unitType == orig(this.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE.name == orig(org.jfree.chart.util.UnitType.ABSOLUTE.name)
org.jfree.chart.util.UnitType.ABSOLUTE.name.toString == orig(org.jfree.chart.util.UnitType.ABSOLUTE.name.toString)
org.jfree.chart.util.UnitType.RELATIVE.name == orig(org.jfree.chart.util.UnitType.RELATIVE.name)
org.jfree.chart.util.UnitType.RELATIVE.name.toString == orig(org.jfree.chart.util.UnitType.RELATIVE.name.toString)
this.unitType.name == orig(this.unitType.name)
this.unitType.name.toString == orig(this.unitType.name.toString)
this.top == orig(this.top)
this.left == orig(this.left)
this.bottom == orig(this.bottom)
this.right == orig(this.right)
this.unitType has only one value
this.unitType.name has only one value
this.unitType.name.toString == "UnitType.ABSOLUTE"
this.top one of { 0.0, 1.0, 2.0 }
this.left one of { 0.0, 1.0, 2.0 }
this.bottom one of { 0.0, 1.0, 2.0 }
this.right one of { 0.0, 1.0, 2.0 }
return one of { 0.0, 1.0, 2.0 }
===========================================================================
org.jfree.chart.util.RectangleInsets.calculateBottomOutset(double):::ENTER
this.unitType has only one value
this.unitType.name has only one value
this.unitType.name.toString == "UnitType.ABSOLUTE"
this.top one of { 0.0, 1.0, 2.0 }
this.left one of { 0.0, 1.0, 2.0 }
this.bottom one of { 0.0, 1.0, 2.0 }
this.right one of { 0.0, 1.0, 2.0 }
===========================================================================
org.jfree.chart.util.RectangleInsets.calculateBottomOutset(double):::EXIT
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name.toString == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name.toString)
this.unitType == orig(this.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE.name == orig(org.jfree.chart.util.UnitType.ABSOLUTE.name)
org.jfree.chart.util.UnitType.ABSOLUTE.name.toString == orig(org.jfree.chart.util.UnitType.ABSOLUTE.name.toString)
org.jfree.chart.util.UnitType.RELATIVE.name == orig(org.jfree.chart.util.UnitType.RELATIVE.name)
org.jfree.chart.util.UnitType.RELATIVE.name.toString == orig(org.jfree.chart.util.UnitType.RELATIVE.name.toString)
this.unitType.name == orig(this.unitType.name)
this.unitType.name.toString == orig(this.unitType.name.toString)
this.top == orig(this.top)
this.left == orig(this.left)
this.bottom == orig(this.bottom)
this.right == orig(this.right)
this.unitType has only one value
this.unitType.name has only one value
this.unitType.name.toString == "UnitType.ABSOLUTE"
this.top one of { 0.0, 1.0, 2.0 }
this.left one of { 0.0, 1.0, 2.0 }
this.bottom one of { 0.0, 1.0, 2.0 }
this.right one of { 0.0, 1.0, 2.0 }
return one of { 0.0, 1.0, 2.0 }
===========================================================================
org.jfree.chart.util.RectangleInsets.calculateLeftInset(double):::ENTER
this.unitType has only one value
this.unitType.name has only one value
this.unitType.name.toString == "UnitType.ABSOLUTE"
this.top one of { 0.0, 1.0, 2.0 }
this.left one of { 0.0, 1.0, 2.0 }
this.bottom one of { 0.0, 1.0, 2.0 }
this.right one of { 0.0, 1.0, 2.0 }
===========================================================================
org.jfree.chart.util.RectangleInsets.calculateLeftInset(double):::EXIT
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name.toString == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name.toString)
this.unitType == orig(this.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE.name == orig(org.jfree.chart.util.UnitType.ABSOLUTE.name)
org.jfree.chart.util.UnitType.ABSOLUTE.name.toString == orig(org.jfree.chart.util.UnitType.ABSOLUTE.name.toString)
org.jfree.chart.util.UnitType.RELATIVE.name == orig(org.jfree.chart.util.UnitType.RELATIVE.name)
org.jfree.chart.util.UnitType.RELATIVE.name.toString == orig(org.jfree.chart.util.UnitType.RELATIVE.name.toString)
this.unitType.name == orig(this.unitType.name)
this.unitType.name.toString == orig(this.unitType.name.toString)
this.top == orig(this.top)
this.left == orig(this.left)
this.bottom == orig(this.bottom)
this.right == orig(this.right)
this.unitType has only one value
this.unitType.name has only one value
this.unitType.name.toString == "UnitType.ABSOLUTE"
this.top one of { 0.0, 1.0, 2.0 }
this.left one of { 0.0, 1.0, 2.0 }
this.bottom one of { 0.0, 1.0, 2.0 }
this.right one of { 0.0, 1.0, 2.0 }
return one of { 0.0, 1.0, 2.0 }
===========================================================================
org.jfree.chart.util.RectangleInsets.calculateLeftOutset(double):::ENTER
this.unitType has only one value
this.unitType.name has only one value
this.unitType.name.toString == "UnitType.ABSOLUTE"
this.top one of { 0.0, 1.0, 2.0 }
this.left one of { 0.0, 1.0, 2.0 }
this.bottom one of { 0.0, 1.0, 2.0 }
this.right one of { 0.0, 1.0, 2.0 }
===========================================================================
org.jfree.chart.util.RectangleInsets.calculateLeftOutset(double):::EXIT
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name.toString == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name.toString)
this.unitType == orig(this.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE.name == orig(org.jfree.chart.util.UnitType.ABSOLUTE.name)
org.jfree.chart.util.UnitType.ABSOLUTE.name.toString == orig(org.jfree.chart.util.UnitType.ABSOLUTE.name.toString)
org.jfree.chart.util.UnitType.RELATIVE.name == orig(org.jfree.chart.util.UnitType.RELATIVE.name)
org.jfree.chart.util.UnitType.RELATIVE.name.toString == orig(org.jfree.chart.util.UnitType.RELATIVE.name.toString)
this.unitType.name == orig(this.unitType.name)
this.unitType.name.toString == orig(this.unitType.name.toString)
this.top == orig(this.top)
this.left == orig(this.left)
this.bottom == orig(this.bottom)
this.right == orig(this.right)
this.unitType has only one value
this.unitType.name has only one value
this.unitType.name.toString == "UnitType.ABSOLUTE"
this.top one of { 0.0, 1.0, 2.0 }
this.left one of { 0.0, 1.0, 2.0 }
this.bottom one of { 0.0, 1.0, 2.0 }
this.right one of { 0.0, 1.0, 2.0 }
return one of { 0.0, 1.0, 2.0 }
===========================================================================
org.jfree.chart.util.RectangleInsets.calculateRightInset(double):::ENTER
this.unitType has only one value
this.unitType.name has only one value
this.unitType.name.toString == "UnitType.ABSOLUTE"
this.top one of { 0.0, 1.0, 2.0 }
this.left one of { 0.0, 1.0, 2.0 }
this.bottom one of { 0.0, 1.0, 2.0 }
this.right one of { 0.0, 1.0, 2.0 }
===========================================================================
org.jfree.chart.util.RectangleInsets.calculateRightInset(double):::EXIT
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name.toString == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name.toString)
this.unitType == orig(this.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE.name == orig(org.jfree.chart.util.UnitType.ABSOLUTE.name)
org.jfree.chart.util.UnitType.ABSOLUTE.name.toString == orig(org.jfree.chart.util.UnitType.ABSOLUTE.name.toString)
org.jfree.chart.util.UnitType.RELATIVE.name == orig(org.jfree.chart.util.UnitType.RELATIVE.name)
org.jfree.chart.util.UnitType.RELATIVE.name.toString == orig(org.jfree.chart.util.UnitType.RELATIVE.name.toString)
this.unitType.name == orig(this.unitType.name)
this.unitType.name.toString == orig(this.unitType.name.toString)
this.top == orig(this.top)
this.left == orig(this.left)
this.bottom == orig(this.bottom)
this.right == orig(this.right)
this.unitType has only one value
this.unitType.name has only one value
this.unitType.name.toString == "UnitType.ABSOLUTE"
this.top one of { 0.0, 1.0, 2.0 }
this.left one of { 0.0, 1.0, 2.0 }
this.bottom one of { 0.0, 1.0, 2.0 }
this.right one of { 0.0, 1.0, 2.0 }
return one of { 0.0, 1.0, 2.0 }
===========================================================================
org.jfree.chart.util.RectangleInsets.calculateRightOutset(double):::ENTER
this.unitType has only one value
this.unitType.name has only one value
this.unitType.name.toString == "UnitType.ABSOLUTE"
this.top one of { 0.0, 1.0, 2.0 }
this.left one of { 0.0, 1.0, 2.0 }
this.bottom one of { 0.0, 1.0, 2.0 }
this.right one of { 0.0, 1.0, 2.0 }
===========================================================================
org.jfree.chart.util.RectangleInsets.calculateRightOutset(double):::EXIT
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name.toString == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name.toString)
this.unitType == orig(this.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE.name == orig(org.jfree.chart.util.UnitType.ABSOLUTE.name)
org.jfree.chart.util.UnitType.ABSOLUTE.name.toString == orig(org.jfree.chart.util.UnitType.ABSOLUTE.name.toString)
org.jfree.chart.util.UnitType.RELATIVE.name == orig(org.jfree.chart.util.UnitType.RELATIVE.name)
org.jfree.chart.util.UnitType.RELATIVE.name.toString == orig(org.jfree.chart.util.UnitType.RELATIVE.name.toString)
this.unitType.name == orig(this.unitType.name)
this.unitType.name.toString == orig(this.unitType.name.toString)
this.top == orig(this.top)
this.left == orig(this.left)
this.bottom == orig(this.bottom)
this.right == orig(this.right)
this.unitType has only one value
this.unitType.name has only one value
this.unitType.name.toString == "UnitType.ABSOLUTE"
this.top one of { 0.0, 1.0, 2.0 }
this.left one of { 0.0, 1.0, 2.0 }
this.bottom one of { 0.0, 1.0, 2.0 }
this.right one of { 0.0, 1.0, 2.0 }
return one of { 0.0, 1.0, 2.0 }
===========================================================================
org.jfree.chart.util.RectangleInsets.calculateTopInset(double):::ENTER
this.unitType has only one value
this.unitType.name has only one value
this.unitType.name.toString == "UnitType.ABSOLUTE"
this.top one of { 0.0, 1.0, 2.0 }
this.left one of { 0.0, 1.0, 2.0 }
this.bottom one of { 0.0, 1.0, 2.0 }
this.right one of { 0.0, 1.0, 2.0 }
===========================================================================
org.jfree.chart.util.RectangleInsets.calculateTopInset(double):::EXIT
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name.toString == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name.toString)
this.unitType == orig(this.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE.name == orig(org.jfree.chart.util.UnitType.ABSOLUTE.name)
org.jfree.chart.util.UnitType.ABSOLUTE.name.toString == orig(org.jfree.chart.util.UnitType.ABSOLUTE.name.toString)
org.jfree.chart.util.UnitType.RELATIVE.name == orig(org.jfree.chart.util.UnitType.RELATIVE.name)
org.jfree.chart.util.UnitType.RELATIVE.name.toString == orig(org.jfree.chart.util.UnitType.RELATIVE.name.toString)
this.unitType.name == orig(this.unitType.name)
this.unitType.name.toString == orig(this.unitType.name.toString)
this.top == orig(this.top)
this.left == orig(this.left)
this.bottom == orig(this.bottom)
this.right == orig(this.right)
this.unitType has only one value
this.unitType.name has only one value
this.unitType.name.toString == "UnitType.ABSOLUTE"
this.top one of { 0.0, 1.0, 2.0 }
this.left one of { 0.0, 1.0, 2.0 }
this.bottom one of { 0.0, 1.0, 2.0 }
this.right one of { 0.0, 1.0, 2.0 }
return one of { 0.0, 1.0, 2.0 }
===========================================================================
org.jfree.chart.util.RectangleInsets.calculateTopOutset(double):::ENTER
this.unitType has only one value
this.unitType.name has only one value
this.unitType.name.toString == "UnitType.ABSOLUTE"
this.top one of { 0.0, 1.0, 2.0 }
this.left one of { 0.0, 1.0, 2.0 }
this.bottom one of { 0.0, 1.0, 2.0 }
this.right one of { 0.0, 1.0, 2.0 }
===========================================================================
org.jfree.chart.util.RectangleInsets.calculateTopOutset(double):::EXIT
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name.toString == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name.toString)
this.unitType == orig(this.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE.name == orig(org.jfree.chart.util.UnitType.ABSOLUTE.name)
org.jfree.chart.util.UnitType.ABSOLUTE.name.toString == orig(org.jfree.chart.util.UnitType.ABSOLUTE.name.toString)
org.jfree.chart.util.UnitType.RELATIVE.name == orig(org.jfree.chart.util.UnitType.RELATIVE.name)
org.jfree.chart.util.UnitType.RELATIVE.name.toString == orig(org.jfree.chart.util.UnitType.RELATIVE.name.toString)
this.unitType.name == orig(this.unitType.name)
this.unitType.name.toString == orig(this.unitType.name.toString)
this.top == orig(this.top)
this.left == orig(this.left)
this.bottom == orig(this.bottom)
this.right == orig(this.right)
this.unitType has only one value
this.unitType.name has only one value
this.unitType.name.toString == "UnitType.ABSOLUTE"
this.top one of { 0.0, 1.0, 2.0 }
this.left one of { 0.0, 1.0, 2.0 }
this.bottom one of { 0.0, 1.0, 2.0 }
this.right one of { 0.0, 1.0, 2.0 }
return one of { 0.0, 1.0, 2.0 }
===========================================================================
org.jfree.chart.util.RectangleInsets.equals(java.lang.Object):::ENTER
this has only one value
this.unitType has only one value
this.unitType.name has only one value
this.unitType.name.toString == "UnitType.ABSOLUTE"
this.top == 4.0
this.left == 8.0
this.bottom == 4.0
this.right == 8.0
obj.getClass().getName() == org.jfree.chart.util.RectangleInsets.class
===========================================================================
org.jfree.chart.util.RectangleInsets.equals(java.lang.Object):::EXIT192
===========================================================================
org.jfree.chart.util.RectangleInsets.equals(java.lang.Object):::EXIT192;condition="not(return == true)"
===========================================================================
org.jfree.chart.util.RectangleInsets.equals(java.lang.Object):::EXIT
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name.toString == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name.toString)
this.unitType == orig(this.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE.name == orig(org.jfree.chart.util.UnitType.ABSOLUTE.name)
org.jfree.chart.util.UnitType.ABSOLUTE.name.toString == orig(org.jfree.chart.util.UnitType.ABSOLUTE.name.toString)
org.jfree.chart.util.UnitType.RELATIVE.name == orig(org.jfree.chart.util.UnitType.RELATIVE.name)
org.jfree.chart.util.UnitType.RELATIVE.name.toString == orig(org.jfree.chart.util.UnitType.RELATIVE.name.toString)
this.unitType.name == orig(this.unitType.name)
this.unitType.name.toString == orig(this.unitType.name.toString)
this.top == orig(this.top)
this.left == orig(this.left)
this.bottom == orig(this.bottom)
this.right == orig(this.right)
this.unitType has only one value
this.unitType.name has only one value
this.unitType.name.toString == "UnitType.ABSOLUTE"
this.top == 4.0
this.left == 8.0
this.bottom == 4.0
this.right == 8.0
return == false
===========================================================================
org.jfree.chart.util.RectangleInsets.equals(java.lang.Object):::EXIT;condition="not(return == true)"
===========================================================================
org.jfree.chart.util.RectangleInsets.extendHeight(double):::ENTER
this.unitType has only one value
this.unitType.name has only one value
this.unitType.name.toString == "UnitType.ABSOLUTE"
this.top one of { 0.0, 1.0, 2.0 }
this.left one of { 0.0, 1.0, 2.0 }
this.bottom one of { 0.0, 1.0, 2.0 }
this.right one of { 0.0, 1.0, 2.0 }
===========================================================================
org.jfree.chart.util.RectangleInsets.extendHeight(double):::EXIT
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name.toString == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name.toString)
this.unitType == orig(this.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE.name == orig(org.jfree.chart.util.UnitType.ABSOLUTE.name)
org.jfree.chart.util.UnitType.ABSOLUTE.name.toString == orig(org.jfree.chart.util.UnitType.ABSOLUTE.name.toString)
org.jfree.chart.util.UnitType.RELATIVE.name == orig(org.jfree.chart.util.UnitType.RELATIVE.name)
org.jfree.chart.util.UnitType.RELATIVE.name.toString == orig(org.jfree.chart.util.UnitType.RELATIVE.name.toString)
this.unitType.name == orig(this.unitType.name)
this.unitType.name.toString == orig(this.unitType.name.toString)
this.top == orig(this.top)
this.left == orig(this.left)
this.bottom == orig(this.bottom)
this.right == orig(this.right)
this.unitType has only one value
this.unitType.name has only one value
this.unitType.name.toString == "UnitType.ABSOLUTE"
this.top one of { 0.0, 1.0, 2.0 }
this.left one of { 0.0, 1.0, 2.0 }
this.bottom one of { 0.0, 1.0, 2.0 }
this.right one of { 0.0, 1.0, 2.0 }
===========================================================================
org.jfree.chart.util.RectangleInsets.extendWidth(double):::ENTER
this.unitType has only one value
this.unitType.name has only one value
this.unitType.name.toString == "UnitType.ABSOLUTE"
this.top one of { 0.0, 1.0, 2.0 }
this.left one of { 0.0, 1.0, 2.0 }
this.bottom one of { 0.0, 1.0, 2.0 }
this.right one of { 0.0, 1.0, 2.0 }
===========================================================================
org.jfree.chart.util.RectangleInsets.extendWidth(double):::EXIT
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name.toString == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name.toString)
this.unitType == orig(this.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE.name == orig(org.jfree.chart.util.UnitType.ABSOLUTE.name)
org.jfree.chart.util.UnitType.ABSOLUTE.name.toString == orig(org.jfree.chart.util.UnitType.ABSOLUTE.name.toString)
org.jfree.chart.util.UnitType.RELATIVE.name == orig(org.jfree.chart.util.UnitType.RELATIVE.name)
org.jfree.chart.util.UnitType.RELATIVE.name.toString == orig(org.jfree.chart.util.UnitType.RELATIVE.name.toString)
this.unitType.name == orig(this.unitType.name)
this.unitType.name.toString == orig(this.unitType.name.toString)
this.top == orig(this.top)
this.left == orig(this.left)
this.bottom == orig(this.bottom)
this.right == orig(this.right)
this.unitType has only one value
this.unitType.name has only one value
this.unitType.name.toString == "UnitType.ABSOLUTE"
this.top one of { 0.0, 1.0, 2.0 }
this.left one of { 0.0, 1.0, 2.0 }
this.bottom one of { 0.0, 1.0, 2.0 }
this.right one of { 0.0, 1.0, 2.0 }
===========================================================================
org.jfree.chart.util.RectangleInsets.trim(java.awt.geom.Rectangle2D):::ENTER
this.unitType has only one value
this.unitType.name has only one value
this.unitType.name.toString == "UnitType.ABSOLUTE"
this.top one of { 0.0, 1.0, 2.0 }
this.left one of { 0.0, 1.0, 2.0 }
this.bottom one of { 0.0, 1.0, 2.0 }
this.right one of { 0.0, 1.0, 2.0 }
area != null
area.getClass().getName() == java.awt.geom.Rectangle2D$Double.class
===========================================================================
org.jfree.chart.util.RectangleInsets.trim(java.awt.geom.Rectangle2D):::EXIT
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name.toString == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name.toString)
this.unitType == orig(this.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE.name == orig(org.jfree.chart.util.UnitType.ABSOLUTE.name)
org.jfree.chart.util.UnitType.ABSOLUTE.name.toString == orig(org.jfree.chart.util.UnitType.ABSOLUTE.name.toString)
org.jfree.chart.util.UnitType.RELATIVE.name == orig(org.jfree.chart.util.UnitType.RELATIVE.name)
org.jfree.chart.util.UnitType.RELATIVE.name.toString == orig(org.jfree.chart.util.UnitType.RELATIVE.name.toString)
this.unitType.name == orig(this.unitType.name)
this.unitType.name.toString == orig(this.unitType.name.toString)
this.top == orig(this.top)
this.left == orig(this.left)
this.bottom == orig(this.bottom)
this.right == orig(this.right)
this.unitType has only one value
this.unitType.name has only one value
this.unitType.name.toString == "UnitType.ABSOLUTE"
this.top one of { 0.0, 1.0, 2.0 }
this.left one of { 0.0, 1.0, 2.0 }
this.bottom one of { 0.0, 1.0, 2.0 }
this.right one of { 0.0, 1.0, 2.0 }
===========================================================================
org.jfree.chart.util.RectangleInsets.trimHeight(double):::ENTER
this.unitType has only one value
this.unitType.name has only one value
this.unitType.name.toString == "UnitType.ABSOLUTE"
this.top one of { 0.0, 1.0 }
this.left one of { 0.0, 1.0 }
this.bottom one of { 0.0, 1.0 }
this.right one of { 0.0, 1.0 }
===========================================================================
org.jfree.chart.util.RectangleInsets.trimHeight(double):::EXIT
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name.toString == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name.toString)
this.unitType == orig(this.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE.name == orig(org.jfree.chart.util.UnitType.ABSOLUTE.name)
org.jfree.chart.util.UnitType.ABSOLUTE.name.toString == orig(org.jfree.chart.util.UnitType.ABSOLUTE.name.toString)
org.jfree.chart.util.UnitType.RELATIVE.name == orig(org.jfree.chart.util.UnitType.RELATIVE.name)
org.jfree.chart.util.UnitType.RELATIVE.name.toString == orig(org.jfree.chart.util.UnitType.RELATIVE.name.toString)
this.unitType.name == orig(this.unitType.name)
this.unitType.name.toString == orig(this.unitType.name.toString)
this.top == orig(this.top)
this.left == orig(this.left)
this.bottom == orig(this.bottom)
this.right == orig(this.right)
this.unitType has only one value
this.unitType.name has only one value
this.unitType.name.toString == "UnitType.ABSOLUTE"
this.top one of { 0.0, 1.0 }
this.left one of { 0.0, 1.0 }
this.bottom one of { 0.0, 1.0 }
this.right one of { 0.0, 1.0 }
===========================================================================
org.jfree.chart.util.RectangleInsets.trimWidth(double):::ENTER
this.unitType has only one value
this.unitType.name has only one value
this.unitType.name.toString == "UnitType.ABSOLUTE"
this.top one of { 0.0, 1.0 }
this.left one of { 0.0, 1.0 }
this.bottom one of { 0.0, 1.0 }
this.right one of { 0.0, 1.0 }
width one of { 196.0, 198.0, 200.0 }
===========================================================================
org.jfree.chart.util.RectangleInsets.trimWidth(double):::EXIT
org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.top)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.left)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.bottom)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.right)
org.jfree.chart.util.UnitType.ABSOLUTE == orig(org.jfree.chart.util.UnitType.ABSOLUTE)
org.jfree.chart.util.UnitType.RELATIVE == orig(org.jfree.chart.util.UnitType.RELATIVE)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name)
org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name.toString == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS.unitType.name.toString)
this.unitType == orig(this.unitType)
org.jfree.chart.util.UnitType.ABSOLUTE.name == orig(org.jfree.chart.util.UnitType.ABSOLUTE.name)
org.jfree.chart.util.UnitType.ABSOLUTE.name.toString == orig(org.jfree.chart.util.UnitType.ABSOLUTE.name.toString)
org.jfree.chart.util.UnitType.RELATIVE.name == orig(org.jfree.chart.util.UnitType.RELATIVE.name)
org.jfree.chart.util.UnitType.RELATIVE.name.toString == orig(org.jfree.chart.util.UnitType.RELATIVE.name.toString)
this.unitType.name == orig(this.unitType.name)
this.unitType.name.toString == orig(this.unitType.name.toString)
this.top == orig(this.top)
this.left == orig(this.left)
this.bottom == orig(this.bottom)
this.right == orig(this.right)
this.unitType has only one value
this.unitType.name has only one value
this.unitType.name.toString == "UnitType.ABSOLUTE"
this.top one of { 0.0, 1.0 }
this.left one of { 0.0, 1.0 }
this.bottom one of { 0.0, 1.0 }
this.right one of { 0.0, 1.0 }
===========================================================================
org.jfree.chart.util.Rotation:::CLASS
===========================================================================
org.jfree.chart.util.Rotation:::OBJECT
this.name.toString one of { "Rotation.ANTICLOCKWISE", "Rotation.CLOCKWISE" }
this.factor one of { -1.0, 1.0 }
===========================================================================
org.jfree.chart.util.Rotation.Rotation(java.lang.String, double):::ENTER
name.toString one of { "Rotation.ANTICLOCKWISE", "Rotation.CLOCKWISE" }
factor one of { -1.0, 1.0 }
===========================================================================
org.jfree.chart.util.Rotation.Rotation(java.lang.String, double):::EXIT
name.toString == orig(name.toString)
name.toString one of { "Rotation.ANTICLOCKWISE", "Rotation.CLOCKWISE" }
===========================================================================
org.jfree.chart.util.ShapeUtilities:::CLASS
org.jfree.chart.util.ShapeUtilities.SQRT2 == 1.4142135
===========================================================================
org.jfree.chart.util.ShapeUtilities.createTranslatedShape(java.awt.Shape, org.jfree.chart.util.RectangleAnchor, double, double):::ENTER
shape has only one value
shape.getClass().getName() == java.awt.geom.Ellipse2D$Double.class
anchor has only one value
org.jfree.chart.util.RectangleAnchor.CENTER has only one value
org.jfree.chart.util.RectangleAnchor.TOP has only one value
org.jfree.chart.util.RectangleAnchor.TOP_LEFT has only one value
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT has only one value
org.jfree.chart.util.RectangleAnchor.BOTTOM has only one value
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT has only one value
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT has only one value
org.jfree.chart.util.RectangleAnchor.LEFT has only one value
org.jfree.chart.util.RectangleAnchor.RIGHT has only one value
org.jfree.chart.util.RectangleAnchor.CENTER.name has only one value
org.jfree.chart.util.RectangleAnchor.CENTER.name.toString == "RectangleAnchor.CENTER"
org.jfree.chart.util.RectangleAnchor.TOP.name has only one value
org.jfree.chart.util.RectangleAnchor.TOP.name.toString == "RectangleAnchor.TOP"
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name has only one value
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name.toString == "RectangleAnchor.TOP_LEFT"
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name has only one value
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name.toString == "RectangleAnchor.TOP_RIGHT"
org.jfree.chart.util.RectangleAnchor.BOTTOM.name has only one value
org.jfree.chart.util.RectangleAnchor.BOTTOM.name.toString == "RectangleAnchor.BOTTOM"
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name has only one value
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name.toString == "RectangleAnchor.BOTTOM_LEFT"
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name has only one value
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name.toString == "RectangleAnchor.BOTTOM_RIGHT"
org.jfree.chart.util.RectangleAnchor.LEFT.name has only one value
org.jfree.chart.util.RectangleAnchor.LEFT.name.toString == "RectangleAnchor.LEFT"
org.jfree.chart.util.RectangleAnchor.RIGHT.name has only one value
org.jfree.chart.util.RectangleAnchor.RIGHT.name.toString == "RectangleAnchor.RIGHT"
anchor.name has only one value
anchor.name.toString == "RectangleAnchor.CENTER"
locationX one of { 9.0, 86.0 }
locationY one of { 68.046875, 88.015625 }
===========================================================================
org.jfree.chart.util.ShapeUtilities.createTranslatedShape(java.awt.Shape, org.jfree.chart.util.RectangleAnchor, double, double):::EXIT
org.jfree.chart.util.ShapeUtilities.SQRT2 == orig(org.jfree.chart.util.ShapeUtilities.SQRT2)
org.jfree.chart.util.RectangleAnchor.CENTER == orig(org.jfree.chart.util.RectangleAnchor.CENTER)
org.jfree.chart.util.RectangleAnchor.TOP == orig(org.jfree.chart.util.RectangleAnchor.TOP)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT)
org.jfree.chart.util.RectangleAnchor.BOTTOM == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)
org.jfree.chart.util.RectangleAnchor.LEFT == orig(org.jfree.chart.util.RectangleAnchor.LEFT)
org.jfree.chart.util.RectangleAnchor.RIGHT == orig(org.jfree.chart.util.RectangleAnchor.RIGHT)
org.jfree.chart.util.RectangleAnchor.CENTER.name == orig(org.jfree.chart.util.RectangleAnchor.CENTER.name)
org.jfree.chart.util.RectangleAnchor.CENTER.name.toString == orig(org.jfree.chart.util.RectangleAnchor.CENTER.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP.name == orig(org.jfree.chart.util.RectangleAnchor.TOP.name)
org.jfree.chart.util.RectangleAnchor.TOP.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name)
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name)
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name)
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name.toString)
org.jfree.chart.util.RectangleAnchor.LEFT.name == orig(org.jfree.chart.util.RectangleAnchor.LEFT.name)
org.jfree.chart.util.RectangleAnchor.LEFT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.LEFT.name.toString)
org.jfree.chart.util.RectangleAnchor.RIGHT.name == orig(org.jfree.chart.util.RectangleAnchor.RIGHT.name)
org.jfree.chart.util.RectangleAnchor.RIGHT.name.toString == orig(org.jfree.chart.util.RectangleAnchor.RIGHT.name.toString)
anchor.name == orig(anchor.name)
anchor.name.toString == orig(anchor.name.toString)
org.jfree.chart.util.RectangleAnchor.CENTER has only one value
org.jfree.chart.util.RectangleAnchor.TOP has only one value
org.jfree.chart.util.RectangleAnchor.TOP_LEFT has only one value
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT has only one value
org.jfree.chart.util.RectangleAnchor.BOTTOM has only one value
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT has only one value
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT has only one value
org.jfree.chart.util.RectangleAnchor.LEFT has only one value
org.jfree.chart.util.RectangleAnchor.RIGHT has only one value
org.jfree.chart.util.RectangleAnchor.CENTER.name has only one value
org.jfree.chart.util.RectangleAnchor.CENTER.name.toString == "RectangleAnchor.CENTER"
org.jfree.chart.util.RectangleAnchor.TOP.name has only one value
org.jfree.chart.util.RectangleAnchor.TOP.name.toString == "RectangleAnchor.TOP"
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name has only one value
org.jfree.chart.util.RectangleAnchor.TOP_LEFT.name.toString == "RectangleAnchor.TOP_LEFT"
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name has only one value
org.jfree.chart.util.RectangleAnchor.TOP_RIGHT.name.toString == "RectangleAnchor.TOP_RIGHT"
org.jfree.chart.util.RectangleAnchor.BOTTOM.name has only one value
org.jfree.chart.util.RectangleAnchor.BOTTOM.name.toString == "RectangleAnchor.BOTTOM"
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name has only one value
org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT.name.toString == "RectangleAnchor.BOTTOM_LEFT"
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name has only one value
org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT.name.toString == "RectangleAnchor.BOTTOM_RIGHT"
org.jfree.chart.util.RectangleAnchor.LEFT.name has only one value
org.jfree.chart.util.RectangleAnchor.LEFT.name.toString == "RectangleAnchor.LEFT"
org.jfree.chart.util.RectangleAnchor.RIGHT.name has only one value
org.jfree.chart.util.RectangleAnchor.RIGHT.name.toString == "RectangleAnchor.RIGHT"
anchor.name has only one value
anchor.name.toString == "RectangleAnchor.CENTER"
return.getClass().getName() == java.awt.geom.Path2D$Double.class
===========================================================================
org.jfree.chart.util.Size2D:::CLASS
===========================================================================
org.jfree.chart.util.Size2D:::OBJECT
===========================================================================
org.jfree.chart.util.Size2D.Size2D():::EXIT
this.width == 0.0
this.height == 0.0
===========================================================================
org.jfree.chart.util.Size2D.Size2D(double, double):::ENTER
===========================================================================
org.jfree.chart.util.Size2D.Size2D(double, double):::EXIT
===========================================================================
org.jfree.chart.util.Size2D.getHeight():::ENTER
===========================================================================
org.jfree.chart.util.Size2D.getHeight():::EXIT
this.width == orig(this.width)
this.height == orig(this.height)
===========================================================================
org.jfree.chart.util.Size2D.getWidth():::ENTER
===========================================================================
org.jfree.chart.util.Size2D.getWidth():::EXIT
this.width == orig(this.width)
this.height == orig(this.height)
===========================================================================
org.jfree.chart.util.StandardGradientPaintTransformer:::CLASS
===========================================================================
org.jfree.chart.util.StandardGradientPaintTransformer:::OBJECT
this.type has only one value
this.type != null
org.jfree.chart.util.GradientPaintTransformType.VERTICAL has only one value
org.jfree.chart.util.GradientPaintTransformType.VERTICAL != null
org.jfree.chart.util.GradientPaintTransformType.HORIZONTAL has only one value
org.jfree.chart.util.GradientPaintTransformType.HORIZONTAL != null
org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL has only one value
org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL != null
org.jfree.chart.util.GradientPaintTransformType.CENTER_HORIZONTAL has only one value
org.jfree.chart.util.GradientPaintTransformType.CENTER_HORIZONTAL != null
org.jfree.chart.util.GradientPaintTransformType.VERTICAL.name has only one value
org.jfree.chart.util.GradientPaintTransformType.VERTICAL.name != null
org.jfree.chart.util.GradientPaintTransformType.VERTICAL.name.toString == "GradientPaintTransformType.VERTICAL"
org.jfree.chart.util.GradientPaintTransformType.HORIZONTAL.name has only one value
org.jfree.chart.util.GradientPaintTransformType.HORIZONTAL.name != null
org.jfree.chart.util.GradientPaintTransformType.HORIZONTAL.name.toString == "GradientPaintTransformType.HORIZONTAL"
org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL.name has only one value
org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL.name != null
org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL.name.toString == "GradientPaintTransformType.CENTER_VERTICAL"
org.jfree.chart.util.GradientPaintTransformType.CENTER_HORIZONTAL.name has only one value
org.jfree.chart.util.GradientPaintTransformType.CENTER_HORIZONTAL.name != null
org.jfree.chart.util.GradientPaintTransformType.CENTER_HORIZONTAL.name.toString == "GradientPaintTransformType.CENTER_HORIZONTAL"
this.type.name has only one value
this.type.name != null
this.type.name.toString == "GradientPaintTransformType.VERTICAL"
===========================================================================
org.jfree.chart.util.StandardGradientPaintTransformer.StandardGradientPaintTransformer():::EXIT
===========================================================================
org.jfree.chart.util.StandardGradientPaintTransformer.StandardGradientPaintTransformer(org.jfree.chart.util.GradientPaintTransformType):::ENTER
type has only one value
org.jfree.chart.util.GradientPaintTransformType.VERTICAL has only one value
org.jfree.chart.util.GradientPaintTransformType.HORIZONTAL has only one value
org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL has only one value
org.jfree.chart.util.GradientPaintTransformType.CENTER_HORIZONTAL has only one value
org.jfree.chart.util.GradientPaintTransformType.VERTICAL.name has only one value
org.jfree.chart.util.GradientPaintTransformType.VERTICAL.name.toString == "GradientPaintTransformType.VERTICAL"
org.jfree.chart.util.GradientPaintTransformType.HORIZONTAL.name has only one value
org.jfree.chart.util.GradientPaintTransformType.HORIZONTAL.name.toString == "GradientPaintTransformType.HORIZONTAL"
org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL.name has only one value
org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL.name.toString == "GradientPaintTransformType.CENTER_VERTICAL"
org.jfree.chart.util.GradientPaintTransformType.CENTER_HORIZONTAL.name has only one value
org.jfree.chart.util.GradientPaintTransformType.CENTER_HORIZONTAL.name.toString == "GradientPaintTransformType.CENTER_HORIZONTAL"
type.name has only one value
type.name.toString == "GradientPaintTransformType.VERTICAL"
===========================================================================
org.jfree.chart.util.StandardGradientPaintTransformer.StandardGradientPaintTransformer(org.jfree.chart.util.GradientPaintTransformType):::EXIT
org.jfree.chart.util.GradientPaintTransformType.VERTICAL == orig(org.jfree.chart.util.GradientPaintTransformType.VERTICAL)
org.jfree.chart.util.GradientPaintTransformType.HORIZONTAL == orig(org.jfree.chart.util.GradientPaintTransformType.HORIZONTAL)
org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL == orig(org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL)
org.jfree.chart.util.GradientPaintTransformType.CENTER_HORIZONTAL == orig(org.jfree.chart.util.GradientPaintTransformType.CENTER_HORIZONTAL)
org.jfree.chart.util.GradientPaintTransformType.VERTICAL.name == orig(org.jfree.chart.util.GradientPaintTransformType.VERTICAL.name)
org.jfree.chart.util.GradientPaintTransformType.VERTICAL.name.toString == orig(org.jfree.chart.util.GradientPaintTransformType.VERTICAL.name.toString)
org.jfree.chart.util.GradientPaintTransformType.HORIZONTAL.name == orig(org.jfree.chart.util.GradientPaintTransformType.HORIZONTAL.name)
org.jfree.chart.util.GradientPaintTransformType.HORIZONTAL.name.toString == orig(org.jfree.chart.util.GradientPaintTransformType.HORIZONTAL.name.toString)
org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL.name == orig(org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL.name)
org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL.name.toString == orig(org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL.name.toString)
org.jfree.chart.util.GradientPaintTransformType.CENTER_HORIZONTAL.name == orig(org.jfree.chart.util.GradientPaintTransformType.CENTER_HORIZONTAL.name)
org.jfree.chart.util.GradientPaintTransformType.CENTER_HORIZONTAL.name.toString == orig(org.jfree.chart.util.GradientPaintTransformType.CENTER_HORIZONTAL.name.toString)
type.name == orig(type.name)
type.name.toString == orig(type.name.toString)
type.name has only one value
type.name.toString == "GradientPaintTransformType.VERTICAL"
===========================================================================
org.jfree.chart.util.UnitType:::CLASS
===========================================================================
org.jfree.chart.util.UnitType:::OBJECT
this.name.toString one of { "UnitType.ABSOLUTE", "UnitType.RELATIVE" }
===========================================================================
org.jfree.chart.util.UnitType.UnitType(java.lang.String):::ENTER
name.toString one of { "UnitType.ABSOLUTE", "UnitType.RELATIVE" }
===========================================================================
org.jfree.chart.util.UnitType.UnitType(java.lang.String):::EXIT
name.toString == orig(name.toString)
name.toString one of { "UnitType.ABSOLUTE", "UnitType.RELATIVE" }
===========================================================================
org.jfree.chart.util.VerticalAlignment:::CLASS
===========================================================================
org.jfree.chart.util.VerticalAlignment:::OBJECT
this.name.toString one of { "VerticalAlignment.BOTTOM", "VerticalAlignment.CENTER", "VerticalAlignment.TOP" }
===========================================================================
org.jfree.chart.util.VerticalAlignment.VerticalAlignment(java.lang.String):::ENTER
name.toString one of { "VerticalAlignment.BOTTOM", "VerticalAlignment.CENTER", "VerticalAlignment.TOP" }
===========================================================================
org.jfree.chart.util.VerticalAlignment.VerticalAlignment(java.lang.String):::EXIT
name.toString == orig(name.toString)
name.toString one of { "VerticalAlignment.BOTTOM", "VerticalAlignment.CENTER", "VerticalAlignment.TOP" }
===========================================================================
org.jfree.data.DefaultKeyedValues:::CLASS
===========================================================================
org.jfree.data.DefaultKeyedValues:::OBJECT
this.keys != null
this.keys[] elements != null
this.keys[].getClass().getName() elements == java.lang.String.class
this.values != null
this.indexMap != null
===========================================================================
org.jfree.data.DefaultKeyedValues.DefaultKeyedValues():::EXIT
this.keys[] == []
this.keys[].getClass().getName() == []
this.values[] == []
this.values[].getClass().getName() == []
===========================================================================
org.jfree.data.DefaultKeyedValues.getIndex(java.lang.Comparable):::ENTER
key != null
key.getClass().getName() == java.lang.String.class
===========================================================================
org.jfree.data.DefaultKeyedValues.getIndex(java.lang.Comparable):::EXIT155
this.values[].getClass().getName() elements == java.lang.Double.class
return == -1
size(this.keys[]) one of { 0, 1, 2 }
size(this.values[]) one of { 0, 1, 2 }
===========================================================================
org.jfree.data.DefaultKeyedValues.getIndex(java.lang.Comparable):::EXIT157
this.keys[].getClass().getName() one of { [java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String] }
this.values[].getClass().getName() one of { [java.lang.Double, java.lang.Double], [java.lang.Double, java.lang.Double, null] }
return one of { 0, 1, 2 }
size(this.keys[]) one of { 2, 3 }
size(this.values[]) one of { 2, 3 }
===========================================================================
org.jfree.data.DefaultKeyedValues.getIndex(java.lang.Comparable):::EXIT
this.keys == orig(this.keys)
this.keys[] == orig(this.keys[])
this.values == orig(this.values)
this.values[] == orig(this.values[])
this.indexMap == orig(this.indexMap)
(return == -1)  ==>  (size(this.keys[]) one of { 0, 1, 2 })
(return == -1)  ==>  (size(this.values[]) one of { 0, 1, 2 })
(return == -1)  ==>  (this.values[].getClass().getName() elements == java.lang.Double.class)
(return one of { 0, 1, 2 })  ==>  (size(this.keys[]) one of { 2, 3 })
(return one of { 0, 1, 2 })  ==>  (size(this.values[]) one of { 2, 3 })
(return one of { 0, 1, 2 })  ==>  (this.keys[].getClass().getName() one of { [java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String] })
(return one of { 0, 1, 2 })  ==>  (this.values[].getClass().getName() one of { [java.lang.Double, java.lang.Double], [java.lang.Double, java.lang.Double, null] })
return <= 2
return >= -1
===========================================================================
org.jfree.data.DefaultKeyedValues.getKeys():::ENTER
this.keys[].getClass().getName() one of { [java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String] }
this.values[].getClass().getName() one of { [java.lang.Double, java.lang.Double], [java.lang.Double, java.lang.Double, null] }
size(this.keys[]) one of { 2, 3 }
size(this.values[]) one of { 2, 3 }
===========================================================================
org.jfree.data.DefaultKeyedValues.getKeys():::EXIT
this.keys == orig(this.keys)
this.keys[] == orig(this.keys[])
this.values == orig(this.values)
this.values[] == orig(this.values[])
this.indexMap == orig(this.indexMap)
this.keys[].getClass().getName() one of { [java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String] }
this.values[].getClass().getName() one of { [java.lang.Double, java.lang.Double], [java.lang.Double, java.lang.Double, null] }
return[].getClass().getName() elements == java.lang.String.class
return[].getClass().getName() one of { [java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String] }
return.getClass().getName() == java.util.ArrayList.class
size(this.keys[]) one of { 2, 3 }
size(this.values[]) one of { 2, 3 }
size(return[]) one of { 2, 3 }
===========================================================================
org.jfree.data.DefaultKeyedValues.getValue(int):::ENTER
this.keys[].getClass().getName() one of { [java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String] }
this.values[].getClass().getName() one of { [java.lang.Double, java.lang.Double], [java.lang.Double, java.lang.Double, null] }
item one of { 0, 1, 2 }
size(this.keys[]) one of { 2, 3 }
size(this.values[]) one of { 2, 3 }
===========================================================================
org.jfree.data.DefaultKeyedValues.getValue(int):::EXIT
this.keys == orig(this.keys)
this.keys[] == orig(this.keys[])
this.values == orig(this.values)
this.values[] == orig(this.values[])
this.indexMap == orig(this.indexMap)
this.keys[].getClass().getName() one of { [java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String] }
this.values[].getClass().getName() one of { [java.lang.Double, java.lang.Double], [java.lang.Double, java.lang.Double, null] }
return.getClass().getName() == java.lang.Double.class
size(this.keys[]) one of { 2, 3 }
size(this.values[]) one of { 2, 3 }
===========================================================================
org.jfree.data.DefaultKeyedValues.getValue(java.lang.Comparable):::ENTER
this.keys[].getClass().getName() one of { [java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String] }
this.values[].getClass().getName() one of { [java.lang.Double, java.lang.Double], [java.lang.Double, java.lang.Double, null] }
key != null
key.getClass().getName() == java.lang.String.class
size(this.keys[]) one of { 2, 3 }
size(this.values[]) one of { 2, 3 }
===========================================================================
org.jfree.data.DefaultKeyedValues.getValue(java.lang.Comparable):::EXIT
this.keys == orig(this.keys)
this.keys[] == orig(this.keys[])
this.values == orig(this.values)
this.values[] == orig(this.values[])
this.indexMap == orig(this.indexMap)
this.keys[].getClass().getName() one of { [java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String] }
this.values[].getClass().getName() one of { [java.lang.Double, java.lang.Double], [java.lang.Double, java.lang.Double, null] }
return.getClass().getName() == java.lang.Double.class
size(this.keys[]) one of { 2, 3 }
size(this.values[]) one of { 2, 3 }
===========================================================================
org.jfree.data.DefaultKeyedValues.setValue(java.lang.Comparable, java.lang.Number):::ENTER
this.values[].getClass().getName() elements == java.lang.Double.class
key.getClass().getName() == java.lang.String.class
value.getClass().getName() == java.lang.Double.class
size(this.keys[]) one of { 0, 1, 2 }
size(this.values[]) one of { 0, 1, 2 }
===========================================================================
org.jfree.data.DefaultKeyedValues.setValue(java.lang.Comparable, java.lang.Number):::EXIT
this.keys == orig(this.keys)
this.values == orig(this.values)
this.indexMap == orig(this.indexMap)
size(this.keys[])-1 == orig(size(this.keys[]))
size(this.values[])-1 == orig(size(this.values[]))
size(this.keys[]) one of { 1, 2, 3 }
size(this.values[]) one of { 1, 2, 3 }
===========================================================================
org.jfree.data.Range:::CLASS
===========================================================================
org.jfree.data.Range:::OBJECT
this.lower == 0.0
===========================================================================
org.jfree.data.Range.Range(double, double):::ENTER
lower == 0.0
===========================================================================
org.jfree.data.Range.Range(double, double):::EXIT
===========================================================================
org.jfree.data.Range.contains(double):::ENTER
this.upper one of { 71.046875, 194.0 }
value one of { 37.9375, 229.0 }
===========================================================================
org.jfree.data.Range.contains(double):::EXIT
this.lower == orig(this.lower)
this.upper == orig(this.upper)
(this.upper == 194.0)  <==>  (orig(value) == 229.0)
(this.upper == 194.0)  <==>  (return == false)
(this.upper == 71.046875)  <==>  (orig(value) == 37.9375)
(this.upper == 71.046875)  <==>  (return == true)
this.upper one of { 71.046875, 194.0 }
===========================================================================
org.jfree.data.Range.contains(double):::EXIT;condition="return == true"
this.upper == 71.046875
return == true
orig(this) has only one value
orig(value) == 37.9375
===========================================================================
org.jfree.data.Range.contains(double):::EXIT;condition="not(return == true)"
this.upper == 194.0
return == false
orig(this) has only one value
orig(value) == 229.0
===========================================================================
org.jfree.data.Range.getLowerBound():::ENTER
this.upper one of { 77.046875, 100.0, 200.0 }
===========================================================================
org.jfree.data.Range.getLowerBound():::EXIT
this.lower == orig(this.lower)
this.upper == orig(this.upper)
this.upper one of { 77.046875, 100.0, 200.0 }
return == 0.0
===========================================================================
org.jfree.data.Range.getUpperBound():::ENTER
===========================================================================
org.jfree.data.Range.getUpperBound():::EXIT
this.lower == orig(this.lower)
this.upper == orig(this.upper)
===========================================================================
org.jfree.data.general.AbstractDataset:::CLASS
===========================================================================
org.jfree.data.general.AbstractDataset:::OBJECT
this.getClass().getName() == org.jfree.data.general.DefaultPieDataset.class
this.group != null
this.group.id has only one value
this.group.id != null
this.group.id.toString == "NOID"
this.listenerList != null
===========================================================================
org.jfree.data.general.AbstractDataset.AbstractDataset():::EXIT
===========================================================================
org.jfree.data.general.AbstractDataset.addChangeListener(org.jfree.data.general.DatasetChangeListener):::ENTER
===========================================================================
org.jfree.data.general.AbstractDataset.addChangeListener(org.jfree.data.general.DatasetChangeListener):::EXIT
this.group == orig(this.group)
this.group.id == orig(this.group.id)
this.group.id.toString == orig(this.group.id.toString)
this.listenerList == orig(this.listenerList)
org.jfree.data.general.AbstractDataset.class$org$jfree$data$general$DatasetChangeListener has only one value
===========================================================================
org.jfree.data.general.AbstractDataset.class$(java.lang.String):::ENTER
org.jfree.data.general.AbstractDataset.class$org$jfree$data$general$DatasetChangeListener == null
x0 has only one value
x0.toString == "org.jfree.data.general.DatasetChangeListener"
===========================================================================
org.jfree.data.general.AbstractDataset.class$(java.lang.String):::EXIT
org.jfree.data.general.AbstractDataset.class$org$jfree$data$general$DatasetChangeListener == orig(org.jfree.data.general.AbstractDataset.class$org$jfree$data$general$DatasetChangeListener)
x0.toString == orig(x0.toString)
org.jfree.data.general.AbstractDataset.class$org$jfree$data$general$DatasetChangeListener == null
x0.toString == "org.jfree.data.general.DatasetChangeListener"
return has only one value
===========================================================================
org.jfree.data.general.AbstractDataset.fireDatasetChanged():::ENTER
===========================================================================
org.jfree.data.general.AbstractDataset.fireDatasetChanged():::EXIT
this.group == orig(this.group)
this.group.id == orig(this.group.id)
this.group.id.toString == orig(this.group.id.toString)
this.listenerList == orig(this.listenerList)
org.jfree.data.general.AbstractDataset.class$org$jfree$data$general$DatasetChangeListener == orig(org.jfree.data.general.AbstractDataset.class$org$jfree$data$general$DatasetChangeListener)
===========================================================================
org.jfree.data.general.AbstractDataset.notifyListeners(org.jfree.data.general.DatasetChangeEvent):::ENTER
event.dataset.getClass().getName() == org.jfree.data.general.DefaultPieDataset.class
===========================================================================
org.jfree.data.general.AbstractDataset.notifyListeners(org.jfree.data.general.DatasetChangeEvent):::EXIT
this.group == orig(this.group)
this.group.id == orig(this.group.id)
this.group.id.toString == orig(this.group.id.toString)
this.listenerList == orig(this.listenerList)
org.jfree.data.general.AbstractDataset.class$org$jfree$data$general$DatasetChangeListener == orig(org.jfree.data.general.AbstractDataset.class$org$jfree$data$general$DatasetChangeListener)
event.dataset == orig(event.dataset)
event.dataset.getClass().getName() == orig(event.dataset.getClass().getName())
event.dataset.getClass().getName() == org.jfree.data.general.DefaultPieDataset.class
===========================================================================
org.jfree.data.general.DatasetChangeEvent:::OBJECT
this.dataset.getClass().getName() == org.jfree.data.general.DefaultPieDataset.class
===========================================================================
org.jfree.data.general.DatasetChangeEvent.DatasetChangeEvent(java.lang.Object, org.jfree.data.general.Dataset):::ENTER
source.getClass().getName() == org.jfree.data.general.DefaultPieDataset.class
dataset.getClass().getName() == org.jfree.data.general.DefaultPieDataset.class
===========================================================================
org.jfree.data.general.DatasetChangeEvent.DatasetChangeEvent(java.lang.Object, org.jfree.data.general.Dataset):::EXIT
===========================================================================
org.jfree.data.general.DatasetGroup:::CLASS
===========================================================================
org.jfree.data.general.DatasetGroup:::OBJECT
this.id has only one value
this.id.toString == "NOID"
===========================================================================
org.jfree.data.general.DatasetGroup.DatasetGroup():::EXIT
===========================================================================
org.jfree.data.general.DatasetUtilities.calculatePieDatasetTotal(org.jfree.data.general.PieDataset):::ENTER
dataset has only one value
dataset.getClass().getName() == org.jfree.data.general.DefaultPieDataset.class
===========================================================================
org.jfree.data.general.DatasetUtilities.calculatePieDatasetTotal(org.jfree.data.general.PieDataset):::EXIT
return == 21.0
===========================================================================
org.jfree.data.general.DefaultPieDataset:::CLASS
===========================================================================
org.jfree.data.general.DefaultPieDataset:::OBJECT
this.data != null
this.data.keys != null
this.data.keys[] elements != null
this.data.keys[].getClass().getName() elements == java.lang.String.class
this.data.values != null
this.data.indexMap != null
this.group != null
this.group.id has only one value
this.group.id != null
this.group.id.toString == "NOID"
this.listenerList != null
===========================================================================
org.jfree.data.general.DefaultPieDataset.DefaultPieDataset():::EXIT
this.data.keys[] == []
this.data.keys[].getClass().getName() == []
this.data.values[] == []
this.data.values[].getClass().getName() == []
===========================================================================
org.jfree.data.general.DefaultPieDataset.getKeys():::ENTER
this.data.keys[].getClass().getName() one of { [java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String] }
this.data.values[].getClass().getName() one of { [java.lang.Double, java.lang.Double], [java.lang.Double, java.lang.Double, null] }
org.jfree.data.general.AbstractDataset.class$org$jfree$data$general$DatasetChangeListener has only one value
size(this.data.keys[]) one of { 2, 3 }
size(this.data.values[]) one of { 2, 3 }
===========================================================================
org.jfree.data.general.DefaultPieDataset.getKeys():::EXIT
this.data == orig(this.data)
this.data.keys == orig(this.data.keys)
this.data.keys[] == orig(this.data.keys[])
this.data.values == orig(this.data.values)
this.data.values[] == orig(this.data.values[])
this.data.indexMap == orig(this.data.indexMap)
this.group == orig(this.group)
this.group.id == orig(this.group.id)
this.group.id.toString == orig(this.group.id.toString)
this.listenerList == orig(this.listenerList)
org.jfree.data.general.AbstractDataset.class$org$jfree$data$general$DatasetChangeListener == orig(org.jfree.data.general.AbstractDataset.class$org$jfree$data$general$DatasetChangeListener)
this.data.keys[].getClass().getName() one of { [java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String] }
this.data.values[].getClass().getName() one of { [java.lang.Double, java.lang.Double], [java.lang.Double, java.lang.Double, null] }
org.jfree.data.general.AbstractDataset.class$org$jfree$data$general$DatasetChangeListener has only one value
return[].getClass().getName() elements == java.lang.String.class
return[].getClass().getName() one of { [java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String] }
return.getClass().getName() == java.util.Collections$UnmodifiableRandomAccessList.class
size(this.data.keys[]) one of { 2, 3 }
size(this.data.values[]) one of { 2, 3 }
size(return[]) one of { 2, 3 }
===========================================================================
org.jfree.data.general.DefaultPieDataset.getValue(java.lang.Comparable):::ENTER
this.data.keys[].getClass().getName() one of { [java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String] }
this.data.values[].getClass().getName() one of { [java.lang.Double, java.lang.Double], [java.lang.Double, java.lang.Double, null] }
org.jfree.data.general.AbstractDataset.class$org$jfree$data$general$DatasetChangeListener has only one value
org.jfree.data.general.AbstractDataset.class$org$jfree$data$general$DatasetChangeListener != null
key != null
key.getClass().getName() == java.lang.String.class
size(this.data.keys[]) one of { 2, 3 }
size(this.data.values[]) one of { 2, 3 }
key.getClass().getName() in this.data.keys[].getClass().getName()
===========================================================================
org.jfree.data.general.DefaultPieDataset.getValue(java.lang.Comparable):::EXIT
this.data == orig(this.data)
this.data.keys == orig(this.data.keys)
this.data.keys[] == orig(this.data.keys[])
this.data.values == orig(this.data.values)
this.data.values[] == orig(this.data.values[])
this.data.indexMap == orig(this.data.indexMap)
this.group == orig(this.group)
this.group.id == orig(this.group.id)
this.group.id.toString == orig(this.group.id.toString)
this.listenerList == orig(this.listenerList)
org.jfree.data.general.AbstractDataset.class$org$jfree$data$general$DatasetChangeListener == orig(org.jfree.data.general.AbstractDataset.class$org$jfree$data$general$DatasetChangeListener)
this.data.keys[].getClass().getName() one of { [java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String] }
this.data.values[].getClass().getName() one of { [java.lang.Double, java.lang.Double], [java.lang.Double, java.lang.Double, null] }
org.jfree.data.general.AbstractDataset.class$org$jfree$data$general$DatasetChangeListener has only one value
org.jfree.data.general.AbstractDataset.class$org$jfree$data$general$DatasetChangeListener != null
return.getClass().getName() == java.lang.Double.class
size(this.data.keys[]) one of { 2, 3 }
size(this.data.values[]) one of { 2, 3 }
orig(key.getClass().getName()) in this.data.keys[].getClass().getName()
return.getClass().getName() in this.data.values[].getClass().getName()
return.getClass().getName() != orig(key.getClass().getName())
===========================================================================
org.jfree.data.general.DefaultPieDataset.setValue(java.lang.Comparable, double):::ENTER
this.data.keys[].getClass().getName() one of { [], [java.lang.String] }
this.data.values[].getClass().getName() elements == java.lang.Double.class
this.data.values[].getClass().getName() one of { [], [java.lang.Double] }
org.jfree.data.general.AbstractDataset.class$org$jfree$data$general$DatasetChangeListener has only one value
key.getClass().getName() == java.lang.String.class
value one of { 10.0, 11.0, 12.0 }
size(this.data.keys[]) one of { 0, 1 }
size(this.data.values[]) one of { 0, 1 }
===========================================================================
org.jfree.data.general.DefaultPieDataset.setValue(java.lang.Comparable, double):::EXIT
this.data == orig(this.data)
this.data.keys == orig(this.data.keys)
this.data.values == orig(this.data.values)
this.data.indexMap == orig(this.data.indexMap)
this.group == orig(this.group)
this.group.id == orig(this.group.id)
this.group.id.toString == orig(this.group.id.toString)
this.listenerList == orig(this.listenerList)
org.jfree.data.general.AbstractDataset.class$org$jfree$data$general$DatasetChangeListener == orig(org.jfree.data.general.AbstractDataset.class$org$jfree$data$general$DatasetChangeListener)
size(this.data.keys[])-1 == orig(size(this.data.keys[]))
size(this.data.values[])-1 == orig(size(this.data.values[]))
this.data.keys[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String] }
this.data.values[].getClass().getName() elements == java.lang.Double.class
this.data.values[].getClass().getName() one of { [java.lang.Double], [java.lang.Double, java.lang.Double] }
org.jfree.data.general.AbstractDataset.class$org$jfree$data$general$DatasetChangeListener has only one value
size(this.data.keys[]) one of { 1, 2 }
size(this.data.values[]) one of { 1, 2 }
orig(key.getClass().getName()) in this.data.keys[].getClass().getName()
===========================================================================
org.jfree.data.general.DefaultPieDataset.setValue(java.lang.Comparable, java.lang.Number):::ENTER
this.data.values[].getClass().getName() elements == java.lang.Double.class
key.getClass().getName() == java.lang.String.class
value.getClass().getName() == java.lang.Double.class
size(this.data.keys[]) one of { 0, 1, 2 }
size(this.data.values[]) one of { 0, 1, 2 }
key.getClass().getName() != value.getClass().getName()
===========================================================================
org.jfree.data.general.DefaultPieDataset.setValue(java.lang.Comparable, java.lang.Number):::EXIT
this.data == orig(this.data)
this.data.keys == orig(this.data.keys)
this.data.values == orig(this.data.values)
this.data.indexMap == orig(this.data.indexMap)
this.group == orig(this.group)
this.group.id == orig(this.group.id)
this.group.id.toString == orig(this.group.id.toString)
this.listenerList == orig(this.listenerList)
org.jfree.data.general.AbstractDataset.class$org$jfree$data$general$DatasetChangeListener == orig(org.jfree.data.general.AbstractDataset.class$org$jfree$data$general$DatasetChangeListener)
size(this.data.keys[])-1 == orig(size(this.data.keys[]))
size(this.data.values[])-1 == orig(size(this.data.values[]))
size(this.data.keys[]) one of { 1, 2, 3 }
size(this.data.values[]) one of { 1, 2, 3 }
orig(key.getClass().getName()) in this.data.keys[].getClass().getName()
orig(value.getClass().getName()) in this.data.values[].getClass().getName()
