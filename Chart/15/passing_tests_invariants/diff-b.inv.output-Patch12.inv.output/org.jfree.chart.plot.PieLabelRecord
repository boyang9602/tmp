{"org.jfree.chart.plot.PieLabelRecord":[{"OBJECT":[{"b.inv.output":{"invs":["size(this.label.textBlock.lines[]) one of { 1, 3 }","this.angle != 0","this.label.interiorGap.left == 2.0","this.label.shadowPaint != null","this.label.shadowXOffset == 2.0","this.label.textBlock.lineAlignment != null","this.label.outlinePaint has only one value","this.label.shadowYOffset == 2.0","this.label.outlinePaint != null","this.label.shadowPaint.getClass().getName() == java.awt.Color.class","this.key.getClass().getName() == java.lang.String.class","this.label.outlinePaint.getClass().getName() == java.awt.Color.class","this.label.interiorGap.unitType has only one value","this.label.textBlock.lines.getClass().getName() == java.util.ArrayList.class","this.label.textBlock.lines[] elements != null","this.label.interiorGap.unitType != null","this.label.outlineStroke has only one value","this.label.textBlock.lines != null","this.label.shadowPaint has only one value","this.gap one of { 2.3750000000000004, 4.743359018305303, 4.74446332682753 }","this.linkPercent == 0.9","this.label != null","this.label.textBlock.lineAlignment has only one value","this.label.textBlock.lines[].getClass().getName() one of { [org.jfree.chart.text.TextLine], [org.jfree.chart.text.TextLine, org.jfree.chart.text.TextLine, org.jfree.chart.text.TextLine] }","this.label.textBlock != null","this.key != null","this.label.interiorGap.bottom == 2.0","this.label.outlineStroke.getClass().getName() == java.awt.BasicStroke.class","this.label.backgroundPaint != null","org.jfree.chart.util.RectangleInsets.ZERO_INSETS has only one value","this.label.backgroundPaint has only one value","this.label.backgroundPaint.getClass().getName() == java.awt.Color.class","org.jfree.chart.util.RectangleInsets.ZERO_INSETS != null","this.label.textBlock.lines[].getClass().getName() elements == org.jfree.chart.text.TextLine.class","this.labelHeight one of { 15.640625, 38.921875 }","this.label.outlineStroke != null","this.label.interiorGap.top == 2.0","this.label.interiorGap != null","this.label.interiorGap.right == 2.0"]}},{"Patch12.inv.output":"N/A"}]},{"getAngle()":[{"ENTER":[{"b.inv.output":{"invs":[]}},{"Patch12.inv.output":"N/A"}]},{"EXIT":[{"b.inv.output":{"invs":["this.label.interiorGap.right == orig(this.label.interiorGap.right)","this.key == orig(this.key)","this.label.backgroundPaint.getClass().getName() == orig(this.label.backgroundPaint.getClass().getName())","this.labelHeight == orig(this.labelHeight)","this.label.outlineStroke.getClass().getName() == orig(this.label.outlineStroke.getClass().getName())","this.label.outlinePaint.getClass().getName() == orig(this.label.outlinePaint.getClass().getName())","this.allocatedY == orig(this.allocatedY)","this.label.textBlock.lineAlignment == orig(this.label.textBlock.lineAlignment)","this.label.textBlock == orig(this.label.textBlock)","this.label.textBlock.lines == orig(this.label.textBlock.lines)","this.label.textBlock.lines.getClass().getName() == orig(this.label.textBlock.lines.getClass().getName())","this.linkPercent == orig(this.linkPercent)","this.label.shadowYOffset == orig(this.label.shadowYOffset)","this.label == orig(this.label)","this.key.getClass().getName() == orig(this.key.getClass().getName())","this.label.interiorGap.bottom == orig(this.label.interiorGap.bottom)","this.label.interiorGap.unitType == orig(this.label.interiorGap.unitType)","this.angle == orig(this.angle)","this.baseY == orig(this.baseY)","this.label.shadowPaint == orig(this.label.shadowPaint)","this.label.outlineStroke == orig(this.label.outlineStroke)","this.label.outlinePaint == orig(this.label.outlinePaint)","this.label.interiorGap == orig(this.label.interiorGap)","this.label.shadowPaint.getClass().getName() == orig(this.label.shadowPaint.getClass().getName())","org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)","this.gap == orig(this.gap)","this.label.interiorGap.left == orig(this.label.interiorGap.left)","this.label.interiorGap.top == orig(this.label.interiorGap.top)","this.label.backgroundPaint == orig(this.label.backgroundPaint)","this.label.shadowXOffset == orig(this.label.shadowXOffset)","this.label.textBlock.lines[] == orig(this.label.textBlock.lines[])"]}},{"Patch12.inv.output":"N/A"}]}]},{"getGap()":[{"ENTER":[{"b.inv.output":{"invs":[]}},{"Patch12.inv.output":"N/A"}]},{"EXIT":[{"b.inv.output":{"invs":["this.label.interiorGap.right == orig(this.label.interiorGap.right)","this.key == orig(this.key)","this.label.backgroundPaint.getClass().getName() == orig(this.label.backgroundPaint.getClass().getName())","this.labelHeight == orig(this.labelHeight)","this.label.outlineStroke.getClass().getName() == orig(this.label.outlineStroke.getClass().getName())","this.label.outlinePaint.getClass().getName() == orig(this.label.outlinePaint.getClass().getName())","this.allocatedY == orig(this.allocatedY)","this.label.textBlock.lineAlignment == orig(this.label.textBlock.lineAlignment)","this.label.textBlock == orig(this.label.textBlock)","this.label.textBlock.lines == orig(this.label.textBlock.lines)","this.label.textBlock.lines.getClass().getName() == orig(this.label.textBlock.lines.getClass().getName())","this.linkPercent == orig(this.linkPercent)","this.label.shadowYOffset == orig(this.label.shadowYOffset)","this.label == orig(this.label)","this.key.getClass().getName() == orig(this.key.getClass().getName())","this.label.interiorGap.bottom == orig(this.label.interiorGap.bottom)","this.label.interiorGap.unitType == orig(this.label.interiorGap.unitType)","this.angle == orig(this.angle)","this.baseY == orig(this.baseY)","return one of { 2.3750000000000004, 4.743359018305303, 4.74446332682753 }","this.label.shadowPaint == orig(this.label.shadowPaint)","this.label.outlineStroke == orig(this.label.outlineStroke)","this.label.outlinePaint == orig(this.label.outlinePaint)","this.label.interiorGap == orig(this.label.interiorGap)","this.label.shadowPaint.getClass().getName() == orig(this.label.shadowPaint.getClass().getName())","org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)","this.gap == orig(this.gap)","this.label.interiorGap.left == orig(this.label.interiorGap.left)","this.label.interiorGap.top == orig(this.label.interiorGap.top)","this.label.backgroundPaint == orig(this.label.backgroundPaint)","this.label.shadowXOffset == orig(this.label.shadowXOffset)","this.label.textBlock.lines[] == orig(this.label.textBlock.lines[])"]}},{"Patch12.inv.output":"N/A"}]}]},{"getLabel()":[{"ENTER":[{"b.inv.output":{"invs":[]}},{"Patch12.inv.output":"N/A"}]},{"EXIT":[{"b.inv.output":{"invs":["this.label.interiorGap.right == orig(this.label.interiorGap.right)","this.key == orig(this.key)","return.outlineStroke has only one value","this.labelHeight == orig(this.labelHeight)","this.label.outlineStroke.getClass().getName() == orig(this.label.outlineStroke.getClass().getName())","this.label.textBlock.lineAlignment == orig(this.label.textBlock.lineAlignment)","this.label.textBlock == orig(this.label.textBlock)","this.label.textBlock.lines == orig(this.label.textBlock.lines)","this.label.shadowYOffset == orig(this.label.shadowYOffset)","return.backgroundPaint has only one value","this.label == orig(this.label)","this.label.interiorGap.bottom == orig(this.label.interiorGap.bottom)","this.label.interiorGap.unitType == orig(this.label.interiorGap.unitType)","this.angle == orig(this.angle)","return.shadowPaint has only one value","return.outlinePaint.getClass().getName() == java.awt.Color.class","return.interiorGap.bottom == 2.0","this.label.shadowPaint == orig(this.label.shadowPaint)","this.label.outlineStroke == orig(this.label.outlineStroke)","return.interiorGap.top == 2.0","this.label.outlinePaint == orig(this.label.outlinePaint)","this.label.interiorGap == orig(this.label.interiorGap)","return.backgroundPaint.getClass().getName() == java.awt.Color.class","org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)","this.gap == orig(this.gap)","this.label.backgroundPaint == orig(this.label.backgroundPaint)","size(return.textBlock.lines[]) one of { 1, 3 }","return.outlinePaint has only one value","return.shadowPaint.getClass().getName() == java.awt.Color.class","this.label.backgroundPaint.getClass().getName() == orig(this.label.backgroundPaint.getClass().getName())","this.label.outlinePaint.getClass().getName() == orig(this.label.outlinePaint.getClass().getName())","this.allocatedY == orig(this.allocatedY)","this.label.textBlock.lines.getClass().getName() == orig(this.label.textBlock.lines.getClass().getName())","this.linkPercent == orig(this.linkPercent)","this.key.getClass().getName() == orig(this.key.getClass().getName())","return.textBlock.lines.getClass().getName() == java.util.ArrayList.class","return.interiorGap.unitType has only one value","return.shadowXOffset == 2.0","this.baseY == orig(this.baseY)","return.shadowYOffset == 2.0","return.textBlock.lineAlignment has only one value","this.label.shadowPaint.getClass().getName() == orig(this.label.shadowPaint.getClass().getName())","return.textBlock.lines[].getClass().getName() elements == org.jfree.chart.text.TextLine.class","return.interiorGap.right == 2.0","return.interiorGap.left == 2.0","return.textBlock.lines[].getClass().getName() one of { [org.jfree.chart.text.TextLine], [org.jfree.chart.text.TextLine, org.jfree.chart.text.TextLine, org.jfree.chart.text.TextLine] }","this.label.interiorGap.left == orig(this.label.interiorGap.left)","this.label.interiorGap.top == orig(this.label.interiorGap.top)","this.label.shadowXOffset == orig(this.label.shadowXOffset)","this.label.textBlock.lines[] == orig(this.label.textBlock.lines[])","return.outlineStroke.getClass().getName() == java.awt.BasicStroke.class"]}},{"Patch12.inv.output":"N/A"}]}]},{"getLinkPercent()":[{"ENTER":[{"b.inv.output":{"invs":[]}},{"Patch12.inv.output":"N/A"}]},{"EXIT":[{"b.inv.output":{"invs":["this.label.interiorGap.right == orig(this.label.interiorGap.right)","this.key == orig(this.key)","this.label.backgroundPaint.getClass().getName() == orig(this.label.backgroundPaint.getClass().getName())","this.labelHeight == orig(this.labelHeight)","this.label.outlineStroke.getClass().getName() == orig(this.label.outlineStroke.getClass().getName())","return == 0.9","this.label.outlinePaint.getClass().getName() == orig(this.label.outlinePaint.getClass().getName())","this.allocatedY == orig(this.allocatedY)","this.label.textBlock.lineAlignment == orig(this.label.textBlock.lineAlignment)","this.label.textBlock == orig(this.label.textBlock)","this.label.textBlock.lines == orig(this.label.textBlock.lines)","this.label.textBlock.lines.getClass().getName() == orig(this.label.textBlock.lines.getClass().getName())","this.linkPercent == orig(this.linkPercent)","this.label.shadowYOffset == orig(this.label.shadowYOffset)","this.label == orig(this.label)","this.key.getClass().getName() == orig(this.key.getClass().getName())","this.label.interiorGap.bottom == orig(this.label.interiorGap.bottom)","this.label.interiorGap.unitType == orig(this.label.interiorGap.unitType)","this.angle == orig(this.angle)","this.baseY == orig(this.baseY)","this.label.shadowPaint == orig(this.label.shadowPaint)","this.label.outlineStroke == orig(this.label.outlineStroke)","this.label.outlinePaint == orig(this.label.outlinePaint)","this.label.interiorGap == orig(this.label.interiorGap)","this.label.shadowPaint.getClass().getName() == orig(this.label.shadowPaint.getClass().getName())","org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)","this.gap == orig(this.gap)","this.label.interiorGap.left == orig(this.label.interiorGap.left)","this.label.interiorGap.top == orig(this.label.interiorGap.top)","this.label.backgroundPaint == orig(this.label.backgroundPaint)","this.label.shadowXOffset == orig(this.label.shadowXOffset)","this.label.textBlock.lines[] == orig(this.label.textBlock.lines[])"]}},{"Patch12.inv.output":"N/A"}]}]},{"PieLabelRecord(java.lang.Comparable, double, double, org.jfree.chart.text.TextBox, double, double, double)":[{"ENTER":[{"b.inv.output":{"invs":["label.interiorGap.bottom == 2.0","label.backgroundPaint has only one value","label.interiorGap.left == 2.0","linkPercent == 0.9","labelHeight one of { 15.640625, 38.921875 }","label.shadowPaint.getClass().getName() == java.awt.Color.class","label.outlinePaint has only one value","label.shadowPaint has only one value","label.outlinePaint.getClass().getName() == java.awt.Color.class","gap one of { 2.3750000000000004, 4.743359018305303, 4.74446332682753 }","label.textBlock.lines.getClass().getName() == java.util.ArrayList.class","label.interiorGap.right == 2.0","label.backgroundPaint.getClass().getName() == java.awt.Color.class","size(label.textBlock.lines[]) one of { 1, 3 }","label.interiorGap.top == 2.0","org.jfree.chart.util.RectangleInsets.ZERO_INSETS has only one value","label.textBlock.lines[].getClass().getName() elements == org.jfree.chart.text.TextLine.class","label.textBlock.lineAlignment has only one value","label.shadowXOffset == 2.0","label.textBlock.lines[].getClass().getName() one of { [org.jfree.chart.text.TextLine], [org.jfree.chart.text.TextLine, org.jfree.chart.text.TextLine, org.jfree.chart.text.TextLine] }","label.shadowYOffset == 2.0","label.outlineStroke.getClass().getName() == java.awt.BasicStroke.class","key.getClass().getName() == java.lang.String.class","label.interiorGap.unitType has only one value","label.outlineStroke has only one value"]}},{"Patch12.inv.output":"N/A"}]},{"EXIT":[{"b.inv.output":{"invs":["label.interiorGap.bottom == 2.0","label.backgroundPaint has only one value","label.textBlock.lines.getClass().getName() == orig(label.textBlock.lines.getClass().getName())","label.outlinePaint == orig(label.outlinePaint)","label.interiorGap.left == 2.0","label.interiorGap.left == orig(label.interiorGap.left)","label.shadowXOffset == orig(label.shadowXOffset)","label.outlineStroke == orig(label.outlineStroke)","label.textBlock == orig(label.textBlock)","label.interiorGap.unitType == orig(label.interiorGap.unitType)","label.shadowPaint.getClass().getName() == java.awt.Color.class","label.textBlock.lines[] == orig(label.textBlock.lines[])","label.outlinePaint has only one value","label.shadowPaint has only one value","label.outlinePaint.getClass().getName() == java.awt.Color.class","label.shadowPaint.getClass().getName() == orig(label.shadowPaint.getClass().getName())","label.backgroundPaint.getClass().getName() == orig(label.backgroundPaint.getClass().getName())","label.textBlock.lines.getClass().getName() == java.util.ArrayList.class","label.interiorGap.bottom == orig(label.interiorGap.bottom)","label.backgroundPaint == orig(label.backgroundPaint)","label.interiorGap.right == 2.0","label.shadowPaint == orig(label.shadowPaint)","label.textBlock.lines == orig(label.textBlock.lines)","label.backgroundPaint.getClass().getName() == java.awt.Color.class","label.shadowYOffset == orig(label.shadowYOffset)","size(label.textBlock.lines[]) one of { 1, 3 }","label.interiorGap.top == 2.0","label.interiorGap.top == orig(label.interiorGap.top)","label.textBlock.lines[].getClass().getName() elements == org.jfree.chart.text.TextLine.class","label.textBlock.lineAlignment == orig(label.textBlock.lineAlignment)","label.interiorGap.right == orig(label.interiorGap.right)","org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)","label.textBlock.lineAlignment has only one value","label.shadowXOffset == 2.0","label.textBlock.lines[].getClass().getName() one of { [org.jfree.chart.text.TextLine], [org.jfree.chart.text.TextLine, org.jfree.chart.text.TextLine, org.jfree.chart.text.TextLine] }","label.outlineStroke.getClass().getName() == orig(label.outlineStroke.getClass().getName())","label.interiorGap == orig(label.interiorGap)","label.shadowYOffset == 2.0","label.outlineStroke.getClass().getName() == java.awt.BasicStroke.class","label.outlinePaint.getClass().getName() == orig(label.outlinePaint.getClass().getName())","label.interiorGap.unitType has only one value","label.outlineStroke has only one value"]}},{"Patch12.inv.output":"N/A"}]}]},{"compareTo(java.lang.Object)":[{"ENTER":[{"b.inv.output":{"invs":["obj.getClass().getName() == org.jfree.chart.plot.PieLabelRecord.class","this.key has only one value","this.label.textBlock.lines[].getClass().getName() == [org.jfree.chart.text.TextLine, org.jfree.chart.text.TextLine, org.jfree.chart.text.TextLine]","this.labelHeight == 38.921875","size(this.label.textBlock.lines[]) == 3","this.angle == -4.71238898038469","this.baseY == 25.201875","this.allocatedY == 25.201875","this.label.interiorGap has only one value","this.gap == 2.3750000000000004"]}},{"Patch12.inv.output":"N/A"}]},{"EXIT":[{"b.inv.output":{"invs":["this.label.interiorGap.right == orig(this.label.interiorGap.right)","this.key == orig(this.key)","this.label.backgroundPaint.getClass().getName() == orig(this.label.backgroundPaint.getClass().getName())","this.label.textBlock.lines[].getClass().getName() == [org.jfree.chart.text.TextLine, org.jfree.chart.text.TextLine, org.jfree.chart.text.TextLine]","size(this.label.textBlock.lines[]) == 3","this.labelHeight == orig(this.labelHeight)","this.label.outlineStroke.getClass().getName() == orig(this.label.outlineStroke.getClass().getName())","this.label.outlinePaint.getClass().getName() == orig(this.label.outlinePaint.getClass().getName())","this.gap == 2.3750000000000004","this.allocatedY == orig(this.allocatedY)","this.label.textBlock.lineAlignment == orig(this.label.textBlock.lineAlignment)","this.label.textBlock == orig(this.label.textBlock)","this.label.textBlock.lines == orig(this.label.textBlock.lines)","this.label.textBlock.lines.getClass().getName() == orig(this.label.textBlock.lines.getClass().getName())","this.linkPercent == orig(this.linkPercent)","this.label.shadowYOffset == orig(this.label.shadowYOffset)","this.label == orig(this.label)","this.key.getClass().getName() == orig(this.key.getClass().getName())","this.baseY == 25.201875","this.allocatedY == 25.201875","this.label.interiorGap.bottom == orig(this.label.interiorGap.bottom)","return == -1","this.label.interiorGap.unitType == orig(this.label.interiorGap.unitType)","this.angle == orig(this.angle)","this.baseY == orig(this.baseY)","this.label.shadowPaint == orig(this.label.shadowPaint)","this.label.outlineStroke == orig(this.label.outlineStroke)","this.label.outlinePaint == orig(this.label.outlinePaint)","this.angle == -4.71238898038469","this.label.interiorGap == orig(this.label.interiorGap)","this.label.shadowPaint.getClass().getName() == orig(this.label.shadowPaint.getClass().getName())","this.key has only one value","org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)","this.gap == orig(this.gap)","this.labelHeight == 38.921875","this.label.interiorGap.left == orig(this.label.interiorGap.left)","this.label.interiorGap.top == orig(this.label.interiorGap.top)","this.label.backgroundPaint == orig(this.label.backgroundPaint)","this.label.shadowXOffset == orig(this.label.shadowXOffset)","this.label.textBlock.lines[] == orig(this.label.textBlock.lines[])","this.label.interiorGap has only one value"]}},{"Patch12.inv.output":"N/A"}]}]},{"getLowerY()":[{"ENTER":[{"b.inv.output":{"invs":[]}},{"Patch12.inv.output":"N/A"}]},{"EXIT":[{"b.inv.output":{"invs":["this.label.interiorGap.right == orig(this.label.interiorGap.right)","this.key == orig(this.key)","this.label.backgroundPaint.getClass().getName() == orig(this.label.backgroundPaint.getClass().getName())","this.labelHeight == orig(this.labelHeight)","this.label.outlineStroke.getClass().getName() == orig(this.label.outlineStroke.getClass().getName())","this.label.outlinePaint.getClass().getName() == orig(this.label.outlinePaint.getClass().getName())","this.allocatedY == orig(this.allocatedY)","this.label.textBlock.lineAlignment == orig(this.label.textBlock.lineAlignment)","this.label.textBlock == orig(this.label.textBlock)","this.label.textBlock.lines == orig(this.label.textBlock.lines)","this.label.textBlock.lines.getClass().getName() == orig(this.label.textBlock.lines.getClass().getName())","this.linkPercent == orig(this.linkPercent)","this.label.shadowYOffset == orig(this.label.shadowYOffset)","this.label == orig(this.label)","this.key.getClass().getName() == orig(this.key.getClass().getName())","this.label.interiorGap.bottom == orig(this.label.interiorGap.bottom)","this.label.interiorGap.unitType == orig(this.label.interiorGap.unitType)","this.angle == orig(this.angle)","this.baseY == orig(this.baseY)","this.label.shadowPaint == orig(this.label.shadowPaint)","this.label.outlineStroke == orig(this.label.outlineStroke)","this.label.outlinePaint == orig(this.label.outlinePaint)","this.label.interiorGap == orig(this.label.interiorGap)","this.label.shadowPaint.getClass().getName() == orig(this.label.shadowPaint.getClass().getName())","org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)","this.gap == orig(this.gap)","this.label.interiorGap.left == orig(this.label.interiorGap.left)","this.label.interiorGap.top == orig(this.label.interiorGap.top)","this.label.backgroundPaint == orig(this.label.backgroundPaint)","this.label.shadowXOffset == orig(this.label.shadowXOffset)","this.label.textBlock.lines[] == orig(this.label.textBlock.lines[])"]}},{"Patch12.inv.output":"N/A"}]}]},{"getUpperY()":[{"ENTER":[{"b.inv.output":{"invs":[]}},{"Patch12.inv.output":"N/A"}]},{"EXIT":[{"b.inv.output":{"invs":["this.label.interiorGap.right == orig(this.label.interiorGap.right)","this.key == orig(this.key)","this.label.backgroundPaint.getClass().getName() == orig(this.label.backgroundPaint.getClass().getName())","this.labelHeight == orig(this.labelHeight)","this.label.outlineStroke.getClass().getName() == orig(this.label.outlineStroke.getClass().getName())","this.label.outlinePaint.getClass().getName() == orig(this.label.outlinePaint.getClass().getName())","this.allocatedY == orig(this.allocatedY)","this.label.textBlock.lineAlignment == orig(this.label.textBlock.lineAlignment)","this.label.textBlock == orig(this.label.textBlock)","this.label.textBlock.lines == orig(this.label.textBlock.lines)","this.label.textBlock.lines.getClass().getName() == orig(this.label.textBlock.lines.getClass().getName())","this.linkPercent == orig(this.linkPercent)","this.label.shadowYOffset == orig(this.label.shadowYOffset)","this.label == orig(this.label)","this.key.getClass().getName() == orig(this.key.getClass().getName())","this.label.interiorGap.bottom == orig(this.label.interiorGap.bottom)","this.label.interiorGap.unitType == orig(this.label.interiorGap.unitType)","this.angle == orig(this.angle)","this.baseY == orig(this.baseY)","this.label.shadowPaint == orig(this.label.shadowPaint)","this.label.outlineStroke == orig(this.label.outlineStroke)","this.label.outlinePaint == orig(this.label.outlinePaint)","this.label.interiorGap == orig(this.label.interiorGap)","this.label.shadowPaint.getClass().getName() == orig(this.label.shadowPaint.getClass().getName())","org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)","this.gap == orig(this.gap)","this.label.interiorGap.left == orig(this.label.interiorGap.left)","this.label.interiorGap.top == orig(this.label.interiorGap.top)","this.label.backgroundPaint == orig(this.label.backgroundPaint)","this.label.shadowXOffset == orig(this.label.shadowXOffset)","this.label.textBlock.lines[] == orig(this.label.textBlock.lines[])"]}},{"Patch12.inv.output":"N/A"}]}]},{"setAllocatedY(double)":[{"ENTER":[{"b.inv.output":{"invs":["this.key has only one value","this.gap == 4.743359018305303","this.label.textBlock.lines[].getClass().getName() == [org.jfree.chart.text.TextLine, org.jfree.chart.text.TextLine, org.jfree.chart.text.TextLine]","this.labelHeight == 38.921875","size(this.label.textBlock.lines[]) == 3","this.allocatedY == 36.81534122066405","y == 68.12375","this.angle == -3.066792828504322","this.baseY == 36.81534122066405","this.label.interiorGap has only one value"]}},{"Patch12.inv.output":"N/A"}]},{"EXIT":[{"b.inv.output":{"invs":["this.label.interiorGap.right == orig(this.label.interiorGap.right)","this.key == orig(this.key)","this.label.backgroundPaint.getClass().getName() == orig(this.label.backgroundPaint.getClass().getName())","this.label.textBlock.lines[].getClass().getName() == [org.jfree.chart.text.TextLine, org.jfree.chart.text.TextLine, org.jfree.chart.text.TextLine]","size(this.label.textBlock.lines[]) == 3","this.labelHeight == orig(this.labelHeight)","this.label.outlineStroke.getClass().getName() == orig(this.label.outlineStroke.getClass().getName())","this.label.outlinePaint.getClass().getName() == orig(this.label.outlinePaint.getClass().getName())","this.label.textBlock.lineAlignment == orig(this.label.textBlock.lineAlignment)","this.allocatedY == 68.12375","this.label.textBlock == orig(this.label.textBlock)","this.label.textBlock.lines == orig(this.label.textBlock.lines)","this.label.textBlock.lines.getClass().getName() == orig(this.label.textBlock.lines.getClass().getName())","this.linkPercent == orig(this.linkPercent)","this.label.shadowYOffset == orig(this.label.shadowYOffset)","this.label == orig(this.label)","this.key.getClass().getName() == orig(this.key.getClass().getName())","this.baseY == 36.81534122066405","this.label.interiorGap.bottom == orig(this.label.interiorGap.bottom)","this.label.interiorGap.unitType == orig(this.label.interiorGap.unitType)","this.angle == orig(this.angle)","this.baseY == orig(this.baseY)","this.label.shadowPaint == orig(this.label.shadowPaint)","this.label.outlineStroke == orig(this.label.outlineStroke)","this.label.outlinePaint == orig(this.label.outlinePaint)","this.label.interiorGap == orig(this.label.interiorGap)","this.label.shadowPaint.getClass().getName() == orig(this.label.shadowPaint.getClass().getName())","this.key has only one value","this.gap == 4.743359018305303","org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)","this.gap == orig(this.gap)","this.labelHeight == 38.921875","this.label.interiorGap.left == orig(this.label.interiorGap.left)","this.label.interiorGap.top == orig(this.label.interiorGap.top)","this.label.backgroundPaint == orig(this.label.backgroundPaint)","this.angle == -3.066792828504322","this.label.shadowXOffset == orig(this.label.shadowXOffset)","this.label.textBlock.lines[] == orig(this.label.textBlock.lines[])","this.label.interiorGap has only one value"]}},{"Patch12.inv.output":"N/A"}]}]},{"getAllocatedY()":[{"ENTER":[{"b.inv.output":{"invs":[]}},{"Patch12.inv.output":"N/A"}]},{"EXIT":[{"b.inv.output":{"invs":["this.label.interiorGap.right == orig(this.label.interiorGap.right)","this.key == orig(this.key)","this.label.backgroundPaint.getClass().getName() == orig(this.label.backgroundPaint.getClass().getName())","this.labelHeight == orig(this.labelHeight)","this.label.outlineStroke.getClass().getName() == orig(this.label.outlineStroke.getClass().getName())","this.label.outlinePaint.getClass().getName() == orig(this.label.outlinePaint.getClass().getName())","this.allocatedY == orig(this.allocatedY)","this.label.textBlock.lineAlignment == orig(this.label.textBlock.lineAlignment)","this.label.textBlock == orig(this.label.textBlock)","this.label.textBlock.lines == orig(this.label.textBlock.lines)","this.label.textBlock.lines.getClass().getName() == orig(this.label.textBlock.lines.getClass().getName())","this.linkPercent == orig(this.linkPercent)","this.label.shadowYOffset == orig(this.label.shadowYOffset)","this.label == orig(this.label)","this.key.getClass().getName() == orig(this.key.getClass().getName())","this.label.interiorGap.bottom == orig(this.label.interiorGap.bottom)","this.label.interiorGap.unitType == orig(this.label.interiorGap.unitType)","this.angle == orig(this.angle)","this.baseY == orig(this.baseY)","this.label.shadowPaint == orig(this.label.shadowPaint)","this.label.outlineStroke == orig(this.label.outlineStroke)","this.label.outlinePaint == orig(this.label.outlinePaint)","this.label.interiorGap == orig(this.label.interiorGap)","this.label.shadowPaint.getClass().getName() == orig(this.label.shadowPaint.getClass().getName())","org.jfree.chart.util.RectangleInsets.ZERO_INSETS == orig(org.jfree.chart.util.RectangleInsets.ZERO_INSETS)","this.gap == orig(this.gap)","this.label.interiorGap.left == orig(this.label.interiorGap.left)","this.label.interiorGap.top == orig(this.label.interiorGap.top)","this.label.backgroundPaint == orig(this.label.backgroundPaint)","this.label.shadowXOffset == orig(this.label.shadowXOffset)","this.label.textBlock.lines[] == orig(this.label.textBlock.lines[])"]}},{"Patch12.inv.output":"N/A"}]}]}]}