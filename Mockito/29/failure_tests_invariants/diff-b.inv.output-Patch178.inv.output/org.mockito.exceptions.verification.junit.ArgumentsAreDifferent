{"org.mockito.exceptions.verification.junit.ArgumentsAreDifferent":[{"CLASS":[{"Patch178.inv.output":{"invs":[]}},{"b.inv.output":"N/A"}]},{"OBJECT":[{"Patch178.inv.output":{"invs":["this.unfilteredStackTrace[].getClass().getName() == [java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement]","this has only one value","size(this.unfilteredStackTrace[]) == 36","this.unfilteredStackTrace[].getClass().getName() elements == java.lang.StackTraceElement.class","this.unfilteredStackTrace[] contains no nulls and has only one value, of length 36","this.message has only one value","this.message.toString == \"\\nArgument(s) are different! Wanted:\\nmock.objectArgMethod(same());\\n-> at org.mockitousage.bugs.NPEWithCertainMatchersTest.shouldNotThrowNPEWhenNullPassedToSame(NPEWithCertainMatchersTest.java:65)\\nActual invocation has different arguments:\\nmock.objectArgMethod(\\\"not null\\\");\\n-> at org.mockitousage.bugs.NPEWithCertainMatchersTest.shouldNotThrowNPEWhenNullPassedToSame(NPEWithCertainMatchersTest.java:63)\\n\"","this.unfilteredStackTrace.getClass().getName() == java.lang.StackTraceElement[].class","this.unfilteredStackTrace has only one value"]}},{"b.inv.output":"N/A"}]},{"ArgumentsAreDifferent(java.lang.String, java.lang.String, java.lang.String)":[{"ENTER":[{"Patch178.inv.output":{"invs":["message.toString == \"\\nArgument(s) are different! Wanted:\\nmock.objectArgMethod(same());\\n-> at org.mockitousage.bugs.NPEWithCertainMatchersTest.shouldNotThrowNPEWhenNullPassedToSame(NPEWithCertainMatchersTest.java:65)\\nActual invocation has different arguments:\\nmock.objectArgMethod(\\\"not null\\\");\\n-> at org.mockitousage.bugs.NPEWithCertainMatchersTest.shouldNotThrowNPEWhenNullPassedToSame(NPEWithCertainMatchersTest.java:63)\\n\"","wanted.toString == \"mock.objectArgMethod(same());\"","wanted has only one value","actual.toString == \"mock.objectArgMethod(\\\"not null\\\");\"","actual has only one value","message has only one value"]}},{"b.inv.output":"N/A"}]},{"EXIT":[{"Patch178.inv.output":{"invs":["message.toString == \"\\nArgument(s) are different! Wanted:\\nmock.objectArgMethod(same());\\n-> at org.mockitousage.bugs.NPEWithCertainMatchersTest.shouldNotThrowNPEWhenNullPassedToSame(NPEWithCertainMatchersTest.java:65)\\nActual invocation has different arguments:\\nmock.objectArgMethod(\\\"not null\\\");\\n-> at org.mockitousage.bugs.NPEWithCertainMatchersTest.shouldNotThrowNPEWhenNullPassedToSame(NPEWithCertainMatchersTest.java:63)\\n\"","wanted.toString == \"mock.objectArgMethod(same());\"","actual.toString == \"mock.objectArgMethod(\\\"not null\\\");\"","wanted.toString == orig(wanted.toString)","actual.toString == orig(actual.toString)","message.toString == orig(message.toString)"]}},{"b.inv.output":"N/A"}]}]}]}