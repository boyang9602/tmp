{"name": "org.mockito.exceptions.verification.junit.ArgumentsAreDifferent", "children": [{"name": "CLASS", "children": [{"name": "Patch178.inv.output", "children": []}, {"name": "b.inv.output", "children": [{"name": "b.inv.output", "children": [{"name": "N/A"}]}]}]}, {"name": "OBJECT", "children": [{"name": "Patch178.inv.output", "children": [{"name": "this.unfilteredStackTrace[].getClass().getName() == [java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement]"}, {"name": "this has only one value"}, {"name": "size(this.unfilteredStackTrace[]) == 36"}, {"name": "this.unfilteredStackTrace[].getClass().getName() elements == java.lang.StackTraceElement.class"}, {"name": "this.unfilteredStackTrace[] contains no nulls and has only one value, of length 36"}, {"name": "this.message has only one value"}, {"name": "this.message.toString == \"\\nArgument(s) are different! Wanted:\\nmock.objectArgMethod(same());\\n-> at org.mockitousage.bugs.NPEWithCertainMatchersTest.shouldNotThrowNPEWhenNullPassedToSame(NPEWithCertainMatchersTest.java:65)\\nActual invocation has different arguments:\\nmock.objectArgMethod(\\\"not null\\\");\\n-> at org.mockitousage.bugs.NPEWithCertainMatchersTest.shouldNotThrowNPEWhenNullPassedToSame(NPEWithCertainMatchersTest.java:63)\\n\""}, {"name": "this.unfilteredStackTrace.getClass().getName() == java.lang.StackTraceElement[].class"}, {"name": "this.unfilteredStackTrace has only one value"}]}, {"name": "b.inv.output", "children": [{"name": "b.inv.output", "children": [{"name": "N/A"}]}]}]}, {"name": "ArgumentsAreDifferent(java.lang.String, java.lang.String, java.lang.String)", "children": [{"name": "ENTER", "children": [{"name": "Patch178.inv.output", "children": [{"name": "message.toString == \"\\nArgument(s) are different! Wanted:\\nmock.objectArgMethod(same());\\n-> at org.mockitousage.bugs.NPEWithCertainMatchersTest.shouldNotThrowNPEWhenNullPassedToSame(NPEWithCertainMatchersTest.java:65)\\nActual invocation has different arguments:\\nmock.objectArgMethod(\\\"not null\\\");\\n-> at org.mockitousage.bugs.NPEWithCertainMatchersTest.shouldNotThrowNPEWhenNullPassedToSame(NPEWithCertainMatchersTest.java:63)\\n\""}, {"name": "wanted.toString == \"mock.objectArgMethod(same());\""}, {"name": "wanted has only one value"}, {"name": "actual.toString == \"mock.objectArgMethod(\\\"not null\\\");\""}, {"name": "actual has only one value"}, {"name": "message has only one value"}]}, {"name": "b.inv.output", "children": [{"name": "b.inv.output", "children": [{"name": "N/A"}]}]}]}, {"name": "EXIT", "children": [{"name": "Patch178.inv.output", "children": [{"name": "message.toString == \"\\nArgument(s) are different! Wanted:\\nmock.objectArgMethod(same());\\n-> at org.mockitousage.bugs.NPEWithCertainMatchersTest.shouldNotThrowNPEWhenNullPassedToSame(NPEWithCertainMatchersTest.java:65)\\nActual invocation has different arguments:\\nmock.objectArgMethod(\\\"not null\\\");\\n-> at org.mockitousage.bugs.NPEWithCertainMatchersTest.shouldNotThrowNPEWhenNullPassedToSame(NPEWithCertainMatchersTest.java:63)\\n\""}, {"name": "wanted.toString == \"mock.objectArgMethod(same());\""}, {"name": "actual.toString == \"mock.objectArgMethod(\\\"not null\\\");\""}, {"name": "wanted.toString == orig(wanted.toString)"}, {"name": "actual.toString == orig(actual.toString)"}, {"name": "message.toString == orig(message.toString)"}]}, {"name": "b.inv.output", "children": [{"name": "b.inv.output", "children": [{"name": "N/A"}]}]}]}]}]}
