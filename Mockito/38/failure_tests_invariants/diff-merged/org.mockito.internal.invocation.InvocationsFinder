{
    "org.mockito.internal.invocation.InvocationsFinder": [
        {
            "findSimilarInvocation(java.util.List, org.mockito.internal.invocation.InvocationMatcher)": [
                {
                    "ENTER": [
                        {
                            "f.inv.output": {
                                "invs": [
                                    "wanted.invocation.mock.getClass().getName() == org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest$Fun$$EnhancerByMockitoWithCGLIB$$b7c20c68.class"
                                ]
                            }
                        },
                        {
                            "b.inv.output": {
                                "invs": [
                                    "wanted.invocation.mock.getClass().getName() == org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest$Fun$$EnhancerByMockitoWithCGLIB$$abb6c88.class"
                                ]
                            }
                        }
                    ]
                },
                {
                    "EXIT": [
                        {
                            "f.inv.output": {
                                "invs": [
                                    "return.mock.getClass().getName() == org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest$Fun$$EnhancerByMockitoWithCGLIB$$b7c20c68.class",
                                    "wanted.invocation.mock.getClass().getName() == org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest$Fun$$EnhancerByMockitoWithCGLIB$$b7c20c68.class"
                                ]
                            }
                        },
                        {
                            "b.inv.output": {
                                "invs": [
                                    "wanted.invocation.mock.getClass().getName() == org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest$Fun$$EnhancerByMockitoWithCGLIB$$abb6c88.class",
                                    "return.mock.getClass().getName() == org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest$Fun$$EnhancerByMockitoWithCGLIB$$abb6c88.class"
                                ]
                            }
                        }
                    ]
                },
                {
                    "EXITNN": [
                        {
                            "73": [
                                {
                                    "f.inv.output": {
                                        "invs": []
                                    }
                                },
                                {
                                    "b.inv.output": {
                                        "invs": []
                                    }
                                },
                                {
                                    "Patch179.inv.output": "N/A"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "findInvocations(java.util.List, org.mockito.internal.invocation.InvocationMatcher)": [
                {
                    "ENTER": [
                        {
                            "f.inv.output": {
                                "invs": [
                                    "wanted.invocation.mock.getClass().getName() == org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest$Fun$$EnhancerByMockitoWithCGLIB$$4038d86a.class",
                                    "wanted.invocation.mock.getClass().getName() == org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest$Fun$$EnhancerByMockitoWithCGLIB$$b7c20c68.class"
                                ]
                            }
                        },
                        {
                            "b.inv.output": {
                                "invs": [
                                    "wanted.invocation.mock.getClass().getName() == org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest$Fun$$EnhancerByMockitoWithCGLIB$$abb6c88.class"
                                ]
                            }
                        },
                        {
                            "Patch179.inv.output": {
                                "invs": [
                                    "wanted.invocation.mock.getClass().getName() == org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest$Fun$$EnhancerByMockitoWithCGLIB$$4038d86a.class",
                                    "wanted.invocation.mock.getClass().getName() == org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest$Fun$$EnhancerByMockitoWithCGLIB$$b7c20c68.class"
                                ]
                            }
                        }
                    ]
                },
                {
                    "EXIT": [
                        {
                            "f.inv.output": {
                                "invs": [
                                    "return has only one value",
                                    "return[].getClass().getName() == [org.mockito.internal.invocation.Invocation]",
                                    "return[].getClass().getName() == []",
                                    "wanted.invocation.mock.getClass().getName() == org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest$Fun$$EnhancerByMockitoWithCGLIB$$b7c20c68.class",
                                    "size(return[]) == 1",
                                    "wanted.invocation.mock.getClass().getName() == org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest$Fun$$EnhancerByMockitoWithCGLIB$$4038d86a.class",
                                    "return[] contains no nulls and has only one value, of length 1",
                                    "return[].getClass().getName() elements == org.mockito.internal.invocation.Invocation.class",
                                    "return[] == []",
                                    "return[] elements has only one value"
                                ]
                            }
                        },
                        {
                            "b.inv.output": {
                                "invs": [
                                    "return has only one value",
                                    "return[].getClass().getName() == []",
                                    "wanted.invocation.mock.getClass().getName() == org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest$Fun$$EnhancerByMockitoWithCGLIB$$abb6c88.class",
                                    "return[] == []"
                                ]
                            }
                        },
                        {
                            "Patch179.inv.output": {
                                "invs": [
                                    "return[].getClass().getName() == [org.mockito.internal.invocation.Invocation]",
                                    "wanted.invocation.mock.getClass().getName() == org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest$Fun$$EnhancerByMockitoWithCGLIB$$b7c20c68.class",
                                    "size(return[]) == 1",
                                    "wanted.invocation.mock.getClass().getName() == org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest$Fun$$EnhancerByMockitoWithCGLIB$$4038d86a.class",
                                    "return[] contains no nulls and has only one value, of length 1",
                                    "return[].getClass().getName() elements == org.mockito.internal.invocation.Invocation.class",
                                    "return[] elements has only one value"
                                ]
                            }
                        }
                    ]
                }
            ]
        }
    ]
}