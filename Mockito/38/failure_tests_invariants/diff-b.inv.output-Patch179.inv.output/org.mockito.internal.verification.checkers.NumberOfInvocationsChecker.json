{"name": "org.mockito.internal.verification.checkers.NumberOfInvocationsChecker", "children": [{"name": "OBJECT", "children": [{"name": "Patch179.inv.output", "children": [{"name": "this has only one value"}, {"name": "this.reporter has only one value"}, {"name": "this.finder has only one value"}]}, {"name": "b.inv.output", "children": [{"name": "b.inv.output", "children": [{"name": "N/A"}]}]}]}, {"name": "NumberOfInvocationsChecker(org.mockito.exceptions.Reporter, org.mockito.internal.invocation.InvocationsFinder)", "children": [{"name": "ENTER", "children": [{"name": "Patch179.inv.output", "children": [{"name": "reporter has only one value"}, {"name": "finder has only one value"}]}, {"name": "b.inv.output", "children": [{"name": "b.inv.output", "children": [{"name": "N/A"}]}]}]}, {"name": "EXIT", "children": [{"name": "Patch179.inv.output", "children": []}, {"name": "b.inv.output", "children": [{"name": "b.inv.output", "children": [{"name": "N/A"}]}]}]}]}, {"name": "check(java.util.List, org.mockito.internal.invocation.InvocationMatcher, int)", "children": [{"name": "ENTER", "children": [{"name": "Patch179.inv.output", "children": [{"name": "wanted.invocation.mock.getClass().getName() == org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest$Fun$$EnhancerByMockitoWithCGLIB$$4038d86a.class"}, {"name": "wanted.invocation.realMethod has only one value"}, {"name": "invocations.getClass().getName() == java.util.LinkedList.class"}, {"name": "wanted.matchers has only one value"}, {"name": "wanted.matchers[] elements has only one value"}, {"name": "wanted has only one value"}, {"name": "wanted.invocation.location has only one value"}, {"name": "wanted.invocation.verified == false"}, {"name": "invocations[].getClass().getName() == [org.mockito.internal.invocation.Invocation]"}, {"name": "invocations[] contains no nulls and has only one value, of length 1"}, {"name": "invocations[].getClass().getName() elements == org.mockito.internal.invocation.Invocation.class"}, {"name": "wanted.invocation.mock has only one value"}, {"name": "wanted.invocation.rawArguments[] contains no nulls and has only one value, of length 1"}, {"name": "wanted.invocation.rawArguments[] elements has only one value"}, {"name": "wanted.matchers[] contains no nulls and has only one value, of length 1"}, {"name": "wanted.invocation.method has only one value"}, {"name": "wanted.invocation.arguments.getClass().getName() == java.lang.Object[].class"}, {"name": "wanted.invocation.arguments[] contains no nulls and has only one value, of length 1"}, {"name": "wanted.matchers[].getClass().getName() == [org.mockito.internal.matchers.Equals]"}, {"name": "wanted.invocation.verifiedInOrder == false"}, {"name": "wanted.invocation.arguments[] elements has only one value"}, {"name": "wanted.invocation.rawArguments[].getClass().getName() == [java.lang.String]"}, {"name": "invocations[] elements has only one value"}, {"name": "wanted.invocation.rawArguments[].getClass().getName() elements == java.lang.String.class"}, {"name": "wanted.invocation.realMethod.getClass().getName() == org.mockito.internal.invocation.realmethod.FilteredCGLIBProxyRealMethod.class"}, {"name": "wanted.invocation.sequenceNumber == 3"}, {"name": "wantedCount == 1"}, {"name": "invocations has only one value"}, {"name": "wanted.invocation.arguments[].getClass().getName() == [java.lang.String]"}, {"name": "wanted.invocation.arguments[].getClass().getName() elements == java.lang.String.class"}, {"name": "size(wanted.invocation.rawArguments[]) == 1"}, {"name": "size(wanted.matchers[]) == 1"}, {"name": "wanted.matchers.getClass().getName() == java.util.ArrayList.class"}, {"name": "size(wanted.invocation.arguments[]) == 1"}, {"name": "wanted.invocation.rawArguments has only one value"}, {"name": "wanted.matchers[].getClass().getName() elements == org.mockito.internal.matchers.Equals.class"}, {"name": "wanted.invocation.arguments has only one value"}, {"name": "size(invocations[]) == 1"}, {"name": "wanted.invocation has only one value"}, {"name": "wanted.invocation.rawArguments.getClass().getName() == java.lang.Object[].class"}]}, {"name": "b.inv.output", "children": [{"name": "b.inv.output", "children": [{"name": "N/A"}]}]}]}, {"name": "EXIT", "children": [{"name": "Patch179.inv.output", "children": [{"name": "wanted.matchers has only one value"}, {"name": "wanted.invocation.location has only one value"}, {"name": "wanted.invocation.verified == false"}, {"name": "wanted.invocation.rawArguments == orig(wanted.invocation.rawArguments)"}, {"name": "invocations[] contains no nulls and has only one value, of length 1"}, {"name": "invocations[].getClass().getName() elements == org.mockito.internal.invocation.Invocation.class"}, {"name": "wanted.invocation.location == orig(wanted.invocation.location)"}, {"name": "wanted.invocation.mock has only one value"}, {"name": "wanted.invocation.rawArguments[] contains no nulls and has only one value, of length 1"}, {"name": "wanted.invocation.rawArguments[] elements has only one value"}, {"name": "wanted.matchers[] contains no nulls and has only one value, of length 1"}, {"name": "wanted.matchers == orig(wanted.matchers)"}, {"name": "wanted.invocation.method has only one value"}, {"name": "wanted.invocation.arguments.getClass().getName() == java.lang.Object[].class"}, {"name": "wanted.invocation.realMethod == orig(wanted.invocation.realMethod)"}, {"name": "wanted.invocation == orig(wanted.invocation)"}, {"name": "this.reporter == orig(this.reporter)"}, {"name": "wanted.invocation.arguments[] elements has only one value"}, {"name": "wanted.invocation.verified == orig(wanted.invocation.verified)"}, {"name": "wanted.invocation.rawArguments[].getClass().getName() == [java.lang.String]"}, {"name": "wanted.invocation.rawArguments[].getClass().getName() elements == java.lang.String.class"}, {"name": "wanted.invocation.realMethod.getClass().getName() == org.mockito.internal.invocation.realmethod.FilteredCGLIBProxyRealMethod.class"}, {"name": "wanted.invocation.arguments[] == orig(wanted.invocation.arguments[])"}, {"name": "wanted.invocation.sequenceNumber == 3"}, {"name": "wanted.invocation.arguments[].getClass().getName() elements == java.lang.String.class"}, {"name": "wanted.matchers[] == orig(wanted.matchers[])"}, {"name": "size(wanted.invocation.rawArguments[]) == 1"}, {"name": "size(wanted.matchers[]) == 1"}, {"name": "wanted.matchers.getClass().getName() == java.util.ArrayList.class"}, {"name": "size(wanted.invocation.arguments[]) == 1"}, {"name": "wanted.invocation.rawArguments[] == orig(wanted.invocation.rawArguments[])"}, {"name": "wanted.invocation.arguments has only one value"}, {"name": "this.finder == orig(this.finder)"}, {"name": "wanted.invocation has only one value"}, {"name": "wanted.invocation.rawArguments.getClass().getName() == java.lang.Object[].class"}, {"name": "wanted.invocation.mock.getClass().getName() == org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest$Fun$$EnhancerByMockitoWithCGLIB$$4038d86a.class"}, {"name": "wanted.invocation.realMethod has only one value"}, {"name": "wanted.matchers[] elements has only one value"}, {"name": "wanted.invocation.verifiedInOrder == orig(wanted.invocation.verifiedInOrder)"}, {"name": "invocations[].getClass().getName() == [org.mockito.internal.invocation.Invocation]"}, {"name": "wanted.invocation.mock == orig(wanted.invocation.mock)"}, {"name": "wanted.invocation.arguments.getClass().getName() == orig(wanted.invocation.arguments.getClass().getName())"}, {"name": "wanted.invocation.arguments[] contains no nulls and has only one value, of length 1"}, {"name": "wanted.invocation.sequenceNumber == orig(wanted.invocation.sequenceNumber)"}, {"name": "wanted.invocation.rawArguments.getClass().getName() == orig(wanted.invocation.rawArguments.getClass().getName())"}, {"name": "wanted.invocation.realMethod.getClass().getName() == orig(wanted.invocation.realMethod.getClass().getName())"}, {"name": "wanted.matchers[].getClass().getName() == [org.mockito.internal.matchers.Equals]"}, {"name": "wanted.invocation.verifiedInOrder == false"}, {"name": "wanted.matchers.getClass().getName() == orig(wanted.matchers.getClass().getName())"}, {"name": "invocations[] elements has only one value"}, {"name": "wanted.invocation.mock.getClass().getName() == orig(wanted.invocation.mock.getClass().getName())"}, {"name": "wanted.invocation.method == orig(wanted.invocation.method)"}, {"name": "wanted.invocation.arguments[].getClass().getName() == [java.lang.String]"}, {"name": "wanted.invocation.rawArguments has only one value"}, {"name": "invocations[] == orig(invocations[])"}, {"name": "wanted.matchers[].getClass().getName() elements == org.mockito.internal.matchers.Equals.class"}, {"name": "wanted.invocation.arguments == orig(wanted.invocation.arguments)"}]}, {"name": "b.inv.output", "children": [{"name": "b.inv.output", "children": [{"name": "N/A"}]}]}]}]}, {"name": "NumberOfInvocationsChecker()", "children": [{"name": "EXIT", "children": [{"name": "Patch179.inv.output", "children": []}, {"name": "b.inv.output", "children": [{"name": "b.inv.output", "children": [{"name": "N/A"}]}]}]}]}]}
