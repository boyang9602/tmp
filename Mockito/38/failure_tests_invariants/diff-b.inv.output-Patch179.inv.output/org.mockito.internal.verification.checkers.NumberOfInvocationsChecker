{"org.mockito.internal.verification.checkers.NumberOfInvocationsChecker":[{"OBJECT":[{"Patch179.inv.output":{"invs":["this has only one value","this.reporter has only one value","this.finder has only one value"]}},{"b.inv.output":"N/A"}]},{"NumberOfInvocationsChecker(org.mockito.exceptions.Reporter, org.mockito.internal.invocation.InvocationsFinder)":[{"ENTER":[{"Patch179.inv.output":{"invs":["reporter has only one value","finder has only one value"]}},{"b.inv.output":"N/A"}]},{"EXIT":[{"Patch179.inv.output":{"invs":[]}},{"b.inv.output":"N/A"}]}]},{"check(java.util.List, org.mockito.internal.invocation.InvocationMatcher, int)":[{"ENTER":[{"Patch179.inv.output":{"invs":["wanted.invocation.mock.getClass().getName() == org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest$Fun$$EnhancerByMockitoWithCGLIB$$4038d86a.class","wanted.invocation.realMethod has only one value","invocations.getClass().getName() == java.util.LinkedList.class","wanted.matchers has only one value","wanted.matchers[] elements has only one value","wanted has only one value","wanted.invocation.location has only one value","wanted.invocation.verified == false","invocations[].getClass().getName() == [org.mockito.internal.invocation.Invocation]","invocations[] contains no nulls and has only one value, of length 1","invocations[].getClass().getName() elements == org.mockito.internal.invocation.Invocation.class","wanted.invocation.mock has only one value","wanted.invocation.rawArguments[] contains no nulls and has only one value, of length 1","wanted.invocation.rawArguments[] elements has only one value","wanted.matchers[] contains no nulls and has only one value, of length 1","wanted.invocation.method has only one value","wanted.invocation.arguments.getClass().getName() == java.lang.Object[].class","wanted.invocation.arguments[] contains no nulls and has only one value, of length 1","wanted.matchers[].getClass().getName() == [org.mockito.internal.matchers.Equals]","wanted.invocation.verifiedInOrder == false","wanted.invocation.arguments[] elements has only one value","wanted.invocation.rawArguments[].getClass().getName() == [java.lang.String]","invocations[] elements has only one value","wanted.invocation.rawArguments[].getClass().getName() elements == java.lang.String.class","wanted.invocation.realMethod.getClass().getName() == org.mockito.internal.invocation.realmethod.FilteredCGLIBProxyRealMethod.class","wanted.invocation.sequenceNumber == 3","wantedCount == 1","invocations has only one value","wanted.invocation.arguments[].getClass().getName() == [java.lang.String]","wanted.invocation.arguments[].getClass().getName() elements == java.lang.String.class","size(wanted.invocation.rawArguments[]) == 1","size(wanted.matchers[]) == 1","wanted.matchers.getClass().getName() == java.util.ArrayList.class","size(wanted.invocation.arguments[]) == 1","wanted.invocation.rawArguments has only one value","wanted.matchers[].getClass().getName() elements == org.mockito.internal.matchers.Equals.class","wanted.invocation.arguments has only one value","size(invocations[]) == 1","wanted.invocation has only one value","wanted.invocation.rawArguments.getClass().getName() == java.lang.Object[].class"]}},{"b.inv.output":"N/A"}]},{"EXIT":[{"Patch179.inv.output":{"invs":["wanted.matchers has only one value","wanted.invocation.location has only one value","wanted.invocation.verified == false","wanted.invocation.rawArguments == orig(wanted.invocation.rawArguments)","invocations[] contains no nulls and has only one value, of length 1","invocations[].getClass().getName() elements == org.mockito.internal.invocation.Invocation.class","wanted.invocation.location == orig(wanted.invocation.location)","wanted.invocation.mock has only one value","wanted.invocation.rawArguments[] contains no nulls and has only one value, of length 1","wanted.invocation.rawArguments[] elements has only one value","wanted.matchers[] contains no nulls and has only one value, of length 1","wanted.matchers == orig(wanted.matchers)","wanted.invocation.method has only one value","wanted.invocation.arguments.getClass().getName() == java.lang.Object[].class","wanted.invocation.realMethod == orig(wanted.invocation.realMethod)","wanted.invocation == orig(wanted.invocation)","this.reporter == orig(this.reporter)","wanted.invocation.arguments[] elements has only one value","wanted.invocation.verified == orig(wanted.invocation.verified)","wanted.invocation.rawArguments[].getClass().getName() == [java.lang.String]","wanted.invocation.rawArguments[].getClass().getName() elements == java.lang.String.class","wanted.invocation.realMethod.getClass().getName() == org.mockito.internal.invocation.realmethod.FilteredCGLIBProxyRealMethod.class","wanted.invocation.arguments[] == orig(wanted.invocation.arguments[])","wanted.invocation.sequenceNumber == 3","wanted.invocation.arguments[].getClass().getName() elements == java.lang.String.class","wanted.matchers[] == orig(wanted.matchers[])","size(wanted.invocation.rawArguments[]) == 1","size(wanted.matchers[]) == 1","wanted.matchers.getClass().getName() == java.util.ArrayList.class","size(wanted.invocation.arguments[]) == 1","wanted.invocation.rawArguments[] == orig(wanted.invocation.rawArguments[])","wanted.invocation.arguments has only one value","this.finder == orig(this.finder)","wanted.invocation has only one value","wanted.invocation.rawArguments.getClass().getName() == java.lang.Object[].class","wanted.invocation.mock.getClass().getName() == org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest$Fun$$EnhancerByMockitoWithCGLIB$$4038d86a.class","wanted.invocation.realMethod has only one value","wanted.matchers[] elements has only one value","wanted.invocation.verifiedInOrder == orig(wanted.invocation.verifiedInOrder)","invocations[].getClass().getName() == [org.mockito.internal.invocation.Invocation]","wanted.invocation.mock == orig(wanted.invocation.mock)","wanted.invocation.arguments.getClass().getName() == orig(wanted.invocation.arguments.getClass().getName())","wanted.invocation.arguments[] contains no nulls and has only one value, of length 1","wanted.invocation.sequenceNumber == orig(wanted.invocation.sequenceNumber)","wanted.invocation.rawArguments.getClass().getName() == orig(wanted.invocation.rawArguments.getClass().getName())","wanted.invocation.realMethod.getClass().getName() == orig(wanted.invocation.realMethod.getClass().getName())","wanted.matchers[].getClass().getName() == [org.mockito.internal.matchers.Equals]","wanted.invocation.verifiedInOrder == false","wanted.matchers.getClass().getName() == orig(wanted.matchers.getClass().getName())","invocations[] elements has only one value","wanted.invocation.mock.getClass().getName() == orig(wanted.invocation.mock.getClass().getName())","wanted.invocation.method == orig(wanted.invocation.method)","wanted.invocation.arguments[].getClass().getName() == [java.lang.String]","wanted.invocation.rawArguments has only one value","invocations[] == orig(invocations[])","wanted.matchers[].getClass().getName() elements == org.mockito.internal.matchers.Equals.class","wanted.invocation.arguments == orig(wanted.invocation.arguments)"]}},{"b.inv.output":"N/A"}]}]},{"NumberOfInvocationsChecker()":[{"EXIT":[{"Patch179.inv.output":{"invs":[]}},{"b.inv.output":"N/A"}]}]}]}