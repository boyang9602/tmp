{"org.mockito.exceptions.verification.junit.ArgumentsAreDifferent":[{"CLASS":[{"f.inv.output":{"invs":[]}},{"b.inv.output":"N/A"}]},{"OBJECT":[{"f.inv.output":{"invs":["this.unfilteredStackTrace[].getClass().getName() == [java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement, java.lang.StackTraceElement]","size(this.unfilteredStackTrace[]) == 34","this has only one value","this.unfilteredStackTrace[].getClass().getName() elements == java.lang.StackTraceElement.class","this.message has only one value","this.message.toString == \"\\nArgument(s) are different! Wanted:\\nfun.doFun(\\\"hello\\\");\\n-> at org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest.shouldAllowPassingNullArgument(ActualInvocationHasNullArgumentNPEBugTest.java:30)\\nActual invocation has different arguments:\\nfun.doFun(null);\\n-> at org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest.shouldAllowPassingNullArgument(ActualInvocationHasNullArgumentNPEBugTest.java:26)\\n\"","this.unfilteredStackTrace.getClass().getName() == java.lang.StackTraceElement[].class","this.unfilteredStackTrace has only one value","this.unfilteredStackTrace[] contains no nulls and has only one value, of length 34"]}},{"b.inv.output":"N/A"}]},{"ArgumentsAreDifferent(java.lang.String, java.lang.String, java.lang.String)":[{"ENTER":[{"f.inv.output":{"invs":["message.toString == \"\\nArgument(s) are different! Wanted:\\nfun.doFun(\\\"hello\\\");\\n-> at org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest.shouldAllowPassingNullArgument(ActualInvocationHasNullArgumentNPEBugTest.java:30)\\nActual invocation has different arguments:\\nfun.doFun(null);\\n-> at org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest.shouldAllowPassingNullArgument(ActualInvocationHasNullArgumentNPEBugTest.java:26)\\n\"","wanted.toString == \"fun.doFun(\\\"hello\\\");\"","wanted has only one value","actual.toString == \"fun.doFun(null);\"","actual has only one value","message has only one value"]}},{"b.inv.output":"N/A"}]},{"EXIT":[{"f.inv.output":{"invs":["message.toString == \"\\nArgument(s) are different! Wanted:\\nfun.doFun(\\\"hello\\\");\\n-> at org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest.shouldAllowPassingNullArgument(ActualInvocationHasNullArgumentNPEBugTest.java:30)\\nActual invocation has different arguments:\\nfun.doFun(null);\\n-> at org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest.shouldAllowPassingNullArgument(ActualInvocationHasNullArgumentNPEBugTest.java:26)\\n\"","wanted.toString == \"fun.doFun(\\\"hello\\\");\"","actual.toString == \"fun.doFun(null);\"","wanted.toString == orig(wanted.toString)","actual.toString == orig(actual.toString)","message.toString == orig(message.toString)"]}},{"b.inv.output":"N/A"}]}]}]}