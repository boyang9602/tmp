===========================================================================
org.apache.commons.math.ConvergingAlgorithmImpl:::OBJECT
this.getClass().getName() == org.apache.commons.math.analysis.solvers.BrentSolver.class
this.absoluteAccuracy one of { 1.0E-20, 2.384185791015625E-7, 1.0E-6 }
this.relativeAccuracy == 1.0E-14
this.maximalIterationCount == 100
this.defaultAbsoluteAccuracy == 1.0E-6
this.defaultRelativeAccuracy == 1.0E-14
this.defaultMaximalIterationCount == 100
this.iterationCount == 0
===========================================================================
org.apache.commons.math.ConvergingAlgorithmImpl.ConvergingAlgorithmImpl(int, double):::ENTER
defaultMaximalIterationCount == 100
defaultAbsoluteAccuracy == 1.0E-6
===========================================================================
org.apache.commons.math.ConvergingAlgorithmImpl.ConvergingAlgorithmImpl(int, double):::EXIT
this.absoluteAccuracy == 1.0E-6
===========================================================================
org.apache.commons.math.ConvergingAlgorithmImpl.setAbsoluteAccuracy(double):::ENTER
this.absoluteAccuracy == 1.0E-6
accuracy one of { 1.0E-20, 2.384185791015625E-7 }
===========================================================================
org.apache.commons.math.ConvergingAlgorithmImpl.setAbsoluteAccuracy(double):::EXIT
this.relativeAccuracy == orig(this.relativeAccuracy)
this.maximalIterationCount == orig(this.maximalIterationCount)
this.defaultAbsoluteAccuracy == orig(this.defaultAbsoluteAccuracy)
this.defaultRelativeAccuracy == orig(this.defaultRelativeAccuracy)
this.defaultMaximalIterationCount == orig(this.defaultMaximalIterationCount)
this.iterationCount == orig(this.iterationCount)
this.absoluteAccuracy one of { 1.0E-20, 2.384185791015625E-7 }
===========================================================================
org.apache.commons.math.ConvergingAlgorithmImpl.setMaximalIterationCount(int):::ENTER
this.absoluteAccuracy one of { 1.0E-20, 2.384185791015625E-7 }
count == 100
===========================================================================
org.apache.commons.math.ConvergingAlgorithmImpl.setMaximalIterationCount(int):::EXIT
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.maximalIterationCount == orig(this.maximalIterationCount)
this.defaultAbsoluteAccuracy == orig(this.defaultAbsoluteAccuracy)
this.defaultRelativeAccuracy == orig(this.defaultRelativeAccuracy)
this.defaultMaximalIterationCount == orig(this.defaultMaximalIterationCount)
this.iterationCount == orig(this.iterationCount)
this.absoluteAccuracy one of { 1.0E-20, 2.384185791015625E-7 }
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver:::CLASS
org.apache.commons.math.analysis.solvers.BrentSolver.NON_BRACKETING_MESSAGE has only one value
org.apache.commons.math.analysis.solvers.BrentSolver.NON_BRACKETING_MESSAGE.toString == "function values at endpoints do not have different signs.  Endpoints: [{0}, {1}], Values: [{2}, {3}]"
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver:::OBJECT
this.functionValueAccuracy == 1.0E-15
this.defaultFunctionValueAccuracy == 1.0E-15
this.result one of { 0.0, 1.878250380000003E9 }
this.functionValue == 0.0
this.f == null
this.absoluteAccuracy one of { 1.0E-20, 2.384185791015625E-7, 1.0E-6 }
this.relativeAccuracy == 1.0E-14
this.maximalIterationCount == 100
this.defaultAbsoluteAccuracy == 1.0E-6
this.defaultRelativeAccuracy == 1.0E-14
this.defaultMaximalIterationCount == 100
this.iterationCount one of { 0, 1 }
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver.BrentSolver():::EXIT
this.resultComputed == false
this.result == 0.0
this.absoluteAccuracy == 1.0E-6
this.iterationCount == 0
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver.solve(org.apache.commons.math.analysis.UnivariateRealFunction, double, double):::ENTER
this.resultComputed == false
this.result == 0.0
this.absoluteAccuracy one of { 1.0E-20, 2.384185791015625E-7 }
this.iterationCount == 0
f.getClass().getName() == org.apache.commons.math.ode.events.EventState$1.class
min == 1.8782503200000029E9
max == 1.878250380000003E9
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver.solve(org.apache.commons.math.analysis.UnivariateRealFunction, double, double):::EXIT
org.apache.commons.math.analysis.solvers.BrentSolver.NON_BRACKETING_MESSAGE == orig(org.apache.commons.math.analysis.solvers.BrentSolver.NON_BRACKETING_MESSAGE)
org.apache.commons.math.analysis.solvers.BrentSolver.NON_BRACKETING_MESSAGE.toString == orig(org.apache.commons.math.analysis.solvers.BrentSolver.NON_BRACKETING_MESSAGE.toString)
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.defaultFunctionValueAccuracy == orig(this.defaultFunctionValueAccuracy)
this.functionValue == orig(this.functionValue)
this.f == orig(this.f)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.maximalIterationCount == orig(this.maximalIterationCount)
this.defaultAbsoluteAccuracy == orig(this.defaultAbsoluteAccuracy)
this.defaultRelativeAccuracy == orig(this.defaultRelativeAccuracy)
this.defaultMaximalIterationCount == orig(this.defaultMaximalIterationCount)
this.resultComputed == true
this.result == 1.878250380000003E9
this.absoluteAccuracy one of { 1.0E-20, 2.384185791015625E-7 }
this.iterationCount == 1
return == 1.878250380000003E9
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver.solve(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double, double, double, double):::ENTER
this.resultComputed == false
this.result == 0.0
this.absoluteAccuracy one of { 1.0E-20, 2.384185791015625E-7 }
this.iterationCount == 0
f.getClass().getName() == org.apache.commons.math.ode.events.EventState$1.class
x0 == 1.8782504800000029E9
y0 one of { -59.999995708465576, -19.999995708465576 }
x1 == 1.878250580000003E9
y1 one of { 4.291534423828125E-6, 4.5299530029296875E-6, 80.000004529953 }
x2 == 1.8782504800000029E9
y2 one of { -59.999995708465576, -19.999995708465576 }
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver.solve(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double, double, double, double):::EXIT279
this.absoluteAccuracy == 2.384185791015625E-7
orig(this) has only one value
orig(f) has only one value
orig(y0) == -19.999995708465576
orig(y1) == 80.000004529953
orig(y2) == -19.999995708465576
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver.solve(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double, double, double, double):::EXIT286
orig(y0) == -59.999995708465576
orig(y1) one of { 4.291534423828125E-6, 4.5299530029296875E-6 }
orig(y2) == -59.999995708465576
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver.solve(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double, double, double, double):::EXIT
org.apache.commons.math.analysis.solvers.BrentSolver.NON_BRACKETING_MESSAGE == orig(org.apache.commons.math.analysis.solvers.BrentSolver.NON_BRACKETING_MESSAGE)
org.apache.commons.math.analysis.solvers.BrentSolver.NON_BRACKETING_MESSAGE.toString == orig(org.apache.commons.math.analysis.solvers.BrentSolver.NON_BRACKETING_MESSAGE.toString)
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.defaultFunctionValueAccuracy == orig(this.defaultFunctionValueAccuracy)
this.functionValue == orig(this.functionValue)
this.f == orig(this.f)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.maximalIterationCount == orig(this.maximalIterationCount)
this.defaultAbsoluteAccuracy == orig(this.defaultAbsoluteAccuracy)
this.defaultRelativeAccuracy == orig(this.defaultRelativeAccuracy)
this.defaultMaximalIterationCount == orig(this.defaultMaximalIterationCount)
(this.result == 1.878250380000003E9)  <==>  (orig(y0) == -59.999995708465576)
(this.result == 1.878250380000003E9)  <==>  (orig(y1) one of { 4.291534423828125E-6, 4.5299530029296875E-6 })
(this.result == 1.878250380000003E9)  <==>  (orig(y2) == -59.999995708465576)
(this.result == 1.878250380000003E9)  <==>  (y0 one of { -5.0067901611328125E-6, -4.76837158203125E-6 })
(this.result == 1.878250380000003E9)  <==>  (y1 == orig(y1))
(this.result == 1.878250380000003E9)  <==>  (y1 one of { 4.291534423828125E-6, 4.5299530029296875E-6 })
(this.result == 1.878250380000003E9)  <==>  (y2 one of { -5.0067901611328125E-6, -4.76837158203125E-6 })
(this.result == 1.878250380000003E9)  ==>  (this.absoluteAccuracy one of { 1.0E-20, 2.384185791015625E-7 })
(y0 == -19.999995708465576)  <==>  (orig(y0) == -19.999995708465576)
(y0 == -19.999995708465576)  <==>  (orig(y1) == 80.000004529953)
(y0 == -19.999995708465576)  <==>  (orig(y2) == -19.999995708465576)
(y0 == -19.999995708465576)  <==>  (y0 == orig(y0))
(y0 == -19.999995708465576)  <==>  (y1 == 0.0)
(y0 == -19.999995708465576)  <==>  (y2 == 80.000004529953)
(y0 == -19.999995708465576)  ==>  (orig(f) has only one value)
(y0 == -19.999995708465576)  ==>  (orig(this) has only one value)
(y0 == -19.999995708465576)  ==>  (this.absoluteAccuracy == 2.384185791015625E-7)
this.resultComputed == true
this.result == 1.8782504999999986E9
this.absoluteAccuracy one of { 1.0E-20, 2.384185791015625E-7 }
this.iterationCount == 1
return == 1.8782504999999986E9
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl:::OBJECT
this.getClass().getName() == org.apache.commons.math.analysis.solvers.BrentSolver.class
this.functionValueAccuracy == 1.0E-15
this.defaultFunctionValueAccuracy == 1.0E-15
this.result one of { 0.0, 1.878250380000003E9 }
this.functionValue == 0.0
this.f == null
this.absoluteAccuracy one of { 1.0E-20, 2.384185791015625E-7, 1.0E-6 }
this.relativeAccuracy == 1.0E-14
this.maximalIterationCount == 100
this.defaultAbsoluteAccuracy == 1.0E-6
this.defaultRelativeAccuracy == 1.0E-14
this.defaultMaximalIterationCount == 100
this.iterationCount one of { 0, 1 }
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.UnivariateRealSolverImpl(int, double):::ENTER
defaultMaximalIterationCount == 100
defaultAbsoluteAccuracy == 1.0E-6
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.UnivariateRealSolverImpl(int, double):::EXIT
this.resultComputed == false
this.result == 0.0
this.absoluteAccuracy == 1.0E-6
this.iterationCount == 0
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.clearResult():::ENTER
this.resultComputed == false
this.result == 0.0
this.absoluteAccuracy one of { 1.0E-20, 2.384185791015625E-7 }
this.iterationCount == 0
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.clearResult():::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.defaultFunctionValueAccuracy == orig(this.defaultFunctionValueAccuracy)
this.resultComputed == orig(this.resultComputed)
this.result == orig(this.result)
this.functionValue == orig(this.functionValue)
this.f == orig(this.f)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.maximalIterationCount == orig(this.maximalIterationCount)
this.defaultAbsoluteAccuracy == orig(this.defaultAbsoluteAccuracy)
this.defaultRelativeAccuracy == orig(this.defaultRelativeAccuracy)
this.defaultMaximalIterationCount == orig(this.defaultMaximalIterationCount)
this.iterationCount == orig(this.iterationCount)
this.resultComputed == false
this.result == 0.0
this.absoluteAccuracy one of { 1.0E-20, 2.384185791015625E-7 }
this.iterationCount == 0
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.setResult(double, int):::ENTER
this.resultComputed == false
this.result == 0.0
this.absoluteAccuracy one of { 1.0E-20, 2.384185791015625E-7 }
this.iterationCount == 0
newResult == 1.878250380000003E9
iterationCount == 1
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.setResult(double, int):::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.defaultFunctionValueAccuracy == orig(this.defaultFunctionValueAccuracy)
this.functionValue == orig(this.functionValue)
this.f == orig(this.f)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.maximalIterationCount == orig(this.maximalIterationCount)
this.defaultAbsoluteAccuracy == orig(this.defaultAbsoluteAccuracy)
this.defaultRelativeAccuracy == orig(this.defaultRelativeAccuracy)
this.defaultMaximalIterationCount == orig(this.defaultMaximalIterationCount)
this.resultComputed == true
this.result == 1.878250380000003E9
this.absoluteAccuracy one of { 1.0E-20, 2.384185791015625E-7 }
this.iterationCount == 1
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.verifyInterval(double, double):::ENTER
this.resultComputed == false
this.result == 0.0
this.absoluteAccuracy one of { 1.0E-20, 2.384185791015625E-7 }
this.iterationCount == 0
lower == 1.8782503200000029E9
upper == 1.878250380000003E9
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.verifyInterval(double, double):::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.defaultFunctionValueAccuracy == orig(this.defaultFunctionValueAccuracy)
this.resultComputed == orig(this.resultComputed)
this.result == orig(this.result)
this.functionValue == orig(this.functionValue)
this.f == orig(this.f)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.maximalIterationCount == orig(this.maximalIterationCount)
this.defaultAbsoluteAccuracy == orig(this.defaultAbsoluteAccuracy)
this.defaultRelativeAccuracy == orig(this.defaultRelativeAccuracy)
this.defaultMaximalIterationCount == orig(this.defaultMaximalIterationCount)
this.iterationCount == orig(this.iterationCount)
this.resultComputed == false
this.result == 0.0
this.absoluteAccuracy one of { 1.0E-20, 2.384185791015625E-7 }
this.iterationCount == 0
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator$EndTimeChecker:::OBJECT
this.endTime == 1.8782503799999986E9
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator$EndTimeChecker.EndTimeChecker(double):::ENTER
endTime == 1.8782503799999986E9
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator$EndTimeChecker.EndTimeChecker(double):::EXIT
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator$EndTimeChecker.eventOccurred(double, double[], boolean):::ENTER
t == 1.878250380000003E9
increasing == true
size(y[]) == 3
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator$EndTimeChecker.eventOccurred(double, double[], boolean):::EXIT
this.endTime == orig(this.endTime)
y[] == orig(y[])
return == 0
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator$EndTimeChecker.g(double, double[]):::ENTER
t == 1.8782503200000029E9
y[] sorted by <
size(y[]) == 3
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator$EndTimeChecker.g(double, double[]):::EXIT
this.endTime == orig(this.endTime)
y[] == orig(y[])
y[] sorted by <
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator:::OBJECT
this.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.stepStart one of { 1.8782503200000029E9, Double.NaN }
this.stepSize >= 0.0
this.eventsHandlersManager.states[] elements != null
this.eventsHandlersManager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
this.eventsHandlersManager.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState] }
this.eventsHandlersManager.states.getClass().getName() == java.util.ArrayList.class
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.name.toString one of { "Dormand-Prince 8 (5, 3)", "classical Runge-Kutta" }
this.maxEvaluations one of { 0, 2147483647 }
this.evaluations >= 0
size(this.eventsHandlersManager.states[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.AbstractIntegrator(java.lang.String):::ENTER
name.toString one of { "Dormand-Prince 8 (5, 3)", "classical Runge-Kutta" }
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.AbstractIntegrator(java.lang.String):::EXIT
name.toString == orig(name.toString)
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.maxEvaluations == 2147483647
this.evaluations == 0
this.equations == null
name.toString one of { "Dormand-Prince 8 (5, 3)", "classical Runge-Kutta" }
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.addEndTimeChecker(double, double, org.apache.commons.math.ode.events.CombinedEventsManager):::ENTER
this.stepStart == 1.8782503200000029E9
this.stepSize one of { 0.0, 60.0 }
this.maxEvaluations == 2147483647
this.evaluations == 0
startTime == 1.8782503200000029E9
endTime == 1.8782503799999986E9
manager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
manager.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState] }
manager.states.getClass().getName() == java.util.ArrayList.class
manager.first == null
manager.initialized == false
size(manager.states[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.addEndTimeChecker(double, double, org.apache.commons.math.ode.events.CombinedEventsManager):::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
manager.states == orig(manager.states)
manager.states[] == orig(manager.states[])
manager.states.getClass().getName() == orig(manager.states.getClass().getName())
manager.first == orig(manager.first)
manager.initialized == orig(manager.initialized)
this.stepStart == 1.8782503200000029E9
this.stepSize one of { 0.0, 60.0 }
this.maxEvaluations == 2147483647
this.evaluations == 0
manager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
manager.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState] }
manager.states.getClass().getName() == java.util.ArrayList.class
manager.first == null
manager.initialized == false
return.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
return.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
return.states.getClass().getName() == java.util.ArrayList.class
return.first == null
return.initialized == false
size(manager.states[]) one of { 0, 1 }
size(return.states[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.addEventHandler(org.apache.commons.math.ode.events.EventHandler, double, double, int):::ENTER
this.stepStart == Double.NaN
this.stepSize one of { 0.0, Double.NaN }
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.maxEvaluations == 2147483647
this.evaluations one of { 8, 25 }
maxCheckInterval == Infinity
convergence == 1.0E-20
maxIterationCount == 100
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.addEventHandler(org.apache.commons.math.ode.events.EventHandler, double, double, int):::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
size(this.eventsHandlersManager.states[])-1 == orig(size(this.eventsHandlersManager.states[]))
this.stepStart == Double.NaN
this.stepSize one of { 0.0, Double.NaN }
this.eventsHandlersManager.states[].getClass().getName() == [org.apache.commons.math.ode.events.EventState]
this.maxEvaluations == 2147483647
this.evaluations one of { 8, 25 }
size(this.eventsHandlersManager.states[]) == 1
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.computeDerivatives(double, double[], double[]):::ENTER
this.stepStart == 1.8782503200000029E9
this.maxEvaluations == 2147483647
t == 1.8782503200000029E9
y[] sorted by <
yDot[] sorted by >=
size(y[]) == 3
size(yDot[]) == 3
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.computeDerivatives(double, double[], double[]):::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
y[] == orig(y[])
this.stepStart == 1.8782503200000029E9
this.maxEvaluations == 2147483647
this.evaluations >= 1
y[] sorted by <
yDot[] sorted by >
this.evaluations - orig(this.evaluations) - 1 == 0
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.requiresDenseOutput():::ENTER
this.stepStart == Double.NaN
this.stepSize one of { 0.0, Double.NaN }
this.maxEvaluations == 2147483647
this.evaluations == 0
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.requiresDenseOutput():::EXIT128
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.requiresDenseOutput():::EXIT128;condition="not(return == true)"
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.requiresDenseOutput():::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.stepStart == Double.NaN
this.stepSize one of { 0.0, Double.NaN }
this.maxEvaluations == 2147483647
this.evaluations == 0
return == false
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.requiresDenseOutput():::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.resetEvaluations():::ENTER
this.stepStart == Double.NaN
this.stepSize one of { 0.0, Double.NaN }
this.maxEvaluations == 2147483647
this.evaluations one of { 0, 8, 25 }
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.resetEvaluations():::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.stepStart == Double.NaN
this.stepSize one of { 0.0, Double.NaN }
this.maxEvaluations == 2147483647
this.evaluations == 0
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.sanityChecks(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double, double[], double, double[]):::ENTER
this.stepStart == Double.NaN
this.stepSize one of { 0.0, Double.NaN }
this.maxEvaluations == 2147483647
this.evaluations one of { 0, 8, 25 }
t0 == 1.8782503200000029E9
y0[] == [1.0, 2.0, 3.0]
y0[] elements one of { 1.0, 2.0, 3.0 }
t == 1.8782503799999986E9
y[] one of { [0.0, 0.0, 0.0], [1.0060180360779853, 2.001200360076782, 3.000180005400823], [1.0060180360780502, 2.001200360076782, 3.000180005400823] }
y[] elements >= 0.0
size(y0[]) == 3
size(y[]) == 3
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.sanityChecks(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double, double[], double, double[]):::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
y0[] == orig(y0[])
y[] == orig(y[])
this.stepStart == Double.NaN
this.stepSize one of { 0.0, Double.NaN }
this.maxEvaluations == 2147483647
this.evaluations one of { 0, 8, 25 }
y0[] == [1.0, 2.0, 3.0]
y0[] elements one of { 1.0, 2.0, 3.0 }
y[] one of { [0.0, 0.0, 0.0], [1.0060180360779853, 2.001200360076782, 3.000180005400823], [1.0060180360780502, 2.001200360076782, 3.000180005400823] }
y[] elements >= 0.0
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.setEquations(org.apache.commons.math.ode.FirstOrderDifferentialEquations):::ENTER
this.stepStart == Double.NaN
this.stepSize one of { 0.0, Double.NaN }
this.maxEvaluations == 2147483647
this.evaluations one of { 0, 8, 25 }
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.setEquations(org.apache.commons.math.ode.FirstOrderDifferentialEquations):::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.stepStart == Double.NaN
this.stepSize one of { 0.0, Double.NaN }
this.maxEvaluations == 2147483647
this.evaluations one of { 0, 8, 25 }
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.setMaxEvaluations(int):::ENTER
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.maxEvaluations == 0
this.evaluations == 0
this.equations == null
maxEvaluations == -1
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.setMaxEvaluations(int):::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.maxEvaluations == 2147483647
this.evaluations == 0
this.equations == null
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager:::OBJECT
this.states[] elements != null
this.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
this.states.getClass().getName() == java.util.ArrayList.class
this.first.maxCheckInterval == Infinity
this.first.convergence one of { 1.0E-20, 2.384185791015625E-7 }
this.first.maxIterationCount == 100
this.first.t0 == 1.8782503200000029E9
this.first.g0 one of { -59.999995708465576, -19.999995708465576 }
this.first.g0Positive == false
this.first.pendingEvent == true
this.first.pendingEventTime == 1.878250380000003E9
this.first.previousEventTime == Double.NaN
this.first.forward == true
this.first.increasing == true
this.first.nextAction == 3
size(this.states[]) one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.CombinedEventsManager():::EXIT
this.states[] == []
this.states[].getClass().getName() == []
this.first == null
this.initialized == false
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.addEventHandler(org.apache.commons.math.ode.events.EventHandler, double, double, int):::ENTER
this.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState] }
this.first == null
this.initialized == false
maxCheckInterval == Infinity
convergence one of { 1.0E-20, 2.384185791015625E-7 }
maxIterationCount == 100
size(this.states[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.addEventHandler(org.apache.commons.math.ode.events.EventHandler, double, double, int):::EXIT
this.states == orig(this.states)
this.states.getClass().getName() == orig(this.states.getClass().getName())
this.first == orig(this.first)
this.initialized == orig(this.initialized)
size(this.states[])-1 == orig(size(this.states[]))
this.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.first == null
this.initialized == false
size(this.states[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::ENTER
this.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
size(this.states[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT170
(return == false)  ==>  (orig(this.first.convergence) one of { 1.0E-20, 2.384185791015625E-7 })
(return == false)  ==>  (orig(this.first.g0) one of { -59.999995708465576, -19.999995708465576 })
(return == false)  ==>  (orig(this.initialized) == true)
(return == false)  ==>  (this.first == null)
(return == false)  ==>  (this.initialized == orig(this.initialized))
(return == true)  ==>  (orig(this.first) == null)
(return == true)  ==>  (this.first.convergence one of { 1.0E-20, 2.384185791015625E-7 })
(return == true)  ==>  (this.first.g0 one of { -59.999995708465576, -19.999995708465576 })
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT170;condition="return == true"
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT170;condition="not(return == true)"
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT
this.states == orig(this.states)
this.states[] == orig(this.states[])
this.states.getClass().getName() == orig(this.states.getClass().getName())
(return == false)  ==>  (orig(this.first.convergence) one of { 1.0E-20, 2.384185791015625E-7 })
(return == false)  ==>  (orig(this.first.g0) one of { -59.999995708465576, -19.999995708465576 })
(return == false)  ==>  (orig(this.initialized) == true)
(return == false)  ==>  (this.first == null)
(return == false)  ==>  (this.initialized == orig(this.initialized))
(return == true)  ==>  (orig(this.first) == null)
(return == true)  ==>  (this.first.convergence one of { 1.0E-20, 2.384185791015625E-7 })
(return == true)  ==>  (this.first.g0 one of { -59.999995708465576, -19.999995708465576 })
this.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.initialized == true
size(this.states[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT;condition="return == true"
return == true
orig(this.first) == null
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT;condition="not(return == true)"
this.initialized == orig(this.initialized)
this.first == null
return == false
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.getEventTime():::ENTER
this.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.initialized == true
size(this.states[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.getEventTime():::EXIT
this.states == orig(this.states)
this.states[] == orig(this.states[])
this.states.getClass().getName() == orig(this.states.getClass().getName())
this.first == orig(this.first)
this.first.handler == orig(this.first.handler)
this.first.handler.getClass().getName() == orig(this.first.handler.getClass().getName())
this.first.maxCheckInterval == orig(this.first.maxCheckInterval)
this.first.convergence == orig(this.first.convergence)
this.first.maxIterationCount == orig(this.first.maxIterationCount)
this.first.t0 == orig(this.first.t0)
this.first.g0 == orig(this.first.g0)
this.first.g0Positive == orig(this.first.g0Positive)
this.first.pendingEvent == orig(this.first.pendingEvent)
this.first.pendingEventTime == orig(this.first.pendingEventTime)
this.first.forward == orig(this.first.forward)
this.first.increasing == orig(this.first.increasing)
this.first.nextAction == orig(this.first.nextAction)
this.initialized == orig(this.initialized)
this.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.initialized == true
return == 1.878250380000003E9
size(this.states[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.getEventsStates():::ENTER
this.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState] }
this.first == null
this.initialized == false
size(this.states[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.getEventsStates():::EXIT
this.states == orig(this.states)
this.states[] == orig(this.states[])
this.states.getClass().getName() == orig(this.states.getClass().getName())
this.first == orig(this.first)
this.initialized == orig(this.initialized)
this.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState] }
this.first == null
this.initialized == false
return.getClass().getName() == java.util.ArrayList.class
size(this.states[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.isEmpty():::ENTER
this.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState] }
this.first == null
this.initialized == false
size(this.states[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.isEmpty():::EXIT
this.states == orig(this.states)
this.states[] == orig(this.states[])
this.states.getClass().getName() == orig(this.states.getClass().getName())
this.first == orig(this.first)
this.initialized == orig(this.initialized)
(this.states[].getClass().getName() == [])  <==>  (return == true)
(this.states[].getClass().getName() == [])  ==>  (this.states[] == [])
(this.states[].getClass().getName() == [org.apache.commons.math.ode.events.EventState])  <==>  (return == false)
(this.states[].getClass().getName() == [org.apache.commons.math.ode.events.EventState])  <==>  (size(this.states[]) == 1)
(this.states[].getClass().getName() == [org.apache.commons.math.ode.events.EventState])  ==>  (this.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class)
this.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState] }
this.first == null
this.initialized == false
size(this.states[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.isEmpty():::EXIT;condition="return == true"
this.states[] == []
this.states[].getClass().getName() == []
return == true
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.isEmpty():::EXIT;condition="not(return == true)"
this.states[].getClass().getName() == [org.apache.commons.math.ode.events.EventState]
return == false
size(this.states[]) == 1
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.reset(double, double[]):::ENTER
this.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.first == null
this.initialized == true
t == 1.878250380000003E9
y[] sorted by <
size(this.states[]) one of { 1, 2 }
size(y[]) == 3
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.reset(double, double[]):::EXIT
this.states == orig(this.states)
this.states[] == orig(this.states[])
this.states.getClass().getName() == orig(this.states.getClass().getName())
this.first == orig(this.first)
this.initialized == orig(this.initialized)
y[] == orig(y[])
this.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.first == null
this.initialized == true
y[] sorted by <
return == false
size(this.states[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.reset(double, double[]):::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.stepAccepted(double, double[]):::ENTER
this.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.first == null
this.initialized == true
t == 1.878250380000003E9
y[] sorted by <
size(this.states[]) one of { 1, 2 }
size(y[]) == 3
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.stepAccepted(double, double[]):::EXIT
this.states == orig(this.states)
this.states[] == orig(this.states[])
this.states.getClass().getName() == orig(this.states.getClass().getName())
this.first == orig(this.first)
this.initialized == orig(this.initialized)
y[] == orig(y[])
this.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.first == null
this.initialized == true
y[] sorted by <
size(this.states[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.stop():::ENTER
this.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.first == null
this.initialized == true
size(this.states[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.stop():::EXIT217
return == true
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.stop():::EXIT217;condition="return == true"
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.stop():::EXIT220
this.states[].getClass().getName() == [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState]
return == false
size(this.states[]) == 2
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.stop():::EXIT220;condition="not(return == true)"
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.stop():::EXIT
this.states == orig(this.states)
this.states[] == orig(this.states[])
this.states.getClass().getName() == orig(this.states.getClass().getName())
this.first == orig(this.first)
this.initialized == orig(this.initialized)
(return == false)  ==>  (size(this.states[]) == 2)
(return == false)  ==>  (this.states[].getClass().getName() == [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState])
(return == true)  ==>  (size(this.states[]) one of { 1, 2 })
(return == true)  ==>  (this.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] })
this.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.first == null
this.initialized == true
size(this.states[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.stop():::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.stop():::EXIT;condition="not(return == true)"
this.states[].getClass().getName() == [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState]
return == false
size(this.states[]) == 2
===========================================================================
org.apache.commons.math.ode.events.EventState$1:::OBJECT
org.apache.commons.math.ode.events.EventState.this.maxCheckInterval == Infinity
org.apache.commons.math.ode.events.EventState.this.convergence one of { 1.0E-20, 2.384185791015625E-7 }
org.apache.commons.math.ode.events.EventState.this.maxIterationCount == 100
org.apache.commons.math.ode.events.EventState.this.t0 == 1.8782503200000029E9
org.apache.commons.math.ode.events.EventState.this.g0 one of { -59.999995708465576, -19.999995708465576 }
org.apache.commons.math.ode.events.EventState.this.g0Positive == false
org.apache.commons.math.ode.events.EventState.this.pendingEvent == false
org.apache.commons.math.ode.events.EventState.this.pendingEventTime == Double.NaN
org.apache.commons.math.ode.events.EventState.this.previousEventTime == Double.NaN
org.apache.commons.math.ode.events.EventState.this.forward == true
org.apache.commons.math.ode.events.EventState.this.increasing == true
org.apache.commons.math.ode.events.EventState.this.nextAction == 3
===========================================================================
org.apache.commons.math.ode.events.EventState$1.(org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.sampling.StepInterpolator):::ENTER
org.apache.commons.math.ode.events.EventState.this.maxCheckInterval == Infinity
org.apache.commons.math.ode.events.EventState.this.convergence one of { 1.0E-20, 2.384185791015625E-7 }
org.apache.commons.math.ode.events.EventState.this.maxIterationCount == 100
org.apache.commons.math.ode.events.EventState.this.t0 == 1.8782503200000029E9
org.apache.commons.math.ode.events.EventState.this.g0 one of { -59.999995708465576, -19.999995708465576 }
org.apache.commons.math.ode.events.EventState.this.g0Positive == false
org.apache.commons.math.ode.events.EventState.this.pendingEvent == false
org.apache.commons.math.ode.events.EventState.this.pendingEventTime == Double.NaN
org.apache.commons.math.ode.events.EventState.this.previousEventTime == Double.NaN
org.apache.commons.math.ode.events.EventState.this.forward == true
org.apache.commons.math.ode.events.EventState.this.increasing == true
org.apache.commons.math.ode.events.EventState.this.nextAction == 3
===========================================================================
org.apache.commons.math.ode.events.EventState$1.(org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT
org.apache.commons.math.ode.events.EventState.this == orig(org.apache.commons.math.ode.events.EventState.this)
org.apache.commons.math.ode.events.EventState.this.handler == orig(org.apache.commons.math.ode.events.EventState.this.handler)
org.apache.commons.math.ode.events.EventState.this.handler.getClass().getName() == orig(org.apache.commons.math.ode.events.EventState.this.handler.getClass().getName())
org.apache.commons.math.ode.events.EventState.this.maxCheckInterval == orig(org.apache.commons.math.ode.events.EventState.this.maxCheckInterval)
org.apache.commons.math.ode.events.EventState.this.convergence == orig(org.apache.commons.math.ode.events.EventState.this.convergence)
org.apache.commons.math.ode.events.EventState.this.maxIterationCount == orig(org.apache.commons.math.ode.events.EventState.this.maxIterationCount)
org.apache.commons.math.ode.events.EventState.this.t0 == orig(org.apache.commons.math.ode.events.EventState.this.t0)
org.apache.commons.math.ode.events.EventState.this.g0 == orig(org.apache.commons.math.ode.events.EventState.this.g0)
org.apache.commons.math.ode.events.EventState.this.g0Positive == orig(org.apache.commons.math.ode.events.EventState.this.g0Positive)
org.apache.commons.math.ode.events.EventState.this.pendingEvent == orig(org.apache.commons.math.ode.events.EventState.this.pendingEvent)
org.apache.commons.math.ode.events.EventState.this.forward == orig(org.apache.commons.math.ode.events.EventState.this.forward)
org.apache.commons.math.ode.events.EventState.this.increasing == orig(org.apache.commons.math.ode.events.EventState.this.increasing)
org.apache.commons.math.ode.events.EventState.this.nextAction == orig(org.apache.commons.math.ode.events.EventState.this.nextAction)
===========================================================================
org.apache.commons.math.ode.events.EventState$1.value(double):::ENTER
t == 1.8782503200000029E9
===========================================================================
org.apache.commons.math.ode.events.EventState$1.value(double):::EXIT
this.val$interpolator == orig(this.val$interpolator)
this.val$interpolator.getClass().getName() == orig(this.val$interpolator.getClass().getName())
org.apache.commons.math.ode.events.EventState.this == orig(org.apache.commons.math.ode.events.EventState.this)
org.apache.commons.math.ode.events.EventState.this.handler == orig(org.apache.commons.math.ode.events.EventState.this.handler)
org.apache.commons.math.ode.events.EventState.this.handler.getClass().getName() == orig(org.apache.commons.math.ode.events.EventState.this.handler.getClass().getName())
org.apache.commons.math.ode.events.EventState.this.maxCheckInterval == orig(org.apache.commons.math.ode.events.EventState.this.maxCheckInterval)
org.apache.commons.math.ode.events.EventState.this.convergence == orig(org.apache.commons.math.ode.events.EventState.this.convergence)
org.apache.commons.math.ode.events.EventState.this.maxIterationCount == orig(org.apache.commons.math.ode.events.EventState.this.maxIterationCount)
org.apache.commons.math.ode.events.EventState.this.t0 == orig(org.apache.commons.math.ode.events.EventState.this.t0)
org.apache.commons.math.ode.events.EventState.this.g0 == orig(org.apache.commons.math.ode.events.EventState.this.g0)
org.apache.commons.math.ode.events.EventState.this.g0Positive == orig(org.apache.commons.math.ode.events.EventState.this.g0Positive)
org.apache.commons.math.ode.events.EventState.this.pendingEvent == orig(org.apache.commons.math.ode.events.EventState.this.pendingEvent)
org.apache.commons.math.ode.events.EventState.this.forward == orig(org.apache.commons.math.ode.events.EventState.this.forward)
org.apache.commons.math.ode.events.EventState.this.increasing == orig(org.apache.commons.math.ode.events.EventState.this.increasing)
org.apache.commons.math.ode.events.EventState.this.nextAction == orig(org.apache.commons.math.ode.events.EventState.this.nextAction)
===========================================================================
org.apache.commons.math.ode.events.EventState:::OBJECT
this.maxCheckInterval == Infinity
this.convergence one of { 1.0E-20, 2.384185791015625E-7 }
this.maxIterationCount == 100
this.t0 one of { 1.8782503200000029E9, Double.NaN }
this.pendingEventTime one of { 1.878250380000003E9, Double.NaN }
this.previousEventTime one of { 1.8782503800000029E9, Double.NaN }
this.increasing == true
this.nextAction one of { 0, 3 }
===========================================================================
org.apache.commons.math.ode.events.EventState.EventState(org.apache.commons.math.ode.events.EventHandler, double, double, int):::ENTER
maxCheckInterval == Infinity
convergence one of { 1.0E-20, 2.384185791015625E-7 }
maxIterationCount == 100
===========================================================================
org.apache.commons.math.ode.events.EventState.EventState(org.apache.commons.math.ode.events.EventHandler, double, double, int):::EXIT
this.t0 == Double.NaN
this.g0 == Double.NaN
this.g0Positive == true
this.pendingEvent == false
this.pendingEventTime == Double.NaN
this.previousEventTime == Double.NaN
this.forward == false
this.nextAction == 3
===========================================================================
org.apache.commons.math.ode.events.EventState.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::ENTER
this.t0 == 1.8782503200000029E9
this.nextAction == 3
===========================================================================
org.apache.commons.math.ode.events.EventState.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT189
this.pendingEvent == orig(this.pendingEvent)
this.pendingEventTime == orig(this.pendingEventTime)
this.forward == orig(this.forward)
this.g0 one of { -59.999995708465576, -19.999995708465576 }
this.g0Positive == false
this.pendingEvent == true
this.pendingEventTime == 1.878250380000003E9
this.previousEventTime == Double.NaN
return == false
orig(this.previousEventTime) == Double.NaN
===========================================================================
org.apache.commons.math.ode.events.EventState.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT189;condition="not(return == true)"
===========================================================================
org.apache.commons.math.ode.events.EventState.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT251
this.g0 one of { -59.999995708465576, -19.999995708465576 }
this.g0Positive == false
this.pendingEvent == true
this.pendingEventTime == 1.878250380000003E9
this.previousEventTime == Double.NaN
return == true
orig(this.pendingEvent) == false
orig(this.pendingEventTime) == Double.NaN
orig(this.previousEventTime) == Double.NaN
===========================================================================
org.apache.commons.math.ode.events.EventState.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT251;condition="return == true"
===========================================================================
org.apache.commons.math.ode.events.EventState.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT265
this.pendingEvent == orig(this.pendingEvent)
this.pendingEvent == false
this.pendingEventTime == Double.NaN
return == false
orig(this.pendingEventTime) == Double.NaN
===========================================================================
org.apache.commons.math.ode.events.EventState.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT265;condition="not(return == true)"
===========================================================================
org.apache.commons.math.ode.events.EventState.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.maxCheckInterval == orig(this.maxCheckInterval)
this.convergence == orig(this.convergence)
this.maxIterationCount == orig(this.maxIterationCount)
this.t0 == orig(this.t0)
this.g0 == orig(this.g0)
this.g0Positive == orig(this.g0Positive)
this.increasing == orig(this.increasing)
this.nextAction == orig(this.nextAction)
(return == false)  ==>  (orig(this.pendingEventTime) one of { 1.878250380000003E9, Double.NaN })
(return == false)  ==>  (orig(this.previousEventTime) one of { 1.8782503800000029E9, Double.NaN })
(return == false)  ==>  (this.pendingEvent == orig(this.pendingEvent))
(return == false)  ==>  (this.pendingEventTime one of { 1.878250380000003E9, Double.NaN })
(return == false)  ==>  (this.previousEventTime one of { 1.8782503800000029E9, Double.NaN })
this.t0 == 1.8782503200000029E9
this.forward == true
this.nextAction == 3
===========================================================================
org.apache.commons.math.ode.events.EventState.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT;condition="return == true"
this.g0 one of { -59.999995708465576, -19.999995708465576 }
this.g0Positive == false
this.pendingEvent == true
this.pendingEventTime == 1.878250380000003E9
this.previousEventTime == Double.NaN
return == true
orig(this.pendingEvent) == false
orig(this.pendingEventTime) == Double.NaN
orig(this.previousEventTime) == Double.NaN
===========================================================================
org.apache.commons.math.ode.events.EventState.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT;condition="not(return == true)"
this.pendingEvent == orig(this.pendingEvent)
return == false
===========================================================================
org.apache.commons.math.ode.events.EventState.getConvergence():::ENTER
this.convergence == 1.0E-20
this.t0 == Double.NaN
this.g0 == Double.NaN
this.g0Positive == true
this.pendingEvent == false
this.pendingEventTime == Double.NaN
this.previousEventTime == Double.NaN
this.forward == false
this.nextAction == 3
===========================================================================
org.apache.commons.math.ode.events.EventState.getConvergence():::EXIT
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.maxCheckInterval == orig(this.maxCheckInterval)
this.convergence == orig(this.convergence)
this.maxIterationCount == orig(this.maxIterationCount)
this.g0Positive == orig(this.g0Positive)
this.pendingEvent == orig(this.pendingEvent)
this.forward == orig(this.forward)
this.increasing == orig(this.increasing)
this.nextAction == orig(this.nextAction)
this.convergence == 1.0E-20
this.t0 == Double.NaN
this.g0 == Double.NaN
this.g0Positive == true
this.pendingEvent == false
this.pendingEventTime == Double.NaN
this.previousEventTime == Double.NaN
this.forward == false
this.nextAction == 3
return == 1.0E-20
===========================================================================
org.apache.commons.math.ode.events.EventState.getEventHandler():::ENTER
this.convergence == 1.0E-20
this.t0 == Double.NaN
this.g0 == Double.NaN
this.g0Positive == true
this.pendingEvent == false
this.pendingEventTime == Double.NaN
this.previousEventTime == Double.NaN
this.forward == false
this.nextAction == 3
===========================================================================
org.apache.commons.math.ode.events.EventState.getEventHandler():::EXIT
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.maxCheckInterval == orig(this.maxCheckInterval)
this.convergence == orig(this.convergence)
this.maxIterationCount == orig(this.maxIterationCount)
this.g0Positive == orig(this.g0Positive)
this.pendingEvent == orig(this.pendingEvent)
this.forward == orig(this.forward)
this.increasing == orig(this.increasing)
this.nextAction == orig(this.nextAction)
this.convergence == 1.0E-20
this.t0 == Double.NaN
this.g0 == Double.NaN
this.g0Positive == true
this.pendingEvent == false
this.pendingEventTime == Double.NaN
this.previousEventTime == Double.NaN
this.forward == false
this.nextAction == 3
===========================================================================
org.apache.commons.math.ode.events.EventState.getEventTime():::ENTER
this.t0 == 1.8782503200000029E9
this.g0 one of { -59.999995708465576, -19.999995708465576 }
this.g0Positive == false
this.pendingEvent == true
this.pendingEventTime == 1.878250380000003E9
this.previousEventTime == Double.NaN
this.forward == true
this.nextAction == 3
===========================================================================
org.apache.commons.math.ode.events.EventState.getEventTime():::EXIT
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.maxCheckInterval == orig(this.maxCheckInterval)
this.convergence == orig(this.convergence)
this.maxIterationCount == orig(this.maxIterationCount)
this.t0 == orig(this.t0)
this.g0 == orig(this.g0)
this.g0Positive == orig(this.g0Positive)
this.pendingEvent == orig(this.pendingEvent)
this.pendingEventTime == orig(this.pendingEventTime)
this.forward == orig(this.forward)
this.increasing == orig(this.increasing)
this.nextAction == orig(this.nextAction)
this.t0 == 1.8782503200000029E9
this.g0 one of { -59.999995708465576, -19.999995708465576 }
this.g0Positive == false
this.pendingEvent == true
this.pendingEventTime == 1.878250380000003E9
this.previousEventTime == Double.NaN
this.forward == true
this.nextAction == 3
return == 1.878250380000003E9
===========================================================================
org.apache.commons.math.ode.events.EventState.getMaxCheckInterval():::ENTER
this.convergence == 1.0E-20
this.t0 == Double.NaN
this.g0 == Double.NaN
this.g0Positive == true
this.pendingEvent == false
this.pendingEventTime == Double.NaN
this.previousEventTime == Double.NaN
this.forward == false
this.nextAction == 3
===========================================================================
org.apache.commons.math.ode.events.EventState.getMaxCheckInterval():::EXIT
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.maxCheckInterval == orig(this.maxCheckInterval)
this.convergence == orig(this.convergence)
this.maxIterationCount == orig(this.maxIterationCount)
this.g0Positive == orig(this.g0Positive)
this.pendingEvent == orig(this.pendingEvent)
this.forward == orig(this.forward)
this.increasing == orig(this.increasing)
this.nextAction == orig(this.nextAction)
this.convergence == 1.0E-20
this.t0 == Double.NaN
this.g0 == Double.NaN
this.g0Positive == true
this.pendingEvent == false
this.pendingEventTime == Double.NaN
this.previousEventTime == Double.NaN
this.forward == false
this.nextAction == 3
return == Infinity
===========================================================================
org.apache.commons.math.ode.events.EventState.getMaxIterationCount():::ENTER
this.convergence == 1.0E-20
this.t0 == Double.NaN
this.g0 == Double.NaN
this.g0Positive == true
this.pendingEvent == false
this.pendingEventTime == Double.NaN
this.previousEventTime == Double.NaN
this.forward == false
this.nextAction == 3
===========================================================================
org.apache.commons.math.ode.events.EventState.getMaxIterationCount():::EXIT
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.maxCheckInterval == orig(this.maxCheckInterval)
this.convergence == orig(this.convergence)
this.maxIterationCount == orig(this.maxIterationCount)
this.g0Positive == orig(this.g0Positive)
this.pendingEvent == orig(this.pendingEvent)
this.forward == orig(this.forward)
this.increasing == orig(this.increasing)
this.nextAction == orig(this.nextAction)
this.convergence == 1.0E-20
this.t0 == Double.NaN
this.g0 == Double.NaN
this.g0Positive == true
this.pendingEvent == false
this.pendingEventTime == Double.NaN
this.previousEventTime == Double.NaN
this.forward == false
this.nextAction == 3
return == 100
===========================================================================
org.apache.commons.math.ode.events.EventState.reinitializeBegin(double, double[]):::ENTER
this.t0 == Double.NaN
this.g0 == Double.NaN
this.g0Positive == true
this.pendingEvent == false
this.pendingEventTime == Double.NaN
this.previousEventTime == Double.NaN
this.forward == false
this.nextAction == 3
tStart == 1.8782503200000029E9
size(yStart[]) == 3
===========================================================================
org.apache.commons.math.ode.events.EventState.reinitializeBegin(double, double[]):::EXIT
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.maxCheckInterval == orig(this.maxCheckInterval)
this.convergence == orig(this.convergence)
this.maxIterationCount == orig(this.maxIterationCount)
this.pendingEvent == orig(this.pendingEvent)
this.forward == orig(this.forward)
this.increasing == orig(this.increasing)
this.nextAction == orig(this.nextAction)
yStart[] == orig(yStart[])
this.t0 == 1.8782503200000029E9
this.g0 one of { -179.99999570846558, -59.999995708465576 }
this.g0Positive == false
this.pendingEvent == false
this.pendingEventTime == Double.NaN
this.previousEventTime == Double.NaN
this.forward == false
this.nextAction == 3
===========================================================================
org.apache.commons.math.ode.events.EventState.reset(double, double[]):::ENTER
this.t0 == 1.8782503800000029E9
this.forward == true
t == 1.8782503800000029E9
y[] sorted by <
size(y[]) == 3
===========================================================================
org.apache.commons.math.ode.events.EventState.reset(double, double[]):::EXIT334
this.pendingEvent == orig(this.pendingEvent)
this.nextAction == 3
orig(this.pendingEventTime) == Double.NaN
===========================================================================
org.apache.commons.math.ode.events.EventState.reset(double, double[]):::EXIT334;condition="not(return == true)"
===========================================================================
org.apache.commons.math.ode.events.EventState.reset(double, double[]):::EXIT343
this.previousEventTime == orig(this.previousEventTime)
this.g0 one of { 0.0, 4.291534423828125E-6, 4.5299530029296875E-6 }
this.g0Positive == true
this.previousEventTime == 1.878250380000003E9
orig(this.pendingEvent) == true
orig(this.pendingEventTime) == 1.878250380000003E9
===========================================================================
org.apache.commons.math.ode.events.EventState.reset(double, double[]):::EXIT343;condition="not(return == true)"
===========================================================================
org.apache.commons.math.ode.events.EventState.reset(double, double[]):::EXIT
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.maxCheckInterval == orig(this.maxCheckInterval)
this.convergence == orig(this.convergence)
this.maxIterationCount == orig(this.maxIterationCount)
this.t0 == orig(this.t0)
this.g0 == orig(this.g0)
this.g0Positive == orig(this.g0Positive)
this.forward == orig(this.forward)
this.increasing == orig(this.increasing)
this.nextAction == orig(this.nextAction)
y[] == orig(y[])
this.t0 == 1.8782503800000029E9
this.pendingEvent == false
this.pendingEventTime == Double.NaN
this.forward == true
y[] sorted by <
return == false
this.pendingEventTime != orig(this.pendingEventTime)
===========================================================================
org.apache.commons.math.ode.events.EventState.reset(double, double[]):::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.math.ode.events.EventState.stepAccepted(double, double[]):::ENTER
this.t0 == 1.8782503200000029E9
this.forward == true
this.nextAction == 3
t == 1.878250380000003E9
y[] sorted by <
size(y[]) == 3
===========================================================================
org.apache.commons.math.ode.events.EventState.stepAccepted(double, double[]):::EXIT
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.maxCheckInterval == orig(this.maxCheckInterval)
this.convergence == orig(this.convergence)
this.maxIterationCount == orig(this.maxIterationCount)
this.t0 == orig(this.t0)
this.pendingEvent == orig(this.pendingEvent)
this.forward == orig(this.forward)
this.increasing == orig(this.increasing)
y[] == orig(y[])
this.t0 == 1.878250380000003E9
this.forward == true
y[] sorted by <
this.g0 > orig(this.g0)
this.nextAction <= orig(this.nextAction)
===========================================================================
org.apache.commons.math.ode.events.EventState.stop():::ENTER
this.t0 == 1.878250380000003E9
this.forward == true
===========================================================================
org.apache.commons.math.ode.events.EventState.stop():::EXIT
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.maxCheckInterval == orig(this.maxCheckInterval)
this.convergence == orig(this.convergence)
this.maxIterationCount == orig(this.maxIterationCount)
this.t0 == orig(this.t0)
this.g0 == orig(this.g0)
this.g0Positive == orig(this.g0Positive)
this.pendingEvent == orig(this.pendingEvent)
this.forward == orig(this.forward)
this.increasing == orig(this.increasing)
this.nextAction == orig(this.nextAction)
(this.pendingEventTime == 1.878250380000003E9)  <==>  (orig(this.pendingEventTime) == 1.878250380000003E9)
(this.pendingEventTime == 1.878250380000003E9)  <==>  (orig(this.previousEventTime) == 1.878250380000003E9)
(this.pendingEventTime == 1.878250380000003E9)  <==>  (return == true)
(this.pendingEventTime == 1.878250380000003E9)  <==>  (this.nextAction == 0)
(this.pendingEventTime == 1.878250380000003E9)  <==>  (this.previousEventTime == 1.878250380000003E9)
(this.pendingEventTime == 1.878250380000003E9)  ==>  (this.convergence == 2.384185791015625E-7)
(this.pendingEventTime == 1.878250380000003E9)  ==>  (this.g0 one of { 0.0, 4.5299530029296875E-6 })
(this.pendingEventTime == 1.878250380000003E9)  ==>  (this.g0Positive == true)
(this.pendingEventTime == 1.878250380000003E9)  ==>  (this.handler.getClass().getName() == org.apache.commons.math.ode.AbstractIntegrator$EndTimeChecker.class)
(this.pendingEventTime == 1.878250380000003E9)  ==>  (this.pendingEvent == true)
(this.pendingEventTime == 1.878250380000003E9)  ==>  (this.pendingEventTime == orig(this.pendingEventTime))
(this.pendingEventTime == 1.878250380000003E9)  ==>  (this.previousEventTime == orig(this.previousEventTime))
(this.t0 == 1.8782503800000029E9)  <==>  (return == false)
(this.t0 == 1.8782503800000029E9)  <==>  (this.nextAction == 3)
(this.t0 == 1.8782503800000029E9)  ==>  (orig(this.pendingEventTime) one of { 1.8782503800000029E9, Double.NaN })
(this.t0 == 1.8782503800000029E9)  ==>  (orig(this.previousEventTime) one of { 1.8782503800000029E9, Double.NaN })
(this.t0 == 1.8782503800000029E9)  ==>  (this.convergence one of { 1.0E-20, 2.384185791015625E-7 })
(this.t0 == 1.8782503800000029E9)  ==>  (this.pendingEventTime one of { 1.8782503800000029E9, Double.NaN })
(this.t0 == 1.8782503800000029E9)  ==>  (this.previousEventTime one of { 1.8782503800000029E9, Double.NaN })
this.t0 == 1.878250380000003E9
this.forward == true
===========================================================================
org.apache.commons.math.ode.events.EventState.stop():::EXIT;condition="return == true"
this.pendingEventTime == orig(this.pendingEventTime)
this.previousEventTime == orig(this.previousEventTime)
this.handler.getClass().getName() == org.apache.commons.math.ode.AbstractIntegrator$EndTimeChecker.class
this.convergence == 2.384185791015625E-7
this.g0 one of { 0.0, 4.5299530029296875E-6 }
this.g0Positive == true
this.pendingEvent == true
this.pendingEventTime == 1.878250380000003E9
this.previousEventTime == 1.878250380000003E9
this.nextAction == 0
return == true
===========================================================================
org.apache.commons.math.ode.events.EventState.stop():::EXIT;condition="not(return == true)"
this.nextAction == 3
return == false
===========================================================================
org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator:::OBJECT
this has only one value
this.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.class
this.scalAbsoluteTolerance == 1.0E-10
this.scalRelativeTolerance == 1.0E-10
this.vecAbsoluteTolerance == null
this.vecRelativeTolerance == null
this.initialStep one of { -1.0, 60.0 }
this.minStep == 0.0
this.maxStep == 100.0
this.stepHandlers has only one value
this.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.stepStart one of { 1.8782503800000029E9, Double.NaN }
this.stepSize >= 0.0
this.eventsHandlersManager has only one value
this.eventsHandlersManager.states has only one value
this.eventsHandlersManager.states[] elements has only one value
this.eventsHandlersManager.states[] elements != null
this.eventsHandlersManager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
this.eventsHandlersManager.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState] }
this.eventsHandlersManager.states.getClass().getName() == java.util.ArrayList.class
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.name has only one value
this.name.toString == "Dormand-Prince 8 (5, 3)"
this.maxEvaluations == 2147483647
this.evaluations >= 0
this.equations.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest$1.class
size(this.eventsHandlersManager.states[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.AdaptiveStepsizeIntegrator(java.lang.String, double, double, double, double):::ENTER
name has only one value
name.toString == "Dormand-Prince 8 (5, 3)"
minStep == 0.0
maxStep == 100.0
scalAbsoluteTolerance == 1.0E-10
scalRelativeTolerance == 1.0E-10
===========================================================================
org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.AdaptiveStepsizeIntegrator(java.lang.String, double, double, double, double):::EXIT
name.toString == orig(name.toString)
this.initialStep == -1.0
this.stepStart == Double.NaN
this.stepSize == 0.0
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.evaluations == 0
this.equations == null
name.toString == "Dormand-Prince 8 (5, 3)"
===========================================================================
org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.filterStep(double, boolean, boolean):::ENTER
this.initialStep == 60.0
this.stepStart == 1.8782503800000029E9
this.stepSize one of { 60.0, 100.0 }
this.eventsHandlersManager.states[] contains no nulls and has only one value, of length 1
this.eventsHandlersManager.states[].getClass().getName() == [org.apache.commons.math.ode.events.EventState]
this.evaluations one of { 31, 46 }
this.equations has only one value
forward == true
acceptSmall == true
size(this.eventsHandlersManager.states[]) == 1
===========================================================================
org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.filterStep(double, boolean, boolean):::EXIT
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.initialStep == 60.0
this.stepStart == 1.8782503800000029E9
this.stepSize one of { 60.0, 100.0 }
this.eventsHandlersManager.states[] contains no nulls and has only one value, of length 1
this.eventsHandlersManager.states[].getClass().getName() == [org.apache.commons.math.ode.events.EventState]
this.evaluations one of { 31, 46 }
this.equations has only one value
return one of { 60.0, 100.0 }
size(this.eventsHandlersManager.states[]) == 1
===========================================================================
org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.initializeStep(org.apache.commons.math.ode.FirstOrderDifferentialEquations, boolean, int, double[], double, double[], double[], double[], double[]):::ENTER
this.initialStep == 60.0
this.stepStart == 1.8782503200000029E9
this.stepSize == 0.0
this.evaluations == 1
this.equations has only one value
equations has only one value
equations.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest$1.class
forward == true
order == 8
scale[] == [2.0E-10, 3.0E-10, 4.0E-10]
scale[] elements one of { 2.0E-10, 3.0E-10, 4.0E-10 }
t0 == 1.8782503200000029E9
y0 has only one value
y0[] == [1.0, 2.0, 3.0]
y0[] elements one of { 1.0, 2.0, 3.0 }
yDot0[] == [1.0E-4, 2.0E-5, 3.0E-6]
yDot0[] elements one of { 3.0E-6, 2.0E-5, 1.0E-4 }
y1[] == [0.0, 0.0, 0.0]
y1[] elements == 0.0
yDot1[] == [0.0, 0.0, 0.0]
yDot1[] elements == 0.0
size(scale[]) == 3
size(y0[]) == 3
size(yDot0[]) == 3
size(y1[]) == 3
size(yDot1[]) == 3
===========================================================================
org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.initializeStep(org.apache.commons.math.ode.FirstOrderDifferentialEquations, boolean, int, double[], double, double[], double[], double[], double[]):::EXIT211
===========================================================================
org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.initializeStep(org.apache.commons.math.ode.FirstOrderDifferentialEquations, boolean, int, double[], double, double[], double[], double[], double[]):::EXIT
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
scale[] == orig(scale[])
y0[] == orig(y0[])
yDot0[] == orig(yDot0[])
y1[] == orig(y1[])
yDot1[] == orig(yDot1[])
this.initialStep == 60.0
this.stepStart == 1.8782503200000029E9
this.stepSize == 0.0
this.evaluations == 1
this.equations has only one value
scale[] == [2.0E-10, 3.0E-10, 4.0E-10]
scale[] elements one of { 2.0E-10, 3.0E-10, 4.0E-10 }
y0[] == [1.0, 2.0, 3.0]
y0[] elements one of { 1.0, 2.0, 3.0 }
yDot0[] == [1.0E-4, 2.0E-5, 3.0E-6]
yDot0[] elements one of { 3.0E-6, 2.0E-5, 1.0E-4 }
y1[] == [0.0, 0.0, 0.0]
y1[] elements == 0.0
yDot1[] == [0.0, 0.0, 0.0]
yDot1[] elements == 0.0
return == 60.0
===========================================================================
org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.resetInternalState():::ENTER
this.stepSize one of { 19.999995708465576, 60.00000023841858, Double.NaN }
this.evaluations one of { 0, 25, 76 }
===========================================================================
org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.resetInternalState():::EXIT
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.stepStart == Double.NaN
this.stepSize == 0.0
this.evaluations one of { 0, 25, 76 }
===========================================================================
org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.sanityChecks(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double, double[], double, double[]):::ENTER
this.initialStep == 60.0
this.stepStart == Double.NaN
this.stepSize == 0.0
this.evaluations one of { 0, 25 }
equations has only one value
equations.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest$1.class
t0 == 1.8782503200000029E9
y0 has only one value
y0[] == [1.0, 2.0, 3.0]
y0[] elements one of { 1.0, 2.0, 3.0 }
t == 1.8782503799999986E9
y has only one value
y[] one of { [0.0, 0.0, 0.0], [1.0060180360780502, 2.001200360076782, 3.000180005400823] }
y[] elements >= 0.0
size(y0[]) == 3
size(y[]) == 3
===========================================================================
org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.sanityChecks(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double, double[], double, double[]):::EXIT
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
y0[] == orig(y0[])
y[] == orig(y[])
this.initialStep == 60.0
this.stepStart == Double.NaN
this.stepSize == 0.0
this.evaluations one of { 0, 25 }
y0[] == [1.0, 2.0, 3.0]
y0[] elements one of { 1.0, 2.0, 3.0 }
y[] one of { [0.0, 0.0, 0.0], [1.0060180360780502, 2.001200360076782, 3.000180005400823] }
y[] elements >= 0.0
===========================================================================
org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.setInitialStepSize(double):::ENTER
this.stepStart == Double.NaN
this.stepSize == 0.0
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.evaluations one of { 0, 25 }
initialStepSize == 60.0
===========================================================================
org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.setInitialStepSize(double):::EXIT
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.initialStep == 60.0
this.stepStart == Double.NaN
this.stepSize == 0.0
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.evaluations one of { 0, 25 }
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator:::CLASS
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_C has only one value
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_C[] == [0.5, 0.5, 1.0]
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_C[] elements one of { 0.5, 1.0 }
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_A has only one value
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_A.getClass().getName() == double[][].class
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_A[] contains no nulls and has only one value, of length 3
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_B has only one value
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_B[] == [0.16666666666666666, 0.3333333333333333, 0.3333333333333333, 0.16666666666666666]
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_B[] elements one of { 0.16666666666666666, 0.3333333333333333 }
size(org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_C[]) == 3
size(org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_A[]) == 3
size(org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_B[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator:::OBJECT
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_A.getClass().getName() == this.a.getClass().getName()
this.stepHandlers.getClass().getName() == this.eventsHandlersManager.states.getClass().getName()
this has only one value
this.c has only one value
this.c[] == [0.5, 0.5, 1.0]
this.c[] elements one of { 0.5, 1.0 }
this.a has only one value
this.a[] contains no nulls and has only one value, of length 3
this.b has only one value
this.b[] == [0.16666666666666666, 0.3333333333333333, 0.3333333333333333, 0.16666666666666666]
this.b[] elements one of { 0.16666666666666666, 0.3333333333333333 }
this.prototype has only one value
this.prototype.getClass().getName() == org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.class
this.prototype.yDotK == null
this.prototype.integrator == null
this.prototype.previousTime == Double.NaN
this.prototype.currentTime == Double.NaN
this.prototype.h == Double.NaN
this.prototype.currentState == null
this.prototype.interpolatedTime == Double.NaN
this.prototype.interpolatedState == null
this.prototype.interpolatedDerivatives == null
this.prototype.finalized == false
this.prototype.forward == true
this.prototype.dirtyState == true
this.step == 60.0
this.stepHandlers has only one value
this.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.eventsHandlersManager has only one value
this.eventsHandlersManager.states has only one value
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.name has only one value
this.name.toString == "classical Runge-Kutta"
this.maxEvaluations == 2147483647
this.evaluations == 0
this.equations == null
size(this.c[]) == 3
size(this.a[]) == 3
size(this.b[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.ClassicalRungeKuttaIntegrator(double):::ENTER
step == 60.0
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.ClassicalRungeKuttaIntegrator(double):::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$1:::OBJECT
this has only one value
this.val$k has only one value
this.val$k[] == [1.0E-4, 1.0E-5, 1.0E-6]
this.val$k[] elements one of { 1.0E-6, 1.0E-5, 1.0E-4 }
this.val$k[] sorted by >
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this has only one value
size(this.val$k[]) == 3
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$1.(org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, double[]):::ENTER
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this has only one value
$hidden$2 has only one value
$hidden$2[] == [1.0E-4, 1.0E-5, 1.0E-6]
$hidden$2[] elements one of { 1.0E-6, 1.0E-5, 1.0E-4 }
size($hidden$2[]) == 3
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$1.(org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, double[]):::EXIT
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this)
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$1.computeDerivatives(double, double[], double[]):::ENTER
t == 1.8782503200000029E9
y[] sorted by <
yDot[] sorted by >=
size(y[]) == 3
size(yDot[]) == 3
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$1.computeDerivatives(double, double[], double[]):::EXIT
this.val$k == orig(this.val$k)
this.val$k[] == orig(this.val$k[])
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this)
y[] == orig(y[])
y[] sorted by <
yDot[] sorted by >
yDot[] >= orig(yDot[]) (elementwise)
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$1.getDimension():::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$1.getDimension():::EXIT
this.val$k == orig(this.val$k)
this.val$k[] == orig(this.val$k[])
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this)
return == 3
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$2:::OBJECT
this has only one value
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$2.(org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest):::ENTER
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$2.(org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest):::EXIT
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this)
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$2.eventOccurred(double, double[], boolean):::ENTER
t == 1.8782503800000029E9
y has only one value
y[] == [1.006018036054, 2.0012003600720107, 3.000180005400108]
y[] elements one of { 1.006018036054, 2.0012003600720107, 3.000180005400108 }
increasing == true
size(y[]) == 3
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$2.eventOccurred(double, double[], boolean):::EXIT
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this)
y[] == orig(y[])
y[] == [1.006018036054, 2.0012003600720107, 3.000180005400108]
y[] elements one of { 1.006018036054, 2.0012003600720107, 3.000180005400108 }
return == 3
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$2.g(double, double[]):::ENTER
t == 1.8782503200000029E9
y[] sorted by <
size(y[]) == 3
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$2.g(double, double[]):::EXIT
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this)
y[] == orig(y[])
y[] sorted by <
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest:::OBJECT
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.ClassicalRungeKuttaIntegratorTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.ClassicalRungeKuttaIntegratorTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testMissedEndEvent():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testMissedEndEvent():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator:::CLASS
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator:::OBJECT
this.yDotK.getClass().getName() == double[][].class
this.yDotK[] contains no nulls and has only one value, of length 4
this.yDotK[] elements != null
this.integrator.getClass().getName() == org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.class
this.integrator.stepHandlers has only one value
this.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.integrator.stepStart == 1.8782503200000029E9
this.integrator.stepSize == 60.0
this.integrator.eventsHandlersManager has only one value
this.integrator.eventsHandlersManager.states has only one value
this.integrator.eventsHandlersManager.states[] contains no nulls and has only one value, of length 1
this.integrator.eventsHandlersManager.states[] elements has only one value
this.integrator.eventsHandlersManager.states[] elements != null
this.integrator.eventsHandlersManager.states[].getClass().getName() == [org.apache.commons.math.ode.events.EventState]
this.integrator.eventsHandlersManager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
this.integrator.eventsHandlersManager.states.getClass().getName() == java.util.ArrayList.class
this.integrator.eventsHandlersManager.first == null
this.integrator.eventsHandlersManager.initialized == false
this.integrator.name has only one value
this.integrator.name.toString == "classical Runge-Kutta"
this.integrator.maxEvaluations == 2147483647
this.integrator.equations has only one value
this.integrator.equations.getClass().getName() == org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$1.class
this.previousTime one of { 1.8782503200000029E9, Double.NaN }
this.currentTime one of { 1.8782503800000029E9, Double.NaN }
this.h one of { 60.0, Double.NaN }
this.currentState[] sorted by <
this.interpolatedTime one of { 1.8782503200000029E9, Double.NaN }
this.interpolatedState[] sorted by <=
this.interpolatedDerivatives[] sorted by >=
this.forward == true
this.dirtyState == true
size(this.yDotK[]) == 4
size(this.integrator.eventsHandlersManager.states[]) == 1
size(this.currentState[]) == 3
size(this.interpolatedState[]) == 3
size(this.interpolatedDerivatives[]) == 3
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.ClassicalRungeKuttaStepInterpolator():::EXIT
this.yDotK == null
this.integrator == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.finalized == false
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.ClassicalRungeKuttaStepInterpolator(org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator):::ENTER
interpolator has only one value
interpolator.yDotK == null
interpolator.integrator == null
interpolator.previousTime == Double.NaN
interpolator.currentTime == Double.NaN
interpolator.h == Double.NaN
interpolator.currentState == null
interpolator.interpolatedTime == Double.NaN
interpolator.interpolatedState == null
interpolator.interpolatedDerivatives == null
interpolator.finalized == true
interpolator.forward == true
interpolator.dirtyState == true
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.ClassicalRungeKuttaStepInterpolator(org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator):::EXIT
interpolator.yDotK == orig(interpolator.yDotK)
interpolator.integrator == orig(interpolator.integrator)
interpolator.currentState == orig(interpolator.currentState)
interpolator.interpolatedState == orig(interpolator.interpolatedState)
interpolator.interpolatedDerivatives == orig(interpolator.interpolatedDerivatives)
interpolator.finalized == orig(interpolator.finalized)
interpolator.forward == orig(interpolator.forward)
interpolator.dirtyState == orig(interpolator.dirtyState)
this.yDotK == null
this.integrator == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.finalized == true
interpolator.yDotK == null
interpolator.integrator == null
interpolator.previousTime == Double.NaN
interpolator.currentTime == Double.NaN
interpolator.h == Double.NaN
interpolator.currentState == null
interpolator.interpolatedTime == Double.NaN
interpolator.interpolatedState == null
interpolator.interpolatedDerivatives == null
interpolator.finalized == true
interpolator.forward == true
interpolator.dirtyState == true
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::ENTER
this has only one value
this.yDotK has only one value
this.integrator has only one value
this.previousTime == 1.8782503200000029E9
this.currentTime == 1.8782503800000029E9
this.h == 60.0
this.currentState has only one value
this.interpolatedTime == 1.8782503200000029E9
this.interpolatedState has only one value
this.interpolatedDerivatives has only one value
this.finalized == false
theta one of { 0.0, 1.0 }
oneMinusThetaH >= -2.384185791015625E-7
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::EXIT
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.integrator.stepHandlers == orig(this.integrator.stepHandlers)
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.stepHandlers.getClass().getName())
this.integrator.stepStart == orig(this.integrator.stepStart)
this.integrator.stepSize == orig(this.integrator.stepSize)
this.integrator.eventsHandlersManager == orig(this.integrator.eventsHandlersManager)
this.integrator.eventsHandlersManager.states == orig(this.integrator.eventsHandlersManager.states)
this.integrator.eventsHandlersManager.states[] == orig(this.integrator.eventsHandlersManager.states[])
this.integrator.eventsHandlersManager.states.getClass().getName() == orig(this.integrator.eventsHandlersManager.states.getClass().getName())
this.integrator.eventsHandlersManager.first == orig(this.integrator.eventsHandlersManager.first)
this.integrator.eventsHandlersManager.initialized == orig(this.integrator.eventsHandlersManager.initialized)
this.integrator.name == orig(this.integrator.name)
this.integrator.name.toString == orig(this.integrator.name.toString)
this.integrator.maxEvaluations == orig(this.integrator.maxEvaluations)
this.integrator.evaluations == orig(this.integrator.evaluations)
this.integrator.equations == orig(this.integrator.equations)
this.integrator.equations.getClass().getName() == orig(this.integrator.equations.getClass().getName())
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
size(this.interpolatedState[]) == orig(size(this.interpolatedState[]))
size(this.interpolatedDerivatives[]) == orig(size(this.interpolatedDerivatives[]))
this.yDotK has only one value
this.integrator has only one value
this.previousTime == 1.8782503200000029E9
this.currentTime == 1.8782503800000029E9
this.h == 60.0
this.currentState has only one value
this.interpolatedTime == 1.8782503200000029E9
this.interpolatedState has only one value
this.interpolatedState[] sorted by <
this.interpolatedDerivatives has only one value
this.interpolatedDerivatives[] sorted by >
this.finalized == false
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.doCopy():::ENTER
this has only one value
this.yDotK == null
this.integrator == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.finalized == true
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.doCopy():::EXIT
this.yDotK == orig(this.yDotK)
this.integrator == orig(this.integrator)
this.currentState == orig(this.currentState)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.yDotK == null
this.integrator == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.finalized == true
return has only one value
return.getClass().getName() == org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.class
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator:::CLASS
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.METHOD_NAME has only one value
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.METHOD_NAME.toString == "Dormand-Prince 8 (5, 3)"
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_C has only one value
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_C[] == [0.05260015195876774, 0.0789002279381516, 0.1183503419072274, 0.28164965809277265, 0.3333333333333333, 0.25, 0.3076923076923077, 0.6512820512820513, 0.6, 0.8571428571428571, 1.0, 1.0]
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A has only one value
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A.getClass().getName() == double[][].class
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A[] contains no nulls and has only one value, of length 12
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A[] elements != null
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_B has only one value
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_B[] == [0.054293734116568765, 0.0, 0.0, 0.0, 0.0, 4.450312892752409, 1.8915178993145003, -5.801203960010585, 0.3111643669578199, -0.1521609496625161, 0.20136540080403034, 0.04471061572777259, 0.0]
size(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_C[]) == 12
size(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A[]) == 12
size(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_B[]) == 13
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator:::OBJECT
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A.getClass().getName() == this.a.getClass().getName()
this.stepHandlers.getClass().getName() == this.eventsHandlersManager.states.getClass().getName()
this has only one value
this.fsal == true
this.c has only one value
this.c[] == [0.05260015195876774, 0.0789002279381516, 0.1183503419072274, 0.28164965809277265, 0.3333333333333333, 0.25, 0.3076923076923077, 0.6512820512820513, 0.6, 0.8571428571428571, 1.0, 1.0]
this.a has only one value
this.a[] contains no nulls and has only one value, of length 12
this.a[] elements != null
this.b has only one value
this.b[] == [0.054293734116568765, 0.0, 0.0, 0.0, 0.0, 4.450312892752409, 1.8915178993145003, -5.801203960010585, 0.3111643669578199, -0.1521609496625161, 0.20136540080403034, 0.04471061572777259, 0.0]
this.prototype has only one value
this.prototype.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.class
this.prototype.yDotK == null
this.prototype.integrator == null
this.prototype.previousTime == Double.NaN
this.prototype.currentTime == Double.NaN
this.prototype.h == Double.NaN
this.prototype.currentState == null
this.prototype.interpolatedTime == Double.NaN
this.prototype.interpolatedState == null
this.prototype.interpolatedDerivatives == null
this.prototype.forward == true
this.prototype.dirtyState == true
this.exp one of { -0.125, 0.0 }
this.safety one of { 0.0, 0.9 }
this.minReduction one of { 0.0, 0.2 }
this.maxGrowth one of { 0.0, 10.0 }
this.scalAbsoluteTolerance == 1.0E-10
this.scalRelativeTolerance == 1.0E-10
this.vecAbsoluteTolerance == null
this.vecRelativeTolerance == null
this.initialStep one of { -1.0, 60.0 }
this.minStep == 0.0
this.maxStep == 100.0
this.stepHandlers has only one value
this.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.stepStart one of { 1.8782503200000029E9, Double.NaN }
this.stepSize >= 0.0
this.eventsHandlersManager has only one value
this.eventsHandlersManager.states has only one value
this.eventsHandlersManager.states[] elements has only one value
this.eventsHandlersManager.states[] elements != null
this.eventsHandlersManager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
this.eventsHandlersManager.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState] }
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.name has only one value
this.name.toString == "Dormand-Prince 8 (5, 3)"
this.maxEvaluations == 2147483647
this.evaluations >= 0
this.equations.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest$1.class
size(this.c[]) == 12
size(this.a[]) == 12
size(this.b[]) == 13
size(this.eventsHandlersManager.states[]) one of { 0, 1 }
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A.getClass().getName() != this.prototype.getClass().getName()
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A.getClass().getName() != this.stepHandlers.getClass().getName()
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A.getClass().getName() != this.equations.getClass().getName()
this.prototype.getClass().getName() != this.stepHandlers.getClass().getName()
this.prototype.getClass().getName() != this.equations.getClass().getName()
this.stepHandlers.getClass().getName() != this.equations.getClass().getName()
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.DormandPrince853Integrator(double, double, double, double):::ENTER
minStep == 0.0
maxStep == 100.0
scalAbsoluteTolerance == 1.0E-10
scalRelativeTolerance == 1.0E-10
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.DormandPrince853Integrator(double, double, double, double):::EXIT
this.prototype.finalized == false
this.exp == -0.125
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 10.0
this.initialStep == -1.0
this.stepStart == Double.NaN
this.stepSize == 0.0
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.evaluations == 0
this.equations == null
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.estimateError(double[][], double[], double[], double):::ENTER
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A.getClass().getName() == yDotK.getClass().getName()
this.exp == -0.125
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 10.0
this.initialStep == 60.0
this.stepStart == 1.8782503200000029E9
this.stepSize one of { 19.999995708465576, 60.0, 100.0 }
this.equations has only one value
y0 has only one value
y0[] one of { [1.0, 2.0, 3.0], [1.006018036054065, 2.0012003600720107, 3.000180005400108], [1.016128685406095, 2.0032025613658795, 3.0004800384020482] }
y0[] sorted by <
y1[] sorted by <
h one of { 19.999995708465576, 60.0, 100.0 }
size(yDotK[]) == 13
size(y0[]) == 3
size(y1[]) == 3
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.estimateError(double[][], double[], double[], double):::EXIT
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.METHOD_NAME == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.METHOD_NAME)
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.METHOD_NAME.toString == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.METHOD_NAME.toString)
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_C == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_C)
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_C[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_C[])
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A)
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A.getClass().getName() == orig(this.a.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A.getClass().getName() == orig(yDotK.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A[])
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_B == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_B)
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_B[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_B[])
this.fsal == orig(this.fsal)
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.integrator == orig(this.prototype.integrator)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.interpolatedDerivatives == orig(this.prototype.interpolatedDerivatives)
this.prototype.finalized == orig(this.prototype.finalized)
this.prototype.forward == orig(this.prototype.forward)
this.prototype.dirtyState == orig(this.prototype.dirtyState)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.minReduction == orig(this.minReduction)
this.maxGrowth == orig(this.maxGrowth)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepHandlers.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
yDotK[] == orig(yDotK[])
y0[] == orig(y0[])
y1[] == orig(y1[])
this.exp == -0.125
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 10.0
this.initialStep == 60.0
this.stepStart == 1.8782503200000029E9
this.stepSize one of { 19.999995708465576, 60.0, 100.0 }
this.equations has only one value
y0[] one of { [1.0, 2.0, 3.0], [1.006018036054065, 2.0012003600720107, 3.000180005400108], [1.016128685406095, 2.0032025613658795, 3.0004800384020482] }
y0[] sorted by <
y1[] sorted by <
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.getOrder():::ENTER
this.stepSize == 0.0
this.evaluations one of { 0, 1 }
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.getOrder():::EXIT
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.METHOD_NAME == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.METHOD_NAME)
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.METHOD_NAME.toString == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.METHOD_NAME.toString)
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_C == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_C)
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_C[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_C[])
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A)
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A.getClass().getName() == orig(this.a.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A[])
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_B == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_B)
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_B[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_B[])
this.fsal == orig(this.fsal)
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.integrator == orig(this.prototype.integrator)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.interpolatedDerivatives == orig(this.prototype.interpolatedDerivatives)
this.prototype.finalized == orig(this.prototype.finalized)
this.prototype.forward == orig(this.prototype.forward)
this.prototype.dirtyState == orig(this.prototype.dirtyState)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.minReduction == orig(this.minReduction)
this.maxGrowth == orig(this.maxGrowth)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepHandlers.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.stepSize == 0.0
this.evaluations one of { 0, 1 }
return == 8
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest$1:::OBJECT
this has only one value
this.val$k has only one value
this.val$k[] == [1.0E-4, 1.0E-5, 1.0E-6]
this.val$k[] elements one of { 1.0E-6, 1.0E-5, 1.0E-4 }
this.val$k[] sorted by >
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.this has only one value
size(this.val$k[]) == 3
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest$1.(org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest, double[]):::ENTER
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.this has only one value
$hidden$2 has only one value
$hidden$2[] == [1.0E-4, 1.0E-5, 1.0E-6]
$hidden$2[] elements one of { 1.0E-6, 1.0E-5, 1.0E-4 }
size($hidden$2[]) == 3
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest$1.(org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest, double[]):::EXIT
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.this)
$hidden$2[] == orig($hidden$2[])
$hidden$2[] == [1.0E-4, 1.0E-5, 1.0E-6]
$hidden$2[] elements one of { 1.0E-6, 1.0E-5, 1.0E-4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest$1.computeDerivatives(double, double[], double[]):::ENTER
t == 1.8782503200000029E9
y[] sorted by <
yDot[] sorted by >=
size(y[]) == 3
size(yDot[]) == 3
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest$1.computeDerivatives(double, double[], double[]):::EXIT
this.val$k == orig(this.val$k)
this.val$k[] == orig(this.val$k[])
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.this)
y[] == orig(y[])
y[] sorted by <
yDot[] sorted by >
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest$1.getDimension():::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest$1.getDimension():::EXIT
this.val$k == orig(this.val$k)
this.val$k[] == orig(this.val$k[])
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.this)
return == 3
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest$2:::OBJECT
this has only one value
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest$2.(org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest):::ENTER
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest$2.(org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest):::EXIT
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.this)
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest$2.eventOccurred(double, double[], boolean):::ENTER
t == 1.8782503800000029E9
y has only one value
y[] == [1.006018036054065, 2.0012003600720107, 3.000180005400108]
y[] elements one of { 1.006018036054065, 2.0012003600720107, 3.000180005400108 }
increasing == true
size(y[]) == 3
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest$2.eventOccurred(double, double[], boolean):::EXIT
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.this)
y[] == orig(y[])
y[] == [1.006018036054065, 2.0012003600720107, 3.000180005400108]
y[] elements one of { 1.006018036054065, 2.0012003600720107, 3.000180005400108 }
return == 3
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest$2.g(double, double[]):::ENTER
t == 1.8782503200000029E9
y[] sorted by <
size(y[]) == 3
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest$2.g(double, double[]):::EXIT
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.this)
y[] == orig(y[])
y[] sorted by <
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest:::OBJECT
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.DormandPrince853IntegratorTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.DormandPrince853IntegratorTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.testMissedEndEvent():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.testMissedEndEvent():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator:::CLASS
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D has only one value
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == double[][].class
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[] contains no nulls and has only one value, of length 4
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[] elements != null
size(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator:::OBJECT
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == this.yDotKLast.getClass().getName()
this.yDotKLast.getClass().getName() == this.v.getClass().getName()
this.yDotKLast.getClass().getName() == this.yDotK.getClass().getName()
this.integrator.stepHandlers.getClass().getName() == this.integrator.eventsHandlersManager.states.getClass().getName()
this.yDotKLast.getClass().getName() == double[][].class
this.yDotKLast[] contains no nulls and has only one value, of length 3
this.yDotKLast[] elements != null
this.v[] contains no nulls and has only one value, of length 7
this.v[] elements != null
this.yDotK[] contains no nulls and has only one value, of length 13
this.yDotK[] elements != null
this.integrator.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.class
this.integrator.stepHandlers has only one value
this.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.integrator.stepStart one of { 1.8782503200000029E9, Double.NaN }
this.integrator.eventsHandlersManager has only one value
this.integrator.eventsHandlersManager.states has only one value
this.integrator.eventsHandlersManager.states[] contains no nulls and has only one value, of length 1
this.integrator.eventsHandlersManager.states[] elements has only one value
this.integrator.eventsHandlersManager.states[] elements != null
this.integrator.eventsHandlersManager.states[].getClass().getName() == [org.apache.commons.math.ode.events.EventState]
this.integrator.eventsHandlersManager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
this.integrator.eventsHandlersManager.first == null
this.integrator.eventsHandlersManager.initialized == false
this.integrator.name has only one value
this.integrator.name.toString == "Dormand-Prince 8 (5, 3)"
this.integrator.maxEvaluations == 2147483647
this.integrator.evaluations >= 0
this.integrator.equations has only one value
this.integrator.equations.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest$1.class
this.previousTime one of { 1.8782503200000029E9, Double.NaN }
this.currentTime one of { 1.8782503800000029E9, Double.NaN }
this.currentState[] sorted by <=
this.interpolatedTime one of { 1.8782503200000029E9, Double.NaN }
this.interpolatedState[] sorted by <=
this.interpolatedDerivatives[] sorted by >=
this.forward == true
size(this.yDotKLast[]) == 3
size(this.v[]) == 7
size(this.yDotK[]) == 13
size(this.integrator.eventsHandlersManager.states[]) == 1
size(this.currentState[]) == 3
size(this.interpolatedState[]) == 3
size(this.interpolatedDerivatives[]) == 3
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() != this.integrator.getClass().getName()
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() != this.integrator.stepHandlers.getClass().getName()
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() != this.integrator.equations.getClass().getName()
this.yDotKLast.getClass().getName() != this.integrator.getClass().getName()
this.yDotKLast.getClass().getName() != this.integrator.stepHandlers.getClass().getName()
this.yDotKLast.getClass().getName() != this.integrator.equations.getClass().getName()
this.integrator.getClass().getName() != this.integrator.stepHandlers.getClass().getName()
this.integrator.getClass().getName() != this.integrator.equations.getClass().getName()
this.integrator.stepHandlers.getClass().getName() != this.integrator.equations.getClass().getName()
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.DormandPrince853StepInterpolator():::EXIT
this.yDotKLast == null
this.v == null
this.vectorsInitialized == false
this.yDotK == null
this.integrator == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.finalized == false
this.dirtyState == true
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.DormandPrince853StepInterpolator(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator):::ENTER
interpolator has only one value
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D has only one value
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == double[][].class
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[] contains no nulls and has only one value, of length 4
interpolator.yDotKLast == null
interpolator.v == null
interpolator.vectorsInitialized == false
interpolator.yDotK == null
interpolator.integrator == null
interpolator.previousTime == Double.NaN
interpolator.currentTime == Double.NaN
interpolator.h == Double.NaN
interpolator.currentState == null
interpolator.interpolatedTime == Double.NaN
interpolator.interpolatedState == null
interpolator.interpolatedDerivatives == null
interpolator.finalized == true
interpolator.forward == true
interpolator.dirtyState == true
size(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.DormandPrince853StepInterpolator(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator):::EXIT
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D)
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[])
interpolator.yDotKLast == orig(interpolator.yDotKLast)
interpolator.v == orig(interpolator.v)
interpolator.vectorsInitialized == orig(interpolator.vectorsInitialized)
interpolator.yDotK == orig(interpolator.yDotK)
interpolator.integrator == orig(interpolator.integrator)
interpolator.currentState == orig(interpolator.currentState)
interpolator.interpolatedState == orig(interpolator.interpolatedState)
interpolator.interpolatedDerivatives == orig(interpolator.interpolatedDerivatives)
interpolator.finalized == orig(interpolator.finalized)
interpolator.forward == orig(interpolator.forward)
interpolator.dirtyState == orig(interpolator.dirtyState)
this.yDotKLast == null
this.v == null
this.vectorsInitialized == false
this.yDotK == null
this.integrator == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.finalized == true
this.dirtyState == true
interpolator.yDotKLast == null
interpolator.v == null
interpolator.vectorsInitialized == false
interpolator.yDotK == null
interpolator.integrator == null
interpolator.previousTime == Double.NaN
interpolator.currentTime == Double.NaN
interpolator.h == Double.NaN
interpolator.currentState == null
interpolator.interpolatedTime == Double.NaN
interpolator.interpolatedState == null
interpolator.interpolatedDerivatives == null
interpolator.finalized == true
interpolator.forward == true
interpolator.dirtyState == true
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::ENTER
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == this.v.getClass().getName()
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == this.yDotK.getClass().getName()
this has only one value
this.yDotKLast has only one value
this.v has only one value
this.yDotK has only one value
this.integrator has only one value
this.integrator.stepStart == 1.8782503200000029E9
this.integrator.stepSize one of { 19.999995708465576, 60.0, 100.0 }
this.previousTime == 1.8782503200000029E9
this.currentTime == 1.8782503800000029E9
this.h one of { 19.999995708465576, 60.0, 100.0 }
this.currentState has only one value
this.currentState[] sorted by <
this.interpolatedTime == 1.8782503200000029E9
this.interpolatedState has only one value
this.interpolatedDerivatives has only one value
this.dirtyState == true
theta one of { 0.0, 0.19999995708465576, 1.0 }
oneMinusThetaH >= -2.384185791015625E-7
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::EXIT
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D)
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == this.v.getClass().getName()
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == this.yDotK.getClass().getName()
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == orig(this.yDotKLast.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == orig(this.v.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == orig(this.yDotK.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[])
this.yDotKLast == orig(this.yDotKLast)
this.yDotKLast[] == orig(this.yDotKLast[])
this.v == orig(this.v)
this.v[] == orig(this.v[])
this.yDotK == orig(this.yDotK)
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.integrator.stepHandlers == orig(this.integrator.stepHandlers)
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.stepHandlers.getClass().getName())
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.eventsHandlersManager.states.getClass().getName())
this.integrator.stepStart == orig(this.integrator.stepStart)
this.integrator.stepSize == orig(this.integrator.stepSize)
this.integrator.eventsHandlersManager == orig(this.integrator.eventsHandlersManager)
this.integrator.eventsHandlersManager.states == orig(this.integrator.eventsHandlersManager.states)
this.integrator.eventsHandlersManager.states[] == orig(this.integrator.eventsHandlersManager.states[])
this.integrator.eventsHandlersManager.first == orig(this.integrator.eventsHandlersManager.first)
this.integrator.eventsHandlersManager.initialized == orig(this.integrator.eventsHandlersManager.initialized)
this.integrator.name == orig(this.integrator.name)
this.integrator.name.toString == orig(this.integrator.name.toString)
this.integrator.maxEvaluations == orig(this.integrator.maxEvaluations)
this.integrator.equations == orig(this.integrator.equations)
this.integrator.equations.getClass().getName() == orig(this.integrator.equations.getClass().getName())
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
size(this.interpolatedState[]) == orig(size(this.interpolatedState[]))
size(this.interpolatedDerivatives[]) == orig(size(this.interpolatedDerivatives[]))
this.yDotKLast has only one value
this.v has only one value
this.vectorsInitialized == true
this.yDotK has only one value
this.integrator has only one value
this.integrator.stepStart == 1.8782503200000029E9
this.integrator.stepSize one of { 19.999995708465576, 60.0, 100.0 }
this.previousTime == 1.8782503200000029E9
this.currentTime == 1.8782503800000029E9
this.h one of { 19.999995708465576, 60.0, 100.0 }
this.currentState has only one value
this.currentState[] sorted by <
this.interpolatedTime == 1.8782503200000029E9
this.interpolatedState has only one value
this.interpolatedState[] sorted by <
this.interpolatedDerivatives has only one value
this.interpolatedDerivatives[] sorted by >
this.finalized == true
this.dirtyState == true
this.integrator.evaluations >= orig(this.integrator.evaluations)
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.doCopy():::ENTER
this has only one value
this.yDotKLast == null
this.v == null
this.vectorsInitialized == false
this.yDotK == null
this.integrator == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.finalized == true
this.dirtyState == true
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.doCopy():::EXIT
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D)
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[])
this.yDotKLast == orig(this.yDotKLast)
this.v == orig(this.v)
this.vectorsInitialized == orig(this.vectorsInitialized)
this.yDotK == orig(this.yDotK)
this.integrator == orig(this.integrator)
this.currentState == orig(this.currentState)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.yDotKLast == null
this.v == null
this.vectorsInitialized == false
this.yDotK == null
this.integrator == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.finalized == true
this.dirtyState == true
return has only one value
return.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.class
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.doFinalize():::ENTER
this.vectorsInitialized == false
this.integrator.stepStart == 1.8782503200000029E9
this.integrator.stepSize one of { 19.999995708465576, 60.0, 100.0 }
this.finalized == false
this.dirtyState == true
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.doFinalize():::EXIT394
this.yDotKLast == null
this.v == null
this.yDotK == null
this.integrator == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
orig(this) has only one value
orig(this.previousTime) == Double.NaN
orig(this.currentTime) == Double.NaN
orig(this.h) == Double.NaN
orig(this.interpolatedTime) == Double.NaN
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.doFinalize():::EXIT429
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == this.v.getClass().getName()
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == this.yDotK.getClass().getName()
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == orig(this.yDotKLast.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == orig(this.v.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == orig(this.yDotK.getClass().getName())
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.interpolatedTime == orig(this.interpolatedTime)
this.yDotKLast has only one value
this.v has only one value
this.yDotK has only one value
this.integrator has only one value
this.previousTime == 1.8782503200000029E9
this.currentTime == 1.8782503800000029E9
this.h one of { 19.999995708465576, 60.0, 100.0 }
this.currentState has only one value
this.interpolatedTime == 1.8782503200000029E9
this.interpolatedState has only one value
this.interpolatedDerivatives has only one value
orig(this) has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.doFinalize():::EXIT
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D)
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[])
this.yDotKLast == orig(this.yDotKLast)
this.yDotKLast.getClass().getName() == orig(this.yDotKLast.getClass().getName())
this.yDotKLast.getClass().getName() == orig(this.v.getClass().getName())
this.yDotKLast.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotKLast[] == orig(this.yDotKLast[])
this.v == orig(this.v)
this.v[] == orig(this.v[])
this.vectorsInitialized == orig(this.vectorsInitialized)
this.yDotK == orig(this.yDotK)
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.integrator.stepHandlers == orig(this.integrator.stepHandlers)
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.stepHandlers.getClass().getName())
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.eventsHandlersManager.states.getClass().getName())
this.integrator.stepStart == orig(this.integrator.stepStart)
this.integrator.stepSize == orig(this.integrator.stepSize)
this.integrator.eventsHandlersManager == orig(this.integrator.eventsHandlersManager)
this.integrator.eventsHandlersManager.states == orig(this.integrator.eventsHandlersManager.states)
this.integrator.eventsHandlersManager.states[] == orig(this.integrator.eventsHandlersManager.states[])
this.integrator.eventsHandlersManager.first == orig(this.integrator.eventsHandlersManager.first)
this.integrator.eventsHandlersManager.initialized == orig(this.integrator.eventsHandlersManager.initialized)
this.integrator.name == orig(this.integrator.name)
this.integrator.name.toString == orig(this.integrator.name.toString)
this.integrator.maxEvaluations == orig(this.integrator.maxEvaluations)
this.integrator.equations == orig(this.integrator.equations)
this.integrator.equations.getClass().getName() == orig(this.integrator.equations.getClass().getName())
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
(this.yDotKLast == null)  <==>  (orig(this.currentTime) == Double.NaN)
(this.yDotKLast == null)  <==>  (orig(this.h) == Double.NaN)
(this.yDotKLast == null)  <==>  (orig(this.interpolatedTime) == Double.NaN)
(this.yDotKLast == null)  <==>  (orig(this.previousTime) == Double.NaN)
(this.yDotKLast == null)  <==>  (this.currentState == null)
(this.yDotKLast == null)  <==>  (this.currentTime == Double.NaN)
(this.yDotKLast == null)  <==>  (this.h == Double.NaN)
(this.yDotKLast == null)  <==>  (this.integrator == null)
(this.yDotKLast == null)  <==>  (this.interpolatedDerivatives == null)
(this.yDotKLast == null)  <==>  (this.interpolatedState == null)
(this.yDotKLast == null)  <==>  (this.interpolatedTime == Double.NaN)
(this.yDotKLast == null)  <==>  (this.previousTime == Double.NaN)
(this.yDotKLast == null)  <==>  (this.v == null)
(this.yDotKLast == null)  <==>  (this.yDotK == null)
(this.yDotKLast has only one value)  <==>  (orig(this.currentTime) == 1.8782503800000029E9)
(this.yDotKLast has only one value)  <==>  (orig(this.h) one of { 19.999995708465576, 60.0, 100.0 })
(this.yDotKLast has only one value)  <==>  (orig(this.interpolatedTime) == 1.8782503200000029E9)
(this.yDotKLast has only one value)  <==>  (orig(this.previousTime) == 1.8782503200000029E9)
(this.yDotKLast has only one value)  <==>  (this.currentState has only one value)
(this.yDotKLast has only one value)  <==>  (this.currentTime == 1.8782503800000029E9)
(this.yDotKLast has only one value)  <==>  (this.currentTime == orig(this.currentTime))
(this.yDotKLast has only one value)  <==>  (this.h == orig(this.h))
(this.yDotKLast has only one value)  <==>  (this.h one of { 19.999995708465576, 60.0, 100.0 })
(this.yDotKLast has only one value)  <==>  (this.integrator has only one value)
(this.yDotKLast has only one value)  <==>  (this.interpolatedDerivatives has only one value)
(this.yDotKLast has only one value)  <==>  (this.interpolatedState has only one value)
(this.yDotKLast has only one value)  <==>  (this.interpolatedTime == 1.8782503200000029E9)
(this.yDotKLast has only one value)  <==>  (this.interpolatedTime == orig(this.interpolatedTime))
(this.yDotKLast has only one value)  <==>  (this.previousTime == 1.8782503200000029E9)
(this.yDotKLast has only one value)  <==>  (this.previousTime == orig(this.previousTime))
(this.yDotKLast has only one value)  <==>  (this.v has only one value)
(this.yDotKLast has only one value)  <==>  (this.yDotK has only one value)
(this.yDotKLast has only one value)  ==>  (org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == this.yDotKLast.getClass().getName())
(this.yDotKLast has only one value)  ==>  (this.integrator.equations has only one value)
(this.yDotKLast has only one value)  ==>  (this.integrator.equations.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest$1.class)
(this.yDotKLast has only one value)  ==>  (this.integrator.evaluations - orig(this.integrator.evaluations) - 3 == 0)
(this.yDotKLast has only one value)  ==>  (this.integrator.eventsHandlersManager has only one value)
(this.yDotKLast has only one value)  ==>  (this.integrator.eventsHandlersManager.first == null)
(this.yDotKLast has only one value)  ==>  (this.integrator.eventsHandlersManager.states has only one value)
(this.yDotKLast has only one value)  ==>  (this.integrator.eventsHandlersManager.states[] contains no nulls and has only one value, of length 1)
(this.yDotKLast has only one value)  ==>  (this.integrator.eventsHandlersManager.states[] elements has only one value)
(this.yDotKLast has only one value)  ==>  (this.integrator.eventsHandlersManager.states[].getClass().getName() == [org.apache.commons.math.ode.events.EventState])
(this.yDotKLast has only one value)  ==>  (this.integrator.eventsHandlersManager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class)
(this.yDotKLast has only one value)  ==>  (this.integrator.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.class)
(this.yDotKLast has only one value)  ==>  (this.integrator.name has only one value)
(this.yDotKLast has only one value)  ==>  (this.integrator.name.toString == "Dormand-Prince 8 (5, 3)")
(this.yDotKLast has only one value)  ==>  (this.integrator.stepHandlers has only one value)
(this.yDotKLast has only one value)  ==>  (this.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class)
(this.yDotKLast has only one value)  ==>  (this.integrator.stepSize one of { 19.999995708465576, 60.0, 100.0 })
(this.yDotKLast has only one value)  ==>  (this.v[] contains no nulls and has only one value, of length 7)
(this.yDotKLast has only one value)  ==>  (this.yDotKLast.getClass().getName() == double[][].class)
(this.yDotKLast has only one value)  ==>  (this.yDotKLast[] contains no nulls and has only one value, of length 3)
(this.yDotKLast has only one value)  ==>  (this.yDotK[] contains no nulls and has only one value, of length 13)
this.vectorsInitialized == false
this.integrator.stepStart == 1.8782503200000029E9
this.integrator.stepSize one of { 19.999995708465576, 60.0, 100.0 }
this.finalized == false
this.dirtyState == true
this.integrator.evaluations - orig(this.integrator.evaluations) - 3 == 0
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.reinitialize(org.apache.commons.math.ode.AbstractIntegrator, double[], double[][], boolean):::ENTER
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == yDotK.getClass().getName()
integrator.stepHandlers.getClass().getName() == integrator.eventsHandlersManager.states.getClass().getName()
this has only one value
this.yDotKLast == null
this.v == null
this.vectorsInitialized == false
this.yDotK == null
this.integrator == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.finalized == true
this.dirtyState == true
integrator has only one value
integrator.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.class
integrator.stepHandlers has only one value
integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
integrator.stepStart == Double.NaN
integrator.stepSize == 0.0
integrator.eventsHandlersManager has only one value
integrator.eventsHandlersManager.states has only one value
integrator.eventsHandlersManager.states[] contains no nulls and has only one value, of length 1
integrator.eventsHandlersManager.states[] elements has only one value
integrator.eventsHandlersManager.states[].getClass().getName() == [org.apache.commons.math.ode.events.EventState]
integrator.eventsHandlersManager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
integrator.eventsHandlersManager.first == null
integrator.eventsHandlersManager.initialized == false
integrator.name has only one value
integrator.name.toString == "Dormand-Prince 8 (5, 3)"
integrator.maxEvaluations == 2147483647
integrator.evaluations == 0
integrator.equations has only one value
integrator.equations.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest$1.class
y has only one value
y[] == [0.0, 0.0, 0.0]
y[] elements == 0.0
yDotK has only one value
yDotK[] contains no nulls and has only one value, of length 13
forward == true
size(integrator.eventsHandlersManager.states[]) == 1
size(y[]) == 3
size(yDotK[]) == 13
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.reinitialize(org.apache.commons.math.ode.AbstractIntegrator, double[], double[][], boolean):::EXIT
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D)
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == this.v.getClass().getName()
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == this.yDotK.getClass().getName()
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == orig(yDotK.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[])
this.vectorsInitialized == orig(this.vectorsInitialized)
this.integrator.getClass().getName() == orig(integrator.getClass().getName())
this.integrator.stepHandlers.getClass().getName() == integrator.stepHandlers.getClass().getName()
this.integrator.eventsHandlersManager.states.getClass().getName() == integrator.stepHandlers.getClass().getName()
this.integrator.equations.getClass().getName() == integrator.equations.getClass().getName()
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
integrator.stepHandlers == orig(integrator.stepHandlers)
integrator.stepHandlers.getClass().getName() == integrator.eventsHandlersManager.states.getClass().getName()
integrator.stepHandlers.getClass().getName() == orig(integrator.stepHandlers.getClass().getName())
integrator.stepHandlers.getClass().getName() == orig(integrator.eventsHandlersManager.states.getClass().getName())
integrator.stepSize == orig(integrator.stepSize)
integrator.eventsHandlersManager == orig(integrator.eventsHandlersManager)
integrator.eventsHandlersManager.states == orig(integrator.eventsHandlersManager.states)
integrator.eventsHandlersManager.states[] == orig(integrator.eventsHandlersManager.states[])
integrator.eventsHandlersManager.first == orig(integrator.eventsHandlersManager.first)
integrator.eventsHandlersManager.initialized == orig(integrator.eventsHandlersManager.initialized)
integrator.name == orig(integrator.name)
integrator.name.toString == orig(integrator.name.toString)
integrator.maxEvaluations == orig(integrator.maxEvaluations)
integrator.evaluations == orig(integrator.evaluations)
integrator.equations == orig(integrator.equations)
integrator.equations.getClass().getName() == orig(integrator.equations.getClass().getName())
y[] == orig(y[])
yDotK[] == orig(yDotK[])
this.yDotKLast has only one value
this.v has only one value
this.vectorsInitialized == false
this.yDotK has only one value
this.integrator has only one value
this.integrator.stepStart == Double.NaN
this.integrator.stepSize == 0.0
this.integrator.evaluations == 0
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState has only one value
this.currentState[] == [0.0, 0.0, 0.0]
this.currentState[] elements == 0.0
this.interpolatedTime == Double.NaN
this.interpolatedState has only one value
this.interpolatedState[] == [0.0, 0.0, 0.0]
this.interpolatedState[] elements == 0.0
this.interpolatedDerivatives has only one value
this.interpolatedDerivatives[] == [0.0, 0.0, 0.0]
this.interpolatedDerivatives[] elements == 0.0
this.finalized == false
this.dirtyState == true
integrator.stepHandlers has only one value
integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
integrator.stepStart == Double.NaN
integrator.stepSize == 0.0
integrator.eventsHandlersManager has only one value
integrator.eventsHandlersManager.states has only one value
integrator.eventsHandlersManager.states[] contains no nulls and has only one value, of length 1
integrator.eventsHandlersManager.states[] elements has only one value
integrator.eventsHandlersManager.states[].getClass().getName() == [org.apache.commons.math.ode.events.EventState]
integrator.eventsHandlersManager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
integrator.eventsHandlersManager.first == null
integrator.eventsHandlersManager.initialized == false
integrator.name has only one value
integrator.name.toString == "Dormand-Prince 8 (5, 3)"
integrator.maxEvaluations == 2147483647
integrator.evaluations == 0
integrator.equations has only one value
integrator.equations.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest$1.class
y[] == [0.0, 0.0, 0.0]
y[] elements == 0.0
yDotK[] contains no nulls and has only one value, of length 13
size(integrator.eventsHandlersManager.states[]) == 1
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.storeTime(double):::ENTER
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == this.v.getClass().getName()
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == this.yDotK.getClass().getName()
this has only one value
this.yDotKLast has only one value
this.v has only one value
this.yDotK has only one value
this.integrator has only one value
this.currentState has only one value
this.interpolatedState has only one value
this.interpolatedDerivatives has only one value
t == 1.8782503200000029E9
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.storeTime(double):::EXIT
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D)
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == this.v.getClass().getName()
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == this.yDotK.getClass().getName()
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == orig(this.yDotKLast.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == orig(this.v.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == orig(this.yDotK.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[])
this.yDotKLast == orig(this.yDotKLast)
this.yDotKLast[] == orig(this.yDotKLast[])
this.v == orig(this.v)
this.v[] == orig(this.v[])
this.yDotK == orig(this.yDotK)
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.integrator.stepHandlers == orig(this.integrator.stepHandlers)
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.stepHandlers.getClass().getName())
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.eventsHandlersManager.states.getClass().getName())
this.integrator.stepSize == orig(this.integrator.stepSize)
this.integrator.eventsHandlersManager == orig(this.integrator.eventsHandlersManager)
this.integrator.eventsHandlersManager.states == orig(this.integrator.eventsHandlersManager.states)
this.integrator.eventsHandlersManager.states[] == orig(this.integrator.eventsHandlersManager.states[])
this.integrator.eventsHandlersManager.first == orig(this.integrator.eventsHandlersManager.first)
this.integrator.eventsHandlersManager.initialized == orig(this.integrator.eventsHandlersManager.initialized)
this.integrator.name == orig(this.integrator.name)
this.integrator.name.toString == orig(this.integrator.name.toString)
this.integrator.maxEvaluations == orig(this.integrator.maxEvaluations)
this.integrator.evaluations == orig(this.integrator.evaluations)
this.integrator.equations == orig(this.integrator.equations)
this.integrator.equations.getClass().getName() == orig(this.integrator.equations.getClass().getName())
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.forward == orig(this.forward)
this.yDotKLast has only one value
this.v has only one value
this.vectorsInitialized == false
this.yDotK has only one value
this.integrator has only one value
this.currentTime == 1.8782503200000029E9
this.currentState has only one value
this.interpolatedTime == 1.8782503200000029E9
this.interpolatedState has only one value
this.interpolatedDerivatives has only one value
this.finalized == false
this.dirtyState == true
===========================================================================
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:::OBJECT
this has only one value
this.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.class
this.fsal == true
this.c has only one value
this.c[] == [0.05260015195876774, 0.0789002279381516, 0.1183503419072274, 0.28164965809277265, 0.3333333333333333, 0.25, 0.3076923076923077, 0.6512820512820513, 0.6, 0.8571428571428571, 1.0, 1.0]
this.a has only one value
this.a.getClass().getName() == double[][].class
this.a[] contains no nulls and has only one value, of length 12
this.b has only one value
this.b[] == [0.054293734116568765, 0.0, 0.0, 0.0, 0.0, 4.450312892752409, 1.8915178993145003, -5.801203960010585, 0.3111643669578199, -0.1521609496625161, 0.20136540080403034, 0.04471061572777259, 0.0]
this.prototype has only one value
this.prototype.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.class
this.prototype.yDotK == null
this.prototype.integrator == null
this.prototype.previousTime == Double.NaN
this.prototype.currentTime == Double.NaN
this.prototype.h == Double.NaN
this.prototype.currentState == null
this.prototype.interpolatedTime == Double.NaN
this.prototype.interpolatedState == null
this.prototype.interpolatedDerivatives == null
this.prototype.forward == true
this.prototype.dirtyState == true
this.exp == -0.125
this.safety one of { 0.0, 0.9 }
this.minReduction one of { 0.0, 0.2 }
this.maxGrowth one of { 0.0, 10.0 }
this.scalAbsoluteTolerance == 1.0E-10
this.scalRelativeTolerance == 1.0E-10
this.vecAbsoluteTolerance == null
this.vecRelativeTolerance == null
this.initialStep one of { -1.0, 60.0 }
this.minStep == 0.0
this.maxStep == 100.0
this.stepHandlers has only one value
this.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.stepStart == Double.NaN
this.stepSize == 0.0
this.eventsHandlersManager has only one value
this.eventsHandlersManager.states has only one value
this.eventsHandlersManager.states[] elements has only one value
this.eventsHandlersManager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
this.eventsHandlersManager.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState] }
this.eventsHandlersManager.states.getClass().getName() == java.util.ArrayList.class
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.name has only one value
this.name.toString == "Dormand-Prince 8 (5, 3)"
this.maxEvaluations == 2147483647
this.evaluations one of { 0, 25, 76 }
this.equations.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest$1.class
size(this.c[]) == 12
size(this.a[]) == 12
size(this.b[]) == 13
size(this.eventsHandlersManager.states[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.EmbeddedRungeKuttaIntegrator(java.lang.String, boolean, double[], double[][], double[], org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator, double, double, double, double):::ENTER
name has only one value
name.toString == "Dormand-Prince 8 (5, 3)"
fsal == true
c has only one value
c[] == [0.05260015195876774, 0.0789002279381516, 0.1183503419072274, 0.28164965809277265, 0.3333333333333333, 0.25, 0.3076923076923077, 0.6512820512820513, 0.6, 0.8571428571428571, 1.0, 1.0]
a has only one value
a.getClass().getName() == double[][].class
a[] contains no nulls and has only one value, of length 12
b has only one value
b[] == [0.054293734116568765, 0.0, 0.0, 0.0, 0.0, 4.450312892752409, 1.8915178993145003, -5.801203960010585, 0.3111643669578199, -0.1521609496625161, 0.20136540080403034, 0.04471061572777259, 0.0]
prototype has only one value
prototype.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.class
prototype.yDotK == null
prototype.integrator == null
prototype.previousTime == Double.NaN
prototype.currentTime == Double.NaN
prototype.h == Double.NaN
prototype.currentState == null
prototype.interpolatedTime == Double.NaN
prototype.interpolatedState == null
prototype.interpolatedDerivatives == null
prototype.finalized == false
prototype.forward == true
prototype.dirtyState == true
minStep == 0.0
maxStep == 100.0
scalAbsoluteTolerance == 1.0E-10
scalRelativeTolerance == 1.0E-10
size(c[]) == 12
size(a[]) == 12
size(b[]) == 13
===========================================================================
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.EmbeddedRungeKuttaIntegrator(java.lang.String, boolean, double[], double[][], double[], org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator, double, double, double, double):::EXIT
name.toString == orig(name.toString)
c[] == orig(c[])
a[] == orig(a[])
b[] == orig(b[])
prototype.yDotK == orig(prototype.yDotK)
prototype.integrator == orig(prototype.integrator)
prototype.currentState == orig(prototype.currentState)
prototype.interpolatedState == orig(prototype.interpolatedState)
prototype.interpolatedDerivatives == orig(prototype.interpolatedDerivatives)
prototype.finalized == orig(prototype.finalized)
prototype.forward == orig(prototype.forward)
prototype.dirtyState == orig(prototype.dirtyState)
this.prototype.finalized == false
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 10.0
this.initialStep == -1.0
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.evaluations == 0
this.equations == null
name.toString == "Dormand-Prince 8 (5, 3)"
c[] == [0.05260015195876774, 0.0789002279381516, 0.1183503419072274, 0.28164965809277265, 0.3333333333333333, 0.25, 0.3076923076923077, 0.6512820512820513, 0.6, 0.8571428571428571, 1.0, 1.0]
a[] contains no nulls and has only one value, of length 12
b[] == [0.054293734116568765, 0.0, 0.0, 0.0, 0.0, 4.450312892752409, 1.8915178993145003, -5.801203960010585, 0.3111643669578199, -0.1521609496625161, 0.20136540080403034, 0.04471061572777259, 0.0]
prototype.yDotK == null
prototype.integrator == null
prototype.previousTime == Double.NaN
prototype.currentTime == Double.NaN
prototype.h == Double.NaN
prototype.currentState == null
prototype.interpolatedTime == Double.NaN
prototype.interpolatedState == null
prototype.interpolatedDerivatives == null
prototype.finalized == false
prototype.forward == true
prototype.dirtyState == true
===========================================================================
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double, double[], double, double[]):::ENTER
this.prototype.finalized == false
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 10.0
this.initialStep == 60.0
this.evaluations one of { 0, 25 }
equations has only one value
equations.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest$1.class
t0 == 1.8782503200000029E9
y0 has only one value
y0[] == [1.0, 2.0, 3.0]
y0[] elements one of { 1.0, 2.0, 3.0 }
t == 1.8782503799999986E9
y has only one value
y[] one of { [0.0, 0.0, 0.0], [1.0060180360780502, 2.001200360076782, 3.000180005400823] }
y[] elements >= 0.0
size(y0[]) == 3
size(y[]) == 3
===========================================================================
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double, double[], double, double[]):::EXIT
this.fsal == orig(this.fsal)
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a.getClass().getName() == orig(this.a.getClass().getName())
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.integrator == orig(this.prototype.integrator)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.interpolatedDerivatives == orig(this.prototype.interpolatedDerivatives)
this.prototype.forward == orig(this.prototype.forward)
this.prototype.dirtyState == orig(this.prototype.dirtyState)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.minReduction == orig(this.minReduction)
this.maxGrowth == orig(this.maxGrowth)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
y0[] == orig(y0[])
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 10.0
this.initialStep == 60.0
this.evaluations one of { 25, 76 }
this.equations has only one value
y0[] == [1.0, 2.0, 3.0]
y0[] elements one of { 1.0, 2.0, 3.0 }
y[] one of { [1.0060180360780502, 2.001200360076782, 3.000180005400823], [1.0181629759528457, 2.00360324185889, 3.0005400485900395] }
return == 1.878250380000003E9
===========================================================================
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.setMaxGrowth(double):::ENTER
this.prototype.finalized == false
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 0.0
this.initialStep == -1.0
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.evaluations == 0
this.equations == null
maxGrowth == 10.0
===========================================================================
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.setMaxGrowth(double):::EXIT
this.fsal == orig(this.fsal)
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a.getClass().getName() == orig(this.a.getClass().getName())
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.integrator == orig(this.prototype.integrator)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.interpolatedDerivatives == orig(this.prototype.interpolatedDerivatives)
this.prototype.finalized == orig(this.prototype.finalized)
this.prototype.forward == orig(this.prototype.forward)
this.prototype.dirtyState == orig(this.prototype.dirtyState)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.minReduction == orig(this.minReduction)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.prototype.finalized == false
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 10.0
this.initialStep == -1.0
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.evaluations == 0
this.equations == null
===========================================================================
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.setMinReduction(double):::ENTER
this.prototype.finalized == false
this.safety == 0.9
this.minReduction == 0.0
this.maxGrowth == 0.0
this.initialStep == -1.0
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.evaluations == 0
this.equations == null
minReduction == 0.2
===========================================================================
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.setMinReduction(double):::EXIT
this.fsal == orig(this.fsal)
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a.getClass().getName() == orig(this.a.getClass().getName())
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.integrator == orig(this.prototype.integrator)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.interpolatedDerivatives == orig(this.prototype.interpolatedDerivatives)
this.prototype.finalized == orig(this.prototype.finalized)
this.prototype.forward == orig(this.prototype.forward)
this.prototype.dirtyState == orig(this.prototype.dirtyState)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.maxGrowth == orig(this.maxGrowth)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.prototype.finalized == false
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 0.0
this.initialStep == -1.0
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.evaluations == 0
this.equations == null
===========================================================================
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.setSafety(double):::ENTER
this.prototype.finalized == false
this.safety == 0.0
this.minReduction == 0.0
this.maxGrowth == 0.0
this.initialStep == -1.0
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.evaluations == 0
this.equations == null
safety == 0.9
===========================================================================
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.setSafety(double):::EXIT
this.fsal == orig(this.fsal)
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a.getClass().getName() == orig(this.a.getClass().getName())
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.integrator == orig(this.prototype.integrator)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.interpolatedDerivatives == orig(this.prototype.interpolatedDerivatives)
this.prototype.finalized == orig(this.prototype.finalized)
this.prototype.forward == orig(this.prototype.forward)
this.prototype.dirtyState == orig(this.prototype.dirtyState)
this.exp == orig(this.exp)
this.minReduction == orig(this.minReduction)
this.maxGrowth == orig(this.maxGrowth)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.prototype.finalized == false
this.safety == 0.9
this.minReduction == 0.0
this.maxGrowth == 0.0
this.initialStep == -1.0
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.evaluations == 0
this.equations == null
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator:::OBJECT
this has only one value
this.getClass().getName() == org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.class
this.c has only one value
this.c[] == [0.5, 0.5, 1.0]
this.c[] elements one of { 0.5, 1.0 }
this.a has only one value
this.a.getClass().getName() == double[][].class
this.a[] contains no nulls and has only one value, of length 3
this.b has only one value
this.b[] == [0.16666666666666666, 0.3333333333333333, 0.3333333333333333, 0.16666666666666666]
this.b[] elements one of { 0.16666666666666666, 0.3333333333333333 }
this.prototype has only one value
this.prototype.getClass().getName() == org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.class
this.prototype.yDotK == null
this.prototype.integrator == null
this.prototype.previousTime == Double.NaN
this.prototype.currentTime == Double.NaN
this.prototype.h == Double.NaN
this.prototype.currentState == null
this.prototype.interpolatedTime == Double.NaN
this.prototype.interpolatedState == null
this.prototype.interpolatedDerivatives == null
this.prototype.forward == true
this.prototype.dirtyState == true
this.step == 60.0
this.stepHandlers has only one value
this.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.eventsHandlersManager has only one value
this.eventsHandlersManager.states has only one value
this.eventsHandlersManager.states[] elements has only one value
this.eventsHandlersManager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
this.eventsHandlersManager.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState] }
this.eventsHandlersManager.states.getClass().getName() == java.util.ArrayList.class
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.name has only one value
this.name.toString == "classical Runge-Kutta"
this.maxEvaluations == 2147483647
this.evaluations one of { 0, 8, 20 }
this.equations.getClass().getName() == org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$1.class
size(this.c[]) == 3
size(this.a[]) == 3
size(this.b[]) == 4
size(this.eventsHandlersManager.states[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator.RungeKuttaIntegrator(java.lang.String, double[], double[][], double[], org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator, double):::ENTER
name has only one value
name.toString == "classical Runge-Kutta"
c has only one value
c[] == [0.5, 0.5, 1.0]
c[] elements one of { 0.5, 1.0 }
a has only one value
a.getClass().getName() == double[][].class
a[] contains no nulls and has only one value, of length 3
b has only one value
b[] == [0.16666666666666666, 0.3333333333333333, 0.3333333333333333, 0.16666666666666666]
b[] elements one of { 0.16666666666666666, 0.3333333333333333 }
prototype has only one value
prototype.getClass().getName() == org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.class
prototype.yDotK == null
prototype.integrator == null
prototype.previousTime == Double.NaN
prototype.currentTime == Double.NaN
prototype.h == Double.NaN
prototype.currentState == null
prototype.interpolatedTime == Double.NaN
prototype.interpolatedState == null
prototype.interpolatedDerivatives == null
prototype.finalized == false
prototype.forward == true
prototype.dirtyState == true
step == 60.0
size(c[]) == 3
size(a[]) == 3
size(b[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator.RungeKuttaIntegrator(java.lang.String, double[], double[][], double[], org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator, double):::EXIT
name.toString == orig(name.toString)
c[] == orig(c[])
a[] == orig(a[])
b[] == orig(b[])
prototype.yDotK == orig(prototype.yDotK)
prototype.integrator == orig(prototype.integrator)
prototype.currentState == orig(prototype.currentState)
prototype.interpolatedState == orig(prototype.interpolatedState)
prototype.interpolatedDerivatives == orig(prototype.interpolatedDerivatives)
prototype.finalized == orig(prototype.finalized)
prototype.forward == orig(prototype.forward)
prototype.dirtyState == orig(prototype.dirtyState)
this.prototype.finalized == false
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.evaluations == 0
this.equations == null
name.toString == "classical Runge-Kutta"
c[] == [0.5, 0.5, 1.0]
c[] elements one of { 0.5, 1.0 }
a[] contains no nulls and has only one value, of length 3
b[] == [0.16666666666666666, 0.3333333333333333, 0.3333333333333333, 0.16666666666666666]
b[] elements one of { 0.16666666666666666, 0.3333333333333333 }
prototype.yDotK == null
prototype.integrator == null
prototype.previousTime == Double.NaN
prototype.currentTime == Double.NaN
prototype.h == Double.NaN
prototype.currentState == null
prototype.interpolatedTime == Double.NaN
prototype.interpolatedState == null
prototype.interpolatedDerivatives == null
prototype.finalized == false
prototype.forward == true
prototype.dirtyState == true
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator.integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double, double[], double, double[]):::ENTER
this.prototype.finalized == false
this.evaluations one of { 0, 8 }
equations has only one value
equations.getClass().getName() == org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$1.class
t0 == 1.8782503200000029E9
y0 has only one value
y0[] == [1.0, 2.0, 3.0]
y0[] elements one of { 1.0, 2.0, 3.0 }
t == 1.8782503799999986E9
y has only one value
y[] one of { [0.0, 0.0, 0.0], [1.0060180360779853, 2.001200360076782, 3.000180005400823] }
y[] elements >= 0.0
size(y0[]) == 3
size(y[]) == 3
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator.integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double, double[], double, double[]):::EXIT
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a.getClass().getName() == orig(this.a.getClass().getName())
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.integrator == orig(this.prototype.integrator)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.interpolatedDerivatives == orig(this.prototype.interpolatedDerivatives)
this.prototype.forward == orig(this.prototype.forward)
this.prototype.dirtyState == orig(this.prototype.dirtyState)
this.step == orig(this.step)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
y0[] == orig(y0[])
this.evaluations one of { 8, 20 }
this.equations has only one value
y0[] == [1.0, 2.0, 3.0]
y0[] elements one of { 1.0, 2.0, 3.0 }
y[] one of { [1.0060180360779853, 2.001200360076782, 3.000180005400823], [1.0181629764138718, 2.003603241949652, 3.0005400486036318] }
return == 1.878250380000003E9
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator:::OBJECT
this.yDotK.getClass().getName() == double[][].class
this.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.integrator.stepStart == Double.NaN
this.integrator.stepSize one of { 0.0, Double.NaN }
this.integrator.eventsHandlersManager.states[].getClass().getName() == [org.apache.commons.math.ode.events.EventState]
this.integrator.eventsHandlersManager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
this.integrator.eventsHandlersManager.states.getClass().getName() == java.util.ArrayList.class
this.integrator.eventsHandlersManager.first == null
this.integrator.eventsHandlersManager.initialized == false
this.integrator.name.toString one of { "Dormand-Prince 8 (5, 3)", "classical Runge-Kutta" }
this.integrator.maxEvaluations == 2147483647
this.integrator.evaluations == 0
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState[] == [0.0, 0.0, 0.0]
this.currentState[] elements == 0.0
this.interpolatedTime == Double.NaN
this.interpolatedState[] == [0.0, 0.0, 0.0]
this.interpolatedState[] elements == 0.0
this.interpolatedDerivatives[] == [0.0, 0.0, 0.0]
this.interpolatedDerivatives[] elements == 0.0
this.forward == true
this.dirtyState == true
size(this.yDotK[]) one of { 4, 13 }
size(this.integrator.eventsHandlersManager.states[]) == 1
size(this.currentState[]) == 3
size(this.interpolatedState[]) == 3
size(this.interpolatedDerivatives[]) == 3
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator.RungeKuttaStepInterpolator():::EXIT
this.yDotK == null
this.integrator == null
this.currentState == null
this.interpolatedState == null
this.interpolatedDerivatives == null
this.finalized == false
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator.RungeKuttaStepInterpolator(org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator):::ENTER
interpolator.yDotK == null
interpolator.integrator == null
interpolator.previousTime == Double.NaN
interpolator.currentTime == Double.NaN
interpolator.h == Double.NaN
interpolator.currentState == null
interpolator.interpolatedTime == Double.NaN
interpolator.interpolatedState == null
interpolator.interpolatedDerivatives == null
interpolator.finalized == true
interpolator.forward == true
interpolator.dirtyState == true
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator.RungeKuttaStepInterpolator(org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator):::EXIT
interpolator.yDotK == orig(interpolator.yDotK)
interpolator.integrator == orig(interpolator.integrator)
interpolator.currentState == orig(interpolator.currentState)
interpolator.interpolatedState == orig(interpolator.interpolatedState)
interpolator.interpolatedDerivatives == orig(interpolator.interpolatedDerivatives)
interpolator.finalized == orig(interpolator.finalized)
interpolator.forward == orig(interpolator.forward)
interpolator.dirtyState == orig(interpolator.dirtyState)
this.yDotK == null
this.integrator == null
this.currentState == null
this.interpolatedState == null
this.interpolatedDerivatives == null
this.finalized == true
interpolator.yDotK == null
interpolator.integrator == null
interpolator.previousTime == Double.NaN
interpolator.currentTime == Double.NaN
interpolator.h == Double.NaN
interpolator.currentState == null
interpolator.interpolatedTime == Double.NaN
interpolator.interpolatedState == null
interpolator.interpolatedDerivatives == null
interpolator.finalized == true
interpolator.forward == true
interpolator.dirtyState == true
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator.reinitialize(org.apache.commons.math.ode.AbstractIntegrator, double[], double[][], boolean):::ENTER
this.yDotK == null
this.integrator == null
this.currentState == null
this.interpolatedState == null
this.interpolatedDerivatives == null
this.finalized == true
rkIntegrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
rkIntegrator.stepStart == Double.NaN
rkIntegrator.stepSize one of { 0.0, Double.NaN }
rkIntegrator.eventsHandlersManager.states[].getClass().getName() == [org.apache.commons.math.ode.events.EventState]
rkIntegrator.eventsHandlersManager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
rkIntegrator.eventsHandlersManager.states.getClass().getName() == java.util.ArrayList.class
rkIntegrator.eventsHandlersManager.first == null
rkIntegrator.eventsHandlersManager.initialized == false
rkIntegrator.name.toString one of { "Dormand-Prince 8 (5, 3)", "classical Runge-Kutta" }
rkIntegrator.maxEvaluations == 2147483647
rkIntegrator.evaluations == 0
y[] == [0.0, 0.0, 0.0]
y[] elements == 0.0
yDotArray.getClass().getName() == double[][].class
forward == true
size(rkIntegrator.eventsHandlersManager.states[]) == 1
size(y[]) == 3
size(yDotArray[]) one of { 4, 13 }
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator.reinitialize(org.apache.commons.math.ode.AbstractIntegrator, double[], double[][], boolean):::EXIT
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
rkIntegrator.stepHandlers == orig(rkIntegrator.stepHandlers)
rkIntegrator.stepHandlers.getClass().getName() == orig(rkIntegrator.stepHandlers.getClass().getName())
rkIntegrator.eventsHandlersManager == orig(rkIntegrator.eventsHandlersManager)
rkIntegrator.eventsHandlersManager.states == orig(rkIntegrator.eventsHandlersManager.states)
rkIntegrator.eventsHandlersManager.states[] == orig(rkIntegrator.eventsHandlersManager.states[])
rkIntegrator.eventsHandlersManager.states.getClass().getName() == orig(rkIntegrator.eventsHandlersManager.states.getClass().getName())
rkIntegrator.eventsHandlersManager.first == orig(rkIntegrator.eventsHandlersManager.first)
rkIntegrator.eventsHandlersManager.initialized == orig(rkIntegrator.eventsHandlersManager.initialized)
rkIntegrator.name == orig(rkIntegrator.name)
rkIntegrator.name.toString == orig(rkIntegrator.name.toString)
rkIntegrator.maxEvaluations == orig(rkIntegrator.maxEvaluations)
rkIntegrator.evaluations == orig(rkIntegrator.evaluations)
rkIntegrator.equations == orig(rkIntegrator.equations)
rkIntegrator.equations.getClass().getName() == orig(rkIntegrator.equations.getClass().getName())
y[] == orig(y[])
yDotArray[] == orig(yDotArray[])
this.finalized == false
rkIntegrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
rkIntegrator.stepStart == Double.NaN
rkIntegrator.stepSize one of { 0.0, Double.NaN }
rkIntegrator.eventsHandlersManager.states[].getClass().getName() == [org.apache.commons.math.ode.events.EventState]
rkIntegrator.eventsHandlersManager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
rkIntegrator.eventsHandlersManager.states.getClass().getName() == java.util.ArrayList.class
rkIntegrator.eventsHandlersManager.first == null
rkIntegrator.eventsHandlersManager.initialized == false
rkIntegrator.name.toString one of { "Dormand-Prince 8 (5, 3)", "classical Runge-Kutta" }
rkIntegrator.maxEvaluations == 2147483647
rkIntegrator.evaluations == 0
y[] == [0.0, 0.0, 0.0]
y[] elements == 0.0
size(rkIntegrator.eventsHandlersManager.states[]) == 1
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator:::OBJECT
this.previousTime one of { 1.8782503200000029E9, Double.NaN }
this.currentTime one of { 1.8782503800000029E9, Double.NaN }
this.currentState[] sorted by <=
this.interpolatedTime one of { 1.8782503200000029E9, Double.NaN }
this.interpolatedState[] sorted by <=
this.interpolatedDerivatives[] sorted by >=
this.forward == true
size(this.currentState[]) == 3
size(this.interpolatedState[]) == 3
size(this.interpolatedDerivatives[]) == 3
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.AbstractStepInterpolator():::EXIT
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.finalized == false
this.dirtyState == true
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.AbstractStepInterpolator(double[], boolean):::ENTER
y[] == [0.0, 0.0, 0.0]
y[] elements == 0.0
forward == true
size(y[]) == 3
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.AbstractStepInterpolator(double[], boolean):::EXIT
y[] == orig(y[])
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState[] == [0.0, 0.0, 0.0]
this.currentState[] elements == 0.0
this.interpolatedTime == Double.NaN
this.interpolatedState[] == [0.0, 0.0, 0.0]
this.interpolatedState[] elements == 0.0
this.interpolatedDerivatives[] == [0.0, 0.0, 0.0]
this.interpolatedDerivatives[] elements == 0.0
this.finalized == false
this.dirtyState == true
y[] == [0.0, 0.0, 0.0]
y[] elements == 0.0
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.AbstractStepInterpolator(org.apache.commons.math.ode.sampling.AbstractStepInterpolator):::ENTER
interpolator.previousTime == Double.NaN
interpolator.currentTime == Double.NaN
interpolator.h == Double.NaN
interpolator.currentState == null
interpolator.interpolatedTime == Double.NaN
interpolator.interpolatedState == null
interpolator.interpolatedDerivatives == null
interpolator.finalized == true
interpolator.forward == true
interpolator.dirtyState == true
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.AbstractStepInterpolator(org.apache.commons.math.ode.sampling.AbstractStepInterpolator):::EXIT
interpolator.currentState == orig(interpolator.currentState)
interpolator.interpolatedState == orig(interpolator.interpolatedState)
interpolator.interpolatedDerivatives == orig(interpolator.interpolatedDerivatives)
interpolator.finalized == orig(interpolator.finalized)
interpolator.forward == orig(interpolator.forward)
interpolator.dirtyState == orig(interpolator.dirtyState)
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.finalized == true
this.dirtyState == true
interpolator.previousTime == Double.NaN
interpolator.currentTime == Double.NaN
interpolator.h == Double.NaN
interpolator.currentState == null
interpolator.interpolatedTime == Double.NaN
interpolator.interpolatedState == null
interpolator.interpolatedDerivatives == null
interpolator.finalized == true
interpolator.forward == true
interpolator.dirtyState == true
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.copy():::ENTER
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.finalized == false
this.dirtyState == true
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.copy():::EXIT
this.currentState == orig(this.currentState)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.finalized == true
this.dirtyState == true
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.doFinalize():::ENTER
this has only one value
this.getClass().getName() == org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.class
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.finalized == false
this.dirtyState == true
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.doFinalize():::EXIT
this.currentState == orig(this.currentState)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.finalized == false
this.dirtyState == true
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.finalizeStep():::ENTER
this.finalized == false
this.dirtyState == true
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.finalizeStep():::EXIT
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.finalized == true
this.dirtyState == true
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.getCurrentTime():::ENTER
this.previousTime == 1.8782503200000029E9
this.currentTime == 1.8782503800000029E9
this.h one of { 19.999995708465576, 60.0, 100.0 }
this.currentState[] sorted by <
this.interpolatedTime == 1.8782503200000029E9
this.interpolatedState[] sorted by <
this.interpolatedDerivatives[] sorted by >
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.getCurrentTime():::EXIT
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.previousTime == 1.8782503200000029E9
this.currentTime == 1.8782503800000029E9
this.h one of { 19.999995708465576, 60.0, 100.0 }
this.currentState[] sorted by <
this.interpolatedTime == 1.8782503200000029E9
this.interpolatedState[] sorted by <
this.interpolatedDerivatives[] sorted by >
return == 1.8782503800000029E9
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.getInterpolatedState():::ENTER
this.previousTime == 1.8782503200000029E9
this.currentTime == 1.8782503800000029E9
this.h one of { 19.999995708465576, 60.0, 100.0 }
this.currentState[] sorted by <
this.interpolatedTime == 1.8782503200000029E9
this.dirtyState == true
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.getInterpolatedState():::EXIT
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.forward == orig(this.forward)
size(this.interpolatedState[]) == orig(size(this.interpolatedState[]))
size(this.interpolatedDerivatives[]) == orig(size(this.interpolatedDerivatives[]))
this.previousTime == 1.8782503200000029E9
this.currentTime == 1.8782503800000029E9
this.h one of { 19.999995708465576, 60.0, 100.0 }
this.currentState[] sorted by <
this.interpolatedTime == 1.8782503200000029E9
this.interpolatedState[] sorted by <
this.interpolatedDerivatives[] sorted by >
this.dirtyState == false
return[] sorted by <
size(return[]) == 3
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.getPreviousTime():::ENTER
this.previousTime == 1.8782503200000029E9
this.currentTime == 1.8782503800000029E9
this.h == 60.0
this.currentState[] elements one of { 1.006018036054, 2.0012003600720107, 3.000180005400108 }
this.currentState[] one of { [1.006018036054, 2.0012003600720107, 3.000180005400108], [1.006018036054065, 2.0012003600720107, 3.000180005400108] }
this.interpolatedTime == 1.8782503800000029E9
this.interpolatedState[] == [0.0, 0.0, 0.0]
this.interpolatedState[] elements == 0.0
this.interpolatedDerivatives[] == [0.0, 0.0, 0.0]
this.interpolatedDerivatives[] elements == 0.0
this.finalized == false
this.dirtyState == true
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.getPreviousTime():::EXIT
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.previousTime == 1.8782503200000029E9
this.currentTime == 1.8782503800000029E9
this.h == 60.0
this.currentState[] elements one of { 1.006018036054, 2.0012003600720107, 3.000180005400108 }
this.currentState[] one of { [1.006018036054, 2.0012003600720107, 3.000180005400108], [1.006018036054065, 2.0012003600720107, 3.000180005400108] }
this.interpolatedTime == 1.8782503800000029E9
this.interpolatedState[] == [0.0, 0.0, 0.0]
this.interpolatedState[] elements == 0.0
this.interpolatedDerivatives[] == [0.0, 0.0, 0.0]
this.interpolatedDerivatives[] elements == 0.0
this.finalized == false
this.dirtyState == true
return == 1.8782503200000029E9
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.isForward():::ENTER
this.previousTime == 1.8782503200000029E9
this.currentTime == 1.8782503800000029E9
this.h one of { 19.999995708465576, 60.0, 100.0 }
this.currentState[] sorted by <
this.interpolatedTime == 1.8782503200000029E9
this.interpolatedState[] sorted by <
this.interpolatedDerivatives[] sorted by >
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.isForward():::EXIT
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.previousTime == 1.8782503200000029E9
this.currentTime == 1.8782503800000029E9
this.h one of { 19.999995708465576, 60.0, 100.0 }
this.currentState[] sorted by <
this.interpolatedTime == 1.8782503200000029E9
this.interpolatedState[] sorted by <
this.interpolatedDerivatives[] sorted by >
return == true
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.isForward():::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.reinitialize(double[], boolean):::ENTER
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.finalized == true
this.dirtyState == true
y[] == [0.0, 0.0, 0.0]
y[] elements == 0.0
isForward == true
size(y[]) == 3
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.reinitialize(double[], boolean):::EXIT
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
y[] == orig(y[])
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState[] == [0.0, 0.0, 0.0]
this.currentState[] elements == 0.0
this.interpolatedTime == Double.NaN
this.interpolatedState[] == [0.0, 0.0, 0.0]
this.interpolatedState[] elements == 0.0
this.interpolatedDerivatives[] == [0.0, 0.0, 0.0]
this.interpolatedDerivatives[] elements == 0.0
this.finalized == false
this.dirtyState == true
y[] == [0.0, 0.0, 0.0]
y[] elements == 0.0
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.setInterpolatedTime(double):::ENTER
this.currentTime == 1.8782503200000029E9
time == 1.8782503200000029E9
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.setInterpolatedTime(double):::EXIT
this.currentTime == orig(this.currentTime)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.currentTime == 1.8782503200000029E9
this.interpolatedTime == 1.8782503200000029E9
this.dirtyState == true
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.shift():::ENTER
this.currentTime == 1.8782503200000029E9
this.h one of { 60.0, 100.0, Double.NaN }
this.interpolatedTime == 1.8782503200000029E9
this.finalized == false
this.dirtyState == true
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.shift():::EXIT
this.currentTime == orig(this.currentTime)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.previousTime == 1.8782503200000029E9
this.currentTime == 1.8782503200000029E9
this.h one of { 60.0, 100.0, Double.NaN }
this.interpolatedTime == 1.8782503200000029E9
this.finalized == false
this.dirtyState == true
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.storeTime(double):::ENTER
t == 1.8782503200000029E9
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.storeTime(double):::EXIT
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.forward == orig(this.forward)
this.currentTime == 1.8782503200000029E9
this.interpolatedTime == 1.8782503200000029E9
this.finalized == false
this.dirtyState == true
===========================================================================
org.apache.commons.math.ode.sampling.DummyStepInterpolator:::CLASS
===========================================================================
org.apache.commons.math.ode.sampling.DummyStepInterpolator:::OBJECT
this.currentDerivative[] sorted by >=
this.previousTime one of { 1.8782503200000029E9, Double.NaN }
this.currentTime one of { 1.8782503800000029E9, Double.NaN }
this.h one of { 60.0, Double.NaN }
this.currentState[] sorted by <=
this.interpolatedTime one of { 1.8782503200000029E9, Double.NaN }
this.interpolatedState[] sorted by <=
this.interpolatedDerivatives[] sorted by >=
this.finalized == false
this.forward == true
this.dirtyState == true
size(this.currentDerivative[]) == 3
size(this.currentState[]) == 3
size(this.interpolatedState[]) == 3
size(this.interpolatedDerivatives[]) == 3
===========================================================================
org.apache.commons.math.ode.sampling.DummyStepInterpolator.DummyStepInterpolator(double[], double[], boolean):::ENTER
y[] == [0.0, 0.0, 0.0]
y[] elements == 0.0
yDot[] == [0.0, 0.0, 0.0]
yDot[] elements == 0.0
forward == true
size(y[]) == 3
size(yDot[]) == 3
===========================================================================
org.apache.commons.math.ode.sampling.DummyStepInterpolator.DummyStepInterpolator(double[], double[], boolean):::EXIT
y[] == orig(y[])
yDot[] == orig(yDot[])
this.currentDerivative[] == [0.0, 0.0, 0.0]
this.currentDerivative[] elements == 0.0
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState[] == [0.0, 0.0, 0.0]
this.currentState[] elements == 0.0
this.interpolatedTime == Double.NaN
this.interpolatedState[] == [0.0, 0.0, 0.0]
this.interpolatedState[] elements == 0.0
this.interpolatedDerivatives[] == [0.0, 0.0, 0.0]
this.interpolatedDerivatives[] elements == 0.0
y[] == [0.0, 0.0, 0.0]
y[] elements == 0.0
yDot[] == [0.0, 0.0, 0.0]
yDot[] elements == 0.0
===========================================================================
org.apache.commons.math.ode.sampling.DummyStepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::ENTER
this.currentDerivative[] elements one of { 3.000180005400162E-6, 2.0012003601080003E-5, 1.0060180540000001E-4 }
this.currentDerivative[] sorted by >
this.previousTime == 1.8782503200000029E9
this.currentTime == 1.8782503800000029E9
this.h == 60.0
this.currentState[] elements one of { 1.006018036054, 2.0012003600720107, 3.000180005400108 }
this.currentState[] sorted by <
this.interpolatedTime == 1.8782503200000029E9
this.interpolatedState[] one of { [0.0, 0.0, 0.0], [1.006018036054, 2.0012003600720107, 3.000180005400108], [1.006018036054065, 2.0012003600720107, 3.000180005400108] }
this.interpolatedDerivatives[] one of { [0.0, 0.0, 0.0], [1.006018036054065E-4, 2.001200360072011E-5, 3.000180005400108E-6], [1.0060180540000001E-4, 2.0012003601080003E-5, 3.000180005400162E-6] }
theta one of { 0.0, 1.000000003973643 }
oneMinusThetaH one of { -2.384185791015625E-7, 9.059906005859375E-6, 60.0 }
===========================================================================
org.apache.commons.math.ode.sampling.DummyStepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::EXIT
this.currentDerivative == orig(this.currentDerivative)
this.currentDerivative[] == orig(this.currentDerivative[])
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
size(this.interpolatedState[]) == orig(size(this.interpolatedState[]))
size(this.interpolatedDerivatives[]) == orig(size(this.interpolatedDerivatives[]))
this.currentDerivative[] elements one of { 3.000180005400162E-6, 2.0012003601080003E-5, 1.0060180540000001E-4 }
this.currentDerivative[] sorted by >
this.previousTime == 1.8782503200000029E9
this.currentTime == 1.8782503800000029E9
this.h == 60.0
this.currentState[] elements one of { 1.006018036054, 2.0012003600720107, 3.000180005400108 }
this.currentState[] sorted by <
this.interpolatedTime == 1.8782503200000029E9
this.interpolatedState[] elements one of { 1.006018036054, 2.0012003600720107, 3.000180005400108 }
this.interpolatedState[] sorted by <
this.interpolatedDerivatives[] elements one of { 3.000180005400162E-6, 2.0012003601080003E-5, 1.0060180540000001E-4 }
this.interpolatedDerivatives[] sorted by >
this.interpolatedState[] >= orig(this.interpolatedState[]) (elementwise)
this.interpolatedDerivatives[] >= orig(this.interpolatedDerivatives[]) (elementwise)
