===========================================================================
org.apache.commons.math.ConvergingAlgorithmImpl:::OBJECT
this.getClass().getName() == org.apache.commons.math.analysis.solvers.BrentSolver.class
this.absoluteAccuracy <= 1.0E-6
this.relativeAccuracy == 1.0E-14
this.maximalIterationCount one of { 100, 1000 }
this.defaultAbsoluteAccuracy == 1.0E-6
this.defaultRelativeAccuracy == 1.0E-14
this.defaultMaximalIterationCount == 100
this.iterationCount == 0
===========================================================================
org.apache.commons.math.ConvergingAlgorithmImpl.ConvergingAlgorithmImpl(int, double):::ENTER
defaultMaximalIterationCount == 100
defaultAbsoluteAccuracy == 1.0E-6
===========================================================================
org.apache.commons.math.ConvergingAlgorithmImpl.ConvergingAlgorithmImpl(int, double):::EXIT
this.absoluteAccuracy == 1.0E-6
this.maximalIterationCount == 100
===========================================================================
org.apache.commons.math.ConvergingAlgorithmImpl.setAbsoluteAccuracy(double):::ENTER
this.absoluteAccuracy == 1.0E-6
this.maximalIterationCount == 100
===========================================================================
org.apache.commons.math.ConvergingAlgorithmImpl.setAbsoluteAccuracy(double):::EXIT
this.relativeAccuracy == orig(this.relativeAccuracy)
this.maximalIterationCount == orig(this.maximalIterationCount)
this.defaultAbsoluteAccuracy == orig(this.defaultAbsoluteAccuracy)
this.defaultRelativeAccuracy == orig(this.defaultRelativeAccuracy)
this.defaultMaximalIterationCount == orig(this.defaultMaximalIterationCount)
this.iterationCount == orig(this.iterationCount)
this.maximalIterationCount == 100
this.absoluteAccuracy < orig(this.absoluteAccuracy)
===========================================================================
org.apache.commons.math.ConvergingAlgorithmImpl.setMaximalIterationCount(int):::ENTER
this.maximalIterationCount == 100
count one of { 100, 1000 }
===========================================================================
org.apache.commons.math.ConvergingAlgorithmImpl.setMaximalIterationCount(int):::EXIT
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.defaultAbsoluteAccuracy == orig(this.defaultAbsoluteAccuracy)
this.defaultRelativeAccuracy == orig(this.defaultRelativeAccuracy)
this.defaultMaximalIterationCount == orig(this.defaultMaximalIterationCount)
this.iterationCount == orig(this.iterationCount)
this.maximalIterationCount >= orig(this.maximalIterationCount)
===========================================================================
org.apache.commons.math.MathException:::CLASS
===========================================================================
org.apache.commons.math.MathException:::OBJECT
this.pattern.toString one of { "dimensions mismatch: ODE problem has dimension {0}, final state vector has dimension {1}", "dimensions mismatch: ODE problem has dimension {0}, initial state vector has dimension {1}", "too small integration interval: length = {0}" }
this.arguments.getClass().getName() == java.lang.Object[].class
this.arguments[].getClass().getName() one of { [java.lang.Double], [java.lang.Integer, java.lang.Integer] }
size(this.arguments[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.MathException.MathException(java.lang.String, java.lang.Object[]):::ENTER
pattern.toString one of { "dimensions mismatch: ODE problem has dimension {0}, final state vector has dimension {1}", "dimensions mismatch: ODE problem has dimension {0}, initial state vector has dimension {1}", "too small integration interval: length = {0}" }
arguments.getClass().getName() == java.lang.Object[].class
size(arguments[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.MathException.MathException(java.lang.String, java.lang.Object[]):::EXIT
pattern.toString == orig(pattern.toString)
arguments[] == orig(arguments[])
pattern.toString one of { "dimensions mismatch: ODE problem has dimension {0}, final state vector has dimension {1}", "dimensions mismatch: ODE problem has dimension {0}, initial state vector has dimension {1}", "too small integration interval: length = {0}" }
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver:::CLASS
org.apache.commons.math.analysis.solvers.BrentSolver.NON_BRACKETING_MESSAGE has only one value
org.apache.commons.math.analysis.solvers.BrentSolver.NON_BRACKETING_MESSAGE.toString == "function values at endpoints do not have different signs.  Endpoints: [{0}, {1}], Values: [{2}, {3}]"
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver:::OBJECT
this.functionValueAccuracy == 1.0E-15
this.defaultFunctionValueAccuracy == 1.0E-15
this.functionValue == 0.0
this.f == null
this.relativeAccuracy == 1.0E-14
this.maximalIterationCount one of { 100, 1000 }
this.defaultAbsoluteAccuracy == 1.0E-6
this.defaultRelativeAccuracy == 1.0E-14
this.defaultMaximalIterationCount == 100
this.iterationCount >= 0
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver.BrentSolver():::EXIT
this.resultComputed == false
this.result == 0.0
this.absoluteAccuracy == 1.0E-6
this.maximalIterationCount == 100
this.iterationCount == 0
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver.solve(org.apache.commons.math.analysis.UnivariateRealFunction, double, double):::ENTER
this.resultComputed == false
this.result == 0.0
this.iterationCount == 0
f.getClass().getName() == org.apache.commons.math.ode.events.EventState$1.class
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver.solve(org.apache.commons.math.analysis.UnivariateRealFunction, double, double):::EXIT
org.apache.commons.math.analysis.solvers.BrentSolver.NON_BRACKETING_MESSAGE == orig(org.apache.commons.math.analysis.solvers.BrentSolver.NON_BRACKETING_MESSAGE)
org.apache.commons.math.analysis.solvers.BrentSolver.NON_BRACKETING_MESSAGE.toString == orig(org.apache.commons.math.analysis.solvers.BrentSolver.NON_BRACKETING_MESSAGE.toString)
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.defaultFunctionValueAccuracy == orig(this.defaultFunctionValueAccuracy)
this.functionValue == orig(this.functionValue)
this.f == orig(this.f)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.maximalIterationCount == orig(this.maximalIterationCount)
this.defaultAbsoluteAccuracy == orig(this.defaultAbsoluteAccuracy)
this.defaultRelativeAccuracy == orig(this.defaultRelativeAccuracy)
this.defaultMaximalIterationCount == orig(this.defaultMaximalIterationCount)
this.resultComputed == true
orig(this.result) % this.result == 0
this.result != orig(this.result)
this.iterationCount >= orig(this.iterationCount)
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver.solve(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double, double, double, double):::ENTER
this.resultComputed == false
this.result == 0.0
this.iterationCount == 0
f.getClass().getName() == org.apache.commons.math.ode.events.EventState$1.class
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver.solve(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double, double, double, double):::EXIT279
this.iterationCount one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver.solve(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double, double, double, double):::EXIT286
orig(this.iterationCount) % this.iterationCount == 0
this.iterationCount > orig(this.iterationCount)
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver.solve(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double, double, double, double):::EXIT
org.apache.commons.math.analysis.solvers.BrentSolver.NON_BRACKETING_MESSAGE == orig(org.apache.commons.math.analysis.solvers.BrentSolver.NON_BRACKETING_MESSAGE)
org.apache.commons.math.analysis.solvers.BrentSolver.NON_BRACKETING_MESSAGE.toString == orig(org.apache.commons.math.analysis.solvers.BrentSolver.NON_BRACKETING_MESSAGE.toString)
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.defaultFunctionValueAccuracy == orig(this.defaultFunctionValueAccuracy)
this.functionValue == orig(this.functionValue)
this.f == orig(this.f)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.maximalIterationCount == orig(this.maximalIterationCount)
this.defaultAbsoluteAccuracy == orig(this.defaultAbsoluteAccuracy)
this.defaultRelativeAccuracy == orig(this.defaultRelativeAccuracy)
this.defaultMaximalIterationCount == orig(this.defaultMaximalIterationCount)
this.resultComputed == true
orig(this.result) % this.result == 0
this.result != orig(this.result)
this.iterationCount >= orig(this.iterationCount)
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl:::OBJECT
this.getClass().getName() == org.apache.commons.math.analysis.solvers.BrentSolver.class
this.functionValueAccuracy == 1.0E-15
this.defaultFunctionValueAccuracy == 1.0E-15
this.functionValue == 0.0
this.f == null
this.relativeAccuracy == 1.0E-14
this.maximalIterationCount one of { 100, 1000 }
this.defaultAbsoluteAccuracy == 1.0E-6
this.defaultRelativeAccuracy == 1.0E-14
this.defaultMaximalIterationCount == 100
this.iterationCount >= 0
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.UnivariateRealSolverImpl(int, double):::ENTER
defaultMaximalIterationCount == 100
defaultAbsoluteAccuracy == 1.0E-6
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.UnivariateRealSolverImpl(int, double):::EXIT
this.resultComputed == false
this.result == 0.0
this.absoluteAccuracy == 1.0E-6
this.maximalIterationCount == 100
this.iterationCount == 0
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.clearResult():::ENTER
this.resultComputed == false
this.result == 0.0
this.iterationCount == 0
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.clearResult():::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.defaultFunctionValueAccuracy == orig(this.defaultFunctionValueAccuracy)
this.resultComputed == orig(this.resultComputed)
this.result == orig(this.result)
this.functionValue == orig(this.functionValue)
this.f == orig(this.f)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.maximalIterationCount == orig(this.maximalIterationCount)
this.defaultAbsoluteAccuracy == orig(this.defaultAbsoluteAccuracy)
this.defaultRelativeAccuracy == orig(this.defaultRelativeAccuracy)
this.defaultMaximalIterationCount == orig(this.defaultMaximalIterationCount)
this.iterationCount == orig(this.iterationCount)
this.resultComputed == false
this.result == 0.0
this.iterationCount == 0
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.setResult(double, int):::ENTER
this.resultComputed == false
this.result == 0.0
this.iterationCount == 0
iterationCount >= 0
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.setResult(double, int):::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.defaultFunctionValueAccuracy == orig(this.defaultFunctionValueAccuracy)
this.functionValue == orig(this.functionValue)
this.f == orig(this.f)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.maximalIterationCount == orig(this.maximalIterationCount)
this.defaultAbsoluteAccuracy == orig(this.defaultAbsoluteAccuracy)
this.defaultRelativeAccuracy == orig(this.defaultRelativeAccuracy)
this.defaultMaximalIterationCount == orig(this.defaultMaximalIterationCount)
this.resultComputed == true
orig(this.result) % this.result == 0
this.result != orig(this.result)
this.iterationCount >= orig(this.iterationCount)
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.verifyInterval(double, double):::ENTER
this.resultComputed == false
this.result == 0.0
this.iterationCount == 0
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.verifyInterval(double, double):::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.defaultFunctionValueAccuracy == orig(this.defaultFunctionValueAccuracy)
this.resultComputed == orig(this.resultComputed)
this.result == orig(this.result)
this.functionValue == orig(this.functionValue)
this.f == orig(this.f)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.maximalIterationCount == orig(this.maximalIterationCount)
this.defaultAbsoluteAccuracy == orig(this.defaultAbsoluteAccuracy)
this.defaultRelativeAccuracy == orig(this.defaultRelativeAccuracy)
this.defaultMaximalIterationCount == orig(this.defaultMaximalIterationCount)
this.iterationCount == orig(this.iterationCount)
this.resultComputed == false
this.result == 0.0
this.iterationCount == 0
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator$EndTimeChecker:::OBJECT
this.endTime != 0
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator$EndTimeChecker.EndTimeChecker(double):::ENTER
endTime != 0
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator$EndTimeChecker.EndTimeChecker(double):::EXIT
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator$EndTimeChecker.eventOccurred(double, double[], boolean):::ENTER
t != 0
y != null
increasing == true
size(y[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator$EndTimeChecker.eventOccurred(double, double[], boolean):::EXIT
this.endTime == orig(this.endTime)
y[] == orig(y[])
return == 0
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator$EndTimeChecker.g(double, double[]):::ENTER
y != null
size(y[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator$EndTimeChecker.g(double, double[]):::EXIT
this.endTime == orig(this.endTime)
y[] == orig(y[])
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator:::OBJECT
this.stepHandlers != null
this.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.stepSize != 0
this.eventsHandlersManager != null
this.eventsHandlersManager.states != null
this.eventsHandlersManager.states[] elements != null
this.eventsHandlersManager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
this.eventsHandlersManager.states.getClass().getName() == java.util.ArrayList.class
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.name != null
this.maxEvaluations one of { 0, 2147483647 }
this.evaluations >= 0
size(this.eventsHandlersManager.states[]) one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.AbstractIntegrator(java.lang.String):::ENTER
name != null
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.AbstractIntegrator(java.lang.String):::EXIT
name.toString == orig(name.toString)
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.maxEvaluations == 2147483647
this.evaluations == 0
this.equations == null
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.addEndTimeChecker(double, double, org.apache.commons.math.ode.events.CombinedEventsManager):::ENTER
this.stepStart == 0.0
this.maxEvaluations == 2147483647
this.evaluations == 0
this.equations != null
startTime == 0.0
endTime != 0
manager != null
manager.states != null
manager.states[] elements != null
manager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
manager.states.getClass().getName() == java.util.ArrayList.class
manager.first == null
manager.initialized == false
size(manager.states[]) one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.addEndTimeChecker(double, double, org.apache.commons.math.ode.events.CombinedEventsManager):::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
manager.states == orig(manager.states)
manager.states[] == orig(manager.states[])
manager.states.getClass().getName() == orig(manager.states.getClass().getName())
manager.first == orig(manager.first)
manager.initialized == orig(manager.initialized)
this.stepStart == 0.0
this.maxEvaluations == 2147483647
this.evaluations == 0
this.equations != null
manager.states != null
manager.states[] elements != null
manager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
manager.states.getClass().getName() == java.util.ArrayList.class
manager.first == null
manager.initialized == false
return != null
return.states != null
return.states[] elements != null
return.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
return.states.getClass().getName() == java.util.ArrayList.class
return.first == null
return.initialized == false
size(manager.states[]) one of { 0, 1, 2 }
size(return.states[]) one of { 1, 2, 3 }
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.addEventHandler(org.apache.commons.math.ode.events.EventHandler, double, double, int):::ENTER
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.eventsHandlersManager.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState] }
this.maxEvaluations == 2147483647
this.evaluations == 0
this.equations == null
function != null
maxCheckInterval one of { 1.0, Infinity }
maxIterationCount == 1000
size(this.eventsHandlersManager.states[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.addEventHandler(org.apache.commons.math.ode.events.EventHandler, double, double, int):::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
size(this.eventsHandlersManager.states[])-1 == orig(size(this.eventsHandlersManager.states[]))
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.eventsHandlersManager.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.maxEvaluations == 2147483647
this.evaluations == 0
this.equations == null
size(this.eventsHandlersManager.states[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.addStepHandler(org.apache.commons.math.ode.sampling.StepHandler):::ENTER
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.maxEvaluations == 2147483647
this.evaluations == 0
this.equations == null
handler != null
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.addStepHandler(org.apache.commons.math.ode.sampling.StepHandler):::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.maxEvaluations == 2147483647
this.evaluations == 0
this.equations == null
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.clearEventHandlers():::ENTER
this.getClass().getName() == org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.class
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.eventsHandlersManager.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.name has only one value
this.name.toString == "classical Runge-Kutta"
this.maxEvaluations == 2147483647
this.equations != null
size(this.eventsHandlersManager.states[]) one of { 0, 2 }
size(this.eventsHandlersManager.states[])-1 != 0
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.clearEventHandlers():::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.name has only one value
this.name.toString == "classical Runge-Kutta"
this.maxEvaluations == 2147483647
this.equations != null
size(this.eventsHandlersManager.states[]) <= orig(size(this.eventsHandlersManager.states[]))
size(this.eventsHandlersManager.states[]) != orig(size(this.eventsHandlersManager.states[]))-1
size(this.eventsHandlersManager.states[])-1 <= orig(size(this.eventsHandlersManager.states[]))-1
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.computeDerivatives(double, double[], double[]):::ENTER
this.maxEvaluations == 2147483647
this.equations != null
y != null
yDot != null
size(y[]) one of { 1, 2, 4 }
size(yDot[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.computeDerivatives(double, double[], double[]):::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
y[] == orig(y[])
this.maxEvaluations == 2147483647
this.evaluations >= 1
this.equations != null
this.evaluations - orig(this.evaluations) - 1 == 0
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.getCurrentSignedStepsize():::ENTER
this.eventsHandlersManager.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.maxEvaluations == 2147483647
this.evaluations >= 1
this.equations != null
size(this.eventsHandlersManager.states[]) one of { 0, 2 }
size(this.eventsHandlersManager.states[])-1 != 0
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.getCurrentSignedStepsize():::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.eventsHandlersManager.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.maxEvaluations == 2147483647
this.evaluations >= 1
this.equations != null
return != 0
size(this.eventsHandlersManager.states[]) one of { 0, 2 }
size(this.eventsHandlersManager.states[])-1 != 0
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.getCurrentStepStart():::ENTER
this.eventsHandlersManager.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.maxEvaluations == 2147483647
this.evaluations >= 1
this.equations != null
size(this.eventsHandlersManager.states[]) one of { 0, 2 }
size(this.eventsHandlersManager.states[])-1 != 0
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.getCurrentStepStart():::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.eventsHandlersManager.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.maxEvaluations == 2147483647
this.evaluations >= 1
this.equations != null
size(this.eventsHandlersManager.states[]) one of { 0, 2 }
size(this.eventsHandlersManager.states[])-1 != 0
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.getEventHandlers():::ENTER
this.getClass().getName() == org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.class
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.eventsHandlersManager.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.name has only one value
this.name.toString == "classical Runge-Kutta"
this.maxEvaluations == 2147483647
size(this.eventsHandlersManager.states[]) one of { 0, 2 }
size(this.eventsHandlersManager.states[])-1 != 0
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.getEventHandlers():::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.eventsHandlersManager.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.name has only one value
this.name.toString == "classical Runge-Kutta"
this.maxEvaluations == 2147483647
return != null
return.getClass().getName() == java.util.Collections$UnmodifiableCollection.class
size(this.eventsHandlersManager.states[]) one of { 0, 2 }
size(this.eventsHandlersManager.states[])-1 != 0
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.getName():::ENTER
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.maxEvaluations == 2147483647
this.evaluations one of { 1001, 2002, 4004 }
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.getName():::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.maxEvaluations == 2147483647
this.evaluations one of { 1001, 2002, 4004 }
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.getStepHandlers():::ENTER
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.maxEvaluations == 2147483647
this.evaluations one of { 1001, 2002, 13340 }
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.getStepHandlers():::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.maxEvaluations == 2147483647
this.evaluations one of { 1001, 2002, 13340 }
return.getClass().getName() == java.util.Collections$UnmodifiableCollection.class
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.requiresDenseOutput():::ENTER
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.maxEvaluations == 2147483647
this.evaluations == 0
this.equations != null
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.requiresDenseOutput():::EXIT125
this.eventsHandlersManager.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
return == true
size(this.eventsHandlersManager.states[]) one of { 0, 2 }
size(this.eventsHandlersManager.states[])-1 != 0
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.requiresDenseOutput():::EXIT125;condition="return == true"
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.requiresDenseOutput():::EXIT128
this.eventsHandlersManager.states[] elements has only one value
this.eventsHandlersManager.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState] }
return == false
size(this.eventsHandlersManager.states[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.requiresDenseOutput():::EXIT128;condition="not(return == true)"
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.requiresDenseOutput():::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.maxEvaluations == 2147483647
this.evaluations == 0
this.equations != null
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.requiresDenseOutput():::EXIT;condition="return == true"
this.eventsHandlersManager.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
return == true
size(this.eventsHandlersManager.states[]) one of { 0, 2 }
size(this.eventsHandlersManager.states[])-1 != 0
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.requiresDenseOutput():::EXIT;condition="not(return == true)"
this.eventsHandlersManager.states[] elements has only one value
this.eventsHandlersManager.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState] }
return == false
size(this.eventsHandlersManager.states[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.resetEvaluations():::ENTER
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.maxEvaluations == 2147483647
this.evaluations == 0
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.resetEvaluations():::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.maxEvaluations == 2147483647
this.evaluations == 0
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.sanityChecks(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double, double[], double, double[]):::ENTER
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.maxEvaluations == 2147483647
this.evaluations == 0
this.equations == null
ode != null
t0 == 0.0
y0 != null
t != 0
y != null
y[] elements one of { 0.0, Double.NaN }
y[] sorted by ==
size(y0[]) one of { 1, 2, 4 }
size(y[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.sanityChecks(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double, double[], double, double[]):::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
y0[] == orig(y0[])
y[] == orig(y[])
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.maxEvaluations == 2147483647
this.evaluations == 0
this.equations == null
y[] elements one of { 0.0, Double.NaN }
y[] sorted by ==
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.setEquations(org.apache.commons.math.ode.FirstOrderDifferentialEquations):::ENTER
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.maxEvaluations == 2147483647
this.evaluations == 0
this.equations == null
equations != null
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.setEquations(org.apache.commons.math.ode.FirstOrderDifferentialEquations):::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.maxEvaluations == 2147483647
this.evaluations == 0
this.equations != null
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.setMaxEvaluations(int):::ENTER
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.maxEvaluations == 0
this.evaluations == 0
this.equations == null
maxEvaluations == -1
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.setMaxEvaluations(int):::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.maxEvaluations == 2147483647
this.evaluations == 0
this.equations == null
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel:::CLASS
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel:::OBJECT
this.initialTime one of { 0.0, Double.NaN }
this.index >= 0
this.steps[] elements != null
this.steps.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel.ContinuousOutputModel():::EXIT
this.initialTime == Double.NaN
this.finalTime == Double.NaN
this.forward == true
this.index == 0
this.steps[] == []
this.steps[].getClass().getName() == []
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel.getInterpolatedState():::ENTER
this.initialTime == 0.0
this.finalTime one of { 4.0000000000000036, 20.0 }
this.forward == true
size(this.steps[]) one of { 1000, 3334 }
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel.getInterpolatedState():::EXIT
this.initialTime == orig(this.initialTime)
this.finalTime == orig(this.finalTime)
this.forward == orig(this.forward)
this.index == orig(this.index)
this.steps == orig(this.steps)
this.steps[] == orig(this.steps[])
this.steps.getClass().getName() == orig(this.steps.getClass().getName())
this.initialTime == 0.0
this.finalTime one of { 4.0000000000000036, 20.0 }
this.forward == true
return[] elements != 0
size(this.steps[]) one of { 1000, 3334 }
size(return[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::ENTER
this.finalTime == Double.NaN
this.forward == true
this.index == 0
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::EXIT
this.forward == orig(this.forward)
this.steps == orig(this.steps)
this.steps.getClass().getName() == orig(this.steps.getClass().getName())
size(this.steps[])-1 == orig(size(this.steps[]))
this.initialTime == 0.0
this.finalTime one of { 4.0000000000000036, 20.0, Double.NaN }
this.forward == true
this.index one of { 0, 999, 3333 }
size(this.steps[]) >= 1
this.finalTime != orig(this.finalTime)
this.index >= orig(this.index)
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel.locatePoint(double, org.apache.commons.math.ode.sampling.StepInterpolator):::ENTER
this.initialTime == 0.0
this.finalTime one of { 4.0000000000000036, 20.0 }
this.forward == true
size(this.steps[]) one of { 1000, 3334 }
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel.locatePoint(double, org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT360
return == -1
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel.locatePoint(double, org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT362
return == 1
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel.locatePoint(double, org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT364
return == 0
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel.locatePoint(double, org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT
this.initialTime == orig(this.initialTime)
this.finalTime == orig(this.finalTime)
this.forward == orig(this.forward)
this.index == orig(this.index)
this.steps == orig(this.steps)
this.steps[] == orig(this.steps[])
this.steps.getClass().getName() == orig(this.steps.getClass().getName())
this.initialTime == 0.0
this.finalTime one of { 4.0000000000000036, 20.0 }
this.forward == true
return one of { -1, 0, 1 }
size(this.steps[]) one of { 1000, 3334 }
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel.requiresDenseOutput():::ENTER
this.initialTime == Double.NaN
this.finalTime == Double.NaN
this.forward == true
this.index == 0
this.steps[] == []
this.steps[].getClass().getName() == []
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel.requiresDenseOutput():::EXIT
this.forward == orig(this.forward)
this.index == orig(this.index)
this.steps == orig(this.steps)
this.steps[] == orig(this.steps[])
this.steps.getClass().getName() == orig(this.steps.getClass().getName())
this.initialTime == Double.NaN
this.finalTime == Double.NaN
this.forward == true
this.index == 0
this.steps[] == []
this.steps[].getClass().getName() == []
return == true
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel.requiresDenseOutput():::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel.reset():::ENTER
this.finalTime one of { 0.0, Double.NaN }
this.index == 0
this.steps[] == []
this.steps[].getClass().getName() == []
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel.reset():::EXIT
this.index == orig(this.index)
this.steps == orig(this.steps)
this.steps[] == orig(this.steps[])
this.steps.getClass().getName() == orig(this.steps.getClass().getName())
this.initialTime == Double.NaN
this.finalTime == Double.NaN
this.forward == true
this.index == 0
this.steps[] == []
this.steps[].getClass().getName() == []
this.initialTime != orig(this.initialTime)
this.finalTime != orig(this.finalTime)
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel.setInterpolatedTime(double):::ENTER
this.initialTime == 0.0
this.finalTime one of { 4.0000000000000036, 20.0 }
this.forward == true
size(this.steps[]) one of { 1000, 3334 }
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel.setInterpolatedTime(double):::EXIT273
this.finalTime == 4.0000000000000036
this.index == 999
this.steps[].getClass().getName() one of { [org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator, org.apache.commons.math.ode.nonstiff.EulerStepInterpolator], [org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator] }
orig(this.index) one of { 156, 267 }
orig(time) == 3.996157109047002
size(this.steps[]) == 1000
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel.setInterpolatedTime(double):::EXIT291
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel.setInterpolatedTime(double):::EXIT338
this.index != orig(this.index)
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel.setInterpolatedTime(double):::EXIT
this.initialTime == orig(this.initialTime)
this.finalTime == orig(this.finalTime)
this.forward == orig(this.forward)
this.steps == orig(this.steps)
this.steps[] == orig(this.steps[])
this.steps.getClass().getName() == orig(this.steps.getClass().getName())
this.initialTime == 0.0
this.finalTime one of { 4.0000000000000036, 20.0 }
this.forward == true
size(this.steps[]) one of { 1000, 3334 }
===========================================================================
org.apache.commons.math.ode.FirstOrderConverter:::OBJECT
this.equations.getClass().getName() == org.apache.commons.math.ode.FirstOrderConverterTest$Equations.class
this.dimension == 1
size(this.z[]) == 1
size(this.zDot[]) == 1
size(this.zDDot[]) == 1
===========================================================================
org.apache.commons.math.ode.FirstOrderConverter.FirstOrderConverter(org.apache.commons.math.ode.SecondOrderDifferentialEquations):::ENTER
equations.getClass().getName() == org.apache.commons.math.ode.FirstOrderConverterTest$Equations.class
===========================================================================
org.apache.commons.math.ode.FirstOrderConverter.FirstOrderConverter(org.apache.commons.math.ode.SecondOrderDifferentialEquations):::EXIT
this.z[] == [0.0]
this.z[] elements == 0.0
this.zDot[] == [0.0]
this.zDot[] elements == 0.0
this.zDDot[] == [0.0]
this.zDDot[] elements == 0.0
===========================================================================
org.apache.commons.math.ode.FirstOrderConverter.computeDerivatives(double, double[], double[]):::ENTER
size(y[]) == 2
size(yDot[]) == 2
===========================================================================
org.apache.commons.math.ode.FirstOrderConverter.computeDerivatives(double, double[], double[]):::EXIT
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.dimension == orig(this.dimension)
this.z == orig(this.z)
this.zDot == orig(this.zDot)
this.zDDot == orig(this.zDDot)
y[] == orig(y[])
size(this.z[]) == orig(size(this.z[]))
size(this.zDot[]) == orig(size(this.zDot[]))
size(this.zDDot[]) == orig(size(this.zDDot[]))
===========================================================================
org.apache.commons.math.ode.FirstOrderConverter.getDimension():::ENTER
this.z[] == [0.0]
this.z[] elements == 0.0
this.zDot[] == [0.0]
this.zDot[] elements == 0.0
this.zDDot[] == [0.0]
this.zDDot[] elements == 0.0
===========================================================================
org.apache.commons.math.ode.FirstOrderConverter.getDimension():::EXIT
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.dimension == orig(this.dimension)
this.z == orig(this.z)
this.z[] == orig(this.z[])
this.zDot == orig(this.zDot)
this.zDot[] == orig(this.zDot[])
this.zDDot == orig(this.zDDot)
this.zDDot[] == orig(this.zDDot[])
this.z[] == [0.0]
this.z[] elements == 0.0
this.zDot[] == [0.0]
this.zDot[] elements == 0.0
this.zDDot[] == [0.0]
this.zDDot[] elements == 0.0
return == 2
===========================================================================
org.apache.commons.math.ode.FirstOrderConverterTest$Equations:::OBJECT
this.n == 1
this.omega2 == 16.0
===========================================================================
org.apache.commons.math.ode.FirstOrderConverterTest$Equations.Equations(int, double):::ENTER
n == 1
omega == 4.0
===========================================================================
org.apache.commons.math.ode.FirstOrderConverterTest$Equations.Equations(int, double):::EXIT
===========================================================================
org.apache.commons.math.ode.FirstOrderConverterTest$Equations.computeSecondDerivatives(double, double[], double[], double[]):::ENTER
size(y[]) == 1
size(yDot[]) == 1
size(yDDot[]) == 1
===========================================================================
org.apache.commons.math.ode.FirstOrderConverterTest$Equations.computeSecondDerivatives(double, double[], double[], double[]):::EXIT
this.n == orig(this.n)
this.omega2 == orig(this.omega2)
y[] == orig(y[])
yDot[] == orig(yDot[])
===========================================================================
org.apache.commons.math.ode.FirstOrderConverterTest$Equations.getDimension():::ENTER
===========================================================================
org.apache.commons.math.ode.FirstOrderConverterTest$Equations.getDimension():::EXIT
this.n == orig(this.n)
this.omega2 == orig(this.omega2)
return == 1
===========================================================================
org.apache.commons.math.ode.FirstOrderConverterTest:::OBJECT
===========================================================================
org.apache.commons.math.ode.FirstOrderConverterTest.FirstOrderConverterTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.ode.FirstOrderConverterTest.FirstOrderConverterTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.math.ode.FirstOrderConverterTest.integrateWithSpecifiedStep(double, double, double, double):::ENTER
omega == 4.0
t0 == 0.0
t == 1.0
===========================================================================
org.apache.commons.math.ode.FirstOrderConverterTest.integrateWithSpecifiedStep(double, double, double, double):::EXIT
===========================================================================
org.apache.commons.math.ode.FirstOrderConverterTest.testBigStep():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.FirstOrderConverterTest.testBigStep():::EXIT
===========================================================================
org.apache.commons.math.ode.FirstOrderConverterTest.testDecreasingSteps():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.FirstOrderConverterTest.testDecreasingSteps():::EXIT
===========================================================================
org.apache.commons.math.ode.FirstOrderConverterTest.testSmallStep():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.FirstOrderConverterTest.testSmallStep():::EXIT
===========================================================================
org.apache.commons.math.ode.IntegratorException:::CLASS
===========================================================================
org.apache.commons.math.ode.IntegratorException:::OBJECT
this.pattern.toString one of { "dimensions mismatch: ODE problem has dimension {0}, final state vector has dimension {1}", "dimensions mismatch: ODE problem has dimension {0}, initial state vector has dimension {1}", "too small integration interval: length = {0}" }
this.arguments.getClass().getName() == java.lang.Object[].class
this.arguments[].getClass().getName() one of { [java.lang.Double], [java.lang.Integer, java.lang.Integer] }
size(this.arguments[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.IntegratorException.IntegratorException(java.lang.String, java.lang.Object[]):::ENTER
specifier.toString one of { "dimensions mismatch: ODE problem has dimension {0}, final state vector has dimension {1}", "dimensions mismatch: ODE problem has dimension {0}, initial state vector has dimension {1}", "too small integration interval: length = {0}" }
parts.getClass().getName() == java.lang.Object[].class
size(parts[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.IntegratorException.IntegratorException(java.lang.String, java.lang.Object[]):::EXIT
specifier.toString == orig(specifier.toString)
parts[] == orig(parts[])
specifier.toString one of { "dimensions mismatch: ODE problem has dimension {0}, final state vector has dimension {1}", "dimensions mismatch: ODE problem has dimension {0}, initial state vector has dimension {1}", "too small integration interval: length = {0}" }
===========================================================================
org.apache.commons.math.ode.TestProblem1:::CLASS
===========================================================================
org.apache.commons.math.ode.TestProblem1:::OBJECT
this.y[] elements >= 0.0
this.y[] sorted by >=
this.n == 2
this.calls >= 0
this.t0 == 0.0
this.y0[] == [1.0, 0.1]
this.y0[] elements one of { 0.1, 1.0 }
this.y0[] sorted by >
this.t1 one of { -4.0, 4.0 }
this.errorScale[] == [1.0, 1.0]
this.errorScale[] elements == 1.0
size(this.y[]) == 2
size(this.y0[]) == 2
size(this.errorScale[]) == 2
===========================================================================
org.apache.commons.math.ode.TestProblem1.TestProblem1():::EXIT
this.y[] == [0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
this.t1 == 4.0
===========================================================================
org.apache.commons.math.ode.TestProblem1.TestProblem1(org.apache.commons.math.ode.TestProblem1):::ENTER
problem has only one value
problem.y has only one value
problem.y[] == [0.0, 0.0]
problem.y[] elements == 0.0
problem.n == 2
problem.calls == 0
problem.t0 == 0.0
problem.y0 has only one value
problem.y0[] == [1.0, 0.1]
problem.y0[] elements one of { 0.1, 1.0 }
problem.y0[] sorted by >
problem.t1 == 4.0
problem.errorScale has only one value
problem.errorScale[] == [1.0, 1.0]
problem.errorScale[] elements == 1.0
size(problem.y[]) == 2
size(problem.y0[]) == 2
size(problem.errorScale[]) == 2
===========================================================================
org.apache.commons.math.ode.TestProblem1.TestProblem1(org.apache.commons.math.ode.TestProblem1):::EXIT
problem.y == orig(problem.y)
problem.y[] == orig(problem.y[])
problem.n == orig(problem.n)
problem.calls == orig(problem.calls)
problem.t0 == orig(problem.t0)
problem.y0 == orig(problem.y0)
problem.y0[] == orig(problem.y0[])
problem.t1 == orig(problem.t1)
problem.errorScale == orig(problem.errorScale)
problem.errorScale[] == orig(problem.errorScale[])
this.y[] == [0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
this.t1 == 4.0
problem.y has only one value
problem.y[] == [0.0, 0.0]
problem.y[] elements == 0.0
problem.n == 2
problem.calls == 0
problem.t0 == 0.0
problem.y0 has only one value
problem.y0[] == [1.0, 0.1]
problem.y0[] elements one of { 0.1, 1.0 }
problem.y0[] sorted by >
problem.t1 == 4.0
problem.errorScale has only one value
problem.errorScale[] == [1.0, 1.0]
problem.errorScale[] elements == 1.0
size(problem.y[]) == 2
size(problem.y0[]) == 2
size(problem.errorScale[]) == 2
===========================================================================
org.apache.commons.math.ode.TestProblem1.computeTheoreticalState(double):::ENTER
this.calls >= 1
===========================================================================
org.apache.commons.math.ode.TestProblem1.computeTheoreticalState(double):::EXIT
this.y == orig(this.y)
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
size(this.y[]) == orig(size(this.y[]))
this.y[] sorted by >
this.calls >= 1
return[] sorted by >
size(return[]) == 2
===========================================================================
org.apache.commons.math.ode.TestProblem1.copy():::ENTER
this has only one value
this.y has only one value
this.y[] == [0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
this.y0 has only one value
this.t1 == 4.0
this.errorScale has only one value
===========================================================================
org.apache.commons.math.ode.TestProblem1.copy():::EXIT
this.y == orig(this.y)
this.y[] == orig(this.y[])
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
this.y has only one value
this.y[] == [0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
this.y0 has only one value
this.t1 == 4.0
this.errorScale has only one value
return.y[] == [0.0, 0.0]
return.y[] elements == 0.0
return.n == 2
return.calls == 0
return.t0 == 0.0
return.y0[] == [1.0, 0.1]
return.y0[] elements one of { 0.1, 1.0 }
return.y0[] sorted by >
return.t1 == 4.0
return.errorScale[] == [1.0, 1.0]
return.errorScale[] elements == 1.0
size(return.y[]) == 2
size(return.y0[]) == 2
size(return.errorScale[]) == 2
===========================================================================
org.apache.commons.math.ode.TestProblem1.doComputeDerivatives(double, double[], double[]):::ENTER
this.calls >= 1
y[] sorted by >
yDot[] sorted by <=
size(y[]) == 2
size(yDot[]) == 2
===========================================================================
org.apache.commons.math.ode.TestProblem1.doComputeDerivatives(double, double[], double[]):::EXIT
this.y == orig(this.y)
this.y[] == orig(this.y[])
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
y[] == orig(y[])
this.calls >= 1
y[] sorted by >
yDot[] sorted by <
===========================================================================
org.apache.commons.math.ode.TestProblem2:::CLASS
===========================================================================
org.apache.commons.math.ode.TestProblem2:::OBJECT
this.n == size(this.y[])
size(this.y[]) == size(this.y0[])
this.n == 1
this.calls >= 0
this.t0 == 0.0
this.y0[] == [0.0]
this.y0[] elements == 0.0
this.t1 == 1.0
this.errorScale[] == [1.0]
this.errorScale[] elements == 1.0
size(this.y[]) == 1
size(this.errorScale[]) == 1
===========================================================================
org.apache.commons.math.ode.TestProblem2.TestProblem2():::EXIT
this.y has only one value
this.y[] == [0.0]
this.y[] elements == 0.0
this.calls == 0
this.y0 has only one value
this.errorScale has only one value
===========================================================================
org.apache.commons.math.ode.TestProblem2.TestProblem2(org.apache.commons.math.ode.TestProblem2):::ENTER
problem has only one value
problem.y has only one value
problem.y[] == [0.0]
problem.y[] elements == 0.0
problem.n == 1
problem.calls == 0
problem.t0 == 0.0
problem.y0 has only one value
problem.y0[] == [0.0]
problem.y0[] elements == 0.0
problem.t1 == 1.0
problem.errorScale has only one value
problem.errorScale[] == [1.0]
problem.errorScale[] elements == 1.0
size(problem.y[]) == 1
size(problem.y0[]) == 1
size(problem.errorScale[]) == 1
===========================================================================
org.apache.commons.math.ode.TestProblem2.TestProblem2(org.apache.commons.math.ode.TestProblem2):::EXIT
problem.y == orig(problem.y)
problem.y[] == orig(problem.y[])
problem.n == orig(problem.n)
problem.calls == orig(problem.calls)
problem.t0 == orig(problem.t0)
problem.y0 == orig(problem.y0)
problem.y0[] == orig(problem.y0[])
problem.t1 == orig(problem.t1)
problem.errorScale == orig(problem.errorScale)
problem.errorScale[] == orig(problem.errorScale[])
this.y[] == [0.0]
this.y[] elements == 0.0
this.calls == 0
problem.y has only one value
problem.y[] == [0.0]
problem.y[] elements == 0.0
problem.n == 1
problem.calls == 0
problem.t0 == 0.0
problem.y0 has only one value
problem.y0[] == [0.0]
problem.y0[] elements == 0.0
problem.t1 == 1.0
problem.errorScale has only one value
problem.errorScale[] == [1.0]
problem.errorScale[] elements == 1.0
size(problem.y[]) == 1
size(problem.y0[]) == 1
size(problem.errorScale[]) == 1
===========================================================================
org.apache.commons.math.ode.TestProblem2.computeTheoreticalState(double):::ENTER
this.calls >= 1
===========================================================================
org.apache.commons.math.ode.TestProblem2.computeTheoreticalState(double):::EXIT
this.y == orig(this.y)
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
size(this.y[]) == orig(size(this.y[]))
size(this.y[]) == orig(size(this.y0[]))
this.calls >= 1
size(return[]) == 1
===========================================================================
org.apache.commons.math.ode.TestProblem2.copy():::ENTER
this has only one value
this.y has only one value
this.y[] == [0.0]
this.y[] elements == 0.0
this.calls == 0
this.y0 has only one value
this.errorScale has only one value
===========================================================================
org.apache.commons.math.ode.TestProblem2.copy():::EXIT
this.y == orig(this.y)
this.y[] == orig(this.y[])
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
size(this.y[]) == orig(size(this.y0[]))
this.y has only one value
this.y[] == [0.0]
this.y[] elements == 0.0
this.calls == 0
this.y0 has only one value
this.errorScale has only one value
return.y[] == [0.0]
return.y[] elements == 0.0
return.n == 1
return.calls == 0
return.t0 == 0.0
return.y0[] == [0.0]
return.y0[] elements == 0.0
return.t1 == 1.0
return.errorScale[] == [1.0]
return.errorScale[] elements == 1.0
size(return.y[]) == 1
size(return.y0[]) == 1
size(return.errorScale[]) == 1
===========================================================================
org.apache.commons.math.ode.TestProblem2.doComputeDerivatives(double, double[], double[]):::ENTER
this.calls >= 1
size(y[]) == 1
size(yDot[]) == 1
===========================================================================
org.apache.commons.math.ode.TestProblem2.doComputeDerivatives(double, double[], double[]):::EXIT
this.y == orig(this.y)
this.y[] == orig(this.y[])
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
y[] == orig(y[])
size(this.y[]) == orig(size(this.y0[]))
this.calls >= 1
yDot[] >= orig(yDot[]) (elementwise)
===========================================================================
org.apache.commons.math.ode.TestProblem3:::CLASS
===========================================================================
org.apache.commons.math.ode.TestProblem3:::OBJECT
this.e one of { 0.1, 0.9 }
this.y != null
this.n == 4
this.calls >= 0
this.t0 == 0.0
this.y0 != null
this.y0[] one of { [0.09999999999999998, 0.0, 0.0, 4.358898943540674], [0.9, 0.0, 0.0, 1.1055415967851334] }
this.y0[] elements >= 0.0
this.t1 == 20.0
this.errorScale != null
this.errorScale[] == [1.0, 1.0, 1.0, 1.0]
this.errorScale[] elements == 1.0
size(this.y[]) == 4
size(this.y0[]) == 4
size(this.errorScale[]) == 4
===========================================================================
org.apache.commons.math.ode.TestProblem3.TestProblem3():::EXIT
this.e == 0.1
this.y[] == [0.0, 0.0, 0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
this.y0[] == [0.9, 0.0, 0.0, 1.1055415967851334]
this.y0[] elements one of { 0.0, 0.9, 1.1055415967851334 }
===========================================================================
org.apache.commons.math.ode.TestProblem3.TestProblem3(double):::ENTER
e one of { 0.1, 0.9 }
===========================================================================
org.apache.commons.math.ode.TestProblem3.TestProblem3(double):::EXIT
this.y[] == [0.0, 0.0, 0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
===========================================================================
org.apache.commons.math.ode.TestProblem3.TestProblem3(org.apache.commons.math.ode.TestProblem3):::ENTER
problem has only one value
problem != null
problem.e == 0.1
problem.y has only one value
problem.y != null
problem.y[] == [0.0, 0.0, 0.0, 0.0]
problem.y[] elements == 0.0
problem.n == 4
problem.calls == 0
problem.t0 == 0.0
problem.y0 has only one value
problem.y0 != null
problem.y0[] == [0.9, 0.0, 0.0, 1.1055415967851334]
problem.y0[] elements one of { 0.0, 0.9, 1.1055415967851334 }
problem.t1 == 20.0
problem.errorScale has only one value
problem.errorScale != null
problem.errorScale[] == [1.0, 1.0, 1.0, 1.0]
problem.errorScale[] elements == 1.0
size(problem.y[]) == 4
size(problem.y0[]) == 4
size(problem.errorScale[]) == 4
===========================================================================
org.apache.commons.math.ode.TestProblem3.TestProblem3(org.apache.commons.math.ode.TestProblem3):::EXIT
problem.e == orig(problem.e)
problem.y == orig(problem.y)
problem.y[] == orig(problem.y[])
problem.n == orig(problem.n)
problem.calls == orig(problem.calls)
problem.t0 == orig(problem.t0)
problem.y0 == orig(problem.y0)
problem.y0[] == orig(problem.y0[])
problem.t1 == orig(problem.t1)
problem.errorScale == orig(problem.errorScale)
problem.errorScale[] == orig(problem.errorScale[])
this.e == 0.1
this.y[] == [0.0, 0.0, 0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
this.y0[] == [0.9, 0.0, 0.0, 1.1055415967851334]
this.y0[] elements one of { 0.0, 0.9, 1.1055415967851334 }
problem.e == 0.1
problem.y has only one value
problem.y != null
problem.y[] == [0.0, 0.0, 0.0, 0.0]
problem.y[] elements == 0.0
problem.n == 4
problem.calls == 0
problem.t0 == 0.0
problem.y0 has only one value
problem.y0 != null
problem.y0[] == [0.9, 0.0, 0.0, 1.1055415967851334]
problem.y0[] elements one of { 0.0, 0.9, 1.1055415967851334 }
problem.t1 == 20.0
problem.errorScale has only one value
problem.errorScale != null
problem.errorScale[] == [1.0, 1.0, 1.0, 1.0]
problem.errorScale[] elements == 1.0
size(problem.y[]) == 4
size(problem.y0[]) == 4
size(problem.errorScale[]) == 4
===========================================================================
org.apache.commons.math.ode.TestProblem3.computeTheoreticalState(double):::ENTER
this.calls >= 1
===========================================================================
org.apache.commons.math.ode.TestProblem3.computeTheoreticalState(double):::EXIT
this.e == orig(this.e)
this.y == orig(this.y)
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
size(this.y[]) == orig(size(this.y[]))
this.calls >= 1
return != null
size(return[]) == 4
===========================================================================
org.apache.commons.math.ode.TestProblem3.copy():::ENTER
this has only one value
this.e == 0.1
this.y has only one value
this.y[] == [0.0, 0.0, 0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
this.y0 has only one value
this.y0[] == [0.9, 0.0, 0.0, 1.1055415967851334]
this.y0[] elements one of { 0.0, 0.9, 1.1055415967851334 }
this.errorScale has only one value
===========================================================================
org.apache.commons.math.ode.TestProblem3.copy():::EXIT
this.e == orig(this.e)
this.y == orig(this.y)
this.y[] == orig(this.y[])
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
this.e == 0.1
this.y has only one value
this.y[] == [0.0, 0.0, 0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
this.y0 has only one value
this.y0[] == [0.9, 0.0, 0.0, 1.1055415967851334]
this.y0[] elements one of { 0.0, 0.9, 1.1055415967851334 }
this.errorScale has only one value
return != null
return.e == 0.1
return.y != null
return.y[] == [0.0, 0.0, 0.0, 0.0]
return.y[] elements == 0.0
return.n == 4
return.calls == 0
return.t0 == 0.0
return.y0 != null
return.y0[] == [0.9, 0.0, 0.0, 1.1055415967851334]
return.y0[] elements one of { 0.0, 0.9, 1.1055415967851334 }
return.t1 == 20.0
return.errorScale != null
return.errorScale[] == [1.0, 1.0, 1.0, 1.0]
return.errorScale[] elements == 1.0
size(return.y[]) == 4
size(return.y0[]) == 4
size(return.errorScale[]) == 4
===========================================================================
org.apache.commons.math.ode.TestProblem3.doComputeDerivatives(double, double[], double[]):::ENTER
this.calls >= 1
y != null
yDot != null
size(y[]) == 4
size(yDot[]) == 4
===========================================================================
org.apache.commons.math.ode.TestProblem3.doComputeDerivatives(double, double[], double[]):::EXIT
this.e == orig(this.e)
this.y == orig(this.y)
this.y[] == orig(this.y[])
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
y[] == orig(y[])
this.calls >= 1
===========================================================================
org.apache.commons.math.ode.TestProblem4$Bounce:::CLASS
===========================================================================
org.apache.commons.math.ode.TestProblem4$Bounce:::OBJECT
this.sign one of { -1, 1 }
===========================================================================
org.apache.commons.math.ode.TestProblem4$Bounce.Bounce():::EXIT
this.sign == 1
===========================================================================
org.apache.commons.math.ode.TestProblem4$Bounce.eventOccurred(double, double[], boolean):::ENTER
y[] sorted by >
size(y[]) == 2
===========================================================================
org.apache.commons.math.ode.TestProblem4$Bounce.eventOccurred(double, double[], boolean):::EXIT
y[] == orig(y[])
y[] sorted by >
return == 1
this.sign != orig(this.sign)
===========================================================================
org.apache.commons.math.ode.TestProblem4$Bounce.g(double, double[]):::ENTER
size(y[]) == 2
===========================================================================
org.apache.commons.math.ode.TestProblem4$Bounce.g(double, double[]):::EXIT
this.sign == orig(this.sign)
y[] == orig(y[])
===========================================================================
org.apache.commons.math.ode.TestProblem4$Bounce.resetState(double, double[]):::ENTER
y[] sorted by >
size(y[]) == 2
===========================================================================
org.apache.commons.math.ode.TestProblem4$Bounce.resetState(double, double[]):::EXIT
this.sign == orig(this.sign)
y[] sorted by <
y[] + orig(y[]) == 0
===========================================================================
org.apache.commons.math.ode.TestProblem4$Stop:::CLASS
===========================================================================
org.apache.commons.math.ode.TestProblem4$Stop:::OBJECT
===========================================================================
org.apache.commons.math.ode.TestProblem4$Stop.Stop():::EXIT
===========================================================================
org.apache.commons.math.ode.TestProblem4$Stop.eventOccurred(double, double[], boolean):::ENTER
t == 12.0
increasing == true
size(y[]) == 2
===========================================================================
org.apache.commons.math.ode.TestProblem4$Stop.eventOccurred(double, double[], boolean):::EXIT
y[] == orig(y[])
return == 0
===========================================================================
org.apache.commons.math.ode.TestProblem4$Stop.g(double, double[]):::ENTER
size(y[]) == 2
===========================================================================
org.apache.commons.math.ode.TestProblem4$Stop.g(double, double[]):::EXIT
y[] == orig(y[])
===========================================================================
org.apache.commons.math.ode.TestProblem4:::CLASS
===========================================================================
org.apache.commons.math.ode.TestProblem4:::OBJECT
this.n == size(this.y[])
size(this.y[]) == size(this.y0[])
this.a == 1.2
this.n == 2
this.calls >= 0
this.t0 == 0.0
this.y0[] == [0.9320390859672263, 0.3623577544766736]
this.y0[] elements one of { 0.3623577544766736, 0.9320390859672263 }
this.y0[] sorted by >
this.t1 == 15.0
this.errorScale[] == [1.0, 0.0]
this.errorScale[] elements one of { 0.0, 1.0 }
this.errorScale[] sorted by >
size(this.y[]) == 2
size(this.errorScale[]) == 2
===========================================================================
org.apache.commons.math.ode.TestProblem4.TestProblem4():::EXIT
this.y has only one value
this.y[] == [0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
this.y0 has only one value
this.errorScale has only one value
===========================================================================
org.apache.commons.math.ode.TestProblem4.TestProblem4(org.apache.commons.math.ode.TestProblem4):::ENTER
problem has only one value
problem.a == 1.2
problem.y has only one value
problem.y[] == [0.0, 0.0]
problem.y[] elements == 0.0
problem.n == 2
problem.calls == 0
problem.t0 == 0.0
problem.y0 has only one value
problem.y0[] == [0.9320390859672263, 0.3623577544766736]
problem.y0[] elements one of { 0.3623577544766736, 0.9320390859672263 }
problem.y0[] sorted by >
problem.t1 == 15.0
problem.errorScale has only one value
problem.errorScale[] == [1.0, 0.0]
problem.errorScale[] elements one of { 0.0, 1.0 }
problem.errorScale[] sorted by >
size(problem.y[]) == 2
size(problem.y0[]) == 2
size(problem.errorScale[]) == 2
===========================================================================
org.apache.commons.math.ode.TestProblem4.TestProblem4(org.apache.commons.math.ode.TestProblem4):::EXIT
problem.a == orig(problem.a)
problem.y == orig(problem.y)
problem.y[] == orig(problem.y[])
problem.n == orig(problem.n)
problem.calls == orig(problem.calls)
problem.t0 == orig(problem.t0)
problem.y0 == orig(problem.y0)
problem.y0[] == orig(problem.y0[])
problem.t1 == orig(problem.t1)
problem.errorScale == orig(problem.errorScale)
problem.errorScale[] == orig(problem.errorScale[])
this.y[] == [0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
problem.a == 1.2
problem.y has only one value
problem.y[] == [0.0, 0.0]
problem.y[] elements == 0.0
problem.n == 2
problem.calls == 0
problem.t0 == 0.0
problem.y0 has only one value
problem.y0[] == [0.9320390859672263, 0.3623577544766736]
problem.y0[] elements one of { 0.3623577544766736, 0.9320390859672263 }
problem.y0[] sorted by >
problem.t1 == 15.0
problem.errorScale has only one value
problem.errorScale[] == [1.0, 0.0]
problem.errorScale[] elements one of { 0.0, 1.0 }
problem.errorScale[] sorted by >
size(problem.y[]) == 2
size(problem.y0[]) == 2
size(problem.errorScale[]) == 2
===========================================================================
org.apache.commons.math.ode.TestProblem4.computeTheoreticalState(double):::ENTER
this.calls >= 1
===========================================================================
org.apache.commons.math.ode.TestProblem4.computeTheoreticalState(double):::EXIT
this.a == orig(this.a)
this.y == orig(this.y)
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
size(this.y[]) == orig(size(this.y[]))
size(this.y[]) == orig(size(this.y0[]))
this.y[] elements != 0
this.calls >= 1
return[] elements != 0
size(return[]) == 2
===========================================================================
org.apache.commons.math.ode.TestProblem4.copy():::ENTER
this has only one value
this.y has only one value
this.y[] == [0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
this.y0 has only one value
this.errorScale has only one value
===========================================================================
org.apache.commons.math.ode.TestProblem4.copy():::EXIT
this.a == orig(this.a)
this.y == orig(this.y)
this.y[] == orig(this.y[])
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
size(this.y[]) == orig(size(this.y0[]))
this.y has only one value
this.y[] == [0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
this.y0 has only one value
this.errorScale has only one value
return.a == 1.2
return.y[] == [0.0, 0.0]
return.y[] elements == 0.0
return.n == 2
return.calls == 0
return.t0 == 0.0
return.y0[] == [0.9320390859672263, 0.3623577544766736]
return.y0[] elements one of { 0.3623577544766736, 0.9320390859672263 }
return.y0[] sorted by >
return.t1 == 15.0
return.errorScale[] == [1.0, 0.0]
return.errorScale[] elements one of { 0.0, 1.0 }
return.errorScale[] sorted by >
size(return.y[]) == 2
size(return.y0[]) == 2
size(return.errorScale[]) == 2
===========================================================================
org.apache.commons.math.ode.TestProblem4.doComputeDerivatives(double, double[], double[]):::ENTER
this.calls >= 1
size(y[]) == 2
size(yDot[]) == 2
===========================================================================
org.apache.commons.math.ode.TestProblem4.doComputeDerivatives(double, double[], double[]):::EXIT
this.a == orig(this.a)
this.y == orig(this.y)
this.y[] == orig(this.y[])
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
y[] == orig(y[])
size(this.y[]) == orig(size(this.y0[]))
this.calls >= 1
===========================================================================
org.apache.commons.math.ode.TestProblem4.getEventsHandlers():::ENTER
this.y[] == [0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
===========================================================================
org.apache.commons.math.ode.TestProblem4.getEventsHandlers():::EXIT
this.a == orig(this.a)
this.y == orig(this.y)
this.y[] == orig(this.y[])
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
size(this.y[]) == orig(size(this.y0[]))
this.y[] == [0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
return.getClass().getName() == org.apache.commons.math.ode.events.EventHandler[].class
return[] elements != null
size(return[]) == 2
===========================================================================
org.apache.commons.math.ode.TestProblem5:::CLASS
===========================================================================
org.apache.commons.math.ode.TestProblem5:::OBJECT
this.y[] == [0.0, 0.0]
this.y[] elements == 0.0
this.n == 2
this.calls == 0
this.t0 == 0.0
this.y0[] == [1.0, 0.1]
this.y0[] elements one of { 0.1, 1.0 }
this.y0[] sorted by >
this.t1 == -4.0
this.errorScale[] == [1.0, 1.0]
this.errorScale[] elements == 1.0
size(this.y[]) == 2
size(this.y0[]) == 2
size(this.errorScale[]) == 2
===========================================================================
org.apache.commons.math.ode.TestProblem5.TestProblem5():::EXIT
===========================================================================
org.apache.commons.math.ode.TestProblem5.copy():::ENTER
this has only one value
this.y has only one value
this.y0 has only one value
this.errorScale has only one value
===========================================================================
org.apache.commons.math.ode.TestProblem5.copy():::EXIT
this.y == orig(this.y)
this.y[] == orig(this.y[])
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
this.y has only one value
this.y0 has only one value
this.errorScale has only one value
return.y[] == [0.0, 0.0]
return.y[] elements == 0.0
return.n == 2
return.calls == 0
return.t0 == 0.0
return.y0[] == [1.0, 0.1]
return.y0[] elements one of { 0.1, 1.0 }
return.y0[] sorted by >
return.t1 == -4.0
return.errorScale[] == [1.0, 1.0]
return.errorScale[] elements == 1.0
size(return.y[]) == 2
size(return.y0[]) == 2
size(return.errorScale[]) == 2
===========================================================================
org.apache.commons.math.ode.TestProblem6:::CLASS
===========================================================================
org.apache.commons.math.ode.TestProblem6:::OBJECT
this.n == size(this.y[])
size(this.y[]) == size(this.y0[])
this.n == 1
this.calls >= 0
this.t0 == 0.0
this.y0[] == [-360.0]
this.y0[] elements == -360.0
this.t1 == 1.0
this.errorScale[] == [1.0]
this.errorScale[] elements == 1.0
size(this.y[]) == 1
size(this.errorScale[]) == 1
===========================================================================
org.apache.commons.math.ode.TestProblem6.TestProblem6():::EXIT
this.y has only one value
this.y[] == [0.0]
this.y[] elements == 0.0
this.calls == 0
this.y0 has only one value
this.errorScale has only one value
===========================================================================
org.apache.commons.math.ode.TestProblem6.TestProblem6(org.apache.commons.math.ode.TestProblem6):::ENTER
problem has only one value
problem.y has only one value
problem.y[] == [0.0]
problem.y[] elements == 0.0
problem.n == 1
problem.calls == 0
problem.t0 == 0.0
problem.y0 has only one value
problem.y0[] == [-360.0]
problem.y0[] elements == -360.0
problem.t1 == 1.0
problem.errorScale has only one value
problem.errorScale[] == [1.0]
problem.errorScale[] elements == 1.0
size(problem.y[]) == 1
size(problem.y0[]) == 1
size(problem.errorScale[]) == 1
===========================================================================
org.apache.commons.math.ode.TestProblem6.TestProblem6(org.apache.commons.math.ode.TestProblem6):::EXIT
problem.y == orig(problem.y)
problem.y[] == orig(problem.y[])
problem.n == orig(problem.n)
problem.calls == orig(problem.calls)
problem.t0 == orig(problem.t0)
problem.y0 == orig(problem.y0)
problem.y0[] == orig(problem.y0[])
problem.t1 == orig(problem.t1)
problem.errorScale == orig(problem.errorScale)
problem.errorScale[] == orig(problem.errorScale[])
this.y[] == [0.0]
this.y[] elements == 0.0
this.calls == 0
problem.y has only one value
problem.y[] == [0.0]
problem.y[] elements == 0.0
problem.n == 1
problem.calls == 0
problem.t0 == 0.0
problem.y0 has only one value
problem.y0[] == [-360.0]
problem.y0[] elements == -360.0
problem.t1 == 1.0
problem.errorScale has only one value
problem.errorScale[] == [1.0]
problem.errorScale[] elements == 1.0
size(problem.y[]) == 1
size(problem.y0[]) == 1
size(problem.errorScale[]) == 1
===========================================================================
org.apache.commons.math.ode.TestProblem6.computeTheoreticalState(double):::ENTER
this.calls >= 1
===========================================================================
org.apache.commons.math.ode.TestProblem6.computeTheoreticalState(double):::EXIT
this.y == orig(this.y)
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
size(this.y[]) == orig(size(this.y[]))
size(this.y[]) == orig(size(this.y0[]))
this.calls >= 1
size(return[]) == 1
===========================================================================
org.apache.commons.math.ode.TestProblem6.copy():::ENTER
this has only one value
this.y has only one value
this.y[] == [0.0]
this.y[] elements == 0.0
this.calls == 0
this.y0 has only one value
this.errorScale has only one value
===========================================================================
org.apache.commons.math.ode.TestProblem6.copy():::EXIT
this.y == orig(this.y)
this.y[] == orig(this.y[])
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
size(this.y[]) == orig(size(this.y0[]))
this.y has only one value
this.y[] == [0.0]
this.y[] elements == 0.0
this.calls == 0
this.y0 has only one value
this.errorScale has only one value
return.y[] == [0.0]
return.y[] elements == 0.0
return.n == 1
return.calls == 0
return.t0 == 0.0
return.y0[] == [-360.0]
return.y0[] elements == -360.0
return.t1 == 1.0
return.errorScale[] == [1.0]
return.errorScale[] elements == 1.0
size(return.y[]) == 1
size(return.y0[]) == 1
size(return.errorScale[]) == 1
===========================================================================
org.apache.commons.math.ode.TestProblem6.doComputeDerivatives(double, double[], double[]):::ENTER
this.calls >= 1
size(y[]) == 1
size(yDot[]) == 1
===========================================================================
org.apache.commons.math.ode.TestProblem6.doComputeDerivatives(double, double[], double[]):::EXIT
this.y == orig(this.y)
this.y[] == orig(this.y[])
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
y[] == orig(y[])
size(this.y[]) == orig(size(this.y0[]))
this.calls >= 1
===========================================================================
org.apache.commons.math.ode.TestProblemAbstract:::CLASS
===========================================================================
org.apache.commons.math.ode.TestProblemAbstract:::OBJECT
this.n >= 0
this.calls >= 0
this.t0 == 0.0
this.errorScale[] elements one of { 0.0, 1.0 }
this.errorScale[] sorted by >=
size(this.y0[]) one of { 1, 2, 4 }
size(this.errorScale[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.TestProblemAbstract.TestProblemAbstract():::EXIT
this.n == 0
this.calls == 0
this.y0 == null
this.t1 == 0.0
this.errorScale == null
===========================================================================
org.apache.commons.math.ode.TestProblemAbstract.TestProblemAbstract(org.apache.commons.math.ode.TestProblemAbstract):::ENTER
problem != null
problem.n one of { 1, 2, 4 }
problem.calls == 0
problem.t0 == 0.0
problem.y0 != null
problem.y0[] elements <= 1.1055415967851334
problem.t1 >= 1.0
problem.errorScale != null
problem.errorScale[] elements one of { 0.0, 1.0 }
problem.errorScale[] sorted by >=
size(problem.y0[]) one of { 1, 2, 4 }
size(problem.errorScale[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.TestProblemAbstract.TestProblemAbstract(org.apache.commons.math.ode.TestProblemAbstract):::EXIT
problem.n == orig(problem.n)
problem.calls == orig(problem.calls)
problem.t0 == orig(problem.t0)
problem.y0 == orig(problem.y0)
problem.y0[] == orig(problem.y0[])
problem.t1 == orig(problem.t1)
problem.errorScale == orig(problem.errorScale)
problem.errorScale[] == orig(problem.errorScale[])
this.n one of { 1, 2, 4 }
this.calls == 0
this.y0 != null
this.y0[] elements <= 1.1055415967851334
this.t1 >= 1.0
this.errorScale != null
problem.n one of { 1, 2, 4 }
problem.calls == 0
problem.t0 == 0.0
problem.y0 != null
problem.y0[] elements <= 1.1055415967851334
problem.t1 >= 1.0
problem.errorScale != null
problem.errorScale[] elements one of { 0.0, 1.0 }
problem.errorScale[] sorted by >=
size(problem.y0[]) one of { 1, 2, 4 }
size(problem.errorScale[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.TestProblemAbstract.computeDerivatives(double, double[], double[]):::ENTER
this.n one of { 1, 2, 4 }
this.y0 != null
this.t1 != 0
this.errorScale != null
y != null
yDot != null
size(y[]) one of { 1, 2, 4 }
size(yDot[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.TestProblemAbstract.computeDerivatives(double, double[], double[]):::EXIT
this.n == orig(this.n)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
y[] == orig(y[])
this.n one of { 1, 2, 4 }
this.calls >= 1
this.y0 != null
this.t1 != 0
this.errorScale != null
this.calls - orig(this.calls) - 1 == 0
===========================================================================
org.apache.commons.math.ode.TestProblemAbstract.getDimension():::ENTER
this.n one of { 1, 2, 4 }
this.calls == 0
this.y0 != null
this.t1 != 0
this.errorScale != null
===========================================================================
org.apache.commons.math.ode.TestProblemAbstract.getDimension():::EXIT
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
this.n one of { 1, 2, 4 }
this.calls == 0
this.y0 != null
this.t1 != 0
this.errorScale != null
return one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.TestProblemAbstract.getErrorScale():::ENTER
this.n one of { 1, 2, 4 }
this.calls >= 1
this.y0 != null
this.y0[] elements <= 1.1055415967851334
this.t1 != 0
this.errorScale != null
===========================================================================
org.apache.commons.math.ode.TestProblemAbstract.getErrorScale():::EXIT
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
this.n one of { 1, 2, 4 }
this.calls >= 1
this.y0 != null
this.y0[] elements <= 1.1055415967851334
this.t1 != 0
this.errorScale != null
return != null
return[] elements one of { 0.0, 1.0 }
return[] sorted by >=
size(return[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.TestProblemAbstract.getEventsHandlers():::ENTER
this.n one of { 1, 2, 4 }
this.calls == 0
this.y0 != null
this.y0[] elements <= 1.1055415967851334
this.t1 != 0
this.errorScale != null
this.errorScale[] elements == 1.0
this.errorScale[] one of { [1.0], [1.0, 1.0], [1.0, 1.0, 1.0, 1.0] }
===========================================================================
org.apache.commons.math.ode.TestProblemAbstract.getEventsHandlers():::EXIT
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
this.n one of { 1, 2, 4 }
this.calls == 0
this.y0 != null
this.y0[] elements <= 1.1055415967851334
this.t1 != 0
this.errorScale != null
this.errorScale[] elements == 1.0
this.errorScale[] one of { [1.0], [1.0, 1.0], [1.0, 1.0, 1.0, 1.0] }
return != null
return.getClass().getName() == org.apache.commons.math.ode.events.EventHandler[].class
return[] == []
===========================================================================
org.apache.commons.math.ode.TestProblemAbstract.getFinalTime():::ENTER
this.n one of { 1, 2, 4 }
this.y0 != null
this.t1 != 0
this.errorScale != null
===========================================================================
org.apache.commons.math.ode.TestProblemAbstract.getFinalTime():::EXIT
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
this.n one of { 1, 2, 4 }
this.y0 != null
this.t1 != 0
this.errorScale != null
return != 0
===========================================================================
org.apache.commons.math.ode.TestProblemAbstract.getInitialState():::ENTER
this.n one of { 1, 2, 4 }
this.calls == 0
this.y0 != null
this.t1 != 0
this.errorScale != null
===========================================================================
org.apache.commons.math.ode.TestProblemAbstract.getInitialState():::EXIT
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
this.n one of { 1, 2, 4 }
this.calls == 0
this.y0 != null
this.t1 != 0
this.errorScale != null
return != null
size(return[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.TestProblemAbstract.getInitialTime():::ENTER
this.n one of { 1, 2, 4 }
this.y0 != null
this.t1 != 0
this.errorScale != null
===========================================================================
org.apache.commons.math.ode.TestProblemAbstract.getInitialTime():::EXIT
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
this.n one of { 1, 2, 4 }
this.y0 != null
this.t1 != 0
this.errorScale != null
return == 0.0
===========================================================================
org.apache.commons.math.ode.TestProblemAbstract.setErrorScale(double[]):::ENTER
this.n one of { 1, 2, 4 }
this.calls == 0
this.y0 != null
this.errorScale == null
errorScale != null
errorScale[] elements one of { 0.0, 1.0 }
errorScale[] sorted by >=
size(errorScale[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.TestProblemAbstract.setErrorScale(double[]):::EXIT
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
errorScale[] == orig(errorScale[])
this.n one of { 1, 2, 4 }
this.calls == 0
this.y0 != null
this.errorScale != null
errorScale[] elements one of { 0.0, 1.0 }
errorScale[] sorted by >=
===========================================================================
org.apache.commons.math.ode.TestProblemAbstract.setFinalConditions(double):::ENTER
this.n one of { 1, 2, 4 }
this.calls == 0
this.y0 != null
this.t1 one of { 0.0, 4.0 }
this.errorScale[] == [1.0, 1.0]
this.errorScale[] elements == 1.0
size(this.errorScale[]) == 2
===========================================================================
org.apache.commons.math.ode.TestProblemAbstract.setFinalConditions(double):::EXIT
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
this.n one of { 1, 2, 4 }
this.calls == 0
this.y0 != null
this.errorScale[] == [1.0, 1.0]
this.errorScale[] elements == 1.0
size(this.errorScale[]) == 2
orig(this.t1) % this.t1 == 0
this.t1 != orig(this.t1)
===========================================================================
org.apache.commons.math.ode.TestProblemAbstract.setInitialConditions(double, double[]):::ENTER
this.n == 0
this.calls == 0
this.y0 == null
this.t1 == 0.0
this.errorScale == null
t0 == 0.0
y0 != null
size(y0[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.TestProblemAbstract.setInitialConditions(double, double[]):::EXIT
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
y0[] == orig(y0[])
this.n one of { 1, 2, 4 }
this.calls == 0
this.y0 != null
this.t1 == 0.0
this.errorScale == null
this.n > orig(this.n)
===========================================================================
org.apache.commons.math.ode.TestProblemFactory:::CLASS
org.apache.commons.math.ode.TestProblemFactory.pool has only one value
org.apache.commons.math.ode.TestProblemFactory.pool.getClass().getName() == org.apache.commons.math.ode.TestProblemAbstract[].class
org.apache.commons.math.ode.TestProblemFactory.pool[] contains no nulls and has only one value, of length 6
org.apache.commons.math.ode.TestProblemFactory.pool[].getClass().getName() == [org.apache.commons.math.ode.TestProblem1, org.apache.commons.math.ode.TestProblem2, org.apache.commons.math.ode.TestProblem3, org.apache.commons.math.ode.TestProblem4, org.apache.commons.math.ode.TestProblem5, org.apache.commons.math.ode.TestProblem6]
org.apache.commons.math.ode.TestProblemFactory.pool[].n == [2, 1, 4, 2, 2, 1]
org.apache.commons.math.ode.TestProblemFactory.pool[].n elements one of { 1, 2, 4 }
org.apache.commons.math.ode.TestProblemFactory.pool[].calls == [0, 0, 0, 0, 0, 0]
org.apache.commons.math.ode.TestProblemFactory.pool[].calls elements == 0
org.apache.commons.math.ode.TestProblemFactory.pool[].t0 == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
org.apache.commons.math.ode.TestProblemFactory.pool[].t0 elements == 0.0
org.apache.commons.math.ode.TestProblemFactory.pool[].y0 contains no nulls and has only one value, of length 6
org.apache.commons.math.ode.TestProblemFactory.pool[].t1 == [4.0, 1.0, 20.0, 15.0, -4.0, 1.0]
org.apache.commons.math.ode.TestProblemFactory.pool[].errorScale contains no nulls and has only one value, of length 6
size(org.apache.commons.math.ode.TestProblemFactory.pool[]) == 6
===========================================================================
org.apache.commons.math.ode.TestProblemFactory.getProblems():::ENTER
===========================================================================
org.apache.commons.math.ode.TestProblemFactory.getProblems():::EXIT
org.apache.commons.math.ode.TestProblemFactory.pool == orig(org.apache.commons.math.ode.TestProblemFactory.pool)
org.apache.commons.math.ode.TestProblemFactory.pool.getClass().getName() == return.getClass().getName()
org.apache.commons.math.ode.TestProblemFactory.pool.getClass().getName() == orig(org.apache.commons.math.ode.TestProblemFactory.pool.getClass().getName())
org.apache.commons.math.ode.TestProblemFactory.pool[] == orig(org.apache.commons.math.ode.TestProblemFactory.pool[])
org.apache.commons.math.ode.TestProblemFactory.pool[].n == orig(org.apache.commons.math.ode.TestProblemFactory.pool[].n)
org.apache.commons.math.ode.TestProblemFactory.pool[].calls == orig(org.apache.commons.math.ode.TestProblemFactory.pool[].calls)
org.apache.commons.math.ode.TestProblemFactory.pool[].t0 == orig(org.apache.commons.math.ode.TestProblemFactory.pool[].t0)
org.apache.commons.math.ode.TestProblemFactory.pool[].y0 == orig(org.apache.commons.math.ode.TestProblemFactory.pool[].y0)
org.apache.commons.math.ode.TestProblemFactory.pool[].t1 == orig(org.apache.commons.math.ode.TestProblemFactory.pool[].t1)
org.apache.commons.math.ode.TestProblemFactory.pool[].errorScale == orig(org.apache.commons.math.ode.TestProblemFactory.pool[].errorScale)
return has only one value
return[] contains no nulls and has only one value, of length 6
return[].n == [2, 1, 4, 2, 2, 1]
return[].n elements one of { 1, 2, 4 }
return[].calls == [0, 0, 0, 0, 0, 0]
return[].calls elements == 0
return[].t0 == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
return[].t0 elements == 0.0
return[].y0 contains no nulls and has only one value, of length 6
return[].t1 == [4.0, 1.0, 20.0, 15.0, -4.0, 1.0]
return[].errorScale contains no nulls and has only one value, of length 6
size(return[]) == 6
===========================================================================
org.apache.commons.math.ode.TestProblemHandler:::OBJECT
this.problem.n one of { 1, 2, 4 }
this.problem.calls >= 0
this.problem.t0 == 0.0
this.problem.y0[] elements <= 1.1055415967851334
this.problem.errorScale[] elements one of { 0.0, 1.0 }
this.problem.errorScale[] sorted by >=
this.maxValueError >= 0.0
this.maxTimeError == 0.0
this.lastError >= 0.0
size(this.problem.y0[]) one of { 1, 2, 4 }
size(this.problem.errorScale[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.TestProblemHandler.TestProblemHandler(org.apache.commons.math.ode.TestProblemAbstract, org.apache.commons.math.ode.ODEIntegrator):::ENTER
problem.n one of { 1, 2, 4 }
problem.calls == 0
problem.t0 == 0.0
problem.y0[] elements <= 1.1055415967851334
problem.errorScale[] elements one of { 0.0, 1.0 }
problem.errorScale[] sorted by >=
size(problem.y0[]) one of { 1, 2, 4 }
size(problem.errorScale[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.TestProblemHandler.TestProblemHandler(org.apache.commons.math.ode.TestProblemAbstract, org.apache.commons.math.ode.ODEIntegrator):::EXIT
problem.n == orig(problem.n)
problem.calls == orig(problem.calls)
problem.t0 == orig(problem.t0)
problem.y0 == orig(problem.y0)
problem.y0[] == orig(problem.y0[])
problem.t1 == orig(problem.t1)
problem.errorScale == orig(problem.errorScale)
problem.errorScale[] == orig(problem.errorScale[])
this.problem.calls == 0
this.maxValueError == 0.0
this.lastError == 0.0
this.lastTime == 0.0
this.expectedStepStart == Double.NaN
problem.n one of { 1, 2, 4 }
problem.calls == 0
problem.t0 == 0.0
problem.y0[] elements <= 1.1055415967851334
problem.errorScale[] elements one of { 0.0, 1.0 }
problem.errorScale[] sorted by >=
size(problem.y0[]) one of { 1, 2, 4 }
size(problem.errorScale[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.TestProblemHandler.getLastError():::ENTER
this.problem.n == 2
this.problem.y0[] == [1.0, 0.1]
this.problem.y0[] elements one of { 0.1, 1.0 }
this.problem.y0[] sorted by >
this.problem.t1 one of { -4.0, 4.0 }
this.problem.errorScale[] == [1.0, 1.0]
this.problem.errorScale[] elements == 1.0
this.lastTime one of { -4.0000000000000036, 4.0000000000000036 }
this.expectedStepStart one of { -4.0000000000000036, 4.0000000000000036 }
size(this.problem.y0[]) == 2
size(this.problem.errorScale[]) == 2
===========================================================================
org.apache.commons.math.ode.TestProblemHandler.getLastError():::EXIT
this.problem == orig(this.problem)
this.problem.getClass().getName() == orig(this.problem.getClass().getName())
this.problem.n == orig(this.problem.n)
this.problem.calls == orig(this.problem.calls)
this.problem.t0 == orig(this.problem.t0)
this.problem.y0 == orig(this.problem.y0)
this.problem.y0[] == orig(this.problem.y0[])
this.problem.t1 == orig(this.problem.t1)
this.problem.errorScale == orig(this.problem.errorScale)
this.problem.errorScale[] == orig(this.problem.errorScale[])
this.maxValueError == orig(this.maxValueError)
this.maxTimeError == orig(this.maxTimeError)
this.lastError == orig(this.lastError)
this.lastTime == orig(this.lastTime)
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.expectedStepStart == orig(this.expectedStepStart)
this.problem.n == 2
this.problem.y0[] == [1.0, 0.1]
this.problem.y0[] elements one of { 0.1, 1.0 }
this.problem.y0[] sorted by >
this.problem.t1 one of { -4.0, 4.0 }
this.problem.errorScale[] == [1.0, 1.0]
this.problem.errorScale[] elements == 1.0
this.lastTime one of { -4.0000000000000036, 4.0000000000000036 }
this.expectedStepStart one of { -4.0000000000000036, 4.0000000000000036 }
size(this.problem.y0[]) == 2
size(this.problem.errorScale[]) == 2
===========================================================================
org.apache.commons.math.ode.TestProblemHandler.getMaximalTimeError():::ENTER
===========================================================================
org.apache.commons.math.ode.TestProblemHandler.getMaximalTimeError():::EXIT
this.problem == orig(this.problem)
this.problem.getClass().getName() == orig(this.problem.getClass().getName())
this.problem.n == orig(this.problem.n)
this.problem.calls == orig(this.problem.calls)
this.problem.t0 == orig(this.problem.t0)
this.problem.y0 == orig(this.problem.y0)
this.problem.y0[] == orig(this.problem.y0[])
this.problem.t1 == orig(this.problem.t1)
this.problem.errorScale == orig(this.problem.errorScale)
this.problem.errorScale[] == orig(this.problem.errorScale[])
this.maxValueError == orig(this.maxValueError)
this.maxTimeError == orig(this.maxTimeError)
this.lastError == orig(this.lastError)
this.lastTime == orig(this.lastTime)
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.expectedStepStart == orig(this.expectedStepStart)
return == 0.0
===========================================================================
org.apache.commons.math.ode.TestProblemHandler.getMaximalValueError():::ENTER
===========================================================================
org.apache.commons.math.ode.TestProblemHandler.getMaximalValueError():::EXIT
this.problem == orig(this.problem)
this.problem.getClass().getName() == orig(this.problem.getClass().getName())
this.problem.n == orig(this.problem.n)
this.problem.calls == orig(this.problem.calls)
this.problem.t0 == orig(this.problem.t0)
this.problem.y0 == orig(this.problem.y0)
this.problem.y0[] == orig(this.problem.y0[])
this.problem.t1 == orig(this.problem.t1)
this.problem.errorScale == orig(this.problem.errorScale)
this.problem.errorScale[] == orig(this.problem.errorScale[])
this.maxValueError == orig(this.maxValueError)
this.maxTimeError == orig(this.maxTimeError)
this.lastError == orig(this.lastError)
this.lastTime == orig(this.lastTime)
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.expectedStepStart == orig(this.expectedStepStart)
===========================================================================
org.apache.commons.math.ode.TestProblemHandler.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::ENTER
this.problem.calls >= 1
this.lastError == 0.0
this.lastTime == 0.0
===========================================================================
org.apache.commons.math.ode.TestProblemHandler.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::EXIT
this.problem == orig(this.problem)
this.problem.getClass().getName() == orig(this.problem.getClass().getName())
this.problem.n == orig(this.problem.n)
this.problem.calls == orig(this.problem.calls)
this.problem.t0 == orig(this.problem.t0)
this.problem.y0 == orig(this.problem.y0)
this.problem.y0[] == orig(this.problem.y0[])
this.problem.t1 == orig(this.problem.t1)
this.problem.errorScale == orig(this.problem.errorScale)
this.problem.errorScale[] == orig(this.problem.errorScale[])
this.maxTimeError == orig(this.maxTimeError)
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.problem.calls >= 1
this.maxValueError >= orig(this.maxValueError)
this.lastError >= orig(this.lastError)
this.expectedStepStart != orig(this.expectedStepStart)
===========================================================================
org.apache.commons.math.ode.TestProblemHandler.requiresDenseOutput():::ENTER
this.problem.calls == 0
this.maxValueError == 0.0
this.lastError == 0.0
this.lastTime == 0.0
this.expectedStepStart == Double.NaN
===========================================================================
org.apache.commons.math.ode.TestProblemHandler.requiresDenseOutput():::EXIT
this.problem == orig(this.problem)
this.problem.getClass().getName() == orig(this.problem.getClass().getName())
this.problem.n == orig(this.problem.n)
this.problem.calls == orig(this.problem.calls)
this.problem.t0 == orig(this.problem.t0)
this.problem.y0 == orig(this.problem.y0)
this.problem.y0[] == orig(this.problem.y0[])
this.problem.t1 == orig(this.problem.t1)
this.problem.errorScale == orig(this.problem.errorScale)
this.problem.errorScale[] == orig(this.problem.errorScale[])
this.maxValueError == orig(this.maxValueError)
this.maxTimeError == orig(this.maxTimeError)
this.lastError == orig(this.lastError)
this.lastTime == orig(this.lastTime)
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.problem.calls == 0
this.maxValueError == 0.0
this.lastError == 0.0
this.lastTime == 0.0
this.expectedStepStart == Double.NaN
return == true
===========================================================================
org.apache.commons.math.ode.TestProblemHandler.requiresDenseOutput():::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math.ode.TestProblemHandler.reset():::ENTER
this.problem.calls == 0
this.maxValueError == 0.0
this.lastError == 0.0
this.lastTime == 0.0
this.expectedStepStart one of { 0.0, Double.NaN }
===========================================================================
org.apache.commons.math.ode.TestProblemHandler.reset():::EXIT
this.problem == orig(this.problem)
this.problem.getClass().getName() == orig(this.problem.getClass().getName())
this.problem.n == orig(this.problem.n)
this.problem.calls == orig(this.problem.calls)
this.problem.t0 == orig(this.problem.t0)
this.problem.y0 == orig(this.problem.y0)
this.problem.y0[] == orig(this.problem.y0[])
this.problem.t1 == orig(this.problem.t1)
this.problem.errorScale == orig(this.problem.errorScale)
this.problem.errorScale[] == orig(this.problem.errorScale[])
this.maxValueError == orig(this.maxValueError)
this.maxTimeError == orig(this.maxTimeError)
this.lastError == orig(this.lastError)
this.lastTime == orig(this.lastTime)
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.problem.calls == 0
this.maxValueError == 0.0
this.lastError == 0.0
this.lastTime == 0.0
this.expectedStepStart == Double.NaN
this.expectedStepStart != orig(this.expectedStepStart)
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager:::OBJECT
this.states != null
this.states[] elements != null
this.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
this.states.getClass().getName() == java.util.ArrayList.class
this.first.handler != null
this.first.maxCheckInterval one of { 1.0, Infinity }
this.first.maxIterationCount one of { 100, 1000 }
this.first.t0 != 0
this.first.g0 != 0
this.first.pendingEvent == true
this.first.pendingEventTime != 0
this.first.nextAction == 3
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.CombinedEventsManager():::EXIT
this.states[] == []
this.states[].getClass().getName() == []
this.first == null
this.initialized == false
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.addEventHandler(org.apache.commons.math.ode.events.EventHandler, double, double, int):::ENTER
this.first == null
this.initialized == false
handler != null
maxCheckInterval one of { 1.0, Infinity }
maxIterationCount one of { 100, 1000 }
size(this.states[]) one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.addEventHandler(org.apache.commons.math.ode.events.EventHandler, double, double, int):::EXIT
this.states == orig(this.states)
this.states.getClass().getName() == orig(this.states.getClass().getName())
this.first == orig(this.first)
this.initialized == orig(this.initialized)
size(this.states[])-1 == orig(size(this.states[]))
this.first == null
this.initialized == false
size(this.states[]) one of { 1, 2, 3 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.clearEventsHandlers():::ENTER
this.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.first == null
this.initialized == false
size(this.states[]) one of { 0, 2 }
size(this.states[])-1 != 0
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.clearEventsHandlers():::EXIT
this.states == orig(this.states)
this.states.getClass().getName() == orig(this.states.getClass().getName())
this.first == orig(this.first)
this.initialized == orig(this.initialized)
this.states[] == []
this.states[].getClass().getName() == []
this.first == null
this.initialized == false
size(this.states[]) <= orig(size(this.states[]))
size(this.states[]) != orig(size(this.states[]))-1
size(this.states[])-1 <= orig(size(this.states[]))-1
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::ENTER
interpolator != null
size(this.states[]) one of { 1, 2, 3 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT170
(this.first != null)  <==>  (return == true)
(this.first != null)  ==>  (orig(this.first) == null)
(this.first != null)  ==>  (orig(this.initialized) == true)
(this.first != null)  ==>  (this.first.g0 != 0)
(this.first != null)  ==>  (this.first.handler != null)
(this.first != null)  ==>  (this.first.maxCheckInterval one of { 1.0, Infinity })
(this.first != null)  ==>  (this.first.maxIterationCount one of { 100, 1000 })
(this.first != null)  ==>  (this.first.pendingEventTime != 0)
(this.first != null)  ==>  (this.first.t0 != 0)
(this.first != null)  ==>  (this.initialized == orig(this.initialized))
(this.first == null)  <==>  (return == false)
(this.first == null)  ==>  (orig(this.first.g0) != 0)
(this.first == null)  ==>  (orig(this.first.handler) != null)
(this.first == null)  ==>  (orig(this.first.maxCheckInterval) one of { 1.0, Infinity })
(this.first == null)  ==>  (orig(this.first.maxIterationCount) one of { 100, 1000 })
(this.first == null)  ==>  (orig(this.first.pendingEventTime) != 0)
(this.first == null)  ==>  (orig(this.first.t0) != 0)
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT170;condition="return == true"
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT170;condition="not(return == true)"
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT
this.states == orig(this.states)
this.states[] == orig(this.states[])
this.states.getClass().getName() == orig(this.states.getClass().getName())
(this.first != null)  <==>  (return == true)
(this.first != null)  ==>  (orig(this.first) == null)
(this.first != null)  ==>  (orig(this.initialized) == true)
(this.first != null)  ==>  (this.first.g0 != 0)
(this.first != null)  ==>  (this.first.handler != null)
(this.first != null)  ==>  (this.first.maxCheckInterval one of { 1.0, Infinity })
(this.first != null)  ==>  (this.first.maxIterationCount one of { 100, 1000 })
(this.first != null)  ==>  (this.first.pendingEventTime != 0)
(this.first != null)  ==>  (this.first.t0 != 0)
(this.first != null)  ==>  (this.initialized == orig(this.initialized))
(this.first == null)  <==>  (return == false)
(this.first == null)  ==>  (orig(this.first.g0) != 0)
(this.first == null)  ==>  (orig(this.first.handler) != null)
(this.first == null)  ==>  (orig(this.first.maxCheckInterval) one of { 1.0, Infinity })
(this.first == null)  ==>  (orig(this.first.maxIterationCount) one of { 100, 1000 })
(this.first == null)  ==>  (orig(this.first.pendingEventTime) != 0)
(this.first == null)  ==>  (orig(this.first.t0) != 0)
this.initialized == true
size(this.states[]) one of { 1, 2, 3 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT;condition="return == true"
this.initialized == orig(this.initialized)
this.first != null
return == true
orig(this.first) == null
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT;condition="not(return == true)"
this.first == null
return == false
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.getEventTime():::ENTER
this.first != null
this.initialized == true
size(this.states[]) one of { 1, 2, 3 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.getEventTime():::EXIT
this.states == orig(this.states)
this.states[] == orig(this.states[])
this.states.getClass().getName() == orig(this.states.getClass().getName())
this.first == orig(this.first)
this.first.handler == orig(this.first.handler)
this.first.handler.getClass().getName() == orig(this.first.handler.getClass().getName())
this.first.maxCheckInterval == orig(this.first.maxCheckInterval)
this.first.convergence == orig(this.first.convergence)
this.first.maxIterationCount == orig(this.first.maxIterationCount)
this.first.t0 == orig(this.first.t0)
this.first.g0 == orig(this.first.g0)
this.first.g0Positive == orig(this.first.g0Positive)
this.first.pendingEvent == orig(this.first.pendingEvent)
this.first.pendingEventTime == orig(this.first.pendingEventTime)
this.first.forward == orig(this.first.forward)
this.first.increasing == orig(this.first.increasing)
this.first.nextAction == orig(this.first.nextAction)
this.initialized == orig(this.initialized)
this.first != null
this.initialized == true
return != 0
size(this.states[]) one of { 1, 2, 3 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.getEventsHandlers():::ENTER
this.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.first == null
this.initialized == false
size(this.states[]) one of { 0, 2 }
size(this.states[])-1 != 0
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.getEventsHandlers():::EXIT
this.states == orig(this.states)
this.states[] == orig(this.states[])
this.states.getClass().getName() == orig(this.states.getClass().getName())
this.first == orig(this.first)
this.initialized == orig(this.initialized)
this.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.first == null
this.initialized == false
return != null
return.getClass().getName() == java.util.Collections$UnmodifiableCollection.class
size(this.states[]) one of { 0, 2 }
size(this.states[])-1 != 0
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.getEventsStates():::ENTER
this.first == null
this.initialized == false
size(this.states[]) one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.getEventsStates():::EXIT
this.states == orig(this.states)
this.states[] == orig(this.states[])
this.states.getClass().getName() == orig(this.states.getClass().getName())
this.first == orig(this.first)
this.initialized == orig(this.initialized)
this.first == null
this.initialized == false
return != null
return.getClass().getName() == java.util.ArrayList.class
size(this.states[]) one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.isEmpty():::ENTER
this.states[] elements has only one value
this.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState] }
this.first == null
this.initialized == false
size(this.states[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.isEmpty():::EXIT
this.states == orig(this.states)
this.states[] == orig(this.states[])
this.states.getClass().getName() == orig(this.states.getClass().getName())
this.first == orig(this.first)
this.initialized == orig(this.initialized)
(this.states[] == [])  <==>  (return == true)
(this.states[] == [])  <==>  (this.states[].getClass().getName() == [])
(this.states[] contains no nulls and has only one value, of length 1)  <==>  (return == false)
(this.states[] contains no nulls and has only one value, of length 1)  <==>  (size(this.states[]) == 1)
(this.states[] contains no nulls and has only one value, of length 1)  <==>  (this.states[].getClass().getName() == [org.apache.commons.math.ode.events.EventState])
(this.states[] contains no nulls and has only one value, of length 1)  ==>  (orig(this) has only one value)
(this.states[] contains no nulls and has only one value, of length 1)  ==>  (this.states has only one value)
(this.states[] contains no nulls and has only one value, of length 1)  ==>  (this.states[] elements has only one value)
(this.states[] contains no nulls and has only one value, of length 1)  ==>  (this.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class)
this.states[] elements has only one value
this.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState] }
this.first == null
this.initialized == false
size(this.states[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.isEmpty():::EXIT;condition="return == true"
this.states[] == []
this.states[].getClass().getName() == []
return == true
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.isEmpty():::EXIT;condition="not(return == true)"
this.states has only one value
this.states[] contains no nulls and has only one value, of length 1
this.states[].getClass().getName() == [org.apache.commons.math.ode.events.EventState]
return == false
orig(this) has only one value
size(this.states[]) == 1
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.reset(double, double[]):::ENTER
this.first == null
this.initialized == true
t != 0
y != null
size(this.states[]) one of { 1, 2, 3 }
size(y[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.reset(double, double[]):::EXIT
this.states == orig(this.states)
this.states[] == orig(this.states[])
this.states.getClass().getName() == orig(this.states.getClass().getName())
this.first == orig(this.first)
this.initialized == orig(this.initialized)
(return == false)  ==>  (orig(size(y[])) one of { 1, 2, 4 })
(return == false)  ==>  (size(this.states[]) one of { 1, 2, 3 })
(return == false)  ==>  (y[] == orig(y[]))
(return == true)  ==>  (orig(size(y[])) one of { 1, 2 })
(return == true)  ==>  (orig(y[]) sorted by >)
(return == true)  ==>  (size(this.states[]) one of { 2, 3 })
(return == true)  ==>  (this.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] })
(return == true)  ==>  (y[] + orig(y[]) == 0)
(return == true)  ==>  (y[] sorted by <)
this.first == null
this.initialized == true
size(this.states[]) one of { 1, 2, 3 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.reset(double, double[]):::EXIT;condition="return == true"
this.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
y[] sorted by <
return == true
orig(y[]) sorted by >
size(this.states[]) one of { 2, 3 }
orig(size(y[])) one of { 1, 2 }
y[] + orig(y[]) == 0
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.reset(double, double[]):::EXIT;condition="not(return == true)"
y[] == orig(y[])
return == false
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.stepAccepted(double, double[]):::ENTER
this.first == null
this.initialized == true
t != 0
y != null
size(this.states[]) one of { 1, 2, 3 }
size(y[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.stepAccepted(double, double[]):::EXIT
this.states == orig(this.states)
this.states[] == orig(this.states[])
this.states.getClass().getName() == orig(this.states.getClass().getName())
this.first == orig(this.first)
this.initialized == orig(this.initialized)
y[] == orig(y[])
this.first == null
this.initialized == true
size(this.states[]) one of { 1, 2, 3 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.stop():::ENTER
this.first == null
this.initialized == true
size(this.states[]) one of { 1, 2, 3 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.stop():::EXIT217
return == true
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.stop():::EXIT217;condition="return == true"
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.stop():::EXIT220
return == false
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.stop():::EXIT220;condition="not(return == true)"
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.stop():::EXIT
this.states == orig(this.states)
this.states[] == orig(this.states[])
this.states.getClass().getName() == orig(this.states.getClass().getName())
this.first == orig(this.first)
this.initialized == orig(this.initialized)
this.first == null
this.initialized == true
size(this.states[]) one of { 1, 2, 3 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.stop():::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.stop():::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.math.ode.events.EventState$1:::OBJECT
org.apache.commons.math.ode.events.EventState.this.maxCheckInterval one of { 1.0, Infinity }
org.apache.commons.math.ode.events.EventState.this.maxIterationCount one of { 100, 1000 }
org.apache.commons.math.ode.events.EventState.this.pendingEvent == false
org.apache.commons.math.ode.events.EventState.this.pendingEventTime == Double.NaN
org.apache.commons.math.ode.events.EventState.this.nextAction == 3
===========================================================================
org.apache.commons.math.ode.events.EventState$1.(org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.sampling.StepInterpolator):::ENTER
org.apache.commons.math.ode.events.EventState.this != null
org.apache.commons.math.ode.events.EventState.this.handler != null
org.apache.commons.math.ode.events.EventState.this.maxCheckInterval one of { 1.0, Infinity }
org.apache.commons.math.ode.events.EventState.this.maxIterationCount one of { 100, 1000 }
org.apache.commons.math.ode.events.EventState.this.t0 != 0
org.apache.commons.math.ode.events.EventState.this.g0 != 0
org.apache.commons.math.ode.events.EventState.this.pendingEvent == false
org.apache.commons.math.ode.events.EventState.this.pendingEventTime == Double.NaN
org.apache.commons.math.ode.events.EventState.this.nextAction == 3
$hidden$2 != null
===========================================================================
org.apache.commons.math.ode.events.EventState$1.(org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT
org.apache.commons.math.ode.events.EventState.this == orig(org.apache.commons.math.ode.events.EventState.this)
org.apache.commons.math.ode.events.EventState.this.handler == orig(org.apache.commons.math.ode.events.EventState.this.handler)
org.apache.commons.math.ode.events.EventState.this.handler.getClass().getName() == orig(org.apache.commons.math.ode.events.EventState.this.handler.getClass().getName())
org.apache.commons.math.ode.events.EventState.this.maxCheckInterval == orig(org.apache.commons.math.ode.events.EventState.this.maxCheckInterval)
org.apache.commons.math.ode.events.EventState.this.convergence == orig(org.apache.commons.math.ode.events.EventState.this.convergence)
org.apache.commons.math.ode.events.EventState.this.maxIterationCount == orig(org.apache.commons.math.ode.events.EventState.this.maxIterationCount)
org.apache.commons.math.ode.events.EventState.this.t0 == orig(org.apache.commons.math.ode.events.EventState.this.t0)
org.apache.commons.math.ode.events.EventState.this.g0 == orig(org.apache.commons.math.ode.events.EventState.this.g0)
org.apache.commons.math.ode.events.EventState.this.g0Positive == orig(org.apache.commons.math.ode.events.EventState.this.g0Positive)
org.apache.commons.math.ode.events.EventState.this.pendingEvent == orig(org.apache.commons.math.ode.events.EventState.this.pendingEvent)
org.apache.commons.math.ode.events.EventState.this.forward == orig(org.apache.commons.math.ode.events.EventState.this.forward)
org.apache.commons.math.ode.events.EventState.this.increasing == orig(org.apache.commons.math.ode.events.EventState.this.increasing)
org.apache.commons.math.ode.events.EventState.this.nextAction == orig(org.apache.commons.math.ode.events.EventState.this.nextAction)
this.val$interpolator != null
===========================================================================
org.apache.commons.math.ode.events.EventState$1.value(double):::ENTER
===========================================================================
org.apache.commons.math.ode.events.EventState$1.value(double):::EXIT
this.val$interpolator == orig(this.val$interpolator)
this.val$interpolator.getClass().getName() == orig(this.val$interpolator.getClass().getName())
org.apache.commons.math.ode.events.EventState.this == orig(org.apache.commons.math.ode.events.EventState.this)
org.apache.commons.math.ode.events.EventState.this.handler == orig(org.apache.commons.math.ode.events.EventState.this.handler)
org.apache.commons.math.ode.events.EventState.this.handler.getClass().getName() == orig(org.apache.commons.math.ode.events.EventState.this.handler.getClass().getName())
org.apache.commons.math.ode.events.EventState.this.maxCheckInterval == orig(org.apache.commons.math.ode.events.EventState.this.maxCheckInterval)
org.apache.commons.math.ode.events.EventState.this.convergence == orig(org.apache.commons.math.ode.events.EventState.this.convergence)
org.apache.commons.math.ode.events.EventState.this.maxIterationCount == orig(org.apache.commons.math.ode.events.EventState.this.maxIterationCount)
org.apache.commons.math.ode.events.EventState.this.t0 == orig(org.apache.commons.math.ode.events.EventState.this.t0)
org.apache.commons.math.ode.events.EventState.this.g0 == orig(org.apache.commons.math.ode.events.EventState.this.g0)
org.apache.commons.math.ode.events.EventState.this.g0Positive == orig(org.apache.commons.math.ode.events.EventState.this.g0Positive)
org.apache.commons.math.ode.events.EventState.this.pendingEvent == orig(org.apache.commons.math.ode.events.EventState.this.pendingEvent)
org.apache.commons.math.ode.events.EventState.this.forward == orig(org.apache.commons.math.ode.events.EventState.this.forward)
org.apache.commons.math.ode.events.EventState.this.increasing == orig(org.apache.commons.math.ode.events.EventState.this.increasing)
org.apache.commons.math.ode.events.EventState.this.nextAction == orig(org.apache.commons.math.ode.events.EventState.this.nextAction)
===========================================================================
org.apache.commons.math.ode.events.EventState:::OBJECT
this.handler != null
this.maxCheckInterval one of { 1.0, Infinity }
this.convergence <= 9.374999999999999E-7
this.convergence >= 2.220446049250313E-16
this.maxIterationCount one of { 100, 1000 }
this.pendingEventTime != 0
this.previousEventTime != 0
this.nextAction >= 0
===========================================================================
org.apache.commons.math.ode.events.EventState.EventState(org.apache.commons.math.ode.events.EventHandler, double, double, int):::ENTER
handler != null
maxCheckInterval one of { 1.0, Infinity }
maxIterationCount one of { 100, 1000 }
===========================================================================
org.apache.commons.math.ode.events.EventState.EventState(org.apache.commons.math.ode.events.EventHandler, double, double, int):::EXIT
this.t0 == Double.NaN
this.g0 == Double.NaN
this.g0Positive == true
this.pendingEvent == false
this.pendingEventTime == Double.NaN
this.previousEventTime == Double.NaN
this.forward == false
this.increasing == true
this.nextAction == 3
===========================================================================
org.apache.commons.math.ode.events.EventState.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::ENTER
this.nextAction one of { 1, 2, 3 }
interpolator != null
===========================================================================
org.apache.commons.math.ode.events.EventState.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT189
this.pendingEvent == orig(this.pendingEvent)
this.pendingEventTime == orig(this.pendingEventTime)
this.forward == orig(this.forward)
this.increasing == orig(this.increasing)
this.t0 != 0
this.g0 != 0
this.pendingEvent == true
this.nextAction == 3
return == false
===========================================================================
org.apache.commons.math.ode.events.EventState.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT189;condition="not(return == true)"
===========================================================================
org.apache.commons.math.ode.events.EventState.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT251
this.forward == orig(this.forward)
this.t0 != 0
this.g0 != 0
this.pendingEvent == true
this.nextAction == 3
return == true
orig(this.pendingEvent) == false
orig(this.pendingEventTime) == Double.NaN
this.pendingEventTime != orig(this.pendingEventTime)
===========================================================================
org.apache.commons.math.ode.events.EventState.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT251;condition="return == true"
===========================================================================
org.apache.commons.math.ode.events.EventState.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT265
this.increasing == orig(this.increasing)
this.pendingEvent == false
this.pendingEventTime == Double.NaN
return == false
orig(this.pendingEventTime) one of { 12.0, Double.NaN }
this.pendingEventTime != orig(this.pendingEventTime)
===========================================================================
org.apache.commons.math.ode.events.EventState.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT265;condition="not(return == true)"
===========================================================================
org.apache.commons.math.ode.events.EventState.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.maxCheckInterval == orig(this.maxCheckInterval)
this.convergence == orig(this.convergence)
this.maxIterationCount == orig(this.maxIterationCount)
this.t0 == orig(this.t0)
this.g0 == orig(this.g0)
this.g0Positive == orig(this.g0Positive)
this.nextAction == orig(this.nextAction)
(return == false)  ==>  (this.increasing == orig(this.increasing))
(return == false)  ==>  (this.nextAction one of { 1, 2, 3 })
(return == true)  ==>  (orig(this.pendingEvent) == false)
(return == true)  ==>  (orig(this.pendingEventTime) == Double.NaN)
(return == true)  ==>  (this.forward == orig(this.forward))
(return == true)  ==>  (this.g0 != 0)
(return == true)  ==>  (this.nextAction == 3)
(return == true)  ==>  (this.pendingEvent == true)
(return == true)  ==>  (this.pendingEventTime != orig(this.pendingEventTime))
(return == true)  ==>  (this.t0 != 0)
this.nextAction one of { 1, 2, 3 }
===========================================================================
org.apache.commons.math.ode.events.EventState.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT;condition="return == true"
this.forward == orig(this.forward)
this.t0 != 0
this.g0 != 0
this.pendingEvent == true
this.nextAction == 3
return == true
orig(this.pendingEvent) == false
orig(this.pendingEventTime) == Double.NaN
this.pendingEventTime != orig(this.pendingEventTime)
===========================================================================
org.apache.commons.math.ode.events.EventState.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT;condition="not(return == true)"
this.increasing == orig(this.increasing)
return == false
===========================================================================
org.apache.commons.math.ode.events.EventState.getConvergence():::ENTER
this.maxIterationCount == 1000
this.t0 == Double.NaN
this.g0 == Double.NaN
this.g0Positive == true
this.pendingEvent == false
this.pendingEventTime == Double.NaN
this.previousEventTime == Double.NaN
this.forward == false
this.increasing == true
this.nextAction == 3
===========================================================================
org.apache.commons.math.ode.events.EventState.getConvergence():::EXIT
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.maxCheckInterval == orig(this.maxCheckInterval)
this.convergence == orig(this.convergence)
this.maxIterationCount == orig(this.maxIterationCount)
this.g0Positive == orig(this.g0Positive)
this.pendingEvent == orig(this.pendingEvent)
this.forward == orig(this.forward)
this.increasing == orig(this.increasing)
this.nextAction == orig(this.nextAction)
this.maxIterationCount == 1000
this.t0 == Double.NaN
this.g0 == Double.NaN
this.g0Positive == true
this.pendingEvent == false
this.pendingEventTime == Double.NaN
this.previousEventTime == Double.NaN
this.forward == false
this.increasing == true
this.nextAction == 3
===========================================================================
org.apache.commons.math.ode.events.EventState.getEventHandler():::ENTER
this.maxIterationCount == 1000
this.t0 == Double.NaN
this.g0 == Double.NaN
this.g0Positive == true
this.pendingEvent == false
this.pendingEventTime == Double.NaN
this.previousEventTime == Double.NaN
this.forward == false
this.increasing == true
this.nextAction == 3
===========================================================================
org.apache.commons.math.ode.events.EventState.getEventHandler():::EXIT
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.maxCheckInterval == orig(this.maxCheckInterval)
this.convergence == orig(this.convergence)
this.maxIterationCount == orig(this.maxIterationCount)
this.g0Positive == orig(this.g0Positive)
this.pendingEvent == orig(this.pendingEvent)
this.forward == orig(this.forward)
this.increasing == orig(this.increasing)
this.nextAction == orig(this.nextAction)
this.maxIterationCount == 1000
this.t0 == Double.NaN
this.g0 == Double.NaN
this.g0Positive == true
this.pendingEvent == false
this.pendingEventTime == Double.NaN
this.previousEventTime == Double.NaN
this.forward == false
this.increasing == true
this.nextAction == 3
return != null
===========================================================================
org.apache.commons.math.ode.events.EventState.getEventTime():::ENTER
this.t0 != 0
this.g0 != 0
this.pendingEvent == true
this.nextAction == 3
===========================================================================
org.apache.commons.math.ode.events.EventState.getEventTime():::EXIT
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.maxCheckInterval == orig(this.maxCheckInterval)
this.convergence == orig(this.convergence)
this.maxIterationCount == orig(this.maxIterationCount)
this.t0 == orig(this.t0)
this.g0 == orig(this.g0)
this.g0Positive == orig(this.g0Positive)
this.pendingEvent == orig(this.pendingEvent)
this.pendingEventTime == orig(this.pendingEventTime)
this.forward == orig(this.forward)
this.increasing == orig(this.increasing)
this.nextAction == orig(this.nextAction)
this.t0 != 0
this.g0 != 0
this.pendingEvent == true
this.nextAction == 3
return != 0
===========================================================================
org.apache.commons.math.ode.events.EventState.getMaxCheckInterval():::ENTER
this.maxIterationCount == 1000
this.t0 == Double.NaN
this.g0 == Double.NaN
this.g0Positive == true
this.pendingEvent == false
this.pendingEventTime == Double.NaN
this.previousEventTime == Double.NaN
this.forward == false
this.increasing == true
this.nextAction == 3
===========================================================================
org.apache.commons.math.ode.events.EventState.getMaxCheckInterval():::EXIT
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.maxCheckInterval == orig(this.maxCheckInterval)
this.convergence == orig(this.convergence)
this.maxIterationCount == orig(this.maxIterationCount)
this.g0Positive == orig(this.g0Positive)
this.pendingEvent == orig(this.pendingEvent)
this.forward == orig(this.forward)
this.increasing == orig(this.increasing)
this.nextAction == orig(this.nextAction)
this.maxIterationCount == 1000
this.t0 == Double.NaN
this.g0 == Double.NaN
this.g0Positive == true
this.pendingEvent == false
this.pendingEventTime == Double.NaN
this.previousEventTime == Double.NaN
this.forward == false
this.increasing == true
this.nextAction == 3
return one of { 1.0, Infinity }
===========================================================================
org.apache.commons.math.ode.events.EventState.getMaxIterationCount():::ENTER
this.maxIterationCount == 1000
this.t0 == Double.NaN
this.g0 == Double.NaN
this.g0Positive == true
this.pendingEvent == false
this.pendingEventTime == Double.NaN
this.previousEventTime == Double.NaN
this.forward == false
this.increasing == true
this.nextAction == 3
===========================================================================
org.apache.commons.math.ode.events.EventState.getMaxIterationCount():::EXIT
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.maxCheckInterval == orig(this.maxCheckInterval)
this.convergence == orig(this.convergence)
this.maxIterationCount == orig(this.maxIterationCount)
this.g0Positive == orig(this.g0Positive)
this.pendingEvent == orig(this.pendingEvent)
this.forward == orig(this.forward)
this.increasing == orig(this.increasing)
this.nextAction == orig(this.nextAction)
this.maxIterationCount == 1000
this.t0 == Double.NaN
this.g0 == Double.NaN
this.g0Positive == true
this.pendingEvent == false
this.pendingEventTime == Double.NaN
this.previousEventTime == Double.NaN
this.forward == false
this.increasing == true
this.nextAction == 3
return == 1000
===========================================================================
org.apache.commons.math.ode.events.EventState.reinitializeBegin(double, double[]):::ENTER
this.t0 == Double.NaN
this.g0 == Double.NaN
this.g0Positive == true
this.pendingEvent == false
this.pendingEventTime == Double.NaN
this.previousEventTime == Double.NaN
this.forward == false
this.increasing == true
this.nextAction == 3
tStart == 0.0
yStart != null
size(yStart[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.events.EventState.reinitializeBegin(double, double[]):::EXIT
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.maxCheckInterval == orig(this.maxCheckInterval)
this.convergence == orig(this.convergence)
this.maxIterationCount == orig(this.maxIterationCount)
this.pendingEvent == orig(this.pendingEvent)
this.forward == orig(this.forward)
this.increasing == orig(this.increasing)
this.nextAction == orig(this.nextAction)
yStart[] == orig(yStart[])
this.t0 == 0.0
this.g0 != 0
this.pendingEvent == false
this.pendingEventTime == Double.NaN
this.previousEventTime == Double.NaN
this.forward == false
this.increasing == true
this.nextAction == 3
this.g0 != orig(this.g0)
===========================================================================
org.apache.commons.math.ode.events.EventState.reset(double, double[]):::ENTER
this.t0 != 0
t != 0
y != null
size(y[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.events.EventState.reset(double, double[]):::EXIT334
this.pendingEvent == orig(this.pendingEvent)
y[] == orig(y[])
this.g0 != 0
this.nextAction == 3
return == false
orig(this.pendingEventTime) == Double.NaN
===========================================================================
org.apache.commons.math.ode.events.EventState.reset(double, double[]):::EXIT334;condition="not(return == true)"
===========================================================================
org.apache.commons.math.ode.events.EventState.reset(double, double[]):::EXIT343
this.previousEventTime == orig(this.previousEventTime)
this.nextAction one of { 0, 1, 2 }
orig(this.pendingEvent) == true
===========================================================================
org.apache.commons.math.ode.events.EventState.reset(double, double[]):::EXIT343;condition="return == true"
===========================================================================
org.apache.commons.math.ode.events.EventState.reset(double, double[]):::EXIT343;condition="not(return == true)"
this.maxCheckInterval == Infinity
this.g0 == 0.0
this.nextAction == 0
===========================================================================
org.apache.commons.math.ode.events.EventState.reset(double, double[]):::EXIT
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.maxCheckInterval == orig(this.maxCheckInterval)
this.convergence == orig(this.convergence)
this.maxIterationCount == orig(this.maxIterationCount)
this.t0 == orig(this.t0)
this.g0 == orig(this.g0)
this.g0Positive == orig(this.g0Positive)
this.forward == orig(this.forward)
this.increasing == orig(this.increasing)
this.nextAction == orig(this.nextAction)
this.t0 != 0
this.pendingEvent == false
this.pendingEventTime == Double.NaN
this.pendingEventTime != orig(this.pendingEventTime)
===========================================================================
org.apache.commons.math.ode.events.EventState.reset(double, double[]):::EXIT;condition="return == true"
this.previousEventTime == orig(this.previousEventTime)
this.maxIterationCount == 1000
this.forward == true
this.nextAction one of { 1, 2 }
y[] sorted by <
return == true
orig(this.pendingEvent) == true
orig(y[]) sorted by >
orig(size(y[])) one of { 1, 2 }
y[] + orig(y[]) == 0
===========================================================================
org.apache.commons.math.ode.events.EventState.reset(double, double[]):::EXIT;condition="not(return == true)"
y[] == orig(y[])
this.nextAction one of { 0, 3 }
return == false
===========================================================================
org.apache.commons.math.ode.events.EventState.stepAccepted(double, double[]):::ENTER
this.nextAction one of { 1, 2, 3 }
t != 0
y != null
size(y[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.events.EventState.stepAccepted(double, double[]):::EXIT
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.maxCheckInterval == orig(this.maxCheckInterval)
this.convergence == orig(this.convergence)
this.maxIterationCount == orig(this.maxIterationCount)
this.pendingEvent == orig(this.pendingEvent)
this.forward == orig(this.forward)
this.increasing == orig(this.increasing)
y[] == orig(y[])
this.t0 != 0
===========================================================================
org.apache.commons.math.ode.events.EventState.stop():::ENTER
this.t0 != 0
===========================================================================
org.apache.commons.math.ode.events.EventState.stop():::EXIT
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.maxCheckInterval == orig(this.maxCheckInterval)
this.convergence == orig(this.convergence)
this.maxIterationCount == orig(this.maxIterationCount)
this.t0 == orig(this.t0)
this.g0 == orig(this.g0)
this.g0Positive == orig(this.g0Positive)
this.pendingEvent == orig(this.pendingEvent)
this.forward == orig(this.forward)
this.increasing == orig(this.increasing)
this.nextAction == orig(this.nextAction)
(this.nextAction == 0)  <==>  (return == true)
(this.nextAction == 0)  ==>  (this.g0 == 0.0)
(this.nextAction == 0)  ==>  (this.maxCheckInterval == Infinity)
(this.nextAction == 0)  ==>  (this.pendingEvent == true)
(this.nextAction == 0)  ==>  (this.pendingEventTime == orig(this.pendingEventTime))
(this.nextAction == 0)  ==>  (this.previousEventTime == orig(this.previousEventTime))
(this.nextAction one of { 1, 2, 3 })  <==>  (return == false)
(this.nextAction one of { 1, 2, 3 })  ==>  (this.maxCheckInterval one of { 1.0, Infinity })
this.t0 != 0
===========================================================================
org.apache.commons.math.ode.events.EventState.stop():::EXIT;condition="return == true"
this.pendingEventTime == orig(this.pendingEventTime)
this.previousEventTime == orig(this.previousEventTime)
this.maxCheckInterval == Infinity
this.g0 == 0.0
this.pendingEvent == true
this.nextAction == 0
return == true
===========================================================================
org.apache.commons.math.ode.events.EventState.stop():::EXIT;condition="not(return == true)"
this.nextAction one of { 1, 2, 3 }
return == false
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator:::CLASS
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_C has only one value
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_C[] == [0.5, 0.5, 1.0]
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_C[] elements one of { 0.5, 1.0 }
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_C[] sorted by <=
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_A has only one value
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_A.getClass().getName() == double[][].class
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_A[] contains no nulls and has only one value, of length 3
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_A[] elements != null
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_B has only one value
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_B[] == [0.16666666666666666, 0.3333333333333333, 0.3333333333333333, 0.16666666666666666]
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_B[] elements one of { 0.16666666666666666, 0.3333333333333333 }
size(org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_C[]) == 3
size(org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_A[]) == 3
size(org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_B[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator:::OBJECT
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_A.getClass().getName() == this.a.getClass().getName()
this.stepHandlers.getClass().getName() == this.eventsHandlersManager.states.getClass().getName()
this.c has only one value
this.c[] == [0.5, 0.5, 1.0]
this.c[] elements one of { 0.5, 1.0 }
this.c[] sorted by <=
this.a has only one value
this.a[] contains no nulls and has only one value, of length 3
this.a[] elements != null
this.b has only one value
this.b[] == [0.16666666666666666, 0.3333333333333333, 0.3333333333333333, 0.16666666666666666]
this.b[] elements one of { 0.16666666666666666, 0.3333333333333333 }
this.prototype.getClass().getName() == org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.class
this.prototype.yDotK == null
this.prototype.integrator == null
this.prototype.previousTime == Double.NaN
this.prototype.currentTime == Double.NaN
this.prototype.h == Double.NaN
this.prototype.currentState == null
this.prototype.interpolatedTime == Double.NaN
this.prototype.interpolatedState == null
this.prototype.interpolatedDerivatives == null
this.prototype.finalized == false
this.prototype.forward == true
this.prototype.dirtyState == true
this.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.name has only one value
this.name.toString == "classical Runge-Kutta"
this.maxEvaluations == 2147483647
this.evaluations == 0
this.equations == null
size(this.c[]) == 3
size(this.a[]) == 3
size(this.b[]) == 4
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_A.getClass().getName() != this.prototype.getClass().getName()
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_A.getClass().getName() != this.stepHandlers.getClass().getName()
this.prototype.getClass().getName() != this.stepHandlers.getClass().getName()
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.ClassicalRungeKuttaIntegrator(double):::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.ClassicalRungeKuttaIntegrator(double):::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$3:::OBJECT
this has only one value
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$3.(org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest):::ENTER
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$3.(org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest):::EXIT
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this)
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$3.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::ENTER
interpolator has only one value
interpolator.getClass().getName() == org.apache.commons.math.ode.sampling.DummyStepInterpolator.class
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$3.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::EXIT
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this)
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$3.requiresDenseOutput():::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$3.requiresDenseOutput():::EXIT
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this)
return == false
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$3.requiresDenseOutput():::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$3.reset():::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$3.reset():::EXIT
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this)
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$4:::CLASS
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$4:::OBJECT
this has only one value
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$4.(org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest):::ENTER
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$4.(org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest):::EXIT
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this)
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$4.computeDerivatives(double, double[], double[]):::ENTER
dot[] elements one of { 0.0, 1.0 }
dot[] one of { [0.0], [1.0] }
size(y[]) == 1
size(dot[]) == 1
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$4.computeDerivatives(double, double[], double[]):::EXIT
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this)
y[] == orig(y[])
dot[] == [1.0]
dot[] elements == 1.0
dot[] >= orig(dot[]) (elementwise)
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$4.getDimension():::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$4.getDimension():::EXIT
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this)
return == 1
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$KeplerHandler:::OBJECT
this has only one value
this.pb has only one value
this.pb.e == 0.9
this.pb.y has only one value
this.pb.n == 4
this.pb.calls >= 0
this.pb.t0 == 0.0
this.pb.y0 has only one value
this.pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
this.pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
this.pb.t1 == 20.0
this.pb.errorScale has only one value
this.pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
this.pb.errorScale[] elements == 1.0
size(this.pb.y[]) == 4
size(this.pb.y0[]) == 4
size(this.pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$KeplerHandler.KeplerHandler(org.apache.commons.math.ode.TestProblem3):::ENTER
pb has only one value
pb.e == 0.9
pb.y has only one value
pb.y[] == [0.0, 0.0, 0.0, 0.0]
pb.y[] elements == 0.0
pb.n == 4
pb.calls == 0
pb.t0 == 0.0
pb.y0 has only one value
pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
pb.t1 == 20.0
pb.errorScale has only one value
pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
pb.errorScale[] elements == 1.0
size(pb.y[]) == 4
size(pb.y0[]) == 4
size(pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$KeplerHandler.KeplerHandler(org.apache.commons.math.ode.TestProblem3):::EXIT
pb.e == orig(pb.e)
pb.y == orig(pb.y)
pb.y[] == orig(pb.y[])
pb.n == orig(pb.n)
pb.calls == orig(pb.calls)
pb.t0 == orig(pb.t0)
pb.y0 == orig(pb.y0)
pb.y0[] == orig(pb.y0[])
pb.t1 == orig(pb.t1)
pb.errorScale == orig(pb.errorScale)
pb.errorScale[] == orig(pb.errorScale[])
this.maxError == 0.0
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
pb.e == 0.9
pb.y has only one value
pb.y[] == [0.0, 0.0, 0.0, 0.0]
pb.y[] elements == 0.0
pb.n == 4
pb.calls == 0
pb.t0 == 0.0
pb.y0 has only one value
pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
pb.t1 == 20.0
pb.errorScale has only one value
pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
pb.errorScale[] elements == 1.0
size(pb.y[]) == 4
size(pb.y0[]) == 4
size(pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$KeplerHandler.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::ENTER
interpolator has only one value
interpolator.getClass().getName() == org.apache.commons.math.ode.sampling.DummyStepInterpolator.class
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$KeplerHandler.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::EXIT
this.pb == orig(this.pb)
this.pb.e == orig(this.pb.e)
this.pb.y == orig(this.pb.y)
this.pb.n == orig(this.pb.n)
this.pb.calls == orig(this.pb.calls)
this.pb.t0 == orig(this.pb.t0)
this.pb.y0 == orig(this.pb.y0)
this.pb.y0[] == orig(this.pb.y0[])
this.pb.t1 == orig(this.pb.t1)
this.pb.errorScale == orig(this.pb.errorScale)
this.pb.errorScale[] == orig(this.pb.errorScale[])
size(this.pb.y[]) == orig(size(this.pb.y[]))
this.pb.y[] elements != 0
this.maxError >= orig(this.maxError)
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$KeplerHandler.requiresDenseOutput():::ENTER
this.maxError == 0.0
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$KeplerHandler.requiresDenseOutput():::EXIT
this.maxError == orig(this.maxError)
this.pb == orig(this.pb)
this.pb.e == orig(this.pb.e)
this.pb.y == orig(this.pb.y)
this.pb.y[] == orig(this.pb.y[])
this.pb.n == orig(this.pb.n)
this.pb.calls == orig(this.pb.calls)
this.pb.t0 == orig(this.pb.t0)
this.pb.y0 == orig(this.pb.y0)
this.pb.y0[] == orig(this.pb.y0[])
this.pb.t1 == orig(this.pb.t1)
this.pb.errorScale == orig(this.pb.errorScale)
this.pb.errorScale[] == orig(this.pb.errorScale[])
this.maxError == 0.0
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
return == false
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$KeplerHandler.requiresDenseOutput():::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$KeplerHandler.reset():::ENTER
this.maxError == 0.0
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$KeplerHandler.reset():::EXIT
this.maxError == orig(this.maxError)
this.pb == orig(this.pb)
this.pb.e == orig(this.pb.e)
this.pb.y == orig(this.pb.y)
this.pb.y[] == orig(this.pb.y[])
this.pb.n == orig(this.pb.n)
this.pb.calls == orig(this.pb.calls)
this.pb.t0 == orig(this.pb.t0)
this.pb.y0 == orig(this.pb.y0)
this.pb.y0[] == orig(this.pb.y0[])
this.pb.t1 == orig(this.pb.t1)
this.pb.errorScale == orig(this.pb.errorScale)
this.pb.errorScale[] == orig(this.pb.errorScale[])
this.maxError == 0.0
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest:::OBJECT
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.ClassicalRungeKuttaIntegratorTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.ClassicalRungeKuttaIntegratorTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testBackward():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testBackward():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testBigStep():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testBigStep():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testDecreasingSteps():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testDecreasingSteps():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testKepler():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testKepler():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testSanityChecks():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testSanityChecks():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testSmallStep():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testSmallStep():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testStepSize():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testStepSize():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator:::CLASS
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator:::OBJECT
this.yDotK.getClass().getName() == double[][].class
this.yDotK[] elements != null
this.integrator.getClass().getName() == org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.class
this.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.integrator.eventsHandlersManager.states[] elements != null
this.integrator.eventsHandlersManager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
this.integrator.eventsHandlersManager.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.integrator.eventsHandlersManager.states.getClass().getName() == java.util.ArrayList.class
this.integrator.eventsHandlersManager.first == null
this.integrator.eventsHandlersManager.initialized == false
this.integrator.name has only one value
this.integrator.name.toString == "classical Runge-Kutta"
this.integrator.maxEvaluations == 2147483647
this.dirtyState == true
size(this.yDotK[]) == 4
size(this.integrator.eventsHandlersManager.states[]) one of { 0, 2 }
size(this.integrator.eventsHandlersManager.states[])-1 != 0
size(this.currentState[]) one of { 1, 2, 4 }
size(this.interpolatedState[]) one of { 1, 2, 4 }
size(this.interpolatedDerivatives[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.ClassicalRungeKuttaStepInterpolator():::EXIT
this.yDotK == null
this.integrator == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.finalized == false
this.forward == true
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.ClassicalRungeKuttaStepInterpolator(org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator):::ENTER
interpolator.yDotK.getClass().getName() == double[][].class
interpolator.yDotK[] contains no nulls and has only one value, of length 4
interpolator.yDotK[] elements != null
interpolator.integrator.getClass().getName() == org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.class
interpolator.integrator.stepHandlers has only one value
interpolator.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.stepSize one of { 0.0019999999994659845, 0.005999999999999999 }
interpolator.integrator.eventsHandlersManager has only one value
interpolator.integrator.name has only one value
interpolator.integrator.name.toString == "classical Runge-Kutta"
interpolator.integrator.maxEvaluations == 2147483647
interpolator.integrator.equations has only one value
interpolator.integrator.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem3.class
interpolator.h one of { 0.0019999999994659845, 0.005999999999999999, Double.NaN }
interpolator.h <= 0.006000000000000227
interpolator.currentState[] elements != 0
interpolator.interpolatedState[] elements != 0
interpolator.interpolatedDerivatives[] elements != 0
interpolator.finalized == true
interpolator.forward == true
interpolator.dirtyState == true
size(interpolator.yDotK[]) == 4
size(interpolator.currentState[]) == 4
size(interpolator.interpolatedState[]) == 4
size(interpolator.interpolatedDerivatives[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.ClassicalRungeKuttaStepInterpolator(org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator):::EXIT
interpolator.yDotK == orig(interpolator.yDotK)
interpolator.yDotK.getClass().getName() == orig(interpolator.yDotK.getClass().getName())
interpolator.yDotK[] == orig(interpolator.yDotK[])
interpolator.integrator == orig(interpolator.integrator)
interpolator.integrator.getClass().getName() == orig(interpolator.integrator.getClass().getName())
interpolator.integrator.stepHandlers == orig(interpolator.integrator.stepHandlers)
interpolator.integrator.stepHandlers.getClass().getName() == orig(interpolator.integrator.stepHandlers.getClass().getName())
interpolator.integrator.stepStart == orig(interpolator.integrator.stepStart)
interpolator.integrator.stepSize == orig(interpolator.integrator.stepSize)
interpolator.integrator.eventsHandlersManager == orig(interpolator.integrator.eventsHandlersManager)
interpolator.integrator.name == orig(interpolator.integrator.name)
interpolator.integrator.name.toString == orig(interpolator.integrator.name.toString)
interpolator.integrator.maxEvaluations == orig(interpolator.integrator.maxEvaluations)
interpolator.integrator.evaluations == orig(interpolator.integrator.evaluations)
interpolator.integrator.equations == orig(interpolator.integrator.equations)
interpolator.integrator.equations.getClass().getName() == orig(interpolator.integrator.equations.getClass().getName())
interpolator.currentState == orig(interpolator.currentState)
interpolator.currentState[] == orig(interpolator.currentState[])
interpolator.interpolatedState == orig(interpolator.interpolatedState)
interpolator.interpolatedState[] == orig(interpolator.interpolatedState[])
interpolator.interpolatedDerivatives == orig(interpolator.interpolatedDerivatives)
interpolator.interpolatedDerivatives[] == orig(interpolator.interpolatedDerivatives[])
interpolator.finalized == orig(interpolator.finalized)
interpolator.forward == orig(interpolator.forward)
interpolator.dirtyState == orig(interpolator.dirtyState)
this.integrator == null
this.h one of { 0.0019999999994659845, 0.005999999999999999, Double.NaN }
this.h <= 0.006000000000000227
this.currentState[] elements != 0
this.interpolatedState[] elements != 0
this.interpolatedDerivatives[] elements != 0
this.finalized == true
this.forward == true
interpolator.yDotK.getClass().getName() == double[][].class
interpolator.yDotK[] contains no nulls and has only one value, of length 4
interpolator.yDotK[] elements != null
interpolator.integrator.getClass().getName() == org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.class
interpolator.integrator.stepHandlers has only one value
interpolator.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.stepSize one of { 0.0019999999994659845, 0.005999999999999999 }
interpolator.integrator.eventsHandlersManager has only one value
interpolator.integrator.name has only one value
interpolator.integrator.name.toString == "classical Runge-Kutta"
interpolator.integrator.maxEvaluations == 2147483647
interpolator.integrator.equations has only one value
interpolator.integrator.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem3.class
interpolator.h one of { 0.0019999999994659845, 0.005999999999999999, Double.NaN }
interpolator.h <= 0.006000000000000227
interpolator.currentState[] elements != 0
interpolator.interpolatedState[] elements != 0
interpolator.interpolatedDerivatives[] elements != 0
interpolator.finalized == true
interpolator.forward == true
interpolator.dirtyState == true
size(this.currentState[]) == 4
size(this.interpolatedState[]) == 4
size(this.interpolatedDerivatives[]) == 4
size(interpolator.yDotK[]) == 4
size(interpolator.currentState[]) == 4
size(interpolator.interpolatedState[]) == 4
size(interpolator.interpolatedDerivatives[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::ENTER
theta >= 0.0
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::EXIT
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.integrator.stepHandlers == orig(this.integrator.stepHandlers)
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.stepHandlers.getClass().getName())
this.integrator.stepStart == orig(this.integrator.stepStart)
this.integrator.stepSize == orig(this.integrator.stepSize)
this.integrator.eventsHandlersManager == orig(this.integrator.eventsHandlersManager)
this.integrator.eventsHandlersManager.states == orig(this.integrator.eventsHandlersManager.states)
this.integrator.eventsHandlersManager.states[] == orig(this.integrator.eventsHandlersManager.states[])
this.integrator.eventsHandlersManager.states.getClass().getName() == orig(this.integrator.eventsHandlersManager.states.getClass().getName())
this.integrator.eventsHandlersManager.first == orig(this.integrator.eventsHandlersManager.first)
this.integrator.eventsHandlersManager.initialized == orig(this.integrator.eventsHandlersManager.initialized)
this.integrator.name == orig(this.integrator.name)
this.integrator.name.toString == orig(this.integrator.name.toString)
this.integrator.maxEvaluations == orig(this.integrator.maxEvaluations)
this.integrator.evaluations == orig(this.integrator.evaluations)
this.integrator.equations == orig(this.integrator.equations)
this.integrator.equations.getClass().getName() == orig(this.integrator.equations.getClass().getName())
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
size(this.interpolatedState[]) == orig(size(this.interpolatedState[]))
size(this.interpolatedDerivatives[]) == orig(size(this.interpolatedDerivatives[]))
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.doCopy():::ENTER
this.yDotK[] contains no nulls and has only one value, of length 4
this.integrator.stepHandlers has only one value
this.integrator.stepSize one of { 0.0019999999994659845, 0.005999999999999999 }
this.integrator.eventsHandlersManager has only one value
this.integrator.eventsHandlersManager.states has only one value
this.integrator.eventsHandlersManager.states[] == []
this.integrator.eventsHandlersManager.states[].getClass().getName() == []
this.integrator.equations has only one value
this.integrator.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem3.class
this.h one of { 0.0019999999994659845, 0.005999999999999999, Double.NaN }
this.h <= 0.006000000000000227
this.currentState[] elements != 0
this.interpolatedState[] elements != 0
this.interpolatedDerivatives[] elements != 0
this.finalized == true
this.forward == true
size(this.currentState[]) == 4
size(this.interpolatedState[]) == 4
size(this.interpolatedDerivatives[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.doCopy():::EXIT
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.integrator.stepHandlers == orig(this.integrator.stepHandlers)
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.stepHandlers.getClass().getName())
this.integrator.stepStart == orig(this.integrator.stepStart)
this.integrator.stepSize == orig(this.integrator.stepSize)
this.integrator.eventsHandlersManager == orig(this.integrator.eventsHandlersManager)
this.integrator.eventsHandlersManager.states == orig(this.integrator.eventsHandlersManager.states)
this.integrator.eventsHandlersManager.states[] == orig(this.integrator.eventsHandlersManager.states[])
this.integrator.eventsHandlersManager.states.getClass().getName() == orig(this.integrator.eventsHandlersManager.states.getClass().getName())
this.integrator.eventsHandlersManager.first == orig(this.integrator.eventsHandlersManager.first)
this.integrator.eventsHandlersManager.initialized == orig(this.integrator.eventsHandlersManager.initialized)
this.integrator.name == orig(this.integrator.name)
this.integrator.name.toString == orig(this.integrator.name.toString)
this.integrator.maxEvaluations == orig(this.integrator.maxEvaluations)
this.integrator.evaluations == orig(this.integrator.evaluations)
this.integrator.equations == orig(this.integrator.equations)
this.integrator.equations.getClass().getName() == orig(this.integrator.equations.getClass().getName())
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.yDotK[] contains no nulls and has only one value, of length 4
this.integrator.stepHandlers has only one value
this.integrator.stepSize one of { 0.0019999999994659845, 0.005999999999999999 }
this.integrator.eventsHandlersManager has only one value
this.integrator.eventsHandlersManager.states has only one value
this.integrator.eventsHandlersManager.states[] == []
this.integrator.eventsHandlersManager.states[].getClass().getName() == []
this.integrator.equations has only one value
this.integrator.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem3.class
this.h one of { 0.0019999999994659845, 0.005999999999999999, Double.NaN }
this.h <= 0.006000000000000227
this.currentState[] elements != 0
this.interpolatedState[] elements != 0
this.interpolatedDerivatives[] elements != 0
this.finalized == true
this.forward == true
return.getClass().getName() == org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.class
size(this.currentState[]) == 4
size(this.interpolatedState[]) == 4
size(this.interpolatedDerivatives[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest:::OBJECT
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest.ClassicalRungeKuttaStepInterpolatorTest():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest.derivativesConsistency():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest.derivativesConsistency():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest.serialization():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest.serialization():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegrator:::CLASS
org.apache.commons.math.ode.nonstiff.EulerIntegrator.STATIC_C has only one value
org.apache.commons.math.ode.nonstiff.EulerIntegrator.STATIC_C != null
org.apache.commons.math.ode.nonstiff.EulerIntegrator.STATIC_C[] == []
org.apache.commons.math.ode.nonstiff.EulerIntegrator.STATIC_A has only one value
org.apache.commons.math.ode.nonstiff.EulerIntegrator.STATIC_A != null
org.apache.commons.math.ode.nonstiff.EulerIntegrator.STATIC_A.getClass().getName() == double[][].class
org.apache.commons.math.ode.nonstiff.EulerIntegrator.STATIC_A[] == []
org.apache.commons.math.ode.nonstiff.EulerIntegrator.STATIC_B has only one value
org.apache.commons.math.ode.nonstiff.EulerIntegrator.STATIC_B != null
org.apache.commons.math.ode.nonstiff.EulerIntegrator.STATIC_B[] == [1.0]
org.apache.commons.math.ode.nonstiff.EulerIntegrator.STATIC_B[] elements == 1.0
size(org.apache.commons.math.ode.nonstiff.EulerIntegrator.STATIC_B[]) == 1
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegrator:::OBJECT
org.apache.commons.math.ode.nonstiff.EulerIntegrator.STATIC_A.getClass().getName() == this.a.getClass().getName()
this.stepHandlers.getClass().getName() == this.eventsHandlersManager.states.getClass().getName()
this.c has only one value
this.c != null
this.c[] == []
this.a has only one value
this.a != null
this.a[] == []
this.b has only one value
this.b != null
this.b[] == [1.0]
this.b[] elements == 1.0
this.prototype != null
this.prototype.getClass().getName() == org.apache.commons.math.ode.nonstiff.EulerStepInterpolator.class
this.prototype.yDotK == null
this.prototype.integrator == null
this.prototype.previousTime == Double.NaN
this.prototype.currentTime == Double.NaN
this.prototype.h == Double.NaN
this.prototype.currentState == null
this.prototype.interpolatedTime == Double.NaN
this.prototype.interpolatedState == null
this.prototype.interpolatedDerivatives == null
this.prototype.finalized == false
this.prototype.forward == true
this.prototype.dirtyState == true
this.stepHandlers != null
this.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.eventsHandlersManager != null
this.eventsHandlersManager.states != null
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.name has only one value
this.name != null
this.name.toString == "Euler"
this.maxEvaluations == 2147483647
this.evaluations == 0
this.equations == null
size(this.b[]) == 1
org.apache.commons.math.ode.nonstiff.EulerIntegrator.STATIC_A.getClass().getName() != this.prototype.getClass().getName()
org.apache.commons.math.ode.nonstiff.EulerIntegrator.STATIC_A.getClass().getName() != this.stepHandlers.getClass().getName()
this.prototype.getClass().getName() != this.stepHandlers.getClass().getName()
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegrator.EulerIntegrator(double):::ENTER
step != 0
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegrator.EulerIntegrator(double):::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest$1:::OBJECT
this has only one value
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest$1.(org.apache.commons.math.ode.nonstiff.EulerIntegratorTest):::ENTER
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest$1.(org.apache.commons.math.ode.nonstiff.EulerIntegratorTest):::EXIT
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.this)
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest$1.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::ENTER
interpolator has only one value
interpolator.getClass().getName() == org.apache.commons.math.ode.sampling.DummyStepInterpolator.class
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest$1.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::EXIT
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.this)
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest$1.requiresDenseOutput():::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest$1.requiresDenseOutput():::EXIT
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.this)
return == false
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest$1.requiresDenseOutput():::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest$1.reset():::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest$1.reset():::EXIT
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.this)
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest$2:::CLASS
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest$2:::OBJECT
this has only one value
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest$2.(org.apache.commons.math.ode.nonstiff.EulerIntegratorTest):::ENTER
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest$2.(org.apache.commons.math.ode.nonstiff.EulerIntegratorTest):::EXIT
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.this)
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest$2.computeDerivatives(double, double[], double[]):::ENTER
y has only one value
dot has only one value
dot[] elements one of { 0.0, 1.0 }
dot[] one of { [0.0], [1.0] }
size(y[]) == 1
size(dot[]) == 1
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest$2.computeDerivatives(double, double[], double[]):::EXIT
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.this)
y[] == orig(y[])
dot[] == [1.0]
dot[] elements == 1.0
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest$2.getDimension():::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest$2.getDimension():::EXIT
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.this)
return == 1
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest:::OBJECT
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.EulerIntegratorTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.EulerIntegratorTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.testBackward():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.testBackward():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.testBigStep():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.testBigStep():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.testDecreasingSteps():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.testDecreasingSteps():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.testDimensionCheck():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.testDimensionCheck():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.testSmallStep():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.testSmallStep():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.testStepSize():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.testStepSize():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerStepInterpolator:::CLASS
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerStepInterpolator:::OBJECT
this.yDotK.getClass().getName() == double[][].class
this.yDotK[] elements != null
this.integrator.getClass().getName() == org.apache.commons.math.ode.nonstiff.EulerIntegrator.class
this.integrator.stepHandlers != null
this.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.integrator.stepSize != 0
this.integrator.eventsHandlersManager != null
this.integrator.eventsHandlersManager.states != null
this.integrator.eventsHandlersManager.states[] elements != null
this.integrator.eventsHandlersManager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
this.integrator.eventsHandlersManager.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.integrator.eventsHandlersManager.states.getClass().getName() == java.util.ArrayList.class
this.integrator.eventsHandlersManager.first == null
this.integrator.eventsHandlersManager.initialized == false
this.integrator.name has only one value
this.integrator.name != null
this.integrator.name.toString == "Euler"
this.integrator.maxEvaluations == 2147483647
this.integrator.evaluations >= 1
this.integrator.equations != null
this.currentTime != 0
this.h != 0
this.dirtyState == true
size(this.yDotK[]) == 1
size(this.integrator.eventsHandlersManager.states[]) one of { 0, 2 }
size(this.integrator.eventsHandlersManager.states[])-1 != 0
size(this.currentState[]) one of { 1, 2, 4 }
size(this.interpolatedState[]) one of { 1, 2, 4 }
size(this.interpolatedDerivatives[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerStepInterpolator.EulerStepInterpolator():::EXIT
this.yDotK == null
this.integrator == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.finalized == false
this.forward == true
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerStepInterpolator.EulerStepInterpolator(org.apache.commons.math.ode.nonstiff.EulerStepInterpolator):::ENTER
interpolator != null
interpolator.yDotK.getClass().getName() == double[][].class
interpolator.yDotK[] contains no nulls and has only one value, of length 1
interpolator.yDotK[] elements has only one value
interpolator.yDotK[] elements != null
interpolator.integrator.getClass().getName() == org.apache.commons.math.ode.nonstiff.EulerIntegrator.class
interpolator.integrator.stepHandlers has only one value
interpolator.integrator.stepHandlers != null
interpolator.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.stepSize == 0.004
interpolator.integrator.eventsHandlersManager has only one value
interpolator.integrator.eventsHandlersManager != null
interpolator.integrator.name has only one value
interpolator.integrator.name != null
interpolator.integrator.name.toString == "Euler"
interpolator.integrator.maxEvaluations == 2147483647
interpolator.integrator.equations has only one value
interpolator.integrator.equations != null
interpolator.integrator.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem1.class
interpolator.h one of { 0.004, Double.NaN }
interpolator.currentState[] sorted by >
interpolator.interpolatedState[] sorted by >
interpolator.interpolatedDerivatives[] sorted by <
interpolator.finalized == true
interpolator.forward == true
interpolator.dirtyState == true
size(interpolator.yDotK[]) == 1
size(interpolator.currentState[]) == 2
size(interpolator.interpolatedState[]) == 2
size(interpolator.interpolatedDerivatives[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerStepInterpolator.EulerStepInterpolator(org.apache.commons.math.ode.nonstiff.EulerStepInterpolator):::EXIT
interpolator.yDotK == orig(interpolator.yDotK)
interpolator.yDotK.getClass().getName() == orig(interpolator.yDotK.getClass().getName())
interpolator.yDotK[] == orig(interpolator.yDotK[])
interpolator.integrator == orig(interpolator.integrator)
interpolator.integrator.getClass().getName() == orig(interpolator.integrator.getClass().getName())
interpolator.integrator.stepHandlers == orig(interpolator.integrator.stepHandlers)
interpolator.integrator.stepHandlers.getClass().getName() == orig(interpolator.integrator.stepHandlers.getClass().getName())
interpolator.integrator.stepStart == orig(interpolator.integrator.stepStart)
interpolator.integrator.stepSize == orig(interpolator.integrator.stepSize)
interpolator.integrator.eventsHandlersManager == orig(interpolator.integrator.eventsHandlersManager)
interpolator.integrator.name == orig(interpolator.integrator.name)
interpolator.integrator.name.toString == orig(interpolator.integrator.name.toString)
interpolator.integrator.maxEvaluations == orig(interpolator.integrator.maxEvaluations)
interpolator.integrator.evaluations == orig(interpolator.integrator.evaluations)
interpolator.integrator.equations == orig(interpolator.integrator.equations)
interpolator.integrator.equations.getClass().getName() == orig(interpolator.integrator.equations.getClass().getName())
interpolator.currentState == orig(interpolator.currentState)
interpolator.currentState[] == orig(interpolator.currentState[])
interpolator.interpolatedState == orig(interpolator.interpolatedState)
interpolator.interpolatedState[] == orig(interpolator.interpolatedState[])
interpolator.interpolatedDerivatives == orig(interpolator.interpolatedDerivatives)
interpolator.interpolatedDerivatives[] == orig(interpolator.interpolatedDerivatives[])
interpolator.finalized == orig(interpolator.finalized)
interpolator.forward == orig(interpolator.forward)
interpolator.dirtyState == orig(interpolator.dirtyState)
this.integrator == null
this.h one of { 0.004, Double.NaN }
this.currentState[] sorted by >
this.interpolatedState[] sorted by >
this.interpolatedDerivatives[] sorted by <
this.finalized == true
this.forward == true
interpolator.yDotK.getClass().getName() == double[][].class
interpolator.yDotK[] contains no nulls and has only one value, of length 1
interpolator.yDotK[] elements has only one value
interpolator.yDotK[] elements != null
interpolator.integrator.getClass().getName() == org.apache.commons.math.ode.nonstiff.EulerIntegrator.class
interpolator.integrator.stepHandlers has only one value
interpolator.integrator.stepHandlers != null
interpolator.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.stepSize == 0.004
interpolator.integrator.eventsHandlersManager has only one value
interpolator.integrator.eventsHandlersManager != null
interpolator.integrator.name has only one value
interpolator.integrator.name != null
interpolator.integrator.name.toString == "Euler"
interpolator.integrator.maxEvaluations == 2147483647
interpolator.integrator.equations has only one value
interpolator.integrator.equations != null
interpolator.integrator.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem1.class
interpolator.h one of { 0.004, Double.NaN }
interpolator.currentState[] sorted by >
interpolator.interpolatedState[] sorted by >
interpolator.interpolatedDerivatives[] sorted by <
interpolator.finalized == true
interpolator.forward == true
interpolator.dirtyState == true
size(this.currentState[]) == 2
size(this.interpolatedState[]) == 2
size(this.interpolatedDerivatives[]) == 2
size(interpolator.yDotK[]) == 1
size(interpolator.currentState[]) == 2
size(interpolator.interpolatedState[]) == 2
size(interpolator.interpolatedDerivatives[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerStepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::ENTER
this.yDotK != null
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
theta >= 0.0
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerStepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::EXIT
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.integrator.stepHandlers == orig(this.integrator.stepHandlers)
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.stepHandlers.getClass().getName())
this.integrator.stepStart == orig(this.integrator.stepStart)
this.integrator.stepSize == orig(this.integrator.stepSize)
this.integrator.eventsHandlersManager == orig(this.integrator.eventsHandlersManager)
this.integrator.eventsHandlersManager.states == orig(this.integrator.eventsHandlersManager.states)
this.integrator.eventsHandlersManager.states[] == orig(this.integrator.eventsHandlersManager.states[])
this.integrator.eventsHandlersManager.states.getClass().getName() == orig(this.integrator.eventsHandlersManager.states.getClass().getName())
this.integrator.eventsHandlersManager.first == orig(this.integrator.eventsHandlersManager.first)
this.integrator.eventsHandlersManager.initialized == orig(this.integrator.eventsHandlersManager.initialized)
this.integrator.name == orig(this.integrator.name)
this.integrator.name.toString == orig(this.integrator.name.toString)
this.integrator.maxEvaluations == orig(this.integrator.maxEvaluations)
this.integrator.evaluations == orig(this.integrator.evaluations)
this.integrator.equations == orig(this.integrator.equations)
this.integrator.equations.getClass().getName() == orig(this.integrator.equations.getClass().getName())
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
size(this.interpolatedState[]) == orig(size(this.interpolatedState[]))
size(this.interpolatedDerivatives[]) == orig(size(this.interpolatedDerivatives[]))
this.yDotK != null
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerStepInterpolator.doCopy():::ENTER
this.yDotK[] contains no nulls and has only one value, of length 1
this.yDotK[] elements has only one value
this.integrator.stepHandlers has only one value
this.integrator.stepSize == 0.004
this.integrator.eventsHandlersManager has only one value
this.integrator.eventsHandlersManager.states has only one value
this.integrator.eventsHandlersManager.states[] == []
this.integrator.eventsHandlersManager.states[].getClass().getName() == []
this.integrator.equations has only one value
this.integrator.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem1.class
this.h one of { 0.004, Double.NaN }
this.currentState[] sorted by >
this.interpolatedState[] sorted by >
this.interpolatedDerivatives[] sorted by <
this.finalized == true
this.forward == true
size(this.currentState[]) == 2
size(this.interpolatedState[]) == 2
size(this.interpolatedDerivatives[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerStepInterpolator.doCopy():::EXIT
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.integrator.stepHandlers == orig(this.integrator.stepHandlers)
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.stepHandlers.getClass().getName())
this.integrator.stepStart == orig(this.integrator.stepStart)
this.integrator.stepSize == orig(this.integrator.stepSize)
this.integrator.eventsHandlersManager == orig(this.integrator.eventsHandlersManager)
this.integrator.eventsHandlersManager.states == orig(this.integrator.eventsHandlersManager.states)
this.integrator.eventsHandlersManager.states[] == orig(this.integrator.eventsHandlersManager.states[])
this.integrator.eventsHandlersManager.states.getClass().getName() == orig(this.integrator.eventsHandlersManager.states.getClass().getName())
this.integrator.eventsHandlersManager.first == orig(this.integrator.eventsHandlersManager.first)
this.integrator.eventsHandlersManager.initialized == orig(this.integrator.eventsHandlersManager.initialized)
this.integrator.name == orig(this.integrator.name)
this.integrator.name.toString == orig(this.integrator.name.toString)
this.integrator.maxEvaluations == orig(this.integrator.maxEvaluations)
this.integrator.evaluations == orig(this.integrator.evaluations)
this.integrator.equations == orig(this.integrator.equations)
this.integrator.equations.getClass().getName() == orig(this.integrator.equations.getClass().getName())
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.yDotK[] contains no nulls and has only one value, of length 1
this.yDotK[] elements has only one value
this.integrator.stepHandlers has only one value
this.integrator.stepSize == 0.004
this.integrator.eventsHandlersManager has only one value
this.integrator.eventsHandlersManager.states has only one value
this.integrator.eventsHandlersManager.states[] == []
this.integrator.eventsHandlersManager.states[].getClass().getName() == []
this.integrator.equations has only one value
this.integrator.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem1.class
this.h one of { 0.004, Double.NaN }
this.currentState[] sorted by >
this.interpolatedState[] sorted by >
this.interpolatedDerivatives[] sorted by <
this.finalized == true
this.forward == true
return != null
return.getClass().getName() == org.apache.commons.math.ode.nonstiff.EulerStepInterpolator.class
size(this.currentState[]) == 2
size(this.interpolatedState[]) == 2
size(this.interpolatedDerivatives[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest:::OBJECT
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest.EulerStepInterpolatorTest():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest.derivativesConsistency():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest.derivativesConsistency():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest.serialization():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest.serialization():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegrator:::CLASS
org.apache.commons.math.ode.nonstiff.GillIntegrator.STATIC_C has only one value
org.apache.commons.math.ode.nonstiff.GillIntegrator.STATIC_C[] == [0.5, 0.5, 1.0]
org.apache.commons.math.ode.nonstiff.GillIntegrator.STATIC_C[] elements one of { 0.5, 1.0 }
org.apache.commons.math.ode.nonstiff.GillIntegrator.STATIC_C[] sorted by <=
org.apache.commons.math.ode.nonstiff.GillIntegrator.STATIC_A has only one value
org.apache.commons.math.ode.nonstiff.GillIntegrator.STATIC_A.getClass().getName() == double[][].class
org.apache.commons.math.ode.nonstiff.GillIntegrator.STATIC_A[] contains no nulls and has only one value, of length 3
org.apache.commons.math.ode.nonstiff.GillIntegrator.STATIC_A[] elements != null
org.apache.commons.math.ode.nonstiff.GillIntegrator.STATIC_B has only one value
org.apache.commons.math.ode.nonstiff.GillIntegrator.STATIC_B[] == [0.16666666666666666, 0.09763107293781748, 0.5690355937288492, 0.16666666666666666]
org.apache.commons.math.ode.nonstiff.GillIntegrator.STATIC_B[] elements one of { 0.09763107293781748, 0.16666666666666666, 0.5690355937288492 }
size(org.apache.commons.math.ode.nonstiff.GillIntegrator.STATIC_C[]) == 3
size(org.apache.commons.math.ode.nonstiff.GillIntegrator.STATIC_A[]) == 3
size(org.apache.commons.math.ode.nonstiff.GillIntegrator.STATIC_B[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegrator:::OBJECT
org.apache.commons.math.ode.nonstiff.GillIntegrator.STATIC_A.getClass().getName() == this.a.getClass().getName()
this.stepHandlers.getClass().getName() == this.eventsHandlersManager.states.getClass().getName()
this.c has only one value
this.c[] == [0.5, 0.5, 1.0]
this.c[] elements one of { 0.5, 1.0 }
this.c[] sorted by <=
this.a has only one value
this.a[] contains no nulls and has only one value, of length 3
this.a[] elements != null
this.b has only one value
this.b[] == [0.16666666666666666, 0.09763107293781748, 0.5690355937288492, 0.16666666666666666]
this.b[] elements one of { 0.09763107293781748, 0.16666666666666666, 0.5690355937288492 }
this.prototype.getClass().getName() == org.apache.commons.math.ode.nonstiff.GillStepInterpolator.class
this.prototype.yDotK == null
this.prototype.integrator == null
this.prototype.previousTime == Double.NaN
this.prototype.currentTime == Double.NaN
this.prototype.h == Double.NaN
this.prototype.currentState == null
this.prototype.interpolatedTime == Double.NaN
this.prototype.interpolatedState == null
this.prototype.interpolatedDerivatives == null
this.prototype.finalized == false
this.prototype.forward == true
this.prototype.dirtyState == true
this.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.name has only one value
this.name.toString == "Gill"
this.maxEvaluations == 2147483647
this.evaluations == 0
this.equations == null
size(this.c[]) == 3
size(this.a[]) == 3
size(this.b[]) == 4
org.apache.commons.math.ode.nonstiff.GillIntegrator.STATIC_A.getClass().getName() != this.prototype.getClass().getName()
org.apache.commons.math.ode.nonstiff.GillIntegrator.STATIC_A.getClass().getName() != this.stepHandlers.getClass().getName()
this.prototype.getClass().getName() != this.stepHandlers.getClass().getName()
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegrator.GillIntegrator(double):::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegrator.GillIntegrator(double):::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest$1:::OBJECT
this has only one value
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest$1.(org.apache.commons.math.ode.nonstiff.GillIntegratorTest):::ENTER
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest$1.(org.apache.commons.math.ode.nonstiff.GillIntegratorTest):::EXIT
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.GillIntegratorTest.this)
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest$1.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::ENTER
interpolator has only one value
interpolator.getClass().getName() == org.apache.commons.math.ode.sampling.DummyStepInterpolator.class
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest$1.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::EXIT
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.GillIntegratorTest.this)
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest$1.requiresDenseOutput():::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest$1.requiresDenseOutput():::EXIT
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.GillIntegratorTest.this)
return == false
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest$1.requiresDenseOutput():::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest$1.reset():::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest$1.reset():::EXIT
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.GillIntegratorTest.this)
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest$2:::CLASS
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest$2:::OBJECT
this has only one value
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest$2.(org.apache.commons.math.ode.nonstiff.GillIntegratorTest):::ENTER
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest$2.(org.apache.commons.math.ode.nonstiff.GillIntegratorTest):::EXIT
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.GillIntegratorTest.this)
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest$2.computeDerivatives(double, double[], double[]):::ENTER
dot[] elements one of { 0.0, 1.0 }
dot[] one of { [0.0], [1.0] }
size(y[]) == 1
size(dot[]) == 1
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest$2.computeDerivatives(double, double[], double[]):::EXIT
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.GillIntegratorTest.this)
y[] == orig(y[])
dot[] == [1.0]
dot[] elements == 1.0
dot[] >= orig(dot[]) (elementwise)
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest$2.getDimension():::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest$2.getDimension():::EXIT
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.GillIntegratorTest.this)
return == 1
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest$KeplerStepHandler:::OBJECT
this has only one value
this.pb has only one value
this.pb.e == 0.9
this.pb.y has only one value
this.pb.n == 4
this.pb.calls >= 0
this.pb.t0 == 0.0
this.pb.y0 has only one value
this.pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
this.pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
this.pb.t1 == 20.0
this.pb.errorScale has only one value
this.pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
this.pb.errorScale[] elements == 1.0
size(this.pb.y[]) == 4
size(this.pb.y0[]) == 4
size(this.pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest$KeplerStepHandler.KeplerStepHandler(org.apache.commons.math.ode.TestProblem3):::ENTER
pb has only one value
pb.e == 0.9
pb.y has only one value
pb.y[] == [0.0, 0.0, 0.0, 0.0]
pb.y[] elements == 0.0
pb.n == 4
pb.calls == 0
pb.t0 == 0.0
pb.y0 has only one value
pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
pb.t1 == 20.0
pb.errorScale has only one value
pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
pb.errorScale[] elements == 1.0
size(pb.y[]) == 4
size(pb.y0[]) == 4
size(pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest$KeplerStepHandler.KeplerStepHandler(org.apache.commons.math.ode.TestProblem3):::EXIT
pb.e == orig(pb.e)
pb.y == orig(pb.y)
pb.y[] == orig(pb.y[])
pb.n == orig(pb.n)
pb.calls == orig(pb.calls)
pb.t0 == orig(pb.t0)
pb.y0 == orig(pb.y0)
pb.y0[] == orig(pb.y0[])
pb.t1 == orig(pb.t1)
pb.errorScale == orig(pb.errorScale)
pb.errorScale[] == orig(pb.errorScale[])
this.maxError == 0.0
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
pb.e == 0.9
pb.y has only one value
pb.y[] == [0.0, 0.0, 0.0, 0.0]
pb.y[] elements == 0.0
pb.n == 4
pb.calls == 0
pb.t0 == 0.0
pb.y0 has only one value
pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
pb.t1 == 20.0
pb.errorScale has only one value
pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
pb.errorScale[] elements == 1.0
size(pb.y[]) == 4
size(pb.y0[]) == 4
size(pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest$KeplerStepHandler.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::ENTER
interpolator has only one value
interpolator.getClass().getName() == org.apache.commons.math.ode.sampling.DummyStepInterpolator.class
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest$KeplerStepHandler.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::EXIT
this.pb == orig(this.pb)
this.pb.e == orig(this.pb.e)
this.pb.y == orig(this.pb.y)
this.pb.n == orig(this.pb.n)
this.pb.calls == orig(this.pb.calls)
this.pb.t0 == orig(this.pb.t0)
this.pb.y0 == orig(this.pb.y0)
this.pb.y0[] == orig(this.pb.y0[])
this.pb.t1 == orig(this.pb.t1)
this.pb.errorScale == orig(this.pb.errorScale)
this.pb.errorScale[] == orig(this.pb.errorScale[])
size(this.pb.y[]) == orig(size(this.pb.y[]))
this.pb.y[] elements != 0
this.maxError >= orig(this.maxError)
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest$KeplerStepHandler.requiresDenseOutput():::ENTER
this.maxError == 0.0
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest$KeplerStepHandler.requiresDenseOutput():::EXIT
this.maxError == orig(this.maxError)
this.pb == orig(this.pb)
this.pb.e == orig(this.pb.e)
this.pb.y == orig(this.pb.y)
this.pb.y[] == orig(this.pb.y[])
this.pb.n == orig(this.pb.n)
this.pb.calls == orig(this.pb.calls)
this.pb.t0 == orig(this.pb.t0)
this.pb.y0 == orig(this.pb.y0)
this.pb.y0[] == orig(this.pb.y0[])
this.pb.t1 == orig(this.pb.t1)
this.pb.errorScale == orig(this.pb.errorScale)
this.pb.errorScale[] == orig(this.pb.errorScale[])
this.maxError == 0.0
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
return == false
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest$KeplerStepHandler.requiresDenseOutput():::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest$KeplerStepHandler.reset():::ENTER
this.maxError == 0.0
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest$KeplerStepHandler.reset():::EXIT
this.maxError == orig(this.maxError)
this.pb == orig(this.pb)
this.pb.e == orig(this.pb.e)
this.pb.y == orig(this.pb.y)
this.pb.y[] == orig(this.pb.y[])
this.pb.n == orig(this.pb.n)
this.pb.calls == orig(this.pb.calls)
this.pb.t0 == orig(this.pb.t0)
this.pb.y0 == orig(this.pb.y0)
this.pb.y0[] == orig(this.pb.y0[])
this.pb.t1 == orig(this.pb.t1)
this.pb.errorScale == orig(this.pb.errorScale)
this.pb.errorScale[] == orig(this.pb.errorScale[])
this.maxError == 0.0
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest:::OBJECT
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.GillIntegratorTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.GillIntegratorTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.testBackward():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.testBackward():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.testBigStep():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.testBigStep():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.testDecreasingSteps():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.testDecreasingSteps():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.testDimensionCheck():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.testDimensionCheck():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.testKepler():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.testKepler():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.testSmallStep():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.testSmallStep():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.testStepSize():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.testStepSize():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.testUnstableDerivative():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.testUnstableDerivative():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.GillStepInterpolator:::CLASS
org.apache.commons.math.ode.nonstiff.GillStepInterpolator.TWO_MINUS_SQRT_2 == 0.5857864376269049
org.apache.commons.math.ode.nonstiff.GillStepInterpolator.TWO_PLUS_SQRT_2 == 3.414213562373095
===========================================================================
org.apache.commons.math.ode.nonstiff.GillStepInterpolator:::OBJECT
this.integrator.stepHandlers.getClass().getName() == this.integrator.eventsHandlersManager.states.getClass().getName()
this.yDotK.getClass().getName() == double[][].class
this.yDotK[] elements != null
this.integrator.getClass().getName() == org.apache.commons.math.ode.nonstiff.GillIntegrator.class
this.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.integrator.eventsHandlersManager.states[] elements != null
this.integrator.eventsHandlersManager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
this.integrator.eventsHandlersManager.first == null
this.integrator.eventsHandlersManager.initialized == false
this.integrator.name has only one value
this.integrator.name.toString == "Gill"
this.integrator.maxEvaluations == 2147483647
this.dirtyState == true
size(this.yDotK[]) == 4
size(this.integrator.eventsHandlersManager.states[]) one of { 0, 1, 2 }
size(this.currentState[]) one of { 1, 2, 4 }
size(this.interpolatedState[]) one of { 1, 2, 4 }
size(this.interpolatedDerivatives[]) one of { 1, 2, 4 }
this.yDotK.getClass().getName() != this.integrator.getClass().getName()
this.yDotK.getClass().getName() != this.integrator.stepHandlers.getClass().getName()
this.yDotK.getClass().getName() != this.integrator.equations.getClass().getName()
this.integrator.getClass().getName() != this.integrator.stepHandlers.getClass().getName()
this.integrator.getClass().getName() != this.integrator.equations.getClass().getName()
this.integrator.stepHandlers.getClass().getName() != this.integrator.equations.getClass().getName()
===========================================================================
org.apache.commons.math.ode.nonstiff.GillStepInterpolator.GillStepInterpolator():::EXIT
this.yDotK == null
this.integrator == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.finalized == false
this.forward == true
===========================================================================
org.apache.commons.math.ode.nonstiff.GillStepInterpolator.GillStepInterpolator(org.apache.commons.math.ode.nonstiff.GillStepInterpolator):::ENTER
org.apache.commons.math.ode.nonstiff.GillStepInterpolator.TWO_MINUS_SQRT_2 == 0.5857864376269049
org.apache.commons.math.ode.nonstiff.GillStepInterpolator.TWO_PLUS_SQRT_2 == 3.414213562373095
interpolator.yDotK.getClass().getName() == double[][].class
interpolator.yDotK[] contains no nulls and has only one value, of length 4
interpolator.yDotK[] elements != null
interpolator.integrator.getClass().getName() == org.apache.commons.math.ode.nonstiff.GillIntegrator.class
interpolator.integrator.stepHandlers has only one value
interpolator.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.stepSize one of { 0.0019999999994659845, 0.005999999999999999 }
interpolator.integrator.eventsHandlersManager has only one value
interpolator.integrator.name has only one value
interpolator.integrator.name.toString == "Gill"
interpolator.integrator.maxEvaluations == 2147483647
interpolator.integrator.equations has only one value
interpolator.integrator.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem3.class
interpolator.h one of { 0.0019999999994659845, 0.005999999999999999, Double.NaN }
interpolator.h <= 0.006000000000000227
interpolator.currentState[] elements != 0
interpolator.interpolatedState[] elements != 0
interpolator.interpolatedDerivatives[] elements != 0
interpolator.finalized == true
interpolator.forward == true
interpolator.dirtyState == true
size(interpolator.yDotK[]) == 4
size(interpolator.currentState[]) == 4
size(interpolator.interpolatedState[]) == 4
size(interpolator.interpolatedDerivatives[]) == 4
interpolator.yDotK.getClass().getName() != interpolator.integrator.getClass().getName()
interpolator.yDotK.getClass().getName() != interpolator.integrator.stepHandlers.getClass().getName()
interpolator.yDotK.getClass().getName() != interpolator.integrator.equations.getClass().getName()
interpolator.integrator.getClass().getName() != interpolator.integrator.stepHandlers.getClass().getName()
interpolator.integrator.getClass().getName() != interpolator.integrator.equations.getClass().getName()
interpolator.integrator.stepHandlers.getClass().getName() != interpolator.integrator.equations.getClass().getName()
===========================================================================
org.apache.commons.math.ode.nonstiff.GillStepInterpolator.GillStepInterpolator(org.apache.commons.math.ode.nonstiff.GillStepInterpolator):::EXIT
org.apache.commons.math.ode.nonstiff.GillStepInterpolator.TWO_MINUS_SQRT_2 == orig(org.apache.commons.math.ode.nonstiff.GillStepInterpolator.TWO_MINUS_SQRT_2)
org.apache.commons.math.ode.nonstiff.GillStepInterpolator.TWO_PLUS_SQRT_2 == orig(org.apache.commons.math.ode.nonstiff.GillStepInterpolator.TWO_PLUS_SQRT_2)
this.yDotK.getClass().getName() == interpolator.yDotK.getClass().getName()
this.yDotK.getClass().getName() == orig(interpolator.yDotK.getClass().getName())
interpolator.yDotK == orig(interpolator.yDotK)
interpolator.yDotK[] == orig(interpolator.yDotK[])
interpolator.integrator == orig(interpolator.integrator)
interpolator.integrator.getClass().getName() == orig(interpolator.integrator.getClass().getName())
interpolator.integrator.stepHandlers == orig(interpolator.integrator.stepHandlers)
interpolator.integrator.stepHandlers.getClass().getName() == orig(interpolator.integrator.stepHandlers.getClass().getName())
interpolator.integrator.stepStart == orig(interpolator.integrator.stepStart)
interpolator.integrator.stepSize == orig(interpolator.integrator.stepSize)
interpolator.integrator.eventsHandlersManager == orig(interpolator.integrator.eventsHandlersManager)
interpolator.integrator.name == orig(interpolator.integrator.name)
interpolator.integrator.name.toString == orig(interpolator.integrator.name.toString)
interpolator.integrator.maxEvaluations == orig(interpolator.integrator.maxEvaluations)
interpolator.integrator.evaluations == orig(interpolator.integrator.evaluations)
interpolator.integrator.equations == orig(interpolator.integrator.equations)
interpolator.integrator.equations.getClass().getName() == orig(interpolator.integrator.equations.getClass().getName())
interpolator.currentState == orig(interpolator.currentState)
interpolator.currentState[] == orig(interpolator.currentState[])
interpolator.interpolatedState == orig(interpolator.interpolatedState)
interpolator.interpolatedState[] == orig(interpolator.interpolatedState[])
interpolator.interpolatedDerivatives == orig(interpolator.interpolatedDerivatives)
interpolator.interpolatedDerivatives[] == orig(interpolator.interpolatedDerivatives[])
interpolator.finalized == orig(interpolator.finalized)
interpolator.forward == orig(interpolator.forward)
interpolator.dirtyState == orig(interpolator.dirtyState)
this.integrator == null
this.h one of { 0.0019999999994659845, 0.005999999999999999, Double.NaN }
this.h <= 0.006000000000000227
this.currentState[] elements != 0
this.interpolatedState[] elements != 0
this.interpolatedDerivatives[] elements != 0
this.finalized == true
this.forward == true
interpolator.yDotK[] contains no nulls and has only one value, of length 4
interpolator.yDotK[] elements != null
interpolator.integrator.getClass().getName() == org.apache.commons.math.ode.nonstiff.GillIntegrator.class
interpolator.integrator.stepHandlers has only one value
interpolator.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.stepSize one of { 0.0019999999994659845, 0.005999999999999999 }
interpolator.integrator.eventsHandlersManager has only one value
interpolator.integrator.name has only one value
interpolator.integrator.name.toString == "Gill"
interpolator.integrator.maxEvaluations == 2147483647
interpolator.integrator.equations has only one value
interpolator.integrator.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem3.class
interpolator.h one of { 0.0019999999994659845, 0.005999999999999999, Double.NaN }
interpolator.h <= 0.006000000000000227
interpolator.currentState[] elements != 0
interpolator.interpolatedState[] elements != 0
interpolator.interpolatedDerivatives[] elements != 0
interpolator.finalized == true
interpolator.forward == true
interpolator.dirtyState == true
size(this.currentState[]) == 4
size(this.interpolatedState[]) == 4
size(this.interpolatedDerivatives[]) == 4
size(interpolator.yDotK[]) == 4
size(interpolator.currentState[]) == 4
size(interpolator.interpolatedState[]) == 4
size(interpolator.interpolatedDerivatives[]) == 4
this.yDotK.getClass().getName() != interpolator.integrator.getClass().getName()
this.yDotK.getClass().getName() != interpolator.integrator.stepHandlers.getClass().getName()
this.yDotK.getClass().getName() != interpolator.integrator.equations.getClass().getName()
interpolator.integrator.getClass().getName() != interpolator.integrator.stepHandlers.getClass().getName()
interpolator.integrator.getClass().getName() != interpolator.integrator.equations.getClass().getName()
interpolator.integrator.stepHandlers.getClass().getName() != interpolator.integrator.equations.getClass().getName()
===========================================================================
org.apache.commons.math.ode.nonstiff.GillStepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::ENTER
theta >= 0.0
===========================================================================
org.apache.commons.math.ode.nonstiff.GillStepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::EXIT
org.apache.commons.math.ode.nonstiff.GillStepInterpolator.TWO_MINUS_SQRT_2 == orig(org.apache.commons.math.ode.nonstiff.GillStepInterpolator.TWO_MINUS_SQRT_2)
org.apache.commons.math.ode.nonstiff.GillStepInterpolator.TWO_PLUS_SQRT_2 == orig(org.apache.commons.math.ode.nonstiff.GillStepInterpolator.TWO_PLUS_SQRT_2)
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.integrator.stepHandlers == orig(this.integrator.stepHandlers)
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.stepHandlers.getClass().getName())
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.eventsHandlersManager.states.getClass().getName())
this.integrator.stepStart == orig(this.integrator.stepStart)
this.integrator.stepSize == orig(this.integrator.stepSize)
this.integrator.eventsHandlersManager == orig(this.integrator.eventsHandlersManager)
this.integrator.eventsHandlersManager.states == orig(this.integrator.eventsHandlersManager.states)
this.integrator.eventsHandlersManager.states[] == orig(this.integrator.eventsHandlersManager.states[])
this.integrator.eventsHandlersManager.first == orig(this.integrator.eventsHandlersManager.first)
this.integrator.eventsHandlersManager.initialized == orig(this.integrator.eventsHandlersManager.initialized)
this.integrator.name == orig(this.integrator.name)
this.integrator.name.toString == orig(this.integrator.name.toString)
this.integrator.maxEvaluations == orig(this.integrator.maxEvaluations)
this.integrator.evaluations == orig(this.integrator.evaluations)
this.integrator.equations == orig(this.integrator.equations)
this.integrator.equations.getClass().getName() == orig(this.integrator.equations.getClass().getName())
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
size(this.interpolatedState[]) == orig(size(this.interpolatedState[]))
size(this.interpolatedDerivatives[]) == orig(size(this.interpolatedDerivatives[]))
===========================================================================
org.apache.commons.math.ode.nonstiff.GillStepInterpolator.doCopy():::ENTER
this.yDotK[] contains no nulls and has only one value, of length 4
this.integrator.stepHandlers has only one value
this.integrator.stepSize one of { 0.0019999999994659845, 0.005999999999999999 }
this.integrator.eventsHandlersManager has only one value
this.integrator.eventsHandlersManager.states has only one value
this.integrator.eventsHandlersManager.states[] == []
this.integrator.eventsHandlersManager.states[].getClass().getName() == []
this.integrator.equations has only one value
this.integrator.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem3.class
this.h one of { 0.0019999999994659845, 0.005999999999999999, Double.NaN }
this.h <= 0.006000000000000227
this.currentState[] elements != 0
this.interpolatedState[] elements != 0
this.interpolatedDerivatives[] elements != 0
this.finalized == true
this.forward == true
size(this.currentState[]) == 4
size(this.interpolatedState[]) == 4
size(this.interpolatedDerivatives[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.GillStepInterpolator.doCopy():::EXIT
org.apache.commons.math.ode.nonstiff.GillStepInterpolator.TWO_MINUS_SQRT_2 == orig(org.apache.commons.math.ode.nonstiff.GillStepInterpolator.TWO_MINUS_SQRT_2)
org.apache.commons.math.ode.nonstiff.GillStepInterpolator.TWO_PLUS_SQRT_2 == orig(org.apache.commons.math.ode.nonstiff.GillStepInterpolator.TWO_PLUS_SQRT_2)
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.integrator.stepHandlers == orig(this.integrator.stepHandlers)
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.stepHandlers.getClass().getName())
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.eventsHandlersManager.states.getClass().getName())
this.integrator.stepStart == orig(this.integrator.stepStart)
this.integrator.stepSize == orig(this.integrator.stepSize)
this.integrator.eventsHandlersManager == orig(this.integrator.eventsHandlersManager)
this.integrator.eventsHandlersManager.states == orig(this.integrator.eventsHandlersManager.states)
this.integrator.eventsHandlersManager.states[] == orig(this.integrator.eventsHandlersManager.states[])
this.integrator.eventsHandlersManager.first == orig(this.integrator.eventsHandlersManager.first)
this.integrator.eventsHandlersManager.initialized == orig(this.integrator.eventsHandlersManager.initialized)
this.integrator.name == orig(this.integrator.name)
this.integrator.name.toString == orig(this.integrator.name.toString)
this.integrator.maxEvaluations == orig(this.integrator.maxEvaluations)
this.integrator.evaluations == orig(this.integrator.evaluations)
this.integrator.equations == orig(this.integrator.equations)
this.integrator.equations.getClass().getName() == orig(this.integrator.equations.getClass().getName())
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.yDotK[] contains no nulls and has only one value, of length 4
this.integrator.stepHandlers has only one value
this.integrator.stepSize one of { 0.0019999999994659845, 0.005999999999999999 }
this.integrator.eventsHandlersManager has only one value
this.integrator.eventsHandlersManager.states has only one value
this.integrator.eventsHandlersManager.states[] == []
this.integrator.eventsHandlersManager.states[].getClass().getName() == []
this.integrator.equations has only one value
this.integrator.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem3.class
this.h one of { 0.0019999999994659845, 0.005999999999999999, Double.NaN }
this.h <= 0.006000000000000227
this.currentState[] elements != 0
this.interpolatedState[] elements != 0
this.interpolatedDerivatives[] elements != 0
this.finalized == true
this.forward == true
return.getClass().getName() == org.apache.commons.math.ode.nonstiff.GillStepInterpolator.class
size(this.currentState[]) == 4
size(this.interpolatedState[]) == 4
size(this.interpolatedDerivatives[]) == 4
this.yDotK.getClass().getName() != return.getClass().getName()
this.integrator.getClass().getName() != return.getClass().getName()
this.integrator.stepHandlers.getClass().getName() != return.getClass().getName()
this.integrator.equations.getClass().getName() != return.getClass().getName()
===========================================================================
org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest:::OBJECT
===========================================================================
org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest.GillStepInterpolatorTest():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest.serialization():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest.serialization():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest.testDerivativesConsistency():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest.testDerivativesConsistency():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegrator:::CLASS
org.apache.commons.math.ode.nonstiff.MidpointIntegrator.STATIC_C has only one value
org.apache.commons.math.ode.nonstiff.MidpointIntegrator.STATIC_C[] == [0.5]
org.apache.commons.math.ode.nonstiff.MidpointIntegrator.STATIC_C[] elements == 0.5
org.apache.commons.math.ode.nonstiff.MidpointIntegrator.STATIC_A has only one value
org.apache.commons.math.ode.nonstiff.MidpointIntegrator.STATIC_A.getClass().getName() == double[][].class
org.apache.commons.math.ode.nonstiff.MidpointIntegrator.STATIC_A[] contains no nulls and has only one value, of length 1
org.apache.commons.math.ode.nonstiff.MidpointIntegrator.STATIC_A[] elements has only one value
org.apache.commons.math.ode.nonstiff.MidpointIntegrator.STATIC_A[] elements != null
org.apache.commons.math.ode.nonstiff.MidpointIntegrator.STATIC_B has only one value
org.apache.commons.math.ode.nonstiff.MidpointIntegrator.STATIC_B[] == [0.0, 1.0]
org.apache.commons.math.ode.nonstiff.MidpointIntegrator.STATIC_B[] elements one of { 0.0, 1.0 }
org.apache.commons.math.ode.nonstiff.MidpointIntegrator.STATIC_B[] sorted by <
size(org.apache.commons.math.ode.nonstiff.MidpointIntegrator.STATIC_C[]) == 1
size(org.apache.commons.math.ode.nonstiff.MidpointIntegrator.STATIC_A[]) == 1
size(org.apache.commons.math.ode.nonstiff.MidpointIntegrator.STATIC_B[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegrator:::OBJECT
org.apache.commons.math.ode.nonstiff.MidpointIntegrator.STATIC_A.getClass().getName() == this.a.getClass().getName()
this.stepHandlers.getClass().getName() == this.eventsHandlersManager.states.getClass().getName()
this.c has only one value
this.c[] == [0.5]
this.c[] elements == 0.5
this.a has only one value
this.a[] contains no nulls and has only one value, of length 1
this.a[] elements has only one value
this.a[] elements != null
this.b has only one value
this.b[] == [0.0, 1.0]
this.b[] elements one of { 0.0, 1.0 }
this.b[] sorted by <
this.prototype.getClass().getName() == org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator.class
this.prototype.yDotK == null
this.prototype.integrator == null
this.prototype.previousTime == Double.NaN
this.prototype.currentTime == Double.NaN
this.prototype.h == Double.NaN
this.prototype.currentState == null
this.prototype.interpolatedTime == Double.NaN
this.prototype.interpolatedState == null
this.prototype.interpolatedDerivatives == null
this.prototype.finalized == false
this.prototype.forward == true
this.prototype.dirtyState == true
this.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.name has only one value
this.name.toString == "midpoint"
this.maxEvaluations == 2147483647
this.evaluations == 0
this.equations == null
size(this.c[]) == 1
size(this.a[]) == 1
size(this.b[]) == 2
org.apache.commons.math.ode.nonstiff.MidpointIntegrator.STATIC_A.getClass().getName() != this.prototype.getClass().getName()
org.apache.commons.math.ode.nonstiff.MidpointIntegrator.STATIC_A.getClass().getName() != this.stepHandlers.getClass().getName()
this.prototype.getClass().getName() != this.stepHandlers.getClass().getName()
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegrator.MidpointIntegrator(double):::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegrator.MidpointIntegrator(double):::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest$1:::OBJECT
this has only one value
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest$1.(org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest):::ENTER
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest$1.(org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest):::EXIT
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.this)
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest$1.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::ENTER
interpolator has only one value
interpolator.getClass().getName() == org.apache.commons.math.ode.sampling.DummyStepInterpolator.class
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest$1.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::EXIT
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.this)
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest$1.requiresDenseOutput():::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest$1.requiresDenseOutput():::EXIT
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.this)
return == false
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest$1.requiresDenseOutput():::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest$1.reset():::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest$1.reset():::EXIT
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.this)
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest$2:::CLASS
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest$2:::OBJECT
this has only one value
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest$2.(org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest):::ENTER
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest$2.(org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest):::EXIT
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.this)
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest$2.computeDerivatives(double, double[], double[]):::ENTER
dot[] elements one of { 0.0, 1.0 }
dot[] one of { [0.0], [1.0] }
size(y[]) == 1
size(dot[]) == 1
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest$2.computeDerivatives(double, double[], double[]):::EXIT
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.this)
y[] == orig(y[])
dot[] == [1.0]
dot[] elements == 1.0
dot[] >= orig(dot[]) (elementwise)
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest$2.getDimension():::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest$2.getDimension():::EXIT
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.this)
return == 1
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest:::OBJECT
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.MidpointIntegratorTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.MidpointIntegratorTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.testBackward():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.testBackward():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.testBigStep():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.testBigStep():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.testDecreasingSteps():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.testDecreasingSteps():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.testDimensionCheck():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.testDimensionCheck():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.testSmallStep():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.testSmallStep():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.testStepSize():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.testStepSize():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator:::CLASS
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator:::OBJECT
this.yDotK.getClass().getName() == double[][].class
this.yDotK[] elements != null
this.integrator.getClass().getName() == org.apache.commons.math.ode.nonstiff.MidpointIntegrator.class
this.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.integrator.eventsHandlersManager.states[] elements != null
this.integrator.eventsHandlersManager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
this.integrator.eventsHandlersManager.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.integrator.eventsHandlersManager.states.getClass().getName() == java.util.ArrayList.class
this.integrator.eventsHandlersManager.first == null
this.integrator.eventsHandlersManager.initialized == false
this.integrator.name has only one value
this.integrator.name.toString == "midpoint"
this.integrator.maxEvaluations == 2147483647
this.integrator.evaluations >= 2
this.dirtyState == true
size(this.yDotK[]) == 2
size(this.integrator.eventsHandlersManager.states[]) one of { 0, 2 }
size(this.integrator.eventsHandlersManager.states[])-1 != 0
size(this.currentState[]) one of { 1, 2, 4 }
size(this.interpolatedState[]) one of { 1, 2, 4 }
size(this.interpolatedDerivatives[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator.MidpointStepInterpolator():::EXIT
this.yDotK == null
this.integrator == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.finalized == false
this.forward == true
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator.MidpointStepInterpolator(org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator):::ENTER
interpolator.yDotK.getClass().getName() == double[][].class
interpolator.yDotK[] contains no nulls and has only one value, of length 2
interpolator.yDotK[] elements != null
interpolator.integrator.getClass().getName() == org.apache.commons.math.ode.nonstiff.MidpointIntegrator.class
interpolator.integrator.stepHandlers has only one value
interpolator.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.stepSize == 0.004
interpolator.integrator.eventsHandlersManager has only one value
interpolator.integrator.name has only one value
interpolator.integrator.name.toString == "midpoint"
interpolator.integrator.maxEvaluations == 2147483647
interpolator.integrator.equations has only one value
interpolator.integrator.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem1.class
interpolator.h one of { 0.004, Double.NaN }
interpolator.currentState[] sorted by >
interpolator.interpolatedState[] sorted by >
interpolator.interpolatedDerivatives[] sorted by <
interpolator.finalized == true
interpolator.forward == true
interpolator.dirtyState == true
size(interpolator.yDotK[]) == 2
size(interpolator.currentState[]) == 2
size(interpolator.interpolatedState[]) == 2
size(interpolator.interpolatedDerivatives[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator.MidpointStepInterpolator(org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator):::EXIT
interpolator.yDotK == orig(interpolator.yDotK)
interpolator.yDotK.getClass().getName() == orig(interpolator.yDotK.getClass().getName())
interpolator.yDotK[] == orig(interpolator.yDotK[])
interpolator.integrator == orig(interpolator.integrator)
interpolator.integrator.getClass().getName() == orig(interpolator.integrator.getClass().getName())
interpolator.integrator.stepHandlers == orig(interpolator.integrator.stepHandlers)
interpolator.integrator.stepHandlers.getClass().getName() == orig(interpolator.integrator.stepHandlers.getClass().getName())
interpolator.integrator.stepStart == orig(interpolator.integrator.stepStart)
interpolator.integrator.stepSize == orig(interpolator.integrator.stepSize)
interpolator.integrator.eventsHandlersManager == orig(interpolator.integrator.eventsHandlersManager)
interpolator.integrator.name == orig(interpolator.integrator.name)
interpolator.integrator.name.toString == orig(interpolator.integrator.name.toString)
interpolator.integrator.maxEvaluations == orig(interpolator.integrator.maxEvaluations)
interpolator.integrator.evaluations == orig(interpolator.integrator.evaluations)
interpolator.integrator.equations == orig(interpolator.integrator.equations)
interpolator.integrator.equations.getClass().getName() == orig(interpolator.integrator.equations.getClass().getName())
interpolator.currentState == orig(interpolator.currentState)
interpolator.currentState[] == orig(interpolator.currentState[])
interpolator.interpolatedState == orig(interpolator.interpolatedState)
interpolator.interpolatedState[] == orig(interpolator.interpolatedState[])
interpolator.interpolatedDerivatives == orig(interpolator.interpolatedDerivatives)
interpolator.interpolatedDerivatives[] == orig(interpolator.interpolatedDerivatives[])
interpolator.finalized == orig(interpolator.finalized)
interpolator.forward == orig(interpolator.forward)
interpolator.dirtyState == orig(interpolator.dirtyState)
this.integrator == null
this.h one of { 0.004, Double.NaN }
this.currentState[] sorted by >
this.interpolatedState[] sorted by >
this.interpolatedDerivatives[] sorted by <
this.finalized == true
this.forward == true
interpolator.yDotK.getClass().getName() == double[][].class
interpolator.yDotK[] contains no nulls and has only one value, of length 2
interpolator.yDotK[] elements != null
interpolator.integrator.getClass().getName() == org.apache.commons.math.ode.nonstiff.MidpointIntegrator.class
interpolator.integrator.stepHandlers has only one value
interpolator.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.stepSize == 0.004
interpolator.integrator.eventsHandlersManager has only one value
interpolator.integrator.name has only one value
interpolator.integrator.name.toString == "midpoint"
interpolator.integrator.maxEvaluations == 2147483647
interpolator.integrator.equations has only one value
interpolator.integrator.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem1.class
interpolator.h one of { 0.004, Double.NaN }
interpolator.currentState[] sorted by >
interpolator.interpolatedState[] sorted by >
interpolator.interpolatedDerivatives[] sorted by <
interpolator.finalized == true
interpolator.forward == true
interpolator.dirtyState == true
size(this.currentState[]) == 2
size(this.interpolatedState[]) == 2
size(this.interpolatedDerivatives[]) == 2
size(interpolator.yDotK[]) == 2
size(interpolator.currentState[]) == 2
size(interpolator.interpolatedState[]) == 2
size(interpolator.interpolatedDerivatives[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::ENTER
theta >= 0.0
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::EXIT
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.integrator.stepHandlers == orig(this.integrator.stepHandlers)
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.stepHandlers.getClass().getName())
this.integrator.stepStart == orig(this.integrator.stepStart)
this.integrator.stepSize == orig(this.integrator.stepSize)
this.integrator.eventsHandlersManager == orig(this.integrator.eventsHandlersManager)
this.integrator.eventsHandlersManager.states == orig(this.integrator.eventsHandlersManager.states)
this.integrator.eventsHandlersManager.states[] == orig(this.integrator.eventsHandlersManager.states[])
this.integrator.eventsHandlersManager.states.getClass().getName() == orig(this.integrator.eventsHandlersManager.states.getClass().getName())
this.integrator.eventsHandlersManager.first == orig(this.integrator.eventsHandlersManager.first)
this.integrator.eventsHandlersManager.initialized == orig(this.integrator.eventsHandlersManager.initialized)
this.integrator.name == orig(this.integrator.name)
this.integrator.name.toString == orig(this.integrator.name.toString)
this.integrator.maxEvaluations == orig(this.integrator.maxEvaluations)
this.integrator.evaluations == orig(this.integrator.evaluations)
this.integrator.equations == orig(this.integrator.equations)
this.integrator.equations.getClass().getName() == orig(this.integrator.equations.getClass().getName())
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
size(this.interpolatedState[]) == orig(size(this.interpolatedState[]))
size(this.interpolatedDerivatives[]) == orig(size(this.interpolatedDerivatives[]))
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator.doCopy():::ENTER
this.yDotK[] contains no nulls and has only one value, of length 2
this.integrator.stepHandlers has only one value
this.integrator.stepSize == 0.004
this.integrator.eventsHandlersManager has only one value
this.integrator.eventsHandlersManager.states has only one value
this.integrator.eventsHandlersManager.states[] == []
this.integrator.eventsHandlersManager.states[].getClass().getName() == []
this.integrator.equations has only one value
this.integrator.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem1.class
this.h one of { 0.004, Double.NaN }
this.currentState[] sorted by >
this.interpolatedState[] sorted by >
this.interpolatedDerivatives[] sorted by <
this.finalized == true
this.forward == true
size(this.currentState[]) == 2
size(this.interpolatedState[]) == 2
size(this.interpolatedDerivatives[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator.doCopy():::EXIT
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.integrator.stepHandlers == orig(this.integrator.stepHandlers)
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.stepHandlers.getClass().getName())
this.integrator.stepStart == orig(this.integrator.stepStart)
this.integrator.stepSize == orig(this.integrator.stepSize)
this.integrator.eventsHandlersManager == orig(this.integrator.eventsHandlersManager)
this.integrator.eventsHandlersManager.states == orig(this.integrator.eventsHandlersManager.states)
this.integrator.eventsHandlersManager.states[] == orig(this.integrator.eventsHandlersManager.states[])
this.integrator.eventsHandlersManager.states.getClass().getName() == orig(this.integrator.eventsHandlersManager.states.getClass().getName())
this.integrator.eventsHandlersManager.first == orig(this.integrator.eventsHandlersManager.first)
this.integrator.eventsHandlersManager.initialized == orig(this.integrator.eventsHandlersManager.initialized)
this.integrator.name == orig(this.integrator.name)
this.integrator.name.toString == orig(this.integrator.name.toString)
this.integrator.maxEvaluations == orig(this.integrator.maxEvaluations)
this.integrator.evaluations == orig(this.integrator.evaluations)
this.integrator.equations == orig(this.integrator.equations)
this.integrator.equations.getClass().getName() == orig(this.integrator.equations.getClass().getName())
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.yDotK[] contains no nulls and has only one value, of length 2
this.integrator.stepHandlers has only one value
this.integrator.stepSize == 0.004
this.integrator.eventsHandlersManager has only one value
this.integrator.eventsHandlersManager.states has only one value
this.integrator.eventsHandlersManager.states[] == []
this.integrator.eventsHandlersManager.states[].getClass().getName() == []
this.integrator.equations has only one value
this.integrator.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem1.class
this.h one of { 0.004, Double.NaN }
this.currentState[] sorted by >
this.interpolatedState[] sorted by >
this.interpolatedDerivatives[] sorted by <
this.finalized == true
this.forward == true
return.getClass().getName() == org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator.class
size(this.currentState[]) == 2
size(this.interpolatedState[]) == 2
size(this.interpolatedDerivatives[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest:::OBJECT
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest.MidpointStepInterpolatorTest():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest.serialization():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest.serialization():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest.testDerivativesConsistency():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest.testDerivativesConsistency():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator:::OBJECT
this.c != null
this.c[] sorted by <=
this.a != null
this.a.getClass().getName() == double[][].class
this.a[] elements != null
this.b != null
this.prototype != null
this.prototype.yDotK == null
this.prototype.integrator == null
this.prototype.previousTime == Double.NaN
this.prototype.currentTime == Double.NaN
this.prototype.h == Double.NaN
this.prototype.currentState == null
this.prototype.interpolatedTime == Double.NaN
this.prototype.interpolatedState == null
this.prototype.interpolatedDerivatives == null
this.prototype.forward == true
this.prototype.dirtyState == true
this.stepHandlers != null
this.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.eventsHandlersManager != null
this.eventsHandlersManager.states != null
this.eventsHandlersManager.states[] elements != null
this.eventsHandlersManager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
this.eventsHandlersManager.states.getClass().getName() == java.util.ArrayList.class
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.name != null
this.maxEvaluations == 2147483647
this.evaluations >= 0
size(this.c[]) one of { 0, 1, 3 }
size(this.a[]) one of { 0, 1, 3 }
size(this.b[]) one of { 1, 2, 4 }
size(this.eventsHandlersManager.states[]) one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator.RungeKuttaIntegrator(java.lang.String, double[], double[][], double[], org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator, double):::ENTER
name != null
c != null
c[] sorted by <=
a != null
a.getClass().getName() == double[][].class
a[] elements != null
b != null
prototype != null
prototype.yDotK == null
prototype.integrator == null
prototype.previousTime == Double.NaN
prototype.currentTime == Double.NaN
prototype.h == Double.NaN
prototype.currentState == null
prototype.interpolatedTime == Double.NaN
prototype.interpolatedState == null
prototype.interpolatedDerivatives == null
prototype.finalized == false
prototype.forward == true
prototype.dirtyState == true
step != 0
size(c[]) one of { 0, 1, 3 }
size(a[]) one of { 0, 1, 3 }
size(b[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator.RungeKuttaIntegrator(java.lang.String, double[], double[][], double[], org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator, double):::EXIT
name.toString == orig(name.toString)
c[] == orig(c[])
a[] == orig(a[])
b[] == orig(b[])
prototype.yDotK == orig(prototype.yDotK)
prototype.integrator == orig(prototype.integrator)
prototype.currentState == orig(prototype.currentState)
prototype.interpolatedState == orig(prototype.interpolatedState)
prototype.interpolatedDerivatives == orig(prototype.interpolatedDerivatives)
prototype.finalized == orig(prototype.finalized)
prototype.forward == orig(prototype.forward)
prototype.dirtyState == orig(prototype.dirtyState)
this.prototype.finalized == false
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.evaluations == 0
this.equations == null
c[] sorted by <=
a[] elements != null
prototype.yDotK == null
prototype.integrator == null
prototype.previousTime == Double.NaN
prototype.currentTime == Double.NaN
prototype.h == Double.NaN
prototype.currentState == null
prototype.interpolatedTime == Double.NaN
prototype.interpolatedState == null
prototype.interpolatedDerivatives == null
prototype.finalized == false
prototype.forward == true
prototype.dirtyState == true
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator.integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double, double[], double, double[]):::ENTER
this.prototype.finalized == false
this.evaluations == 0
this.equations == null
equations != null
t0 == 0.0
y0 != null
t != 0
y != null
y[] elements one of { 0.0, Double.NaN }
y[] sorted by ==
size(y0[]) one of { 1, 2, 4 }
size(y[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator.integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double, double[], double, double[]):::EXIT
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a.getClass().getName() == orig(this.a.getClass().getName())
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.integrator == orig(this.prototype.integrator)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.interpolatedDerivatives == orig(this.prototype.interpolatedDerivatives)
this.prototype.forward == orig(this.prototype.forward)
this.prototype.dirtyState == orig(this.prototype.dirtyState)
this.step == orig(this.step)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
y0[] == orig(y0[])
this.equations != null
return != 0
this.evaluations > orig(this.evaluations)
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator:::OBJECT
this.yDotK.getClass().getName() == double[][].class
this.yDotK[] elements != null
this.integrator.stepHandlers != null
this.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.integrator.stepStart == Double.NaN
this.integrator.stepSize == Double.NaN
this.integrator.eventsHandlersManager != null
this.integrator.eventsHandlersManager.states != null
this.integrator.eventsHandlersManager.states[] elements != null
this.integrator.eventsHandlersManager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
this.integrator.eventsHandlersManager.states.getClass().getName() == java.util.ArrayList.class
this.integrator.eventsHandlersManager.first == null
this.integrator.eventsHandlersManager.initialized == false
this.integrator.name != null
this.integrator.maxEvaluations == 2147483647
this.integrator.evaluations == 0
this.integrator.equations != null
this.h <= 0.006000000000000227
this.dirtyState == true
size(this.yDotK[]) one of { 1, 2, 4 }
size(this.integrator.eventsHandlersManager.states[]) one of { 0, 1, 2 }
size(this.currentState[]) one of { 1, 2, 4 }
size(this.interpolatedState[]) one of { 1, 2, 4 }
size(this.interpolatedDerivatives[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator.RungeKuttaStepInterpolator():::EXIT
this.yDotK == null
this.integrator == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.finalized == false
this.forward == true
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator.RungeKuttaStepInterpolator(org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator):::ENTER
interpolator != null
interpolator.yDotK.getClass().getName() == double[][].class
interpolator.yDotK[] elements != null
interpolator.integrator.stepHandlers != null
interpolator.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.stepSize one of { 0.0019999999994659845, 0.004, 0.005999999999999999 }
interpolator.integrator.eventsHandlersManager != null
interpolator.integrator.name != null
interpolator.integrator.maxEvaluations == 2147483647
interpolator.integrator.equations != null
interpolator.h <= 0.006000000000000227
interpolator.currentState[] elements != 0
interpolator.interpolatedState[] elements != 0
interpolator.interpolatedDerivatives[] elements != 0
interpolator.finalized == true
interpolator.forward == true
interpolator.dirtyState == true
size(interpolator.yDotK[]) one of { 1, 2, 4 }
size(interpolator.currentState[]) one of { 2, 4 }
size(interpolator.interpolatedState[]) one of { 2, 4 }
size(interpolator.interpolatedDerivatives[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator.RungeKuttaStepInterpolator(org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator):::EXIT
interpolator.yDotK == orig(interpolator.yDotK)
interpolator.yDotK.getClass().getName() == orig(interpolator.yDotK.getClass().getName())
interpolator.yDotK[] == orig(interpolator.yDotK[])
interpolator.integrator == orig(interpolator.integrator)
interpolator.integrator.getClass().getName() == orig(interpolator.integrator.getClass().getName())
interpolator.integrator.stepHandlers == orig(interpolator.integrator.stepHandlers)
interpolator.integrator.stepHandlers.getClass().getName() == orig(interpolator.integrator.stepHandlers.getClass().getName())
interpolator.integrator.stepStart == orig(interpolator.integrator.stepStart)
interpolator.integrator.stepSize == orig(interpolator.integrator.stepSize)
interpolator.integrator.eventsHandlersManager == orig(interpolator.integrator.eventsHandlersManager)
interpolator.integrator.name == orig(interpolator.integrator.name)
interpolator.integrator.name.toString == orig(interpolator.integrator.name.toString)
interpolator.integrator.maxEvaluations == orig(interpolator.integrator.maxEvaluations)
interpolator.integrator.evaluations == orig(interpolator.integrator.evaluations)
interpolator.integrator.equations == orig(interpolator.integrator.equations)
interpolator.integrator.equations.getClass().getName() == orig(interpolator.integrator.equations.getClass().getName())
interpolator.currentState == orig(interpolator.currentState)
interpolator.currentState[] == orig(interpolator.currentState[])
interpolator.interpolatedState == orig(interpolator.interpolatedState)
interpolator.interpolatedState[] == orig(interpolator.interpolatedState[])
interpolator.interpolatedDerivatives == orig(interpolator.interpolatedDerivatives)
interpolator.interpolatedDerivatives[] == orig(interpolator.interpolatedDerivatives[])
interpolator.finalized == orig(interpolator.finalized)
interpolator.forward == orig(interpolator.forward)
interpolator.dirtyState == orig(interpolator.dirtyState)
this.integrator == null
this.currentState[] elements != 0
this.interpolatedState[] elements != 0
this.interpolatedDerivatives[] elements != 0
this.finalized == true
this.forward == true
interpolator.yDotK.getClass().getName() == double[][].class
interpolator.yDotK[] elements != null
interpolator.integrator.stepHandlers != null
interpolator.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.stepSize one of { 0.0019999999994659845, 0.004, 0.005999999999999999 }
interpolator.integrator.eventsHandlersManager != null
interpolator.integrator.name != null
interpolator.integrator.maxEvaluations == 2147483647
interpolator.integrator.equations != null
interpolator.h <= 0.006000000000000227
interpolator.currentState[] elements != 0
interpolator.interpolatedState[] elements != 0
interpolator.interpolatedDerivatives[] elements != 0
interpolator.finalized == true
interpolator.forward == true
interpolator.dirtyState == true
size(this.currentState[]) one of { 2, 4 }
size(this.interpolatedState[]) one of { 2, 4 }
size(this.interpolatedDerivatives[]) one of { 2, 4 }
size(interpolator.yDotK[]) one of { 1, 2, 4 }
size(interpolator.currentState[]) one of { 2, 4 }
size(interpolator.interpolatedState[]) one of { 2, 4 }
size(interpolator.interpolatedDerivatives[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator.readExternal(java.io.ObjectInput):::ENTER
this.yDotK == null
this.integrator == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.finalized == false
this.forward == true
in != null
in.getClass().getName() == java.io.ObjectInputStream.class
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator.readExternal(java.io.ObjectInput):::EXIT
this.integrator == orig(this.integrator)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.yDotK != null
this.integrator == null
this.h one of { 0.0019999999994659845, 0.004, 0.005999999999999999 }
this.currentState != null
this.currentState[] elements != 0
this.interpolatedState != null
this.interpolatedState[] elements == 0.0
this.interpolatedState[] one of { [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.interpolatedDerivatives != null
this.interpolatedDerivatives[] elements == 0.0
this.interpolatedDerivatives[] one of { [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.finalized == true
this.forward == true
size(this.currentState[]) one of { 2, 4 }
size(this.interpolatedState[]) one of { 2, 4 }
size(this.interpolatedDerivatives[]) one of { 2, 4 }
this.previousTime != orig(this.previousTime)
this.currentTime != orig(this.currentTime)
this.h != orig(this.h)
this.interpolatedTime != orig(this.interpolatedTime)
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator.reinitialize(org.apache.commons.math.ode.AbstractIntegrator, double[], double[][], boolean):::ENTER
this.yDotK == null
this.integrator == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.finalized == true
this.forward == true
rkIntegrator != null
rkIntegrator.stepHandlers != null
rkIntegrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
rkIntegrator.stepStart == Double.NaN
rkIntegrator.stepSize == Double.NaN
rkIntegrator.eventsHandlersManager != null
rkIntegrator.eventsHandlersManager.states != null
rkIntegrator.eventsHandlersManager.states[] elements != null
rkIntegrator.eventsHandlersManager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
rkIntegrator.eventsHandlersManager.states.getClass().getName() == java.util.ArrayList.class
rkIntegrator.eventsHandlersManager.first == null
rkIntegrator.eventsHandlersManager.initialized == false
rkIntegrator.name != null
rkIntegrator.maxEvaluations == 2147483647
rkIntegrator.evaluations == 0
rkIntegrator.equations != null
y != null
y[] elements == 0.0
y[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
yDotArray != null
yDotArray.getClass().getName() == double[][].class
yDotArray[] elements != null
size(rkIntegrator.eventsHandlersManager.states[]) one of { 0, 1, 2 }
size(y[]) one of { 1, 2, 4 }
size(yDotArray[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator.reinitialize(org.apache.commons.math.ode.AbstractIntegrator, double[], double[][], boolean):::EXIT
this.dirtyState == orig(this.dirtyState)
rkIntegrator.stepHandlers == orig(rkIntegrator.stepHandlers)
rkIntegrator.stepHandlers.getClass().getName() == orig(rkIntegrator.stepHandlers.getClass().getName())
rkIntegrator.eventsHandlersManager == orig(rkIntegrator.eventsHandlersManager)
rkIntegrator.eventsHandlersManager.states == orig(rkIntegrator.eventsHandlersManager.states)
rkIntegrator.eventsHandlersManager.states[] == orig(rkIntegrator.eventsHandlersManager.states[])
rkIntegrator.eventsHandlersManager.states.getClass().getName() == orig(rkIntegrator.eventsHandlersManager.states.getClass().getName())
rkIntegrator.eventsHandlersManager.first == orig(rkIntegrator.eventsHandlersManager.first)
rkIntegrator.eventsHandlersManager.initialized == orig(rkIntegrator.eventsHandlersManager.initialized)
rkIntegrator.name == orig(rkIntegrator.name)
rkIntegrator.name.toString == orig(rkIntegrator.name.toString)
rkIntegrator.maxEvaluations == orig(rkIntegrator.maxEvaluations)
rkIntegrator.evaluations == orig(rkIntegrator.evaluations)
rkIntegrator.equations == orig(rkIntegrator.equations)
rkIntegrator.equations.getClass().getName() == orig(rkIntegrator.equations.getClass().getName())
y[] == orig(y[])
yDotArray[] == orig(yDotArray[])
this.yDotK != null
this.integrator != null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState != null
this.currentState[] elements == 0.0
this.currentState[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.interpolatedTime == Double.NaN
this.interpolatedState != null
this.interpolatedState[] elements == 0.0
this.interpolatedState[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.interpolatedDerivatives != null
this.interpolatedDerivatives[] elements == 0.0
this.interpolatedDerivatives[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.finalized == false
rkIntegrator.stepHandlers != null
rkIntegrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
rkIntegrator.stepStart == Double.NaN
rkIntegrator.stepSize == Double.NaN
rkIntegrator.eventsHandlersManager != null
rkIntegrator.eventsHandlersManager.states != null
rkIntegrator.eventsHandlersManager.states[] elements != null
rkIntegrator.eventsHandlersManager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
rkIntegrator.eventsHandlersManager.states.getClass().getName() == java.util.ArrayList.class
rkIntegrator.eventsHandlersManager.first == null
rkIntegrator.eventsHandlersManager.initialized == false
rkIntegrator.name != null
rkIntegrator.maxEvaluations == 2147483647
rkIntegrator.evaluations == 0
rkIntegrator.equations != null
y[] elements == 0.0
y[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
yDotArray[] elements != null
size(rkIntegrator.eventsHandlersManager.states[]) one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator.writeExternal(java.io.ObjectOutput):::ENTER
this.yDotK != null
this.integrator == null
this.h one of { 0.0019999999994659845, 0.004, 0.005999999999999999 }
this.currentState != null
this.currentState[] elements != 0
this.interpolatedState != null
this.interpolatedState[] elements != 0
this.interpolatedDerivatives != null
this.interpolatedDerivatives[] elements != 0
this.finalized == true
this.forward == true
out != null
out.getClass().getName() == java.io.ObjectOutputStream.class
size(this.currentState[]) one of { 2, 4 }
size(this.interpolatedState[]) one of { 2, 4 }
size(this.interpolatedDerivatives[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator.writeExternal(java.io.ObjectOutput):::EXIT
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.yDotK != null
this.integrator == null
this.h one of { 0.0019999999994659845, 0.004, 0.005999999999999999 }
this.currentState != null
this.currentState[] elements != 0
this.interpolatedState != null
this.interpolatedState[] elements != 0
this.interpolatedDerivatives != null
this.interpolatedDerivatives[] elements != 0
this.finalized == true
this.forward == true
size(this.currentState[]) one of { 2, 4 }
size(this.interpolatedState[]) one of { 2, 4 }
size(this.interpolatedDerivatives[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.StepProblem:::CLASS
===========================================================================
org.apache.commons.math.ode.nonstiff.StepProblem:::OBJECT
this has only one value
this.rate one of { 0.0, 1.0 }
this.rateAfter == 1.0
this.switchTime == 2.0
===========================================================================
org.apache.commons.math.ode.nonstiff.StepProblem.StepProblem(double, double, double):::ENTER
rateBefore == 0.0
rateAfter == 1.0
switchTime == 2.0
===========================================================================
org.apache.commons.math.ode.nonstiff.StepProblem.StepProblem(double, double, double):::EXIT
this.rate == 0.0
===========================================================================
org.apache.commons.math.ode.nonstiff.StepProblem.computeDerivatives(double, double[], double[]):::ENTER
yDot[] elements one of { 0.0, 1.0 }
yDot[] one of { [0.0], [1.0] }
size(y[]) == 1
size(yDot[]) == 1
===========================================================================
org.apache.commons.math.ode.nonstiff.StepProblem.computeDerivatives(double, double[], double[]):::EXIT
this.rate == orig(this.rate)
this.rateAfter == orig(this.rateAfter)
this.switchTime == orig(this.switchTime)
y[] == orig(y[])
yDot[] elements one of { 0.0, 1.0 }
yDot[] one of { [0.0], [1.0] }
yDot[] >= orig(yDot[]) (elementwise)
===========================================================================
org.apache.commons.math.ode.nonstiff.StepProblem.eventOccurred(double, double[], boolean):::ENTER
this.rate == 0.0
t == 2.0
y has only one value
y[] == [0.0]
y[] elements == 0.0
increasing == true
size(y[]) == 1
===========================================================================
org.apache.commons.math.ode.nonstiff.StepProblem.eventOccurred(double, double[], boolean):::EXIT
this.rateAfter == orig(this.rateAfter)
this.switchTime == orig(this.switchTime)
y[] == orig(y[])
this.rate == 1.0
y[] == [0.0]
y[] elements == 0.0
return == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.StepProblem.g(double, double[]):::ENTER
size(y[]) == 1
===========================================================================
org.apache.commons.math.ode.nonstiff.StepProblem.g(double, double[]):::EXIT
this.rate == orig(this.rate)
this.rateAfter == orig(this.rateAfter)
this.switchTime == orig(this.switchTime)
y[] == orig(y[])
===========================================================================
org.apache.commons.math.ode.nonstiff.StepProblem.getDimension():::ENTER
this.rate == 0.0
===========================================================================
org.apache.commons.math.ode.nonstiff.StepProblem.getDimension():::EXIT
this.rate == orig(this.rate)
this.rateAfter == orig(this.rateAfter)
this.switchTime == orig(this.switchTime)
this.rate == 0.0
return == 1
===========================================================================
org.apache.commons.math.ode.nonstiff.StepProblem.setRate(double):::ENTER
this.rate == 0.0
rate one of { 0.0, 1.0 }
===========================================================================
org.apache.commons.math.ode.nonstiff.StepProblem.setRate(double):::EXIT
this.rateAfter == orig(this.rateAfter)
this.switchTime == orig(this.switchTime)
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator:::CLASS
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.STATIC_C has only one value
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.STATIC_C[] == [0.3333333333333333, 0.6666666666666666, 1.0]
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.STATIC_C[] elements one of { 0.3333333333333333, 0.6666666666666666, 1.0 }
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.STATIC_C[] sorted by <
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.STATIC_A has only one value
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.STATIC_A.getClass().getName() == double[][].class
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.STATIC_A[] contains no nulls and has only one value, of length 3
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.STATIC_A[] elements != null
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.STATIC_B has only one value
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.STATIC_B[] == [0.125, 0.375, 0.375, 0.125]
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.STATIC_B[] elements one of { 0.125, 0.375 }
size(org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.STATIC_C[]) == 3
size(org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.STATIC_A[]) == 3
size(org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.STATIC_B[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator:::OBJECT
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.STATIC_A.getClass().getName() == this.a.getClass().getName()
this.stepHandlers.getClass().getName() == this.eventsHandlersManager.states.getClass().getName()
this.c has only one value
this.c[] == [0.3333333333333333, 0.6666666666666666, 1.0]
this.c[] elements one of { 0.3333333333333333, 0.6666666666666666, 1.0 }
this.c[] sorted by <
this.a has only one value
this.a[] contains no nulls and has only one value, of length 3
this.a[] elements != null
this.b has only one value
this.b[] == [0.125, 0.375, 0.375, 0.125]
this.b[] elements one of { 0.125, 0.375 }
this.prototype.getClass().getName() == org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolator.class
this.prototype.yDotK == null
this.prototype.integrator == null
this.prototype.previousTime == Double.NaN
this.prototype.currentTime == Double.NaN
this.prototype.h == Double.NaN
this.prototype.currentState == null
this.prototype.interpolatedTime == Double.NaN
this.prototype.interpolatedState == null
this.prototype.interpolatedDerivatives == null
this.prototype.finalized == false
this.prototype.forward == true
this.prototype.dirtyState == true
this.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.name has only one value
this.name.toString == "3/8"
this.maxEvaluations == 2147483647
this.evaluations == 0
this.equations == null
size(this.c[]) == 3
size(this.a[]) == 3
size(this.b[]) == 4
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.STATIC_A.getClass().getName() != this.prototype.getClass().getName()
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.STATIC_A.getClass().getName() != this.stepHandlers.getClass().getName()
this.prototype.getClass().getName() != this.stepHandlers.getClass().getName()
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.ThreeEighthesIntegrator(double):::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.ThreeEighthesIntegrator(double):::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest$1:::OBJECT
this has only one value
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest$1.(org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest):::ENTER
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest$1.(org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest):::EXIT
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.this)
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest$1.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::ENTER
interpolator has only one value
interpolator.getClass().getName() == org.apache.commons.math.ode.sampling.DummyStepInterpolator.class
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest$1.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::EXIT
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.this)
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest$1.requiresDenseOutput():::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest$1.requiresDenseOutput():::EXIT
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.this)
return == false
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest$1.requiresDenseOutput():::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest$1.reset():::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest$1.reset():::EXIT
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.this)
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest$2:::OBJECT
this has only one value
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest$2.(org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest):::ENTER
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest$2.(org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest):::EXIT
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.this)
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest$2.computeDerivatives(double, double[], double[]):::ENTER
dot[] elements one of { 0.0, 1.0 }
dot[] one of { [0.0], [1.0] }
size(y[]) == 1
size(dot[]) == 1
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest$2.computeDerivatives(double, double[], double[]):::EXIT
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.this)
y[] == orig(y[])
dot[] == [1.0]
dot[] elements == 1.0
dot[] >= orig(dot[]) (elementwise)
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest$2.getDimension():::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest$2.getDimension():::EXIT
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.this)
return == 1
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest$KeplerHandler:::OBJECT
this has only one value
this.pb has only one value
this.pb.e == 0.9
this.pb.y has only one value
this.pb.n == 4
this.pb.calls >= 0
this.pb.t0 == 0.0
this.pb.y0 has only one value
this.pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
this.pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
this.pb.t1 == 20.0
this.pb.errorScale has only one value
this.pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
this.pb.errorScale[] elements == 1.0
size(this.pb.y[]) == 4
size(this.pb.y0[]) == 4
size(this.pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest$KeplerHandler.KeplerHandler(org.apache.commons.math.ode.TestProblem3):::ENTER
pb has only one value
pb.e == 0.9
pb.y has only one value
pb.y[] == [0.0, 0.0, 0.0, 0.0]
pb.y[] elements == 0.0
pb.n == 4
pb.calls == 0
pb.t0 == 0.0
pb.y0 has only one value
pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
pb.t1 == 20.0
pb.errorScale has only one value
pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
pb.errorScale[] elements == 1.0
size(pb.y[]) == 4
size(pb.y0[]) == 4
size(pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest$KeplerHandler.KeplerHandler(org.apache.commons.math.ode.TestProblem3):::EXIT
pb.e == orig(pb.e)
pb.y == orig(pb.y)
pb.y[] == orig(pb.y[])
pb.n == orig(pb.n)
pb.calls == orig(pb.calls)
pb.t0 == orig(pb.t0)
pb.y0 == orig(pb.y0)
pb.y0[] == orig(pb.y0[])
pb.t1 == orig(pb.t1)
pb.errorScale == orig(pb.errorScale)
pb.errorScale[] == orig(pb.errorScale[])
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
this.maxError == 0.0
pb.e == 0.9
pb.y has only one value
pb.y[] == [0.0, 0.0, 0.0, 0.0]
pb.y[] elements == 0.0
pb.n == 4
pb.calls == 0
pb.t0 == 0.0
pb.y0 has only one value
pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
pb.t1 == 20.0
pb.errorScale has only one value
pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
pb.errorScale[] elements == 1.0
size(pb.y[]) == 4
size(pb.y0[]) == 4
size(pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest$KeplerHandler.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::ENTER
interpolator has only one value
interpolator.getClass().getName() == org.apache.commons.math.ode.sampling.DummyStepInterpolator.class
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest$KeplerHandler.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::EXIT
this.pb == orig(this.pb)
this.pb.e == orig(this.pb.e)
this.pb.y == orig(this.pb.y)
this.pb.n == orig(this.pb.n)
this.pb.calls == orig(this.pb.calls)
this.pb.t0 == orig(this.pb.t0)
this.pb.y0 == orig(this.pb.y0)
this.pb.y0[] == orig(this.pb.y0[])
this.pb.t1 == orig(this.pb.t1)
this.pb.errorScale == orig(this.pb.errorScale)
this.pb.errorScale[] == orig(this.pb.errorScale[])
size(this.pb.y[]) == orig(size(this.pb.y[]))
this.pb.y[] elements != 0
this.maxError >= orig(this.maxError)
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest$KeplerHandler.requiresDenseOutput():::ENTER
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
this.maxError == 0.0
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest$KeplerHandler.requiresDenseOutput():::EXIT
this.pb == orig(this.pb)
this.pb.e == orig(this.pb.e)
this.pb.y == orig(this.pb.y)
this.pb.y[] == orig(this.pb.y[])
this.pb.n == orig(this.pb.n)
this.pb.calls == orig(this.pb.calls)
this.pb.t0 == orig(this.pb.t0)
this.pb.y0 == orig(this.pb.y0)
this.pb.y0[] == orig(this.pb.y0[])
this.pb.t1 == orig(this.pb.t1)
this.pb.errorScale == orig(this.pb.errorScale)
this.pb.errorScale[] == orig(this.pb.errorScale[])
this.maxError == orig(this.maxError)
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
this.maxError == 0.0
return == false
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest$KeplerHandler.requiresDenseOutput():::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest$KeplerHandler.reset():::ENTER
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
this.maxError == 0.0
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest$KeplerHandler.reset():::EXIT
this.pb == orig(this.pb)
this.pb.e == orig(this.pb.e)
this.pb.y == orig(this.pb.y)
this.pb.y[] == orig(this.pb.y[])
this.pb.n == orig(this.pb.n)
this.pb.calls == orig(this.pb.calls)
this.pb.t0 == orig(this.pb.t0)
this.pb.y0 == orig(this.pb.y0)
this.pb.y0[] == orig(this.pb.y0[])
this.pb.t1 == orig(this.pb.t1)
this.pb.errorScale == orig(this.pb.errorScale)
this.pb.errorScale[] == orig(this.pb.errorScale[])
this.maxError == orig(this.maxError)
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
this.maxError == 0.0
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest:::OBJECT
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.ThreeEighthesIntegratorTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.ThreeEighthesIntegratorTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.testBackward():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.testBackward():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.testBigStep():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.testBigStep():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.testDecreasingSteps():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.testDecreasingSteps():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.testDimensionCheck():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.testDimensionCheck():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.testKepler():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.testKepler():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.testSmallStep():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.testSmallStep():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.testStepSize():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.testStepSize():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolator:::CLASS
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolator:::OBJECT
this.yDotK.getClass().getName() == double[][].class
this.yDotK[] elements != null
this.integrator.getClass().getName() == org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.class
this.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.integrator.eventsHandlersManager.states[] elements != null
this.integrator.eventsHandlersManager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
this.integrator.eventsHandlersManager.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.integrator.eventsHandlersManager.states.getClass().getName() == java.util.ArrayList.class
this.integrator.eventsHandlersManager.first == null
this.integrator.eventsHandlersManager.initialized == false
this.integrator.name has only one value
this.integrator.name.toString == "3/8"
this.integrator.maxEvaluations == 2147483647
this.dirtyState == true
size(this.yDotK[]) == 4
size(this.integrator.eventsHandlersManager.states[]) one of { 0, 2 }
size(this.integrator.eventsHandlersManager.states[])-1 != 0
size(this.currentState[]) one of { 1, 2, 4 }
size(this.interpolatedState[]) one of { 1, 2, 4 }
size(this.interpolatedDerivatives[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolator.ThreeEighthesStepInterpolator():::EXIT
this.yDotK == null
this.integrator == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.finalized == false
this.forward == true
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolator.ThreeEighthesStepInterpolator(org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolator):::ENTER
interpolator.yDotK.getClass().getName() == double[][].class
interpolator.yDotK[] contains no nulls and has only one value, of length 4
interpolator.yDotK[] elements != null
interpolator.integrator.getClass().getName() == org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.class
interpolator.integrator.stepHandlers has only one value
interpolator.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.stepSize one of { 0.0019999999994659845, 0.005999999999999999 }
interpolator.integrator.eventsHandlersManager has only one value
interpolator.integrator.name has only one value
interpolator.integrator.name.toString == "3/8"
interpolator.integrator.maxEvaluations == 2147483647
interpolator.integrator.equations has only one value
interpolator.integrator.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem3.class
interpolator.h one of { 0.0019999999994659845, 0.005999999999999999, Double.NaN }
interpolator.h <= 0.006000000000000227
interpolator.currentState[] elements != 0
interpolator.interpolatedState[] elements != 0
interpolator.interpolatedDerivatives[] elements != 0
interpolator.finalized == true
interpolator.forward == true
interpolator.dirtyState == true
size(interpolator.yDotK[]) == 4
size(interpolator.currentState[]) == 4
size(interpolator.interpolatedState[]) == 4
size(interpolator.interpolatedDerivatives[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolator.ThreeEighthesStepInterpolator(org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolator):::EXIT
interpolator.yDotK == orig(interpolator.yDotK)
interpolator.yDotK.getClass().getName() == orig(interpolator.yDotK.getClass().getName())
interpolator.yDotK[] == orig(interpolator.yDotK[])
interpolator.integrator == orig(interpolator.integrator)
interpolator.integrator.getClass().getName() == orig(interpolator.integrator.getClass().getName())
interpolator.integrator.stepHandlers == orig(interpolator.integrator.stepHandlers)
interpolator.integrator.stepHandlers.getClass().getName() == orig(interpolator.integrator.stepHandlers.getClass().getName())
interpolator.integrator.stepStart == orig(interpolator.integrator.stepStart)
interpolator.integrator.stepSize == orig(interpolator.integrator.stepSize)
interpolator.integrator.eventsHandlersManager == orig(interpolator.integrator.eventsHandlersManager)
interpolator.integrator.name == orig(interpolator.integrator.name)
interpolator.integrator.name.toString == orig(interpolator.integrator.name.toString)
interpolator.integrator.maxEvaluations == orig(interpolator.integrator.maxEvaluations)
interpolator.integrator.evaluations == orig(interpolator.integrator.evaluations)
interpolator.integrator.equations == orig(interpolator.integrator.equations)
interpolator.integrator.equations.getClass().getName() == orig(interpolator.integrator.equations.getClass().getName())
interpolator.currentState == orig(interpolator.currentState)
interpolator.currentState[] == orig(interpolator.currentState[])
interpolator.interpolatedState == orig(interpolator.interpolatedState)
interpolator.interpolatedState[] == orig(interpolator.interpolatedState[])
interpolator.interpolatedDerivatives == orig(interpolator.interpolatedDerivatives)
interpolator.interpolatedDerivatives[] == orig(interpolator.interpolatedDerivatives[])
interpolator.finalized == orig(interpolator.finalized)
interpolator.forward == orig(interpolator.forward)
interpolator.dirtyState == orig(interpolator.dirtyState)
this.integrator == null
this.h one of { 0.0019999999994659845, 0.005999999999999999, Double.NaN }
this.h <= 0.006000000000000227
this.currentState[] elements != 0
this.interpolatedState[] elements != 0
this.interpolatedDerivatives[] elements != 0
this.finalized == true
this.forward == true
interpolator.yDotK.getClass().getName() == double[][].class
interpolator.yDotK[] contains no nulls and has only one value, of length 4
interpolator.yDotK[] elements != null
interpolator.integrator.getClass().getName() == org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.class
interpolator.integrator.stepHandlers has only one value
interpolator.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.stepSize one of { 0.0019999999994659845, 0.005999999999999999 }
interpolator.integrator.eventsHandlersManager has only one value
interpolator.integrator.name has only one value
interpolator.integrator.name.toString == "3/8"
interpolator.integrator.maxEvaluations == 2147483647
interpolator.integrator.equations has only one value
interpolator.integrator.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem3.class
interpolator.h one of { 0.0019999999994659845, 0.005999999999999999, Double.NaN }
interpolator.h <= 0.006000000000000227
interpolator.currentState[] elements != 0
interpolator.interpolatedState[] elements != 0
interpolator.interpolatedDerivatives[] elements != 0
interpolator.finalized == true
interpolator.forward == true
interpolator.dirtyState == true
size(this.currentState[]) == 4
size(this.interpolatedState[]) == 4
size(this.interpolatedDerivatives[]) == 4
size(interpolator.yDotK[]) == 4
size(interpolator.currentState[]) == 4
size(interpolator.interpolatedState[]) == 4
size(interpolator.interpolatedDerivatives[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::ENTER
theta >= 0.0
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::EXIT
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.integrator.stepHandlers == orig(this.integrator.stepHandlers)
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.stepHandlers.getClass().getName())
this.integrator.stepStart == orig(this.integrator.stepStart)
this.integrator.stepSize == orig(this.integrator.stepSize)
this.integrator.eventsHandlersManager == orig(this.integrator.eventsHandlersManager)
this.integrator.eventsHandlersManager.states == orig(this.integrator.eventsHandlersManager.states)
this.integrator.eventsHandlersManager.states[] == orig(this.integrator.eventsHandlersManager.states[])
this.integrator.eventsHandlersManager.states.getClass().getName() == orig(this.integrator.eventsHandlersManager.states.getClass().getName())
this.integrator.eventsHandlersManager.first == orig(this.integrator.eventsHandlersManager.first)
this.integrator.eventsHandlersManager.initialized == orig(this.integrator.eventsHandlersManager.initialized)
this.integrator.name == orig(this.integrator.name)
this.integrator.name.toString == orig(this.integrator.name.toString)
this.integrator.maxEvaluations == orig(this.integrator.maxEvaluations)
this.integrator.evaluations == orig(this.integrator.evaluations)
this.integrator.equations == orig(this.integrator.equations)
this.integrator.equations.getClass().getName() == orig(this.integrator.equations.getClass().getName())
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
size(this.interpolatedState[]) == orig(size(this.interpolatedState[]))
size(this.interpolatedDerivatives[]) == orig(size(this.interpolatedDerivatives[]))
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolator.doCopy():::ENTER
this.yDotK[] contains no nulls and has only one value, of length 4
this.integrator.stepHandlers has only one value
this.integrator.stepSize one of { 0.0019999999994659845, 0.005999999999999999 }
this.integrator.eventsHandlersManager has only one value
this.integrator.eventsHandlersManager.states has only one value
this.integrator.eventsHandlersManager.states[] == []
this.integrator.eventsHandlersManager.states[].getClass().getName() == []
this.integrator.equations has only one value
this.integrator.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem3.class
this.h one of { 0.0019999999994659845, 0.005999999999999999, Double.NaN }
this.h <= 0.006000000000000227
this.currentState[] elements != 0
this.interpolatedState[] elements != 0
this.interpolatedDerivatives[] elements != 0
this.finalized == true
this.forward == true
size(this.currentState[]) == 4
size(this.interpolatedState[]) == 4
size(this.interpolatedDerivatives[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolator.doCopy():::EXIT
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.integrator.stepHandlers == orig(this.integrator.stepHandlers)
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.stepHandlers.getClass().getName())
this.integrator.stepStart == orig(this.integrator.stepStart)
this.integrator.stepSize == orig(this.integrator.stepSize)
this.integrator.eventsHandlersManager == orig(this.integrator.eventsHandlersManager)
this.integrator.eventsHandlersManager.states == orig(this.integrator.eventsHandlersManager.states)
this.integrator.eventsHandlersManager.states[] == orig(this.integrator.eventsHandlersManager.states[])
this.integrator.eventsHandlersManager.states.getClass().getName() == orig(this.integrator.eventsHandlersManager.states.getClass().getName())
this.integrator.eventsHandlersManager.first == orig(this.integrator.eventsHandlersManager.first)
this.integrator.eventsHandlersManager.initialized == orig(this.integrator.eventsHandlersManager.initialized)
this.integrator.name == orig(this.integrator.name)
this.integrator.name.toString == orig(this.integrator.name.toString)
this.integrator.maxEvaluations == orig(this.integrator.maxEvaluations)
this.integrator.evaluations == orig(this.integrator.evaluations)
this.integrator.equations == orig(this.integrator.equations)
this.integrator.equations.getClass().getName() == orig(this.integrator.equations.getClass().getName())
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.yDotK[] contains no nulls and has only one value, of length 4
this.integrator.stepHandlers has only one value
this.integrator.stepSize one of { 0.0019999999994659845, 0.005999999999999999 }
this.integrator.eventsHandlersManager has only one value
this.integrator.eventsHandlersManager.states has only one value
this.integrator.eventsHandlersManager.states[] == []
this.integrator.eventsHandlersManager.states[].getClass().getName() == []
this.integrator.equations has only one value
this.integrator.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem3.class
this.h one of { 0.0019999999994659845, 0.005999999999999999, Double.NaN }
this.h <= 0.006000000000000227
this.currentState[] elements != 0
this.interpolatedState[] elements != 0
this.interpolatedDerivatives[] elements != 0
this.finalized == true
this.forward == true
return.getClass().getName() == org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolator.class
size(this.currentState[]) == 4
size(this.interpolatedState[]) == 4
size(this.interpolatedDerivatives[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest:::OBJECT
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest.ThreeEighthesStepInterpolatorTest():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest.derivativesConsistency():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest.derivativesConsistency():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest.serialization():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest.serialization():::EXIT
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator:::OBJECT
this.h != 0
this.h <= 1.2500000000000036
this.h >= -0.2500000000000009
size(this.currentState[]) one of { 1, 2, 4 }
size(this.interpolatedState[]) one of { 1, 2, 4 }
size(this.interpolatedDerivatives[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.AbstractStepInterpolator():::EXIT
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.finalized == false
this.forward == true
this.dirtyState == true
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.AbstractStepInterpolator(double[], boolean):::ENTER
y != null
y[] elements == 0.0
y[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
forward == true
size(y[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.AbstractStepInterpolator(double[], boolean):::EXIT
y[] == orig(y[])
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState != null
this.currentState[] elements == 0.0
this.currentState[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.interpolatedTime == Double.NaN
this.interpolatedState != null
this.interpolatedState[] elements == 0.0
this.interpolatedState[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.interpolatedDerivatives != null
this.interpolatedDerivatives[] elements == 0.0
this.interpolatedDerivatives[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.finalized == false
this.forward == true
this.dirtyState == true
y[] elements == 0.0
y[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.AbstractStepInterpolator(org.apache.commons.math.ode.sampling.AbstractStepInterpolator):::ENTER
interpolator != null
interpolator.h <= 0.006000000000000227
interpolator.currentState[] elements != 0
interpolator.interpolatedState[] elements != 0
interpolator.interpolatedDerivatives[] elements != 0
interpolator.finalized == true
interpolator.forward == true
interpolator.dirtyState == true
size(interpolator.currentState[]) one of { 2, 4 }
size(interpolator.interpolatedState[]) one of { 2, 4 }
size(interpolator.interpolatedDerivatives[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.AbstractStepInterpolator(org.apache.commons.math.ode.sampling.AbstractStepInterpolator):::EXIT
interpolator.currentState == orig(interpolator.currentState)
interpolator.currentState[] == orig(interpolator.currentState[])
interpolator.interpolatedState == orig(interpolator.interpolatedState)
interpolator.interpolatedState[] == orig(interpolator.interpolatedState[])
interpolator.interpolatedDerivatives == orig(interpolator.interpolatedDerivatives)
interpolator.interpolatedDerivatives[] == orig(interpolator.interpolatedDerivatives[])
interpolator.finalized == orig(interpolator.finalized)
interpolator.forward == orig(interpolator.forward)
interpolator.dirtyState == orig(interpolator.dirtyState)
this.h <= 0.006000000000000227
this.currentState[] elements != 0
this.interpolatedState[] elements != 0
this.interpolatedDerivatives[] elements != 0
this.finalized == true
this.forward == true
this.dirtyState == true
interpolator.h <= 0.006000000000000227
interpolator.currentState[] elements != 0
interpolator.interpolatedState[] elements != 0
interpolator.interpolatedDerivatives[] elements != 0
interpolator.finalized == true
interpolator.forward == true
interpolator.dirtyState == true
size(this.currentState[]) one of { 2, 4 }
size(this.interpolatedState[]) one of { 2, 4 }
size(this.interpolatedDerivatives[]) one of { 2, 4 }
size(interpolator.currentState[]) one of { 2, 4 }
size(interpolator.interpolatedState[]) one of { 2, 4 }
size(interpolator.interpolatedDerivatives[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.copy():::ENTER
this.h <= 0.006000000000000227
this.currentState[] elements != 0
this.interpolatedState[] elements != 0
this.interpolatedDerivatives[] elements != 0
this.finalized == false
this.forward == true
this.dirtyState == true
size(this.currentState[]) one of { 2, 4 }
size(this.interpolatedState[]) one of { 2, 4 }
size(this.interpolatedDerivatives[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.copy():::EXIT
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.h <= 0.006000000000000227
this.currentState[] elements != 0
this.interpolatedState[] elements != 0
this.interpolatedDerivatives[] elements != 0
this.finalized == true
this.forward == true
this.dirtyState == true
return != null
size(this.currentState[]) one of { 2, 4 }
size(this.interpolatedState[]) one of { 2, 4 }
size(this.interpolatedDerivatives[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.doFinalize():::ENTER
this.h <= 0.006000000000000227
this.currentState[] elements != 0
this.interpolatedState[] elements != 0
this.interpolatedDerivatives[] elements != 0
this.finalized == false
this.forward == true
this.dirtyState == true
size(this.currentState[]) one of { 2, 4 }
size(this.interpolatedState[]) one of { 2, 4 }
size(this.interpolatedDerivatives[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.doFinalize():::EXIT
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.h <= 0.006000000000000227
this.currentState[] elements != 0
this.interpolatedState[] elements != 0
this.interpolatedDerivatives[] elements != 0
this.finalized == false
this.forward == true
this.dirtyState == true
size(this.currentState[]) one of { 2, 4 }
size(this.interpolatedState[]) one of { 2, 4 }
size(this.interpolatedDerivatives[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.finalizeStep():::ENTER
this.h <= 0.006000000000000227
this.currentState[] elements != 0
this.interpolatedState[] elements != 0
this.interpolatedDerivatives[] elements != 0
this.forward == true
this.dirtyState == true
size(this.currentState[]) one of { 2, 4 }
size(this.interpolatedState[]) one of { 2, 4 }
size(this.interpolatedDerivatives[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.finalizeStep():::EXIT
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.h <= 0.006000000000000227
this.currentState[] elements != 0
this.interpolatedState[] elements != 0
this.interpolatedDerivatives[] elements != 0
this.finalized == true
this.forward == true
this.dirtyState == true
size(this.currentState[]) one of { 2, 4 }
size(this.interpolatedState[]) one of { 2, 4 }
size(this.interpolatedDerivatives[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.getCurrentTime():::ENTER
this.currentTime != 0
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.getCurrentTime():::EXIT
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.currentTime != 0
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
return != 0
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.getInterpolatedDerivatives():::ENTER
this.h == 0.02
this.currentState != null
this.currentState[] elements != 0
this.interpolatedState != null
this.interpolatedState[] elements != 0
this.interpolatedDerivatives != null
this.finalized == false
this.forward == true
this.dirtyState == true
size(this.currentState[]) == 4
size(this.interpolatedState[]) == 4
size(this.interpolatedDerivatives[]) == 4
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.getInterpolatedDerivatives():::EXIT
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
size(this.interpolatedState[]) == orig(size(this.interpolatedState[]))
size(this.interpolatedDerivatives[]) == orig(size(this.interpolatedDerivatives[]))
this.h == 0.02
this.currentState != null
this.currentState[] elements != 0
this.interpolatedState != null
this.interpolatedState[] elements != 0
this.interpolatedDerivatives != null
this.finalized == false
this.forward == true
this.dirtyState == false
return != null
size(this.currentState[]) == 4
size(this.interpolatedState[]) == 4
size(this.interpolatedDerivatives[]) == 4
size(return[]) == 4
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.getInterpolatedState():::ENTER
this.currentTime != 0
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.dirtyState == true
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.getInterpolatedState():::EXIT
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
size(this.interpolatedState[]) == orig(size(this.interpolatedState[]))
size(this.interpolatedDerivatives[]) == orig(size(this.interpolatedDerivatives[]))
this.currentTime != 0
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.dirtyState == false
return != null
size(return[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.getInterpolatedTime():::ENTER
this.currentTime != 0
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.finalized == false
this.dirtyState == false
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.getInterpolatedTime():::EXIT
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.currentTime != 0
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.finalized == false
this.dirtyState == false
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.getPreviousTime():::ENTER
this.currentTime != 0
this.currentState != null
this.interpolatedTime != 0
this.interpolatedState != null
this.interpolatedDerivatives != null
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.getPreviousTime():::EXIT
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.currentTime != 0
this.currentState != null
this.interpolatedTime != 0
this.interpolatedState != null
this.interpolatedDerivatives != null
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.isForward():::ENTER
this.currentTime != 0
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.finalized == false
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.isForward():::EXIT
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.currentTime != 0
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.finalized == false
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.isForward():::EXIT;condition="return == true"
this.forward == true
return == true
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.isForward():::EXIT;condition="not(return == true)"
this.currentState[] sorted by >
this.interpolatedState[] sorted by >
this.interpolatedDerivatives[] sorted by <
this.forward == false
return == false
size(this.currentState[]) == 2
size(this.interpolatedState[]) == 2
size(this.interpolatedDerivatives[]) == 2
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.readBaseExternal(java.io.ObjectInput):::ENTER
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.finalized == false
this.forward == true
this.dirtyState == true
in != null
in.getClass().getName() == java.io.ObjectInputStream.class
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.readBaseExternal(java.io.ObjectInput):::EXIT
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.h one of { 0.0019999999994659845, 0.004, 0.005999999999999999 }
this.currentState != null
this.currentState[] elements != 0
this.interpolatedTime == Double.NaN
this.interpolatedState != null
this.interpolatedState[] elements == 0.0
this.interpolatedState[] one of { [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.interpolatedDerivatives != null
this.interpolatedDerivatives[] elements == 0.0
this.interpolatedDerivatives[] one of { [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.finalized == true
this.forward == true
this.dirtyState == true
size(this.currentState[]) one of { 2, 4 }
size(this.interpolatedState[]) one of { 2, 4 }
size(this.interpolatedDerivatives[]) one of { 2, 4 }
this.previousTime != orig(this.previousTime)
this.currentTime != orig(this.currentTime)
this.h != orig(this.h)
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.reinitialize(double[], boolean):::ENTER
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.finalized == true
this.forward == true
this.dirtyState == true
y != null
y[] elements == 0.0
y[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
size(y[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.reinitialize(double[], boolean):::EXIT
this.dirtyState == orig(this.dirtyState)
y[] == orig(y[])
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState != null
this.currentState[] elements == 0.0
this.currentState[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.interpolatedTime == Double.NaN
this.interpolatedState != null
this.interpolatedState[] elements == 0.0
this.interpolatedState[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.interpolatedDerivatives != null
this.interpolatedDerivatives[] elements == 0.0
this.interpolatedDerivatives[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.finalized == false
this.dirtyState == true
y[] elements == 0.0
y[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.setInterpolatedTime(double):::ENTER
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.setInterpolatedTime(double):::EXIT
this.currentTime == orig(this.currentTime)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.dirtyState == true
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.shift():::ENTER
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.shift():::EXIT
this.currentTime == orig(this.currentTime)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.previousTime != orig(this.previousTime)
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.storeTime(double):::ENTER
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.storeTime(double):::EXIT
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.forward == orig(this.forward)
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.finalized == false
this.dirtyState == true
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.writeBaseExternal(java.io.ObjectOutput):::ENTER
this.h one of { 0.0019999999994659845, 0.004, 0.005999999999999999 }
this.currentState != null
this.currentState[] elements != 0
this.interpolatedState != null
this.interpolatedState[] elements != 0
this.interpolatedDerivatives != null
this.interpolatedDerivatives[] elements != 0
this.finalized == true
this.forward == true
this.dirtyState == true
out != null
out.getClass().getName() == java.io.ObjectOutputStream.class
size(this.currentState[]) one of { 2, 4 }
size(this.interpolatedState[]) one of { 2, 4 }
size(this.interpolatedDerivatives[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.writeBaseExternal(java.io.ObjectOutput):::EXIT
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.h one of { 0.0019999999994659845, 0.004, 0.005999999999999999 }
this.currentState != null
this.currentState[] elements != 0
this.interpolatedState != null
this.interpolatedState[] elements != 0
this.interpolatedDerivatives != null
this.interpolatedDerivatives[] elements != 0
this.finalized == true
this.forward == true
this.dirtyState == true
size(this.currentState[]) one of { 2, 4 }
size(this.interpolatedState[]) one of { 2, 4 }
size(this.interpolatedDerivatives[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math.ode.sampling.DummyStepInterpolator:::CLASS
===========================================================================
org.apache.commons.math.ode.sampling.DummyStepInterpolator:::OBJECT
this.currentDerivative != null
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.finalized == false
this.forward == true
this.dirtyState == true
size(this.currentDerivative[]) one of { 1, 2, 4 }
size(this.currentState[]) one of { 1, 2, 4 }
size(this.interpolatedState[]) one of { 1, 2, 4 }
size(this.interpolatedDerivatives[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.sampling.DummyStepInterpolator.DummyStepInterpolator(double[], double[], boolean):::ENTER
y != null
y[] elements == 0.0
y[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
yDot != null
yDot[] elements == 0.0
yDot[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
forward == true
size(y[]) one of { 1, 2, 4 }
size(yDot[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.sampling.DummyStepInterpolator.DummyStepInterpolator(double[], double[], boolean):::EXIT
y[] == orig(y[])
yDot[] == orig(yDot[])
this.currentDerivative[] elements == 0.0
this.currentDerivative[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState[] elements == 0.0
this.currentState[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.interpolatedTime == Double.NaN
this.interpolatedState[] elements == 0.0
this.interpolatedState[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.interpolatedDerivatives[] elements == 0.0
this.interpolatedDerivatives[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
y[] elements == 0.0
y[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
yDot[] elements == 0.0
yDot[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
===========================================================================
org.apache.commons.math.ode.sampling.DummyStepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::ENTER
this.currentState[] elements != 0
oneMinusThetaH >= -3.552713678800501E-15
===========================================================================
org.apache.commons.math.ode.sampling.DummyStepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::EXIT
this.currentDerivative == orig(this.currentDerivative)
this.currentDerivative[] == orig(this.currentDerivative[])
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
size(this.interpolatedState[]) == orig(size(this.interpolatedState[]))
size(this.interpolatedDerivatives[]) == orig(size(this.interpolatedDerivatives[]))
this.currentState[] elements != 0
this.interpolatedState[] elements != 0
===========================================================================
org.apache.commons.math.ode.sampling.StepInterpolatorTestUtils$1:::OBJECT
this.val$threshold == 1.0E-10
===========================================================================
org.apache.commons.math.ode.sampling.StepInterpolatorTestUtils$1.(double):::ENTER
$hidden$1 == 1.0E-10
===========================================================================
org.apache.commons.math.ode.sampling.StepInterpolatorTestUtils$1.(double):::EXIT
===========================================================================
org.apache.commons.math.ode.sampling.StepInterpolatorTestUtils$1.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::ENTER
interpolator != null
===========================================================================
org.apache.commons.math.ode.sampling.StepInterpolatorTestUtils$1.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::EXIT45
orig(isLast) == true
===========================================================================
org.apache.commons.math.ode.sampling.StepInterpolatorTestUtils$1.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::EXIT76
orig(isLast) == false
===========================================================================
org.apache.commons.math.ode.sampling.StepInterpolatorTestUtils$1.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::EXIT
this.val$threshold == orig(this.val$threshold)
===========================================================================
org.apache.commons.math.ode.sampling.StepInterpolatorTestUtils$1.requiresDenseOutput():::ENTER
===========================================================================
org.apache.commons.math.ode.sampling.StepInterpolatorTestUtils$1.requiresDenseOutput():::EXIT
this.val$threshold == orig(this.val$threshold)
return == true
===========================================================================
org.apache.commons.math.ode.sampling.StepInterpolatorTestUtils$1.requiresDenseOutput():::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math.ode.sampling.StepInterpolatorTestUtils$1.reset():::ENTER
===========================================================================
org.apache.commons.math.ode.sampling.StepInterpolatorTestUtils$1.reset():::EXIT
this.val$threshold == orig(this.val$threshold)
===========================================================================
org.apache.commons.math.ode.sampling.StepInterpolatorTestUtils.checkDerivativesConsistency(org.apache.commons.math.ode.FirstOrderIntegrator, org.apache.commons.math.ode.TestProblemAbstract, double):::ENTER
problem.getClass().getName() == org.apache.commons.math.ode.TestProblem3.class
problem.n == 4
problem.calls == 0
problem.t0 == 0.0
problem.y0[] == [0.9, 0.0, 0.0, 1.1055415967851334]
problem.y0[] elements one of { 0.0, 0.9, 1.1055415967851334 }
problem.t1 == 20.0
problem.errorScale[] == [1.0, 1.0, 1.0, 1.0]
problem.errorScale[] elements == 1.0
threshold == 1.0E-10
size(problem.y0[]) == 4
size(problem.errorScale[]) == 4
===========================================================================
org.apache.commons.math.ode.sampling.StepInterpolatorTestUtils.checkDerivativesConsistency(org.apache.commons.math.ode.FirstOrderIntegrator, org.apache.commons.math.ode.TestProblemAbstract, double):::EXIT
problem.n == orig(problem.n)
problem.t0 == orig(problem.t0)
problem.y0 == orig(problem.y0)
problem.y0[] == orig(problem.y0[])
problem.t1 == orig(problem.t1)
problem.errorScale == orig(problem.errorScale)
problem.errorScale[] == orig(problem.errorScale[])
problem.n == 4
problem.calls one of { 1002, 2004, 4008 }
problem.t0 == 0.0
problem.y0[] == [0.9, 0.0, 0.0, 1.1055415967851334]
problem.y0[] elements one of { 0.0, 0.9, 1.1055415967851334 }
problem.t1 == 20.0
problem.errorScale[] == [1.0, 1.0, 1.0, 1.0]
problem.errorScale[] elements == 1.0
size(problem.y0[]) == 4
size(problem.errorScale[]) == 4
