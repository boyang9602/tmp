===========================================================================
org.apache.commons.math.MathRuntimeException$4:::CLASS
===========================================================================
org.apache.commons.math.MathRuntimeException$4:::OBJECT
this.val$pattern.toString one of { "dimensions mismatch: got {0}x{1} but expected {2}x{3}", "vector length mismatch: got {0} but expected {1}" }
this.val$arguments.getClass().getName() == java.lang.Object[].class
this.val$arguments[].getClass().getName() one of { [java.lang.Integer, java.lang.Integer], [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.String] }
size(this.val$arguments[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math.MathRuntimeException$4.(java.lang.String, java.lang.Object[]):::ENTER
$hidden$1.toString one of { "dimensions mismatch: got {0}x{1} but expected {2}x{3}", "vector length mismatch: got {0} but expected {1}" }
$hidden$2.getClass().getName() == java.lang.Object[].class
size($hidden$2[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math.MathRuntimeException$4.(java.lang.String, java.lang.Object[]):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
$hidden$2[] == orig($hidden$2[])
$hidden$1.toString one of { "dimensions mismatch: got {0}x{1} but expected {2}x{3}", "vector length mismatch: got {0} but expected {1}" }
===========================================================================
org.apache.commons.math.MathRuntimeException:::CLASS
===========================================================================
org.apache.commons.math.MathRuntimeException:::OBJECT
this has only one value
this.pattern has only one value
this.pattern.toString == "matrix is singular"
this.arguments has only one value
this.arguments.getClass().getName() == java.lang.Object[].class
this.arguments[] == []
this.arguments[].getClass().getName() == []
===========================================================================
org.apache.commons.math.MathRuntimeException.MathRuntimeException(java.lang.String, java.lang.Object[]):::ENTER
pattern has only one value
pattern.toString == "matrix is singular"
arguments has only one value
arguments.getClass().getName() == java.lang.Object[].class
arguments[] == []
===========================================================================
org.apache.commons.math.MathRuntimeException.MathRuntimeException(java.lang.String, java.lang.Object[]):::EXIT
pattern.toString == orig(pattern.toString)
arguments[] == orig(arguments[])
pattern.toString == "matrix is singular"
arguments[] == []
===========================================================================
org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(java.lang.String, java.lang.Object[]):::ENTER
pattern.toString one of { "dimensions mismatch: got {0}x{1} but expected {2}x{3}", "vector length mismatch: got {0} but expected {1}" }
arguments.getClass().getName() == java.lang.Object[].class
size(arguments[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(java.lang.String, java.lang.Object[]):::EXIT
pattern.toString == orig(pattern.toString)
arguments[] == orig(arguments[])
pattern.toString one of { "dimensions mismatch: got {0}x{1} but expected {2}x{3}", "vector length mismatch: got {0} but expected {1}" }
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix$1:::OBJECT
org.apache.commons.math.linear.AbstractRealMatrix.this.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
org.apache.commons.math.linear.AbstractRealMatrix.this.lu == null
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix$1.(org.apache.commons.math.linear.AbstractRealMatrix):::ENTER
org.apache.commons.math.linear.AbstractRealMatrix.this.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
org.apache.commons.math.linear.AbstractRealMatrix.this.lu == null
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix$1.(org.apache.commons.math.linear.AbstractRealMatrix):::EXIT
org.apache.commons.math.linear.AbstractRealMatrix.this == orig(org.apache.commons.math.linear.AbstractRealMatrix.this)
org.apache.commons.math.linear.AbstractRealMatrix.this.getClass().getName() == orig(org.apache.commons.math.linear.AbstractRealMatrix.this.getClass().getName())
org.apache.commons.math.linear.AbstractRealMatrix.this.lu == orig(org.apache.commons.math.linear.AbstractRealMatrix.this.lu)
this.endRow == 0.0
this.columnSum == 0.0
this.maxColSum == 0.0
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix$1.end():::ENTER
this.endRow one of { 3.0, 4.0, 5.0 }
this.columnSum == 0.0
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix$1.end():::EXIT
this.endRow == orig(this.endRow)
this.columnSum == orig(this.columnSum)
this.maxColSum == orig(this.maxColSum)
org.apache.commons.math.linear.AbstractRealMatrix.this == orig(org.apache.commons.math.linear.AbstractRealMatrix.this)
org.apache.commons.math.linear.AbstractRealMatrix.this.getClass().getName() == orig(org.apache.commons.math.linear.AbstractRealMatrix.this.getClass().getName())
org.apache.commons.math.linear.AbstractRealMatrix.this.lu == orig(org.apache.commons.math.linear.AbstractRealMatrix.this.lu)
this.endRow one of { 3.0, 4.0, 5.0 }
this.columnSum == 0.0
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix$1.start(int, int, int, int, int, int):::ENTER
this.endRow == 0.0
this.columnSum == 0.0
this.maxColSum == 0.0
rows one of { 4, 5, 6 }
startRow == 0
endRow one of { 3, 4, 5 }
startColumn == 0
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix$1.start(int, int, int, int, int, int):::EXIT
this.columnSum == orig(this.columnSum)
this.maxColSum == orig(this.maxColSum)
org.apache.commons.math.linear.AbstractRealMatrix.this == orig(org.apache.commons.math.linear.AbstractRealMatrix.this)
org.apache.commons.math.linear.AbstractRealMatrix.this.getClass().getName() == orig(org.apache.commons.math.linear.AbstractRealMatrix.this.getClass().getName())
org.apache.commons.math.linear.AbstractRealMatrix.this.lu == orig(org.apache.commons.math.linear.AbstractRealMatrix.this.lu)
this.endRow one of { 3.0, 4.0, 5.0 }
this.columnSum == 0.0
this.maxColSum == 0.0
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix$1.visit(int, int, double):::ENTER
this.endRow one of { 3.0, 4.0, 5.0 }
this.columnSum == 0.0
this.maxColSum == 0.0
row >= 0
column >= 0
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix$1.visit(int, int, double):::EXIT
this.endRow == orig(this.endRow)
org.apache.commons.math.linear.AbstractRealMatrix.this == orig(org.apache.commons.math.linear.AbstractRealMatrix.this)
org.apache.commons.math.linear.AbstractRealMatrix.this.getClass().getName() == orig(org.apache.commons.math.linear.AbstractRealMatrix.this.getClass().getName())
org.apache.commons.math.linear.AbstractRealMatrix.this.lu == orig(org.apache.commons.math.linear.AbstractRealMatrix.this.lu)
this.endRow one of { 3.0, 4.0, 5.0 }
this.maxColSum == 0.0
this.columnSum >= orig(this.columnSum)
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix$5:::OBJECT
this.val$out.getClass().getName() == org.apache.commons.math.linear.AbstractRealMatrix.this.getClass().getName()
this.val$out.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
org.apache.commons.math.linear.AbstractRealMatrix.this.lu == null
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix$5.(org.apache.commons.math.linear.AbstractRealMatrix, org.apache.commons.math.linear.RealMatrix):::ENTER
org.apache.commons.math.linear.AbstractRealMatrix.this.getClass().getName() == $hidden$2.getClass().getName()
org.apache.commons.math.linear.AbstractRealMatrix.this != null
org.apache.commons.math.linear.AbstractRealMatrix.this.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
org.apache.commons.math.linear.AbstractRealMatrix.this.lu == null
$hidden$2 != null
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix$5.(org.apache.commons.math.linear.AbstractRealMatrix, org.apache.commons.math.linear.RealMatrix):::EXIT
this.val$out == orig($hidden$2)
this.val$out.getClass().getName() == orig(org.apache.commons.math.linear.AbstractRealMatrix.this.getClass().getName())
this.val$out.getClass().getName() == orig($hidden$2.getClass().getName())
org.apache.commons.math.linear.AbstractRealMatrix.this == orig(org.apache.commons.math.linear.AbstractRealMatrix.this)
org.apache.commons.math.linear.AbstractRealMatrix.this.lu == orig(org.apache.commons.math.linear.AbstractRealMatrix.this.lu)
this.val$out != null
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix$5.visit(int, int, double):::ENTER
row >= 0
column >= 0
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix$5.visit(int, int, double):::EXIT
this.val$out == orig(this.val$out)
this.val$out.getClass().getName() == orig(this.val$out.getClass().getName())
this.val$out.getClass().getName() == orig(org.apache.commons.math.linear.AbstractRealMatrix.this.getClass().getName())
org.apache.commons.math.linear.AbstractRealMatrix.this == orig(org.apache.commons.math.linear.AbstractRealMatrix.this)
org.apache.commons.math.linear.AbstractRealMatrix.this.lu == orig(org.apache.commons.math.linear.AbstractRealMatrix.this.lu)
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix:::OBJECT
this.lu == null
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.AbstractRealMatrix():::EXIT
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.AbstractRealMatrix(int, int):::ENTER
rowDimension % columnDimension == 0
rowDimension >= columnDimension
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.AbstractRealMatrix(int, int):::EXIT
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.getColumn(int):::ENTER
this.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
column one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.getColumn(int):::EXIT
this.lu == orig(this.lu)
return != null
size(return[]) one of { 2, 6 }
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.getColumnVector(int):::ENTER
this.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
column one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.getColumnVector(int):::EXIT
this.lu == orig(this.lu)
return != null
return.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
return.getClass().getName() != orig(this.getClass().getName())
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.getNorm():::ENTER
this.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.getNorm():::EXIT
this.lu == orig(this.lu)
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.isSquare():::ENTER
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.isSquare():::EXIT
this.lu == orig(this.lu)
return == true
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.isSquare():::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.operate(org.apache.commons.math.linear.RealVector):::ENTER
this has only one value
this.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
v.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.operate(org.apache.commons.math.linear.RealVector):::EXIT701
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.operate(org.apache.commons.math.linear.RealVector):::EXIT
this.lu == orig(this.lu)
return.getClass().getName() == orig(v.getClass().getName())
return.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.setColumnVector(int, org.apache.commons.math.linear.RealVector):::ENTER
this.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
column >= 0
vector != null
vector.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
this.getClass().getName() != vector.getClass().getName()
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.setColumnVector(int, org.apache.commons.math.linear.RealVector):::EXIT
this.lu == orig(this.lu)
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.setRowVector(int, org.apache.commons.math.linear.RealVector):::ENTER
this.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
vector != null
vector.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
this.getClass().getName() != vector.getClass().getName()
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.setRowVector(int, org.apache.commons.math.linear.RealVector):::EXIT
this.lu == orig(this.lu)
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.transpose():::ENTER
this.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.transpose():::EXIT
this.lu == orig(this.lu)
return.getClass().getName() == orig(this.getClass().getName())
return != null
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor):::ENTER
this.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
visitor != null
visitor.getClass().getName() == org.apache.commons.math.linear.AbstractRealMatrix$5.class
this.getClass().getName() != visitor.getClass().getName()
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor):::EXIT
this.lu == orig(this.lu)
return == 0.0
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor, int, int, int, int):::ENTER
this has only one value
this.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
visitor.getClass().getName() == org.apache.commons.math.linear.SingularValueDecompositionImpl$1.class
startRow == 0
endRow one of { 1, 3 }
startColumn == 0
endColumn == 3
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor, int, int, int, int):::EXIT
this.lu == orig(this.lu)
return == 0.0
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix:::CLASS
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix:::OBJECT
this.data.getClass().getName() == double[][].class
this.data[] elements != null
this.lu == null
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.Array2DRowRealMatrix(double[][]):::ENTER
d != null
d.getClass().getName() == double[][].class
d[] elements != null
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.Array2DRowRealMatrix(double[][]):::EXIT
this.data.getClass().getName() == orig(d.getClass().getName())
d[] == orig(d[])
this.data != null
d[] elements != null
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.Array2DRowRealMatrix(double[][], boolean):::ENTER
d != null
d.getClass().getName() == double[][].class
d[] elements != null
copyArray == false
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.Array2DRowRealMatrix(double[][], boolean):::EXIT
this.data == orig(d)
this.data.getClass().getName() == orig(d.getClass().getName())
d[] == orig(d[])
this.data != null
d[] elements != null
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.Array2DRowRealMatrix(int, int):::ENTER
rowDimension % columnDimension == 0
rowDimension >= columnDimension
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.Array2DRowRealMatrix(int, int):::EXIT
orig(rowDimension) == size(this.data[])
this.data != null
orig(columnDimension) != size(this.data[])-1
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.addToEntry(int, int, double):::ENTER
this.data != null
increment != 0
size(this.data[]) one of { 4, 5, 6 }
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.addToEntry(int, int, double):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
this.data != null
size(this.data[]) one of { 4, 5, 6 }
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.copyIn(double[][]):::ENTER
this.data == null
in != null
in.getClass().getName() == double[][].class
in[] elements != null
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.copyIn(double[][]):::EXIT
this.data.getClass().getName() == orig(in.getClass().getName())
this.lu == orig(this.lu)
in[] == orig(in[])
this.data != null
in[] elements != null
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.copyOut():::ENTER
this.data != null
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.copyOut():::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == return.getClass().getName()
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
return.getClass().getName() == orig(this.data.getClass().getName())
this.data != null
return != null
return.getClass().getName() == double[][].class
return[] elements != null
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.createMatrix(int, int):::ENTER
columnDimension == size(this.data[])
this.data != null
rowDimension % size(this.data[]) == 0
rowDimension >= size(this.data[])
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.createMatrix(int, int):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
orig(columnDimension) == size(this.data[])
this.data != null
return != null
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
this.data.getClass().getName() != return.getClass().getName()
orig(rowDimension) % orig(columnDimension) == 0
orig(rowDimension) >= orig(columnDimension)
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.getColumnDimension():::ENTER
this.data != null
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.getColumnDimension():::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
this.data != null
return != size(this.data[])-1
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.getData():::ENTER
this.data != null
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.getData():::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == return.getClass().getName()
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
return.getClass().getName() == orig(this.data.getClass().getName())
this.data != null
return != null
return.getClass().getName() == double[][].class
return[] elements != null
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.getEntry(int, int):::ENTER
this.data != null
row >= 0
column >= 0
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.getEntry(int, int):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
this.data != null
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.getRowDimension():::ENTER
this.data != null
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.getRowDimension():::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
return == size(this.data[])
return == orig(size(this.data[]))
this.data != null
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.multiply(org.apache.commons.math.linear.Array2DRowRealMatrix):::ENTER
this.data.getClass().getName() == m.data.getClass().getName()
this.data != null
m != null
m.data != null
m.data[] elements != null
m.lu == null
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.multiply(org.apache.commons.math.linear.Array2DRowRealMatrix):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == m.data.getClass().getName()
this.data.getClass().getName() == return.data.getClass().getName()
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data.getClass().getName() == orig(m.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
m.data == orig(m.data)
m.data[] == orig(m.data[])
m.lu == orig(m.lu)
this.data != null
m.data != null
m.data[] elements != null
m.lu == null
return != null
return.data != null
return.data[] elements != null
return.lu == null
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.multiply(org.apache.commons.math.linear.RealMatrix):::ENTER
this.data != null
m != null
m.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
this.data.getClass().getName() != m.getClass().getName()
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.multiply(org.apache.commons.math.linear.RealMatrix):::EXIT254
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.multiply(org.apache.commons.math.linear.RealMatrix):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
return.getClass().getName() == orig(m.getClass().getName())
this.data != null
return != null
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
this.data.getClass().getName() != return.getClass().getName()
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.operate(double[]):::ENTER
this.data != null
v != null
v[] elements != 0
size(this.data[]) one of { 5, 6 }
size(v[]) one of { 5, 6 }
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.operate(double[]):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
v[] == orig(v[])
this.data != null
v[] elements != 0
return != null
return[] elements != 0
size(this.data[]) one of { 5, 6 }
size(return[]) one of { 5, 6 }
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.setEntry(int, int, double):::ENTER
this.data != null
row >= 0
column >= 0
row <= size(this.data[])-1
column <= size(this.data[])-1
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.setEntry(int, int, double):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
this.data != null
orig(row) <= size(this.data[])-1
orig(column) <= size(this.data[])-1
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.setSubMatrix(double[][], int, int):::ENTER
this.data == null
subMatrix != null
subMatrix.getClass().getName() == double[][].class
subMatrix[] elements != null
row == 0
column == 0
row < size(subMatrix[])-1
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.setSubMatrix(double[][], int, int):::EXIT
this.data.getClass().getName() == orig(subMatrix.getClass().getName())
this.lu == orig(this.lu)
subMatrix[] == orig(subMatrix[])
size(this.data[]) == orig(size(subMatrix[]))
this.data != null
subMatrix[] elements != null
orig(row) < size(subMatrix[])-1
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.subtract(org.apache.commons.math.linear.Array2DRowRealMatrix):::ENTER
this.data.getClass().getName() == m.data.getClass().getName()
m.lu == null
size(this.data[]) one of { 4, 5, 6 }
size(m.data[]) one of { 4, 5, 6 }
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.subtract(org.apache.commons.math.linear.Array2DRowRealMatrix):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == m.data.getClass().getName()
this.data.getClass().getName() == return.data.getClass().getName()
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data.getClass().getName() == orig(m.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
m.data == orig(m.data)
m.data[] == orig(m.data[])
m.lu == orig(m.lu)
m.lu == null
return.lu == null
size(this.data[]) one of { 4, 5, 6 }
size(m.data[]) one of { 4, 5, 6 }
size(return.data[]) one of { 4, 5, 6 }
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.subtract(org.apache.commons.math.linear.RealMatrix):::ENTER
m.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
size(this.data[]) one of { 4, 5, 6 }
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.subtract(org.apache.commons.math.linear.RealMatrix):::EXIT214
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.subtract(org.apache.commons.math.linear.RealMatrix):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
return.getClass().getName() == orig(m.getClass().getName())
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
size(this.data[]) one of { 4, 5, 6 }
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor):::ENTER
visitor.getClass().getName() == org.apache.commons.math.linear.AbstractRealMatrix$1.class
size(this.data[]) one of { 4, 5, 6 }
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
size(this.data[]) one of { 4, 5, 6 }
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor):::ENTER
this.data != null
visitor != null
visitor.getClass().getName() == org.apache.commons.math.linear.AbstractRealMatrix$5.class
this.data.getClass().getName() != visitor.getClass().getName()
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
this.data != null
return == 0.0
this.data.getClass().getName() != orig(visitor.getClass().getName())
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor, int, int, int, int):::ENTER
this has only one value
this.data has only one value
this.data[] contains no nulls and has only one value, of length 4
visitor.getClass().getName() == org.apache.commons.math.linear.SingularValueDecompositionImpl$1.class
startRow == 0
endRow one of { 1, 3 }
startColumn == 0
endColumn == 3
size(this.data[]) == 4
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor, int, int, int, int):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
this.data has only one value
this.data[] contains no nulls and has only one value, of length 4
return == 0.0
size(this.data[]) == 4
===========================================================================
org.apache.commons.math.linear.ArrayRealVector:::CLASS
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == "{"
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == "}"
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == "; "
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == "{"
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == "}"
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == "; "
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == "{"
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == "}"
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == ";"
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math.linear.ArrayRealVector:::OBJECT
size(this.data[]) one of { 4, 5, 6 }
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.ArrayRealVector(double[]):::ENTER
size(d[]) one of { 5, 6 }
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.ArrayRealVector(double[]):::EXIT
d[] == orig(d[])
size(this.data[]) one of { 5, 6 }
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.ArrayRealVector(double[], boolean):::ENTER
copyArray == false
size(d[]) one of { 4, 5, 6 }
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.ArrayRealVector(double[], boolean):::EXIT
d[] == orig(d[])
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector, boolean):::ENTER
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == "{"
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == "}"
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == "; "
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == "{"
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == "}"
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == "; "
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == "{"
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == "}"
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == ";"
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == java.text.DecimalFormat.class
v.data[] elements != 0
deep == true
size(v.data[]) one of { 5, 6 }
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector, boolean):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
v.data == orig(v.data)
v.data[] == orig(v.data[])
this.data[] elements != 0
v.data[] elements != 0
size(this.data[]) one of { 5, 6 }
size(v.data[]) one of { 5, 6 }
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.checkVectorDimensions(int):::ENTER
n one of { 5, 6 }
size(this.data[]) one of { 5, 6 }
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.checkVectorDimensions(int):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
size(this.data[]) one of { 5, 6 }
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.checkVectorDimensions(org.apache.commons.math.linear.RealVector):::ENTER
this.data[] elements != 0
v.getClass().getName() == org.apache.commons.math.linear.ArrayRealVectorTest$RealVectorTestImpl.class
size(this.data[]) == 6
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() != v.getClass().getName()
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.checkVectorDimensions(org.apache.commons.math.linear.RealVector):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
this.data[] elements != 0
size(this.data[]) == 6
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() != orig(v.getClass().getName())
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.copy():::ENTER
this.data[] elements != 0
size(this.data[]) one of { 5, 6 }
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.copy():::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
this.data[] elements != 0
return.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
size(this.data[]) one of { 5, 6 }
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() != return.getClass().getName()
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.dotProduct(double[]):::ENTER
this.data[] elements != 0
v[] one of { [188.0, 70.0, 63.0, 59.0, 107.0, 36.0], [269.0, -21.0, 108.0, 86.0, 194.0, 69.0], [1561.0, 69.0, 739.0, 324.0, 1624.0, 796.0] }
size(this.data[]) == 6
size(v[]) == 6
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.dotProduct(double[]):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
v[] == orig(v[])
this.data[] elements != 0
v[] one of { [188.0, 70.0, 63.0, 59.0, 107.0, 36.0], [269.0, -21.0, 108.0, 86.0, 194.0, 69.0], [1561.0, 69.0, 739.0, 324.0, 1624.0, 796.0] }
size(this.data[]) == 6
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.dotProduct(org.apache.commons.math.linear.ArrayRealVector):::ENTER
this.data[] elements != 0
v.data[] one of { [188.0, 70.0, 63.0, 59.0, 107.0, 36.0], [269.0, -21.0, 108.0, 86.0, 194.0, 69.0], [1561.0, 69.0, 739.0, 324.0, 1624.0, 796.0] }
size(this.data[]) == 6
size(v.data[]) == 6
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.dotProduct(org.apache.commons.math.linear.ArrayRealVector):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
v.data == orig(v.data)
v.data[] == orig(v.data[])
this.data[] elements != 0
v.data[] one of { [188.0, 70.0, 63.0, 59.0, 107.0, 36.0], [269.0, -21.0, 108.0, 86.0, 194.0, 69.0], [1561.0, 69.0, 739.0, 324.0, 1624.0, 796.0] }
size(this.data[]) == 6
size(v.data[]) == 6
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.dotProduct(org.apache.commons.math.linear.RealVector):::ENTER
this.data[] elements != 0
size(this.data[]) == 6
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() != v.getClass().getName()
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.dotProduct(org.apache.commons.math.linear.RealVector):::EXIT870
orig(v.getClass().getName()) == org.apache.commons.math.linear.ArrayRealVector.class
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.dotProduct(org.apache.commons.math.linear.RealVector):::EXIT877
orig(v.getClass().getName()) == org.apache.commons.math.linear.ArrayRealVectorTest$RealVectorTestImpl.class
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.dotProduct(org.apache.commons.math.linear.RealVector):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
this.data[] elements != 0
size(this.data[]) == 6
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() != orig(v.getClass().getName())
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.getDataRef():::ENTER
this.data[] elements != 0
size(this.data[]) one of { 5, 6 }
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.getDataRef():::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
this.data[] elements != 0
return[] elements != 0
size(this.data[]) one of { 5, 6 }
size(return[]) one of { 5, 6 }
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.getDimension():::ENTER
size(this.data[]) one of { 4, 6 }
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.getDimension():::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
return one of { 4, 6 }
size(this.data[]) one of { 4, 6 }
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.getEntry(int):::ENTER
this.data[] elements != 0
index >= 0
size(this.data[]) one of { 4, 6 }
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.getEntry(int):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
this.data[] elements != 0
size(this.data[]) one of { 4, 6 }
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.getNorm():::ENTER
size(this.data[]) one of { 5, 6 }
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.getNorm():::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
size(this.data[]) one of { 5, 6 }
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.mapMultiplyToSelf(double):::ENTER
size(this.data[]) == 6
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.mapMultiplyToSelf(double):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
size(this.data[]) == orig(size(this.data[]))
return.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
size(this.data[]) == 6
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.subtract(double[]):::ENTER
this.data[] elements >= -0.9999999999999991
v[] elements >= -1.0
size(this.data[]) one of { 5, 6 }
size(v[]) one of { 5, 6 }
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.subtract(double[]):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
v[] == orig(v[])
this.data[] elements >= -0.9999999999999991
v[] elements >= -1.0
return.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
size(this.data[]) one of { 5, 6 }
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() != return.getClass().getName()
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.subtract(org.apache.commons.math.linear.ArrayRealVector):::ENTER
this.data[] elements >= -0.9999999999999991
v.data[] elements >= -1.0
size(this.data[]) one of { 5, 6 }
size(v.data[]) one of { 5, 6 }
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.subtract(org.apache.commons.math.linear.ArrayRealVector):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
v.data == orig(v.data)
v.data[] == orig(v.data[])
this.data[] elements >= -0.9999999999999991
v.data[] elements >= -1.0
size(this.data[]) one of { 5, 6 }
size(v.data[]) one of { 5, 6 }
size(return.data[]) one of { 5, 6 }
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.subtract(org.apache.commons.math.linear.RealVector):::ENTER
this.data[] elements >= -0.9999999999999991
v.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
size(this.data[]) one of { 5, 6 }
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() != v.getClass().getName()
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.subtract(org.apache.commons.math.linear.RealVector):::EXIT269
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.subtract(org.apache.commons.math.linear.RealVector):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
return.getClass().getName() == orig(v.getClass().getName())
this.data[] elements >= -0.9999999999999991
return.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
size(this.data[]) one of { 5, 6 }
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() != return.getClass().getName()
===========================================================================
org.apache.commons.math.linear.ArrayRealVectorTest$RealVectorTestImpl:::CLASS
===========================================================================
org.apache.commons.math.linear.ArrayRealVectorTest$RealVectorTestImpl:::OBJECT
size(this.data[]) one of { 2, 6 }
===========================================================================
org.apache.commons.math.linear.ArrayRealVectorTest$RealVectorTestImpl.RealVectorTestImpl(double[]):::ENTER
size(d[]) one of { 2, 6 }
===========================================================================
org.apache.commons.math.linear.ArrayRealVectorTest$RealVectorTestImpl.RealVectorTestImpl(double[]):::EXIT
d[] == orig(d[])
===========================================================================
org.apache.commons.math.linear.ArrayRealVectorTest$RealVectorTestImpl.getDimension():::ENTER
===========================================================================
org.apache.commons.math.linear.ArrayRealVectorTest$RealVectorTestImpl.getDimension():::EXIT
this.data == orig(this.data)
this.data[] == orig(this.data[])
return one of { 2, 6 }
===========================================================================
org.apache.commons.math.linear.ArrayRealVectorTest$RealVectorTestImpl.getEntry(int):::ENTER
this.data[] one of { [188.0, 70.0, 63.0, 59.0, 107.0, 36.0], [269.0, -21.0, 108.0, 86.0, 194.0, 69.0], [1561.0, 69.0, 739.0, 324.0, 1624.0, 796.0] }
index >= 0
size(this.data[]) == 6
===========================================================================
org.apache.commons.math.linear.ArrayRealVectorTest$RealVectorTestImpl.getEntry(int):::EXIT
this.data == orig(this.data)
this.data[] == orig(this.data[])
this.data[] one of { [188.0, 70.0, 63.0, 59.0, 107.0, 36.0], [269.0, -21.0, 108.0, 86.0, 194.0, 69.0], [1561.0, 69.0, 739.0, 324.0, 1624.0, 796.0] }
size(this.data[]) == 6
===========================================================================
org.apache.commons.math.linear.BiDiagonalTransformer:::OBJECT
this.householderVectors.getClass().getName() == double[][].class
this.householderVectors[] elements != null
this.cachedU == null
this.cachedB == null
this.cachedV.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
size(this.householderVectors[]) one of { 4, 6 }
size(this.main[]) == 4
size(this.secondary[]) == 3
===========================================================================
org.apache.commons.math.linear.BiDiagonalTransformer.BiDiagonalTransformer(org.apache.commons.math.linear.RealMatrix):::ENTER
matrix.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math.linear.BiDiagonalTransformer.BiDiagonalTransformer(org.apache.commons.math.linear.RealMatrix):::EXIT
this.main[] one of { [-74.22250282457561, 1.6627690648252533, 2.291009305998946, 1.004257812890381], [-9.219544457292887, 8.071323847840354, 4.903062379815523, 2.806585661782493], [41.98855724337373, -4.437554570620956, 1.5230153223874792, -1.0006003989539296] }
this.secondary[] one of { [-98.64399902396404, -0.019008555835969717, -0.1817947551212693], [10.981803130633878, -5.621981191693385, 2.393765871225522], [116.0212438296085, -1.3012715928642666, -0.001922035677491829] }
this.cachedV == null
===========================================================================
org.apache.commons.math.linear.BiDiagonalTransformer.getMainDiagonalRef():::ENTER
this.main[] one of { [-74.22250282457561, 1.6627690648252533, 2.291009305998946, 1.004257812890381], [-9.219544457292887, 8.071323847840354, 4.903062379815523, 2.806585661782493], [41.98855724337373, -4.437554570620956, 1.5230153223874792, -1.0006003989539296] }
this.secondary[] one of { [-98.64399902396404, -0.019008555835969717, -0.1817947551212693], [10.981803130633878, -5.621981191693385, 2.393765871225522], [116.0212438296085, -1.3012715928642666, -0.001922035677491829] }
this.cachedV == null
===========================================================================
org.apache.commons.math.linear.BiDiagonalTransformer.getMainDiagonalRef():::EXIT
this.householderVectors == orig(this.householderVectors)
this.householderVectors.getClass().getName() == orig(this.householderVectors.getClass().getName())
this.householderVectors[] == orig(this.householderVectors[])
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.cachedU == orig(this.cachedU)
this.cachedB == orig(this.cachedB)
this.cachedV == orig(this.cachedV)
this.main[] one of { [-74.22250282457561, 1.6627690648252533, 2.291009305998946, 1.004257812890381], [-9.219544457292887, 8.071323847840354, 4.903062379815523, 2.806585661782493], [41.98855724337373, -4.437554570620956, 1.5230153223874792, -1.0006003989539296] }
this.secondary[] one of { [-98.64399902396404, -0.019008555835969717, -0.1817947551212693], [10.981803130633878, -5.621981191693385, 2.393765871225522], [116.0212438296085, -1.3012715928642666, -0.001922035677491829] }
this.cachedV == null
return[] one of { [-74.22250282457561, 1.6627690648252533, 2.291009305998946, 1.004257812890381], [-9.219544457292887, 8.071323847840354, 4.903062379815523, 2.806585661782493], [41.98855724337373, -4.437554570620956, 1.5230153223874792, -1.0006003989539296] }
size(return[]) == 4
===========================================================================
org.apache.commons.math.linear.BiDiagonalTransformer.getSecondaryDiagonalRef():::ENTER
this.main[] one of { [-74.22250282457561, 1.6627690648252533, 2.291009305998946, 1.004257812890381], [-9.219544457292887, 8.071323847840354, 4.903062379815523, 2.806585661782493], [41.98855724337373, -4.437554570620956, 1.5230153223874792, -1.0006003989539296] }
this.secondary[] one of { [-98.64399902396404, -0.019008555835969717, -0.1817947551212693], [10.981803130633878, -5.621981191693385, 2.393765871225522], [116.0212438296085, -1.3012715928642666, -0.001922035677491829] }
this.cachedV == null
===========================================================================
org.apache.commons.math.linear.BiDiagonalTransformer.getSecondaryDiagonalRef():::EXIT
this.householderVectors == orig(this.householderVectors)
this.householderVectors.getClass().getName() == orig(this.householderVectors.getClass().getName())
this.householderVectors[] == orig(this.householderVectors[])
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.cachedU == orig(this.cachedU)
this.cachedB == orig(this.cachedB)
this.cachedV == orig(this.cachedV)
this.main[] one of { [-74.22250282457561, 1.6627690648252533, 2.291009305998946, 1.004257812890381], [-9.219544457292887, 8.071323847840354, 4.903062379815523, 2.806585661782493], [41.98855724337373, -4.437554570620956, 1.5230153223874792, -1.0006003989539296] }
this.secondary[] one of { [-98.64399902396404, -0.019008555835969717, -0.1817947551212693], [10.981803130633878, -5.621981191693385, 2.393765871225522], [116.0212438296085, -1.3012715928642666, -0.001922035677491829] }
this.cachedV == null
return[] one of { [-98.64399902396404, -0.019008555835969717, -0.1817947551212693], [10.981803130633878, -5.621981191693385, 2.393765871225522], [116.0212438296085, -1.3012715928642666, -0.001922035677491829] }
size(return[]) == 3
===========================================================================
org.apache.commons.math.linear.BiDiagonalTransformer.getV():::ENTER
this has only one value
this.householderVectors has only one value
this.householderVectors[] contains no nulls and has only one value, of length 4
this.main has only one value
this.main[] == [-9.219544457292887, 8.071323847840354, 4.903062379815523, 2.806585661782493]
this.secondary has only one value
this.secondary[] == [10.981803130633878, -5.621981191693385, 2.393765871225522]
this.secondary[] elements one of { -5.621981191693385, 2.393765871225522, 10.981803130633878 }
this.cachedV == null
size(this.householderVectors[]) == 4
===========================================================================
org.apache.commons.math.linear.BiDiagonalTransformer.getV():::EXIT
this.householderVectors == orig(this.householderVectors)
this.householderVectors.getClass().getName() == orig(this.householderVectors.getClass().getName())
this.householderVectors[] == orig(this.householderVectors[])
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.cachedU == orig(this.cachedU)
this.cachedB == orig(this.cachedB)
this.householderVectors has only one value
this.householderVectors[] contains no nulls and has only one value, of length 4
this.main has only one value
this.main[] == [-9.219544457292887, 8.071323847840354, 4.903062379815523, 2.806585661782493]
this.secondary has only one value
this.secondary[] == [10.981803130633878, -5.621981191693385, 2.393765871225522]
this.secondary[] elements one of { -5.621981191693385, 2.393765871225522, 10.981803130633878 }
this.cachedV has only one value
return has only one value
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
size(this.householderVectors[]) == 4
===========================================================================
org.apache.commons.math.linear.BiDiagonalTransformer.transformToLowerBiDiagonal():::ENTER
this has only one value
this.householderVectors has only one value
this.householderVectors[] contains no nulls and has only one value, of length 4
this.main has only one value
this.main[] == [0.0, 0.0, 0.0, 0.0]
this.main[] elements == 0.0
this.secondary has only one value
this.secondary[] == [0.0, 0.0, 0.0]
this.secondary[] elements == 0.0
this.cachedV == null
size(this.householderVectors[]) == 4
===========================================================================
org.apache.commons.math.linear.BiDiagonalTransformer.transformToLowerBiDiagonal():::EXIT
this.householderVectors == orig(this.householderVectors)
this.householderVectors.getClass().getName() == orig(this.householderVectors.getClass().getName())
this.householderVectors[] == orig(this.householderVectors[])
this.main == orig(this.main)
this.secondary == orig(this.secondary)
this.cachedU == orig(this.cachedU)
this.cachedB == orig(this.cachedB)
this.cachedV == orig(this.cachedV)
size(this.main[]) == orig(size(this.main[]))
size(this.secondary[]) == orig(size(this.secondary[]))
this.householderVectors has only one value
this.householderVectors[] contains no nulls and has only one value, of length 4
this.main has only one value
this.main[] == [-74.22250282457561, 1.6627690648252533, 2.291009305998946, 1.004257812890381]
this.secondary has only one value
this.secondary[] == [-98.64399902396404, -0.019008555835969717, -0.1817947551212693]
this.secondary[] elements one of { -98.64399902396404, -0.1817947551212693, -0.019008555835969717 }
this.cachedV == null
size(this.householderVectors[]) == 4
===========================================================================
org.apache.commons.math.linear.BiDiagonalTransformer.transformToUpperBiDiagonal():::ENTER
this.main[] == [0.0, 0.0, 0.0, 0.0]
this.main[] elements == 0.0
this.secondary[] == [0.0, 0.0, 0.0]
this.secondary[] elements == 0.0
this.cachedV == null
===========================================================================
org.apache.commons.math.linear.BiDiagonalTransformer.transformToUpperBiDiagonal():::EXIT
this.householderVectors == orig(this.householderVectors)
this.householderVectors.getClass().getName() == orig(this.householderVectors.getClass().getName())
this.householderVectors[] == orig(this.householderVectors[])
this.main == orig(this.main)
this.secondary == orig(this.secondary)
this.cachedU == orig(this.cachedU)
this.cachedB == orig(this.cachedB)
this.cachedV == orig(this.cachedV)
size(this.main[]) == orig(size(this.main[]))
size(this.secondary[]) == orig(size(this.secondary[]))
this.main[] one of { [-9.219544457292887, 8.071323847840354, 4.903062379815523, 2.806585661782493], [41.98855724337373, -4.437554570620956, 1.5230153223874792, -1.0006003989539296] }
this.secondary[] one of { [10.981803130633878, -5.621981191693385, 2.393765871225522], [116.0212438296085, -1.3012715928642666, -0.001922035677491829] }
this.cachedV == null
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix:::CLASS
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix:::OBJECT
this.blocks != null
this.blocks.getClass().getName() == double[][].class
this.blocks[] elements != null
this.rows == 200
this.columns == 200
this.blockRows == 4
this.blockColumns == 4
this.lu == null
size(this.blocks[]) == 16
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.BlockRealMatrix(double[][]):::ENTER
rawData.getClass().getName() == double[][].class
size(rawData[]) == 200
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.BlockRealMatrix(double[][]):::EXIT
rawData[] == orig(rawData[])
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.BlockRealMatrix(int, int):::ENTER
rows == 200
columns == 200
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.BlockRealMatrix(int, int):::EXIT
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.BlockRealMatrix(int, int, double[][], boolean):::ENTER
rows == 200
columns == 200
blockData.getClass().getName() == double[][].class
copyArray == false
size(blockData[]) == 16
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.BlockRealMatrix(int, int, double[][], boolean):::EXIT
blockData[] == orig(blockData[])
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.blockHeight(int):::ENTER
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.blockHeight(int):::EXIT
this.blocks == orig(this.blocks)
this.blocks.getClass().getName() == orig(this.blocks.getClass().getName())
this.blocks[] == orig(this.blocks[])
this.rows == orig(this.rows)
this.columns == orig(this.columns)
this.blockRows == orig(this.blockRows)
this.blockColumns == orig(this.blockColumns)
this.lu == orig(this.lu)
return one of { 44, 52 }
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.blockWidth(int):::ENTER
blockColumn >= 0
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.blockWidth(int):::EXIT
this.blocks == orig(this.blocks)
this.blocks.getClass().getName() == orig(this.blocks.getClass().getName())
this.blocks[] == orig(this.blocks[])
this.rows == orig(this.rows)
this.columns == orig(this.columns)
this.blockRows == orig(this.blockRows)
this.blockColumns == orig(this.blockColumns)
this.lu == orig(this.lu)
return one of { 44, 52 }
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.createBlocksLayout(int, int):::ENTER
rows == 200
columns == 200
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.createBlocksLayout(int, int):::EXIT
return.getClass().getName() == double[][].class
size(return[]) == 16
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.getColumnDimension():::ENTER
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.getColumnDimension():::EXIT
this.blocks == orig(this.blocks)
this.blocks.getClass().getName() == orig(this.blocks.getClass().getName())
this.blocks[] == orig(this.blocks[])
this.rows == orig(this.rows)
this.columns == orig(this.columns)
this.blockRows == orig(this.blockRows)
this.blockColumns == orig(this.blockColumns)
this.lu == orig(this.lu)
return == 200
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.getData():::ENTER
this has only one value
this.blocks has only one value
this.blocks[] contains no nulls and has only one value, of length 16
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.getData():::EXIT
this.blocks == orig(this.blocks)
this.blocks.getClass().getName() == orig(this.blocks.getClass().getName())
this.blocks[] == orig(this.blocks[])
this.rows == orig(this.rows)
this.columns == orig(this.columns)
this.blockRows == orig(this.blockRows)
this.blockColumns == orig(this.blockColumns)
this.lu == orig(this.lu)
this.blocks has only one value
this.blocks[] contains no nulls and has only one value, of length 16
return has only one value
return.getClass().getName() == double[][].class
return[] contains no nulls and has only one value, of length 200
size(return[]) == 200
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.getEntry(int, int):::ENTER
this has only one value
this.blocks has only one value
this.blocks[] contains no nulls and has only one value, of length 16
row >= 0
column >= 0
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.getEntry(int, int):::EXIT
this.blocks == orig(this.blocks)
this.blocks.getClass().getName() == orig(this.blocks.getClass().getName())
this.blocks[] == orig(this.blocks[])
this.rows == orig(this.rows)
this.columns == orig(this.columns)
this.blockRows == orig(this.blockRows)
this.blockColumns == orig(this.blockColumns)
this.lu == orig(this.lu)
this.blocks has only one value
this.blocks[] contains no nulls and has only one value, of length 16
return != 0
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.getRowDimension():::ENTER
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.getRowDimension():::EXIT
this.blocks == orig(this.blocks)
this.blocks.getClass().getName() == orig(this.blocks.getClass().getName())
this.blocks[] == orig(this.blocks[])
this.rows == orig(this.rows)
this.columns == orig(this.columns)
this.blockRows == orig(this.blockRows)
this.blockColumns == orig(this.blockColumns)
this.lu == orig(this.lu)
return == 200
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.multiply(org.apache.commons.math.linear.BlockRealMatrix):::ENTER
m.blocks.getClass().getName() == double[][].class
m.rows == 200
m.columns == 200
m.blockRows == 4
m.blockColumns == 4
m.lu == null
size(m.blocks[]) == 16
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.multiply(org.apache.commons.math.linear.BlockRealMatrix):::EXIT
this.blocks == orig(this.blocks)
this.blocks.getClass().getName() == orig(this.blocks.getClass().getName())
this.blocks[] == orig(this.blocks[])
this.rows == orig(this.rows)
this.columns == orig(this.columns)
this.blockRows == orig(this.blockRows)
this.blockColumns == orig(this.blockColumns)
this.lu == orig(this.lu)
m.blocks == orig(m.blocks)
m.blocks.getClass().getName() == orig(m.blocks.getClass().getName())
m.blocks[] == orig(m.blocks[])
m.rows == orig(m.rows)
m.columns == orig(m.columns)
m.blockRows == orig(m.blockRows)
m.blockColumns == orig(m.blockColumns)
m.lu == orig(m.lu)
m.blocks.getClass().getName() == double[][].class
m.rows == 200
m.columns == 200
m.blockRows == 4
m.blockColumns == 4
m.lu == null
return.blocks.getClass().getName() == double[][].class
return.rows == 200
return.columns == 200
return.blockRows == 4
return.blockColumns == 4
return.lu == null
size(m.blocks[]) == 16
size(return.blocks[]) == 16
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.multiply(org.apache.commons.math.linear.RealMatrix):::ENTER
m.getClass().getName() == org.apache.commons.math.linear.BlockRealMatrix.class
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.multiply(org.apache.commons.math.linear.RealMatrix):::EXIT503
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.multiply(org.apache.commons.math.linear.RealMatrix):::EXIT
this.blocks == orig(this.blocks)
this.blocks.getClass().getName() == orig(this.blocks.getClass().getName())
this.blocks[] == orig(this.blocks[])
this.rows == orig(this.rows)
this.columns == orig(this.columns)
this.blockRows == orig(this.blockRows)
this.blockColumns == orig(this.blockColumns)
this.lu == orig(this.lu)
return.blocks.getClass().getName() == double[][].class
return.rows == 200
return.columns == 200
return.blockRows == 4
return.blockColumns == 4
return.lu == null
size(return.blocks[]) == 16
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.toBlocksLayout(double[][]):::ENTER
rawData.getClass().getName() == double[][].class
size(rawData[]) == 200
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.toBlocksLayout(double[][]):::EXIT
rawData[] == orig(rawData[])
return.getClass().getName() == double[][].class
size(return[]) == 16
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.transpose():::ENTER
this has only one value
this.blocks has only one value
this.blocks[] contains no nulls and has only one value, of length 16
===========================================================================
org.apache.commons.math.linear.BlockRealMatrix.transpose():::EXIT
this.blocks == orig(this.blocks)
this.blocks.getClass().getName() == orig(this.blocks.getClass().getName())
this.blocks[] == orig(this.blocks[])
this.rows == orig(this.rows)
this.columns == orig(this.columns)
this.blockRows == orig(this.blockRows)
this.blockColumns == orig(this.blockColumns)
this.lu == orig(this.lu)
this.blocks has only one value
this.blocks[] contains no nulls and has only one value, of length 16
return has only one value
return.blocks has only one value
return.blocks.getClass().getName() == double[][].class
return.blocks[] contains no nulls and has only one value, of length 16
return.rows == 200
return.columns == 200
return.blockRows == 4
return.blockColumns == 4
return.lu == null
size(return.blocks[]) == 16
===========================================================================
org.apache.commons.math.linear.DefaultRealMatrixPreservingVisitor:::OBJECT
===========================================================================
org.apache.commons.math.linear.DefaultRealMatrixPreservingVisitor.DefaultRealMatrixPreservingVisitor():::EXIT
===========================================================================
org.apache.commons.math.linear.DefaultRealMatrixPreservingVisitor.end():::ENTER
===========================================================================
org.apache.commons.math.linear.DefaultRealMatrixPreservingVisitor.end():::EXIT
return == 0.0
===========================================================================
org.apache.commons.math.linear.DefaultRealMatrixPreservingVisitor.start(int, int, int, int, int, int):::ENTER
startRow == 0
startColumn == 0
columns % rows == 0
rows <= columns
rows > endRow
rows != endColumn
columns > endRow
columns - endColumn - 1 == 0
endColumn % endRow == 0
endRow <= endColumn
===========================================================================
org.apache.commons.math.linear.DefaultRealMatrixPreservingVisitor.start(int, int, int, int, int, int):::EXIT
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl$Solver:::OBJECT
this.realEigenvalues[] sorted by >
this.imagEigenvalues[] elements == 0.0
this.imagEigenvalues[] one of { [0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.eigenvectors.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector[].class
this.eigenvectors[] elements != null
this.eigenvectors[].getClass().getName() elements == org.apache.commons.math.linear.ArrayRealVector.class
this.eigenvectors[].getClass().getName() one of { [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector], [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector] }
this.eigenvectors[].data elements != null
size(this.realEigenvalues[]) one of { 5, 6 }
size(this.imagEigenvalues[]) one of { 5, 6 }
size(this.eigenvectors[]) one of { 5, 6 }
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl$Solver.Solver(double[], double[], org.apache.commons.math.linear.ArrayRealVector[]):::ENTER
imagEigenvalues[] elements == 0.0
imagEigenvalues[] one of { [0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
eigenvectors.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector[].class
size(realEigenvalues[]) one of { 5, 6 }
size(imagEigenvalues[]) one of { 5, 6 }
size(eigenvectors[]) one of { 5, 6 }
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl$Solver.Solver(double[], double[], org.apache.commons.math.linear.ArrayRealVector[]):::EXIT
realEigenvalues[] == orig(realEigenvalues[])
imagEigenvalues[] == orig(imagEigenvalues[])
eigenvectors[] == orig(eigenvectors[])
eigenvectors[].data == orig(eigenvectors[].data)
imagEigenvalues[] elements == 0.0
imagEigenvalues[] one of { [0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl$Solver.getInverse():::ENTER
this has only one value
this.realEigenvalues has only one value
this.realEigenvalues[] == [1.0000000000000002, 0.5000000000000001, -1.0000000000000004, -2.0000000000000013, -3.0000000000000013]
this.imagEigenvalues has only one value
this.imagEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0]
this.eigenvectors has only one value
this.eigenvectors[] contains no nulls and has only one value, of length 5
this.eigenvectors[].getClass().getName() == [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector]
this.eigenvectors[].data contains no nulls and has only one value, of length 5
size(this.realEigenvalues[]) == 5
size(this.imagEigenvalues[]) == 5
size(this.eigenvectors[]) == 5
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl$Solver.getInverse():::EXIT
this.realEigenvalues == orig(this.realEigenvalues)
this.realEigenvalues[] == orig(this.realEigenvalues[])
this.imagEigenvalues == orig(this.imagEigenvalues)
this.imagEigenvalues[] == orig(this.imagEigenvalues[])
this.eigenvectors == orig(this.eigenvectors)
this.eigenvectors.getClass().getName() == orig(this.eigenvectors.getClass().getName())
this.eigenvectors[] == orig(this.eigenvectors[])
this.eigenvectors[].data == orig(this.eigenvectors[].data)
this.realEigenvalues has only one value
this.realEigenvalues[] == [1.0000000000000002, 0.5000000000000001, -1.0000000000000004, -2.0000000000000013, -3.0000000000000013]
this.imagEigenvalues has only one value
this.imagEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0]
this.eigenvectors has only one value
this.eigenvectors[] contains no nulls and has only one value, of length 5
this.eigenvectors[].getClass().getName() == [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector]
this.eigenvectors[].data contains no nulls and has only one value, of length 5
return has only one value
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
size(this.realEigenvalues[]) == 5
size(this.imagEigenvalues[]) == 5
size(this.eigenvectors[]) == 5
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl$Solver.isNonSingular():::ENTER
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl$Solver.isNonSingular():::EXIT509
this.realEigenvalues has only one value
this.realEigenvalues[] == [0.9999999999999998, 0.0, -1.0, -1.9999999999999996, -3.0000000000000004]
this.imagEigenvalues has only one value
this.imagEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0]
this.eigenvectors has only one value
this.eigenvectors[] contains no nulls and has only one value, of length 5
this.eigenvectors[].getClass().getName() == [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector]
this.eigenvectors[].data contains no nulls and has only one value, of length 5
return == false
orig(this) has only one value
size(this.realEigenvalues[]) == 5
size(this.imagEigenvalues[]) == 5
size(this.eigenvectors[]) == 5
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl$Solver.isNonSingular():::EXIT509;condition="not(return == true)"
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl$Solver.isNonSingular():::EXIT512
this.realEigenvalues[] one of { [1.0000000000000002, 0.5000000000000001, -1.0000000000000004, -2.0000000000000013, -3.0000000000000013], [2.003, 2.0020000000000007, 2.0010000000000003, 1.0009999999999997, 1.0000000000000004, 9.999999999998899E-4], [140.06108778340982, 35.580125209649495, 32.98153654023173, 6.543006620937024, 0.4705513167157561, 0.36369252905610266] }
return == true
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl$Solver.isNonSingular():::EXIT512;condition="return == true"
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl$Solver.isNonSingular():::EXIT
this.realEigenvalues == orig(this.realEigenvalues)
this.realEigenvalues[] == orig(this.realEigenvalues[])
this.imagEigenvalues == orig(this.imagEigenvalues)
this.imagEigenvalues[] == orig(this.imagEigenvalues[])
this.eigenvectors == orig(this.eigenvectors)
this.eigenvectors.getClass().getName() == orig(this.eigenvectors.getClass().getName())
this.eigenvectors[] == orig(this.eigenvectors[])
this.eigenvectors[].data == orig(this.eigenvectors[].data)
(this.realEigenvalues[] == [0.9999999999999998, 0.0, -1.0, -1.9999999999999996, -3.0000000000000004])  <==>  (return == false)
(this.realEigenvalues[] == [0.9999999999999998, 0.0, -1.0, -1.9999999999999996, -3.0000000000000004])  ==>  (orig(this) has only one value)
(this.realEigenvalues[] == [0.9999999999999998, 0.0, -1.0, -1.9999999999999996, -3.0000000000000004])  ==>  (size(this.eigenvectors[]) == 5)
(this.realEigenvalues[] == [0.9999999999999998, 0.0, -1.0, -1.9999999999999996, -3.0000000000000004])  ==>  (size(this.imagEigenvalues[]) == 5)
(this.realEigenvalues[] == [0.9999999999999998, 0.0, -1.0, -1.9999999999999996, -3.0000000000000004])  ==>  (size(this.realEigenvalues[]) == 5)
(this.realEigenvalues[] == [0.9999999999999998, 0.0, -1.0, -1.9999999999999996, -3.0000000000000004])  ==>  (this.eigenvectors has only one value)
(this.realEigenvalues[] == [0.9999999999999998, 0.0, -1.0, -1.9999999999999996, -3.0000000000000004])  ==>  (this.eigenvectors[] contains no nulls and has only one value, of length 5)
(this.realEigenvalues[] == [0.9999999999999998, 0.0, -1.0, -1.9999999999999996, -3.0000000000000004])  ==>  (this.eigenvectors[].data contains no nulls and has only one value, of length 5)
(this.realEigenvalues[] == [0.9999999999999998, 0.0, -1.0, -1.9999999999999996, -3.0000000000000004])  ==>  (this.eigenvectors[].getClass().getName() == [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector])
(this.realEigenvalues[] == [0.9999999999999998, 0.0, -1.0, -1.9999999999999996, -3.0000000000000004])  ==>  (this.imagEigenvalues has only one value)
(this.realEigenvalues[] == [0.9999999999999998, 0.0, -1.0, -1.9999999999999996, -3.0000000000000004])  ==>  (this.imagEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0])
(this.realEigenvalues[] == [0.9999999999999998, 0.0, -1.0, -1.9999999999999996, -3.0000000000000004])  ==>  (this.realEigenvalues has only one value)
(this.realEigenvalues[] one of { [1.0000000000000002, 0.5000000000000001, -1.0000000000000004, -2.0000000000000013, -3.0000000000000013], [2.003, 2.0020000000000007, 2.0010000000000003, 1.0009999999999997, 1.0000000000000004, 9.999999999998899E-4], [140.06108778340982, 35.580125209649495, 32.98153654023173, 6.543006620937024, 0.4705513167157561, 0.36369252905610266] })  <==>  (return == true)
(this.realEigenvalues[] one of { [1.0000000000000002, 0.5000000000000001, -1.0000000000000004, -2.0000000000000013, -3.0000000000000013], [2.003, 2.0020000000000007, 2.0010000000000003, 1.0009999999999997, 1.0000000000000004, 9.999999999998899E-4], [140.06108778340982, 35.580125209649495, 32.98153654023173, 6.543006620937024, 0.4705513167157561, 0.36369252905610266] })  ==>  (size(this.eigenvectors[]) one of { 5, 6 })
(this.realEigenvalues[] one of { [1.0000000000000002, 0.5000000000000001, -1.0000000000000004, -2.0000000000000013, -3.0000000000000013], [2.003, 2.0020000000000007, 2.0010000000000003, 1.0009999999999997, 1.0000000000000004, 9.999999999998899E-4], [140.06108778340982, 35.580125209649495, 32.98153654023173, 6.543006620937024, 0.4705513167157561, 0.36369252905610266] })  ==>  (size(this.imagEigenvalues[]) one of { 5, 6 })
(this.realEigenvalues[] one of { [1.0000000000000002, 0.5000000000000001, -1.0000000000000004, -2.0000000000000013, -3.0000000000000013], [2.003, 2.0020000000000007, 2.0010000000000003, 1.0009999999999997, 1.0000000000000004, 9.999999999998899E-4], [140.06108778340982, 35.580125209649495, 32.98153654023173, 6.543006620937024, 0.4705513167157561, 0.36369252905610266] })  ==>  (size(this.realEigenvalues[]) one of { 5, 6 })
(this.realEigenvalues[] one of { [1.0000000000000002, 0.5000000000000001, -1.0000000000000004, -2.0000000000000013, -3.0000000000000013], [2.003, 2.0020000000000007, 2.0010000000000003, 1.0009999999999997, 1.0000000000000004, 9.999999999998899E-4], [140.06108778340982, 35.580125209649495, 32.98153654023173, 6.543006620937024, 0.4705513167157561, 0.36369252905610266] })  ==>  (this.eigenvectors[].getClass().getName() one of { [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector], [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector] })
(this.realEigenvalues[] one of { [1.0000000000000002, 0.5000000000000001, -1.0000000000000004, -2.0000000000000013, -3.0000000000000013], [2.003, 2.0020000000000007, 2.0010000000000003, 1.0009999999999997, 1.0000000000000004, 9.999999999998899E-4], [140.06108778340982, 35.580125209649495, 32.98153654023173, 6.543006620937024, 0.4705513167157561, 0.36369252905610266] })  ==>  (this.imagEigenvalues[] one of { [0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0] })
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl$Solver.isNonSingular():::EXIT;condition="return == true"
this.realEigenvalues[] one of { [1.0000000000000002, 0.5000000000000001, -1.0000000000000004, -2.0000000000000013, -3.0000000000000013], [2.003, 2.0020000000000007, 2.0010000000000003, 1.0009999999999997, 1.0000000000000004, 9.999999999998899E-4], [140.06108778340982, 35.580125209649495, 32.98153654023173, 6.543006620937024, 0.4705513167157561, 0.36369252905610266] }
return == true
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl$Solver.isNonSingular():::EXIT;condition="not(return == true)"
this.realEigenvalues has only one value
this.realEigenvalues[] == [0.9999999999999998, 0.0, -1.0, -1.9999999999999996, -3.0000000000000004]
this.imagEigenvalues has only one value
this.imagEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0]
this.eigenvectors has only one value
this.eigenvectors[] contains no nulls and has only one value, of length 5
this.eigenvectors[].getClass().getName() == [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector]
this.eigenvectors[].data contains no nulls and has only one value, of length 5
return == false
orig(this) has only one value
size(this.realEigenvalues[]) == 5
size(this.imagEigenvalues[]) == 5
size(this.eigenvectors[]) == 5
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl$Solver.solve(double[]):::ENTER
this has only one value
this.realEigenvalues has only one value
this.realEigenvalues[] == [140.06108778340982, 35.580125209649495, 32.98153654023173, 6.543006620937024, 0.4705513167157561, 0.36369252905610266]
this.realEigenvalues[] elements >= 0.36369252905610266
this.imagEigenvalues has only one value
this.imagEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.eigenvectors has only one value
this.eigenvectors[] contains no nulls and has only one value, of length 6
this.eigenvectors[].getClass().getName() == [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector]
this.eigenvectors[].data contains no nulls and has only one value, of length 6
b[] one of { [188.0, 70.0, 63.0, 59.0, 107.0, 36.0], [269.0, -21.0, 108.0, 86.0, 194.0, 69.0], [1561.0, 69.0, 739.0, 324.0, 1624.0, 796.0] }
size(this.realEigenvalues[]) == 6
size(this.imagEigenvalues[]) == 6
size(this.eigenvectors[]) == 6
size(b[]) == 6
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl$Solver.solve(double[]):::EXIT
this.realEigenvalues == orig(this.realEigenvalues)
this.realEigenvalues[] == orig(this.realEigenvalues[])
this.imagEigenvalues == orig(this.imagEigenvalues)
this.imagEigenvalues[] == orig(this.imagEigenvalues[])
this.eigenvectors == orig(this.eigenvectors)
this.eigenvectors.getClass().getName() == orig(this.eigenvectors.getClass().getName())
this.eigenvectors[] == orig(this.eigenvectors[])
this.eigenvectors[].data == orig(this.eigenvectors[].data)
b[] == orig(b[])
this.realEigenvalues has only one value
this.realEigenvalues[] == [140.06108778340982, 35.580125209649495, 32.98153654023173, 6.543006620937024, 0.4705513167157561, 0.36369252905610266]
this.realEigenvalues[] elements >= 0.36369252905610266
this.imagEigenvalues has only one value
this.imagEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.eigenvectors has only one value
this.eigenvectors[] contains no nulls and has only one value, of length 6
this.eigenvectors[].getClass().getName() == [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector]
this.eigenvectors[].data contains no nulls and has only one value, of length 6
b[] one of { [188.0, 70.0, 63.0, 59.0, 107.0, 36.0], [269.0, -21.0, 108.0, 86.0, 194.0, 69.0], [1561.0, 69.0, 739.0, 324.0, 1624.0, 796.0] }
return[] one of { [0.9999999999997948, 2.0000000000000577, 3.999999999999727, 8.000000000000608, 16.000000000000064, 32.00000000000034], [0.9999999999999649, 2.000000000000007, 3.000000000000001, 8.494593917163229E-14, -2.233456475320139E-15, 4.0849268412301853E-14], [1.9999999999999951, -0.9999999999999991, 1.999999999999988, -0.9999999999999828, 2.000000000000004, -0.9999999999999942] }
size(this.realEigenvalues[]) == 6
size(this.imagEigenvalues[]) == 6
size(this.eigenvectors[]) == 6
size(return[]) == 6
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl$Solver.solve(org.apache.commons.math.linear.RealMatrix):::ENTER
this has only one value
this.realEigenvalues has only one value
this.realEigenvalues[] == [140.06108778340982, 35.580125209649495, 32.98153654023173, 6.543006620937024, 0.4705513167157561, 0.36369252905610266]
this.imagEigenvalues has only one value
this.imagEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.eigenvectors has only one value
this.eigenvectors[] contains no nulls and has only one value, of length 6
this.eigenvectors[].getClass().getName() == [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector]
this.eigenvectors[].data contains no nulls and has only one value, of length 6
b has only one value
b.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
size(this.realEigenvalues[]) == 6
size(this.imagEigenvalues[]) == 6
size(this.eigenvectors[]) == 6
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl$Solver.solve(org.apache.commons.math.linear.RealMatrix):::EXIT
this.realEigenvalues == orig(this.realEigenvalues)
this.realEigenvalues[] == orig(this.realEigenvalues[])
this.imagEigenvalues == orig(this.imagEigenvalues)
this.imagEigenvalues[] == orig(this.imagEigenvalues[])
this.eigenvectors == orig(this.eigenvectors)
this.eigenvectors.getClass().getName() == orig(this.eigenvectors.getClass().getName())
this.eigenvectors[] == orig(this.eigenvectors[])
this.eigenvectors[].data == orig(this.eigenvectors[].data)
this.realEigenvalues has only one value
this.realEigenvalues[] == [140.06108778340982, 35.580125209649495, 32.98153654023173, 6.543006620937024, 0.4705513167157561, 0.36369252905610266]
this.imagEigenvalues has only one value
this.imagEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.eigenvectors has only one value
this.eigenvectors[] contains no nulls and has only one value, of length 6
this.eigenvectors[].getClass().getName() == [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector]
this.eigenvectors[].data contains no nulls and has only one value, of length 6
return has only one value
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
size(this.realEigenvalues[]) == 6
size(this.imagEigenvalues[]) == 6
size(this.eigenvectors[]) == 6
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl$Solver.solve(org.apache.commons.math.linear.RealVector):::ENTER
this has only one value
this.realEigenvalues has only one value
this.realEigenvalues[] == [140.06108778340982, 35.580125209649495, 32.98153654023173, 6.543006620937024, 0.4705513167157561, 0.36369252905610266]
this.realEigenvalues[] elements >= 0.36369252905610266
this.imagEigenvalues has only one value
this.imagEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.eigenvectors has only one value
this.eigenvectors[] contains no nulls and has only one value, of length 6
this.eigenvectors[].getClass().getName() == [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector]
this.eigenvectors[].data contains no nulls and has only one value, of length 6
size(this.realEigenvalues[]) == 6
size(this.imagEigenvalues[]) == 6
size(this.eigenvectors[]) == 6
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl$Solver.solve(org.apache.commons.math.linear.RealVector):::EXIT
this.realEigenvalues == orig(this.realEigenvalues)
this.realEigenvalues[] == orig(this.realEigenvalues[])
this.imagEigenvalues == orig(this.imagEigenvalues)
this.imagEigenvalues[] == orig(this.imagEigenvalues[])
this.eigenvectors == orig(this.eigenvectors)
this.eigenvectors.getClass().getName() == orig(this.eigenvectors.getClass().getName())
this.eigenvectors[] == orig(this.eigenvectors[])
this.eigenvectors[].data == orig(this.eigenvectors[].data)
this.realEigenvalues has only one value
this.realEigenvalues[] == [140.06108778340982, 35.580125209649495, 32.98153654023173, 6.543006620937024, 0.4705513167157561, 0.36369252905610266]
this.realEigenvalues[] elements >= 0.36369252905610266
this.imagEigenvalues has only one value
this.imagEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.eigenvectors has only one value
this.eigenvectors[] contains no nulls and has only one value, of length 6
this.eigenvectors[].getClass().getName() == [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector]
this.eigenvectors[].data contains no nulls and has only one value, of length 6
return.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
size(this.realEigenvalues[]) == 6
size(this.imagEigenvalues[]) == 6
size(this.eigenvectors[]) == 6
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl:::CLASS
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl:::OBJECT
this.splitTolerance == 2.2250738585072014E-308
this.squaredSecondary[] elements >= 1.2197396723810016E-14
this.transformer.householderVectors.getClass().getName() == double[][].class
this.transformer.householderVectors[] elements != null
this.transformer.cachedQ.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
this.transformer.cachedQt.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
this.transformer.cachedT == null
this.upperSpectra >= 0.0
this.sigma >= 0.0
this.pingPong one of { 0, 1 }
this.qMax == 0.0
this.eMin >= 0.0
this.tType one of { -2, -1, 0 }
this.dMin == 0.0
this.dMin1 >= 0.0
this.dMin2 >= 0.0
this.dN == 0.0
this.dN1 >= 0.0
this.dN2 >= 0.0
this.g == 0.0
this.realEigenvalues[] sorted by >=
this.imagEigenvalues[] elements == 0.0
this.eigenvectors.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector[].class
this.eigenvectors[] elements != null
this.eigenvectors[].getClass().getName() elements == org.apache.commons.math.linear.ArrayRealVector.class
this.eigenvectors[].data elements != null
this.cachedV.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
this.cachedD.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
this.cachedVt.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
size(this.eigenvectors[]) one of { 4, 5, 6 }
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.EigenDecompositionImpl(double[], double[], double):::ENTER
splitTolerance == 2.2250738585072014E-308
size(main[]) one of { 4, 5, 30 }
size(secondary[]) one of { 3, 4, 29 }
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.EigenDecompositionImpl(double[], double[], double):::EXIT
main[] == orig(main[])
secondary[] == orig(secondary[])
this.transformer == null
this.tau one of { 1.63578197306629E-25, 1.4726991276996085E-18, 6.094039419513807E-17 }
this.tType one of { -2, -1 }
this.imagEigenvalues[] one of { [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.eigenvectors == null
this.cachedV == null
this.cachedD == null
this.cachedVt == null
size(this.main[]) one of { 4, 5, 30 }
size(this.secondary[]) one of { 3, 4, 29 }
size(this.squaredSecondary[]) one of { 3, 4, 29 }
size(this.work[]) one of { 24, 30, 180 }
size(this.realEigenvalues[]) one of { 4, 5, 30 }
size(this.imagEigenvalues[]) one of { 4, 5, 30 }
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.EigenDecompositionImpl(org.apache.commons.math.linear.RealMatrix, double):::ENTER
splitTolerance == 2.2250738585072014E-308
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.EigenDecompositionImpl(org.apache.commons.math.linear.RealMatrix, double):::EXIT
this.transformer.cachedQ == null
this.transformer.cachedQt == null
this.tau == 0.0
this.tType one of { -2, -1 }
this.eigenvectors == null
this.cachedV == null
this.cachedD == null
this.cachedVt == null
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.computeGershgorinCircles():::ENTER
this.transformer.cachedQ == null
this.transformer.cachedQt == null
this.lowerSpectra == 0.0
this.upperSpectra == 0.0
this.minPivot == 0.0
this.sigma == 0.0
this.sigmaLow == 0.0
this.tau == 0.0
this.work[] elements == 0.0
this.pingPong == 0
this.eMin == 0.0
this.tType == 0
this.dMin1 == 0.0
this.dMin2 == 0.0
this.dN1 == 0.0
this.dN2 == 0.0
this.realEigenvalues == null
this.imagEigenvalues == null
this.eigenvectors == null
this.cachedV == null
this.cachedD == null
this.cachedVt == null
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.computeGershgorinCircles():::EXIT
this.splitTolerance == orig(this.splitTolerance)
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.squaredSecondary == orig(this.squaredSecondary)
this.squaredSecondary[] == orig(this.squaredSecondary[])
this.transformer == orig(this.transformer)
this.transformer.householderVectors == orig(this.transformer.householderVectors)
this.transformer.householderVectors.getClass().getName() == orig(this.transformer.householderVectors.getClass().getName())
this.transformer.householderVectors[] == orig(this.transformer.householderVectors[])
this.transformer.main == orig(this.transformer.main)
this.transformer.main[] == orig(this.transformer.main[])
this.transformer.secondary == orig(this.transformer.secondary)
this.transformer.secondary[] == orig(this.transformer.secondary[])
this.transformer.cachedQ == orig(this.transformer.cachedQ)
this.transformer.cachedQt == orig(this.transformer.cachedQt)
this.transformer.cachedT == orig(this.transformer.cachedT)
this.minPivot == orig(this.minPivot)
this.sigma == orig(this.sigma)
this.sigmaLow == orig(this.sigmaLow)
this.tau == orig(this.tau)
this.work == orig(this.work)
this.pingPong == orig(this.pingPong)
this.qMax == orig(this.qMax)
this.eMin == orig(this.eMin)
this.tType == orig(this.tType)
this.dMin == orig(this.dMin)
this.dMin1 == orig(this.dMin1)
this.dMin2 == orig(this.dMin2)
this.dN == orig(this.dN)
this.dN1 == orig(this.dN1)
this.dN2 == orig(this.dN2)
this.g == orig(this.g)
this.realEigenvalues == orig(this.realEigenvalues)
this.imagEigenvalues == orig(this.imagEigenvalues)
this.eigenvectors == orig(this.eigenvectors)
this.cachedV == orig(this.cachedV)
this.cachedD == orig(this.cachedD)
this.cachedVt == orig(this.cachedVt)
size(this.work[]) == orig(size(this.work[]))
this.transformer.cachedQ == null
this.transformer.cachedQt == null
this.sigma == 0.0
this.sigmaLow == 0.0
this.tau == 0.0
this.pingPong == 0
this.eMin == 0.0
this.tType == 0
this.dMin1 == 0.0
this.dMin2 == 0.0
this.dN1 == 0.0
this.dN2 == 0.0
this.realEigenvalues == null
this.imagEigenvalues == null
this.eigenvectors == null
this.cachedV == null
this.cachedD == null
this.cachedVt == null
orig(this.lowerSpectra) % this.lowerSpectra == 0
this.lowerSpectra != orig(this.lowerSpectra)
orig(this.upperSpectra) % this.upperSpectra == 0
this.upperSpectra > orig(this.upperSpectra)
orig(this.minPivot) % this.minPivot == 0
orig(this.minPivot) == this.minPivot**2
this.minPivot == orig(this.minPivot)**2
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.decompose():::ENTER
this.transformer.cachedQ == null
this.transformer.cachedQt == null
this.lowerSpectra == 0.0
this.upperSpectra == 0.0
this.minPivot == 0.0
this.sigma == 0.0
this.sigmaLow == 0.0
this.tau == 0.0
this.work == null
this.pingPong == 0
this.eMin == 0.0
this.tType == 0
this.dMin1 == 0.0
this.dMin2 == 0.0
this.dN1 == 0.0
this.dN2 == 0.0
this.realEigenvalues == null
this.imagEigenvalues == null
this.eigenvectors == null
this.cachedV == null
this.cachedD == null
this.cachedVt == null
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.decompose():::EXIT
this.splitTolerance == orig(this.splitTolerance)
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.squaredSecondary == orig(this.squaredSecondary)
this.squaredSecondary[] == orig(this.squaredSecondary[])
this.transformer == orig(this.transformer)
this.transformer.householderVectors == orig(this.transformer.householderVectors)
this.transformer.householderVectors.getClass().getName() == orig(this.transformer.householderVectors.getClass().getName())
this.transformer.householderVectors[] == orig(this.transformer.householderVectors[])
this.transformer.main == orig(this.transformer.main)
this.transformer.main[] == orig(this.transformer.main[])
this.transformer.secondary == orig(this.transformer.secondary)
this.transformer.secondary[] == orig(this.transformer.secondary[])
this.transformer.cachedQ == orig(this.transformer.cachedQ)
this.transformer.cachedQt == orig(this.transformer.cachedQt)
this.transformer.cachedT == orig(this.transformer.cachedT)
this.minPivot == orig(this.minPivot)
this.sigmaLow == orig(this.sigmaLow)
this.tau == orig(this.tau)
this.qMax == orig(this.qMax)
this.dMin == orig(this.dMin)
this.dN == orig(this.dN)
this.g == orig(this.g)
this.eigenvectors == orig(this.eigenvectors)
this.cachedV == orig(this.cachedV)
this.cachedD == orig(this.cachedD)
this.cachedVt == orig(this.cachedVt)
this.transformer.cachedQ == null
this.transformer.cachedQt == null
this.tau == 0.0
this.eMin >= 9.999999999992725E-4
this.tType one of { -2, -1 }
this.dMin1 >= 9.999999999992725E-4
this.dN1 >= 9.999999999992725E-4
this.eigenvectors == null
this.cachedV == null
this.cachedD == null
this.cachedVt == null
orig(this.lowerSpectra) % this.lowerSpectra == 0
this.lowerSpectra != orig(this.lowerSpectra)
orig(this.upperSpectra) % this.upperSpectra == 0
this.upperSpectra > orig(this.upperSpectra)
orig(this.minPivot) % this.minPivot == 0
orig(this.minPivot) == this.minPivot**2
this.minPivot == orig(this.minPivot)**2
orig(this.sigma) % this.sigma == 0
this.sigma > orig(this.sigma)
orig(this.sigmaLow) % this.sigmaLow == 0
orig(this.sigmaLow) == this.sigmaLow**2
this.sigmaLow == orig(this.sigmaLow)**2
this.pingPong >= orig(this.pingPong)
orig(this.eMin) % this.eMin == 0
this.eMin > orig(this.eMin)
this.tType < orig(this.tType)
orig(this.dMin1) % this.dMin1 == 0
this.dMin1 > orig(this.dMin1)
orig(this.dMin2) % this.dMin2 == 0
this.dMin2 > orig(this.dMin2)
orig(this.dN1) % this.dN1 == 0
this.dN1 > orig(this.dN1)
orig(this.dN2) % this.dN2 == 0
this.dN2 > orig(this.dN2)
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.getD():::ENTER
this.main[] == [1.621947170207346, 1.186306954087243, 0.1957008217109859, 1.960456427028183, 1.0417187762259323, 2.00186985074031]
this.secondary[] == [-0.5181110271437879, -0.44555705706239607, 0.0053983136739406265, 0.1995402249915613, 0.003076064765622194]
this.squaredSecondary[] == [0.2684390364479909, 0.19852109109810326, 2.9141790522254344E-5, 0.0398163013896829, 9.462174442302324E-6]
this.transformer.main[] == [1.621947170207346, 1.186306954087243, 0.1957008217109859, 1.960456427028183, 1.0417187762259323, 2.00186985074031]
this.transformer.secondary[] == [-0.5181110271437879, -0.44555705706239607, 0.0053983136739406265, 0.1995402249915613, 0.003076064765622194]
this.lowerSpectra == -0.2552545490253508
this.upperSpectra == 2.165394965693685
this.minPivot == 2.2250738585072014E-308
this.sigma == 1.002000010393658
this.sigmaLow == 2.5761800551373067E-17
this.tau == 0.0
this.work[] == [-9.999999999998899E-4, 1.6209471702073461, -0.3196347399018025, -8.169246529243779E-15, -8.169246529243779E-15, -3.1285710692999853, -0.0011021033770045622, 1.0197006706858827, -0.4369488712434605, 1.0210337700383774E-4, 0.16560628340135955, -2.2885972840580195, -0.0012101911566576612, 1.5168553013947218E-5, 355.8885062389914, 2.10191156657612E-4, 0.1946856531579719, 0.0028098687720445126, -1.8984155563034226, 0.03825863739993185, 5.215560159806338, 1.8974155562832298, 1.9211977896080583, 0.1917339595148944, -1.0211549358822187, 4.728481152405095E-6, 650.5397116910541, 1.0201549353329253, 1.0407140471954865, 0.0015373637443155377, -2.002093019664138, -2.3243503056225023E-4, 0.6466561924473226, 2.000860584633576, 2.00086985074031, 2.004945915505932]
this.pingPong == 1
this.eMin == 9.999999999992725E-4
this.tType == -1
this.dMin1 == 9.999999999992725E-4
this.dMin2 == 0.9999999999999997
this.dN1 == 9.999999999992725E-4
this.dN2 == 0.9999999999999997
this.realEigenvalues[] == [2.003, 2.0020000000000007, 2.0010000000000003, 1.0009999999999997, 1.0000000000000004, 9.999999999998899E-4]
this.imagEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.eigenvectors[].getClass().getName() == [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector]
this.cachedVt == null
size(this.main[]) == 6
size(this.secondary[]) == 5
size(this.squaredSecondary[]) == 5
size(this.transformer.householderVectors[]) == 6
size(this.transformer.main[]) == 6
size(this.transformer.secondary[]) == 5
size(this.work[]) == 36
size(this.realEigenvalues[]) == 6
size(this.imagEigenvalues[]) == 6
size(this.eigenvectors[]) == 6
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.getD():::EXIT
this.splitTolerance == orig(this.splitTolerance)
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.squaredSecondary == orig(this.squaredSecondary)
this.squaredSecondary[] == orig(this.squaredSecondary[])
this.transformer == orig(this.transformer)
this.transformer.householderVectors == orig(this.transformer.householderVectors)
this.transformer.householderVectors.getClass().getName() == orig(this.transformer.householderVectors.getClass().getName())
this.transformer.householderVectors[] == orig(this.transformer.householderVectors[])
this.transformer.main == orig(this.transformer.main)
this.transformer.main[] == orig(this.transformer.main[])
this.transformer.secondary == orig(this.transformer.secondary)
this.transformer.secondary[] == orig(this.transformer.secondary[])
this.transformer.cachedQ == orig(this.transformer.cachedQ)
this.transformer.cachedQ.getClass().getName() == orig(this.transformer.cachedQ.getClass().getName())
this.transformer.cachedQt == orig(this.transformer.cachedQt)
this.transformer.cachedQt.getClass().getName() == orig(this.transformer.cachedQt.getClass().getName())
this.transformer.cachedT == orig(this.transformer.cachedT)
this.lowerSpectra == orig(this.lowerSpectra)
this.upperSpectra == orig(this.upperSpectra)
this.minPivot == orig(this.minPivot)
this.sigma == orig(this.sigma)
this.sigmaLow == orig(this.sigmaLow)
this.tau == orig(this.tau)
this.work == orig(this.work)
this.work[] == orig(this.work[])
this.pingPong == orig(this.pingPong)
this.qMax == orig(this.qMax)
this.eMin == orig(this.eMin)
this.tType == orig(this.tType)
this.dMin == orig(this.dMin)
this.dMin1 == orig(this.dMin1)
this.dMin2 == orig(this.dMin2)
this.dN == orig(this.dN)
this.dN1 == orig(this.dN1)
this.dN2 == orig(this.dN2)
this.g == orig(this.g)
this.realEigenvalues == orig(this.realEigenvalues)
this.realEigenvalues[] == orig(this.realEigenvalues[])
this.imagEigenvalues == orig(this.imagEigenvalues)
this.imagEigenvalues[] == orig(this.imagEigenvalues[])
this.eigenvectors == orig(this.eigenvectors)
this.eigenvectors.getClass().getName() == orig(this.eigenvectors.getClass().getName())
this.eigenvectors[] == orig(this.eigenvectors[])
this.eigenvectors[].data == orig(this.eigenvectors[].data)
this.cachedV == orig(this.cachedV)
this.cachedV.getClass().getName() == orig(this.cachedV.getClass().getName())
this.cachedD.getClass().getName() == orig(this.cachedD.getClass().getName())
this.cachedVt == orig(this.cachedVt)
this.main[] == [1.621947170207346, 1.186306954087243, 0.1957008217109859, 1.960456427028183, 1.0417187762259323, 2.00186985074031]
this.secondary[] == [-0.5181110271437879, -0.44555705706239607, 0.0053983136739406265, 0.1995402249915613, 0.003076064765622194]
this.squaredSecondary[] == [0.2684390364479909, 0.19852109109810326, 2.9141790522254344E-5, 0.0398163013896829, 9.462174442302324E-6]
this.transformer.main[] == [1.621947170207346, 1.186306954087243, 0.1957008217109859, 1.960456427028183, 1.0417187762259323, 2.00186985074031]
this.transformer.secondary[] == [-0.5181110271437879, -0.44555705706239607, 0.0053983136739406265, 0.1995402249915613, 0.003076064765622194]
this.lowerSpectra == -0.2552545490253508
this.upperSpectra == 2.165394965693685
this.minPivot == 2.2250738585072014E-308
this.sigma == 1.002000010393658
this.sigmaLow == 2.5761800551373067E-17
this.tau == 0.0
this.work[] == [-9.999999999998899E-4, 1.6209471702073461, -0.3196347399018025, -8.169246529243779E-15, -8.169246529243779E-15, -3.1285710692999853, -0.0011021033770045622, 1.0197006706858827, -0.4369488712434605, 1.0210337700383774E-4, 0.16560628340135955, -2.2885972840580195, -0.0012101911566576612, 1.5168553013947218E-5, 355.8885062389914, 2.10191156657612E-4, 0.1946856531579719, 0.0028098687720445126, -1.8984155563034226, 0.03825863739993185, 5.215560159806338, 1.8974155562832298, 1.9211977896080583, 0.1917339595148944, -1.0211549358822187, 4.728481152405095E-6, 650.5397116910541, 1.0201549353329253, 1.0407140471954865, 0.0015373637443155377, -2.002093019664138, -2.3243503056225023E-4, 0.6466561924473226, 2.000860584633576, 2.00086985074031, 2.004945915505932]
this.pingPong == 1
this.eMin == 9.999999999992725E-4
this.tType == -1
this.dMin1 == 9.999999999992725E-4
this.dMin2 == 0.9999999999999997
this.dN1 == 9.999999999992725E-4
this.dN2 == 0.9999999999999997
this.realEigenvalues[] == [2.003, 2.0020000000000007, 2.0010000000000003, 1.0009999999999997, 1.0000000000000004, 9.999999999998899E-4]
this.imagEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.eigenvectors[].getClass().getName() == [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector]
this.cachedVt == null
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
size(this.main[]) == 6
size(this.secondary[]) == 5
size(this.squaredSecondary[]) == 5
size(this.transformer.householderVectors[]) == 6
size(this.transformer.main[]) == 6
size(this.transformer.secondary[]) == 5
size(this.work[]) == 36
size(this.realEigenvalues[]) == 6
size(this.imagEigenvalues[]) == 6
size(this.eigenvectors[]) == 6
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.getEigenvector(int):::ENTER
this.main[] one of { [1.621947170207346, 1.186306954087243, 0.1957008217109859, 1.960456427028183, 1.0417187762259323, 2.00186985074031], [22.330154644539597, 46.65485522478641, 17.393672330044705, 54.46687435351116, 80.17800767709437] }
this.main[] elements >= 0.1957008217109859
this.secondary[] one of { [-0.5181110271437879, -0.44555705706239607, 0.0053983136739406265, 0.1995402249915613, 0.003076064765622194], [13.04450406501361, -5.977590941539671, 2.9040909856707517, 7.1570352792841225] }
this.squaredSecondary[] one of { [0.2684390364479909, 0.19852109109810326, 2.9141790522254344E-5, 0.0398163013896829, 9.462174442302324E-6], [170.1590863021566, 35.731593464377134, 8.433744453054118, 51.22315398891756] }
this.squaredSecondary[] elements >= 9.462174442302324E-6
this.transformer.householderVectors has only one value
this.transformer.householderVectors[] contains no nulls and has only one value, of length 6
this.transformer.main has only one value
this.transformer.main[] == [1.621947170207346, 1.186306954087243, 0.1957008217109859, 1.960456427028183, 1.0417187762259323, 2.00186985074031]
this.transformer.secondary has only one value
this.transformer.secondary[] == [-0.5181110271437879, -0.44555705706239607, 0.0053983136739406265, 0.1995402249915613, 0.003076064765622194]
this.lowerSpectra one of { -0.2552545490253508, 8.511990402834282 }
this.upperSpectra one of { 2.165394965693685, 87.33504295637849 }
this.minPivot one of { 2.2250738585072014E-308, 3.7861653471839945E-306 }
this.sigma one of { 1.002000010393658, 38.39807540474629 }
this.sigmaLow one of { 2.5761800551373067E-17, 3.495263272106284E-15 }
this.tau == 1.4726991276996085E-18
this.eMin one of { 9.999999999992725E-4, 0.9205278628910776 }
this.tType one of { -2, -1 }
this.dMin1 one of { 9.999999999992725E-4, 0.9204225582616561 }
this.dMin2 one of { 0.9999999999999997, 29.50464808582405 }
this.dN1 one of { 9.999999999992725E-4, 0.9204225582616561 }
this.dN2 one of { 0.9999999999999997, 29.50464808582405 }
this.realEigenvalues[] one of { [2.003, 2.0020000000000007, 2.0010000000000003, 1.0009999999999997, 1.0000000000000004, 9.999999999998899E-4], [82.04441197864544, 53.45669876814309, 52.53627960031589, 18.847969621995247, 14.13820426087657] }
this.realEigenvalues[] elements >= 9.999999999998899E-4
this.realEigenvalues[] sorted by >
this.imagEigenvalues[] one of { [0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.eigenvectors[].getClass().getName() one of { [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector], [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector] }
this.cachedV == null
this.cachedD == null
this.cachedVt == null
size(this.main[]) one of { 5, 6 }
size(this.secondary[]) one of { 4, 5 }
size(this.squaredSecondary[]) one of { 4, 5 }
size(this.transformer.householderVectors[]) == 6
size(this.transformer.main[]) == 6
size(this.transformer.secondary[]) == 5
size(this.work[]) one of { 30, 36 }
size(this.realEigenvalues[]) one of { 5, 6 }
size(this.imagEigenvalues[]) one of { 5, 6 }
size(this.eigenvectors[]) one of { 5, 6 }
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.getEigenvector(int):::EXIT
this.splitTolerance == orig(this.splitTolerance)
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.squaredSecondary == orig(this.squaredSecondary)
this.squaredSecondary[] == orig(this.squaredSecondary[])
this.transformer == orig(this.transformer)
this.transformer.householderVectors == orig(this.transformer.householderVectors)
this.transformer.householderVectors.getClass().getName() == orig(this.transformer.householderVectors.getClass().getName())
this.transformer.householderVectors[] == orig(this.transformer.householderVectors[])
this.transformer.main == orig(this.transformer.main)
this.transformer.main[] == orig(this.transformer.main[])
this.transformer.secondary == orig(this.transformer.secondary)
this.transformer.secondary[] == orig(this.transformer.secondary[])
this.transformer.cachedQ.getClass().getName() == orig(this.transformer.cachedQ.getClass().getName())
this.transformer.cachedQt.getClass().getName() == orig(this.transformer.cachedQt.getClass().getName())
this.transformer.cachedT == orig(this.transformer.cachedT)
this.lowerSpectra == orig(this.lowerSpectra)
this.upperSpectra == orig(this.upperSpectra)
this.minPivot == orig(this.minPivot)
this.sigma == orig(this.sigma)
this.sigmaLow == orig(this.sigmaLow)
this.tau == orig(this.tau)
this.work == orig(this.work)
this.pingPong == orig(this.pingPong)
this.qMax == orig(this.qMax)
this.eMin == orig(this.eMin)
this.tType == orig(this.tType)
this.dMin == orig(this.dMin)
this.dMin1 == orig(this.dMin1)
this.dMin2 == orig(this.dMin2)
this.dN == orig(this.dN)
this.dN1 == orig(this.dN1)
this.dN2 == orig(this.dN2)
this.g == orig(this.g)
this.realEigenvalues == orig(this.realEigenvalues)
this.realEigenvalues[] == orig(this.realEigenvalues[])
this.imagEigenvalues == orig(this.imagEigenvalues)
this.imagEigenvalues[] == orig(this.imagEigenvalues[])
this.eigenvectors.getClass().getName() == orig(this.eigenvectors.getClass().getName())
this.eigenvectors[].getClass().getName() == orig(this.eigenvectors[].getClass().getName())
this.cachedV == orig(this.cachedV)
this.cachedD == orig(this.cachedD)
this.cachedVt == orig(this.cachedVt)
size(this.work[]) == orig(size(this.work[]))
this.main[] one of { [1.621947170207346, 1.186306954087243, 0.1957008217109859, 1.960456427028183, 1.0417187762259323, 2.00186985074031], [22.330154644539597, 46.65485522478641, 17.393672330044705, 54.46687435351116, 80.17800767709437] }
this.main[] elements >= 0.1957008217109859
this.secondary[] one of { [-0.5181110271437879, -0.44555705706239607, 0.0053983136739406265, 0.1995402249915613, 0.003076064765622194], [13.04450406501361, -5.977590941539671, 2.9040909856707517, 7.1570352792841225] }
this.squaredSecondary[] one of { [0.2684390364479909, 0.19852109109810326, 2.9141790522254344E-5, 0.0398163013896829, 9.462174442302324E-6], [170.1590863021566, 35.731593464377134, 8.433744453054118, 51.22315398891756] }
this.squaredSecondary[] elements >= 9.462174442302324E-6
this.transformer.householderVectors has only one value
this.transformer.householderVectors[] contains no nulls and has only one value, of length 6
this.transformer.main has only one value
this.transformer.main[] == [1.621947170207346, 1.186306954087243, 0.1957008217109859, 1.960456427028183, 1.0417187762259323, 2.00186985074031]
this.transformer.secondary has only one value
this.transformer.secondary[] == [-0.5181110271437879, -0.44555705706239607, 0.0053983136739406265, 0.1995402249915613, 0.003076064765622194]
this.transformer.cachedQ has only one value
this.transformer.cachedQt has only one value
this.lowerSpectra one of { -0.2552545490253508, 8.511990402834282 }
this.upperSpectra one of { 2.165394965693685, 87.33504295637849 }
this.minPivot one of { 2.2250738585072014E-308, 3.7861653471839945E-306 }
this.sigma one of { 1.002000010393658, 38.39807540474629 }
this.sigmaLow one of { 2.5761800551373067E-17, 3.495263272106284E-15 }
this.tau == 1.4726991276996085E-18
this.work[] one of { [-14.13820426087657, 8.191950383663027, 1.5923563320192826, 3.552713678800501E-15, 3.552713678800501E-15, 0.6280001403529384, -27.28955477036071, 11.74515231793415, -0.5089411171290001, 13.15135050948415, 20.771498645975704, -1.9648638444484954, -16.265065988122714, 0.21322625764074488, 13.619762489869897, 2.1268617272461476, 3.0422418115273944, 0.07342271943022248, -53.179424359825006, 0.7756406188267846, 9.227256935189498, 39.041220098949, 39.553029473808365, 0.10837456971482332, -79.22864075460532, 4.7478465603489894E-11, 65.67695023133969, 65.09043649377622, 66.0398034162178, 87.33504295637849], [-9.999999999998899E-4, 1.6209471702073461, -0.3196347399018025, -8.169246529243779E-15, -8.169246529243779E-15, -3.1285710692999853, -0.0011021033770045622, 1.0197006706858827, -0.4369488712434605, 1.0210337700383774E-4, 0.16560628340135955, -2.2885972840580195, -0.0012101911566576612, 1.5168553013947218E-5, 355.8885062389914, 2.10191156657612E-4, 0.1946856531579719, 0.0028098687720445126, -1.8984155563034226, 0.03825863739993185, 5.215560159806338, 1.8974155562832298, 1.9211977896080583, 0.1917339595148944, -1.0211549358822187, 4.728481152405095E-6, 650.5397116910541, 1.0201549353329253, 1.0407140471954865, 0.0015373637443155377, -2.002093019664138, -2.3243503056225023E-4, 0.6466561924473226, 2.000860584633576, 2.00086985074031, 2.004945915505932] }
this.eMin one of { 9.999999999992725E-4, 0.9205278628910776 }
this.tType one of { -2, -1 }
this.dMin1 one of { 9.999999999992725E-4, 0.9204225582616561 }
this.dMin2 one of { 0.9999999999999997, 29.50464808582405 }
this.dN1 one of { 9.999999999992725E-4, 0.9204225582616561 }
this.dN2 one of { 0.9999999999999997, 29.50464808582405 }
this.realEigenvalues[] one of { [2.003, 2.0020000000000007, 2.0010000000000003, 1.0009999999999997, 1.0000000000000004, 9.999999999998899E-4], [82.04441197864544, 53.45669876814309, 52.53627960031589, 18.847969621995247, 14.13820426087657] }
this.realEigenvalues[] elements >= 9.999999999998899E-4
this.realEigenvalues[] sorted by >
this.imagEigenvalues[] one of { [0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.eigenvectors[].getClass().getName() one of { [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector], [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector] }
this.cachedV == null
this.cachedD == null
this.cachedVt == null
return.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
size(this.main[]) one of { 5, 6 }
size(this.secondary[]) one of { 4, 5 }
size(this.squaredSecondary[]) one of { 4, 5 }
size(this.transformer.householderVectors[]) == 6
size(this.transformer.main[]) == 6
size(this.transformer.secondary[]) == 5
size(this.work[]) one of { 30, 36 }
size(this.realEigenvalues[]) one of { 5, 6 }
size(this.imagEigenvalues[]) one of { 5, 6 }
size(this.eigenvectors[]) one of { 5, 6 }
this.work[] <= orig(this.work[]) (lexically)
this.eigenvectors[] == orig(this.eigenvectors[]) (elementwise)
this.eigenvectors[].getClass().getName() == orig(this.eigenvectors[].getClass().getName()) (elementwise)
this.eigenvectors[].data == orig(this.eigenvectors[].data) (elementwise)
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.getRealEigenvalue(int):::ENTER
this.main[] one of { [0.5608, 0.632679948253558, 0.3187586564535181, 0.1877613952929248], [1.621947170207346, 1.186306954087243, 0.1957008217109859, 1.960456427028183, 1.0417187762259323, 2.00186985074031] }
this.secondary[] one of { [-0.5181110271437879, -0.44555705706239607, 0.0053983136739406265, 0.1995402249915613, 0.003076064765622194], [0.37746438242568, -0.16975874723521403, 0.08877847691231106] }
this.squaredSecondary[] one of { [0.14247935999999997, 0.028818032262869286, 0.007881617962869746], [0.2684390364479909, 0.19852109109810326, 2.9141790522254344E-5, 0.0398163013896829, 9.462174442302324E-6] }
this.transformer.main[] one of { [0.5608, 0.632679948253558, 0.3187586564535181, 0.1877613952929248], [1.621947170207346, 1.186306954087243, 0.1957008217109859, 1.960456427028183, 1.0417187762259323, 2.00186985074031] }
this.transformer.secondary[] one of { [-0.5181110271437879, -0.44555705706239607, 0.0053983136739406265, 0.1995402249915613, 0.003076064765622194], [0.37746438242568, -0.16975874723521403, 0.08877847691231106] }
this.lowerSpectra one of { -0.2552545490253508, 0.06022143230599297 }
this.upperSpectra one of { 1.1799030779144521, 2.165394965693685 }
this.minPivot == 2.2250738585072014E-308
this.sigma one of { 0.10000000053147409, 1.002000010393658 }
this.sigmaLow one of { 7.380558471045207E-19, 2.5761800551373067E-17 }
this.tau == 9.939647405784749E-28
this.work[] one of { [-9.999999999998899E-4, 1.6209471702073461, -0.3196347399018025, -8.169246529243779E-15, -8.169246529243779E-15, -3.1285710692999853, -0.0011021033770045622, 1.0197006706858827, -0.4369488712434605, 1.0210337700383774E-4, 0.16560628340135955, -2.2885972840580195, -0.0012101911566576612, 1.5168553013947218E-5, 355.8885062389914, 2.10191156657612E-4, 0.1946856531579719, 0.0028098687720445126, -1.8984155563034226, 0.03825863739993185, 5.215560159806338, 1.8974155562832298, 1.9211977896080583, 0.1917339595148944, -1.0211549358822187, 4.728481152405095E-6, 650.5397116910541, 1.0201549353329253, 1.0407140471954865, 0.0015373637443155377, -2.002093019664138, -2.3243503056225023E-4, 0.6466561924473226, 2.000860584633576, 2.00086985074031, 2.004945915505932], [0.9000000005314743, 0.7999903550846043, 1.8084416226919877E-6, 7.233657476602638E-6, 0.30000000053147424, 0.20000241125791965, 1.3660666050119847E-49, 2.7487307480404387E-23, 0.10000000053147409, 9.939647405784749E-28, 0.20000241125791965, 0.20000964472067245, 5.314743469241257E-10, 0.0, 0.002812415815204172, 9.29819620430011E-4, 0.18333561757432, 0.08545681859266396, 0.06022143230599297, 0.09898291838061374, 0.93826438242568, 1.1799030779144521, 0.5772958806010432, 0.27653987220523585], [2.0020000103936577, 0.9999999999999997, 8.533798493190963E-24, 8.533798493197168E-21, 1.0030000103936572, 9.999999999992725E-4, 0.0, 4.041731596144979E-21, 1.002000010393658, 0.0, 9.999999999992725E-4, 9.999984071019884E-4, 0.0020000103936573593, 0.0, 0.002642668607682132, 0.0013269351371628176, 0.0010000103936571184, 1.5777218104420236E-30, 1.870588261705347E-7, 1.8893157510071672E-7, 1.0393657686729643E-8, 0.0, 3.0937773380520616E-7, 2.47038510057482E-7, 1.1038361430635582, 0.22263886988105908, -0.2552545490253508, 1.7555178883626812, 0.8391024864687489, 1.9987937859746876, 2.140058197351134, 2.149975038293427, 0.6466561924473226, 2.165394965693685, 1.2443350659831158, 2.004945915505932] }
this.pingPong == 1
this.eMin one of { 9.999999999992725E-4, 0.20000241125791965 }
this.tType one of { -2, -1 }
this.dMin1 one of { 9.999999999992725E-4, 0.20000060281629697 }
this.dMin2 one of { 0.7999903550846043, 0.9999999999999997 }
this.dN1 one of { 9.999999999992725E-4, 0.20000060281629697 }
this.dN2 one of { 0.7999903550846043, 0.9999999999999997 }
this.realEigenvalues[] one of { [1.0000000000000002, 0.4000000000000002, 0.20000000000000004, 0.1000000000000003], [2.003, 2.0020000000000007, 2.0010000000000003, 1.0009999999999997, 1.0000000000000004, 9.999999999998899E-4] }
this.realEigenvalues[] sorted by >
this.imagEigenvalues[] one of { [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.eigenvectors[] contains no nulls and has only one value, of length 6
this.eigenvectors[].getClass().getName() == [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector]
this.eigenvectors[].data contains no nulls and has only one value, of length 6
this.cachedV == null
this.cachedD == null
this.cachedVt == null
size(this.main[]) one of { 4, 6 }
size(this.secondary[]) one of { 3, 5 }
size(this.squaredSecondary[]) one of { 3, 5 }
size(this.transformer.householderVectors[]) one of { 4, 6 }
size(this.transformer.main[]) one of { 4, 6 }
size(this.transformer.secondary[]) one of { 3, 5 }
size(this.work[]) one of { 24, 36 }
size(this.realEigenvalues[]) one of { 4, 6 }
size(this.imagEigenvalues[]) one of { 4, 6 }
size(this.eigenvectors[]) == 6
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.getRealEigenvalue(int):::EXIT
this.splitTolerance == orig(this.splitTolerance)
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.squaredSecondary == orig(this.squaredSecondary)
this.squaredSecondary[] == orig(this.squaredSecondary[])
this.transformer == orig(this.transformer)
this.transformer.householderVectors == orig(this.transformer.householderVectors)
this.transformer.householderVectors.getClass().getName() == orig(this.transformer.householderVectors.getClass().getName())
this.transformer.householderVectors[] == orig(this.transformer.householderVectors[])
this.transformer.main == orig(this.transformer.main)
this.transformer.main[] == orig(this.transformer.main[])
this.transformer.secondary == orig(this.transformer.secondary)
this.transformer.secondary[] == orig(this.transformer.secondary[])
this.transformer.cachedQ == orig(this.transformer.cachedQ)
this.transformer.cachedQ.getClass().getName() == orig(this.transformer.cachedQ.getClass().getName())
this.transformer.cachedQt == orig(this.transformer.cachedQt)
this.transformer.cachedQt.getClass().getName() == orig(this.transformer.cachedQt.getClass().getName())
this.transformer.cachedT == orig(this.transformer.cachedT)
this.lowerSpectra == orig(this.lowerSpectra)
this.upperSpectra == orig(this.upperSpectra)
this.minPivot == orig(this.minPivot)
this.sigma == orig(this.sigma)
this.sigmaLow == orig(this.sigmaLow)
this.tau == orig(this.tau)
this.work == orig(this.work)
this.work[] == orig(this.work[])
this.pingPong == orig(this.pingPong)
this.qMax == orig(this.qMax)
this.eMin == orig(this.eMin)
this.tType == orig(this.tType)
this.dMin == orig(this.dMin)
this.dMin1 == orig(this.dMin1)
this.dMin2 == orig(this.dMin2)
this.dN == orig(this.dN)
this.dN1 == orig(this.dN1)
this.dN2 == orig(this.dN2)
this.g == orig(this.g)
this.realEigenvalues == orig(this.realEigenvalues)
this.realEigenvalues[] == orig(this.realEigenvalues[])
this.imagEigenvalues == orig(this.imagEigenvalues)
this.imagEigenvalues[] == orig(this.imagEigenvalues[])
this.eigenvectors == orig(this.eigenvectors)
this.eigenvectors.getClass().getName() == orig(this.eigenvectors.getClass().getName())
this.eigenvectors[] == orig(this.eigenvectors[])
this.eigenvectors[].data == orig(this.eigenvectors[].data)
this.cachedV == orig(this.cachedV)
this.cachedD == orig(this.cachedD)
this.cachedVt == orig(this.cachedVt)
this.main[] one of { [0.5608, 0.632679948253558, 0.3187586564535181, 0.1877613952929248], [1.621947170207346, 1.186306954087243, 0.1957008217109859, 1.960456427028183, 1.0417187762259323, 2.00186985074031] }
this.secondary[] one of { [-0.5181110271437879, -0.44555705706239607, 0.0053983136739406265, 0.1995402249915613, 0.003076064765622194], [0.37746438242568, -0.16975874723521403, 0.08877847691231106] }
this.squaredSecondary[] one of { [0.14247935999999997, 0.028818032262869286, 0.007881617962869746], [0.2684390364479909, 0.19852109109810326, 2.9141790522254344E-5, 0.0398163013896829, 9.462174442302324E-6] }
this.transformer.main[] one of { [0.5608, 0.632679948253558, 0.3187586564535181, 0.1877613952929248], [1.621947170207346, 1.186306954087243, 0.1957008217109859, 1.960456427028183, 1.0417187762259323, 2.00186985074031] }
this.transformer.secondary[] one of { [-0.5181110271437879, -0.44555705706239607, 0.0053983136739406265, 0.1995402249915613, 0.003076064765622194], [0.37746438242568, -0.16975874723521403, 0.08877847691231106] }
this.lowerSpectra one of { -0.2552545490253508, 0.06022143230599297 }
this.upperSpectra one of { 1.1799030779144521, 2.165394965693685 }
this.minPivot == 2.2250738585072014E-308
this.sigma one of { 0.10000000053147409, 1.002000010393658 }
this.sigmaLow one of { 7.380558471045207E-19, 2.5761800551373067E-17 }
this.tau == 9.939647405784749E-28
this.work[] one of { [-9.999999999998899E-4, 1.6209471702073461, -0.3196347399018025, -8.169246529243779E-15, -8.169246529243779E-15, -3.1285710692999853, -0.0011021033770045622, 1.0197006706858827, -0.4369488712434605, 1.0210337700383774E-4, 0.16560628340135955, -2.2885972840580195, -0.0012101911566576612, 1.5168553013947218E-5, 355.8885062389914, 2.10191156657612E-4, 0.1946856531579719, 0.0028098687720445126, -1.8984155563034226, 0.03825863739993185, 5.215560159806338, 1.8974155562832298, 1.9211977896080583, 0.1917339595148944, -1.0211549358822187, 4.728481152405095E-6, 650.5397116910541, 1.0201549353329253, 1.0407140471954865, 0.0015373637443155377, -2.002093019664138, -2.3243503056225023E-4, 0.6466561924473226, 2.000860584633576, 2.00086985074031, 2.004945915505932], [0.9000000005314743, 0.7999903550846043, 1.8084416226919877E-6, 7.233657476602638E-6, 0.30000000053147424, 0.20000241125791965, 1.3660666050119847E-49, 2.7487307480404387E-23, 0.10000000053147409, 9.939647405784749E-28, 0.20000241125791965, 0.20000964472067245, 5.314743469241257E-10, 0.0, 0.002812415815204172, 9.29819620430011E-4, 0.18333561757432, 0.08545681859266396, 0.06022143230599297, 0.09898291838061374, 0.93826438242568, 1.1799030779144521, 0.5772958806010432, 0.27653987220523585], [2.0020000103936577, 0.9999999999999997, 8.533798493190963E-24, 8.533798493197168E-21, 1.0030000103936572, 9.999999999992725E-4, 0.0, 4.041731596144979E-21, 1.002000010393658, 0.0, 9.999999999992725E-4, 9.999984071019884E-4, 0.0020000103936573593, 0.0, 0.002642668607682132, 0.0013269351371628176, 0.0010000103936571184, 1.5777218104420236E-30, 1.870588261705347E-7, 1.8893157510071672E-7, 1.0393657686729643E-8, 0.0, 3.0937773380520616E-7, 2.47038510057482E-7, 1.1038361430635582, 0.22263886988105908, -0.2552545490253508, 1.7555178883626812, 0.8391024864687489, 1.9987937859746876, 2.140058197351134, 2.149975038293427, 0.6466561924473226, 2.165394965693685, 1.2443350659831158, 2.004945915505932] }
this.pingPong == 1
this.eMin one of { 9.999999999992725E-4, 0.20000241125791965 }
this.tType one of { -2, -1 }
this.dMin1 one of { 9.999999999992725E-4, 0.20000060281629697 }
this.dMin2 one of { 0.7999903550846043, 0.9999999999999997 }
this.dN1 one of { 9.999999999992725E-4, 0.20000060281629697 }
this.dN2 one of { 0.7999903550846043, 0.9999999999999997 }
this.realEigenvalues[] one of { [1.0000000000000002, 0.4000000000000002, 0.20000000000000004, 0.1000000000000003], [2.003, 2.0020000000000007, 2.0010000000000003, 1.0009999999999997, 1.0000000000000004, 9.999999999998899E-4] }
this.realEigenvalues[] sorted by >
this.imagEigenvalues[] one of { [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.eigenvectors[] contains no nulls and has only one value, of length 6
this.eigenvectors[].getClass().getName() == [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector]
this.eigenvectors[].data contains no nulls and has only one value, of length 6
this.cachedV == null
this.cachedD == null
this.cachedVt == null
size(this.main[]) one of { 4, 6 }
size(this.secondary[]) one of { 3, 5 }
size(this.squaredSecondary[]) one of { 3, 5 }
size(this.transformer.householderVectors[]) one of { 4, 6 }
size(this.transformer.main[]) one of { 4, 6 }
size(this.transformer.secondary[]) one of { 3, 5 }
size(this.work[]) one of { 24, 36 }
size(this.realEigenvalues[]) one of { 4, 6 }
size(this.imagEigenvalues[]) one of { 4, 6 }
size(this.eigenvectors[]) == 6
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.getRealEigenvalues():::ENTER
this.transformer.main[] one of { [0.025667000148480862, 0.00894189411612005, 0.04346630103026424, 0.002962704252922152, 0.020707166956311016, -0.01340081856217161, -0.07801579422841545, -0.042645984816117595, 0.05065540275520677, -0.06416545349183633, -0.007382218846047846, 0.05595193162234874, -0.07435216957705626, 0.04674393449336581, 0.023410393529006663, -0.05554275730021095, 0.029382568348593395, 0.042013187164173876, -0.07634007932297882, 0.003055894492461933, -0.009912253903326722, 0.06374407259152712, -0.010446799261923727, 0.03445082832920341, -0.0517366576728475, -0.04364165414322929, -0.08572388552417885, 0.008918125654548643, -0.007843826371501356, 0.010767749252506786, -0.03104764525860014, 0.01364502310032667, -0.011068379614674183, 0.10420705756408519, -0.03300323531575968, -0.00820019869265667, -0.06234571620353151, 0.028010224443473092, 0.08904479718272817, 0.02169952261128789, -0.0136564893789538, 0.048683606902550594, 0.022377179506582127, 0.0789676167003636, 0.0012581872187598549, 0.10811201665556965, -0.11692603741892318, 0.022159851786145948, 0.02492219249165102, 0.06998905589777259, 0.09544906969634619, 0.10547273499874317, 0.01740289112934955, -0.018421456572255086, 0.08901742581442783, -0.1370232280437329, 0.041187625347391454, 0.09069442887288374, -0.002425977734704362, 0.00849690056335417, 0.01796919805517919, -0.07197964071720643, 0.14022954625290449, 0.08813684446753978, 0.11125014478517965, 0.029171728611507762, 0.15356403679607478, 0.06552465882725662, -0.006351339236283651, 0.08432967589875814, 0.006783790164940892, 0.03670953299732199, 0.0387564990532302, 0.10065105872328697, 0.06050191014260096, 0.09956101798784436, 0.1008218210248726, -0.034365505548363255, -0.04214520721799345, -0.020036823574861584, 0.1350270951995619, 0.029962746865259765, 0.09755995932013978, 0.12056197536168667, 0.07569684965492038, 0.1670244935133454, 0.030992584281059138, 0.05029007311434766, -0.005023031274805592, -0.1607651044222158, 0.19159771468288736, 0.027067024768270956, 0.14850927294190652, 0.13558757695993573, 0.07705393924445447, 0.13759052973905428, 0.15858145532290716, -0.03162131376642872, -0.1470776754211784, -0.08432564619599223, 0.06026702584464253, -0.00940299745697104, 0.1680276919536391, 0.15848346851877032, 0.027673778653885414, 0.08964048596040634, 0.060974489318653055, 0.10279089170578948, -0.05550096098288093, 0.06369158493748514, 0.0985305188320259, 0.03383386845303338, 0.23873095121852955, 0.11398846758824502, -0.07446117626754815, 0.013966255840891739, 0.07030519002656882, 0.07922098073977993, -0.13700997034119516, 0.06933439604522534, 0.1094046272284341, -0.049730193497309984, 0.01884515950475383, 0.07788088706391916, 0.0415602459967889, -0.05735444865769441, 0.025601609147314974, -0.17284877956006311, 0.10609955588677672, 0.0516547165021784, -0.005593706716319452, 0.0924736821220984, 0.11465695251329908, -0.14803983105572277, 0.09548364710416679, 0.12385037593729671, 0.025374943108270348, 0.0029904788002153293, -0.16207777836417003, 0.00810744730413522, 0.11489761540083562, 0.12204445386080562, -0.22964333584717123, -0.02653112394979279, 0.12525271824580114, -0.027087575406256028, 0.04390720058173834, -0.005519343900688742, 0.03242740625191357, -0.017578163186438185, 0.14605782954151741, -0.09476617558173195, -0.24515073914065522, -0.0870570242223174, -0.14246178522891725, 0.03393182931368216, -0.11607309219854943, -0.1546618498393553, -0.0825121008527114, -0.0013859634418845537, 0.09946199086155759, -0.2638302271609431, -0.06185571305072192, 0.08673262148118505, -0.01337997657102688, -0.24803805788483532, -0.19348957958993582, -0.07033166524129442, -0.14501197834015525, 2.3194259745286383E-4, -0.1494492148066611, 0.06955259202363157, -0.10037161797832109, 0.021872580830273162, -0.12250127612869412, 0.027964459021015256, 0.07199344449684816, -0.1283609221192294, 0.2353006276049169, -0.08363486055652083, 0.05526256185792197, -0.16323932474806424, -0.09045104782474706, 0.03449290127335855, -0.05070967394339004, 0.041668314397779, 0.13481965592211975, 0.1318713159795291, -0.1343272652922827, 0.10346349413008044, 0.050996849887829834, 0.10295293611384988, 0.1870321332387447, 0.21758836977332519, 0.07723851626890162, 0.19525875363346454, 0.17816129416024687, 0.21034508354653753, 0.2129156998013145, 0.21650575593840538], [1.621947170207346, 1.186306954087243, 0.1957008217109859, 1.960456427028183, 1.0417187762259323, 2.00186985074031] }
this.transformer.secondary[] one of { [-0.5821861292828959, -0.5205642155163962, 0.49469213551519775, 0.49435702367473644, -0.5160292549155667, -0.45953419610548235, 0.5142169313550489, 0.5236904943504231, 0.48533161683852605, 0.4915926118483585, -0.4991431730567094, -0.5195997232545079, 0.4875052826577948, 0.4772173763434864, 0.47497040209022595, -0.49641091739356574, 0.48766576630943353, 0.49112644455914106, 0.4912416067652634, 0.48361494836299945, -0.48917210362448804, -0.49910762206650616, -0.5338704684612938, -0.48289267152054893, -0.4875784164666774, -0.4982965449984109, 0.48439571623932337, -0.49002013560321966, 0.5011117263865189, 0.4719755792771607, 0.49606015204467635, -0.5061572545770889, -0.5280532046969488, 0.47207453641596386, -0.5036058845549182, 0.4502077743763792, -0.44840904103865203, -0.5126177850834682, 0.42861275873806015, -0.47563712241028266, -0.486594663708262, 0.5278691925600497, -0.462901685400062, 0.4708782165465887, -0.4780427892845187, 0.46552694052402016, -0.444362962450732, -0.5332313990839491, 0.4204341397966559, -0.4942205666243863, -0.46321687208588264, -0.4173985905647232, -0.5015176036207424, 0.4430912090613194, 0.4779426478983471, 0.5012073076483625, 0.47578363546308533, -0.4990644367822541, 0.4363475440867432, -0.4868584640582363, -0.5153832166613789, -0.45822891945582794, -0.4363771654864238, 0.4758706215658922, 0.43645011782615295, 0.46121363667350684, -0.42245369001905525, -0.457614087697735, 0.5056164369406813, 0.48151351163464096, -0.4666133171123035, -0.4285061997826342, -0.5092034417967655, -0.42125547121186313, 0.4427977716759254, -0.502793569909276, -0.4788943436070263, 0.43748618507048204, 0.45193299324690517, 0.4161858545985095, -0.42387668981298854, 0.44013820447400004, -0.4288383728533724, 0.41822209591423004, 0.4574359255214598, -0.4183093120367467, -0.49452022844858634, 0.4278869888208263, -0.44216531541965143, 0.44753978227746366, -0.4402505530777019, 0.4056637199569593, -0.4704432602044406, -0.4089711217184459, 0.45814634266599447, 0.4057047866987675, 0.4735345436060924, -0.42981095300372407, -0.41214050916238326, 0.39965931681096284, -0.3839852578563885, -0.37414516647727886, -0.44243534278873803, 0.40939791689720684, 0.3046518959318843, -0.46632784982950215, 0.34647703782810013, -0.34171624142913204, 0.3426938680293562, -0.41485845090731027, -0.40030937183156434, 0.39445239527209225, -0.35817978962328634, 0.4179868551915937, 0.37914375543969175, 0.4078742949521401, 0.4002162703474484, -0.36220284050727214, 0.29215334127213605, 0.41090973995616825, -0.3485983126624048, 0.35521500899716985, -0.3100922154702035, -0.4403989599765654, 0.3622313064901599, -0.3462119796379497, 0.289778844657085, -0.34541442350950174, 0.353144142099688, 0.3265040647942536, 0.37822686337239225, 0.306215165390468, -0.3405264751077973, 0.3494849447604278, 0.3256590977854005, -0.39309039171783394, 0.32022328636942143, -0.2562650497565691, -0.36725807084271184, -0.41375653914096755, -0.3780491362549987, -0.30631827695737646, 0.30254025462503326, -0.2278022718116723, -0.39739211179134193, -0.3134423591880749, 0.27109236659472424, 0.345460343718674, 0.3609442344750199, 0.33713697327643233, -0.3249899806803042, 0.32525692122791955, -0.265764548716537, -0.26434511069024114, 0.3084693124930666, -0.2934017414844914, -0.18555622201820596, 0.3265134484003481, 0.2672839845967442, -0.2364934290784019, -0.1564129876547288, -0.308725878743866, -0.2605634316441885, -0.15400902174469175, 0.2431441862517848, 0.2719029946851855, -0.20800406384516393, -0.22951786791361428, 0.25969276455742957, -0.16440413861616668, 0.16440755933223036, 0.20214262580453626, 0.22487619761134553, -0.2969050544757595, 0.13139286549333992, -0.15050327256698964, -0.1263141413536115, 0.15074398255276347, 0.14100979375516148, -0.2517446113235707, 0.16384452154730353, 0.276451372563626, 0.20659911346599533, 0.17402470151605373, 0.12148733786594595, -0.08947280855174025, -0.05714752397823253, 0.15783482946620042, -0.11129344707354087, 0.10872229714422013, -0.05507129195185513, 0.07269540904037111, 0.021803236147856047, -0.031822795012585746, -0.030100663734111178, 0.015411452755133666, 0.04222284675928178, -0.009810441973959987, -4.063865753322997E-4], [-0.5181110271437879, -0.44555705706239607, 0.0053983136739406265, 0.1995402249915613, 0.003076064765622194] }
this.transformer.cachedQ == null
this.transformer.cachedQt == null
this.tau one of { 1.63578197306629E-25, 1.4726991276996085E-18, 6.094039419513807E-17 }
this.tType one of { -2, -1 }
this.eigenvectors == null
this.cachedV == null
this.cachedD == null
this.cachedVt == null
size(this.transformer.householderVectors[]) one of { 6, 200 }
size(this.transformer.main[]) one of { 6, 200 }
size(this.transformer.secondary[]) one of { 5, 199 }
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.getRealEigenvalues():::EXIT
this.splitTolerance == orig(this.splitTolerance)
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.squaredSecondary == orig(this.squaredSecondary)
this.squaredSecondary[] == orig(this.squaredSecondary[])
this.transformer == orig(this.transformer)
this.transformer.householderVectors == orig(this.transformer.householderVectors)
this.transformer.householderVectors.getClass().getName() == orig(this.transformer.householderVectors.getClass().getName())
this.transformer.householderVectors[] == orig(this.transformer.householderVectors[])
this.transformer.main == orig(this.transformer.main)
this.transformer.main[] == orig(this.transformer.main[])
this.transformer.secondary == orig(this.transformer.secondary)
this.transformer.secondary[] == orig(this.transformer.secondary[])
this.transformer.cachedQ == orig(this.transformer.cachedQ)
this.transformer.cachedQt == orig(this.transformer.cachedQt)
this.transformer.cachedT == orig(this.transformer.cachedT)
this.lowerSpectra == orig(this.lowerSpectra)
this.upperSpectra == orig(this.upperSpectra)
this.minPivot == orig(this.minPivot)
this.sigma == orig(this.sigma)
this.sigmaLow == orig(this.sigmaLow)
this.tau == orig(this.tau)
this.work == orig(this.work)
this.work[] == orig(this.work[])
this.pingPong == orig(this.pingPong)
this.qMax == orig(this.qMax)
this.eMin == orig(this.eMin)
this.tType == orig(this.tType)
this.dMin == orig(this.dMin)
this.dMin1 == orig(this.dMin1)
this.dMin2 == orig(this.dMin2)
this.dN == orig(this.dN)
this.dN1 == orig(this.dN1)
this.dN2 == orig(this.dN2)
this.g == orig(this.g)
this.realEigenvalues == orig(this.realEigenvalues)
this.realEigenvalues[] == orig(this.realEigenvalues[])
this.imagEigenvalues == orig(this.imagEigenvalues)
this.imagEigenvalues[] == orig(this.imagEigenvalues[])
this.eigenvectors == orig(this.eigenvectors)
this.cachedV == orig(this.cachedV)
this.cachedD == orig(this.cachedD)
this.cachedVt == orig(this.cachedVt)
this.transformer.main[] one of { [0.025667000148480862, 0.00894189411612005, 0.04346630103026424, 0.002962704252922152, 0.020707166956311016, -0.01340081856217161, -0.07801579422841545, -0.042645984816117595, 0.05065540275520677, -0.06416545349183633, -0.007382218846047846, 0.05595193162234874, -0.07435216957705626, 0.04674393449336581, 0.023410393529006663, -0.05554275730021095, 0.029382568348593395, 0.042013187164173876, -0.07634007932297882, 0.003055894492461933, -0.009912253903326722, 0.06374407259152712, -0.010446799261923727, 0.03445082832920341, -0.0517366576728475, -0.04364165414322929, -0.08572388552417885, 0.008918125654548643, -0.007843826371501356, 0.010767749252506786, -0.03104764525860014, 0.01364502310032667, -0.011068379614674183, 0.10420705756408519, -0.03300323531575968, -0.00820019869265667, -0.06234571620353151, 0.028010224443473092, 0.08904479718272817, 0.02169952261128789, -0.0136564893789538, 0.048683606902550594, 0.022377179506582127, 0.0789676167003636, 0.0012581872187598549, 0.10811201665556965, -0.11692603741892318, 0.022159851786145948, 0.02492219249165102, 0.06998905589777259, 0.09544906969634619, 0.10547273499874317, 0.01740289112934955, -0.018421456572255086, 0.08901742581442783, -0.1370232280437329, 0.041187625347391454, 0.09069442887288374, -0.002425977734704362, 0.00849690056335417, 0.01796919805517919, -0.07197964071720643, 0.14022954625290449, 0.08813684446753978, 0.11125014478517965, 0.029171728611507762, 0.15356403679607478, 0.06552465882725662, -0.006351339236283651, 0.08432967589875814, 0.006783790164940892, 0.03670953299732199, 0.0387564990532302, 0.10065105872328697, 0.06050191014260096, 0.09956101798784436, 0.1008218210248726, -0.034365505548363255, -0.04214520721799345, -0.020036823574861584, 0.1350270951995619, 0.029962746865259765, 0.09755995932013978, 0.12056197536168667, 0.07569684965492038, 0.1670244935133454, 0.030992584281059138, 0.05029007311434766, -0.005023031274805592, -0.1607651044222158, 0.19159771468288736, 0.027067024768270956, 0.14850927294190652, 0.13558757695993573, 0.07705393924445447, 0.13759052973905428, 0.15858145532290716, -0.03162131376642872, -0.1470776754211784, -0.08432564619599223, 0.06026702584464253, -0.00940299745697104, 0.1680276919536391, 0.15848346851877032, 0.027673778653885414, 0.08964048596040634, 0.060974489318653055, 0.10279089170578948, -0.05550096098288093, 0.06369158493748514, 0.0985305188320259, 0.03383386845303338, 0.23873095121852955, 0.11398846758824502, -0.07446117626754815, 0.013966255840891739, 0.07030519002656882, 0.07922098073977993, -0.13700997034119516, 0.06933439604522534, 0.1094046272284341, -0.049730193497309984, 0.01884515950475383, 0.07788088706391916, 0.0415602459967889, -0.05735444865769441, 0.025601609147314974, -0.17284877956006311, 0.10609955588677672, 0.0516547165021784, -0.005593706716319452, 0.0924736821220984, 0.11465695251329908, -0.14803983105572277, 0.09548364710416679, 0.12385037593729671, 0.025374943108270348, 0.0029904788002153293, -0.16207777836417003, 0.00810744730413522, 0.11489761540083562, 0.12204445386080562, -0.22964333584717123, -0.02653112394979279, 0.12525271824580114, -0.027087575406256028, 0.04390720058173834, -0.005519343900688742, 0.03242740625191357, -0.017578163186438185, 0.14605782954151741, -0.09476617558173195, -0.24515073914065522, -0.0870570242223174, -0.14246178522891725, 0.03393182931368216, -0.11607309219854943, -0.1546618498393553, -0.0825121008527114, -0.0013859634418845537, 0.09946199086155759, -0.2638302271609431, -0.06185571305072192, 0.08673262148118505, -0.01337997657102688, -0.24803805788483532, -0.19348957958993582, -0.07033166524129442, -0.14501197834015525, 2.3194259745286383E-4, -0.1494492148066611, 0.06955259202363157, -0.10037161797832109, 0.021872580830273162, -0.12250127612869412, 0.027964459021015256, 0.07199344449684816, -0.1283609221192294, 0.2353006276049169, -0.08363486055652083, 0.05526256185792197, -0.16323932474806424, -0.09045104782474706, 0.03449290127335855, -0.05070967394339004, 0.041668314397779, 0.13481965592211975, 0.1318713159795291, -0.1343272652922827, 0.10346349413008044, 0.050996849887829834, 0.10295293611384988, 0.1870321332387447, 0.21758836977332519, 0.07723851626890162, 0.19525875363346454, 0.17816129416024687, 0.21034508354653753, 0.2129156998013145, 0.21650575593840538], [1.621947170207346, 1.186306954087243, 0.1957008217109859, 1.960456427028183, 1.0417187762259323, 2.00186985074031] }
this.transformer.secondary[] one of { [-0.5821861292828959, -0.5205642155163962, 0.49469213551519775, 0.49435702367473644, -0.5160292549155667, -0.45953419610548235, 0.5142169313550489, 0.5236904943504231, 0.48533161683852605, 0.4915926118483585, -0.4991431730567094, -0.5195997232545079, 0.4875052826577948, 0.4772173763434864, 0.47497040209022595, -0.49641091739356574, 0.48766576630943353, 0.49112644455914106, 0.4912416067652634, 0.48361494836299945, -0.48917210362448804, -0.49910762206650616, -0.5338704684612938, -0.48289267152054893, -0.4875784164666774, -0.4982965449984109, 0.48439571623932337, -0.49002013560321966, 0.5011117263865189, 0.4719755792771607, 0.49606015204467635, -0.5061572545770889, -0.5280532046969488, 0.47207453641596386, -0.5036058845549182, 0.4502077743763792, -0.44840904103865203, -0.5126177850834682, 0.42861275873806015, -0.47563712241028266, -0.486594663708262, 0.5278691925600497, -0.462901685400062, 0.4708782165465887, -0.4780427892845187, 0.46552694052402016, -0.444362962450732, -0.5332313990839491, 0.4204341397966559, -0.4942205666243863, -0.46321687208588264, -0.4173985905647232, -0.5015176036207424, 0.4430912090613194, 0.4779426478983471, 0.5012073076483625, 0.47578363546308533, -0.4990644367822541, 0.4363475440867432, -0.4868584640582363, -0.5153832166613789, -0.45822891945582794, -0.4363771654864238, 0.4758706215658922, 0.43645011782615295, 0.46121363667350684, -0.42245369001905525, -0.457614087697735, 0.5056164369406813, 0.48151351163464096, -0.4666133171123035, -0.4285061997826342, -0.5092034417967655, -0.42125547121186313, 0.4427977716759254, -0.502793569909276, -0.4788943436070263, 0.43748618507048204, 0.45193299324690517, 0.4161858545985095, -0.42387668981298854, 0.44013820447400004, -0.4288383728533724, 0.41822209591423004, 0.4574359255214598, -0.4183093120367467, -0.49452022844858634, 0.4278869888208263, -0.44216531541965143, 0.44753978227746366, -0.4402505530777019, 0.4056637199569593, -0.4704432602044406, -0.4089711217184459, 0.45814634266599447, 0.4057047866987675, 0.4735345436060924, -0.42981095300372407, -0.41214050916238326, 0.39965931681096284, -0.3839852578563885, -0.37414516647727886, -0.44243534278873803, 0.40939791689720684, 0.3046518959318843, -0.46632784982950215, 0.34647703782810013, -0.34171624142913204, 0.3426938680293562, -0.41485845090731027, -0.40030937183156434, 0.39445239527209225, -0.35817978962328634, 0.4179868551915937, 0.37914375543969175, 0.4078742949521401, 0.4002162703474484, -0.36220284050727214, 0.29215334127213605, 0.41090973995616825, -0.3485983126624048, 0.35521500899716985, -0.3100922154702035, -0.4403989599765654, 0.3622313064901599, -0.3462119796379497, 0.289778844657085, -0.34541442350950174, 0.353144142099688, 0.3265040647942536, 0.37822686337239225, 0.306215165390468, -0.3405264751077973, 0.3494849447604278, 0.3256590977854005, -0.39309039171783394, 0.32022328636942143, -0.2562650497565691, -0.36725807084271184, -0.41375653914096755, -0.3780491362549987, -0.30631827695737646, 0.30254025462503326, -0.2278022718116723, -0.39739211179134193, -0.3134423591880749, 0.27109236659472424, 0.345460343718674, 0.3609442344750199, 0.33713697327643233, -0.3249899806803042, 0.32525692122791955, -0.265764548716537, -0.26434511069024114, 0.3084693124930666, -0.2934017414844914, -0.18555622201820596, 0.3265134484003481, 0.2672839845967442, -0.2364934290784019, -0.1564129876547288, -0.308725878743866, -0.2605634316441885, -0.15400902174469175, 0.2431441862517848, 0.2719029946851855, -0.20800406384516393, -0.22951786791361428, 0.25969276455742957, -0.16440413861616668, 0.16440755933223036, 0.20214262580453626, 0.22487619761134553, -0.2969050544757595, 0.13139286549333992, -0.15050327256698964, -0.1263141413536115, 0.15074398255276347, 0.14100979375516148, -0.2517446113235707, 0.16384452154730353, 0.276451372563626, 0.20659911346599533, 0.17402470151605373, 0.12148733786594595, -0.08947280855174025, -0.05714752397823253, 0.15783482946620042, -0.11129344707354087, 0.10872229714422013, -0.05507129195185513, 0.07269540904037111, 0.021803236147856047, -0.031822795012585746, -0.030100663734111178, 0.015411452755133666, 0.04222284675928178, -0.009810441973959987, -4.063865753322997E-4], [-0.5181110271437879, -0.44555705706239607, 0.0053983136739406265, 0.1995402249915613, 0.003076064765622194] }
this.transformer.cachedQ == null
this.transformer.cachedQt == null
this.tau one of { 1.63578197306629E-25, 1.4726991276996085E-18, 6.094039419513807E-17 }
this.tType one of { -2, -1 }
this.eigenvectors == null
this.cachedV == null
this.cachedD == null
this.cachedVt == null
return[] sorted by >=
size(this.transformer.householderVectors[]) one of { 6, 200 }
size(this.transformer.main[]) one of { 6, 200 }
size(this.transformer.secondary[]) one of { 5, 199 }
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.getSolver():::ENTER
this.transformer.cachedQ == null
this.transformer.cachedQt == null
this.sigma one of { 1.002000010393658, 2.0000000010676713, 32.61784401148372 }
this.tau one of { 3.944304526105059E-30, 1.798602863903907E-28, 8.077935669463161E-28 }
this.tType one of { -2, -1 }
this.imagEigenvalues[] one of { [0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.eigenvectors == null
this.cachedV == null
this.cachedD == null
this.cachedVt == null
size(this.main[]) one of { 5, 6 }
size(this.secondary[]) one of { 4, 5 }
size(this.squaredSecondary[]) one of { 4, 5 }
size(this.transformer.householderVectors[]) one of { 5, 6 }
size(this.transformer.main[]) one of { 5, 6 }
size(this.transformer.secondary[]) one of { 4, 5 }
size(this.work[]) one of { 30, 36 }
size(this.realEigenvalues[]) one of { 5, 6 }
size(this.imagEigenvalues[]) one of { 5, 6 }
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.getSolver():::EXIT
this.splitTolerance == orig(this.splitTolerance)
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.squaredSecondary == orig(this.squaredSecondary)
this.squaredSecondary[] == orig(this.squaredSecondary[])
this.transformer == orig(this.transformer)
this.transformer.householderVectors == orig(this.transformer.householderVectors)
this.transformer.householderVectors.getClass().getName() == orig(this.transformer.householderVectors.getClass().getName())
this.transformer.householderVectors[] == orig(this.transformer.householderVectors[])
this.transformer.main == orig(this.transformer.main)
this.transformer.main[] == orig(this.transformer.main[])
this.transformer.secondary == orig(this.transformer.secondary)
this.transformer.secondary[] == orig(this.transformer.secondary[])
this.transformer.cachedT == orig(this.transformer.cachedT)
this.lowerSpectra == orig(this.lowerSpectra)
this.upperSpectra == orig(this.upperSpectra)
this.minPivot == orig(this.minPivot)
this.sigma == orig(this.sigma)
this.sigmaLow == orig(this.sigmaLow)
this.tau == orig(this.tau)
this.work == orig(this.work)
this.pingPong == orig(this.pingPong)
this.qMax == orig(this.qMax)
this.eMin == orig(this.eMin)
this.tType == orig(this.tType)
this.dMin == orig(this.dMin)
this.dMin1 == orig(this.dMin1)
this.dMin2 == orig(this.dMin2)
this.dN == orig(this.dN)
this.dN1 == orig(this.dN1)
this.dN2 == orig(this.dN2)
this.g == orig(this.g)
this.realEigenvalues == orig(this.realEigenvalues)
this.realEigenvalues[] == orig(this.realEigenvalues[])
this.imagEigenvalues == orig(this.imagEigenvalues)
this.imagEigenvalues[] == orig(this.imagEigenvalues[])
this.cachedV == orig(this.cachedV)
this.cachedD == orig(this.cachedD)
this.cachedVt == orig(this.cachedVt)
size(this.work[]) == orig(size(this.work[]))
this.sigma one of { 1.002000010393658, 2.0000000010676713, 32.61784401148372 }
this.tau one of { 3.944304526105059E-30, 1.798602863903907E-28, 8.077935669463161E-28 }
this.tType one of { -2, -1 }
this.imagEigenvalues[] one of { [0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.eigenvectors[].getClass().getName() one of { [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector], [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector] }
this.cachedV == null
this.cachedD == null
this.cachedVt == null
return.getClass().getName() == org.apache.commons.math.linear.EigenDecompositionImpl$Solver.class
size(this.main[]) one of { 5, 6 }
size(this.secondary[]) one of { 4, 5 }
size(this.squaredSecondary[]) one of { 4, 5 }
size(this.transformer.householderVectors[]) one of { 5, 6 }
size(this.transformer.main[]) one of { 5, 6 }
size(this.transformer.secondary[]) one of { 4, 5 }
size(this.work[]) one of { 30, 36 }
size(this.realEigenvalues[]) one of { 5, 6 }
size(this.imagEigenvalues[]) one of { 5, 6 }
size(this.eigenvectors[]) one of { 5, 6 }
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.getV():::ENTER
this.main[] one of { [1.621947170207346, 1.186306954087243, 0.1957008217109859, 1.960456427028183, 1.0417187762259323, 2.00186985074031], [85.0, 185.74626865671647, 55.64669322011643, 13.607038123167158] }
this.main[] elements >= 0.1957008217109859
this.secondary[] one of { [-101.24722218411725, -45.37683086462475, 11.736783389292189], [-0.5181110271437879, -0.44555705706239607, 0.0053983136739406265, 0.1995402249915613, 0.003076064765622194] }
this.squaredSecondary[] one of { [0.2684390364479909, 0.19852109109810326, 2.9141790522254344E-5, 0.0398163013896829, 9.462174442302324E-6], [10251.000000000004, 2059.0567793167615, 137.75208432716502] }
this.squaredSecondary[] elements >= 9.462174442302324E-6
this.transformer.main[] == [1.621947170207346, 1.186306954087243, 0.1957008217109859, 1.960456427028183, 1.0417187762259323, 2.00186985074031]
this.transformer.secondary[] == [-0.5181110271437879, -0.44555705706239607, 0.0053983136739406265, 0.1995402249915613, 0.003076064765622194]
this.lowerSpectra one of { -16.24722218411725, -0.2552545490253508 }
this.upperSpectra one of { 2.165394965693685, 332.3703217054584 }
this.minPivot one of { 2.2250738585072014E-308, 2.280923212355733E-304 }
this.sigma one of { 1.002000010393658, 12.000000020145311 }
this.sigmaLow one of { -4.567189210798808E-16, 2.5761800551373067E-17 }
this.tau == 0.0
this.work[] one of { [-9.999999999998899E-4, 1.6209471702073461, -0.3196347399018025, -8.169246529243779E-15, -8.169246529243779E-15, -3.1285710692999853, -0.0011021033770045622, 1.0197006706858827, -0.4369488712434605, 1.0210337700383774E-4, 0.16560628340135955, -2.2885972840580195, -0.0012101911566576612, 1.5168553013947218E-5, 355.8885062389914, 2.10191156657612E-4, 0.1946856531579719, 0.0028098687720445126, -1.8984155563034226, 0.03825863739993185, 5.215560159806338, 1.8974155562832298, 1.9211977896080583, 0.1917339595148944, -1.0211549358822187, 4.728481152405095E-6, 650.5397116910541, 1.0201549353329253, 1.0407140471954865, 0.0015373637443155377, -2.002093019664138, -2.3243503056225023E-4, 0.6466561924473226, 2.000860584633576, 2.00086985074031, 2.004945915505932], [2.0020000103936577, 0.9999999999999997, 8.533798493190963E-24, 8.533798493197168E-21, 1.0030000103936572, 9.999999999992725E-4, 0.0, 4.041731596144979E-21, 1.002000010393658, 0.0, 9.999999999992725E-4, 9.999984071019884E-4, 0.0020000103936573593, 0.0, 0.002642668607682132, 0.0013269351371628176, 0.0010000103936571184, 1.5777218104420236E-30, 1.870588261705347E-7, 1.8893157510071672E-7, 1.0393657686729643E-8, 0.0, 3.0937773380520616E-7, 2.47038510057482E-7, 1.1038361430635582, 0.22263886988105908, -0.2552545490253508, 1.7555178883626812, 0.8391024864687489, 1.9987937859746876, 2.140058197351134, 2.149975038293427, 0.6466561924473226, 2.165394965693685, 1.2443350659831158, 2.004945915505932], [252.00000002014534, 240.00000000000003, 0.0013325136263541235, 2.66504944783851E-4, 60.000000020145336, 48.00000000000002, 2.68176686067081E-12, 3.404743807980988E-30, 12.000000020145311, 0.0, 48.00070578987743, 48.00033313129392, 2.0145304879227796E-8, 0.0, 0.46941970783962433, 0.11188224223204993, -16.24722218411725, 39.12221560797448, -1.466921033800503, 1.8702547338749689, 186.24722218411725, 332.3703217054584, 112.76030747403337, 25.343821512459346] }
this.eMin one of { 9.999999999992725E-4, 48.00033313129392 }
this.tType one of { -2, -1 }
this.dMin1 one of { 9.999999999992725E-4, 48.00006662634914 }
this.dMin2 one of { 0.9999999999999997, 239.9983343550771 }
this.dN1 one of { 9.999999999992725E-4, 48.00006662634914 }
this.dN2 one of { 0.9999999999999997, 239.9983343550771 }
this.realEigenvalues[] one of { [2.003, 2.0020000000000007, 2.0010000000000003, 1.0009999999999997, 1.0000000000000004, 9.999999999998899E-4], [256.00000000000006, 64.00000000000003, 16.000000000000004, 3.999999999999998] }
this.realEigenvalues[] elements >= 9.999999999998899E-4
this.imagEigenvalues[] one of { [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.eigenvectors[] contains no nulls and has only one value, of length 6
this.eigenvectors[].getClass().getName() == [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector]
this.eigenvectors[].data contains no nulls and has only one value, of length 6
this.cachedD == null
this.cachedVt == null
size(this.main[]) one of { 4, 6 }
size(this.secondary[]) one of { 3, 5 }
size(this.squaredSecondary[]) one of { 3, 5 }
size(this.transformer.householderVectors[]) == 6
size(this.transformer.main[]) == 6
size(this.transformer.secondary[]) == 5
size(this.work[]) one of { 24, 36 }
size(this.realEigenvalues[]) one of { 4, 6 }
size(this.imagEigenvalues[]) one of { 4, 6 }
size(this.eigenvectors[]) == 6
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.getV():::EXIT
this.splitTolerance == orig(this.splitTolerance)
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.squaredSecondary == orig(this.squaredSecondary)
this.squaredSecondary[] == orig(this.squaredSecondary[])
this.transformer == orig(this.transformer)
this.transformer.householderVectors == orig(this.transformer.householderVectors)
this.transformer.householderVectors.getClass().getName() == orig(this.transformer.householderVectors.getClass().getName())
this.transformer.householderVectors[] == orig(this.transformer.householderVectors[])
this.transformer.main == orig(this.transformer.main)
this.transformer.main[] == orig(this.transformer.main[])
this.transformer.secondary == orig(this.transformer.secondary)
this.transformer.secondary[] == orig(this.transformer.secondary[])
this.transformer.cachedQ.getClass().getName() == orig(this.transformer.cachedQ.getClass().getName())
this.transformer.cachedQt.getClass().getName() == orig(this.transformer.cachedQt.getClass().getName())
this.transformer.cachedT == orig(this.transformer.cachedT)
this.lowerSpectra == orig(this.lowerSpectra)
this.upperSpectra == orig(this.upperSpectra)
this.minPivot == orig(this.minPivot)
this.sigma == orig(this.sigma)
this.sigmaLow == orig(this.sigmaLow)
this.tau == orig(this.tau)
this.work == orig(this.work)
this.pingPong == orig(this.pingPong)
this.qMax == orig(this.qMax)
this.eMin == orig(this.eMin)
this.tType == orig(this.tType)
this.dMin == orig(this.dMin)
this.dMin1 == orig(this.dMin1)
this.dMin2 == orig(this.dMin2)
this.dN == orig(this.dN)
this.dN1 == orig(this.dN1)
this.dN2 == orig(this.dN2)
this.g == orig(this.g)
this.realEigenvalues == orig(this.realEigenvalues)
this.realEigenvalues[] == orig(this.realEigenvalues[])
this.imagEigenvalues == orig(this.imagEigenvalues)
this.imagEigenvalues[] == orig(this.imagEigenvalues[])
this.eigenvectors.getClass().getName() == orig(this.eigenvectors.getClass().getName())
this.eigenvectors[].getClass().getName() == orig(this.eigenvectors[].getClass().getName())
this.cachedV.getClass().getName() == orig(this.cachedV.getClass().getName())
this.cachedD == orig(this.cachedD)
this.cachedVt == orig(this.cachedVt)
size(this.work[]) == orig(size(this.work[]))
this.main[] one of { [1.621947170207346, 1.186306954087243, 0.1957008217109859, 1.960456427028183, 1.0417187762259323, 2.00186985074031], [85.0, 185.74626865671647, 55.64669322011643, 13.607038123167158] }
this.main[] elements >= 0.1957008217109859
this.secondary[] one of { [-101.24722218411725, -45.37683086462475, 11.736783389292189], [-0.5181110271437879, -0.44555705706239607, 0.0053983136739406265, 0.1995402249915613, 0.003076064765622194] }
this.squaredSecondary[] one of { [0.2684390364479909, 0.19852109109810326, 2.9141790522254344E-5, 0.0398163013896829, 9.462174442302324E-6], [10251.000000000004, 2059.0567793167615, 137.75208432716502] }
this.squaredSecondary[] elements >= 9.462174442302324E-6
this.transformer.main[] == [1.621947170207346, 1.186306954087243, 0.1957008217109859, 1.960456427028183, 1.0417187762259323, 2.00186985074031]
this.transformer.secondary[] == [-0.5181110271437879, -0.44555705706239607, 0.0053983136739406265, 0.1995402249915613, 0.003076064765622194]
this.lowerSpectra one of { -16.24722218411725, -0.2552545490253508 }
this.upperSpectra one of { 2.165394965693685, 332.3703217054584 }
this.minPivot one of { 2.2250738585072014E-308, 2.280923212355733E-304 }
this.sigma one of { 1.002000010393658, 12.000000020145311 }
this.sigmaLow one of { -4.567189210798808E-16, 2.5761800551373067E-17 }
this.tau == 0.0
this.work[] one of { [-3.999999999999998, 81.0, -1.249965705976756, 2.220446049250313E-15, 2.220446049250313E-15, -0.8000219487770456, -9.95555555555555, 55.19071310116088, -0.8221823621204541, 5.9555555555555575, 126.55555555555559, -1.216275179415117, -9.70135746606334, 14.338663234298922, 0.8185409753691066, 5.701357466063346, 37.30802998581751, 1.2216859388732095, -7.876923076923072, 1.7763568394002505E-15, 186.24722218411725, 3.876923076923076, 9.60703812316716, 25.343821512459346], [-9.999999999998899E-4, 1.6209471702073461, -0.3196347399018025, -8.169246529243779E-15, -8.169246529243779E-15, -3.1285710692999853, -0.0011021033770045622, 1.0197006706858827, -0.4369488712434605, 1.0210337700383774E-4, 0.16560628340135955, -2.2885972840580195, -0.0012101911566576612, 1.5168553013947218E-5, 355.8885062389914, 2.10191156657612E-4, 0.1946856531579719, 0.0028098687720445126, -1.8984155563034226, 0.03825863739993185, 5.215560159806338, 1.8974155562832298, 1.9211977896080583, 0.1917339595148944, -1.0211549358822187, 4.728481152405095E-6, 650.5397116910541, 1.0201549353329253, 1.0407140471954865, 0.0015373637443155377, -2.002093019664138, -2.3243503056225023E-4, 0.6466561924473226, 2.000860584633576, 2.00086985074031, 2.004945915505932] }
this.eMin one of { 9.999999999992725E-4, 48.00033313129392 }
this.tType one of { -2, -1 }
this.dMin1 one of { 9.999999999992725E-4, 48.00006662634914 }
this.dMin2 one of { 0.9999999999999997, 239.9983343550771 }
this.dN1 one of { 9.999999999992725E-4, 48.00006662634914 }
this.dN2 one of { 0.9999999999999997, 239.9983343550771 }
this.realEigenvalues[] one of { [2.003, 2.0020000000000007, 2.0010000000000003, 1.0009999999999997, 1.0000000000000004, 9.999999999998899E-4], [256.00000000000006, 64.00000000000003, 16.000000000000004, 3.999999999999998] }
this.realEigenvalues[] elements >= 9.999999999998899E-4
this.imagEigenvalues[] one of { [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.eigenvectors[].getClass().getName() one of { [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector], [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector] }
this.cachedD == null
this.cachedVt == null
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
size(this.main[]) one of { 4, 6 }
size(this.secondary[]) one of { 3, 5 }
size(this.squaredSecondary[]) one of { 3, 5 }
size(this.transformer.householderVectors[]) == 6
size(this.transformer.main[]) == 6
size(this.transformer.secondary[]) == 5
size(this.work[]) one of { 24, 36 }
size(this.realEigenvalues[]) one of { 4, 6 }
size(this.imagEigenvalues[]) one of { 4, 6 }
size(this.eigenvectors[]) one of { 4, 6 }
this.eigenvectors[] == orig(this.eigenvectors[]) (elementwise)
this.eigenvectors[].getClass().getName() == orig(this.eigenvectors[].getClass().getName()) (elementwise)
this.eigenvectors[].data == orig(this.eigenvectors[].data) (elementwise)
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.getVT():::ENTER
this.main[] == [1.621947170207346, 1.186306954087243, 0.1957008217109859, 1.960456427028183, 1.0417187762259323, 2.00186985074031]
this.secondary[] == [-0.5181110271437879, -0.44555705706239607, 0.0053983136739406265, 0.1995402249915613, 0.003076064765622194]
this.squaredSecondary[] == [0.2684390364479909, 0.19852109109810326, 2.9141790522254344E-5, 0.0398163013896829, 9.462174442302324E-6]
this.transformer.main[] == [1.621947170207346, 1.186306954087243, 0.1957008217109859, 1.960456427028183, 1.0417187762259323, 2.00186985074031]
this.transformer.secondary[] == [-0.5181110271437879, -0.44555705706239607, 0.0053983136739406265, 0.1995402249915613, 0.003076064765622194]
this.lowerSpectra == -0.2552545490253508
this.upperSpectra == 2.165394965693685
this.minPivot == 2.2250738585072014E-308
this.sigma == 1.002000010393658
this.sigmaLow == 2.5761800551373067E-17
this.tau == 0.0
this.work[] == [-9.999999999998899E-4, 1.6209471702073461, -0.3196347399018025, -8.169246529243779E-15, -8.169246529243779E-15, -3.1285710692999853, -0.0011021033770045622, 1.0197006706858827, -0.4369488712434605, 1.0210337700383774E-4, 0.16560628340135955, -2.2885972840580195, -0.0012101911566576612, 1.5168553013947218E-5, 355.8885062389914, 2.10191156657612E-4, 0.1946856531579719, 0.0028098687720445126, -1.8984155563034226, 0.03825863739993185, 5.215560159806338, 1.8974155562832298, 1.9211977896080583, 0.1917339595148944, -1.0211549358822187, 4.728481152405095E-6, 650.5397116910541, 1.0201549353329253, 1.0407140471954865, 0.0015373637443155377, -2.002093019664138, -2.3243503056225023E-4, 0.6466561924473226, 2.000860584633576, 2.00086985074031, 2.004945915505932]
this.pingPong == 1
this.eMin == 9.999999999992725E-4
this.tType == -1
this.dMin1 == 9.999999999992725E-4
this.dMin2 == 0.9999999999999997
this.dN1 == 9.999999999992725E-4
this.dN2 == 0.9999999999999997
this.realEigenvalues[] == [2.003, 2.0020000000000007, 2.0010000000000003, 1.0009999999999997, 1.0000000000000004, 9.999999999998899E-4]
this.imagEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.eigenvectors[].getClass().getName() == [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector]
size(this.main[]) == 6
size(this.secondary[]) == 5
size(this.squaredSecondary[]) == 5
size(this.transformer.householderVectors[]) == 6
size(this.transformer.main[]) == 6
size(this.transformer.secondary[]) == 5
size(this.work[]) == 36
size(this.realEigenvalues[]) == 6
size(this.imagEigenvalues[]) == 6
size(this.eigenvectors[]) == 6
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.getVT():::EXIT
this.splitTolerance == orig(this.splitTolerance)
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.squaredSecondary == orig(this.squaredSecondary)
this.squaredSecondary[] == orig(this.squaredSecondary[])
this.transformer == orig(this.transformer)
this.transformer.householderVectors == orig(this.transformer.householderVectors)
this.transformer.householderVectors.getClass().getName() == orig(this.transformer.householderVectors.getClass().getName())
this.transformer.householderVectors[] == orig(this.transformer.householderVectors[])
this.transformer.main == orig(this.transformer.main)
this.transformer.main[] == orig(this.transformer.main[])
this.transformer.secondary == orig(this.transformer.secondary)
this.transformer.secondary[] == orig(this.transformer.secondary[])
this.transformer.cachedQ == orig(this.transformer.cachedQ)
this.transformer.cachedQ.getClass().getName() == orig(this.transformer.cachedQ.getClass().getName())
this.transformer.cachedQt == orig(this.transformer.cachedQt)
this.transformer.cachedQt.getClass().getName() == orig(this.transformer.cachedQt.getClass().getName())
this.transformer.cachedT == orig(this.transformer.cachedT)
this.lowerSpectra == orig(this.lowerSpectra)
this.upperSpectra == orig(this.upperSpectra)
this.minPivot == orig(this.minPivot)
this.sigma == orig(this.sigma)
this.sigmaLow == orig(this.sigmaLow)
this.tau == orig(this.tau)
this.work == orig(this.work)
this.work[] == orig(this.work[])
this.pingPong == orig(this.pingPong)
this.qMax == orig(this.qMax)
this.eMin == orig(this.eMin)
this.tType == orig(this.tType)
this.dMin == orig(this.dMin)
this.dMin1 == orig(this.dMin1)
this.dMin2 == orig(this.dMin2)
this.dN == orig(this.dN)
this.dN1 == orig(this.dN1)
this.dN2 == orig(this.dN2)
this.g == orig(this.g)
this.realEigenvalues == orig(this.realEigenvalues)
this.realEigenvalues[] == orig(this.realEigenvalues[])
this.imagEigenvalues == orig(this.imagEigenvalues)
this.imagEigenvalues[] == orig(this.imagEigenvalues[])
this.eigenvectors == orig(this.eigenvectors)
this.eigenvectors.getClass().getName() == orig(this.eigenvectors.getClass().getName())
this.eigenvectors[] == orig(this.eigenvectors[])
this.eigenvectors[].data == orig(this.eigenvectors[].data)
this.cachedV == orig(this.cachedV)
this.cachedV.getClass().getName() == orig(this.cachedV.getClass().getName())
this.cachedD == orig(this.cachedD)
this.cachedD.getClass().getName() == orig(this.cachedD.getClass().getName())
this.cachedVt.getClass().getName() == orig(this.cachedVt.getClass().getName())
this.main[] == [1.621947170207346, 1.186306954087243, 0.1957008217109859, 1.960456427028183, 1.0417187762259323, 2.00186985074031]
this.secondary[] == [-0.5181110271437879, -0.44555705706239607, 0.0053983136739406265, 0.1995402249915613, 0.003076064765622194]
this.squaredSecondary[] == [0.2684390364479909, 0.19852109109810326, 2.9141790522254344E-5, 0.0398163013896829, 9.462174442302324E-6]
this.transformer.main[] == [1.621947170207346, 1.186306954087243, 0.1957008217109859, 1.960456427028183, 1.0417187762259323, 2.00186985074031]
this.transformer.secondary[] == [-0.5181110271437879, -0.44555705706239607, 0.0053983136739406265, 0.1995402249915613, 0.003076064765622194]
this.lowerSpectra == -0.2552545490253508
this.upperSpectra == 2.165394965693685
this.minPivot == 2.2250738585072014E-308
this.sigma == 1.002000010393658
this.sigmaLow == 2.5761800551373067E-17
this.tau == 0.0
this.work[] == [-9.999999999998899E-4, 1.6209471702073461, -0.3196347399018025, -8.169246529243779E-15, -8.169246529243779E-15, -3.1285710692999853, -0.0011021033770045622, 1.0197006706858827, -0.4369488712434605, 1.0210337700383774E-4, 0.16560628340135955, -2.2885972840580195, -0.0012101911566576612, 1.5168553013947218E-5, 355.8885062389914, 2.10191156657612E-4, 0.1946856531579719, 0.0028098687720445126, -1.8984155563034226, 0.03825863739993185, 5.215560159806338, 1.8974155562832298, 1.9211977896080583, 0.1917339595148944, -1.0211549358822187, 4.728481152405095E-6, 650.5397116910541, 1.0201549353329253, 1.0407140471954865, 0.0015373637443155377, -2.002093019664138, -2.3243503056225023E-4, 0.6466561924473226, 2.000860584633576, 2.00086985074031, 2.004945915505932]
this.pingPong == 1
this.eMin == 9.999999999992725E-4
this.tType == -1
this.dMin1 == 9.999999999992725E-4
this.dMin2 == 0.9999999999999997
this.dN1 == 9.999999999992725E-4
this.dN2 == 0.9999999999999997
this.realEigenvalues[] == [2.003, 2.0020000000000007, 2.0010000000000003, 1.0009999999999997, 1.0000000000000004, 9.999999999998899E-4]
this.imagEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.eigenvectors[].getClass().getName() == [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector]
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
size(this.main[]) == 6
size(this.secondary[]) == 5
size(this.squaredSecondary[]) == 5
size(this.transformer.householderVectors[]) == 6
size(this.transformer.main[]) == 6
size(this.transformer.secondary[]) == 5
size(this.work[]) == 36
size(this.realEigenvalues[]) == 6
size(this.imagEigenvalues[]) == 6
size(this.eigenvectors[]) == 6
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.isSymmetric(org.apache.commons.math.linear.RealMatrix):::ENTER
this.main == null
this.secondary == null
this.squaredSecondary == null
this.transformer == null
this.lowerSpectra == 0.0
this.upperSpectra == 0.0
this.minPivot == 0.0
this.sigma == 0.0
this.sigmaLow == 0.0
this.tau == 0.0
this.work == null
this.pingPong == 0
this.eMin == 0.0
this.tType == 0
this.dMin1 == 0.0
this.dMin2 == 0.0
this.dN1 == 0.0
this.dN2 == 0.0
this.realEigenvalues == null
this.imagEigenvalues == null
this.eigenvectors == null
this.cachedV == null
this.cachedD == null
this.cachedVt == null
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.isSymmetric(org.apache.commons.math.linear.RealMatrix):::EXIT227
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.isSymmetric(org.apache.commons.math.linear.RealMatrix):::EXIT227;condition="return == true"
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.isSymmetric(org.apache.commons.math.linear.RealMatrix):::EXIT
this.splitTolerance == orig(this.splitTolerance)
this.main == orig(this.main)
this.secondary == orig(this.secondary)
this.squaredSecondary == orig(this.squaredSecondary)
this.transformer == orig(this.transformer)
this.lowerSpectra == orig(this.lowerSpectra)
this.upperSpectra == orig(this.upperSpectra)
this.minPivot == orig(this.minPivot)
this.sigma == orig(this.sigma)
this.sigmaLow == orig(this.sigmaLow)
this.tau == orig(this.tau)
this.work == orig(this.work)
this.pingPong == orig(this.pingPong)
this.qMax == orig(this.qMax)
this.eMin == orig(this.eMin)
this.tType == orig(this.tType)
this.dMin == orig(this.dMin)
this.dMin1 == orig(this.dMin1)
this.dMin2 == orig(this.dMin2)
this.dN == orig(this.dN)
this.dN1 == orig(this.dN1)
this.dN2 == orig(this.dN2)
this.g == orig(this.g)
this.realEigenvalues == orig(this.realEigenvalues)
this.imagEigenvalues == orig(this.imagEigenvalues)
this.eigenvectors == orig(this.eigenvectors)
this.cachedV == orig(this.cachedV)
this.cachedD == orig(this.cachedD)
this.cachedVt == orig(this.cachedVt)
this.main == null
this.secondary == null
this.squaredSecondary == null
this.transformer == null
this.lowerSpectra == 0.0
this.upperSpectra == 0.0
this.minPivot == 0.0
this.sigma == 0.0
this.sigmaLow == 0.0
this.tau == 0.0
this.work == null
this.pingPong == 0
this.eMin == 0.0
this.tType == 0
this.dMin1 == 0.0
this.dMin2 == 0.0
this.dN1 == 0.0
this.dN2 == 0.0
this.realEigenvalues == null
this.imagEigenvalues == null
this.eigenvectors == null
this.cachedV == null
this.cachedD == null
this.cachedVt == null
return == true
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.isSymmetric(org.apache.commons.math.linear.RealMatrix):::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.transformToTridiagonal(org.apache.commons.math.linear.RealMatrix):::ENTER
this.main == null
this.secondary == null
this.squaredSecondary == null
this.transformer == null
this.lowerSpectra == 0.0
this.upperSpectra == 0.0
this.minPivot == 0.0
this.sigma == 0.0
this.sigmaLow == 0.0
this.tau == 0.0
this.work == null
this.pingPong == 0
this.eMin == 0.0
this.tType == 0
this.dMin1 == 0.0
this.dMin2 == 0.0
this.dN1 == 0.0
this.dN2 == 0.0
this.realEigenvalues == null
this.imagEigenvalues == null
this.eigenvectors == null
this.cachedV == null
this.cachedD == null
this.cachedVt == null
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.transformToTridiagonal(org.apache.commons.math.linear.RealMatrix):::EXIT
this.splitTolerance == orig(this.splitTolerance)
this.lowerSpectra == orig(this.lowerSpectra)
this.upperSpectra == orig(this.upperSpectra)
this.minPivot == orig(this.minPivot)
this.sigma == orig(this.sigma)
this.sigmaLow == orig(this.sigmaLow)
this.tau == orig(this.tau)
this.work == orig(this.work)
this.pingPong == orig(this.pingPong)
this.qMax == orig(this.qMax)
this.eMin == orig(this.eMin)
this.tType == orig(this.tType)
this.dMin == orig(this.dMin)
this.dMin1 == orig(this.dMin1)
this.dMin2 == orig(this.dMin2)
this.dN == orig(this.dN)
this.dN1 == orig(this.dN1)
this.dN2 == orig(this.dN2)
this.g == orig(this.g)
this.realEigenvalues == orig(this.realEigenvalues)
this.imagEigenvalues == orig(this.imagEigenvalues)
this.eigenvectors == orig(this.eigenvectors)
this.cachedV == orig(this.cachedV)
this.cachedD == orig(this.cachedD)
this.cachedVt == orig(this.cachedVt)
this.transformer.cachedQ == null
this.transformer.cachedQt == null
this.lowerSpectra == 0.0
this.upperSpectra == 0.0
this.minPivot == 0.0
this.sigma == 0.0
this.sigmaLow == 0.0
this.tau == 0.0
this.work == null
this.pingPong == 0
this.eMin == 0.0
this.tType == 0
this.dMin1 == 0.0
this.dMin2 == 0.0
this.dN1 == 0.0
this.dN2 == 0.0
this.realEigenvalues == null
this.imagEigenvalues == null
this.eigenvectors == null
this.cachedV == null
this.cachedD == null
this.cachedVt == null
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest:::OBJECT
this.refValues[] == [2.003, 2.002, 2.001, 1.001, 1.0, 0.001]
this.refValues[] sorted by >
this.matrix.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
size(this.refValues[]) == 6
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.EigenDecompositionImplTest(java.lang.String):::ENTER
name != null
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.EigenDecompositionImplTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
this.refValues == null
this.matrix == null
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.createDiagonalMatrix(double[], int, int):::ENTER
diagonal != null
rows >= size(diagonal[])
columns >= size(diagonal[])
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.createDiagonalMatrix(double[], int, int):::EXIT
diagonal[] == orig(diagonal[])
return != null
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.createOrthogonalMatrix(java.util.Random, int):::ENTER
r != null
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.createOrthogonalMatrix(java.util.Random, int):::EXIT
return != null
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.createTestMatrix(java.util.Random, double[]):::ENTER
r != null
eigenValues != null
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.createTestMatrix(java.util.Random, double[]):::EXIT
eigenValues[] == orig(eigenValues[])
return != null
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.setUp():::ENTER
this.refValues == null
this.matrix == null
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.setUp():::EXIT
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.suite():::EXIT
return.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.tearDown():::ENTER
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.tearDown():::EXIT
this.refValues == null
this.matrix == null
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.testAEqualVDVt():::ENTER
this has only one value
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.testAEqualVDVt():::EXIT
this.refValues == orig(this.refValues)
this.refValues[] == orig(this.refValues[])
this.matrix == orig(this.matrix)
this.matrix.getClass().getName() == orig(this.matrix.getClass().getName())
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.testBigMatrix():::ENTER
this has only one value
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.testBigMatrix():::EXIT
this.refValues == orig(this.refValues)
this.refValues[] == orig(this.refValues[])
this.matrix == orig(this.matrix)
this.matrix.getClass().getName() == orig(this.matrix.getClass().getName())
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.testDimension4WithoutSplit():::ENTER
this has only one value
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.testDimension4WithoutSplit():::EXIT
this.refValues == orig(this.refValues)
this.refValues[] == orig(this.refValues[])
this.matrix == orig(this.matrix)
this.matrix.getClass().getName() == orig(this.matrix.getClass().getName())
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.testDimensions():::ENTER
this has only one value
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.testDimensions():::EXIT
this.refValues == orig(this.refValues)
this.refValues[] == orig(this.refValues[])
this.matrix == orig(this.matrix)
this.matrix.getClass().getName() == orig(this.matrix.getClass().getName())
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.testEigenvalues():::ENTER
this has only one value
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.testEigenvalues():::EXIT
this.refValues == orig(this.refValues)
this.refValues[] == orig(this.refValues[])
this.matrix == orig(this.matrix)
this.matrix.getClass().getName() == orig(this.matrix.getClass().getName())
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.testEigenvectors():::ENTER
this has only one value
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.testEigenvectors():::EXIT
this.refValues == orig(this.refValues)
this.refValues[] == orig(this.refValues[])
this.matrix == orig(this.matrix)
this.matrix.getClass().getName() == orig(this.matrix.getClass().getName())
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.testMath308():::ENTER
this has only one value
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.testMath308():::EXIT
this.refValues == orig(this.refValues)
this.refValues[] == orig(this.refValues[])
this.matrix == orig(this.matrix)
this.matrix.getClass().getName() == orig(this.matrix.getClass().getName())
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.testTridiagonal():::ENTER
this has only one value
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.testTridiagonal():::EXIT
this.refValues == orig(this.refValues)
this.refValues[] == orig(this.refValues[])
this.matrix == orig(this.matrix)
this.matrix.getClass().getName() == orig(this.matrix.getClass().getName())
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.testVOrthogonal():::ENTER
this has only one value
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.testVOrthogonal():::EXIT
this.refValues == orig(this.refValues)
this.refValues[] == orig(this.refValues[])
this.matrix == orig(this.matrix)
this.matrix.getClass().getName() == orig(this.matrix.getClass().getName())
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenSolverTest:::OBJECT
this.refValues[] == [2.003, 2.002, 2.001, 1.001, 1.0, 0.001]
this.refValues[] sorted by >
this.matrix.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
size(this.refValues[]) == 6
===========================================================================
org.apache.commons.math.linear.EigenSolverTest.EigenSolverTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.linear.EigenSolverTest.EigenSolverTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
this.refValues == null
this.matrix == null
===========================================================================
org.apache.commons.math.linear.EigenSolverTest.setUp():::ENTER
this.refValues == null
this.matrix == null
===========================================================================
org.apache.commons.math.linear.EigenSolverTest.setUp():::EXIT
===========================================================================
org.apache.commons.math.linear.EigenSolverTest.suite():::EXIT
return.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.apache.commons.math.linear.EigenSolverTest.tearDown():::ENTER
===========================================================================
org.apache.commons.math.linear.EigenSolverTest.tearDown():::EXIT
this.refValues == null
this.matrix == null
===========================================================================
org.apache.commons.math.linear.EigenSolverTest.testInvertible():::ENTER
this has only one value
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenSolverTest.testInvertible():::EXIT
this.refValues == orig(this.refValues)
this.refValues[] == orig(this.refValues[])
this.matrix == orig(this.matrix)
this.matrix.getClass().getName() == orig(this.matrix.getClass().getName())
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenSolverTest.testNonInvertible():::ENTER
this has only one value
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenSolverTest.testNonInvertible():::EXIT
this.refValues == orig(this.refValues)
this.refValues[] == orig(this.refValues[])
this.matrix == orig(this.matrix)
this.matrix.getClass().getName() == orig(this.matrix.getClass().getName())
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenSolverTest.testSolve():::ENTER
this has only one value
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenSolverTest.testSolve():::EXIT
this.refValues == orig(this.refValues)
this.refValues[] == orig(this.refValues[])
this.matrix == orig(this.matrix)
this.matrix.getClass().getName() == orig(this.matrix.getClass().getName())
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenSolverTest.testSolveDimensionErrors():::ENTER
this has only one value
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenSolverTest.testSolveDimensionErrors():::EXIT
this.refValues == orig(this.refValues)
this.refValues[] == orig(this.refValues[])
this.matrix == orig(this.matrix)
this.matrix.getClass().getName() == orig(this.matrix.getClass().getName())
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.InvalidMatrixException:::CLASS
===========================================================================
org.apache.commons.math.linear.InvalidMatrixException:::OBJECT
this has only one value
this.pattern has only one value
this.pattern.toString == "matrix is singular"
this.arguments has only one value
this.arguments.getClass().getName() == java.lang.Object[].class
this.arguments[] == []
this.arguments[].getClass().getName() == []
===========================================================================
org.apache.commons.math.linear.InvalidMatrixException.InvalidMatrixException(java.lang.String, java.lang.Object[]):::ENTER
pattern has only one value
pattern.toString == "matrix is singular"
arguments has only one value
arguments.getClass().getName() == java.lang.Object[].class
arguments[] == []
===========================================================================
org.apache.commons.math.linear.InvalidMatrixException.InvalidMatrixException(java.lang.String, java.lang.Object[]):::EXIT
pattern.toString == orig(pattern.toString)
arguments[] == orig(arguments[])
pattern.toString == "matrix is singular"
arguments[] == []
===========================================================================
org.apache.commons.math.linear.MatrixUtils.checkColumnIndex(org.apache.commons.math.linear.AnyMatrix, int):::ENTER
m != null
m.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
column >= 0
===========================================================================
org.apache.commons.math.linear.MatrixUtils.checkColumnIndex(org.apache.commons.math.linear.AnyMatrix, int):::EXIT
===========================================================================
org.apache.commons.math.linear.MatrixUtils.checkMultiplicationCompatible(org.apache.commons.math.linear.AnyMatrix, org.apache.commons.math.linear.AnyMatrix):::ENTER
left.getClass().getName() == right.getClass().getName()
left != null
right != null
===========================================================================
org.apache.commons.math.linear.MatrixUtils.checkMultiplicationCompatible(org.apache.commons.math.linear.AnyMatrix, org.apache.commons.math.linear.AnyMatrix):::EXIT
===========================================================================
org.apache.commons.math.linear.MatrixUtils.checkRowIndex(org.apache.commons.math.linear.AnyMatrix, int):::ENTER
m != null
m.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
row >= 0
===========================================================================
org.apache.commons.math.linear.MatrixUtils.checkRowIndex(org.apache.commons.math.linear.AnyMatrix, int):::EXIT
===========================================================================
org.apache.commons.math.linear.MatrixUtils.checkSubMatrixIndex(org.apache.commons.math.linear.AnyMatrix, int, int, int, int):::ENTER
m has only one value
m.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
startRow == 0
endRow one of { 1, 3 }
startColumn == 0
endColumn == 3
===========================================================================
org.apache.commons.math.linear.MatrixUtils.checkSubMatrixIndex(org.apache.commons.math.linear.AnyMatrix, int, int, int, int):::EXIT
===========================================================================
org.apache.commons.math.linear.MatrixUtils.checkSubtractionCompatible(org.apache.commons.math.linear.AnyMatrix, org.apache.commons.math.linear.AnyMatrix):::ENTER
left.getClass().getName() == right.getClass().getName()
left.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math.linear.MatrixUtils.checkSubtractionCompatible(org.apache.commons.math.linear.AnyMatrix, org.apache.commons.math.linear.AnyMatrix):::EXIT
===========================================================================
org.apache.commons.math.linear.MatrixUtils.createRealDiagonalMatrix(double[]):::ENTER
diagonal[] == [2.003, 2.0020000000000007, 2.0010000000000003, 1.0009999999999997, 1.0000000000000004, 9.999999999998899E-4]
size(diagonal[]) == 6
===========================================================================
org.apache.commons.math.linear.MatrixUtils.createRealDiagonalMatrix(double[]):::EXIT
diagonal[] == orig(diagonal[])
diagonal[] == [2.003, 2.0020000000000007, 2.0010000000000003, 1.0009999999999997, 1.0000000000000004, 9.999999999998899E-4]
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix(int):::ENTER
dimension one of { 5, 6 }
===========================================================================
org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix(int):::EXIT
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math.linear.MatrixUtils.createRealMatrix(double[][]):::ENTER
data != null
data.getClass().getName() == double[][].class
data[] elements != null
===========================================================================
org.apache.commons.math.linear.MatrixUtils.createRealMatrix(double[][]):::EXIT
data[] == orig(data[])
data[] elements != null
return != null
return.getClass().getName() != orig(data.getClass().getName())
===========================================================================
org.apache.commons.math.linear.MatrixUtils.createRealMatrix(int, int):::ENTER
rows one of { 4, 5, 6 }
columns one of { 4, 5, 6 }
===========================================================================
org.apache.commons.math.linear.MatrixUtils.createRealMatrix(int, int):::EXIT
return != null
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math.linear.RealVectorFormat:::CLASS
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == "{"
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == "}"
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == "; "
===========================================================================
org.apache.commons.math.linear.RealVectorFormat:::OBJECT
this has only one value
this.prefix has only one value
this.prefix.toString == "{"
this.suffix has only one value
this.suffix.toString == "}"
this.separator has only one value
this.separator.toString == "; "
this.trimmedPrefix has only one value
this.trimmedPrefix.toString == "{"
this.trimmedSuffix has only one value
this.trimmedSuffix.toString == "}"
this.trimmedSeparator has only one value
this.trimmedSeparator.toString == ";"
this.format has only one value
this.format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.RealVectorFormat(java.lang.String, java.lang.String, java.lang.String, java.text.NumberFormat):::ENTER
prefix has only one value
prefix.toString == "{"
suffix has only one value
suffix.toString == "}"
separator has only one value
separator.toString == "; "
format has only one value
format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.RealVectorFormat(java.lang.String, java.lang.String, java.lang.String, java.text.NumberFormat):::EXIT
prefix.toString == orig(prefix.toString)
suffix.toString == orig(suffix.toString)
separator.toString == orig(separator.toString)
prefix.toString == "{"
suffix.toString == "}"
separator.toString == "; "
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.RealVectorFormat(java.text.NumberFormat):::ENTER
format has only one value
format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.RealVectorFormat(java.text.NumberFormat):::EXIT
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.getInstance():::ENTER
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.getInstance():::EXIT
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
return has only one value
return.prefix has only one value
return.prefix.toString == "{"
return.suffix has only one value
return.suffix.toString == "}"
return.separator has only one value
return.separator.toString == "; "
return.trimmedPrefix has only one value
return.trimmedPrefix.toString == "{"
return.trimmedSuffix has only one value
return.trimmedSuffix.toString == "}"
return.trimmedSeparator has only one value
return.trimmedSeparator.toString == ";"
return.format has only one value
return.format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.getInstance(java.util.Locale):::ENTER
locale has only one value
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.getInstance(java.util.Locale):::EXIT
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
return has only one value
return.prefix has only one value
return.prefix.toString == "{"
return.suffix has only one value
return.suffix.toString == "}"
return.separator has only one value
return.separator.toString == "; "
return.trimmedPrefix has only one value
return.trimmedPrefix.toString == "{"
return.trimmedSuffix has only one value
return.trimmedSuffix.toString == "}"
return.trimmedSeparator has only one value
return.trimmedSeparator.toString == ";"
return.format has only one value
return.format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math.linear.SingularMatrixException:::CLASS
===========================================================================
org.apache.commons.math.linear.SingularMatrixException:::OBJECT
this has only one value
this.pattern has only one value
this.pattern.toString == "matrix is singular"
this.arguments has only one value
this.arguments.getClass().getName() == java.lang.Object[].class
this.arguments[] == []
this.arguments[].getClass().getName() == []
===========================================================================
org.apache.commons.math.linear.SingularMatrixException.SingularMatrixException():::EXIT
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImpl$1:::OBJECT
this.val$data.getClass().getName() == double[][].class
this.val$data[] elements != null
org.apache.commons.math.linear.SingularValueDecompositionImpl.this has only one value
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.m == 4
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.n == 4
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer has only one value
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.householderVectors has only one value
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.householderVectors.getClass().getName() == double[][].class
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.householderVectors[] contains no nulls and has only one value, of length 4
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.householderVectors[] elements != null
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.main has only one value
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.main[] == [-9.219544457292887, 8.071323847840354, 4.903062379815523, 2.806585661782493]
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.secondary has only one value
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.secondary[] == [10.981803130633878, -5.621981191693385, 2.393765871225522]
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.secondary[] elements one of { -5.621981191693385, 2.393765871225522, 10.981803130633878 }
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.cachedU == null
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.cachedB == null
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.cachedV has only one value
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.cachedV.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.mainBidiagonal has only one value
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.mainBidiagonal[] == [-9.219544457292887, 8.071323847840354, 4.903062379815523, 2.806585661782493]
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryBidiagonal has only one value
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryBidiagonal[] == [10.981803130633878, -5.621981191693385, 2.393765871225522]
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryBidiagonal[] elements one of { -5.621981191693385, 2.393765871225522, 10.981803130633878 }
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.mainTridiagonal has only one value
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.mainTridiagonal[] == [85.0, 185.74626865671647, 55.64669322011643, 13.607038123167158]
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryTridiagonal has only one value
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryTridiagonal[] == [-101.24722218411725, -45.37683086462475, 11.736783389292189]
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryTridiagonal[] elements one of { -101.24722218411725, -45.37683086462475, 11.736783389292189 }
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryTridiagonal[] sorted by <
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.eigenDecomposition has only one value
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.eigenDecomposition.getClass().getName() == org.apache.commons.math.linear.EigenDecompositionImpl.class
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.singularValues has only one value
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.singularValues[] == [16.0, 8.000000000000002, 4.0, 1.9999999999999993]
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.singularValues[] elements >= 1.9999999999999993
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.singularValues[] sorted by >
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedU == null
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedUt == null
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedS == null
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedV has only one value
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedV.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedVt has only one value
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedVt.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
size(this.val$data[]) one of { 2, 4 }
size(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.householderVectors[]) == 4
size(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.main[]) == 4
size(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.secondary[]) == 3
size(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.mainBidiagonal[]) == 4
size(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryBidiagonal[]) == 3
size(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.mainTridiagonal[]) == 4
size(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryTridiagonal[]) == 3
size(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.singularValues[]) == 4
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImpl$1.(org.apache.commons.math.linear.SingularValueDecompositionImpl, double[][]):::ENTER
org.apache.commons.math.linear.SingularValueDecompositionImpl.this has only one value
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.m == 4
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.n == 4
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer has only one value
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.householderVectors has only one value
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.householderVectors.getClass().getName() == double[][].class
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.householderVectors[] contains no nulls and has only one value, of length 4
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.main has only one value
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.main[] == [-9.219544457292887, 8.071323847840354, 4.903062379815523, 2.806585661782493]
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.secondary has only one value
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.secondary[] == [10.981803130633878, -5.621981191693385, 2.393765871225522]
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.secondary[] elements one of { -5.621981191693385, 2.393765871225522, 10.981803130633878 }
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.cachedU == null
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.cachedB == null
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.cachedV has only one value
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.cachedV.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.mainBidiagonal has only one value
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.mainBidiagonal[] == [-9.219544457292887, 8.071323847840354, 4.903062379815523, 2.806585661782493]
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryBidiagonal has only one value
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryBidiagonal[] == [10.981803130633878, -5.621981191693385, 2.393765871225522]
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryBidiagonal[] elements one of { -5.621981191693385, 2.393765871225522, 10.981803130633878 }
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.mainTridiagonal has only one value
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.mainTridiagonal[] == [85.0, 185.74626865671647, 55.64669322011643, 13.607038123167158]
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryTridiagonal has only one value
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryTridiagonal[] == [-101.24722218411725, -45.37683086462475, 11.736783389292189]
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryTridiagonal[] elements one of { -101.24722218411725, -45.37683086462475, 11.736783389292189 }
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.eigenDecomposition has only one value
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.eigenDecomposition.getClass().getName() == org.apache.commons.math.linear.EigenDecompositionImpl.class
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.singularValues has only one value
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.singularValues[] == [16.0, 8.000000000000002, 4.0, 1.9999999999999993]
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedU == null
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedUt == null
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedS == null
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedV has only one value
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedV.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedVt has only one value
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedVt.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
$hidden$2.getClass().getName() == double[][].class
size(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.householderVectors[]) == 4
size(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.main[]) == 4
size(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.secondary[]) == 3
size(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.mainBidiagonal[]) == 4
size(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryBidiagonal[]) == 3
size(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.mainTridiagonal[]) == 4
size(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryTridiagonal[]) == 3
size(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.singularValues[]) == 4
size($hidden$2[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImpl$1.(org.apache.commons.math.linear.SingularValueDecompositionImpl, double[][]):::EXIT
org.apache.commons.math.linear.SingularValueDecompositionImpl.this == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.m == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.m)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.n == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.n)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.householderVectors == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.householderVectors)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.householderVectors.getClass().getName() == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.householderVectors.getClass().getName())
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.householderVectors[] == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.householderVectors[])
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.main == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.main)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.main[] == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.main[])
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.secondary == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.secondary)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.secondary[] == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.secondary[])
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.cachedU == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.cachedU)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.cachedB == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.cachedB)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.cachedV == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.cachedV)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.cachedV.getClass().getName() == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.cachedV.getClass().getName())
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.mainBidiagonal == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.mainBidiagonal)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.mainBidiagonal[] == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.mainBidiagonal[])
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryBidiagonal == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryBidiagonal)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryBidiagonal[] == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryBidiagonal[])
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.mainTridiagonal == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.mainTridiagonal)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.mainTridiagonal[] == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.mainTridiagonal[])
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryTridiagonal == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryTridiagonal)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryTridiagonal[] == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryTridiagonal[])
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.eigenDecomposition == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.eigenDecomposition)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.eigenDecomposition.getClass().getName() == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.eigenDecomposition.getClass().getName())
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.singularValues == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.singularValues)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.singularValues[] == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.singularValues[])
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedU == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedU)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedUt == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedUt)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedS == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedS)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedV == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedV)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedV.getClass().getName() == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedV.getClass().getName())
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedVt == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedVt)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedVt.getClass().getName() == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedVt.getClass().getName())
$hidden$2[] == orig($hidden$2[])
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImpl$1.visit(int, int, double):::ENTER
row >= 0
column >= 0
value one of { -0.49999999999999994, 0.5000000000000001 }
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImpl$1.visit(int, int, double):::EXIT
this.val$data == orig(this.val$data)
this.val$data.getClass().getName() == orig(this.val$data.getClass().getName())
this.val$data[] == orig(this.val$data[])
org.apache.commons.math.linear.SingularValueDecompositionImpl.this == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.m == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.m)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.n == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.n)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.householderVectors == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.householderVectors)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.householderVectors.getClass().getName() == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.householderVectors.getClass().getName())
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.householderVectors[] == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.householderVectors[])
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.main == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.main)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.main[] == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.main[])
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.secondary == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.secondary)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.secondary[] == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.secondary[])
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.cachedU == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.cachedU)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.cachedB == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.cachedB)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.cachedV == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.cachedV)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.cachedV.getClass().getName() == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.transformer.cachedV.getClass().getName())
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.mainBidiagonal == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.mainBidiagonal)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.mainBidiagonal[] == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.mainBidiagonal[])
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryBidiagonal == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryBidiagonal)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryBidiagonal[] == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryBidiagonal[])
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.mainTridiagonal == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.mainTridiagonal)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.mainTridiagonal[] == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.mainTridiagonal[])
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryTridiagonal == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryTridiagonal)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryTridiagonal[] == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.secondaryTridiagonal[])
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.eigenDecomposition == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.eigenDecomposition)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.eigenDecomposition.getClass().getName() == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.eigenDecomposition.getClass().getName())
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.singularValues == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.singularValues)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.singularValues[] == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.singularValues[])
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedU == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedU)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedUt == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedUt)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedS == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedS)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedV == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedV)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedV.getClass().getName() == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedV.getClass().getName())
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedVt == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedVt)
org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedVt.getClass().getName() == orig(org.apache.commons.math.linear.SingularValueDecompositionImpl.this.cachedVt.getClass().getName())
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImpl:::OBJECT
this.m one of { 4, 6 }
this.n one of { 4, 6 }
this.transformer.householderVectors.getClass().getName() == double[][].class
this.transformer.householderVectors[] elements != null
this.transformer.main[] one of { [-74.22250282457561, 1.6627690648252533, 2.291009305998946, 1.004257812890381], [-9.219544457292887, 8.071323847840354, 4.903062379815523, 2.806585661782493], [41.98855724337373, -4.437554570620956, 1.5230153223874792, -1.0006003989539296] }
this.transformer.secondary[] one of { [-98.64399902396404, -0.019008555835969717, -0.1817947551212693], [10.981803130633878, -5.621981191693385, 2.393765871225522], [116.0212438296085, -1.3012715928642666, -0.001922035677491829] }
this.transformer.cachedU == null
this.transformer.cachedB == null
this.transformer.cachedV.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
this.mainBidiagonal[] one of { [-74.22250282457561, 1.6627690648252533, 2.291009305998946, 1.004257812890381], [-9.219544457292887, 8.071323847840354, 4.903062379815523, 2.806585661782493], [41.98855724337373, -4.437554570620956, 1.5230153223874792, -1.0006003989539296] }
this.secondaryBidiagonal[] one of { [-98.64399902396404, -0.019008555835969717, -0.1817947551212693], [10.981803130633878, -5.621981191693385, 2.393765871225522], [116.0212438296085, -1.3012715928642666, -0.001922035677491829] }
this.mainTridiagonal[] one of { [85.0, 185.74626865671647, 55.64669322011643, 13.607038123167158], [1763.0389393800722, 13480.620910336705, 4.0128834306225425, 1.0012048526079087], [5508.979925544135, 9733.403344402757, 5.249084965368742, 1.0415830877409737] }
this.mainTridiagonal[] elements >= 1.0012048526079087
this.secondaryTridiagonal[] one of { [-101.24722218411725, -45.37683086462475, 11.736783389292189], [4871.564637986937, 5.774463704534038, -0.002927289786995455], [7321.604496183605, -0.031606838611053976, -0.41649347576462753] }
this.eigenDecomposition.getClass().getName() == org.apache.commons.math.linear.EigenDecompositionImpl.class
this.singularValues[] one of { [16.0, 8.000000000000002, 4.0, 1.9999999999999993], [123.45600000000002, 2.3, 1.0009999999998886, 0.9989999999997505], [123.45600000000002, 2.300000000000006, 1.000999999999996, 0.9989999999999997] }
this.singularValues[] elements >= 0.9989999999997505
this.singularValues[] sorted by >
this.cachedU == null
this.cachedUt == null
this.cachedS == null
this.cachedV.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
this.cachedVt.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
size(this.transformer.householderVectors[]) one of { 4, 6 }
size(this.transformer.main[]) == 4
size(this.transformer.secondary[]) == 3
size(this.mainBidiagonal[]) == 4
size(this.secondaryBidiagonal[]) == 3
size(this.mainTridiagonal[]) == 4
size(this.secondaryTridiagonal[]) == 3
size(this.singularValues[]) == 4
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImpl.SingularValueDecompositionImpl(org.apache.commons.math.linear.RealMatrix):::ENTER
matrix.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImpl.SingularValueDecompositionImpl(org.apache.commons.math.linear.RealMatrix):::EXIT
this.transformer.cachedV == null
this.cachedV == null
this.cachedVt == null
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImpl.getCovariance(double):::ENTER
this has only one value
this.m == 4
this.n == 4
this.transformer has only one value
this.transformer.householderVectors has only one value
this.transformer.householderVectors[] contains no nulls and has only one value, of length 4
this.transformer.main has only one value
this.transformer.main[] == [-9.219544457292887, 8.071323847840354, 4.903062379815523, 2.806585661782493]
this.transformer.secondary has only one value
this.transformer.secondary[] == [10.981803130633878, -5.621981191693385, 2.393765871225522]
this.transformer.secondary[] elements one of { -5.621981191693385, 2.393765871225522, 10.981803130633878 }
this.mainBidiagonal has only one value
this.mainBidiagonal[] == [-9.219544457292887, 8.071323847840354, 4.903062379815523, 2.806585661782493]
this.secondaryBidiagonal has only one value
this.secondaryBidiagonal[] == [10.981803130633878, -5.621981191693385, 2.393765871225522]
this.secondaryBidiagonal[] elements one of { -5.621981191693385, 2.393765871225522, 10.981803130633878 }
this.mainTridiagonal has only one value
this.mainTridiagonal[] == [85.0, 185.74626865671647, 55.64669322011643, 13.607038123167158]
this.secondaryTridiagonal has only one value
this.secondaryTridiagonal[] == [-101.24722218411725, -45.37683086462475, 11.736783389292189]
this.secondaryTridiagonal[] elements one of { -101.24722218411725, -45.37683086462475, 11.736783389292189 }
this.eigenDecomposition has only one value
this.singularValues has only one value
this.singularValues[] == [16.0, 8.000000000000002, 4.0, 1.9999999999999993]
minSingularValue one of { 0.0, 6.0 }
size(this.transformer.householderVectors[]) == 4
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImpl.getCovariance(double):::EXIT
this.m == orig(this.m)
this.n == orig(this.n)
this.transformer == orig(this.transformer)
this.transformer.householderVectors == orig(this.transformer.householderVectors)
this.transformer.householderVectors.getClass().getName() == orig(this.transformer.householderVectors.getClass().getName())
this.transformer.householderVectors[] == orig(this.transformer.householderVectors[])
this.transformer.main == orig(this.transformer.main)
this.transformer.main[] == orig(this.transformer.main[])
this.transformer.secondary == orig(this.transformer.secondary)
this.transformer.secondary[] == orig(this.transformer.secondary[])
this.transformer.cachedU == orig(this.transformer.cachedU)
this.transformer.cachedB == orig(this.transformer.cachedB)
this.transformer.cachedV.getClass().getName() == orig(this.transformer.cachedV.getClass().getName())
this.mainBidiagonal == orig(this.mainBidiagonal)
this.mainBidiagonal[] == orig(this.mainBidiagonal[])
this.secondaryBidiagonal == orig(this.secondaryBidiagonal)
this.secondaryBidiagonal[] == orig(this.secondaryBidiagonal[])
this.mainTridiagonal == orig(this.mainTridiagonal)
this.mainTridiagonal[] == orig(this.mainTridiagonal[])
this.secondaryTridiagonal == orig(this.secondaryTridiagonal)
this.secondaryTridiagonal[] == orig(this.secondaryTridiagonal[])
this.eigenDecomposition == orig(this.eigenDecomposition)
this.eigenDecomposition.getClass().getName() == orig(this.eigenDecomposition.getClass().getName())
this.singularValues == orig(this.singularValues)
this.singularValues[] == orig(this.singularValues[])
this.cachedU == orig(this.cachedU)
this.cachedUt == orig(this.cachedUt)
this.cachedS == orig(this.cachedS)
this.cachedV.getClass().getName() == orig(this.cachedV.getClass().getName())
this.cachedVt.getClass().getName() == orig(this.cachedVt.getClass().getName())
this.m == 4
this.n == 4
this.transformer has only one value
this.transformer.householderVectors has only one value
this.transformer.householderVectors[] contains no nulls and has only one value, of length 4
this.transformer.main has only one value
this.transformer.main[] == [-9.219544457292887, 8.071323847840354, 4.903062379815523, 2.806585661782493]
this.transformer.secondary has only one value
this.transformer.secondary[] == [10.981803130633878, -5.621981191693385, 2.393765871225522]
this.transformer.secondary[] elements one of { -5.621981191693385, 2.393765871225522, 10.981803130633878 }
this.transformer.cachedV has only one value
this.mainBidiagonal has only one value
this.mainBidiagonal[] == [-9.219544457292887, 8.071323847840354, 4.903062379815523, 2.806585661782493]
this.secondaryBidiagonal has only one value
this.secondaryBidiagonal[] == [10.981803130633878, -5.621981191693385, 2.393765871225522]
this.secondaryBidiagonal[] elements one of { -5.621981191693385, 2.393765871225522, 10.981803130633878 }
this.mainTridiagonal has only one value
this.mainTridiagonal[] == [85.0, 185.74626865671647, 55.64669322011643, 13.607038123167158]
this.secondaryTridiagonal has only one value
this.secondaryTridiagonal[] == [-101.24722218411725, -45.37683086462475, 11.736783389292189]
this.secondaryTridiagonal[] elements one of { -101.24722218411725, -45.37683086462475, 11.736783389292189 }
this.eigenDecomposition has only one value
this.singularValues has only one value
this.singularValues[] == [16.0, 8.000000000000002, 4.0, 1.9999999999999993]
this.cachedV has only one value
this.cachedVt has only one value
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
size(this.transformer.householderVectors[]) == 4
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImpl.getSingularValues():::ENTER
this.transformer.cachedV == null
this.cachedV == null
this.cachedVt == null
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImpl.getSingularValues():::EXIT
this.m == orig(this.m)
this.n == orig(this.n)
this.transformer == orig(this.transformer)
this.transformer.householderVectors == orig(this.transformer.householderVectors)
this.transformer.householderVectors.getClass().getName() == orig(this.transformer.householderVectors.getClass().getName())
this.transformer.householderVectors[] == orig(this.transformer.householderVectors[])
this.transformer.main == orig(this.transformer.main)
this.transformer.main[] == orig(this.transformer.main[])
this.transformer.secondary == orig(this.transformer.secondary)
this.transformer.secondary[] == orig(this.transformer.secondary[])
this.transformer.cachedU == orig(this.transformer.cachedU)
this.transformer.cachedB == orig(this.transformer.cachedB)
this.transformer.cachedV == orig(this.transformer.cachedV)
this.mainBidiagonal == orig(this.mainBidiagonal)
this.mainBidiagonal[] == orig(this.mainBidiagonal[])
this.secondaryBidiagonal == orig(this.secondaryBidiagonal)
this.secondaryBidiagonal[] == orig(this.secondaryBidiagonal[])
this.mainTridiagonal == orig(this.mainTridiagonal)
this.mainTridiagonal[] == orig(this.mainTridiagonal[])
this.secondaryTridiagonal == orig(this.secondaryTridiagonal)
this.secondaryTridiagonal[] == orig(this.secondaryTridiagonal[])
this.eigenDecomposition == orig(this.eigenDecomposition)
this.eigenDecomposition.getClass().getName() == orig(this.eigenDecomposition.getClass().getName())
this.singularValues == orig(this.singularValues)
this.singularValues[] == orig(this.singularValues[])
this.cachedU == orig(this.cachedU)
this.cachedUt == orig(this.cachedUt)
this.cachedS == orig(this.cachedS)
this.cachedV == orig(this.cachedV)
this.cachedVt == orig(this.cachedVt)
this.transformer.cachedV == null
this.cachedV == null
this.cachedVt == null
return[] one of { [16.0, 8.000000000000002, 4.0, 1.9999999999999993], [123.45600000000002, 2.3, 1.0009999999998886, 0.9989999999997505], [123.45600000000002, 2.300000000000006, 1.000999999999996, 0.9989999999999997] }
size(return[]) == 4
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImpl.getV():::ENTER
this has only one value
this.m == 4
this.n == 4
this.transformer has only one value
this.transformer.householderVectors has only one value
this.transformer.householderVectors[] contains no nulls and has only one value, of length 4
this.transformer.main has only one value
this.transformer.main[] == [-9.219544457292887, 8.071323847840354, 4.903062379815523, 2.806585661782493]
this.transformer.secondary has only one value
this.transformer.secondary[] == [10.981803130633878, -5.621981191693385, 2.393765871225522]
this.transformer.secondary[] elements one of { -5.621981191693385, 2.393765871225522, 10.981803130633878 }
this.transformer.cachedV == null
this.mainBidiagonal has only one value
this.mainBidiagonal[] == [-9.219544457292887, 8.071323847840354, 4.903062379815523, 2.806585661782493]
this.secondaryBidiagonal has only one value
this.secondaryBidiagonal[] == [10.981803130633878, -5.621981191693385, 2.393765871225522]
this.secondaryBidiagonal[] elements one of { -5.621981191693385, 2.393765871225522, 10.981803130633878 }
this.mainTridiagonal has only one value
this.mainTridiagonal[] == [85.0, 185.74626865671647, 55.64669322011643, 13.607038123167158]
this.secondaryTridiagonal has only one value
this.secondaryTridiagonal[] == [-101.24722218411725, -45.37683086462475, 11.736783389292189]
this.secondaryTridiagonal[] elements one of { -101.24722218411725, -45.37683086462475, 11.736783389292189 }
this.eigenDecomposition has only one value
this.singularValues has only one value
this.singularValues[] == [16.0, 8.000000000000002, 4.0, 1.9999999999999993]
this.cachedV == null
this.cachedVt == null
size(this.transformer.householderVectors[]) == 4
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImpl.getV():::EXIT
this.m == orig(this.m)
this.n == orig(this.n)
this.transformer == orig(this.transformer)
this.transformer.householderVectors == orig(this.transformer.householderVectors)
this.transformer.householderVectors.getClass().getName() == orig(this.transformer.householderVectors.getClass().getName())
this.transformer.householderVectors[] == orig(this.transformer.householderVectors[])
this.transformer.main == orig(this.transformer.main)
this.transformer.main[] == orig(this.transformer.main[])
this.transformer.secondary == orig(this.transformer.secondary)
this.transformer.secondary[] == orig(this.transformer.secondary[])
this.transformer.cachedU == orig(this.transformer.cachedU)
this.transformer.cachedB == orig(this.transformer.cachedB)
this.mainBidiagonal == orig(this.mainBidiagonal)
this.mainBidiagonal[] == orig(this.mainBidiagonal[])
this.secondaryBidiagonal == orig(this.secondaryBidiagonal)
this.secondaryBidiagonal[] == orig(this.secondaryBidiagonal[])
this.mainTridiagonal == orig(this.mainTridiagonal)
this.mainTridiagonal[] == orig(this.mainTridiagonal[])
this.secondaryTridiagonal == orig(this.secondaryTridiagonal)
this.secondaryTridiagonal[] == orig(this.secondaryTridiagonal[])
this.eigenDecomposition == orig(this.eigenDecomposition)
this.eigenDecomposition.getClass().getName() == orig(this.eigenDecomposition.getClass().getName())
this.singularValues == orig(this.singularValues)
this.singularValues[] == orig(this.singularValues[])
this.cachedU == orig(this.cachedU)
this.cachedUt == orig(this.cachedUt)
this.cachedS == orig(this.cachedS)
this.cachedVt == orig(this.cachedVt)
this.m == 4
this.n == 4
this.transformer has only one value
this.transformer.householderVectors has only one value
this.transformer.householderVectors[] contains no nulls and has only one value, of length 4
this.transformer.main has only one value
this.transformer.main[] == [-9.219544457292887, 8.071323847840354, 4.903062379815523, 2.806585661782493]
this.transformer.secondary has only one value
this.transformer.secondary[] == [10.981803130633878, -5.621981191693385, 2.393765871225522]
this.transformer.secondary[] elements one of { -5.621981191693385, 2.393765871225522, 10.981803130633878 }
this.transformer.cachedV has only one value
this.mainBidiagonal has only one value
this.mainBidiagonal[] == [-9.219544457292887, 8.071323847840354, 4.903062379815523, 2.806585661782493]
this.secondaryBidiagonal has only one value
this.secondaryBidiagonal[] == [10.981803130633878, -5.621981191693385, 2.393765871225522]
this.secondaryBidiagonal[] elements one of { -5.621981191693385, 2.393765871225522, 10.981803130633878 }
this.mainTridiagonal has only one value
this.mainTridiagonal[] == [85.0, 185.74626865671647, 55.64669322011643, 13.607038123167158]
this.secondaryTridiagonal has only one value
this.secondaryTridiagonal[] == [-101.24722218411725, -45.37683086462475, 11.736783389292189]
this.secondaryTridiagonal[] elements one of { -101.24722218411725, -45.37683086462475, 11.736783389292189 }
this.eigenDecomposition has only one value
this.singularValues has only one value
this.singularValues[] == [16.0, 8.000000000000002, 4.0, 1.9999999999999993]
this.cachedV has only one value
this.cachedVt == null
return has only one value
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
size(this.transformer.householderVectors[]) == 4
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImpl.getVT():::ENTER
this has only one value
this.m == 4
this.n == 4
this.transformer has only one value
this.transformer.householderVectors has only one value
this.transformer.householderVectors[] contains no nulls and has only one value, of length 4
this.transformer.main has only one value
this.transformer.main[] == [-9.219544457292887, 8.071323847840354, 4.903062379815523, 2.806585661782493]
this.transformer.secondary has only one value
this.transformer.secondary[] == [10.981803130633878, -5.621981191693385, 2.393765871225522]
this.transformer.secondary[] elements one of { -5.621981191693385, 2.393765871225522, 10.981803130633878 }
this.mainBidiagonal has only one value
this.mainBidiagonal[] == [-9.219544457292887, 8.071323847840354, 4.903062379815523, 2.806585661782493]
this.secondaryBidiagonal has only one value
this.secondaryBidiagonal[] == [10.981803130633878, -5.621981191693385, 2.393765871225522]
this.secondaryBidiagonal[] elements one of { -5.621981191693385, 2.393765871225522, 10.981803130633878 }
this.mainTridiagonal has only one value
this.mainTridiagonal[] == [85.0, 185.74626865671647, 55.64669322011643, 13.607038123167158]
this.secondaryTridiagonal has only one value
this.secondaryTridiagonal[] == [-101.24722218411725, -45.37683086462475, 11.736783389292189]
this.secondaryTridiagonal[] elements one of { -101.24722218411725, -45.37683086462475, 11.736783389292189 }
this.eigenDecomposition has only one value
this.singularValues has only one value
this.singularValues[] == [16.0, 8.000000000000002, 4.0, 1.9999999999999993]
size(this.transformer.householderVectors[]) == 4
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImpl.getVT():::EXIT
this.m == orig(this.m)
this.n == orig(this.n)
this.transformer == orig(this.transformer)
this.transformer.householderVectors == orig(this.transformer.householderVectors)
this.transformer.householderVectors.getClass().getName() == orig(this.transformer.householderVectors.getClass().getName())
this.transformer.householderVectors[] == orig(this.transformer.householderVectors[])
this.transformer.main == orig(this.transformer.main)
this.transformer.main[] == orig(this.transformer.main[])
this.transformer.secondary == orig(this.transformer.secondary)
this.transformer.secondary[] == orig(this.transformer.secondary[])
this.transformer.cachedU == orig(this.transformer.cachedU)
this.transformer.cachedB == orig(this.transformer.cachedB)
this.transformer.cachedV.getClass().getName() == orig(this.transformer.cachedV.getClass().getName())
this.mainBidiagonal == orig(this.mainBidiagonal)
this.mainBidiagonal[] == orig(this.mainBidiagonal[])
this.secondaryBidiagonal == orig(this.secondaryBidiagonal)
this.secondaryBidiagonal[] == orig(this.secondaryBidiagonal[])
this.mainTridiagonal == orig(this.mainTridiagonal)
this.mainTridiagonal[] == orig(this.mainTridiagonal[])
this.secondaryTridiagonal == orig(this.secondaryTridiagonal)
this.secondaryTridiagonal[] == orig(this.secondaryTridiagonal[])
this.eigenDecomposition == orig(this.eigenDecomposition)
this.eigenDecomposition.getClass().getName() == orig(this.eigenDecomposition.getClass().getName())
this.singularValues == orig(this.singularValues)
this.singularValues[] == orig(this.singularValues[])
this.cachedU == orig(this.cachedU)
this.cachedUt == orig(this.cachedUt)
this.cachedS == orig(this.cachedS)
this.cachedV.getClass().getName() == orig(this.cachedV.getClass().getName())
this.cachedVt.getClass().getName() == orig(this.cachedVt.getClass().getName())
this.m == 4
this.n == 4
this.transformer has only one value
this.transformer.householderVectors has only one value
this.transformer.householderVectors[] contains no nulls and has only one value, of length 4
this.transformer.main has only one value
this.transformer.main[] == [-9.219544457292887, 8.071323847840354, 4.903062379815523, 2.806585661782493]
this.transformer.secondary has only one value
this.transformer.secondary[] == [10.981803130633878, -5.621981191693385, 2.393765871225522]
this.transformer.secondary[] elements one of { -5.621981191693385, 2.393765871225522, 10.981803130633878 }
this.transformer.cachedV has only one value
this.mainBidiagonal has only one value
this.mainBidiagonal[] == [-9.219544457292887, 8.071323847840354, 4.903062379815523, 2.806585661782493]
this.secondaryBidiagonal has only one value
this.secondaryBidiagonal[] == [10.981803130633878, -5.621981191693385, 2.393765871225522]
this.secondaryBidiagonal[] elements one of { -5.621981191693385, 2.393765871225522, 10.981803130633878 }
this.mainTridiagonal has only one value
this.mainTridiagonal[] == [85.0, 185.74626865671647, 55.64669322011643, 13.607038123167158]
this.secondaryTridiagonal has only one value
this.secondaryTridiagonal[] == [-101.24722218411725, -45.37683086462475, 11.736783389292189]
this.secondaryTridiagonal[] elements one of { -101.24722218411725, -45.37683086462475, 11.736783389292189 }
this.eigenDecomposition has only one value
this.singularValues has only one value
this.singularValues[] == [16.0, 8.000000000000002, 4.0, 1.9999999999999993]
this.cachedV has only one value
this.cachedVt has only one value
return has only one value
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
size(this.transformer.householderVectors[]) == 4
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImplTest:::CLASS
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImplTest:::OBJECT
this.testSquare.getClass().getName() == double[][].class
this.testSquare[] elements != null
this.testNonSquare.getClass().getName() == double[][].class
this.testNonSquare[] elements != null
size(this.testSquare[]) == 2
size(this.testNonSquare[]) == 4
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImplTest.SingularValueDecompositionImplTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImplTest.SingularValueDecompositionImplTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImplTest.createTestMatrix(java.util.Random, int, int, double[]):::ENTER
rows one of { 4, 6 }
columns one of { 4, 6 }
singularValues[] == [123.456, 2.3, 1.001, 0.999]
size(singularValues[]) == 4
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImplTest.createTestMatrix(java.util.Random, int, int, double[]):::EXIT
this.testSquare == orig(this.testSquare)
this.testSquare.getClass().getName() == orig(this.testSquare.getClass().getName())
this.testSquare[] == orig(this.testSquare[])
this.testNonSquare == orig(this.testNonSquare)
this.testNonSquare.getClass().getName() == orig(this.testNonSquare.getClass().getName())
this.testNonSquare[] == orig(this.testNonSquare[])
singularValues[] == orig(singularValues[])
singularValues[] == [123.456, 2.3, 1.001, 0.999]
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImplTest.suite():::ENTER
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImplTest.suite():::EXIT
return.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImplTest.testHadamard():::ENTER
this has only one value
this.testSquare has only one value
this.testSquare[] contains no nulls and has only one value, of length 2
this.testNonSquare has only one value
this.testNonSquare[] contains no nulls and has only one value, of length 4
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImplTest.testHadamard():::EXIT
this.testSquare == orig(this.testSquare)
this.testSquare.getClass().getName() == orig(this.testSquare.getClass().getName())
this.testSquare[] == orig(this.testSquare[])
this.testNonSquare == orig(this.testNonSquare)
this.testNonSquare.getClass().getName() == orig(this.testNonSquare.getClass().getName())
this.testNonSquare[] == orig(this.testNonSquare[])
this.testSquare has only one value
this.testSquare[] contains no nulls and has only one value, of length 2
this.testNonSquare has only one value
this.testNonSquare[] contains no nulls and has only one value, of length 4
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImplTest.testMoreColumns():::ENTER
this has only one value
this.testSquare has only one value
this.testSquare[] contains no nulls and has only one value, of length 2
this.testNonSquare has only one value
this.testNonSquare[] contains no nulls and has only one value, of length 4
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImplTest.testMoreColumns():::EXIT
this.testSquare == orig(this.testSquare)
this.testSquare.getClass().getName() == orig(this.testSquare.getClass().getName())
this.testSquare[] == orig(this.testSquare[])
this.testNonSquare == orig(this.testNonSquare)
this.testNonSquare.getClass().getName() == orig(this.testNonSquare.getClass().getName())
this.testNonSquare[] == orig(this.testNonSquare[])
this.testSquare has only one value
this.testSquare[] contains no nulls and has only one value, of length 2
this.testNonSquare has only one value
this.testNonSquare[] contains no nulls and has only one value, of length 4
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImplTest.testMoreRows():::ENTER
this has only one value
this.testSquare has only one value
this.testSquare[] contains no nulls and has only one value, of length 2
this.testNonSquare has only one value
this.testNonSquare[] contains no nulls and has only one value, of length 4
===========================================================================
org.apache.commons.math.linear.SingularValueDecompositionImplTest.testMoreRows():::EXIT
this.testSquare == orig(this.testSquare)
this.testSquare.getClass().getName() == orig(this.testSquare.getClass().getName())
this.testSquare[] == orig(this.testSquare[])
this.testNonSquare == orig(this.testNonSquare)
this.testNonSquare.getClass().getName() == orig(this.testNonSquare.getClass().getName())
this.testNonSquare[] == orig(this.testNonSquare[])
this.testSquare has only one value
this.testSquare[] contains no nulls and has only one value, of length 2
this.testNonSquare has only one value
this.testNonSquare[] contains no nulls and has only one value, of length 4
===========================================================================
org.apache.commons.math.linear.TriDiagonalTransformer:::OBJECT
this.householderVectors.getClass().getName() == double[][].class
this.householderVectors[] elements != null
this.cachedQ.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
this.cachedQt.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
this.cachedT == null
===========================================================================
org.apache.commons.math.linear.TriDiagonalTransformer.TriDiagonalTransformer(org.apache.commons.math.linear.RealMatrix):::ENTER
===========================================================================
org.apache.commons.math.linear.TriDiagonalTransformer.TriDiagonalTransformer(org.apache.commons.math.linear.RealMatrix):::EXIT
this.cachedQ == null
this.cachedQt == null
===========================================================================
org.apache.commons.math.linear.TriDiagonalTransformer.getMainDiagonalRef():::ENTER
this.cachedQ == null
this.cachedQt == null
===========================================================================
org.apache.commons.math.linear.TriDiagonalTransformer.getMainDiagonalRef():::EXIT
this.householderVectors == orig(this.householderVectors)
this.householderVectors.getClass().getName() == orig(this.householderVectors.getClass().getName())
this.householderVectors[] == orig(this.householderVectors[])
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.cachedQ == orig(this.cachedQ)
this.cachedQt == orig(this.cachedQt)
this.cachedT == orig(this.cachedT)
this.cachedQ == null
this.cachedQt == null
===========================================================================
org.apache.commons.math.linear.TriDiagonalTransformer.getQ():::ENTER
size(this.householderVectors[]) one of { 5, 6 }
size(this.main[]) one of { 5, 6 }
size(this.secondary[]) one of { 4, 5 }
===========================================================================
org.apache.commons.math.linear.TriDiagonalTransformer.getQ():::EXIT
this.householderVectors == orig(this.householderVectors)
this.householderVectors.getClass().getName() == orig(this.householderVectors.getClass().getName())
this.householderVectors[] == orig(this.householderVectors[])
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.cachedQ.getClass().getName() == orig(this.cachedQ.getClass().getName())
this.cachedQt.getClass().getName() == orig(this.cachedQt.getClass().getName())
this.cachedT == orig(this.cachedT)
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
size(this.householderVectors[]) one of { 5, 6 }
size(this.main[]) one of { 5, 6 }
size(this.secondary[]) one of { 4, 5 }
===========================================================================
org.apache.commons.math.linear.TriDiagonalTransformer.getQT():::ENTER
this.cachedQ == null
this.cachedQt == null
size(this.householderVectors[]) one of { 5, 6 }
size(this.main[]) one of { 5, 6 }
size(this.secondary[]) one of { 4, 5 }
===========================================================================
org.apache.commons.math.linear.TriDiagonalTransformer.getQT():::EXIT
this.householderVectors == orig(this.householderVectors)
this.householderVectors.getClass().getName() == orig(this.householderVectors.getClass().getName())
this.householderVectors[] == orig(this.householderVectors[])
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.cachedQ == orig(this.cachedQ)
this.cachedT == orig(this.cachedT)
this.cachedQ == null
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
size(this.householderVectors[]) one of { 5, 6 }
size(this.main[]) one of { 5, 6 }
size(this.secondary[]) one of { 4, 5 }
===========================================================================
org.apache.commons.math.linear.TriDiagonalTransformer.getSecondaryDiagonalRef():::ENTER
this.cachedQ == null
this.cachedQt == null
===========================================================================
org.apache.commons.math.linear.TriDiagonalTransformer.getSecondaryDiagonalRef():::EXIT
this.householderVectors == orig(this.householderVectors)
this.householderVectors.getClass().getName() == orig(this.householderVectors.getClass().getName())
this.householderVectors[] == orig(this.householderVectors[])
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.cachedQ == orig(this.cachedQ)
this.cachedQt == orig(this.cachedQt)
this.cachedT == orig(this.cachedT)
this.cachedQ == null
this.cachedQt == null
===========================================================================
org.apache.commons.math.linear.TriDiagonalTransformer.transform():::ENTER
this.main[] elements == 0.0
this.secondary[] elements == 0.0
this.cachedQ == null
this.cachedQt == null
===========================================================================
org.apache.commons.math.linear.TriDiagonalTransformer.transform():::EXIT
this.householderVectors == orig(this.householderVectors)
this.householderVectors.getClass().getName() == orig(this.householderVectors.getClass().getName())
this.householderVectors[] == orig(this.householderVectors[])
this.main == orig(this.main)
this.secondary == orig(this.secondary)
this.cachedQ == orig(this.cachedQ)
this.cachedQt == orig(this.cachedQt)
this.cachedT == orig(this.cachedT)
size(this.main[]) == orig(size(this.main[]))
size(this.secondary[]) == orig(size(this.secondary[]))
this.cachedQ == null
this.cachedQt == null
===========================================================================
org.apache.commons.math.util.CompositeFormat:::CLASS
===========================================================================
org.apache.commons.math.util.CompositeFormat:::OBJECT
this has only one value
this.getClass().getName() == org.apache.commons.math.linear.RealVectorFormat.class
===========================================================================
org.apache.commons.math.util.CompositeFormat.CompositeFormat():::EXIT
===========================================================================
org.apache.commons.math.util.CompositeFormat.getDefaultNumberFormat(java.util.Locale):::ENTER
locale has only one value
===========================================================================
org.apache.commons.math.util.CompositeFormat.getDefaultNumberFormat(java.util.Locale):::EXIT
return has only one value
return.getClass().getName() == java.text.DecimalFormat.class
