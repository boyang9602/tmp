===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix$5:::OBJECT
this.val$out.getClass().getName() == org.apache.commons.math.linear.AbstractRealMatrix.this.getClass().getName()
this has only one value
this.val$out has only one value
this.val$out.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
org.apache.commons.math.linear.AbstractRealMatrix.this has only one value
org.apache.commons.math.linear.AbstractRealMatrix.this.lu == null
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix$5.(org.apache.commons.math.linear.AbstractRealMatrix, org.apache.commons.math.linear.RealMatrix):::ENTER
org.apache.commons.math.linear.AbstractRealMatrix.this.getClass().getName() == $hidden$2.getClass().getName()
org.apache.commons.math.linear.AbstractRealMatrix.this has only one value
org.apache.commons.math.linear.AbstractRealMatrix.this.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
org.apache.commons.math.linear.AbstractRealMatrix.this.lu == null
$hidden$2 has only one value
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix$5.(org.apache.commons.math.linear.AbstractRealMatrix, org.apache.commons.math.linear.RealMatrix):::EXIT
this.val$out == orig($hidden$2)
this.val$out.getClass().getName() == orig(org.apache.commons.math.linear.AbstractRealMatrix.this.getClass().getName())
this.val$out.getClass().getName() == orig($hidden$2.getClass().getName())
org.apache.commons.math.linear.AbstractRealMatrix.this == orig(org.apache.commons.math.linear.AbstractRealMatrix.this)
org.apache.commons.math.linear.AbstractRealMatrix.this.lu == orig(org.apache.commons.math.linear.AbstractRealMatrix.this.lu)
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix$5.visit(int, int, double):::ENTER
row >= 0
column >= 0
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix$5.visit(int, int, double):::EXIT
this.val$out == orig(this.val$out)
this.val$out.getClass().getName() == orig(this.val$out.getClass().getName())
this.val$out.getClass().getName() == orig(org.apache.commons.math.linear.AbstractRealMatrix.this.getClass().getName())
org.apache.commons.math.linear.AbstractRealMatrix.this == orig(org.apache.commons.math.linear.AbstractRealMatrix.this)
org.apache.commons.math.linear.AbstractRealMatrix.this.lu == orig(org.apache.commons.math.linear.AbstractRealMatrix.this.lu)
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix:::OBJECT
this.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
this.lu == null
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.AbstractRealMatrix():::EXIT
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.AbstractRealMatrix(int, int):::ENTER
rowDimension == columnDimension
rowDimension == 6
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.AbstractRealMatrix(int, int):::EXIT
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.transpose():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.transpose():::EXIT
this.lu == orig(this.lu)
return.getClass().getName() == orig(this.getClass().getName())
return has only one value
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor):::ENTER
this has only one value
visitor has only one value
visitor.getClass().getName() == org.apache.commons.math.linear.AbstractRealMatrix$5.class
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor):::EXIT
this.lu == orig(this.lu)
return == 0.0
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix:::CLASS
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix:::OBJECT
this.data.getClass().getName() == double[][].class
this.data[] elements != null
this.lu == null
size(this.data[]) == 6
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.Array2DRowRealMatrix(double[][]):::ENTER
d.getClass().getName() == double[][].class
size(d[]) == 6
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.Array2DRowRealMatrix(double[][]):::EXIT
this.data.getClass().getName() == orig(d.getClass().getName())
d[] == orig(d[])
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.Array2DRowRealMatrix(double[][], boolean):::ENTER
d.getClass().getName() == double[][].class
copyArray == false
size(d[]) == 6
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.Array2DRowRealMatrix(double[][], boolean):::EXIT
this.data == orig(d)
this.data.getClass().getName() == orig(d.getClass().getName())
d[] == orig(d[])
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.Array2DRowRealMatrix(int, int):::ENTER
rowDimension == columnDimension
rowDimension == 6
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.Array2DRowRealMatrix(int, int):::EXIT
orig(rowDimension) == size(this.data[])
this.data has only one value
this.data[] contains no nulls and has only one value, of length 6
this.data[orig(rowDimension)-1] has only one value
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.copyIn(double[][]):::ENTER
this.data == null
in.getClass().getName() == double[][].class
size(in[]) == 6
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.copyIn(double[][]):::EXIT
this.data.getClass().getName() == orig(in.getClass().getName())
this.lu == orig(this.lu)
in[] == orig(in[])
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.createMatrix(int, int):::ENTER
rowDimension == size(this.data[])
columnDimension == size(this.data[])
this has only one value
this.data has only one value
this.data[] contains no nulls and has only one value, of length 6
this.data[rowDimension-1] has only one value
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.createMatrix(int, int):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
orig(rowDimension) == orig(columnDimension)
orig(rowDimension) == size(this.data[])
this.data has only one value
this.data[] contains no nulls and has only one value, of length 6
return has only one value
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
orig(rowDimension) == 6
this.data[orig(rowDimension)-1] has only one value
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.getColumnDimension():::ENTER
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.getColumnDimension():::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
return == size(this.data[])
return == orig(size(this.data[]))
return == 6
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.getRowDimension():::ENTER
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.getRowDimension():::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
return == size(this.data[])
return == orig(size(this.data[]))
return == 6
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.multiply(org.apache.commons.math.linear.Array2DRowRealMatrix):::ENTER
this.data.getClass().getName() == m.data.getClass().getName()
m.lu == null
size(m.data[]) == 6
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.multiply(org.apache.commons.math.linear.Array2DRowRealMatrix):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == m.data.getClass().getName()
this.data.getClass().getName() == return.data.getClass().getName()
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data.getClass().getName() == orig(m.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
m.data == orig(m.data)
m.data[] == orig(m.data[])
m.lu == orig(m.lu)
m.lu == null
return.lu == null
size(m.data[]) == 6
size(return.data[]) == 6
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.multiply(org.apache.commons.math.linear.RealMatrix):::ENTER
m.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.multiply(org.apache.commons.math.linear.RealMatrix):::EXIT254
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.multiply(org.apache.commons.math.linear.RealMatrix):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
return.getClass().getName() == orig(m.getClass().getName())
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.setEntry(int, int, double):::ENTER
this has only one value
this.data has only one value
this.data != null
this.data[] contains no nulls and has only one value, of length 6
row >= 0
column >= 0
value != 0
row <= size(this.data[])-1
column <= size(this.data[])-1
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.setEntry(int, int, double):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
this.data has only one value
this.data != null
this.data[] contains no nulls and has only one value, of length 6
orig(row) <= size(this.data[])-1
orig(column) <= size(this.data[])-1
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.setSubMatrix(double[][], int, int):::ENTER
this.data == null
subMatrix.getClass().getName() == double[][].class
row == 0
column == 0
size(subMatrix[]) == 6
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.setSubMatrix(double[][], int, int):::EXIT
this.data.getClass().getName() == orig(subMatrix.getClass().getName())
this.lu == orig(this.lu)
subMatrix[] == orig(subMatrix[])
size(this.data[]) == orig(size(subMatrix[]))
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor):::ENTER
this has only one value
this.data has only one value
this.data[] contains no nulls and has only one value, of length 6
visitor has only one value
visitor.getClass().getName() == org.apache.commons.math.linear.AbstractRealMatrix$5.class
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
this.data has only one value
this.data[] contains no nulls and has only one value, of length 6
return == 0.0
===========================================================================
org.apache.commons.math.linear.ArrayRealVector:::CLASS
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == "{"
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == "}"
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == "; "
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == "{"
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == "}"
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == "; "
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == "{"
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == "}"
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == ";"
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math.linear.ArrayRealVector:::OBJECT
size(this.data[]) == 7
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.ArrayRealVector(double[]):::ENTER
size(d[]) == 7
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.ArrayRealVector(double[]):::EXIT
d[] == orig(d[])
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.ArrayRealVector(double[], boolean):::ENTER
copyArray == false
size(d[]) == 7
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.ArrayRealVector(double[], boolean):::EXIT
d[] == orig(d[])
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector, boolean):::ENTER
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == "{"
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == "}"
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == "; "
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == "{"
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == "}"
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == "; "
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == "{"
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == "}"
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == ";"
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == java.text.DecimalFormat.class
v.data[] elements != 0
deep == true
size(v.data[]) == 7
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector, boolean):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
v.data == orig(v.data)
v.data[] == orig(v.data[])
this.data[] elements != 0
v.data[] elements != 0
size(v.data[]) == 7
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.add(double[]):::ENTER
this has only one value
this.data has only one value
this.data[] == [-0.270356342026904, 0.852811091326997, 0.399639490702077, 0.19879465781399, 0.019739323307666, 1.06983022327E-4, -1.216636321E-6]
v has only one value
v[] == [0.27035635178629003, -0.8528110873897102, -0.3996394924689157, -0.19879465786333433, -0.01973932347696581, -1.0698301941542803E-4, 1.2166363024683884E-6]
size(v[]) == 7
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.add(double[]):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
v[] == orig(v[])
this.data has only one value
this.data[] == [-0.270356342026904, 0.852811091326997, 0.399639490702077, 0.19879465781399, 0.019739323307666, 1.06983022327E-4, -1.216636321E-6]
v[] == [0.27035635178629003, -0.8528110873897102, -0.3996394924689157, -0.19879465786333433, -0.01973932347696581, -1.0698301941542803E-4, 1.2166363024683884E-6]
return has only one value
return.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.add(org.apache.commons.math.linear.ArrayRealVector):::ENTER
this has only one value
this.data has only one value
this.data[] == [-0.270356342026904, 0.852811091326997, 0.399639490702077, 0.19879465781399, 0.019739323307666, 1.06983022327E-4, -1.216636321E-6]
v has only one value
v.data has only one value
v.data[] == [0.27035635178629003, -0.8528110873897102, -0.3996394924689157, -0.19879465786333433, -0.01973932347696581, -1.0698301941542803E-4, 1.2166363024683884E-6]
size(v.data[]) == 7
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.add(org.apache.commons.math.linear.ArrayRealVector):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
v.data == orig(v.data)
v.data[] == orig(v.data[])
this.data has only one value
this.data[] == [-0.270356342026904, 0.852811091326997, 0.399639490702077, 0.19879465781399, 0.019739323307666, 1.06983022327E-4, -1.216636321E-6]
v.data has only one value
v.data[] == [0.27035635178629003, -0.8528110873897102, -0.3996394924689157, -0.19879465786333433, -0.01973932347696581, -1.0698301941542803E-4, 1.2166363024683884E-6]
return has only one value
return.data has only one value
return.data[] == [9.759386021546135E-9, 3.937286718880273E-9, -1.7668387308766853E-9, -4.934433417425055E-11, -1.692998102820198E-10, 2.9115719709336962E-12, -1.853161170727708E-14]
size(v.data[]) == 7
size(return.data[]) == 7
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.add(org.apache.commons.math.linear.RealVector):::ENTER
this has only one value
this.data has only one value
this.data[] == [-0.270356342026904, 0.852811091326997, 0.399639490702077, 0.19879465781399, 0.019739323307666, 1.06983022327E-4, -1.216636321E-6]
v has only one value
v.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.add(org.apache.commons.math.linear.RealVector):::EXIT232
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.add(org.apache.commons.math.linear.RealVector):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
return.getClass().getName() == orig(v.getClass().getName())
this.data has only one value
this.data[] == [-0.270356342026904, 0.852811091326997, 0.399639490702077, 0.19879465781399, 0.019739323307666, 1.06983022327E-4, -1.216636321E-6]
return has only one value
return.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.checkVectorDimensions(int):::ENTER
this.data[] elements != 0
n == 7
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.checkVectorDimensions(int):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
this.data[] elements != 0
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.copy():::ENTER
this.data[] elements != 0
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.copy():::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
this.data[] elements != 0
return.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() != return.getClass().getName()
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.dotProduct(double[]):::ENTER
size(v[]) == 7
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.dotProduct(double[]):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
v[] == orig(v[])
return one of { -1.0000000000000002, 1.0 }
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.dotProduct(org.apache.commons.math.linear.ArrayRealVector):::ENTER
size(v.data[]) == 7
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.dotProduct(org.apache.commons.math.linear.ArrayRealVector):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
v.data == orig(v.data)
v.data[] == orig(v.data[])
return one of { -1.0000000000000002, 1.0 }
size(v.data[]) == 7
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.dotProduct(org.apache.commons.math.linear.RealVector):::ENTER
v.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() != v.getClass().getName()
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.dotProduct(org.apache.commons.math.linear.RealVector):::EXIT870
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.dotProduct(org.apache.commons.math.linear.RealVector):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
return one of { -1.0000000000000002, 1.0 }
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() != orig(v.getClass().getName())
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.getNorm():::ENTER
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.getNorm():::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.subtract(double[]):::ENTER
size(v[]) == 7
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.subtract(double[]):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
v[] == orig(v[])
return.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.subtract(org.apache.commons.math.linear.ArrayRealVector):::ENTER
size(v.data[]) == 7
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.subtract(org.apache.commons.math.linear.ArrayRealVector):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
v.data == orig(v.data)
v.data[] == orig(v.data[])
size(v.data[]) == 7
size(return.data[]) == 7
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.subtract(org.apache.commons.math.linear.RealVector):::ENTER
v.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.subtract(org.apache.commons.math.linear.RealVector):::EXIT269
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.subtract(org.apache.commons.math.linear.RealVector):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
return.getClass().getName() == orig(v.getClass().getName())
return.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
===========================================================================
org.apache.commons.math.linear.DefaultRealMatrixPreservingVisitor:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math.linear.DefaultRealMatrixPreservingVisitor.DefaultRealMatrixPreservingVisitor():::EXIT
===========================================================================
org.apache.commons.math.linear.DefaultRealMatrixPreservingVisitor.end():::ENTER
===========================================================================
org.apache.commons.math.linear.DefaultRealMatrixPreservingVisitor.end():::EXIT
return == 0.0
===========================================================================
org.apache.commons.math.linear.DefaultRealMatrixPreservingVisitor.start(int, int, int, int, int, int):::ENTER
rows == columns
endRow == endColumn
rows == 6
startRow == 0
endRow == 5
startColumn == 0
===========================================================================
org.apache.commons.math.linear.DefaultRealMatrixPreservingVisitor.start(int, int, int, int, int, int):::EXIT
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl:::CLASS
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl:::OBJECT
this has only one value
this.splitTolerance == 2.2250738585072014E-308
this.main has only one value
this.main[] == [7484.860960227216, 18405.28129035345, 13855.225609560746, 10016.708722343366, 559.8117399576674, 6750.190788301587, 71.21428769782159]
this.secondary has only one value
this.secondary[] == [-4175.088570476366, 1975.7955858241994, 5193.178422374075, 1995.286659169179, 75.34535882933804, -234.0808002076056]
this.squaredSecondary has only one value
this.squaredSecondary[] == [1.7431364571322385E7, 3903768.1969623915, 2.6969102126611687E7, 3981168.852258504, 5676.9230971217075, 54793.821025832964]
this.transformer == null
this.lowerSpectra one of { -1510.8202780408499, 0.0 }
this.upperSpectra one of { 0.0, 24556.165446654017 }
this.minPivot == 6.000824412933464E-301
this.sigma one of { 0.0, 14766.945301487023 }
this.sigmaLow == 7.156710116996366E-13
this.tau == 1.4217166778255163E-25
this.pingPong == 0
this.qMax == 0.0
this.eMin one of { 0.0, 5824.761427100876 }
this.tType one of { -2, 0 }
this.dMin == 0.0
this.dMin1 one of { 0.0, 5824.760327054657 }
this.dMin2 one of { 0.0, 5828.535449327415 }
this.dN == 0.0
this.dN1 one of { 0.0, 5824.760327054657 }
this.dN2 one of { 0.0, 5828.535449327415 }
this.g == 0.0
this.realEigenvalues[] == [20654.745078765827, 16828.208305675485, 6893.155662742018, 6757.0828856287135, 5887.799814272428, 64.30907645837578, 57.99257489901356]
this.realEigenvalues[] sorted by >
this.imagEigenvalues[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.imagEigenvalues[] elements == 0.0
this.eigenvectors.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector[].class
this.eigenvectors[] contains no nulls and has only one value, of length 7
this.eigenvectors[] elements != null
this.eigenvectors[].getClass().getName() == [org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector]
this.eigenvectors[].getClass().getName() elements == org.apache.commons.math.linear.ArrayRealVector.class
this.eigenvectors[].data contains no nulls and has only one value, of length 7
this.eigenvectors[].data elements != null
this.cachedV == null
this.cachedD == null
this.cachedVt == null
size(this.main[]) == 7
size(this.secondary[]) == 6
size(this.squaredSecondary[]) == 6
size(this.work[]) == 42
size(this.realEigenvalues[]) == 7
size(this.imagEigenvalues[]) == 7
size(this.eigenvectors[]) == 7
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.EigenDecompositionImpl(double[], double[], double):::ENTER
main has only one value
main[] == [7484.860960227216, 18405.28129035345, 13855.225609560746, 10016.708722343366, 559.8117399576674, 6750.190788301587, 71.21428769782159]
secondary has only one value
secondary[] == [-4175.088570476366, 1975.7955858241994, 5193.178422374075, 1995.286659169179, 75.34535882933804, -234.0808002076056]
splitTolerance == 2.2250738585072014E-308
size(main[]) == 7
size(secondary[]) == 6
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.EigenDecompositionImpl(double[], double[], double):::EXIT
main[] == orig(main[])
secondary[] == orig(secondary[])
this.lowerSpectra == -1510.8202780408499
this.upperSpectra == 24556.165446654017
this.sigma == 14766.945301487023
this.work has only one value
this.work[] == [20596.752540860438, 5829.8072393734155, 0.0011007591775693802, 0.0011000462196532254, 20590.436039301076, 5823.490737814053, 3.363174190491897E-22, 8.20888855262558E-51, 14766.945301487023, 0.0, 5824.762527793236, 5824.761427100876, 13897.662230130738, 3.3050819026048117E-15, 9.625379077747182E-4, 9.786401044576325E-4, 13761.589453017434, 0.0, 0.2892426098706863, 0.0433586943885876, 3826.5368100839655, 3.3116380801178076E-27, 0.04323172828727436, 0.04469304434453322, 3.699362535372617E-5, 6.473253748724304E-24, 0.23332877548053413, 0.4346452099146816, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272]
this.eMin == 5824.761427100876
this.tType == -2
this.dMin1 == 5824.760327054657
this.dMin2 == 5828.535449327415
this.dN1 == 5824.760327054657
this.dN2 == 5828.535449327415
this.realEigenvalues has only one value
this.imagEigenvalues has only one value
this.eigenvectors == null
main[] == [7484.860960227216, 18405.28129035345, 13855.225609560746, 10016.708722343366, 559.8117399576674, 6750.190788301587, 71.21428769782159]
secondary[] == [-4175.088570476366, 1975.7955858241994, 5193.178422374075, 1995.286659169179, 75.34535882933804, -234.0808002076056]
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.computeGershgorinCircles():::ENTER
this.lowerSpectra == 0.0
this.upperSpectra == 0.0
this.sigma == 0.0
this.work has only one value
this.work[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.work[] elements == 0.0
this.eMin == 0.0
this.tType == 0
this.dMin1 == 0.0
this.dMin2 == 0.0
this.dN1 == 0.0
this.dN2 == 0.0
this.realEigenvalues == null
this.imagEigenvalues == null
this.eigenvectors == null
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.computeGershgorinCircles():::EXIT
this.splitTolerance == orig(this.splitTolerance)
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.squaredSecondary == orig(this.squaredSecondary)
this.squaredSecondary[] == orig(this.squaredSecondary[])
this.transformer == orig(this.transformer)
this.minPivot == orig(this.minPivot)
this.sigma == orig(this.sigma)
this.sigmaLow == orig(this.sigmaLow)
this.tau == orig(this.tau)
this.work == orig(this.work)
this.pingPong == orig(this.pingPong)
this.qMax == orig(this.qMax)
this.eMin == orig(this.eMin)
this.tType == orig(this.tType)
this.dMin == orig(this.dMin)
this.dMin1 == orig(this.dMin1)
this.dMin2 == orig(this.dMin2)
this.dN == orig(this.dN)
this.dN1 == orig(this.dN1)
this.dN2 == orig(this.dN2)
this.g == orig(this.g)
this.realEigenvalues == orig(this.realEigenvalues)
this.imagEigenvalues == orig(this.imagEigenvalues)
this.eigenvectors == orig(this.eigenvectors)
this.cachedV == orig(this.cachedV)
this.cachedD == orig(this.cachedD)
this.cachedVt == orig(this.cachedVt)
size(this.work[]) == orig(size(this.work[]))
this.lowerSpectra == -1510.8202780408499
this.upperSpectra == 24556.165446654017
this.sigma == 0.0
this.work has only one value
this.work[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272]
this.eMin == 0.0
this.tType == 0
this.dMin1 == 0.0
this.dMin2 == 0.0
this.dN1 == 0.0
this.dN2 == 0.0
this.realEigenvalues == null
this.imagEigenvalues == null
this.eigenvectors == null
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.decompose():::ENTER
this.lowerSpectra == 0.0
this.upperSpectra == 0.0
this.sigma == 0.0
this.work == null
this.eMin == 0.0
this.tType == 0
this.dMin1 == 0.0
this.dMin2 == 0.0
this.dN1 == 0.0
this.dN2 == 0.0
this.realEigenvalues == null
this.imagEigenvalues == null
this.eigenvectors == null
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.decompose():::EXIT
this.splitTolerance == orig(this.splitTolerance)
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.squaredSecondary == orig(this.squaredSecondary)
this.squaredSecondary[] == orig(this.squaredSecondary[])
this.transformer == orig(this.transformer)
this.minPivot == orig(this.minPivot)
this.sigmaLow == orig(this.sigmaLow)
this.tau == orig(this.tau)
this.pingPong == orig(this.pingPong)
this.qMax == orig(this.qMax)
this.dMin == orig(this.dMin)
this.dN == orig(this.dN)
this.g == orig(this.g)
this.eigenvectors == orig(this.eigenvectors)
this.cachedV == orig(this.cachedV)
this.cachedD == orig(this.cachedD)
this.cachedVt == orig(this.cachedVt)
this.lowerSpectra == -1510.8202780408499
this.upperSpectra == 24556.165446654017
this.sigma == 14766.945301487023
this.work has only one value
this.work[] == [20596.752540860438, 5829.8072393734155, 0.0011007591775693802, 0.0011000462196532254, 20590.436039301076, 5823.490737814053, 3.363174190491897E-22, 8.20888855262558E-51, 14766.945301487023, 0.0, 5824.762527793236, 5824.761427100876, 13897.662230130738, 3.3050819026048117E-15, 9.625379077747182E-4, 9.786401044576325E-4, 13761.589453017434, 0.0, 0.2892426098706863, 0.0433586943885876, 3826.5368100839655, 3.3116380801178076E-27, 0.04323172828727436, 0.04469304434453322, 3.699362535372617E-5, 6.473253748724304E-24, 0.23332877548053413, 0.4346452099146816, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272]
this.eMin == 5824.761427100876
this.tType == -2
this.dMin1 == 5824.760327054657
this.dMin2 == 5828.535449327415
this.dN1 == 5824.760327054657
this.dN2 == 5828.535449327415
this.realEigenvalues has only one value
this.imagEigenvalues has only one value
this.eigenvectors == null
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.getEigenvector(int):::ENTER
this.lowerSpectra == -1510.8202780408499
this.upperSpectra == 24556.165446654017
this.sigma == 14766.945301487023
this.work has only one value
this.work[] one of { [-57.99257489901356, 7426.868385328203, -0.562160032177797, -6.903311344785834E-8, -6.903311344785834E-8, -1.7788528937842032, -76.1776171014144, 16000.220790330291, 0.12348552008846456, 18.18504218058473, 2347.0679251023307, 8.098115465562014, -59.148678274206915, 13553.25088915774, 0.38316847115465763, 1.1561033748606846, 243.98214550366112, 2.609818070329686, -66.63893593592906, 7968.853910909922, 0.2503856491129159, 8.64636103686665, 1989.8622365343824, 3.9938391179481623, -62.13572118286173, 2.2280197362376413, 33.81718644762565, 4.143146283845105, 499.5911453224132, 0.029570762829430584, -2517.7599830890617, 4144.230165907591, -0.05648354237978035, 2459.767408186551, 2547.9680474914853, -17.704272038695972, -62.989445000626816, -1.1155520951433573E-11, 17205.17380388662, 4.996870101602099, 13.221712798808026, 305.2950879054272], [20596.752540860438, 5829.8072393734155, 0.0011007591775693802, 0.0011000462196532254, 20590.436039301076, 5823.490737814053, 3.363174190491897E-22, 8.20888855262558E-51, 14766.945301487023, 0.0, 5824.762527793236, 5824.761427100876, 13897.662230130738, 3.3050819026048117E-15, 9.625379077747182E-4, 9.786401044576325E-4, 13761.589453017434, 0.0, 0.2892426098706863, 0.0433586943885876, 3826.5368100839655, 3.3116380801178076E-27, 0.04323172828727436, 0.04469304434453322, 3.699362535372617E-5, 6.473253748724304E-24, 0.23332877548053413, 0.4346452099146816, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272] }
this.eMin == 5824.761427100876
this.tType == -2
this.dMin1 == 5824.760327054657
this.dMin2 == 5828.535449327415
this.dN1 == 5824.760327054657
this.dN2 == 5828.535449327415
this.realEigenvalues has only one value
this.imagEigenvalues has only one value
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.getEigenvector(int):::EXIT
this.splitTolerance == orig(this.splitTolerance)
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.squaredSecondary == orig(this.squaredSecondary)
this.squaredSecondary[] == orig(this.squaredSecondary[])
this.transformer == orig(this.transformer)
this.lowerSpectra == orig(this.lowerSpectra)
this.upperSpectra == orig(this.upperSpectra)
this.minPivot == orig(this.minPivot)
this.sigma == orig(this.sigma)
this.sigmaLow == orig(this.sigmaLow)
this.tau == orig(this.tau)
this.work == orig(this.work)
this.pingPong == orig(this.pingPong)
this.qMax == orig(this.qMax)
this.eMin == orig(this.eMin)
this.tType == orig(this.tType)
this.dMin == orig(this.dMin)
this.dMin1 == orig(this.dMin1)
this.dMin2 == orig(this.dMin2)
this.dN == orig(this.dN)
this.dN1 == orig(this.dN1)
this.dN2 == orig(this.dN2)
this.g == orig(this.g)
this.realEigenvalues == orig(this.realEigenvalues)
this.realEigenvalues[] == orig(this.realEigenvalues[])
this.imagEigenvalues == orig(this.imagEigenvalues)
this.imagEigenvalues[] == orig(this.imagEigenvalues[])
this.eigenvectors.getClass().getName() == orig(this.eigenvectors.getClass().getName())
this.eigenvectors[].getClass().getName() == orig(this.eigenvectors[].getClass().getName())
this.cachedV == orig(this.cachedV)
this.cachedD == orig(this.cachedD)
this.cachedVt == orig(this.cachedVt)
size(this.work[]) == orig(size(this.work[]))
this.lowerSpectra == -1510.8202780408499
this.upperSpectra == 24556.165446654017
this.sigma == 14766.945301487023
this.work has only one value
this.work[] == [-57.99257489901356, 7426.868385328203, -0.562160032177797, -6.903311344785834E-8, -6.903311344785834E-8, -1.7788528937842032, -76.1776171014144, 16000.220790330291, 0.12348552008846456, 18.18504218058473, 2347.0679251023307, 8.098115465562014, -59.148678274206915, 13553.25088915774, 0.38316847115465763, 1.1561033748606846, 243.98214550366112, 2.609818070329686, -66.63893593592906, 7968.853910909922, 0.2503856491129159, 8.64636103686665, 1989.8622365343824, 3.9938391179481623, -62.13572118286173, 2.2280197362376413, 33.81718644762565, 4.143146283845105, 499.5911453224132, 0.029570762829430584, -2517.7599830890617, 4144.230165907591, -0.05648354237978035, 2459.767408186551, 2547.9680474914853, -17.704272038695972, -62.989445000626816, -1.1155520951433573E-11, 17205.17380388662, 4.996870101602099, 13.221712798808026, 305.2950879054272]
this.eMin == 5824.761427100876
this.tType == -2
this.dMin1 == 5824.760327054657
this.dMin2 == 5828.535449327415
this.dN1 == 5824.760327054657
this.dN2 == 5828.535449327415
this.realEigenvalues has only one value
this.imagEigenvalues has only one value
this.eigenvectors has only one value
return.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
this.eigenvectors[] == orig(this.eigenvectors[]) (elementwise)
this.eigenvectors[].getClass().getName() == orig(this.eigenvectors[].getClass().getName()) (elementwise)
this.eigenvectors[].data == orig(this.eigenvectors[].data) (elementwise)
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.getRealEigenvalues():::ENTER
this.lowerSpectra == -1510.8202780408499
this.upperSpectra == 24556.165446654017
this.sigma == 14766.945301487023
this.work has only one value
this.work[] == [20596.752540860438, 5829.8072393734155, 0.0011007591775693802, 0.0011000462196532254, 20590.436039301076, 5823.490737814053, 3.363174190491897E-22, 8.20888855262558E-51, 14766.945301487023, 0.0, 5824.762527793236, 5824.761427100876, 13897.662230130738, 3.3050819026048117E-15, 9.625379077747182E-4, 9.786401044576325E-4, 13761.589453017434, 0.0, 0.2892426098706863, 0.0433586943885876, 3826.5368100839655, 3.3116380801178076E-27, 0.04323172828727436, 0.04469304434453322, 3.699362535372617E-5, 6.473253748724304E-24, 0.23332877548053413, 0.4346452099146816, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272]
this.eMin == 5824.761427100876
this.tType == -2
this.dMin1 == 5824.760327054657
this.dMin2 == 5828.535449327415
this.dN1 == 5824.760327054657
this.dN2 == 5828.535449327415
this.realEigenvalues has only one value
this.imagEigenvalues has only one value
this.eigenvectors == null
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImpl.getRealEigenvalues():::EXIT
this.splitTolerance == orig(this.splitTolerance)
this.main == orig(this.main)
this.main[] == orig(this.main[])
this.secondary == orig(this.secondary)
this.secondary[] == orig(this.secondary[])
this.squaredSecondary == orig(this.squaredSecondary)
this.squaredSecondary[] == orig(this.squaredSecondary[])
this.transformer == orig(this.transformer)
this.lowerSpectra == orig(this.lowerSpectra)
this.upperSpectra == orig(this.upperSpectra)
this.minPivot == orig(this.minPivot)
this.sigma == orig(this.sigma)
this.sigmaLow == orig(this.sigmaLow)
this.tau == orig(this.tau)
this.work == orig(this.work)
this.work[] == orig(this.work[])
this.pingPong == orig(this.pingPong)
this.qMax == orig(this.qMax)
this.eMin == orig(this.eMin)
this.tType == orig(this.tType)
this.dMin == orig(this.dMin)
this.dMin1 == orig(this.dMin1)
this.dMin2 == orig(this.dMin2)
this.dN == orig(this.dN)
this.dN1 == orig(this.dN1)
this.dN2 == orig(this.dN2)
this.g == orig(this.g)
this.realEigenvalues == orig(this.realEigenvalues)
this.realEigenvalues[] == orig(this.realEigenvalues[])
this.imagEigenvalues == orig(this.imagEigenvalues)
this.imagEigenvalues[] == orig(this.imagEigenvalues[])
this.eigenvectors == orig(this.eigenvectors)
this.cachedV == orig(this.cachedV)
this.cachedD == orig(this.cachedD)
this.cachedVt == orig(this.cachedVt)
this.lowerSpectra == -1510.8202780408499
this.upperSpectra == 24556.165446654017
this.sigma == 14766.945301487023
this.work has only one value
this.work[] == [20596.752540860438, 5829.8072393734155, 0.0011007591775693802, 0.0011000462196532254, 20590.436039301076, 5823.490737814053, 3.363174190491897E-22, 8.20888855262558E-51, 14766.945301487023, 0.0, 5824.762527793236, 5824.761427100876, 13897.662230130738, 3.3050819026048117E-15, 9.625379077747182E-4, 9.786401044576325E-4, 13761.589453017434, 0.0, 0.2892426098706863, 0.0433586943885876, 3826.5368100839655, 3.3116380801178076E-27, 0.04323172828727436, 0.04469304434453322, 3.699362535372617E-5, 6.473253748724304E-24, 0.23332877548053413, 0.4346452099146816, 3309.7723897508504, 12254.397134052884, 6686.251601362472, 2828.243640800112, -1510.8202780408499, 6440.764629264644, -162.866512509784, 11659.949530703583, 24556.165446654017, 21024.19961775902, 17205.17380388662, 2630.4437579561845, 7059.616947338531, 305.2950879054272]
this.eMin == 5824.761427100876
this.tType == -2
this.dMin1 == 5824.760327054657
this.dMin2 == 5828.535449327415
this.dN1 == 5824.760327054657
this.dN2 == 5828.535449327415
this.realEigenvalues has only one value
this.imagEigenvalues has only one value
this.eigenvectors == null
return has only one value
return[] == [20654.745078765827, 16828.208305675485, 6893.155662742018, 6757.0828856287135, 5887.799814272428, 64.30907645837578, 57.99257489901356]
size(return[]) == 7
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest:::OBJECT
this.refValues[] == [2.003, 2.002, 2.001, 1.001, 1.0, 0.001]
this.matrix.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
size(this.refValues[]) == 6
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.EigenDecompositionImplTest(java.lang.String):::ENTER
name != null
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.EigenDecompositionImplTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
this.refValues == null
this.matrix == null
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.createDiagonalMatrix(double[], int, int):::ENTER
rows == columns
rows == size(diagonal[])
diagonal has only one value
diagonal[] == [2.003, 2.002, 2.001, 1.001, 1.0, 0.001]
rows == 6
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.createDiagonalMatrix(double[], int, int):::EXIT
diagonal[] == orig(diagonal[])
diagonal[] == [2.003, 2.002, 2.001, 1.001, 1.0, 0.001]
return has only one value
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.createOrthogonalMatrix(java.util.Random, int):::ENTER
r has only one value
size == 6
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.createOrthogonalMatrix(java.util.Random, int):::EXIT
return has only one value
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.createTestMatrix(java.util.Random, double[]):::ENTER
r has only one value
eigenValues has only one value
eigenValues[] == [2.003, 2.002, 2.001, 1.001, 1.0, 0.001]
size(eigenValues[]) == 6
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.createTestMatrix(java.util.Random, double[]):::EXIT
eigenValues[] == orig(eigenValues[])
eigenValues[] == [2.003, 2.002, 2.001, 1.001, 1.0, 0.001]
return has only one value
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.setUp():::ENTER
this has only one value
this.refValues == null
this.matrix == null
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.setUp():::EXIT
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.suite():::EXIT
return has only one value
return.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.tearDown():::ENTER
this has only one value
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.tearDown():::EXIT
this.refValues == null
this.matrix == null
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.testMathpbx02():::ENTER
this has only one value
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.EigenDecompositionImplTest.testMathpbx02():::EXIT
this.refValues == orig(this.refValues)
this.refValues[] == orig(this.refValues[])
this.matrix == orig(this.matrix)
this.matrix.getClass().getName() == orig(this.matrix.getClass().getName())
this.refValues has only one value
this.matrix has only one value
===========================================================================
org.apache.commons.math.linear.MatrixUtils.checkMultiplicationCompatible(org.apache.commons.math.linear.AnyMatrix, org.apache.commons.math.linear.AnyMatrix):::ENTER
left.getClass().getName() == right.getClass().getName()
left.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math.linear.MatrixUtils.checkMultiplicationCompatible(org.apache.commons.math.linear.AnyMatrix, org.apache.commons.math.linear.AnyMatrix):::EXIT
===========================================================================
org.apache.commons.math.linear.MatrixUtils.createRealMatrix(double[][]):::ENTER
data.getClass().getName() == double[][].class
size(data[]) == 6
===========================================================================
org.apache.commons.math.linear.MatrixUtils.createRealMatrix(double[][]):::EXIT
data[] == orig(data[])
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math.linear.RealVectorFormat:::CLASS
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == "{"
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == "}"
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == "; "
===========================================================================
org.apache.commons.math.linear.RealVectorFormat:::OBJECT
this has only one value
this.prefix has only one value
this.prefix.toString == "{"
this.suffix has only one value
this.suffix.toString == "}"
this.separator has only one value
this.separator.toString == "; "
this.trimmedPrefix has only one value
this.trimmedPrefix.toString == "{"
this.trimmedSuffix has only one value
this.trimmedSuffix.toString == "}"
this.trimmedSeparator has only one value
this.trimmedSeparator.toString == ";"
this.format has only one value
this.format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.RealVectorFormat(java.lang.String, java.lang.String, java.lang.String, java.text.NumberFormat):::ENTER
prefix has only one value
prefix.toString == "{"
suffix has only one value
suffix.toString == "}"
separator has only one value
separator.toString == "; "
format has only one value
format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.RealVectorFormat(java.lang.String, java.lang.String, java.lang.String, java.text.NumberFormat):::EXIT
prefix.toString == orig(prefix.toString)
suffix.toString == orig(suffix.toString)
separator.toString == orig(separator.toString)
prefix.toString == "{"
suffix.toString == "}"
separator.toString == "; "
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.RealVectorFormat(java.text.NumberFormat):::ENTER
format has only one value
format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.RealVectorFormat(java.text.NumberFormat):::EXIT
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.getInstance():::ENTER
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.getInstance():::EXIT
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
return has only one value
return.prefix has only one value
return.prefix.toString == "{"
return.suffix has only one value
return.suffix.toString == "}"
return.separator has only one value
return.separator.toString == "; "
return.trimmedPrefix has only one value
return.trimmedPrefix.toString == "{"
return.trimmedSuffix has only one value
return.trimmedSuffix.toString == "}"
return.trimmedSeparator has only one value
return.trimmedSeparator.toString == ";"
return.format has only one value
return.format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.getInstance(java.util.Locale):::ENTER
locale has only one value
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.getInstance(java.util.Locale):::EXIT
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
return has only one value
return.prefix has only one value
return.prefix.toString == "{"
return.suffix has only one value
return.suffix.toString == "}"
return.separator has only one value
return.separator.toString == "; "
return.trimmedPrefix has only one value
return.trimmedPrefix.toString == "{"
return.trimmedSuffix has only one value
return.trimmedSuffix.toString == "}"
return.trimmedSeparator has only one value
return.trimmedSeparator.toString == ";"
return.format has only one value
return.format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math.util.CompositeFormat:::CLASS
===========================================================================
org.apache.commons.math.util.CompositeFormat:::OBJECT
this has only one value
this.getClass().getName() == org.apache.commons.math.linear.RealVectorFormat.class
===========================================================================
org.apache.commons.math.util.CompositeFormat.CompositeFormat():::EXIT
===========================================================================
org.apache.commons.math.util.CompositeFormat.getDefaultNumberFormat(java.util.Locale):::ENTER
locale has only one value
===========================================================================
org.apache.commons.math.util.CompositeFormat.getDefaultNumberFormat(java.util.Locale):::EXIT
return has only one value
return.getClass().getName() == java.text.DecimalFormat.class
