===========================================================================
org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic:::OBJECT
this.storedData == null
===========================================================================
org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.AbstractStorelessUnivariateStatistic():::EXIT
===========================================================================
org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic:::OBJECT
this.storedData == null
===========================================================================
org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic.AbstractUnivariateStatistic():::EXIT
===========================================================================
org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic.test(double[], double[], int, int):::ENTER
values[] one of { [12.5, 12.0, 11.8, 14.2, 14.9], [12.5, 12.0, 11.8, 14.2, 14.9, 14.5, 21.0, 8.2, 10.3, 11.3, 14.1, 9.9, 12.2, 12.0, 12.1, 11.0, 19.8, 11.0, 10.0, 8.8, 9.0, 12.3] }
weights[] one of { [1.5, 0.8, 1.2, 0.4, 0.8], [1.5, 0.8, 1.2, 0.4, 0.8, 1.8, 1.2, 1.1, 1.0, 0.7, 1.3, 0.6, 0.7, 1.3, 0.7, 1.0, 0.4, 0.1, 1.4, 0.9, 1.1, 0.3] }
begin == 0
length == 5
size(values[]) one of { 5, 22 }
size(weights[]) one of { 5, 22 }
===========================================================================
org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic.test(double[], double[], int, int):::EXIT
this.storedData == orig(this.storedData)
values[] == orig(values[])
weights[] == orig(weights[])
values[] one of { [12.5, 12.0, 11.8, 14.2, 14.9], [12.5, 12.0, 11.8, 14.2, 14.9, 14.5, 21.0, 8.2, 10.3, 11.3, 14.1, 9.9, 12.2, 12.0, 12.1, 11.0, 19.8, 11.0, 10.0, 8.8, 9.0, 12.3] }
weights[] one of { [1.5, 0.8, 1.2, 0.4, 0.8], [1.5, 0.8, 1.2, 0.4, 0.8, 1.8, 1.2, 1.1, 1.0, 0.7, 1.3, 0.6, 0.7, 1.3, 0.7, 1.0, 0.4, 0.1, 1.4, 0.9, 1.1, 0.3] }
return == true
===========================================================================
org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic.test(double[], double[], int, int):::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic.test(double[], double[], int, int, boolean):::ENTER
values[] one of { [12.5, 12.0, 11.8, 14.2, 14.9], [12.5, 12.0, 11.8, 14.2, 14.9, 14.5, 21.0, 8.2, 10.3, 11.3, 14.1, 9.9, 12.2, 12.0, 12.1, 11.0, 19.8, 11.0, 10.0, 8.8, 9.0, 12.3] }
weights[] one of { [1.5, 0.8, 1.2, 0.4, 0.8], [1.5, 0.8, 1.2, 0.4, 0.8, 1.8, 1.2, 1.1, 1.0, 0.7, 1.3, 0.6, 0.7, 1.3, 0.7, 1.0, 0.4, 0.1, 1.4, 0.9, 1.1, 0.3] }
begin == 0
length == 5
size(values[]) one of { 5, 22 }
size(weights[]) one of { 5, 22 }
===========================================================================
org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic.test(double[], double[], int, int, boolean):::EXIT
this.storedData == orig(this.storedData)
values[] == orig(values[])
weights[] == orig(weights[])
values[] one of { [12.5, 12.0, 11.8, 14.2, 14.9], [12.5, 12.0, 11.8, 14.2, 14.9, 14.5, 21.0, 8.2, 10.3, 11.3, 14.1, 9.9, 12.2, 12.0, 12.1, 11.0, 19.8, 11.0, 10.0, 8.8, 9.0, 12.3] }
weights[] one of { [1.5, 0.8, 1.2, 0.4, 0.8], [1.5, 0.8, 1.2, 0.4, 0.8, 1.8, 1.2, 1.1, 1.0, 0.7, 1.3, 0.6, 0.7, 1.3, 0.7, 1.0, 0.4, 0.1, 1.4, 0.9, 1.1, 0.3] }
return == true
===========================================================================
org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic.test(double[], double[], int, int, boolean):::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic.test(double[], int, int, boolean):::ENTER
begin == 0
length == 5
size(values[]) one of { 5, 22 }
===========================================================================
org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic.test(double[], int, int, boolean):::EXIT184
===========================================================================
org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic.test(double[], int, int, boolean):::EXIT184;condition="return == true"
===========================================================================
org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic.test(double[], int, int, boolean):::EXIT
this.storedData == orig(this.storedData)
values[] == orig(values[])
return == true
===========================================================================
org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic.test(double[], int, int, boolean):::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest:::OBJECT
this has only one value
this.getClass().getName() == org.apache.commons.math.stat.descriptive.moment.VarianceTest.class
this.smallSamples has only one value
this.smallSamples.getClass().getName() == double[][].class
this.smallSamples[] contains no nulls and has only one value, of length 5
this.mean == 12.404545454545454
this.geoMean == 12.070589161633011
this.var == 10.00235930735931
this.std == 3.1626506774159093
this.skew == 1.43742372919619
this.kurt == 2.3771912648047
this.min == 8.2
this.max == 21.0
this.median == 12.0
this.percentile5 == 8.29
this.percentile95 == 20.82
this.product == 6.280964005638334E23
this.sumLog == 54.796980611645154
this.sumSq == 3595.25
this.sum == 272.9
this.secondMoment == 210.04954545454547
this.thirdMoment == 868.0906859504136
this.fourthMoment == 9244.080993773481
this.weightedMean == 12.366995073891626
this.weightedVar == 9.974760968886391
this.weightedStd == 3.1582844977750804
this.weightedProduct == 8.517647448765288E21
this.weightedSum == 251.05
this.tolerance == 1.0E-11
this.testArray has only one value
this.testArray[] == [12.5, 12.0, 11.8, 14.2, 14.9, 14.5, 21.0, 8.2, 10.3, 11.3, 14.1, 9.9, 12.2, 12.0, 12.1, 11.0, 19.8, 11.0, 10.0, 8.8, 9.0, 12.3]
this.testWeightsArray has only one value
this.testWeightsArray[] == [1.5, 0.8, 1.2, 0.4, 0.8, 1.8, 1.2, 1.1, 1.0, 0.7, 1.3, 0.6, 0.7, 1.3, 0.7, 1.0, 0.4, 0.1, 1.4, 0.9, 1.1, 0.3]
this.identicalWeightsArray has only one value
this.identicalWeightsArray[] == [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]
this.identicalWeightsArray[] elements == 0.5
this.unitWeightsArray has only one value
this.unitWeightsArray[] == [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
this.unitWeightsArray[] elements == 1.0
size(this.smallSamples[]) == 5
size(this.testArray[]) == 22
size(this.testWeightsArray[]) == 22
size(this.identicalWeightsArray[]) == 22
size(this.unitWeightsArray[]) == 22
===========================================================================
org.apache.commons.math.stat.descriptive.StorelessUnivariateStatisticAbstractTest.StorelessUnivariateStatisticAbstractTest():::EXIT
===========================================================================
org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest:::OBJECT
this has only one value
this.getClass().getName() == org.apache.commons.math.stat.descriptive.moment.VarianceTest.class
this.mean == 12.404545454545454
this.geoMean == 12.070589161633011
this.var == 10.00235930735931
this.std == 3.1626506774159093
this.skew == 1.43742372919619
this.kurt == 2.3771912648047
this.min == 8.2
this.max == 21.0
this.median == 12.0
this.percentile5 == 8.29
this.percentile95 == 20.82
this.product == 6.280964005638334E23
this.sumLog == 54.796980611645154
this.sumSq == 3595.25
this.sum == 272.9
this.secondMoment == 210.04954545454547
this.thirdMoment == 868.0906859504136
this.fourthMoment == 9244.080993773481
this.weightedMean == 12.366995073891626
this.weightedVar == 9.974760968886391
this.weightedStd == 3.1582844977750804
this.weightedProduct == 8.517647448765288E21
this.weightedSum == 251.05
this.tolerance == 1.0E-11
this.testArray has only one value
this.testArray[] == [12.5, 12.0, 11.8, 14.2, 14.9, 14.5, 21.0, 8.2, 10.3, 11.3, 14.1, 9.9, 12.2, 12.0, 12.1, 11.0, 19.8, 11.0, 10.0, 8.8, 9.0, 12.3]
this.testWeightsArray has only one value
this.testWeightsArray[] == [1.5, 0.8, 1.2, 0.4, 0.8, 1.8, 1.2, 1.1, 1.0, 0.7, 1.3, 0.6, 0.7, 1.3, 0.7, 1.0, 0.4, 0.1, 1.4, 0.9, 1.1, 0.3]
this.identicalWeightsArray has only one value
this.identicalWeightsArray[] == [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]
this.identicalWeightsArray[] elements == 0.5
this.unitWeightsArray has only one value
this.unitWeightsArray[] == [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
this.unitWeightsArray[] elements == 1.0
size(this.testArray[]) == 22
size(this.testWeightsArray[]) == 22
size(this.identicalWeightsArray[]) == 22
size(this.unitWeightsArray[]) == 22
===========================================================================
org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.UnivariateStatisticAbstractTest():::EXIT
===========================================================================
org.apache.commons.math.stat.descriptive.moment.FirstMoment:::CLASS
===========================================================================
org.apache.commons.math.stat.descriptive.moment.FirstMoment:::OBJECT
this.n == 0
this.m1 == Double.NaN
this.dev == Double.NaN
this.nDev == Double.NaN
this.storedData == null
===========================================================================
org.apache.commons.math.stat.descriptive.moment.FirstMoment.FirstMoment():::EXIT
===========================================================================
org.apache.commons.math.stat.descriptive.moment.FirstMoment.clear():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.stat.descriptive.moment.FirstMoment.clear():::EXIT
this.n == orig(this.n)
this.storedData == orig(this.storedData)
===========================================================================
org.apache.commons.math.stat.descriptive.moment.Mean:::CLASS
===========================================================================
org.apache.commons.math.stat.descriptive.moment.Mean:::OBJECT
this.moment.n == 0
this.moment.m1 == Double.NaN
this.moment.dev == Double.NaN
this.moment.nDev == Double.NaN
this.moment.storedData == null
this.incMoment == true
this.storedData == null
===========================================================================
org.apache.commons.math.stat.descriptive.moment.Mean.Mean():::EXIT
===========================================================================
org.apache.commons.math.stat.descriptive.moment.Mean.evaluate(double[], double[], int, int):::ENTER
values[] one of { [12.5, 12.0, 11.8, 14.2, 14.9], [12.5, 12.0, 11.8, 14.2, 14.9, 14.5, 21.0, 8.2, 10.3, 11.3, 14.1, 9.9, 12.2, 12.0, 12.1, 11.0, 19.8, 11.0, 10.0, 8.8, 9.0, 12.3] }
weights[] one of { [1.5, 0.8, 1.2, 0.4, 0.8], [1.5, 0.8, 1.2, 0.4, 0.8, 1.8, 1.2, 1.1, 1.0, 0.7, 1.3, 0.6, 0.7, 1.3, 0.7, 1.0, 0.4, 0.1, 1.4, 0.9, 1.1, 0.3] }
begin == 0
length == 5
size(values[]) one of { 5, 22 }
size(weights[]) one of { 5, 22 }
===========================================================================
org.apache.commons.math.stat.descriptive.moment.Mean.evaluate(double[], double[], int, int):::EXIT217
===========================================================================
org.apache.commons.math.stat.descriptive.moment.Mean.evaluate(double[], double[], int, int):::EXIT
this.moment == orig(this.moment)
this.moment.n == orig(this.moment.n)
this.moment.storedData == orig(this.moment.storedData)
this.incMoment == orig(this.incMoment)
this.storedData == orig(this.storedData)
values[] == orig(values[])
weights[] == orig(weights[])
values[] one of { [12.5, 12.0, 11.8, 14.2, 14.9], [12.5, 12.0, 11.8, 14.2, 14.9, 14.5, 21.0, 8.2, 10.3, 11.3, 14.1, 9.9, 12.2, 12.0, 12.1, 11.0, 19.8, 11.0, 10.0, 8.8, 9.0, 12.3] }
weights[] one of { [1.5, 0.8, 1.2, 0.4, 0.8], [1.5, 0.8, 1.2, 0.4, 0.8, 1.8, 1.2, 1.1, 1.0, 0.7, 1.3, 0.6, 0.7, 1.3, 0.7, 1.0, 0.4, 0.1, 1.4, 0.9, 1.1, 0.3] }
return == 12.78936170212766
===========================================================================
org.apache.commons.math.stat.descriptive.moment.SecondMoment:::CLASS
===========================================================================
org.apache.commons.math.stat.descriptive.moment.SecondMoment:::OBJECT
this.m2 == Double.NaN
this.n == 0
this.m1 == Double.NaN
this.dev == Double.NaN
this.nDev == Double.NaN
this.storedData == null
===========================================================================
org.apache.commons.math.stat.descriptive.moment.SecondMoment.SecondMoment():::EXIT
===========================================================================
org.apache.commons.math.stat.descriptive.moment.SecondMoment.clear():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.stat.descriptive.moment.SecondMoment.clear():::EXIT
this.n == orig(this.n)
this.storedData == orig(this.storedData)
===========================================================================
org.apache.commons.math.stat.descriptive.moment.Variance:::CLASS
===========================================================================
org.apache.commons.math.stat.descriptive.moment.Variance:::OBJECT
this.moment != null
this.moment.m2 == Double.NaN
this.moment.n == 0
this.moment.m1 == Double.NaN
this.moment.dev == Double.NaN
this.moment.nDev == Double.NaN
this.moment.storedData == null
this.incMoment == true
this.isBiasCorrected == true
this.storedData == null
===========================================================================
org.apache.commons.math.stat.descriptive.moment.Variance.Variance():::EXIT
===========================================================================
org.apache.commons.math.stat.descriptive.moment.Variance.clear():::ENTER
this has only one value
this.moment has only one value
===========================================================================
org.apache.commons.math.stat.descriptive.moment.Variance.clear():::EXIT
this.moment == orig(this.moment)
this.moment.n == orig(this.moment.n)
this.moment.storedData == orig(this.moment.storedData)
this.incMoment == orig(this.incMoment)
this.isBiasCorrected == orig(this.isBiasCorrected)
this.storedData == orig(this.storedData)
this.moment has only one value
===========================================================================
org.apache.commons.math.stat.descriptive.moment.Variance.evaluate(double[], double[]):::ENTER
this has only one value
this.moment has only one value
values has only one value
values[] == [12.5, 12.0, 11.8, 14.2, 14.9]
weights has only one value
weights[] == [1.5, 0.8, 1.2, 0.4, 0.8]
size(values[]) == 5
size(weights[]) == 5
===========================================================================
org.apache.commons.math.stat.descriptive.moment.Variance.evaluate(double[], double[]):::EXIT
this.moment == orig(this.moment)
this.moment.n == orig(this.moment.n)
this.moment.storedData == orig(this.moment.storedData)
this.incMoment == orig(this.incMoment)
this.isBiasCorrected == orig(this.isBiasCorrected)
this.storedData == orig(this.storedData)
values[] == orig(values[])
weights[] == orig(weights[])
this.moment has only one value
values[] == [12.5, 12.0, 11.8, 14.2, 14.9]
weights[] == [1.5, 0.8, 1.2, 0.4, 0.8]
return == 1.6644508338125354
===========================================================================
org.apache.commons.math.stat.descriptive.moment.Variance.evaluate(double[], double[], double, int, int):::ENTER
this has only one value
this.moment has only one value
values[] one of { [12.5, 12.0, 11.8, 14.2, 14.9], [12.5, 12.0, 11.8, 14.2, 14.9, 14.5, 21.0, 8.2, 10.3, 11.3, 14.1, 9.9, 12.2, 12.0, 12.1, 11.0, 19.8, 11.0, 10.0, 8.8, 9.0, 12.3] }
weights[] one of { [1.5, 0.8, 1.2, 0.4, 0.8], [1.5, 0.8, 1.2, 0.4, 0.8, 1.8, 1.2, 1.1, 1.0, 0.7, 1.3, 0.6, 0.7, 1.3, 0.7, 1.0, 0.4, 0.1, 1.4, 0.9, 1.1, 0.3] }
mean == 12.78936170212766
begin == 0
length == 5
size(values[]) one of { 5, 22 }
size(weights[]) one of { 5, 22 }
===========================================================================
org.apache.commons.math.stat.descriptive.moment.Variance.evaluate(double[], double[], double, int, int):::EXIT
this.moment == orig(this.moment)
this.moment.n == orig(this.moment.n)
this.moment.storedData == orig(this.moment.storedData)
this.incMoment == orig(this.incMoment)
this.isBiasCorrected == orig(this.isBiasCorrected)
this.storedData == orig(this.storedData)
values[] == orig(values[])
weights[] == orig(weights[])
this.moment has only one value
values[] one of { [12.5, 12.0, 11.8, 14.2, 14.9], [12.5, 12.0, 11.8, 14.2, 14.9, 14.5, 21.0, 8.2, 10.3, 11.3, 14.1, 9.9, 12.2, 12.0, 12.1, 11.0, 19.8, 11.0, 10.0, 8.8, 9.0, 12.3] }
weights[] one of { [1.5, 0.8, 1.2, 0.4, 0.8], [1.5, 0.8, 1.2, 0.4, 0.8, 1.8, 1.2, 1.1, 1.0, 0.7, 1.3, 0.6, 0.7, 1.3, 0.7, 1.0, 0.4, 0.1, 1.4, 0.9, 1.1, 0.3] }
return one of { 0.31909161062727365, 1.6644508338125354 }
===========================================================================
org.apache.commons.math.stat.descriptive.moment.Variance.evaluate(double[], double[], int, int):::ENTER
this has only one value
this.moment has only one value
values[] one of { [12.5, 12.0, 11.8, 14.2, 14.9], [12.5, 12.0, 11.8, 14.2, 14.9, 14.5, 21.0, 8.2, 10.3, 11.3, 14.1, 9.9, 12.2, 12.0, 12.1, 11.0, 19.8, 11.0, 10.0, 8.8, 9.0, 12.3] }
weights[] one of { [1.5, 0.8, 1.2, 0.4, 0.8], [1.5, 0.8, 1.2, 0.4, 0.8, 1.8, 1.2, 1.1, 1.0, 0.7, 1.3, 0.6, 0.7, 1.3, 0.7, 1.0, 0.4, 0.1, 1.4, 0.9, 1.1, 0.3] }
begin == 0
length == 5
size(values[]) one of { 5, 22 }
size(weights[]) one of { 5, 22 }
===========================================================================
org.apache.commons.math.stat.descriptive.moment.Variance.evaluate(double[], double[], int, int):::EXIT
this.moment == orig(this.moment)
this.moment.n == orig(this.moment.n)
this.moment.storedData == orig(this.moment.storedData)
this.incMoment == orig(this.incMoment)
this.isBiasCorrected == orig(this.isBiasCorrected)
this.storedData == orig(this.storedData)
values[] == orig(values[])
weights[] == orig(weights[])
this.moment has only one value
values[] one of { [12.5, 12.0, 11.8, 14.2, 14.9], [12.5, 12.0, 11.8, 14.2, 14.9, 14.5, 21.0, 8.2, 10.3, 11.3, 14.1, 9.9, 12.2, 12.0, 12.1, 11.0, 19.8, 11.0, 10.0, 8.8, 9.0, 12.3] }
weights[] one of { [1.5, 0.8, 1.2, 0.4, 0.8], [1.5, 0.8, 1.2, 0.4, 0.8, 1.8, 1.2, 1.1, 1.0, 0.7, 1.3, 0.6, 0.7, 1.3, 0.7, 1.0, 0.4, 0.1, 1.4, 0.9, 1.1, 0.3] }
return one of { 0.31909161062727365, 1.6644508338125354 }
===========================================================================
org.apache.commons.math.stat.descriptive.moment.VarianceTest:::OBJECT
this has only one value
this.stat == null
this.smallSamples has only one value
this.smallSamples.getClass().getName() == double[][].class
this.smallSamples[] contains no nulls and has only one value, of length 5
this.mean == 12.404545454545454
this.geoMean == 12.070589161633011
this.var == 10.00235930735931
this.std == 3.1626506774159093
this.skew == 1.43742372919619
this.kurt == 2.3771912648047
this.min == 8.2
this.max == 21.0
this.median == 12.0
this.percentile5 == 8.29
this.percentile95 == 20.82
this.product == 6.280964005638334E23
this.sumLog == 54.796980611645154
this.sumSq == 3595.25
this.sum == 272.9
this.secondMoment == 210.04954545454547
this.thirdMoment == 868.0906859504136
this.fourthMoment == 9244.080993773481
this.weightedMean == 12.366995073891626
this.weightedVar == 9.974760968886391
this.weightedStd == 3.1582844977750804
this.weightedProduct == 8.517647448765288E21
this.weightedSum == 251.05
this.tolerance == 1.0E-11
this.testArray has only one value
this.testArray[] == [12.5, 12.0, 11.8, 14.2, 14.9, 14.5, 21.0, 8.2, 10.3, 11.3, 14.1, 9.9, 12.2, 12.0, 12.1, 11.0, 19.8, 11.0, 10.0, 8.8, 9.0, 12.3]
this.testWeightsArray has only one value
this.testWeightsArray[] == [1.5, 0.8, 1.2, 0.4, 0.8, 1.8, 1.2, 1.1, 1.0, 0.7, 1.3, 0.6, 0.7, 1.3, 0.7, 1.0, 0.4, 0.1, 1.4, 0.9, 1.1, 0.3]
this.identicalWeightsArray has only one value
this.identicalWeightsArray[] == [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]
this.identicalWeightsArray[] elements == 0.5
this.unitWeightsArray has only one value
this.unitWeightsArray[] == [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
this.unitWeightsArray[] elements == 1.0
size(this.smallSamples[]) == 5
size(this.testArray[]) == 22
size(this.testWeightsArray[]) == 22
size(this.identicalWeightsArray[]) == 22
size(this.unitWeightsArray[]) == 22
===========================================================================
org.apache.commons.math.stat.descriptive.moment.VarianceTest.VarianceTest():::EXIT
===========================================================================
org.apache.commons.math.stat.descriptive.moment.VarianceTest.getUnivariateStatistic():::ENTER
===========================================================================
org.apache.commons.math.stat.descriptive.moment.VarianceTest.getUnivariateStatistic():::EXIT
this.stat == orig(this.stat)
this.smallSamples == orig(this.smallSamples)
this.smallSamples.getClass().getName() == orig(this.smallSamples.getClass().getName())
this.smallSamples[] == orig(this.smallSamples[])
this.mean == orig(this.mean)
this.geoMean == orig(this.geoMean)
this.var == orig(this.var)
this.std == orig(this.std)
this.skew == orig(this.skew)
this.kurt == orig(this.kurt)
this.min == orig(this.min)
this.max == orig(this.max)
this.median == orig(this.median)
this.percentile5 == orig(this.percentile5)
this.percentile95 == orig(this.percentile95)
this.product == orig(this.product)
this.sumLog == orig(this.sumLog)
this.sumSq == orig(this.sumSq)
this.sum == orig(this.sum)
this.secondMoment == orig(this.secondMoment)
this.thirdMoment == orig(this.thirdMoment)
this.fourthMoment == orig(this.fourthMoment)
this.weightedMean == orig(this.weightedMean)
this.weightedVar == orig(this.weightedVar)
this.weightedStd == orig(this.weightedStd)
this.weightedProduct == orig(this.weightedProduct)
this.weightedSum == orig(this.weightedSum)
this.tolerance == orig(this.tolerance)
this.testArray == orig(this.testArray)
this.testArray[] == orig(this.testArray[])
this.testWeightsArray == orig(this.testWeightsArray)
this.testWeightsArray[] == orig(this.testWeightsArray[])
this.identicalWeightsArray == orig(this.identicalWeightsArray)
this.identicalWeightsArray[] == orig(this.identicalWeightsArray[])
this.unitWeightsArray == orig(this.unitWeightsArray)
this.unitWeightsArray[] == orig(this.unitWeightsArray[])
return.getClass().getName() == org.apache.commons.math.stat.descriptive.moment.Variance.class
===========================================================================
org.apache.commons.math.stat.descriptive.summary.Sum:::CLASS
===========================================================================
org.apache.commons.math.stat.descriptive.summary.Sum:::OBJECT
this.n == 0
this.value == 0.0
this.storedData == null
===========================================================================
org.apache.commons.math.stat.descriptive.summary.Sum.Sum():::EXIT
===========================================================================
org.apache.commons.math.stat.descriptive.summary.Sum.evaluate(double[], double[], int, int):::ENTER
values[] one of { [12.5, 12.0, 11.8, 14.2, 14.9], [12.5, 12.0, 11.8, 14.2, 14.9, 14.5, 21.0, 8.2, 10.3, 11.3, 14.1, 9.9, 12.2, 12.0, 12.1, 11.0, 19.8, 11.0, 10.0, 8.8, 9.0, 12.3] }
weights[] one of { [1.5, 0.8, 1.2, 0.4, 0.8], [1.5, 0.8, 1.2, 0.4, 0.8, 1.8, 1.2, 1.1, 1.0, 0.7, 1.3, 0.6, 0.7, 1.3, 0.7, 1.0, 0.4, 0.1, 1.4, 0.9, 1.1, 0.3] }
begin == 0
length == 5
size(values[]) one of { 5, 22 }
size(weights[]) one of { 5, 22 }
===========================================================================
org.apache.commons.math.stat.descriptive.summary.Sum.evaluate(double[], double[], int, int):::EXIT
this.n == orig(this.n)
this.value == orig(this.value)
this.storedData == orig(this.storedData)
values[] == orig(values[])
weights[] == orig(weights[])
values[] one of { [12.5, 12.0, 11.8, 14.2, 14.9], [12.5, 12.0, 11.8, 14.2, 14.9, 14.5, 21.0, 8.2, 10.3, 11.3, 14.1, 9.9, 12.2, 12.0, 12.1, 11.0, 19.8, 11.0, 10.0, 8.8, 9.0, 12.3] }
weights[] one of { [1.5, 0.8, 1.2, 0.4, 0.8], [1.5, 0.8, 1.2, 0.4, 0.8, 1.8, 1.2, 1.1, 1.0, 0.7, 1.3, 0.6, 0.7, 1.3, 0.7, 1.0, 0.4, 0.1, 1.4, 0.9, 1.1, 0.3] }
return == 60.11000000000001
===========================================================================
org.apache.commons.math.stat.descriptive.summary.Sum.evaluate(double[], int, int):::ENTER
values[] one of { [1.5, 0.8, 1.2, 0.4, 0.8], [1.5, 0.8, 1.2, 0.4, 0.8, 1.8, 1.2, 1.1, 1.0, 0.7, 1.3, 0.6, 0.7, 1.3, 0.7, 1.0, 0.4, 0.1, 1.4, 0.9, 1.1, 0.3] }
begin == 0
length == 5
size(values[]) one of { 5, 22 }
===========================================================================
org.apache.commons.math.stat.descriptive.summary.Sum.evaluate(double[], int, int):::EXIT
this.n == orig(this.n)
this.value == orig(this.value)
this.storedData == orig(this.storedData)
values[] == orig(values[])
values[] one of { [1.5, 0.8, 1.2, 0.4, 0.8], [1.5, 0.8, 1.2, 0.4, 0.8, 1.8, 1.2, 1.1, 1.0, 0.7, 1.3, 0.6, 0.7, 1.3, 0.7, 1.0, 0.4, 0.1, 1.4, 0.9, 1.1, 0.3] }
return == 4.7
===========================================================================
org.apache.commons.math.util.FastMath:::CLASS
===========================================================================
org.apache.commons.math.util.FastMath.sqrt(double):::ENTER
a one of { 9.974760968886391, 10.00235930735931 }
===========================================================================
org.apache.commons.math.util.FastMath.sqrt(double):::EXIT
return one of { 3.1582844977750804, 3.1626506774159093 }
