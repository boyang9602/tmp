===========================================================================
org.apache.commons.math.stat.Frequency:::CLASS
===========================================================================
org.apache.commons.math.stat.Frequency:::OBJECT
this has only one value
this.freqTable has only one value
===========================================================================
org.apache.commons.math.stat.Frequency.Frequency():::EXIT
===========================================================================
org.apache.commons.math.stat.Frequency.addValue(int):::ENTER
v == 1
===========================================================================
org.apache.commons.math.stat.Frequency.addValue(int):::EXIT
this.freqTable == orig(this.freqTable)
===========================================================================
org.apache.commons.math.stat.Frequency.addValue(java.lang.Object):::ENTER
v has only one value
v.getClass().getName() == java.lang.Long.class
===========================================================================
org.apache.commons.math.stat.Frequency.addValue(java.lang.Object):::EXIT
this.freqTable == orig(this.freqTable)
===========================================================================
org.apache.commons.math.stat.Frequency.clear():::ENTER
===========================================================================
org.apache.commons.math.stat.Frequency.clear():::EXIT
this.freqTable == orig(this.freqTable)
===========================================================================
org.apache.commons.math.stat.FrequencyTest:::OBJECT
this.oneL == 1
this.twoL == 2
this.threeL == 3
this.oneI == 1
this.twoI == 2
this.threeI == 3
this.tolerance == 1.0E-14
this.f.freqTable has only one value
===========================================================================
org.apache.commons.math.stat.FrequencyTest.FrequencyTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.stat.FrequencyTest.FrequencyTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
this.f == null
===========================================================================
org.apache.commons.math.stat.FrequencyTest.setUp():::ENTER
this has only one value
this.f == null
===========================================================================
org.apache.commons.math.stat.FrequencyTest.setUp():::EXIT
this.oneL == orig(this.oneL)
this.twoL == orig(this.twoL)
this.threeL == orig(this.threeL)
this.oneI == orig(this.oneI)
this.twoI == orig(this.twoI)
this.threeI == orig(this.threeI)
this.tolerance == orig(this.tolerance)
this.f has only one value
===========================================================================
org.apache.commons.math.stat.FrequencyTest.suite():::EXIT
return has only one value
return.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.apache.commons.math.stat.FrequencyTest.testAddNonComparable():::ENTER
this has only one value
this.f has only one value
===========================================================================
org.apache.commons.math.stat.FrequencyTest.testAddNonComparable():::EXIT
this.oneL == orig(this.oneL)
this.twoL == orig(this.twoL)
this.threeL == orig(this.threeL)
this.oneI == orig(this.oneI)
this.twoI == orig(this.twoI)
this.threeI == orig(this.threeI)
this.tolerance == orig(this.tolerance)
this.f == orig(this.f)
this.f.freqTable == orig(this.f.freqTable)
this.f has only one value
