===========================================================================
org.apache.commons.math.TestUtils.assertEquals(double, double, double):::ENTER
expected == Double.NaN
actual == Double.NaN
delta == 0.0
===========================================================================
org.apache.commons.math.TestUtils.assertEquals(double, double, double):::EXIT
===========================================================================
org.apache.commons.math.TestUtils.assertEquals(java.lang.String, double, double, double):::ENTER
msg == null
expected == Double.NaN
actual == Double.NaN
delta == 0.0
===========================================================================
org.apache.commons.math.TestUtils.assertEquals(java.lang.String, double, double, double):::EXIT
===========================================================================
org.apache.commons.math.stat.Frequency$NaturalComparator:::CLASS
===========================================================================
org.apache.commons.math.stat.Frequency$NaturalComparator:::OBJECT
===========================================================================
org.apache.commons.math.stat.Frequency$NaturalComparator.NaturalComparator():::EXIT
===========================================================================
org.apache.commons.math.stat.Frequency$NaturalComparator.compare(java.lang.Object, java.lang.Object):::ENTER
o1 != null
o2 != null
===========================================================================
org.apache.commons.math.stat.Frequency$NaturalComparator.compare(java.lang.Object, java.lang.Object):::EXIT
===========================================================================
org.apache.commons.math.stat.Frequency:::CLASS
===========================================================================
org.apache.commons.math.stat.Frequency:::OBJECT
this.freqTable != null
===========================================================================
org.apache.commons.math.stat.Frequency.Frequency():::EXIT
===========================================================================
org.apache.commons.math.stat.Frequency.Frequency(java.util.Comparator):::ENTER
comparator has only one value
comparator.getClass().getName() == java.lang.String$CaseInsensitiveComparator.class
===========================================================================
org.apache.commons.math.stat.Frequency.Frequency(java.util.Comparator):::EXIT
this.freqTable has only one value
===========================================================================
org.apache.commons.math.stat.Frequency.addValue(char):::ENTER
===========================================================================
org.apache.commons.math.stat.Frequency.addValue(char):::EXIT
this.freqTable == orig(this.freqTable)
===========================================================================
org.apache.commons.math.stat.Frequency.addValue(int):::ENTER
v one of { 1, 2, 3 }
===========================================================================
org.apache.commons.math.stat.Frequency.addValue(int):::EXIT
this.freqTable == orig(this.freqTable)
===========================================================================
org.apache.commons.math.stat.Frequency.addValue(java.lang.Integer):::ENTER
===========================================================================
org.apache.commons.math.stat.Frequency.addValue(java.lang.Integer):::EXIT
this.freqTable == orig(this.freqTable)
===========================================================================
org.apache.commons.math.stat.Frequency.addValue(java.lang.Object):::ENTER
v != null
===========================================================================
org.apache.commons.math.stat.Frequency.addValue(java.lang.Object):::EXIT
this.freqTable == orig(this.freqTable)
===========================================================================
org.apache.commons.math.stat.Frequency.addValue(long):::ENTER
v one of { 1, 2, 3 }
===========================================================================
org.apache.commons.math.stat.Frequency.addValue(long):::EXIT
this.freqTable == orig(this.freqTable)
===========================================================================
org.apache.commons.math.stat.Frequency.clear():::ENTER
this has only one value
this.freqTable has only one value
===========================================================================
org.apache.commons.math.stat.Frequency.clear():::EXIT
this.freqTable == orig(this.freqTable)
this.freqTable has only one value
===========================================================================
org.apache.commons.math.stat.Frequency.getCount(char):::ENTER
this has only one value
this.freqTable has only one value
v == 97
===========================================================================
org.apache.commons.math.stat.Frequency.getCount(char):::EXIT
this.freqTable == orig(this.freqTable)
this.freqTable has only one value
return one of { 0, 1 }
===========================================================================
org.apache.commons.math.stat.Frequency.getCount(int):::ENTER
v one of { 1, 2, 3 }
===========================================================================
org.apache.commons.math.stat.Frequency.getCount(int):::EXIT
this.freqTable == orig(this.freqTable)
===========================================================================
org.apache.commons.math.stat.Frequency.getCount(java.lang.Object):::ENTER
v != null
===========================================================================
org.apache.commons.math.stat.Frequency.getCount(java.lang.Object):::EXIT217
return one of { 2, 3 }
orig(v) has only one value
orig(v.getClass().getName()) == java.lang.Integer.class
===========================================================================
org.apache.commons.math.stat.Frequency.getCount(java.lang.Object):::EXIT228
===========================================================================
org.apache.commons.math.stat.Frequency.getCount(java.lang.Object):::EXIT
this.freqTable == orig(this.freqTable)
return >= 0
===========================================================================
org.apache.commons.math.stat.Frequency.getCount(long):::ENTER
v == 1
===========================================================================
org.apache.commons.math.stat.Frequency.getCount(long):::EXIT
this.freqTable == orig(this.freqTable)
return one of { 2, 3 }
===========================================================================
org.apache.commons.math.stat.Frequency.getCumFreq(char):::ENTER
this has only one value
this.freqTable has only one value
v == 98
===========================================================================
org.apache.commons.math.stat.Frequency.getCumFreq(char):::EXIT
this.freqTable == orig(this.freqTable)
this.freqTable has only one value
return one of { 0, 2 }
===========================================================================
org.apache.commons.math.stat.Frequency.getCumFreq(int):::ENTER
this has only one value
this.freqTable has only one value
===========================================================================
org.apache.commons.math.stat.Frequency.getCumFreq(int):::EXIT
this.freqTable == orig(this.freqTable)
this.freqTable has only one value
return one of { 0, 3, 4 }
===========================================================================
org.apache.commons.math.stat.Frequency.getCumFreq(java.lang.Object):::ENTER
v != null
===========================================================================
org.apache.commons.math.stat.Frequency.getCumFreq(java.lang.Object):::EXIT325
this.freqTable has only one value
return == 0
orig(this) has only one value
orig(v) has only one value
orig(v.getClass().getName()) == java.lang.Character.class
===========================================================================
org.apache.commons.math.stat.Frequency.getCumFreq(java.lang.Object):::EXIT328
return one of { 2, 4 }
orig(v.getClass().getName()) == java.lang.Integer.class
===========================================================================
org.apache.commons.math.stat.Frequency.getCumFreq(java.lang.Object):::EXIT342
return == 0
orig(v.getClass().getName()) == java.lang.String.class
===========================================================================
org.apache.commons.math.stat.Frequency.getCumFreq(java.lang.Object):::EXIT346
return == 0
orig(v.getClass().getName()) == java.lang.Long.class
===========================================================================
org.apache.commons.math.stat.Frequency.getCumFreq(java.lang.Object):::EXIT350
===========================================================================
org.apache.commons.math.stat.Frequency.getCumFreq(java.lang.Object):::EXIT359
===========================================================================
org.apache.commons.math.stat.Frequency.getCumFreq(java.lang.Object):::EXIT
this.freqTable == orig(this.freqTable)
return >= 0
===========================================================================
org.apache.commons.math.stat.Frequency.getCumFreq(long):::ENTER
v one of { 1, 2 }
===========================================================================
org.apache.commons.math.stat.Frequency.getCumFreq(long):::EXIT
this.freqTable == orig(this.freqTable)
return one of { 2, 4 }
===========================================================================
org.apache.commons.math.stat.Frequency.getCumPct(char):::ENTER
v one of { 98, 101 }
===========================================================================
org.apache.commons.math.stat.Frequency.getCumPct(char):::EXIT
this.freqTable == orig(this.freqTable)
return one of { 0.5, 1.0, Double.NaN }
===========================================================================
org.apache.commons.math.stat.Frequency.getCumPct(int):::ENTER
===========================================================================
org.apache.commons.math.stat.Frequency.getCumPct(int):::EXIT
this.freqTable == orig(this.freqTable)
===========================================================================
org.apache.commons.math.stat.Frequency.getCumPct(java.lang.Object):::ENTER
v != null
===========================================================================
org.apache.commons.math.stat.Frequency.getCumPct(java.lang.Object):::EXIT417
this.freqTable has only one value
return == Double.NaN
orig(this) has only one value
orig(v) has only one value
orig(v.getClass().getName()) == java.lang.Character.class
===========================================================================
org.apache.commons.math.stat.Frequency.getCumPct(java.lang.Object):::EXIT419
===========================================================================
org.apache.commons.math.stat.Frequency.getCumPct(java.lang.Object):::EXIT
this.freqTable == orig(this.freqTable)
===========================================================================
org.apache.commons.math.stat.Frequency.getCumPct(long):::ENTER
this has only one value
this.freqTable has only one value
v == 3
===========================================================================
org.apache.commons.math.stat.Frequency.getCumPct(long):::EXIT
this.freqTable == orig(this.freqTable)
this.freqTable has only one value
return == 1.0
===========================================================================
org.apache.commons.math.stat.Frequency.getPct(char):::ENTER
v == 97
===========================================================================
org.apache.commons.math.stat.Frequency.getPct(char):::EXIT
this.freqTable == orig(this.freqTable)
return one of { 0.25, 0.5, Double.NaN }
===========================================================================
org.apache.commons.math.stat.Frequency.getPct(int):::ENTER
this has only one value
this.freqTable has only one value
v one of { 1, 5 }
===========================================================================
org.apache.commons.math.stat.Frequency.getPct(int):::EXIT
this.freqTable == orig(this.freqTable)
this.freqTable has only one value
return one of { 0.0, 0.25 }
===========================================================================
org.apache.commons.math.stat.Frequency.getPct(java.lang.Object):::ENTER
v != null
===========================================================================
org.apache.commons.math.stat.Frequency.getPct(java.lang.Object):::EXIT275
this.freqTable has only one value
return == Double.NaN
orig(this) has only one value
orig(v) has only one value
orig(v.getClass().getName()) == java.lang.Character.class
===========================================================================
org.apache.commons.math.stat.Frequency.getPct(java.lang.Object):::EXIT277
===========================================================================
org.apache.commons.math.stat.Frequency.getPct(java.lang.Object):::EXIT
this.freqTable == orig(this.freqTable)
===========================================================================
org.apache.commons.math.stat.Frequency.getPct(long):::ENTER
this has only one value
this.freqTable has only one value
v == 3
===========================================================================
org.apache.commons.math.stat.Frequency.getPct(long):::EXIT
this.freqTable == orig(this.freqTable)
this.freqTable has only one value
return == 0.5
===========================================================================
org.apache.commons.math.stat.Frequency.getSumFreq():::ENTER
===========================================================================
org.apache.commons.math.stat.Frequency.getSumFreq():::EXIT
this.freqTable == orig(this.freqTable)
===========================================================================
org.apache.commons.math.stat.Frequency.toString():::ENTER
this has only one value
this.freqTable has only one value
===========================================================================
org.apache.commons.math.stat.Frequency.toString():::EXIT
this.freqTable == orig(this.freqTable)
this.freqTable has only one value
return has only one value
return.toString == "Value \t Freq. \t Pct. \t Cum Pct. \n1\t2\t50%\t50%\n2\t2\t50%\t100%\n"
===========================================================================
org.apache.commons.math.stat.Frequency.valuesIterator():::ENTER
===========================================================================
org.apache.commons.math.stat.Frequency.valuesIterator():::EXIT
this.freqTable == orig(this.freqTable)
return != null
return.getClass().getName() == java.util.TreeMap$KeyIterator.class
===========================================================================
org.apache.commons.math.stat.FrequencyTest:::OBJECT
this.oneL == 1
this.twoL == 2
this.threeL == 3
this.oneI == 1
this.twoI == 2
this.threeI == 3
this.tolerance == 1.0E-14
this.f.freqTable != null
===========================================================================
org.apache.commons.math.stat.FrequencyTest.FrequencyTest(java.lang.String):::ENTER
name != null
===========================================================================
org.apache.commons.math.stat.FrequencyTest.FrequencyTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
this.f == null
===========================================================================
org.apache.commons.math.stat.FrequencyTest.setUp():::ENTER
this.f == null
===========================================================================
org.apache.commons.math.stat.FrequencyTest.setUp():::EXIT
this.oneL == orig(this.oneL)
this.twoL == orig(this.twoL)
this.threeL == orig(this.threeL)
this.oneI == orig(this.oneI)
this.twoI == orig(this.twoI)
this.threeI == orig(this.threeI)
this.tolerance == orig(this.tolerance)
===========================================================================
org.apache.commons.math.stat.FrequencyTest.suite():::EXIT
return.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.apache.commons.math.stat.FrequencyTest.testAdd():::ENTER
this has only one value
this.f has only one value
this.f.freqTable has only one value
===========================================================================
org.apache.commons.math.stat.FrequencyTest.testAdd():::EXIT
this.oneL == orig(this.oneL)
this.twoL == orig(this.twoL)
this.threeL == orig(this.threeL)
this.oneI == orig(this.oneI)
this.twoI == orig(this.twoI)
this.threeI == orig(this.threeI)
this.tolerance == orig(this.tolerance)
this.f has only one value
this.f.freqTable has only one value
===========================================================================
org.apache.commons.math.stat.FrequencyTest.testCounts():::ENTER
this has only one value
this.f has only one value
this.f.freqTable has only one value
===========================================================================
org.apache.commons.math.stat.FrequencyTest.testCounts():::EXIT
this.oneL == orig(this.oneL)
this.twoL == orig(this.twoL)
this.threeL == orig(this.threeL)
this.oneI == orig(this.oneI)
this.twoI == orig(this.twoI)
this.threeI == orig(this.threeI)
this.tolerance == orig(this.tolerance)
this.f == null
===========================================================================
org.apache.commons.math.stat.FrequencyTest.testIntegerValues():::ENTER
this has only one value
this.f has only one value
this.f.freqTable has only one value
===========================================================================
org.apache.commons.math.stat.FrequencyTest.testIntegerValues():::EXIT
this.oneL == orig(this.oneL)
this.twoL == orig(this.twoL)
this.threeL == orig(this.threeL)
this.oneI == orig(this.oneI)
this.twoI == orig(this.twoI)
this.threeI == orig(this.threeI)
this.tolerance == orig(this.tolerance)
this.f == orig(this.f)
this.f.freqTable == orig(this.f.freqTable)
this.f has only one value
this.f.freqTable has only one value
===========================================================================
org.apache.commons.math.stat.FrequencyTest.testPcts():::ENTER
this has only one value
this.f has only one value
this.f.freqTable has only one value
===========================================================================
org.apache.commons.math.stat.FrequencyTest.testPcts():::EXIT
this.oneL == orig(this.oneL)
this.twoL == orig(this.twoL)
this.threeL == orig(this.threeL)
this.oneI == orig(this.oneI)
this.twoI == orig(this.twoI)
this.threeI == orig(this.threeI)
this.tolerance == orig(this.tolerance)
this.f == orig(this.f)
this.f.freqTable == orig(this.f.freqTable)
this.f has only one value
this.f.freqTable has only one value
===========================================================================
org.apache.commons.math.stat.FrequencyTest.testToString():::ENTER
this has only one value
this.f has only one value
this.f.freqTable has only one value
===========================================================================
org.apache.commons.math.stat.FrequencyTest.testToString():::EXIT
this.oneL == orig(this.oneL)
this.twoL == orig(this.twoL)
this.threeL == orig(this.threeL)
this.oneI == orig(this.oneI)
this.twoI == orig(this.twoI)
this.threeI == orig(this.threeI)
this.tolerance == orig(this.tolerance)
this.f == orig(this.f)
this.f.freqTable == orig(this.f.freqTable)
this.f has only one value
this.f.freqTable has only one value
