===========================================================================
org.apache.commons.math.analysis.solvers.AbstractUnivariateRealSolver:::CLASS
===========================================================================
org.apache.commons.math.analysis.solvers.AbstractUnivariateRealSolver:::OBJECT
this has only one value
this.getClass().getName() == org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver.class
this.functionValueAccuracy == 1.0E-22
this.absoluteAccuracy == 1.0E-10
this.relativeAccuracy == 1.0E-12
this.evaluations has only one value
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.evaluations.maxCountCallback has only one value
this.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math.util.Incrementor$1.class
this.searchMin == 0.0
this.searchMax == 0.0
this.searchStart == 0.0
this.function == null
===========================================================================
org.apache.commons.math.analysis.solvers.AbstractUnivariateRealSolver.AbstractUnivariateRealSolver(double, double, double):::ENTER
relativeAccuracy == 1.0E-12
absoluteAccuracy == 1.0E-10
functionValueAccuracy == 1.0E-22
===========================================================================
org.apache.commons.math.analysis.solvers.AbstractUnivariateRealSolver.AbstractUnivariateRealSolver(double, double, double):::EXIT
===========================================================================
org.apache.commons.math.analysis.solvers.AllowedSolution:::OBJECT
===========================================================================
org.apache.commons.math.analysis.solvers.AllowedSolution.AllowedSolution(java.lang.String, int):::ENTER
===========================================================================
org.apache.commons.math.analysis.solvers.AllowedSolution.AllowedSolution(java.lang.String, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver:::CLASS
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver:::OBJECT
this has only one value
this.getClass().getName() == org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver.class
this.functionValueAccuracy == 1.0E-22
this.absoluteAccuracy == 1.0E-10
this.relativeAccuracy == 1.0E-12
this.evaluations has only one value
this.evaluations.maximalCount one of { 0, 100 }
this.evaluations.count >= 0
this.evaluations.maxCountCallback has only one value
this.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math.util.Incrementor$1.class
this.searchMin one of { -0.9999999, 0.0 }
this.searchMax one of { 0.0, 30.0 }
this.searchStart one of { 0.0, 15.0 }
this.function.getClass().getName() == org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest$1.class
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.BaseAbstractUnivariateRealSolver(double, double, double):::ENTER
relativeAccuracy == 1.0E-12
absoluteAccuracy == 1.0E-10
functionValueAccuracy == 1.0E-22
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.BaseAbstractUnivariateRealSolver(double, double, double):::EXIT
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.searchMin == 0.0
this.searchMax == 0.0
this.searchStart == 0.0
this.function == null
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.computeObjectiveValue(double):::ENTER
this.evaluations.maximalCount == 100
this.searchMin == -0.9999999
this.searchMax == 30.0
this.searchStart == 15.0
this.function has only one value
point one of { -0.9999999, 15.0 }
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.computeObjectiveValue(double):::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 100
this.searchMin == -0.9999999
this.searchMax == 30.0
this.searchStart == 15.0
this.function has only one value
return one of { -0.009999998005263558, 1.9375E-9 }
this.evaluations.count - orig(this.evaluations.count) - 1 == 0
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getAbsoluteAccuracy():::ENTER
this.evaluations.maximalCount == 100
this.searchMin == -0.9999999
this.searchMax == 30.0
this.searchStart == 15.0
this.function has only one value
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getAbsoluteAccuracy():::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 100
this.searchMin == -0.9999999
this.searchMax == 30.0
this.searchStart == 15.0
this.function has only one value
return == 1.0E-10
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getFunctionValueAccuracy():::ENTER
this.evaluations.maximalCount == 100
this.searchMin == -0.9999999
this.searchMax == 30.0
this.searchStart == 15.0
this.function has only one value
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getFunctionValueAccuracy():::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 100
this.searchMin == -0.9999999
this.searchMax == 30.0
this.searchStart == 15.0
this.function has only one value
return == 1.0E-22
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getMax():::ENTER
this.evaluations.maximalCount == 100
this.evaluations.count == 0
this.searchMin == -0.9999999
this.searchMax == 30.0
this.searchStart == 15.0
this.function has only one value
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getMax():::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 100
this.evaluations.count == 0
this.searchMin == -0.9999999
this.searchMax == 30.0
this.searchStart == 15.0
this.function has only one value
return == 30.0
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getMin():::ENTER
this.evaluations.maximalCount == 100
this.evaluations.count == 0
this.searchMin == -0.9999999
this.searchMax == 30.0
this.searchStart == 15.0
this.function has only one value
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getMin():::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 100
this.evaluations.count == 0
this.searchMin == -0.9999999
this.searchMax == 30.0
this.searchStart == 15.0
this.function has only one value
return == -0.9999999
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getRelativeAccuracy():::ENTER
this.evaluations.maximalCount == 100
this.searchMin == -0.9999999
this.searchMax == 30.0
this.searchStart == 15.0
this.function has only one value
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getRelativeAccuracy():::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 100
this.searchMin == -0.9999999
this.searchMax == 30.0
this.searchStart == 15.0
this.function has only one value
return == 1.0E-12
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getStartValue():::ENTER
this.evaluations.maximalCount == 100
this.evaluations.count == 0
this.searchMin == -0.9999999
this.searchMax == 30.0
this.searchStart == 15.0
this.function has only one value
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getStartValue():::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 100
this.evaluations.count == 0
this.searchMin == -0.9999999
this.searchMax == 30.0
this.searchStart == 15.0
this.function has only one value
return == 15.0
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.incrementEvaluationCount():::ENTER
this.evaluations.maximalCount == 100
this.searchMin == -0.9999999
this.searchMax == 30.0
this.searchStart == 15.0
this.function has only one value
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.incrementEvaluationCount():::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 100
this.searchMin == -0.9999999
this.searchMax == 30.0
this.searchStart == 15.0
this.function has only one value
this.evaluations.count - orig(this.evaluations.count) - 1 == 0
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.setup(int, org.apache.commons.math.analysis.UnivariateFunction, double, double, double):::ENTER
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.searchMin == 0.0
this.searchMax == 0.0
this.searchStart == 0.0
this.function == null
maxEval == 100
f has only one value
f.getClass().getName() == org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest$1.class
min == -0.9999999
max == 30.0
startValue == 15.0
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.setup(int, org.apache.commons.math.analysis.UnivariateFunction, double, double, double):::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.evaluations.maximalCount == 100
this.evaluations.count == 0
this.searchMin == -0.9999999
this.searchMax == 30.0
this.searchStart == 15.0
this.function has only one value
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.verifySequence(double, double, double):::ENTER
this.evaluations.maximalCount == 100
this.evaluations.count == 0
this.searchMin == -0.9999999
this.searchMax == 30.0
this.searchStart == 15.0
this.function has only one value
lower == -0.9999999
initial == 15.0
upper == 30.0
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.verifySequence(double, double, double):::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 100
this.evaluations.count == 0
this.searchMin == -0.9999999
this.searchMax == 30.0
this.searchStart == 15.0
this.function has only one value
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest:::OBJECT
this has only one value
this.getClass().getName() == org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest.class
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest.BaseSecantSolverAbstractTest():::EXIT
===========================================================================
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:::CLASS
===========================================================================
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:::OBJECT
this has only one value
this.maximalOrder == 5
this.allowed has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.ANY_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.LEFT_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.RIGHT_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.BELOW_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.ABOVE_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES.getClass().getName() == org.apache.commons.math.analysis.solvers.AllowedSolution[].class
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[] contains no nulls and has only one value, of length 5
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[].getClass().getName() == [org.apache.commons.math.analysis.solvers.AllowedSolution, org.apache.commons.math.analysis.solvers.AllowedSolution, org.apache.commons.math.analysis.solvers.AllowedSolution, org.apache.commons.math.analysis.solvers.AllowedSolution, org.apache.commons.math.analysis.solvers.AllowedSolution]
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[].getClass().getName() elements == org.apache.commons.math.analysis.solvers.AllowedSolution.class
this.functionValueAccuracy == 1.0E-22
this.absoluteAccuracy == 1.0E-10
this.relativeAccuracy == 1.0E-12
this.evaluations has only one value
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.evaluations.maxCountCallback has only one value
this.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math.util.Incrementor$1.class
this.searchMin == 0.0
this.searchMax == 0.0
this.searchStart == 0.0
this.function == null
size(org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[]) == 5
===========================================================================
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver.BracketingNthOrderBrentSolver(double, double, double, int):::ENTER
relativeAccuracy == 1.0E-12
absoluteAccuracy == 1.0E-10
functionValueAccuracy == 1.0E-22
maximalOrder == 5
===========================================================================
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver.BracketingNthOrderBrentSolver(double, double, double, int):::EXIT
===========================================================================
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest$1:::OBJECT
this has only one value
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest.this has only one value
===========================================================================
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest$1.(org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest):::ENTER
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest.this has only one value
===========================================================================
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest$1.(org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest):::EXIT
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest.this == orig(org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest.this)
===========================================================================
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest$1.value(double):::ENTER
x one of { -0.9999999, 15.0 }
===========================================================================
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest$1.value(double):::EXIT
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest.this == orig(org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest.this)
return one of { -0.009999998005263558, 1.9375E-9 }
===========================================================================
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest.BracketingNthOrderBrentSolverTest():::EXIT
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.verifyInterval(double, double):::ENTER
lower one of { -0.9999999, 15.0 }
upper one of { 15.0, 30.0 }
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.verifyInterval(double, double):::EXIT
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.verifySequence(double, double, double):::ENTER
lower == -0.9999999
initial == 15.0
upper == 30.0
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.verifySequence(double, double, double):::EXIT
===========================================================================
org.apache.commons.math.exception.MathIllegalStateException:::CLASS
===========================================================================
org.apache.commons.math.exception.MathIllegalStateException:::OBJECT
this.context.msgPatterns[].getClass().getName() elements == org.apache.commons.math.exception.util.LocalizedFormats.class
this.context.msgPatterns[].getClass().getName() one of { [org.apache.commons.math.exception.util.LocalizedFormats], [org.apache.commons.math.exception.util.LocalizedFormats, org.apache.commons.math.exception.util.LocalizedFormats] }
this.context.msgPatterns.getClass().getName() == java.util.ArrayList.class
this.context.msgArguments[].getClass().getName() elements == java.lang.Object[].class
this.context.msgArguments[].getClass().getName() one of { [java.lang.Object[]], [java.lang.Object[], java.lang.Object[]] }
this.context.msgArguments.getClass().getName() == java.util.ArrayList.class
this.context.context.getClass().getName() == java.util.HashMap.class
size(this.context.msgPatterns[]) one of { 1, 2 }
size(this.context.msgArguments[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.exception.MathIllegalStateException.MathIllegalStateException():::EXIT
this.context.msgPatterns[] contains no nulls and has only one value, of length 1
this.context.msgPatterns[] elements has only one value
this.context.msgPatterns[].getClass().getName() == [org.apache.commons.math.exception.util.LocalizedFormats]
this.context.msgArguments[].getClass().getName() == [java.lang.Object[]]
size(this.context.msgPatterns[]) == 1
size(this.context.msgArguments[]) == 1
===========================================================================
org.apache.commons.math.exception.MathIllegalStateException.MathIllegalStateException(org.apache.commons.math.exception.util.Localizable, java.lang.Object[]):::ENTER
pattern has only one value
pattern.getClass().getName() == org.apache.commons.math.exception.util.LocalizedFormats.class
args.getClass().getName() == java.lang.Object[].class
args[] == []
===========================================================================
org.apache.commons.math.exception.MathIllegalStateException.MathIllegalStateException(org.apache.commons.math.exception.util.Localizable, java.lang.Object[]):::EXIT
args[] == orig(args[])
this.context.msgPatterns[] contains no nulls and has only one value, of length 1
this.context.msgPatterns[] elements has only one value
this.context.msgPatterns[].getClass().getName() == [org.apache.commons.math.exception.util.LocalizedFormats]
this.context.msgArguments[].getClass().getName() == [java.lang.Object[]]
args[] == []
size(this.context.msgPatterns[]) == 1
size(this.context.msgArguments[]) == 1
===========================================================================
org.apache.commons.math.exception.MathIllegalStateException.getContext():::ENTER
===========================================================================
org.apache.commons.math.exception.MathIllegalStateException.getContext():::EXIT
this.context == orig(this.context)
this.context.throwable == orig(this.context.throwable)
this.context.msgPatterns == orig(this.context.msgPatterns)
this.context.msgPatterns[] == orig(this.context.msgPatterns[])
this.context.msgPatterns.getClass().getName() == orig(this.context.msgPatterns.getClass().getName())
this.context.msgArguments == orig(this.context.msgArguments)
this.context.msgArguments[] == orig(this.context.msgArguments[])
this.context.msgArguments.getClass().getName() == orig(this.context.msgArguments.getClass().getName())
this.context.context == orig(this.context.context)
this.context.context.getClass().getName() == orig(this.context.context.getClass().getName())
return.msgPatterns[].getClass().getName() elements == org.apache.commons.math.exception.util.LocalizedFormats.class
return.msgPatterns[].getClass().getName() one of { [org.apache.commons.math.exception.util.LocalizedFormats], [org.apache.commons.math.exception.util.LocalizedFormats, org.apache.commons.math.exception.util.LocalizedFormats] }
return.msgPatterns.getClass().getName() == java.util.ArrayList.class
return.msgArguments[].getClass().getName() elements == java.lang.Object[].class
return.msgArguments[].getClass().getName() one of { [java.lang.Object[]], [java.lang.Object[], java.lang.Object[]] }
return.msgArguments.getClass().getName() == java.util.ArrayList.class
return.context.getClass().getName() == java.util.HashMap.class
size(return.msgPatterns[]) one of { 1, 2 }
size(return.msgArguments[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.exception.MaxCountExceededException:::CLASS
===========================================================================
org.apache.commons.math.exception.MaxCountExceededException:::OBJECT
this.max has only one value
this.max.getClass().getName() == java.lang.Integer.class
this.context.msgPatterns[] contains no nulls and has only one value, of length 2
this.context.msgPatterns[].getClass().getName() == [org.apache.commons.math.exception.util.LocalizedFormats, org.apache.commons.math.exception.util.LocalizedFormats]
this.context.msgPatterns[].getClass().getName() elements == org.apache.commons.math.exception.util.LocalizedFormats.class
this.context.msgPatterns.getClass().getName() == java.util.ArrayList.class
this.context.msgArguments[].getClass().getName() == [java.lang.Object[], java.lang.Object[]]
this.context.msgArguments[].getClass().getName() elements == java.lang.Object[].class
this.context.msgArguments.getClass().getName() == java.util.ArrayList.class
this.context.context.getClass().getName() == java.util.HashMap.class
size(this.context.msgPatterns[]) == 2
size(this.context.msgArguments[]) == 2
===========================================================================
org.apache.commons.math.exception.MaxCountExceededException.MaxCountExceededException(java.lang.Number):::ENTER
max has only one value
max.getClass().getName() == java.lang.Integer.class
===========================================================================
org.apache.commons.math.exception.MaxCountExceededException.MaxCountExceededException(java.lang.Number):::EXIT
===========================================================================
org.apache.commons.math.exception.MaxCountExceededException.MaxCountExceededException(org.apache.commons.math.exception.util.Localizable, java.lang.Number, java.lang.Object[]):::ENTER
specific has only one value
specific.getClass().getName() == org.apache.commons.math.exception.util.LocalizedFormats.class
max has only one value
max.getClass().getName() == java.lang.Integer.class
args.getClass().getName() == java.lang.Object[].class
args[] == []
===========================================================================
org.apache.commons.math.exception.MaxCountExceededException.MaxCountExceededException(org.apache.commons.math.exception.util.Localizable, java.lang.Number, java.lang.Object[]):::EXIT
args[] == orig(args[])
args[] == []
===========================================================================
org.apache.commons.math.exception.MaxCountExceededException.getMax():::ENTER
this has only one value
this.context has only one value
this.context.throwable has only one value
this.context.msgPatterns has only one value
this.context.msgArguments has only one value
this.context.msgArguments[] contains no nulls and has only one value, of length 2
this.context.context has only one value
===========================================================================
org.apache.commons.math.exception.MaxCountExceededException.getMax():::EXIT
this.max == orig(this.max)
this.max.getClass().getName() == orig(this.max.getClass().getName())
this.context == orig(this.context)
this.context.throwable == orig(this.context.throwable)
this.context.msgPatterns == orig(this.context.msgPatterns)
this.context.msgPatterns[] == orig(this.context.msgPatterns[])
this.context.msgPatterns.getClass().getName() == orig(this.context.msgPatterns.getClass().getName())
this.context.msgArguments == orig(this.context.msgArguments)
this.context.msgArguments[] == orig(this.context.msgArguments[])
this.context.msgArguments.getClass().getName() == orig(this.context.msgArguments.getClass().getName())
this.context.context == orig(this.context.context)
this.context.context.getClass().getName() == orig(this.context.context.getClass().getName())
this.context has only one value
this.context.throwable has only one value
this.context.msgPatterns has only one value
this.context.msgArguments has only one value
this.context.msgArguments[] contains no nulls and has only one value, of length 2
this.context.context has only one value
return has only one value
return.getClass().getName() == java.lang.Integer.class
===========================================================================
org.apache.commons.math.exception.TooManyEvaluationsException:::CLASS
===========================================================================
org.apache.commons.math.exception.TooManyEvaluationsException:::OBJECT
this has only one value
this.max has only one value
this.max.getClass().getName() == java.lang.Integer.class
this.context has only one value
this.context.throwable has only one value
this.context.msgPatterns has only one value
this.context.msgPatterns[] contains no nulls and has only one value, of length 3
this.context.msgPatterns[].getClass().getName() == [org.apache.commons.math.exception.util.LocalizedFormats, org.apache.commons.math.exception.util.LocalizedFormats, org.apache.commons.math.exception.util.LocalizedFormats]
this.context.msgPatterns[].getClass().getName() elements == org.apache.commons.math.exception.util.LocalizedFormats.class
this.context.msgPatterns.getClass().getName() == java.util.ArrayList.class
this.context.msgArguments has only one value
this.context.msgArguments[] contains no nulls and has only one value, of length 3
this.context.msgArguments[].getClass().getName() == [java.lang.Object[], java.lang.Object[], java.lang.Object[]]
this.context.msgArguments[].getClass().getName() elements == java.lang.Object[].class
this.context.msgArguments.getClass().getName() == java.util.ArrayList.class
this.context.context has only one value
this.context.context.getClass().getName() == java.util.HashMap.class
size(this.context.msgPatterns[]) == 3
size(this.context.msgArguments[]) == 3
===========================================================================
org.apache.commons.math.exception.TooManyEvaluationsException.TooManyEvaluationsException(java.lang.Number):::ENTER
max has only one value
max.getClass().getName() == java.lang.Integer.class
===========================================================================
org.apache.commons.math.exception.TooManyEvaluationsException.TooManyEvaluationsException(java.lang.Number):::EXIT
===========================================================================
org.apache.commons.math.exception.util.ArgUtils.flatten(java.lang.Object[]):::ENTER
array.getClass().getName() == java.lang.Object[].class
size(array[]) one of { 0, 2 }
===========================================================================
org.apache.commons.math.exception.util.ArgUtils.flatten(java.lang.Object[]):::EXIT
array[] == orig(array[])
return.getClass().getName() == java.lang.Object[].class
return[] elements has only one value
size(return[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math.exception.util.ExceptionContext:::CLASS
===========================================================================
org.apache.commons.math.exception.util.ExceptionContext:::OBJECT
this.msgPatterns[] elements != null
this.msgPatterns[].getClass().getName() elements == org.apache.commons.math.exception.util.LocalizedFormats.class
this.msgPatterns.getClass().getName() == java.util.ArrayList.class
this.msgArguments[] elements != null
this.msgArguments[].getClass().getName() elements == java.lang.Object[].class
this.msgArguments.getClass().getName() == java.util.ArrayList.class
this.context.getClass().getName() == java.util.HashMap.class
===========================================================================
org.apache.commons.math.exception.util.ExceptionContext.ExceptionContext(java.lang.Throwable):::ENTER
===========================================================================
org.apache.commons.math.exception.util.ExceptionContext.ExceptionContext(java.lang.Throwable):::EXIT
this.msgPatterns[] == []
this.msgPatterns[].getClass().getName() == []
this.msgArguments[] == []
this.msgArguments[].getClass().getName() == []
===========================================================================
org.apache.commons.math.exception.util.ExceptionContext.addMessage(org.apache.commons.math.exception.util.Localizable, java.lang.Object[]):::ENTER
pattern.getClass().getName() == org.apache.commons.math.exception.util.LocalizedFormats.class
arguments.getClass().getName() == java.lang.Object[].class
size(this.msgPatterns[]) one of { 0, 1, 2 }
size(this.msgArguments[]) one of { 0, 1, 2 }
size(arguments[]) one of { 0, 2 }
===========================================================================
org.apache.commons.math.exception.util.ExceptionContext.addMessage(org.apache.commons.math.exception.util.Localizable, java.lang.Object[]):::EXIT
this.throwable == orig(this.throwable)
this.msgPatterns == orig(this.msgPatterns)
this.msgPatterns.getClass().getName() == orig(this.msgPatterns.getClass().getName())
this.msgArguments == orig(this.msgArguments)
this.msgArguments.getClass().getName() == orig(this.msgArguments.getClass().getName())
this.context == orig(this.context)
this.context.getClass().getName() == orig(this.context.getClass().getName())
arguments[] == orig(arguments[])
size(this.msgPatterns[])-1 == orig(size(this.msgPatterns[]))
size(this.msgArguments[])-1 == orig(size(this.msgArguments[]))
size(this.msgPatterns[]) one of { 1, 2, 3 }
size(this.msgArguments[]) one of { 1, 2, 3 }
===========================================================================
org.apache.commons.math.exception.util.LocalizedFormats:::OBJECT
===========================================================================
org.apache.commons.math.exception.util.LocalizedFormats.LocalizedFormats(java.lang.String, int, java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.exception.util.LocalizedFormats.LocalizedFormats(java.lang.String, int, java.lang.String):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
sourceFormat.toString == orig(sourceFormat.toString)
===========================================================================
org.apache.commons.math.util.Incrementor$1:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math.util.Incrementor$1.():::EXIT
===========================================================================
org.apache.commons.math.util.Incrementor:::OBJECT
this has only one value
this.maximalCount one of { 0, 100 }
this.count >= 0
this.maxCountCallback has only one value
this.maxCountCallback.getClass().getName() == org.apache.commons.math.util.Incrementor$1.class
===========================================================================
org.apache.commons.math.util.Incrementor.Incrementor():::EXIT
this.maximalCount == 0
this.count == 0
===========================================================================
org.apache.commons.math.util.Incrementor.Incrementor(int):::ENTER
max == 0
===========================================================================
org.apache.commons.math.util.Incrementor.Incrementor(int):::EXIT
this.maximalCount == 0
this.count == 0
===========================================================================
org.apache.commons.math.util.Incrementor.Incrementor(int, org.apache.commons.math.util.Incrementor$MaxCountExceededCallback):::ENTER
max == 0
cb has only one value
cb.getClass().getName() == org.apache.commons.math.util.Incrementor$1.class
===========================================================================
org.apache.commons.math.util.Incrementor.Incrementor(int, org.apache.commons.math.util.Incrementor$MaxCountExceededCallback):::EXIT
this.maximalCount == 0
this.count == 0
===========================================================================
org.apache.commons.math.util.Incrementor.incrementCount():::ENTER
this.maximalCount == 100
===========================================================================
org.apache.commons.math.util.Incrementor.incrementCount():::EXIT
this.maximalCount == orig(this.maximalCount)
this.maxCountCallback == orig(this.maxCountCallback)
this.maxCountCallback.getClass().getName() == orig(this.maxCountCallback.getClass().getName())
this.maximalCount == 100
this.count - orig(this.count) - 1 == 0
===========================================================================
org.apache.commons.math.util.Incrementor.resetCount():::ENTER
this.maximalCount == 100
this.count == 0
===========================================================================
org.apache.commons.math.util.Incrementor.resetCount():::EXIT
this.maximalCount == orig(this.maximalCount)
this.count == orig(this.count)
this.maxCountCallback == orig(this.maxCountCallback)
this.maxCountCallback.getClass().getName() == orig(this.maxCountCallback.getClass().getName())
this.maximalCount == 100
this.count == 0
===========================================================================
org.apache.commons.math.util.Incrementor.setMaximalCount(int):::ENTER
this.maximalCount == 0
this.count == 0
max == 100
===========================================================================
org.apache.commons.math.util.Incrementor.setMaximalCount(int):::EXIT
this.count == orig(this.count)
this.maxCountCallback == orig(this.maxCountCallback)
this.maxCountCallback.getClass().getName() == orig(this.maxCountCallback.getClass().getName())
this.maximalCount == 100
this.count == 0
===========================================================================
org.apache.commons.math.util.MathUtils:::CLASS
===========================================================================
org.apache.commons.math.util.MathUtils.checkNotNull(java.lang.Object):::ENTER
o has only one value
o.getClass().getName() == org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest$1.class
===========================================================================
org.apache.commons.math.util.MathUtils.checkNotNull(java.lang.Object):::EXIT
===========================================================================
org.apache.commons.math.util.Precision:::CLASS
===========================================================================
org.apache.commons.math.util.Precision.equals(double, double, int):::ENTER
x one of { -0.009999998005263558, 1.9375E-9 }
y == 0.0
maxUlps == 1
===========================================================================
org.apache.commons.math.util.Precision.equals(double, double, int):::EXIT
return == false
===========================================================================
org.apache.commons.math.util.Precision.equals(double, double, int):::EXIT;condition="not(return == true)"
