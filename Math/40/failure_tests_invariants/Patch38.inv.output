===========================================================================
org.apache.commons.math.analysis.solvers.AbstractUnivariateRealSolver:::CLASS
===========================================================================
org.apache.commons.math.analysis.solvers.AbstractUnivariateRealSolver:::OBJECT
this has only one value
this.getClass().getName() == org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver.class
this.functionValueAccuracy == 1.0E-22
this.absoluteAccuracy == 1.0E-10
this.relativeAccuracy == 1.0E-12
this.evaluations has only one value
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.evaluations.maxCountCallback has only one value
this.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math.util.Incrementor$1.class
this.searchMin == 0.0
this.searchMax == 0.0
this.searchStart == 0.0
this.function == null
===========================================================================
org.apache.commons.math.analysis.solvers.AbstractUnivariateRealSolver.AbstractUnivariateRealSolver(double, double, double):::ENTER
relativeAccuracy == 1.0E-12
absoluteAccuracy == 1.0E-10
functionValueAccuracy == 1.0E-22
===========================================================================
org.apache.commons.math.analysis.solvers.AbstractUnivariateRealSolver.AbstractUnivariateRealSolver(double, double, double):::EXIT
===========================================================================
org.apache.commons.math.analysis.solvers.AllowedSolution:::OBJECT
===========================================================================
org.apache.commons.math.analysis.solvers.AllowedSolution.AllowedSolution(java.lang.String, int):::ENTER
===========================================================================
org.apache.commons.math.analysis.solvers.AllowedSolution.AllowedSolution(java.lang.String, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver:::CLASS
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver:::OBJECT
this has only one value
this.getClass().getName() == org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver.class
this.functionValueAccuracy == 1.0E-22
this.absoluteAccuracy == 1.0E-10
this.relativeAccuracy == 1.0E-12
this.evaluations has only one value
this.evaluations.maximalCount one of { 0, 100 }
this.evaluations.count >= 0
this.evaluations.maxCountCallback has only one value
this.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math.util.Incrementor$1.class
this.searchMin one of { -0.9999999, 0.0 }
this.searchMax one of { 0.0, 30.0 }
this.searchStart one of { 0.0, 15.0 }
this.function.getClass().getName() == org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest$1.class
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.BaseAbstractUnivariateRealSolver(double, double, double):::ENTER
relativeAccuracy == 1.0E-12
absoluteAccuracy == 1.0E-10
functionValueAccuracy == 1.0E-22
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.BaseAbstractUnivariateRealSolver(double, double, double):::EXIT
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.searchMin == 0.0
this.searchMax == 0.0
this.searchStart == 0.0
this.function == null
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.computeObjectiveValue(double):::ENTER
this.evaluations.maximalCount == 100
this.searchMin == -0.9999999
this.searchMax == 30.0
this.searchStart == 15.0
this.function has only one value
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.computeObjectiveValue(double):::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 100
this.searchMin == -0.9999999
this.searchMax == 30.0
this.searchStart == 15.0
this.function has only one value
this.evaluations.count - orig(this.evaluations.count) - 1 == 0
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getAbsoluteAccuracy():::ENTER
this.evaluations.maximalCount == 100
this.searchMin == -0.9999999
this.searchMax == 30.0
this.searchStart == 15.0
this.function has only one value
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getAbsoluteAccuracy():::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 100
this.searchMin == -0.9999999
this.searchMax == 30.0
this.searchStart == 15.0
this.function has only one value
return == 1.0E-10
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getFunctionValueAccuracy():::ENTER
this.evaluations.maximalCount == 100
this.searchMin == -0.9999999
this.searchMax == 30.0
this.searchStart == 15.0
this.function has only one value
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getFunctionValueAccuracy():::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 100
this.searchMin == -0.9999999
this.searchMax == 30.0
this.searchStart == 15.0
this.function has only one value
return == 1.0E-22
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getMax():::ENTER
this.evaluations.maximalCount == 100
this.evaluations.count == 0
this.searchMin == -0.9999999
this.searchMax == 30.0
this.searchStart == 15.0
this.function has only one value
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getMax():::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 100
this.evaluations.count == 0
this.searchMin == -0.9999999
this.searchMax == 30.0
this.searchStart == 15.0
this.function has only one value
return == 30.0
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getMin():::ENTER
this.evaluations.maximalCount == 100
this.evaluations.count == 0
this.searchMin == -0.9999999
this.searchMax == 30.0
this.searchStart == 15.0
this.function has only one value
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getMin():::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 100
this.evaluations.count == 0
this.searchMin == -0.9999999
this.searchMax == 30.0
this.searchStart == 15.0
this.function has only one value
return == -0.9999999
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getRelativeAccuracy():::ENTER
this.evaluations.maximalCount == 100
this.searchMin == -0.9999999
this.searchMax == 30.0
this.searchStart == 15.0
this.function has only one value
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getRelativeAccuracy():::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 100
this.searchMin == -0.9999999
this.searchMax == 30.0
this.searchStart == 15.0
this.function has only one value
return == 1.0E-12
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getStartValue():::ENTER
this.evaluations.maximalCount == 100
this.evaluations.count == 0
this.searchMin == -0.9999999
this.searchMax == 30.0
this.searchStart == 15.0
this.function has only one value
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.getStartValue():::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 100
this.evaluations.count == 0
this.searchMin == -0.9999999
this.searchMax == 30.0
this.searchStart == 15.0
this.function has only one value
return == 15.0
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.incrementEvaluationCount():::ENTER
this.evaluations.maximalCount == 100
this.searchMin == -0.9999999
this.searchMax == 30.0
this.searchStart == 15.0
this.function has only one value
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.incrementEvaluationCount():::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 100
this.searchMin == -0.9999999
this.searchMax == 30.0
this.searchStart == 15.0
this.function has only one value
this.evaluations.count - orig(this.evaluations.count) - 1 == 0
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.setup(int, org.apache.commons.math.analysis.UnivariateFunction, double, double, double):::ENTER
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.searchMin == 0.0
this.searchMax == 0.0
this.searchStart == 0.0
this.function == null
maxEval == 100
f has only one value
f.getClass().getName() == org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest$1.class
min == -0.9999999
max == 30.0
startValue == 15.0
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.setup(int, org.apache.commons.math.analysis.UnivariateFunction, double, double, double):::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.evaluations.maximalCount == 100
this.evaluations.count == 0
this.searchMin == -0.9999999
this.searchMax == 30.0
this.searchStart == 15.0
this.function has only one value
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.solve(int, org.apache.commons.math.analysis.UnivariateFunction, double, double, double):::ENTER
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.searchMin == 0.0
this.searchMax == 0.0
this.searchStart == 0.0
this.function == null
maxEval == 100
f has only one value
f.getClass().getName() == org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest$1.class
min == -0.9999999
max == 30.0
startValue == 15.0
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.solve(int, org.apache.commons.math.analysis.UnivariateFunction, double, double, double):::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.evaluations.maximalCount == 100
this.evaluations.count == 16
this.searchMin == -0.9999999
this.searchMax == 30.0
this.searchStart == 15.0
this.function has only one value
return == -0.5
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.verifySequence(double, double, double):::ENTER
this.evaluations.maximalCount == 100
this.evaluations.count == 0
this.searchMin == -0.9999999
this.searchMax == 30.0
this.searchStart == 15.0
this.function has only one value
lower == -0.9999999
initial == 15.0
upper == 30.0
===========================================================================
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.verifySequence(double, double, double):::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount == 100
this.evaluations.count == 0
this.searchMin == -0.9999999
this.searchMax == 30.0
this.searchStart == 15.0
this.function has only one value
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest:::OBJECT
this has only one value
this.getClass().getName() == org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest.class
===========================================================================
org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest.BaseSecantSolverAbstractTest():::EXIT
===========================================================================
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:::CLASS
===========================================================================
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:::OBJECT
this has only one value
this.maximalOrder == 5
this.allowed has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.ANY_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.LEFT_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.RIGHT_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.BELOW_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.ABOVE_SIDE has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES has only one value
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES.getClass().getName() == org.apache.commons.math.analysis.solvers.AllowedSolution[].class
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[] contains no nulls and has only one value, of length 5
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[].getClass().getName() == [org.apache.commons.math.analysis.solvers.AllowedSolution, org.apache.commons.math.analysis.solvers.AllowedSolution, org.apache.commons.math.analysis.solvers.AllowedSolution, org.apache.commons.math.analysis.solvers.AllowedSolution, org.apache.commons.math.analysis.solvers.AllowedSolution]
org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[].getClass().getName() elements == org.apache.commons.math.analysis.solvers.AllowedSolution.class
this.functionValueAccuracy == 1.0E-22
this.absoluteAccuracy == 1.0E-10
this.relativeAccuracy == 1.0E-12
this.evaluations has only one value
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.evaluations.maxCountCallback has only one value
this.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math.util.Incrementor$1.class
this.searchMin == 0.0
this.searchMax == 0.0
this.searchStart == 0.0
this.function == null
size(org.apache.commons.math.analysis.solvers.AllowedSolution.$VALUES[]) == 5
===========================================================================
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver.BracketingNthOrderBrentSolver(double, double, double, int):::ENTER
relativeAccuracy == 1.0E-12
absoluteAccuracy == 1.0E-10
functionValueAccuracy == 1.0E-22
maximalOrder == 5
===========================================================================
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver.BracketingNthOrderBrentSolver(double, double, double, int):::EXIT
===========================================================================
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest$1:::OBJECT
this has only one value
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest.this has only one value
===========================================================================
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest$1.(org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest):::ENTER
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest.this has only one value
===========================================================================
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest$1.(org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest):::EXIT
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest.this == orig(org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest.this)
===========================================================================
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest$1.value(double):::ENTER
===========================================================================
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest$1.value(double):::EXIT
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest.this == orig(org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest.this)
===========================================================================
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest.BracketingNthOrderBrentSolverTest():::EXIT
===========================================================================
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest.testIssue716():::ENTER
===========================================================================
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest.testIssue716():::EXIT
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.verifyInterval(double, double):::ENTER
lower one of { -0.9999999, 15.0 }
upper one of { 15.0, 30.0 }
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.verifyInterval(double, double):::EXIT
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.verifySequence(double, double, double):::ENTER
lower == -0.9999999
initial == 15.0
upper == 30.0
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.verifySequence(double, double, double):::EXIT
===========================================================================
org.apache.commons.math.util.Incrementor$1:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math.util.Incrementor$1.():::EXIT
===========================================================================
org.apache.commons.math.util.Incrementor:::OBJECT
this has only one value
this.maximalCount one of { 0, 100 }
this.count >= 0
this.maxCountCallback has only one value
this.maxCountCallback.getClass().getName() == org.apache.commons.math.util.Incrementor$1.class
===========================================================================
org.apache.commons.math.util.Incrementor.Incrementor():::EXIT
this.maximalCount == 0
this.count == 0
===========================================================================
org.apache.commons.math.util.Incrementor.Incrementor(int):::ENTER
max == 0
===========================================================================
org.apache.commons.math.util.Incrementor.Incrementor(int):::EXIT
this.maximalCount == 0
this.count == 0
===========================================================================
org.apache.commons.math.util.Incrementor.Incrementor(int, org.apache.commons.math.util.Incrementor$MaxCountExceededCallback):::ENTER
max == 0
cb has only one value
cb.getClass().getName() == org.apache.commons.math.util.Incrementor$1.class
===========================================================================
org.apache.commons.math.util.Incrementor.Incrementor(int, org.apache.commons.math.util.Incrementor$MaxCountExceededCallback):::EXIT
this.maximalCount == 0
this.count == 0
===========================================================================
org.apache.commons.math.util.Incrementor.incrementCount():::ENTER
this.maximalCount == 100
===========================================================================
org.apache.commons.math.util.Incrementor.incrementCount():::EXIT
this.maximalCount == orig(this.maximalCount)
this.maxCountCallback == orig(this.maxCountCallback)
this.maxCountCallback.getClass().getName() == orig(this.maxCountCallback.getClass().getName())
this.maximalCount == 100
this.count - orig(this.count) - 1 == 0
===========================================================================
org.apache.commons.math.util.Incrementor.resetCount():::ENTER
this.maximalCount == 100
this.count == 0
===========================================================================
org.apache.commons.math.util.Incrementor.resetCount():::EXIT
this.maximalCount == orig(this.maximalCount)
this.count == orig(this.count)
this.maxCountCallback == orig(this.maxCountCallback)
this.maxCountCallback.getClass().getName() == orig(this.maxCountCallback.getClass().getName())
this.maximalCount == 100
this.count == 0
===========================================================================
org.apache.commons.math.util.Incrementor.setMaximalCount(int):::ENTER
this.maximalCount == 0
this.count == 0
max == 100
===========================================================================
org.apache.commons.math.util.Incrementor.setMaximalCount(int):::EXIT
this.count == orig(this.count)
this.maxCountCallback == orig(this.maxCountCallback)
this.maxCountCallback.getClass().getName() == orig(this.maxCountCallback.getClass().getName())
this.maximalCount == 100
this.count == 0
===========================================================================
org.apache.commons.math.util.MathUtils:::CLASS
===========================================================================
org.apache.commons.math.util.MathUtils.checkNotNull(java.lang.Object):::ENTER
o has only one value
o.getClass().getName() == org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest$1.class
===========================================================================
org.apache.commons.math.util.MathUtils.checkNotNull(java.lang.Object):::EXIT
===========================================================================
org.apache.commons.math.util.Precision:::CLASS
===========================================================================
org.apache.commons.math.util.Precision.equals(double, double, int):::ENTER
y == 0.0
maxUlps == 1
===========================================================================
org.apache.commons.math.util.Precision.equals(double, double, int):::EXIT
(return == true)  ==>  (orig(x) == 0.0)
===========================================================================
org.apache.commons.math.util.Precision.equals(double, double, int):::EXIT;condition="return == true"
return == true
orig(x) == 0.0
===========================================================================
org.apache.commons.math.util.Precision.equals(double, double, int):::EXIT;condition="not(return == true)"
return == false
