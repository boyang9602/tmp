===========================================================================
org.apache.commons.math.TestUtils.assertEquals(double, double, double):::ENTER
expected one of { 0.0, Double.NaN }
actual one of { 0.0, Double.NaN }
delta one of { 1.0E-14, 1.0E-4 }
===========================================================================
org.apache.commons.math.TestUtils.assertEquals(double, double, double):::EXIT
===========================================================================
org.apache.commons.math.TestUtils.assertEquals(java.lang.String, double, double, double):::ENTER
delta one of { 1.0E-14, 1.0E-4 }
===========================================================================
org.apache.commons.math.TestUtils.assertEquals(java.lang.String, double, double, double):::EXIT
msg.toString == orig(msg.toString)
===========================================================================
org.apache.commons.math.analysis.BrentSolver:::CLASS
===========================================================================
org.apache.commons.math.analysis.BrentSolver:::OBJECT
this.absoluteAccuracy == 1.0E-6
this.relativeAccuracy == 1.0E-14
this.functionValueAccuracy == 1.0E-15
this.maximalIterationCount == 100
this.defaultAbsoluteAccuracy == 1.0E-6
this.defaultRelativeAccuracy == 1.0E-14
this.defaultFunctionValueAccuracy == 1.0E-15
this.defaultMaximalIterationCount == 100
this.iterationCount >= 0
this.f.getClass().getName() == org.apache.commons.math.distribution.AbstractContinuousDistribution$1.class
===========================================================================
org.apache.commons.math.analysis.BrentSolver.BrentSolver(org.apache.commons.math.analysis.UnivariateRealFunction):::ENTER
f.getClass().getName() == org.apache.commons.math.distribution.AbstractContinuousDistribution$1.class
===========================================================================
org.apache.commons.math.analysis.BrentSolver.BrentSolver(org.apache.commons.math.analysis.UnivariateRealFunction):::EXIT
this.resultComputed == false
this.result == 0.0
this.iterationCount == 0
===========================================================================
org.apache.commons.math.analysis.BrentSolver.solve(double, double):::ENTER
this.resultComputed == false
this.result == 0.0
this.iterationCount == 0
===========================================================================
org.apache.commons.math.analysis.BrentSolver.solve(double, double):::EXIT
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.maximalIterationCount == orig(this.maximalIterationCount)
this.defaultAbsoluteAccuracy == orig(this.defaultAbsoluteAccuracy)
this.defaultRelativeAccuracy == orig(this.defaultRelativeAccuracy)
this.defaultFunctionValueAccuracy == orig(this.defaultFunctionValueAccuracy)
this.defaultMaximalIterationCount == orig(this.defaultMaximalIterationCount)
this.f == orig(this.f)
this.f.getClass().getName() == orig(this.f.getClass().getName())
this.resultComputed == true
orig(this.result) % this.result == 0
orig(this.iterationCount) % this.iterationCount == 0
this.iterationCount > orig(this.iterationCount)
===========================================================================
org.apache.commons.math.analysis.BrentSolver.solve(double, double, double, double, double, double):::ENTER
this.resultComputed == false
this.result == 0.0
this.iterationCount == 0
===========================================================================
org.apache.commons.math.analysis.BrentSolver.solve(double, double, double, double, double, double):::EXIT194
===========================================================================
org.apache.commons.math.analysis.BrentSolver.solve(double, double, double, double, double, double):::EXIT
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.maximalIterationCount == orig(this.maximalIterationCount)
this.defaultAbsoluteAccuracy == orig(this.defaultAbsoluteAccuracy)
this.defaultRelativeAccuracy == orig(this.defaultRelativeAccuracy)
this.defaultFunctionValueAccuracy == orig(this.defaultFunctionValueAccuracy)
this.defaultMaximalIterationCount == orig(this.defaultMaximalIterationCount)
this.f == orig(this.f)
this.f.getClass().getName() == orig(this.f.getClass().getName())
this.resultComputed == true
orig(this.result) % this.result == 0
orig(this.iterationCount) % this.iterationCount == 0
this.iterationCount > orig(this.iterationCount)
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverFactory:::OBJECT
this has only one value
this.getClass().getName() == org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl.class
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverFactory.UnivariateRealSolverFactory():::EXIT
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverFactory.newInstance():::EXIT66
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverFactory.newInstance():::EXIT
return has only one value
return.getClass().getName() == org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl.class
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl.UnivariateRealSolverFactoryImpl():::EXIT
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl.newBrentSolver(org.apache.commons.math.analysis.UnivariateRealFunction):::ENTER
f.getClass().getName() == org.apache.commons.math.distribution.AbstractContinuousDistribution$1.class
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl.newBrentSolver(org.apache.commons.math.analysis.UnivariateRealFunction):::EXIT
return.getClass().getName() == org.apache.commons.math.analysis.BrentSolver.class
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl.newDefaultSolver(org.apache.commons.math.analysis.UnivariateRealFunction):::ENTER
f.getClass().getName() == org.apache.commons.math.distribution.AbstractContinuousDistribution$1.class
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl.newDefaultSolver(org.apache.commons.math.analysis.UnivariateRealFunction):::EXIT
return.getClass().getName() == org.apache.commons.math.analysis.BrentSolver.class
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverImpl:::CLASS
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverImpl:::OBJECT
this.getClass().getName() == org.apache.commons.math.analysis.BrentSolver.class
this.absoluteAccuracy == 1.0E-6
this.relativeAccuracy == 1.0E-14
this.functionValueAccuracy == 1.0E-15
this.maximalIterationCount == 100
this.defaultAbsoluteAccuracy == 1.0E-6
this.defaultRelativeAccuracy == 1.0E-14
this.defaultFunctionValueAccuracy == 1.0E-15
this.defaultMaximalIterationCount == 100
this.iterationCount >= 0
this.f.getClass().getName() == org.apache.commons.math.distribution.AbstractContinuousDistribution$1.class
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverImpl.UnivariateRealSolverImpl(org.apache.commons.math.analysis.UnivariateRealFunction, int, double):::ENTER
f.getClass().getName() == org.apache.commons.math.distribution.AbstractContinuousDistribution$1.class
defaultMaximalIterationCount == 100
defaultAbsoluteAccuracy == 1.0E-6
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverImpl.UnivariateRealSolverImpl(org.apache.commons.math.analysis.UnivariateRealFunction, int, double):::EXIT
this.resultComputed == false
this.result == 0.0
this.iterationCount == 0
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverImpl.clearResult():::ENTER
this.resultComputed == false
this.result == 0.0
this.iterationCount == 0
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverImpl.clearResult():::EXIT
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.maximalIterationCount == orig(this.maximalIterationCount)
this.defaultAbsoluteAccuracy == orig(this.defaultAbsoluteAccuracy)
this.defaultRelativeAccuracy == orig(this.defaultRelativeAccuracy)
this.defaultFunctionValueAccuracy == orig(this.defaultFunctionValueAccuracy)
this.defaultMaximalIterationCount == orig(this.defaultMaximalIterationCount)
this.resultComputed == orig(this.resultComputed)
this.result == orig(this.result)
this.iterationCount == orig(this.iterationCount)
this.f == orig(this.f)
this.f.getClass().getName() == orig(this.f.getClass().getName())
this.resultComputed == false
this.result == 0.0
this.iterationCount == 0
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverImpl.setResult(double, int):::ENTER
this.resultComputed == false
this.result == 0.0
this.iterationCount == 0
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverImpl.setResult(double, int):::EXIT
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.maximalIterationCount == orig(this.maximalIterationCount)
this.defaultAbsoluteAccuracy == orig(this.defaultAbsoluteAccuracy)
this.defaultRelativeAccuracy == orig(this.defaultRelativeAccuracy)
this.defaultFunctionValueAccuracy == orig(this.defaultFunctionValueAccuracy)
this.defaultMaximalIterationCount == orig(this.defaultMaximalIterationCount)
this.f == orig(this.f)
this.f.getClass().getName() == orig(this.f.getClass().getName())
this.resultComputed == true
orig(this.result) % this.result == 0
orig(this.iterationCount) % this.iterationCount == 0
this.iterationCount > orig(this.iterationCount)
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverImpl.verifyInterval(double, double):::ENTER
this.resultComputed == false
this.result == 0.0
this.iterationCount == 0
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverImpl.verifyInterval(double, double):::EXIT
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.maximalIterationCount == orig(this.maximalIterationCount)
this.defaultAbsoluteAccuracy == orig(this.defaultAbsoluteAccuracy)
this.defaultRelativeAccuracy == orig(this.defaultRelativeAccuracy)
this.defaultFunctionValueAccuracy == orig(this.defaultFunctionValueAccuracy)
this.defaultMaximalIterationCount == orig(this.defaultMaximalIterationCount)
this.resultComputed == orig(this.resultComputed)
this.result == orig(this.result)
this.iterationCount == orig(this.iterationCount)
this.f == orig(this.f)
this.f.getClass().getName() == orig(this.f.getClass().getName())
this.resultComputed == false
this.result == 0.0
this.iterationCount == 0
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverUtils:::CLASS
org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory.getClass().getName() == org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl.class
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double):::ENTER
function.getClass().getName() == org.apache.commons.math.distribution.AbstractContinuousDistribution$1.class
upperBound >= 0.1
org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory.getClass().getName() != function.getClass().getName()
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double):::EXIT
org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory == orig(org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory)
org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory.getClass().getName() == orig(org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory.getClass().getName())
return[] sorted by <
size(return[]) == 2
org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory.getClass().getName() != orig(function.getClass().getName())
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double, int):::ENTER
function.getClass().getName() == org.apache.commons.math.distribution.AbstractContinuousDistribution$1.class
upperBound >= 0.1
maximumIterations == 2147483647
org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory.getClass().getName() != function.getClass().getName()
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double, int):::EXIT
org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory == orig(org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory)
org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory.getClass().getName() == orig(org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory.getClass().getName())
return[] sorted by <
size(return[]) == 2
org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory.getClass().getName() != orig(function.getClass().getName())
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverUtils.setup(org.apache.commons.math.analysis.UnivariateRealFunction):::ENTER
f.getClass().getName() == org.apache.commons.math.distribution.AbstractContinuousDistribution$1.class
org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory.getClass().getName() != f.getClass().getName()
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverUtils.setup(org.apache.commons.math.analysis.UnivariateRealFunction):::EXIT
org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory.getClass().getName() == orig(org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory.getClass().getName())
org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory has only one value
org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory.getClass().getName() != orig(f.getClass().getName())
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverUtils.solve(org.apache.commons.math.analysis.UnivariateRealFunction, double, double):::ENTER
f.getClass().getName() == org.apache.commons.math.distribution.AbstractContinuousDistribution$1.class
org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory.getClass().getName() != f.getClass().getName()
===========================================================================
org.apache.commons.math.analysis.UnivariateRealSolverUtils.solve(org.apache.commons.math.analysis.UnivariateRealFunction, double, double):::EXIT
org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory.getClass().getName() == orig(org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory.getClass().getName())
org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory has only one value
org.apache.commons.math.analysis.UnivariateRealSolverUtils.factory.getClass().getName() != orig(f.getClass().getName())
===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution$1:::OBJECT
===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution$1.(org.apache.commons.math.distribution.AbstractContinuousDistribution, double):::ENTER
org.apache.commons.math.distribution.AbstractContinuousDistribution.this != null
===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution$1.(org.apache.commons.math.distribution.AbstractContinuousDistribution, double):::EXIT
org.apache.commons.math.distribution.AbstractContinuousDistribution.this == orig(org.apache.commons.math.distribution.AbstractContinuousDistribution.this)
org.apache.commons.math.distribution.AbstractContinuousDistribution.this.getClass().getName() == orig(org.apache.commons.math.distribution.AbstractContinuousDistribution.this.getClass().getName())
===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution$1.value(double):::ENTER
===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution$1.value(double):::EXIT
this.val$p == orig(this.val$p)
org.apache.commons.math.distribution.AbstractContinuousDistribution.this == orig(org.apache.commons.math.distribution.AbstractContinuousDistribution.this)
org.apache.commons.math.distribution.AbstractContinuousDistribution.this.getClass().getName() == orig(org.apache.commons.math.distribution.AbstractContinuousDistribution.this.getClass().getName())
===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution:::CLASS
===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution:::OBJECT
===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution.AbstractContinuousDistribution():::EXIT
===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(double):::ENTER
===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(double):::EXIT109
===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(double):::EXIT
===========================================================================
org.apache.commons.math.distribution.AbstractDistribution:::CLASS
===========================================================================
org.apache.commons.math.distribution.AbstractDistribution:::OBJECT
===========================================================================
org.apache.commons.math.distribution.AbstractDistribution.AbstractDistribution():::EXIT
===========================================================================
org.apache.commons.math.distribution.AbstractDistribution.cumulativeProbability(double, double):::ENTER
===========================================================================
org.apache.commons.math.distribution.AbstractDistribution.cumulativeProbability(double, double):::EXIT
===========================================================================
org.apache.commons.math.distribution.AbstractIntegerDistribution:::CLASS
===========================================================================
org.apache.commons.math.distribution.AbstractIntegerDistribution:::OBJECT
this.getClass().getName() == org.apache.commons.math.distribution.PoissonDistributionImpl.class
===========================================================================
org.apache.commons.math.distribution.AbstractIntegerDistribution.AbstractIntegerDistribution():::EXIT
===========================================================================
org.apache.commons.math.distribution.AbstractIntegerDistribution.cumulativeProbability(double):::ENTER
this has only one value
x >= 0.0
===========================================================================
org.apache.commons.math.distribution.AbstractIntegerDistribution.cumulativeProbability(double):::EXIT
===========================================================================
org.apache.commons.math.distribution.AbstractIntegerDistribution.inverseCumulativeProbability(double):::ENTER
===========================================================================
org.apache.commons.math.distribution.AbstractIntegerDistribution.inverseCumulativeProbability(double):::EXIT
return >= -1
===========================================================================
org.apache.commons.math.distribution.ChiSquareDistributionTest:::OBJECT
this.distribution.getClass().getName() == org.apache.commons.math.distribution.ChiSquaredDistributionImpl.class
this.tolerance == 1.0E-4
this.cumulativeTestPoints[] one of { [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342], [0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357] }
this.cumulativeTestValues[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestPoints[] one of { [0.0, 0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9, 1.0], [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9] }
this.inverseCumulativeTestValues[] one of { [0.0, 0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357, Infinity], [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342] }
size(this.cumulativeTestPoints[]) == 10
size(this.cumulativeTestValues[]) == 10
size(this.inverseCumulativeTestPoints[]) one of { 10, 12 }
size(this.inverseCumulativeTestValues[]) one of { 10, 12 }
===========================================================================
org.apache.commons.math.distribution.ChiSquareDistributionTest.ChiSquareDistributionTest(java.lang.String):::ENTER
name != null
===========================================================================
org.apache.commons.math.distribution.ChiSquareDistributionTest.ChiSquareDistributionTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
this.distribution == null
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.ChiSquareDistributionTest.makeCumulativeTestPoints():::ENTER
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.ChiSquareDistributionTest.makeCumulativeTestPoints():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
return[] == [0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357]
return[] elements >= 0.210216
size(return[]) == 10
===========================================================================
org.apache.commons.math.distribution.ChiSquareDistributionTest.makeCumulativeTestValues():::ENTER
this.cumulativeTestPoints[] == [0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357]
this.cumulativeTestPoints[] elements >= 0.210216
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.ChiSquareDistributionTest.makeCumulativeTestValues():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.cumulativeTestPoints[] == [0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357]
this.cumulativeTestPoints[] elements >= 0.210216
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
return[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
size(return[]) == 10
===========================================================================
org.apache.commons.math.distribution.ChiSquareDistributionTest.makeDistribution():::ENTER
this.distribution == null
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.ChiSquareDistributionTest.makeDistribution():::EXIT
this.distribution == orig(this.distribution)
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.distribution == null
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
return.getClass().getName() == org.apache.commons.math.distribution.ChiSquaredDistributionImpl.class
===========================================================================
org.apache.commons.math.distribution.ChiSquareDistributionTest.makeInverseCumulativeTestPoints():::ENTER
this.cumulativeTestPoints[] == [0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357]
this.cumulativeTestPoints[] elements >= 0.210216
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.ChiSquareDistributionTest.makeInverseCumulativeTestPoints():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.cumulativeTestPoints[] == [0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357]
this.cumulativeTestPoints[] elements >= 0.210216
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
return[] == [0.0, 0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9, 1.0]
size(return[]) == 12
===========================================================================
org.apache.commons.math.distribution.ChiSquareDistributionTest.makeInverseCumulativeTestValues():::ENTER
this.cumulativeTestPoints[] == [0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357]
this.cumulativeTestPoints[] elements >= 0.210216
this.inverseCumulativeTestPoints[] == [0.0, 0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9, 1.0]
this.inverseCumulativeTestValues == null
size(this.inverseCumulativeTestPoints[]) == 12
===========================================================================
org.apache.commons.math.distribution.ChiSquareDistributionTest.makeInverseCumulativeTestValues():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.cumulativeTestPoints[] == [0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357]
this.cumulativeTestPoints[] elements >= 0.210216
this.inverseCumulativeTestPoints[] == [0.0, 0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9, 1.0]
this.inverseCumulativeTestValues == null
return[] == [0.0, 0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357, Infinity]
return[] elements >= 0.0
size(this.inverseCumulativeTestPoints[]) == 12
size(return[]) == 12
===========================================================================
org.apache.commons.math.distribution.ChiSquareDistributionTest.testSmallDf():::ENTER
this has only one value
this.distribution has only one value
this.cumulativeTestPoints has only one value
this.cumulativeTestPoints[] == [0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357]
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestPoints[] == [0.0, 0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9, 1.0]
this.inverseCumulativeTestValues has only one value
this.inverseCumulativeTestValues[] == [0.0, 0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357, Infinity]
size(this.inverseCumulativeTestPoints[]) == 12
size(this.inverseCumulativeTestValues[]) == 12
===========================================================================
org.apache.commons.math.distribution.ChiSquareDistributionTest.testSmallDf():::EXIT
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
size(this.cumulativeTestPoints[]) == orig(size(this.cumulativeTestPoints[]))
this.distribution has only one value
this.cumulativeTestPoints has only one value
this.cumulativeTestPoints[] == [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342]
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestPoints[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestValues has only one value
this.inverseCumulativeTestValues[] == [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342]
size(this.inverseCumulativeTestPoints[]) == 10
size(this.inverseCumulativeTestValues[]) == 10
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl:::CLASS
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl:::OBJECT
this.gamma.getClass().getName() == org.apache.commons.math.distribution.GammaDistributionImpl.class
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.ChiSquaredDistributionImpl(double):::ENTER
df one of { 0.1, 1.0, 5.0 }
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.ChiSquaredDistributionImpl(double):::EXIT
this.gamma != null
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.ChiSquaredDistributionImpl(double, org.apache.commons.math.distribution.GammaDistribution):::ENTER
df one of { 0.1, 1.0, 5.0 }
g != null
g.getClass().getName() == org.apache.commons.math.distribution.GammaDistributionImpl.class
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.ChiSquaredDistributionImpl(double, org.apache.commons.math.distribution.GammaDistribution):::EXIT
this.gamma != null
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.cumulativeProbability(double):::ENTER
this.gamma != null
x >= 1.0E-323
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.cumulativeProbability(double):::EXIT
this.gamma == orig(this.gamma)
this.gamma.getClass().getName() == orig(this.gamma.getClass().getName())
this.gamma != null
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.getDegreesOfFreedom():::ENTER
this.gamma != null
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.getDegreesOfFreedom():::EXIT
this.gamma == orig(this.gamma)
this.gamma.getClass().getName() == orig(this.gamma.getClass().getName())
this.gamma != null
return one of { 0.1, 5.0 }
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.getDomainLowerBound(double):::ENTER
this.gamma != null
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.getDomainLowerBound(double):::EXIT
this.gamma == orig(this.gamma)
this.gamma.getClass().getName() == orig(this.gamma.getClass().getName())
this.gamma != null
return == 1.0E-323
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.getDomainUpperBound(double):::ENTER
this.gamma != null
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.getDomainUpperBound(double):::EXIT
this.gamma == orig(this.gamma)
this.gamma.getClass().getName() == orig(this.gamma.getClass().getName())
this.gamma != null
return one of { 0.1, 5.0, 1.7976931348623157E308 }
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.getGamma():::ENTER
this.gamma != null
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.getGamma():::EXIT
this.gamma == orig(this.gamma)
this.gamma.getClass().getName() == orig(this.gamma.getClass().getName())
this.gamma != null
return != null
return.getClass().getName() == org.apache.commons.math.distribution.GammaDistributionImpl.class
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.getInitialDomain(double):::ENTER
this.gamma != null
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.getInitialDomain(double):::EXIT
this.gamma == orig(this.gamma)
this.gamma.getClass().getName() == orig(this.gamma.getClass().getName())
this.gamma != null
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.inverseCumulativeProbability(double):::ENTER
this.gamma != null
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.inverseCumulativeProbability(double):::EXIT101
this.gamma has only one value
return == 0.0
orig(this) has only one value
orig(p) == 0.0
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.inverseCumulativeProbability(double):::EXIT104
this.gamma has only one value
return == Infinity
orig(this) has only one value
orig(p) == 1.0
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.inverseCumulativeProbability(double):::EXIT106
return >= 1.0E-323
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.inverseCumulativeProbability(double):::EXIT
this.gamma == orig(this.gamma)
this.gamma.getClass().getName() == orig(this.gamma.getClass().getName())
this.gamma != null
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.setDegreesOfFreedom(double):::ENTER
this.gamma != null
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.setDegreesOfFreedom(double):::EXIT
this.gamma == orig(this.gamma)
this.gamma.getClass().getName() == orig(this.gamma.getClass().getName())
this.gamma != null
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.setGamma(org.apache.commons.math.distribution.GammaDistribution):::ENTER
this.gamma == null
g != null
g.getClass().getName() == org.apache.commons.math.distribution.GammaDistributionImpl.class
===========================================================================
org.apache.commons.math.distribution.ChiSquaredDistributionImpl.setGamma(org.apache.commons.math.distribution.GammaDistribution):::EXIT
this.gamma != null
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:::OBJECT
this.tolerance == 1.0E-4
this.cumulativeTestValues[] one of { [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9], [0.02275013, 0.1586553, 0.5, 0.8413447, 0.9772499, 0.9986501, 0.9999683, 0.9999997] }
this.inverseCumulativeTestPoints[] one of { [0.0, 0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9, 1.0], [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9] }
size(this.cumulativeTestPoints[]) one of { 8, 10 }
size(this.cumulativeTestValues[]) one of { 8, 10 }
size(this.inverseCumulativeTestPoints[]) one of { 10, 12 }
size(this.inverseCumulativeTestValues[]) one of { 10, 12 }
this.getClass().getName() != this.distribution.getClass().getName()
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.ContinuousDistributionAbstractTest(java.lang.String):::ENTER
name != null
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.ContinuousDistributionAbstractTest(java.lang.String):::EXIT
this.cumulativeTestPoints == this.inverseCumulativeTestValues
this.cumulativeTestValues == this.inverseCumulativeTestPoints
name.toString == orig(name.toString)
this.distribution == null
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.getCumulativeTestPoints():::ENTER
this has only one value
this.getClass().getName() == org.apache.commons.math.distribution.ChiSquareDistributionTest.class
this.distribution has only one value
this.distribution.getClass().getName() == org.apache.commons.math.distribution.ChiSquaredDistributionImpl.class
this.cumulativeTestPoints has only one value
this.cumulativeTestPoints[] == [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342]
this.cumulativeTestValues has only one value
this.cumulativeTestValues[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestPoints[] == [0.0, 0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9, 1.0]
this.inverseCumulativeTestValues has only one value
this.inverseCumulativeTestValues[] == [0.0, 0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357, Infinity]
size(this.cumulativeTestPoints[]) == 10
size(this.cumulativeTestValues[]) == 10
size(this.inverseCumulativeTestPoints[]) == 12
size(this.inverseCumulativeTestValues[]) == 12
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.getCumulativeTestPoints():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
this.distribution has only one value
this.distribution.getClass().getName() == org.apache.commons.math.distribution.ChiSquaredDistributionImpl.class
this.cumulativeTestPoints has only one value
this.cumulativeTestPoints[] == [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342]
this.cumulativeTestValues has only one value
this.cumulativeTestValues[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestPoints[] == [0.0, 0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9, 1.0]
this.inverseCumulativeTestValues has only one value
this.inverseCumulativeTestValues[] == [0.0, 0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357, Infinity]
return has only one value
return[] == [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342]
size(this.cumulativeTestPoints[]) == 10
size(this.cumulativeTestValues[]) == 10
size(this.inverseCumulativeTestPoints[]) == 12
size(this.inverseCumulativeTestValues[]) == 12
size(return[]) == 10
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.getCumulativeTestValues():::ENTER
this.cumulativeTestPoints == this.inverseCumulativeTestValues
this has only one value
this.getClass().getName() == org.apache.commons.math.distribution.ChiSquareDistributionTest.class
this.distribution has only one value
this.distribution.getClass().getName() == org.apache.commons.math.distribution.ChiSquaredDistributionImpl.class
this.cumulativeTestPoints has only one value
this.cumulativeTestPoints[] == [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342]
this.cumulativeTestValues has only one value
this.cumulativeTestValues[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestPoints[] == [0.0, 0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9, 1.0]
this.inverseCumulativeTestValues[] == [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342]
size(this.cumulativeTestPoints[]) == 10
size(this.cumulativeTestValues[]) == 10
size(this.inverseCumulativeTestPoints[]) == 12
size(this.inverseCumulativeTestValues[]) == 10
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.getCumulativeTestValues():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == this.inverseCumulativeTestValues
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints == orig(this.inverseCumulativeTestValues)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
this.distribution has only one value
this.distribution.getClass().getName() == org.apache.commons.math.distribution.ChiSquaredDistributionImpl.class
this.cumulativeTestPoints has only one value
this.cumulativeTestPoints[] == [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342]
this.cumulativeTestValues has only one value
this.cumulativeTestValues[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestPoints[] == [0.0, 0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9, 1.0]
this.inverseCumulativeTestValues[] == [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342]
return has only one value
return[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
size(this.cumulativeTestPoints[]) == 10
size(this.cumulativeTestValues[]) == 10
size(this.inverseCumulativeTestPoints[]) == 12
size(this.inverseCumulativeTestValues[]) == 10
size(return[]) == 10
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.getDistribution():::ENTER
this.getClass().getName() == org.apache.commons.math.distribution.NormalDistributionTest.class
this.distribution.getClass().getName() == org.apache.commons.math.distribution.NormalDistributionImpl.class
this.cumulativeTestPoints[] one of { [-2.226325, -1.156887, -0.6439496, -0.2027951, 0.3058278, 6.426325, 5.356887, 4.84395, 4.402795, 3.894172], [-2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0], [-0.6999999999999997, 0.7000000000000002, 2.1, 3.5, 4.9, 6.299999999999999, 7.699999999999999, 9.1] }
this.inverseCumulativeTestPoints[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestValues[] == [-2.226325, -1.156887, -0.6439496, -0.2027951, 0.3058278, 6.426325, 5.356887, 4.84395, 4.402795, 3.894172]
size(this.inverseCumulativeTestPoints[]) == 10
size(this.inverseCumulativeTestValues[]) == 10
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.getDistribution():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == return.getClass().getName()
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
return.getClass().getName() == orig(this.distribution.getClass().getName())
this.cumulativeTestPoints[] one of { [-2.226325, -1.156887, -0.6439496, -0.2027951, 0.3058278, 6.426325, 5.356887, 4.84395, 4.402795, 3.894172], [-2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0], [-0.6999999999999997, 0.7000000000000002, 2.1, 3.5, 4.9, 6.299999999999999, 7.699999999999999, 9.1] }
this.inverseCumulativeTestPoints[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestValues[] == [-2.226325, -1.156887, -0.6439496, -0.2027951, 0.3058278, 6.426325, 5.356887, 4.84395, 4.402795, 3.894172]
return.getClass().getName() == org.apache.commons.math.distribution.NormalDistributionImpl.class
size(this.inverseCumulativeTestPoints[]) == 10
size(this.inverseCumulativeTestValues[]) == 10
return.getClass().getName() != orig(this.getClass().getName())
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.getTolerance():::ENTER
this.distribution != null
this.cumulativeTestPoints != null
this.cumulativeTestValues != null
this.inverseCumulativeTestPoints != null
this.inverseCumulativeTestValues != null
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.getTolerance():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
this.distribution != null
this.cumulativeTestPoints != null
this.cumulativeTestValues != null
this.inverseCumulativeTestPoints != null
this.inverseCumulativeTestValues != null
return == 1.0E-4
this.distribution.getClass().getName() != orig(this.getClass().getName())
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.makeInverseCumulativeTestPoints():::ENTER
this.cumulativeTestPoints[] one of { [-2.226325, -1.156887, -0.6439496, -0.2027951, 0.3058278, 6.426325, 5.356887, 4.84395, 4.402795, 3.894172], [0.8571048, 1.646497, 2.179731, 2.732637, 3.489539, 26.12448, 20.09024, 17.53455, 15.50731, 13.36157] }
this.cumulativeTestValues[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
size(this.cumulativeTestPoints[]) == 10
size(this.cumulativeTestValues[]) == 10
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.makeInverseCumulativeTestPoints():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.cumulativeTestPoints[] one of { [-2.226325, -1.156887, -0.6439496, -0.2027951, 0.3058278, 6.426325, 5.356887, 4.84395, 4.402795, 3.894172], [0.8571048, 1.646497, 2.179731, 2.732637, 3.489539, 26.12448, 20.09024, 17.53455, 15.50731, 13.36157] }
this.cumulativeTestValues[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
return[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
size(this.cumulativeTestPoints[]) == 10
size(this.cumulativeTestValues[]) == 10
size(return[]) == 10
this.distribution.getClass().getName() != orig(this.getClass().getName())
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.makeInverseCumulativeTestValues():::ENTER
this.cumulativeTestPoints[] one of { [-2.226325, -1.156887, -0.6439496, -0.2027951, 0.3058278, 6.426325, 5.356887, 4.84395, 4.402795, 3.894172], [0.8571048, 1.646497, 2.179731, 2.732637, 3.489539, 26.12448, 20.09024, 17.53455, 15.50731, 13.36157] }
this.cumulativeTestValues[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestPoints[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestValues == null
size(this.cumulativeTestPoints[]) == 10
size(this.cumulativeTestValues[]) == 10
size(this.inverseCumulativeTestPoints[]) == 10
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.makeInverseCumulativeTestValues():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.cumulativeTestPoints[] one of { [-2.226325, -1.156887, -0.6439496, -0.2027951, 0.3058278, 6.426325, 5.356887, 4.84395, 4.402795, 3.894172], [0.8571048, 1.646497, 2.179731, 2.732637, 3.489539, 26.12448, 20.09024, 17.53455, 15.50731, 13.36157] }
this.cumulativeTestValues[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestPoints[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestValues == null
return[] one of { [-2.226325, -1.156887, -0.6439496, -0.2027951, 0.3058278, 6.426325, 5.356887, 4.84395, 4.402795, 3.894172], [0.8571048, 1.646497, 2.179731, 2.732637, 3.489539, 26.12448, 20.09024, 17.53455, 15.50731, 13.36157] }
size(this.cumulativeTestPoints[]) == 10
size(this.cumulativeTestValues[]) == 10
size(this.inverseCumulativeTestPoints[]) == 10
size(return[]) == 10
this.distribution.getClass().getName() != orig(this.getClass().getName())
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setCumulativeTestPoints(double[]):::ENTER
this.inverseCumulativeTestValues[] one of { [-2.226325, -1.156887, -0.6439496, -0.2027951, 0.3058278, 6.426325, 5.356887, 4.84395, 4.402795, 3.894172], [0.0, 0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357, Infinity] }
size(cumulativeTestPoints[]) one of { 8, 10 }
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setCumulativeTestPoints(double[]):::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
cumulativeTestPoints[] == orig(cumulativeTestPoints[])
this.inverseCumulativeTestValues[] one of { [-2.226325, -1.156887, -0.6439496, -0.2027951, 0.3058278, 6.426325, 5.356887, 4.84395, 4.402795, 3.894172], [0.0, 0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357, Infinity] }
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setCumulativeTestValues(double[]):::ENTER
this.getClass().getName() == org.apache.commons.math.distribution.NormalDistributionTest.class
this.distribution.getClass().getName() == org.apache.commons.math.distribution.NormalDistributionImpl.class
this.inverseCumulativeTestPoints[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestValues[] == [-2.226325, -1.156887, -0.6439496, -0.2027951, 0.3058278, 6.426325, 5.356887, 4.84395, 4.402795, 3.894172]
cumulativeTestValues[] == [0.02275013, 0.1586553, 0.5, 0.8413447, 0.9772499, 0.9986501, 0.9999683, 0.9999997]
size(this.cumulativeTestPoints[]) == 8
size(this.inverseCumulativeTestPoints[]) == 10
size(this.inverseCumulativeTestValues[]) == 10
size(cumulativeTestValues[]) == 8
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setCumulativeTestValues(double[]):::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
cumulativeTestValues[] == orig(cumulativeTestValues[])
this.distribution.getClass().getName() == org.apache.commons.math.distribution.NormalDistributionImpl.class
this.cumulativeTestValues[] == [0.02275013, 0.1586553, 0.5, 0.8413447, 0.9772499, 0.9986501, 0.9999683, 0.9999997]
this.inverseCumulativeTestPoints[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestValues[] == [-2.226325, -1.156887, -0.6439496, -0.2027951, 0.3058278, 6.426325, 5.356887, 4.84395, 4.402795, 3.894172]
cumulativeTestValues[] == [0.02275013, 0.1586553, 0.5, 0.8413447, 0.9772499, 0.9986501, 0.9999683, 0.9999997]
size(this.cumulativeTestPoints[]) == 8
size(this.cumulativeTestValues[]) == 8
size(this.inverseCumulativeTestPoints[]) == 10
size(this.inverseCumulativeTestValues[]) == 10
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setDistribution(org.apache.commons.math.distribution.ContinuousDistribution):::ENTER
this.distribution.getClass().getName() == distribution.getClass().getName()
this.cumulativeTestPoints[] one of { [-2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0], [-0.6999999999999997, 0.7000000000000002, 2.1, 3.5, 4.9, 6.299999999999999, 7.699999999999999, 9.1], [0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357] }
this.inverseCumulativeTestValues[] one of { [-2.226325, -1.156887, -0.6439496, -0.2027951, 0.3058278, 6.426325, 5.356887, 4.84395, 4.402795, 3.894172], [0.0, 0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357, Infinity] }
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setDistribution(org.apache.commons.math.distribution.ContinuousDistribution):::EXIT
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.distribution.getClass().getName() == orig(distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
this.cumulativeTestPoints[] one of { [-2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0], [-0.6999999999999997, 0.7000000000000002, 2.1, 3.5, 4.9, 6.299999999999999, 7.699999999999999, 9.1], [0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357] }
this.inverseCumulativeTestValues[] one of { [-2.226325, -1.156887, -0.6439496, -0.2027951, 0.3058278, 6.426325, 5.356887, 4.84395, 4.402795, 3.894172], [0.0, 0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357, Infinity] }
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setInverseCumulativeTestPoints(double[]):::ENTER
this.cumulativeTestPoints == this.inverseCumulativeTestValues
this has only one value
this.getClass().getName() == org.apache.commons.math.distribution.ChiSquareDistributionTest.class
this.distribution has only one value
this.distribution.getClass().getName() == org.apache.commons.math.distribution.ChiSquaredDistributionImpl.class
this.cumulativeTestPoints has only one value
this.cumulativeTestPoints[] == [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342]
this.cumulativeTestValues has only one value
this.cumulativeTestValues[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestPoints[] == [0.0, 0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9, 1.0]
this.inverseCumulativeTestValues[] == [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342]
inverseCumulativeTestPoints has only one value
inverseCumulativeTestPoints[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
size(this.cumulativeTestPoints[]) == 10
size(this.cumulativeTestValues[]) == 10
size(this.inverseCumulativeTestPoints[]) == 12
size(this.inverseCumulativeTestValues[]) == 10
size(inverseCumulativeTestPoints[]) == 10
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setInverseCumulativeTestPoints(double[]):::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == this.inverseCumulativeTestValues
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints == orig(this.inverseCumulativeTestValues)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == this.inverseCumulativeTestPoints
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
inverseCumulativeTestPoints[] == orig(inverseCumulativeTestPoints[])
this.distribution has only one value
this.distribution.getClass().getName() == org.apache.commons.math.distribution.ChiSquaredDistributionImpl.class
this.cumulativeTestPoints has only one value
this.cumulativeTestPoints[] == [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342]
this.cumulativeTestValues has only one value
this.cumulativeTestValues[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestPoints[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestValues[] == [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342]
inverseCumulativeTestPoints[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
size(this.cumulativeTestPoints[]) == 10
size(this.cumulativeTestValues[]) == 10
size(this.inverseCumulativeTestPoints[]) == 10
size(this.inverseCumulativeTestValues[]) == 10
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setInverseCumulativeTestValues(double[]):::ENTER
this has only one value
this.getClass().getName() == org.apache.commons.math.distribution.ChiSquareDistributionTest.class
this.distribution has only one value
this.distribution.getClass().getName() == org.apache.commons.math.distribution.ChiSquaredDistributionImpl.class
this.cumulativeTestPoints has only one value
this.cumulativeTestPoints[] == [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342]
this.cumulativeTestValues has only one value
this.cumulativeTestValues[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestPoints[] == [0.0, 0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9, 1.0]
this.inverseCumulativeTestValues has only one value
this.inverseCumulativeTestValues[] == [0.0, 0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357, Infinity]
inverseCumulativeTestValues has only one value
inverseCumulativeTestValues[] == [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342]
size(this.cumulativeTestPoints[]) == 10
size(this.cumulativeTestValues[]) == 10
size(this.inverseCumulativeTestPoints[]) == 12
size(this.inverseCumulativeTestValues[]) == 12
size(inverseCumulativeTestValues[]) == 10
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setInverseCumulativeTestValues(double[]):::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == this.inverseCumulativeTestValues
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
inverseCumulativeTestValues[] == orig(inverseCumulativeTestValues[])
this.distribution has only one value
this.distribution.getClass().getName() == org.apache.commons.math.distribution.ChiSquaredDistributionImpl.class
this.cumulativeTestPoints has only one value
this.cumulativeTestPoints[] == [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342]
this.cumulativeTestValues has only one value
this.cumulativeTestValues[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestPoints[] == [0.0, 0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9, 1.0]
this.inverseCumulativeTestValues[] == [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342]
inverseCumulativeTestValues[] == [1.168926E-60, 1.168926E-40, 1.063132E-32, 1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438, 0.5318646, 0.1526342]
size(this.cumulativeTestPoints[]) == 10
size(this.cumulativeTestValues[]) == 10
size(this.inverseCumulativeTestPoints[]) == 12
size(this.inverseCumulativeTestValues[]) == 10
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setTolerance(double):::ENTER
this has only one value
this.getClass().getName() == org.apache.commons.math.distribution.ChiSquareDistributionTest.class
this.distribution has only one value
this.distribution.getClass().getName() == org.apache.commons.math.distribution.ChiSquaredDistributionImpl.class
this.cumulativeTestPoints has only one value
this.cumulativeTestPoints[] == [0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357]
this.cumulativeTestValues has only one value
this.cumulativeTestValues[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestPoints[] == [0.0, 0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9, 1.0]
this.inverseCumulativeTestValues has only one value
this.inverseCumulativeTestValues[] == [0.0, 0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357, Infinity]
tolerance == 1.0E-4
size(this.cumulativeTestPoints[]) == 10
size(this.cumulativeTestValues[]) == 10
size(this.inverseCumulativeTestPoints[]) == 12
size(this.inverseCumulativeTestValues[]) == 12
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setTolerance(double):::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
this.distribution has only one value
this.distribution.getClass().getName() == org.apache.commons.math.distribution.ChiSquaredDistributionImpl.class
this.cumulativeTestPoints has only one value
this.cumulativeTestPoints[] == [0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357]
this.cumulativeTestValues has only one value
this.cumulativeTestValues[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestPoints[] == [0.0, 0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9, 1.0]
this.inverseCumulativeTestValues has only one value
this.inverseCumulativeTestValues[] == [0.0, 0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357, Infinity]
size(this.cumulativeTestPoints[]) == 10
size(this.cumulativeTestValues[]) == 10
size(this.inverseCumulativeTestPoints[]) == 12
size(this.inverseCumulativeTestValues[]) == 12
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setUp():::ENTER
this.cumulativeTestPoints == this.inverseCumulativeTestValues
this.cumulativeTestValues == this.inverseCumulativeTestPoints
this.distribution == null
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setUp():::EXIT
this.tolerance == orig(this.tolerance)
this.distribution != null
this.cumulativeTestPoints != null
this.cumulativeTestPoints[] one of { [-2.226325, -1.156887, -0.6439496, -0.2027951, 0.3058278, 6.426325, 5.356887, 4.84395, 4.402795, 3.894172], [0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357], [0.8571048, 1.646497, 2.179731, 2.732637, 3.489539, 26.12448, 20.09024, 17.53455, 15.50731, 13.36157] }
this.cumulativeTestValues != null
this.cumulativeTestValues[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestPoints != null
this.inverseCumulativeTestValues != null
this.inverseCumulativeTestValues[] one of { [-2.226325, -1.156887, -0.6439496, -0.2027951, 0.3058278, 6.426325, 5.356887, 4.84395, 4.402795, 3.894172], [0.0, 0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357, Infinity], [0.8571048, 1.646497, 2.179731, 2.732637, 3.489539, 26.12448, 20.09024, 17.53455, 15.50731, 13.36157] }
size(this.cumulativeTestPoints[]) == 10
size(this.cumulativeTestValues[]) == 10
this.distribution.getClass().getName() != orig(this.getClass().getName())
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.tearDown():::ENTER
this.distribution != null
this.cumulativeTestPoints != null
this.cumulativeTestValues != null
this.inverseCumulativeTestPoints != null
this.inverseCumulativeTestValues != null
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.tearDown():::EXIT
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == this.inverseCumulativeTestValues
this.cumulativeTestValues == this.inverseCumulativeTestPoints
this.distribution == null
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.testConsistency():::ENTER
this.cumulativeTestPoints[] one of { [-2.226325, -1.156887, -0.6439496, -0.2027951, 0.3058278, 6.426325, 5.356887, 4.84395, 4.402795, 3.894172], [0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357], [0.8571048, 1.646497, 2.179731, 2.732637, 3.489539, 26.12448, 20.09024, 17.53455, 15.50731, 13.36157] }
this.cumulativeTestValues[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestValues[] one of { [-2.226325, -1.156887, -0.6439496, -0.2027951, 0.3058278, 6.426325, 5.356887, 4.84395, 4.402795, 3.894172], [0.0, 0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357, Infinity], [0.8571048, 1.646497, 2.179731, 2.732637, 3.489539, 26.12448, 20.09024, 17.53455, 15.50731, 13.36157] }
size(this.cumulativeTestPoints[]) == 10
size(this.cumulativeTestValues[]) == 10
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.testConsistency():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
this.cumulativeTestPoints[] one of { [-2.226325, -1.156887, -0.6439496, -0.2027951, 0.3058278, 6.426325, 5.356887, 4.84395, 4.402795, 3.894172], [0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357], [0.8571048, 1.646497, 2.179731, 2.732637, 3.489539, 26.12448, 20.09024, 17.53455, 15.50731, 13.36157] }
this.cumulativeTestValues[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestValues[] one of { [-2.226325, -1.156887, -0.6439496, -0.2027951, 0.3058278, 6.426325, 5.356887, 4.84395, 4.402795, 3.894172], [0.0, 0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357, Infinity], [0.8571048, 1.646497, 2.179731, 2.732637, 3.489539, 26.12448, 20.09024, 17.53455, 15.50731, 13.36157] }
size(this.cumulativeTestPoints[]) == 10
size(this.cumulativeTestValues[]) == 10
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.testCumulativeProbabilities():::ENTER
this.cumulativeTestPoints[] one of { [-2.226325, -1.156887, -0.6439496, -0.2027951, 0.3058278, 6.426325, 5.356887, 4.84395, 4.402795, 3.894172], [0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357], [0.8571048, 1.646497, 2.179731, 2.732637, 3.489539, 26.12448, 20.09024, 17.53455, 15.50731, 13.36157] }
this.cumulativeTestValues[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestValues[] one of { [-2.226325, -1.156887, -0.6439496, -0.2027951, 0.3058278, 6.426325, 5.356887, 4.84395, 4.402795, 3.894172], [0.0, 0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357, Infinity], [0.8571048, 1.646497, 2.179731, 2.732637, 3.489539, 26.12448, 20.09024, 17.53455, 15.50731, 13.36157] }
size(this.cumulativeTestPoints[]) == 10
size(this.cumulativeTestValues[]) == 10
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.testCumulativeProbabilities():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
this.cumulativeTestPoints[] one of { [-2.226325, -1.156887, -0.6439496, -0.2027951, 0.3058278, 6.426325, 5.356887, 4.84395, 4.402795, 3.894172], [0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357], [0.8571048, 1.646497, 2.179731, 2.732637, 3.489539, 26.12448, 20.09024, 17.53455, 15.50731, 13.36157] }
this.cumulativeTestValues[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestValues[] one of { [-2.226325, -1.156887, -0.6439496, -0.2027951, 0.3058278, 6.426325, 5.356887, 4.84395, 4.402795, 3.894172], [0.0, 0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357, Infinity], [0.8571048, 1.646497, 2.179731, 2.732637, 3.489539, 26.12448, 20.09024, 17.53455, 15.50731, 13.36157] }
size(this.cumulativeTestPoints[]) == 10
size(this.cumulativeTestValues[]) == 10
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.testInverseCumulativeProbabilities():::ENTER
this.cumulativeTestPoints[] one of { [-2.226325, -1.156887, -0.6439496, -0.2027951, 0.3058278, 6.426325, 5.356887, 4.84395, 4.402795, 3.894172], [0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357], [0.8571048, 1.646497, 2.179731, 2.732637, 3.489539, 26.12448, 20.09024, 17.53455, 15.50731, 13.36157] }
this.cumulativeTestValues[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestValues[] one of { [-2.226325, -1.156887, -0.6439496, -0.2027951, 0.3058278, 6.426325, 5.356887, 4.84395, 4.402795, 3.894172], [0.0, 0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357, Infinity], [0.8571048, 1.646497, 2.179731, 2.732637, 3.489539, 26.12448, 20.09024, 17.53455, 15.50731, 13.36157] }
size(this.cumulativeTestPoints[]) == 10
size(this.cumulativeTestValues[]) == 10
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.testInverseCumulativeProbabilities():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
this.cumulativeTestPoints[] one of { [-2.226325, -1.156887, -0.6439496, -0.2027951, 0.3058278, 6.426325, 5.356887, 4.84395, 4.402795, 3.894172], [0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357], [0.8571048, 1.646497, 2.179731, 2.732637, 3.489539, 26.12448, 20.09024, 17.53455, 15.50731, 13.36157] }
this.cumulativeTestValues[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestValues[] one of { [-2.226325, -1.156887, -0.6439496, -0.2027951, 0.3058278, 6.426325, 5.356887, 4.84395, 4.402795, 3.894172], [0.0, 0.210216, 0.5542981, 0.8312116, 1.145476, 1.610308, 20.51501, 15.08627, 12.8325, 11.0705, 9.236357, Infinity], [0.8571048, 1.646497, 2.179731, 2.732637, 3.489539, 26.12448, 20.09024, 17.53455, 15.50731, 13.36157] }
size(this.cumulativeTestPoints[]) == 10
size(this.cumulativeTestValues[]) == 10
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.verifyCumulativeProbabilities():::ENTER
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.verifyCumulativeProbabilities():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
this.distribution.getClass().getName() != orig(this.getClass().getName())
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.verifyInverseCumulativeProbabilities():::ENTER
this.cumulativeTestValues[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
size(this.cumulativeTestPoints[]) == 10
size(this.cumulativeTestValues[]) == 10
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.verifyInverseCumulativeProbabilities():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
this.cumulativeTestValues[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
size(this.cumulativeTestPoints[]) == 10
size(this.cumulativeTestValues[]) == 10
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl:::CLASS
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl:::OBJECT
this.beta one of { 0.0, 1.0, 2.0 }
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.GammaDistributionImpl(double, double):::ENTER
beta one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.GammaDistributionImpl(double, double):::EXIT
this.beta one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.cumulativeProbability(double):::ENTER
this.beta one of { 1.0, 2.0 }
x != 0
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.cumulativeProbability(double):::EXIT
this.alpha == orig(this.alpha)
this.beta == orig(this.beta)
this.beta one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.getAlpha():::ENTER
this.beta one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.getAlpha():::EXIT
this.alpha == orig(this.alpha)
this.beta == orig(this.beta)
this.beta one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.getBeta():::ENTER
this.beta one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.getBeta():::EXIT
this.alpha == orig(this.alpha)
this.beta == orig(this.beta)
this.beta one of { 1.0, 2.0 }
return one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.getDomainLowerBound(double):::ENTER
this.alpha one of { 1.0, 2.0, 4.0 }
this.beta one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.getDomainLowerBound(double):::EXIT
this.alpha == orig(this.alpha)
this.beta == orig(this.beta)
this.alpha one of { 1.0, 2.0, 4.0 }
this.beta one of { 1.0, 2.0 }
return == 4.9E-324
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.getDomainUpperBound(double):::ENTER
this.alpha one of { 1.0, 2.0, 4.0 }
this.beta one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.getDomainUpperBound(double):::EXIT
this.alpha == orig(this.alpha)
this.beta == orig(this.beta)
this.alpha one of { 1.0, 2.0, 4.0 }
this.beta one of { 1.0, 2.0 }
return one of { 4.0, 8.0, 1.7976931348623157E308 }
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.getInitialDomain(double):::ENTER
this.alpha one of { 1.0, 2.0, 4.0 }
this.beta one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.getInitialDomain(double):::EXIT
this.alpha == orig(this.alpha)
this.beta == orig(this.beta)
this.alpha one of { 1.0, 2.0, 4.0 }
this.beta one of { 1.0, 2.0 }
return one of { 2.0, 4.0, 8.0 }
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.inverseCumulativeProbability(double):::ENTER
this.alpha one of { 1.0, 2.0, 4.0 }
this.beta one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.inverseCumulativeProbability(double):::EXIT102
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.inverseCumulativeProbability(double):::EXIT
this.alpha == orig(this.alpha)
this.beta == orig(this.beta)
this.alpha one of { 1.0, 2.0, 4.0 }
this.beta one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.setAlpha(double):::ENTER
this.beta one of { 0.0, 2.0 }
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.setAlpha(double):::EXIT
this.beta == orig(this.beta)
this.beta one of { 0.0, 2.0 }
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.setBeta(double):::ENTER
this.beta == 0.0
beta one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.distribution.GammaDistributionImpl.setBeta(double):::EXIT
this.alpha == orig(this.alpha)
this.beta one of { 1.0, 2.0 }
this.beta > orig(this.beta)
===========================================================================
org.apache.commons.math.distribution.GammaDistributionTest:::OBJECT
this.distribution.getClass().getName() == org.apache.commons.math.distribution.GammaDistributionImpl.class
this.tolerance == 1.0E-4
this.cumulativeTestPoints[] == [0.8571048, 1.646497, 2.179731, 2.732637, 3.489539, 26.12448, 20.09024, 17.53455, 15.50731, 13.36157]
this.cumulativeTestPoints[] elements >= 0.8571048
this.cumulativeTestValues[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestPoints[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestValues[] == [0.8571048, 1.646497, 2.179731, 2.732637, 3.489539, 26.12448, 20.09024, 17.53455, 15.50731, 13.36157]
this.inverseCumulativeTestValues[] elements >= 0.8571048
size(this.cumulativeTestPoints[]) == 10
size(this.cumulativeTestValues[]) == 10
size(this.inverseCumulativeTestPoints[]) == 10
size(this.inverseCumulativeTestValues[]) == 10
===========================================================================
org.apache.commons.math.distribution.GammaDistributionTest.GammaDistributionTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.distribution.GammaDistributionTest.GammaDistributionTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
this.distribution == null
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.GammaDistributionTest.makeCumulativeTestPoints():::ENTER
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.GammaDistributionTest.makeCumulativeTestPoints():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestValues == null
return[] == [0.8571048, 1.646497, 2.179731, 2.732637, 3.489539, 26.12448, 20.09024, 17.53455, 15.50731, 13.36157]
return[] elements >= 0.8571048
size(return[]) == 10
===========================================================================
org.apache.commons.math.distribution.GammaDistributionTest.makeCumulativeTestValues():::ENTER
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.GammaDistributionTest.makeCumulativeTestValues():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
return[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
size(return[]) == 10
===========================================================================
org.apache.commons.math.distribution.GammaDistributionTest.makeDistribution():::ENTER
this.distribution == null
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.GammaDistributionTest.makeDistribution():::EXIT
this.distribution == orig(this.distribution)
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.distribution == null
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
return.getClass().getName() == org.apache.commons.math.distribution.GammaDistributionImpl.class
===========================================================================
org.apache.commons.math.distribution.GammaDistributionTest.testProbabilities():::ENTER
this has only one value
this.distribution has only one value
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
===========================================================================
org.apache.commons.math.distribution.GammaDistributionTest.testProbabilities():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
this.distribution has only one value
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
===========================================================================
org.apache.commons.math.distribution.GammaDistributionTest.testProbability(double, double, double, double):::ENTER
this has only one value
this.distribution has only one value
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
a one of { 1.0, 2.0, 4.0 }
b one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.distribution.GammaDistributionTest.testProbability(double, double, double, double):::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
this.distribution has only one value
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
===========================================================================
org.apache.commons.math.distribution.GammaDistributionTest.testValue(double, double, double, double):::ENTER
this has only one value
this.distribution has only one value
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
a one of { 1.0, 2.0, 4.0 }
b one of { 1.0, 2.0 }
===========================================================================
org.apache.commons.math.distribution.GammaDistributionTest.testValue(double, double, double, double):::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
this.distribution has only one value
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
===========================================================================
org.apache.commons.math.distribution.GammaDistributionTest.testValues():::ENTER
this has only one value
this.distribution has only one value
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
===========================================================================
org.apache.commons.math.distribution.GammaDistributionTest.testValues():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
this.distribution has only one value
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
===========================================================================
org.apache.commons.math.distribution.IntegerDistributionAbstractTest:::OBJECT
this.getClass().getName() == org.apache.commons.math.distribution.PoissonDistributionTest.class
this.distribution.getClass().getName() == org.apache.commons.math.distribution.PoissonDistributionImpl.class
this.tolerance one of { 1.0E-12, 1.0E-4 }
this.densityTestPoints[] == [-1, 0, 1, 2, 3, 4, 5, 10, 20]
this.densityTestPoints[] elements >= -1
this.densityTestPoints[] sorted by <
this.densityTestValues[] == [0.0, 0.0183156388887, 0.073262555555, 0.14652511111, 0.195366814813, 0.195366814813, 0.156293451851, 0.00529247667642, 8.27746364655E-9]
this.cumulativeTestPoints[] == [-1, 0, 1, 2, 3, 4, 5, 10, 20]
this.cumulativeTestPoints[] elements >= -1
this.cumulativeTestPoints[] sorted by <
this.cumulativeTestValues[] == [0.0, 0.0183156388887, 0.0915781944437, 0.238103305554, 0.433470120367, 0.62883693518, 0.78513038703, 0.99716023388, 0.999999998077]
this.cumulativeTestValues[] sorted by <
this.inverseCumulativeTestPoints[] == [0.0, 0.018315638889, 0.0915781944437, 0.238103305554, 0.433470120367, 0.62883693518, 0.78513038704, 0.99716023388, 0.999999998077]
this.inverseCumulativeTestPoints[] sorted by <
this.inverseCumulativeTestValues[] == [-1, 0, 1, 2, 3, 4, 5, 10, 20]
this.inverseCumulativeTestValues[] elements >= -1
this.inverseCumulativeTestValues[] sorted by <
size(this.densityTestPoints[]) == 9
size(this.densityTestValues[]) == 9
size(this.cumulativeTestPoints[]) == 9
size(this.cumulativeTestValues[]) == 9
size(this.inverseCumulativeTestPoints[]) == 9
size(this.inverseCumulativeTestValues[]) == 9
this.getClass().getName() != this.distribution.getClass().getName()
===========================================================================
org.apache.commons.math.distribution.IntegerDistributionAbstractTest.IntegerDistributionAbstractTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.distribution.IntegerDistributionAbstractTest.IntegerDistributionAbstractTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
this.distribution == null
this.tolerance == 1.0E-4
this.densityTestPoints == null
this.densityTestValues == null
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setTolerance(double):::ENTER
this.distribution == null
this.tolerance == 1.0E-4
this.densityTestPoints == null
this.densityTestValues == null
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
tolerance == 1.0E-12
===========================================================================
org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setTolerance(double):::EXIT
this.distribution == orig(this.distribution)
this.densityTestPoints == orig(this.densityTestPoints)
this.densityTestValues == orig(this.densityTestValues)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.distribution == null
this.tolerance == 1.0E-12
this.densityTestPoints == null
this.densityTestValues == null
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setUp():::ENTER
this.distribution == null
this.tolerance == 1.0E-12
this.densityTestPoints == null
this.densityTestValues == null
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setUp():::EXIT
this.tolerance == orig(this.tolerance)
this.tolerance == 1.0E-12
===========================================================================
org.apache.commons.math.distribution.IntegerDistributionAbstractTest.tearDown():::ENTER
this.tolerance == 1.0E-12
===========================================================================
org.apache.commons.math.distribution.IntegerDistributionAbstractTest.tearDown():::EXIT
this.tolerance == orig(this.tolerance)
this.distribution == null
this.tolerance == 1.0E-12
this.densityTestPoints == null
this.densityTestValues == null
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.IntegerDistributionAbstractTest.testCumulativeProbabilities():::ENTER
this has only one value
this.distribution has only one value
this.tolerance == 1.0E-12
this.densityTestPoints has only one value
this.densityTestValues has only one value
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
===========================================================================
org.apache.commons.math.distribution.IntegerDistributionAbstractTest.testCumulativeProbabilities():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.densityTestPoints == orig(this.densityTestPoints)
this.densityTestPoints[] == orig(this.densityTestPoints[])
this.densityTestValues == orig(this.densityTestValues)
this.densityTestValues[] == orig(this.densityTestValues[])
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
this.distribution has only one value
this.tolerance == 1.0E-12
this.densityTestPoints has only one value
this.densityTestValues has only one value
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
===========================================================================
org.apache.commons.math.distribution.IntegerDistributionAbstractTest.testInverseCumulativeProbabilities():::ENTER
this has only one value
this.distribution has only one value
this.tolerance == 1.0E-12
this.densityTestPoints has only one value
this.densityTestValues has only one value
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
===========================================================================
org.apache.commons.math.distribution.IntegerDistributionAbstractTest.testInverseCumulativeProbabilities():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.densityTestPoints == orig(this.densityTestPoints)
this.densityTestPoints[] == orig(this.densityTestPoints[])
this.densityTestValues == orig(this.densityTestValues)
this.densityTestValues[] == orig(this.densityTestValues[])
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
this.distribution has only one value
this.tolerance == 1.0E-12
this.densityTestPoints has only one value
this.densityTestValues has only one value
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
===========================================================================
org.apache.commons.math.distribution.IntegerDistributionAbstractTest.verifyCumulativeProbabilities():::ENTER
this has only one value
this.distribution has only one value
this.tolerance == 1.0E-12
this.densityTestPoints has only one value
this.densityTestValues has only one value
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
===========================================================================
org.apache.commons.math.distribution.IntegerDistributionAbstractTest.verifyCumulativeProbabilities():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.densityTestPoints == orig(this.densityTestPoints)
this.densityTestPoints[] == orig(this.densityTestPoints[])
this.densityTestValues == orig(this.densityTestValues)
this.densityTestValues[] == orig(this.densityTestValues[])
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
this.distribution has only one value
this.tolerance == 1.0E-12
this.densityTestPoints has only one value
this.densityTestValues has only one value
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
===========================================================================
org.apache.commons.math.distribution.IntegerDistributionAbstractTest.verifyInverseCumulativeProbabilities():::ENTER
this has only one value
this.distribution has only one value
this.tolerance == 1.0E-12
this.densityTestPoints has only one value
this.densityTestValues has only one value
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
===========================================================================
org.apache.commons.math.distribution.IntegerDistributionAbstractTest.verifyInverseCumulativeProbabilities():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.densityTestPoints == orig(this.densityTestPoints)
this.densityTestPoints[] == orig(this.densityTestPoints[])
this.densityTestValues == orig(this.densityTestValues)
this.densityTestValues[] == orig(this.densityTestValues[])
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
this.distribution has only one value
this.tolerance == 1.0E-12
this.densityTestPoints has only one value
this.densityTestValues has only one value
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl:::CLASS
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl:::OBJECT
this.mean >= 0.0
this.standardDeviation >= 0.1
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl():::EXIT
this.mean == 0.0
this.standardDeviation == 1.0
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double, double):::ENTER
mean one of { 0.0, 2.1 }
sd one of { 0.1, 1.0, 1.4 }
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double, double):::EXIT
this.mean == orig(mean)
this.standardDeviation == orig(sd)
this.mean one of { 0.0, 2.1 }
this.standardDeviation one of { 0.1, 1.0, 1.4 }
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(double):::ENTER
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(double):::EXIT
this.mean == orig(this.mean)
this.standardDeviation == orig(this.standardDeviation)
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.getDomainLowerBound(double):::ENTER
this has only one value
this.mean == 2.1
this.standardDeviation == 1.4
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.getDomainLowerBound(double):::EXIT
this.mean == orig(this.mean)
this.standardDeviation == orig(this.standardDeviation)
this.mean == 2.1
this.standardDeviation == 1.4
return one of { -1.7976931348623157E308, 2.1 }
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.getDomainUpperBound(double):::ENTER
this has only one value
this.mean == 2.1
this.standardDeviation == 1.4
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.getDomainUpperBound(double):::EXIT
this.mean == orig(this.mean)
this.standardDeviation == orig(this.standardDeviation)
this.mean == 2.1
this.standardDeviation == 1.4
return one of { 2.1, 1.7976931348623157E308 }
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.getInitialDomain(double):::ENTER
this has only one value
this.mean == 2.1
this.standardDeviation == 1.4
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.getInitialDomain(double):::EXIT
this.mean == orig(this.mean)
this.standardDeviation == orig(this.standardDeviation)
this.mean == 2.1
this.standardDeviation == 1.4
return one of { 0.7000000000000002, 3.5 }
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.getMean():::ENTER
this.mean one of { 0.0, 0.06354349216903887, 2.1 }
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.getMean():::EXIT
this.mean == orig(this.mean)
this.standardDeviation == orig(this.standardDeviation)
this.mean one of { 0.0, 0.06354349216903887, 2.1 }
return one of { 0.0, 0.06354349216903887, 2.1 }
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.getStandardDeviation():::ENTER
this.mean one of { 0.0, 0.06354349216903887, 2.1 }
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.getStandardDeviation():::EXIT
this.mean == orig(this.mean)
this.standardDeviation == orig(this.standardDeviation)
this.mean one of { 0.0, 0.06354349216903887, 2.1 }
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.inverseCumulativeProbability(double):::ENTER
this has only one value
this.mean == 2.1
this.standardDeviation == 1.4
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.inverseCumulativeProbability(double):::EXIT132
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.inverseCumulativeProbability(double):::EXIT
this.mean == orig(this.mean)
this.standardDeviation == orig(this.standardDeviation)
this.mean == 2.1
this.standardDeviation == 1.4
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.setMean(double):::ENTER
this.standardDeviation >= 1.0
mean >= 0.0
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.setMean(double):::EXIT
this.mean == orig(mean)
this.standardDeviation == orig(this.standardDeviation)
this.standardDeviation >= 1.0
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.setStandardDeviation(double):::ENTER
this.standardDeviation >= 1.0
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.setStandardDeviation(double):::EXIT
this.mean == orig(this.mean)
this.standardDeviation == orig(sd)
===========================================================================
org.apache.commons.math.distribution.NormalDistributionTest:::OBJECT
this.distribution.getClass().getName() == org.apache.commons.math.distribution.NormalDistributionImpl.class
this.tolerance == 1.0E-4
this.cumulativeTestValues[] one of { [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9], [0.02275013, 0.1586553, 0.5, 0.8413447, 0.9772499, 0.9986501, 0.9999683, 0.9999997] }
this.inverseCumulativeTestPoints[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestValues[] == [-2.226325, -1.156887, -0.6439496, -0.2027951, 0.3058278, 6.426325, 5.356887, 4.84395, 4.402795, 3.894172]
size(this.cumulativeTestPoints[]) one of { 8, 10 }
size(this.cumulativeTestValues[]) one of { 8, 10 }
size(this.inverseCumulativeTestPoints[]) == 10
size(this.inverseCumulativeTestValues[]) == 10
===========================================================================
org.apache.commons.math.distribution.NormalDistributionTest.NormalDistributionTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.distribution.NormalDistributionTest.NormalDistributionTest(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
this.distribution == null
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.NormalDistributionTest.makeCumulativeTestPoints():::ENTER
this.cumulativeTestPoints[] == [-2.226325, -1.156887, -0.6439496, -0.2027951, 0.3058278, 6.426325, 5.356887, 4.84395, 4.402795, 3.894172]
this.cumulativeTestValues[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestValues == null
size(this.cumulativeTestPoints[]) == 10
size(this.cumulativeTestValues[]) == 10
===========================================================================
org.apache.commons.math.distribution.NormalDistributionTest.makeCumulativeTestPoints():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.cumulativeTestPoints[] == [-2.226325, -1.156887, -0.6439496, -0.2027951, 0.3058278, 6.426325, 5.356887, 4.84395, 4.402795, 3.894172]
this.cumulativeTestValues[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestValues == null
return[] == [-2.226325, -1.156887, -0.6439496, -0.2027951, 0.3058278, 6.426325, 5.356887, 4.84395, 4.402795, 3.894172]
size(this.cumulativeTestPoints[]) == 10
size(this.cumulativeTestValues[]) == 10
size(return[]) == 10
===========================================================================
org.apache.commons.math.distribution.NormalDistributionTest.makeCumulativeTestValues():::ENTER
this.cumulativeTestPoints[] == [-2.226325, -1.156887, -0.6439496, -0.2027951, 0.3058278, 6.426325, 5.356887, 4.84395, 4.402795, 3.894172]
this.cumulativeTestValues[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
size(this.cumulativeTestPoints[]) == 10
size(this.cumulativeTestValues[]) == 10
===========================================================================
org.apache.commons.math.distribution.NormalDistributionTest.makeCumulativeTestValues():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.cumulativeTestPoints[] == [-2.226325, -1.156887, -0.6439496, -0.2027951, 0.3058278, 6.426325, 5.356887, 4.84395, 4.402795, 3.894172]
this.cumulativeTestValues[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
return[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
size(this.cumulativeTestPoints[]) == 10
size(this.cumulativeTestValues[]) == 10
size(return[]) == 10
===========================================================================
org.apache.commons.math.distribution.NormalDistributionTest.makeDistribution():::ENTER
this.distribution == null
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.NormalDistributionTest.makeDistribution():::EXIT
this.distribution == orig(this.distribution)
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.distribution == null
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
return.getClass().getName() == org.apache.commons.math.distribution.NormalDistributionImpl.class
===========================================================================
org.apache.commons.math.distribution.NormalDistributionTest.testQuantiles():::ENTER
this has only one value
this.distribution has only one value
this.cumulativeTestPoints has only one value
this.cumulativeTestPoints[] == [-2.226325, -1.156887, -0.6439496, -0.2027951, 0.3058278, 6.426325, 5.356887, 4.84395, 4.402795, 3.894172]
this.cumulativeTestValues has only one value
this.cumulativeTestValues[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
size(this.cumulativeTestPoints[]) == 10
size(this.cumulativeTestValues[]) == 10
===========================================================================
org.apache.commons.math.distribution.NormalDistributionTest.testQuantiles():::EXIT
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
this.distribution has only one value
this.cumulativeTestPoints has only one value
this.cumulativeTestPoints[] == [-0.2, -0.1, 0.0, 0.1, 0.2, 0.30000000000000004, 0.4, 0.5]
this.cumulativeTestValues has only one value
this.cumulativeTestValues[] == [0.02275013, 0.1586553, 0.5, 0.8413447, 0.9772499, 0.9986501, 0.9999683, 0.9999997]
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
size(this.cumulativeTestPoints[]) == 8
size(this.cumulativeTestValues[]) == 8
===========================================================================
org.apache.commons.math.distribution.NormalDistributionTest.testSetMean():::ENTER
this has only one value
this.distribution has only one value
this.cumulativeTestPoints has only one value
this.cumulativeTestPoints[] == [-2.226325, -1.156887, -0.6439496, -0.2027951, 0.3058278, 6.426325, 5.356887, 4.84395, 4.402795, 3.894172]
this.cumulativeTestValues has only one value
this.cumulativeTestValues[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
size(this.cumulativeTestPoints[]) == 10
size(this.cumulativeTestValues[]) == 10
===========================================================================
org.apache.commons.math.distribution.NormalDistributionTest.testSetMean():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
this.distribution has only one value
this.cumulativeTestPoints has only one value
this.cumulativeTestPoints[] == [-2.736456507830961, -1.336456507830961, 0.06354349216903887, 1.463543492169039, 2.863543492169039, 4.263543492169038, 5.663543492169039, 7.063543492169039]
this.cumulativeTestValues has only one value
this.cumulativeTestValues[] == [0.02275013, 0.1586553, 0.5, 0.8413447, 0.9772499, 0.9986501, 0.9999683, 0.9999997]
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
size(this.cumulativeTestPoints[]) == 8
size(this.cumulativeTestValues[]) == 8
===========================================================================
org.apache.commons.math.distribution.NormalDistributionTest.testSetStandardDeviation():::ENTER
this has only one value
this.distribution has only one value
this.cumulativeTestPoints has only one value
this.cumulativeTestPoints[] == [-2.226325, -1.156887, -0.6439496, -0.2027951, 0.3058278, 6.426325, 5.356887, 4.84395, 4.402795, 3.894172]
this.cumulativeTestValues has only one value
this.cumulativeTestValues[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
size(this.cumulativeTestPoints[]) == 10
size(this.cumulativeTestValues[]) == 10
===========================================================================
org.apache.commons.math.distribution.NormalDistributionTest.testSetStandardDeviation():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
this.distribution has only one value
this.cumulativeTestPoints has only one value
this.cumulativeTestPoints[] == [0.5868385707453707, 1.3434192853726854, 2.1, 2.8565807146273148, 3.6131614292546295, 4.369742143881944, 5.126322858509258, 5.8829035731365735]
this.cumulativeTestValues has only one value
this.cumulativeTestValues[] == [0.02275013, 0.1586553, 0.5, 0.8413447, 0.9772499, 0.9986501, 0.9999683, 0.9999997]
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
size(this.cumulativeTestPoints[]) == 8
size(this.cumulativeTestValues[]) == 8
===========================================================================
org.apache.commons.math.distribution.NormalDistributionTest.verifyQuantiles():::ENTER
this.cumulativeTestPoints[] one of { [-2.226325, -1.156887, -0.6439496, -0.2027951, 0.3058278, 6.426325, 5.356887, 4.84395, 4.402795, 3.894172], [-2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0], [-0.6999999999999997, 0.7000000000000002, 2.1, 3.5, 4.9, 6.299999999999999, 7.699999999999999, 9.1] }
===========================================================================
org.apache.commons.math.distribution.NormalDistributionTest.verifyQuantiles():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
this.cumulativeTestValues[] == [0.02275013, 0.1586553, 0.5, 0.8413447, 0.9772499, 0.9986501, 0.9999683, 0.9999997]
size(this.cumulativeTestPoints[]) == 8
size(this.cumulativeTestValues[]) == 8
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionImpl:::CLASS
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionImpl:::OBJECT
this.normal.getClass().getName() == org.apache.commons.math.distribution.NormalDistributionImpl.class
this.mean >= 0.0
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionImpl.PoissonDistributionImpl(double):::ENTER
p one of { 1.0, 4.0, 100.0 }
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionImpl.PoissonDistributionImpl(double):::EXIT
this.mean == orig(p)
this.mean one of { 1.0, 4.0, 100.0 }
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionImpl.PoissonDistributionImpl(double, org.apache.commons.math.distribution.NormalDistribution):::ENTER
p one of { 1.0, 4.0, 100.0 }
z.getClass().getName() == org.apache.commons.math.distribution.NormalDistributionImpl.class
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionImpl.PoissonDistributionImpl(double, org.apache.commons.math.distribution.NormalDistribution):::EXIT
this.normal == orig(z)
this.normal.getClass().getName() == orig(z.getClass().getName())
this.mean == orig(p)
this.mean one of { 1.0, 4.0, 100.0 }
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionImpl.cumulativeProbability(int):::ENTER
this.mean >= 1.0
x >= -1
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionImpl.cumulativeProbability(int):::EXIT122
this.mean one of { 1.0, 4.0 }
return == 0.0
orig(x) == -1
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionImpl.cumulativeProbability(int):::EXIT125
this.normal has only one value
this.mean == 4.0
return == 1.0
orig(this) has only one value
orig(x) == 2147483647
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionImpl.cumulativeProbability(int):::EXIT127
orig(x) >= 0
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionImpl.cumulativeProbability(int):::EXIT
this.normal == orig(this.normal)
this.normal.getClass().getName() == orig(this.normal.getClass().getName())
this.mean == orig(this.mean)
this.mean >= 1.0
return <= 1.0
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionImpl.getDomainLowerBound(double):::ENTER
this.mean >= 1.0
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionImpl.getDomainLowerBound(double):::EXIT
this.normal == orig(this.normal)
this.normal.getClass().getName() == orig(this.normal.getClass().getName())
this.mean == orig(this.mean)
this.mean >= 1.0
return == 0
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionImpl.getDomainUpperBound(double):::ENTER
this.mean >= 1.0
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionImpl.getDomainUpperBound(double):::EXIT
this.normal == orig(this.normal)
this.normal.getClass().getName() == orig(this.normal.getClass().getName())
this.mean == orig(this.mean)
this.mean >= 1.0
return == 2147483647
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionImpl.normalApproximateProbability(int):::ENTER
this has only one value
this.normal has only one value
this.mean one of { 100.0, 10000.0 }
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionImpl.normalApproximateProbability(int):::EXIT
this.normal == orig(this.normal)
this.normal.getClass().getName() == orig(this.normal.getClass().getName())
this.mean == orig(this.mean)
this.normal has only one value
this.mean one of { 100.0, 10000.0 }
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionImpl.setMean(double):::ENTER
p >= 1.0
this.mean <= p
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionImpl.setMean(double):::EXIT
this.normal == orig(this.normal)
this.normal.getClass().getName() == orig(this.normal.getClass().getName())
this.mean == orig(p)
this.mean >= 1.0
this.mean >= orig(this.mean)
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionImpl.setNormal(org.apache.commons.math.distribution.NormalDistribution):::ENTER
this.normal == null
this.mean == 0.0
value.getClass().getName() == org.apache.commons.math.distribution.NormalDistributionImpl.class
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionImpl.setNormal(org.apache.commons.math.distribution.NormalDistribution):::EXIT
this.normal == orig(value)
this.normal.getClass().getName() == orig(value.getClass().getName())
this.mean == orig(this.mean)
this.mean == 0.0
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest:::CLASS
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest:::OBJECT
this.distribution.getClass().getName() == org.apache.commons.math.distribution.PoissonDistributionImpl.class
this.tolerance == 1.0E-12
this.densityTestPoints[] == [-1, 0, 1, 2, 3, 4, 5, 10, 20]
this.densityTestPoints[] elements >= -1
this.densityTestPoints[] sorted by <
this.densityTestValues[] == [0.0, 0.0183156388887, 0.073262555555, 0.14652511111, 0.195366814813, 0.195366814813, 0.156293451851, 0.00529247667642, 8.27746364655E-9]
this.cumulativeTestPoints[] == [-1, 0, 1, 2, 3, 4, 5, 10, 20]
this.cumulativeTestPoints[] elements >= -1
this.cumulativeTestPoints[] sorted by <
this.cumulativeTestValues[] == [0.0, 0.0183156388887, 0.0915781944437, 0.238103305554, 0.433470120367, 0.62883693518, 0.78513038703, 0.99716023388, 0.999999998077]
this.cumulativeTestValues[] sorted by <
this.inverseCumulativeTestPoints[] == [0.0, 0.018315638889, 0.0915781944437, 0.238103305554, 0.433470120367, 0.62883693518, 0.78513038704, 0.99716023388, 0.999999998077]
this.inverseCumulativeTestPoints[] sorted by <
this.inverseCumulativeTestValues[] == [-1, 0, 1, 2, 3, 4, 5, 10, 20]
this.inverseCumulativeTestValues[] elements >= -1
this.inverseCumulativeTestValues[] sorted by <
size(this.densityTestPoints[]) == 9
size(this.densityTestValues[]) == 9
size(this.cumulativeTestPoints[]) == 9
size(this.cumulativeTestValues[]) == 9
size(this.inverseCumulativeTestPoints[]) == 9
size(this.inverseCumulativeTestValues[]) == 9
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.PoissonDistributionTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.PoissonDistributionTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
this.distribution == null
this.densityTestPoints == null
this.densityTestValues == null
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.makeCumulativeTestPoints():::ENTER
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.makeCumulativeTestPoints():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.densityTestPoints == orig(this.densityTestPoints)
this.densityTestPoints[] == orig(this.densityTestPoints[])
this.densityTestValues == orig(this.densityTestValues)
this.densityTestValues[] == orig(this.densityTestValues[])
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
return[] == [-1, 0, 1, 2, 3, 4, 5, 10, 20]
return[] elements >= -1
size(return[]) == 9
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.makeCumulativeTestValues():::ENTER
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.makeCumulativeTestValues():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.densityTestPoints == orig(this.densityTestPoints)
this.densityTestPoints[] == orig(this.densityTestPoints[])
this.densityTestValues == orig(this.densityTestValues)
this.densityTestValues[] == orig(this.densityTestValues[])
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
return[] == [0.0, 0.0183156388887, 0.0915781944437, 0.238103305554, 0.433470120367, 0.62883693518, 0.78513038703, 0.99716023388, 0.999999998077]
size(return[]) == 9
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.makeDensityTestPoints():::ENTER
this.densityTestPoints == null
this.densityTestValues == null
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.makeDensityTestPoints():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.densityTestPoints == orig(this.densityTestPoints)
this.densityTestValues == orig(this.densityTestValues)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.densityTestPoints == null
this.densityTestValues == null
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
return[] == [-1, 0, 1, 2, 3, 4, 5, 10, 20]
return[] elements >= -1
size(return[]) == 9
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.makeDensityTestValues():::ENTER
this.densityTestValues == null
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.makeDensityTestValues():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.densityTestPoints == orig(this.densityTestPoints)
this.densityTestPoints[] == orig(this.densityTestPoints[])
this.densityTestValues == orig(this.densityTestValues)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.densityTestValues == null
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
return[] == [0.0, 0.0183156388887, 0.073262555555, 0.14652511111, 0.195366814813, 0.195366814813, 0.156293451851, 0.00529247667642, 8.27746364655E-9]
size(return[]) == 9
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.makeDistribution():::ENTER
this.distribution == null
this.densityTestPoints == null
this.densityTestValues == null
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.makeDistribution():::EXIT
this.distribution == orig(this.distribution)
this.tolerance == orig(this.tolerance)
this.densityTestPoints == orig(this.densityTestPoints)
this.densityTestValues == orig(this.densityTestValues)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.distribution == null
this.densityTestPoints == null
this.densityTestValues == null
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
return.getClass().getName() == org.apache.commons.math.distribution.PoissonDistributionImpl.class
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.makeInverseCumulativeTestPoints():::ENTER
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.makeInverseCumulativeTestPoints():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.densityTestPoints == orig(this.densityTestPoints)
this.densityTestPoints[] == orig(this.densityTestPoints[])
this.densityTestValues == orig(this.densityTestValues)
this.densityTestValues[] == orig(this.densityTestValues[])
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
return[] == [0.0, 0.018315638889, 0.0915781944437, 0.238103305554, 0.433470120367, 0.62883693518, 0.78513038704, 0.99716023388, 0.999999998077]
size(return[]) == 9
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.makeInverseCumulativeTestValues():::ENTER
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.makeInverseCumulativeTestValues():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.densityTestPoints == orig(this.densityTestPoints)
this.densityTestPoints[] == orig(this.densityTestPoints[])
this.densityTestValues == orig(this.densityTestValues)
this.densityTestValues[] == orig(this.densityTestValues[])
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestValues == null
return[] == [-1, 0, 1, 2, 3, 4, 5, 10, 20]
return[] elements >= -1
size(return[]) == 9
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.testDegenerateInverseCumulativeProbability():::ENTER
this has only one value
this.distribution has only one value
this.densityTestPoints has only one value
this.densityTestValues has only one value
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.testDegenerateInverseCumulativeProbability():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.densityTestPoints == orig(this.densityTestPoints)
this.densityTestPoints[] == orig(this.densityTestPoints[])
this.densityTestValues == orig(this.densityTestValues)
this.densityTestValues[] == orig(this.densityTestValues[])
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
this.distribution has only one value
this.densityTestPoints has only one value
this.densityTestValues has only one value
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.testLargeMeanCumulativeProbability():::ENTER
this has only one value
this.distribution has only one value
this.densityTestPoints has only one value
this.densityTestValues has only one value
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.testLargeMeanCumulativeProbability():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.densityTestPoints == orig(this.densityTestPoints)
this.densityTestPoints[] == orig(this.densityTestPoints[])
this.densityTestValues == orig(this.densityTestValues)
this.densityTestValues[] == orig(this.densityTestValues[])
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
this.distribution has only one value
this.densityTestPoints has only one value
this.densityTestValues has only one value
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.testLargeMeanInverseCumulativeProbability():::ENTER
this has only one value
this.distribution has only one value
this.densityTestPoints has only one value
this.densityTestValues has only one value
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.testLargeMeanInverseCumulativeProbability():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.densityTestPoints == orig(this.densityTestPoints)
this.densityTestPoints[] == orig(this.densityTestPoints[])
this.densityTestValues == orig(this.densityTestValues)
this.densityTestValues[] == orig(this.densityTestValues[])
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
this.distribution has only one value
this.densityTestPoints has only one value
this.densityTestValues has only one value
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.testNormalApproximateProbability():::ENTER
this has only one value
this.distribution has only one value
this.densityTestPoints has only one value
this.densityTestValues has only one value
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.testNormalApproximateProbability():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.densityTestPoints == orig(this.densityTestPoints)
this.densityTestPoints[] == orig(this.densityTestPoints[])
this.densityTestValues == orig(this.densityTestValues)
this.densityTestValues[] == orig(this.densityTestValues[])
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
this.distribution has only one value
this.densityTestPoints has only one value
this.densityTestValues has only one value
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl:::CLASS
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl:::OBJECT
this has only one value
this.degreesOfFreedom one of { 0.0, 1.0 }
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.TDistributionImpl(double):::ENTER
degreesOfFreedom == 1.0
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.TDistributionImpl(double):::EXIT
this.degreesOfFreedom == orig(degreesOfFreedom)
this.degreesOfFreedom == 1.0
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.setDegreesOfFreedom(double):::ENTER
this.degreesOfFreedom == 0.0
degreesOfFreedom == 1.0
===========================================================================
org.apache.commons.math.distribution.TDistributionImpl.setDegreesOfFreedom(double):::EXIT
this.degreesOfFreedom == orig(degreesOfFreedom)
this.degreesOfFreedom == 1.0
===========================================================================
org.apache.commons.math.special.Erf:::CLASS
===========================================================================
org.apache.commons.math.special.Erf.erf(double):::ENTER
===========================================================================
org.apache.commons.math.special.Erf.erf(double):::EXIT
===========================================================================
org.apache.commons.math.special.ErfTest:::OBJECT
===========================================================================
org.apache.commons.math.special.ErfTest.ErfTest():::EXIT
===========================================================================
org.apache.commons.math.special.ErfTest.testErf0():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.special.ErfTest.testErf0():::EXIT
===========================================================================
org.apache.commons.math.special.ErfTest.testErf1960():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.special.ErfTest.testErf1960():::EXIT
===========================================================================
org.apache.commons.math.special.ErfTest.testErf2576():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.special.ErfTest.testErf2576():::EXIT
===========================================================================
org.apache.commons.math.special.ErfTest.testErf2807():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.special.ErfTest.testErf2807():::EXIT
===========================================================================
org.apache.commons.math.special.ErfTest.testErf3291():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.special.ErfTest.testErf3291():::EXIT
===========================================================================
org.apache.commons.math.special.Gamma$1:::CLASS
===========================================================================
org.apache.commons.math.special.Gamma$1:::OBJECT
this.val$a >= 1.0
===========================================================================
org.apache.commons.math.special.Gamma$1.(double):::ENTER
$hidden$1 >= 1.0
===========================================================================
org.apache.commons.math.special.Gamma$1.(double):::EXIT
===========================================================================
org.apache.commons.math.special.Gamma$1.getA(int, double):::ENTER
n >= 0
x >= 1.0
===========================================================================
org.apache.commons.math.special.Gamma$1.getA(int, double):::EXIT
this.val$a == orig(this.val$a)
return >= 1.0
===========================================================================
org.apache.commons.math.special.Gamma$1.getB(int, double):::ENTER
n >= 1
x >= 1.0
===========================================================================
org.apache.commons.math.special.Gamma$1.getB(int, double):::EXIT
this.val$a == orig(this.val$a)
===========================================================================
org.apache.commons.math.special.Gamma:::CLASS
org.apache.commons.math.special.Gamma.lanczos has only one value
org.apache.commons.math.special.Gamma.lanczos != null
org.apache.commons.math.special.Gamma.lanczos[] == [0.9999999999999971, 57.15623566586292, -59.59796035547549, 14.136097974741746, -0.4919138160976202, 3.399464998481189E-5, 4.652362892704858E-5, -9.837447530487956E-5, 1.580887032249125E-4, -2.1026444172410488E-4, 2.1743961811521265E-4, -1.643181065367639E-4, 8.441822398385275E-5, -2.6190838401581408E-5, 3.6899182659531625E-6]
org.apache.commons.math.special.Gamma.lanczos[] elements != 0
org.apache.commons.math.special.Gamma.HALF_LOG_2_PI == 0.9189385332046727
size(org.apache.commons.math.special.Gamma.lanczos[]) == 15
===========================================================================
org.apache.commons.math.special.Gamma.logGamma(double):::ENTER
x >= 0.05
===========================================================================
org.apache.commons.math.special.Gamma.logGamma(double):::EXIT
org.apache.commons.math.special.Gamma.lanczos == orig(org.apache.commons.math.special.Gamma.lanczos)
org.apache.commons.math.special.Gamma.lanczos[] == orig(org.apache.commons.math.special.Gamma.lanczos[])
org.apache.commons.math.special.Gamma.HALF_LOG_2_PI == orig(org.apache.commons.math.special.Gamma.HALF_LOG_2_PI)
return >= -4.440892098500626E-16
===========================================================================
org.apache.commons.math.special.Gamma.regularizedGammaP(double, double):::ENTER
===========================================================================
org.apache.commons.math.special.Gamma.regularizedGammaP(double, double):::EXIT
org.apache.commons.math.special.Gamma.lanczos == orig(org.apache.commons.math.special.Gamma.lanczos)
org.apache.commons.math.special.Gamma.lanczos[] == orig(org.apache.commons.math.special.Gamma.lanczos[])
org.apache.commons.math.special.Gamma.HALF_LOG_2_PI == orig(org.apache.commons.math.special.Gamma.HALF_LOG_2_PI)
===========================================================================
org.apache.commons.math.special.Gamma.regularizedGammaP(double, double, double, int):::ENTER
epsilon one of { 1.0E-15, 1.0E-14, 1.0E-12 }
maxIterations one of { 10000, 2147483647 }
===========================================================================
org.apache.commons.math.special.Gamma.regularizedGammaP(double, double, double, int):::EXIT
org.apache.commons.math.special.Gamma.lanczos == orig(org.apache.commons.math.special.Gamma.lanczos)
org.apache.commons.math.special.Gamma.lanczos[] == orig(org.apache.commons.math.special.Gamma.lanczos[])
org.apache.commons.math.special.Gamma.HALF_LOG_2_PI == orig(org.apache.commons.math.special.Gamma.HALF_LOG_2_PI)
return >= 0.0
===========================================================================
org.apache.commons.math.special.Gamma.regularizedGammaQ(double, double):::ENTER
===========================================================================
org.apache.commons.math.special.Gamma.regularizedGammaQ(double, double):::EXIT
org.apache.commons.math.special.Gamma.lanczos == orig(org.apache.commons.math.special.Gamma.lanczos)
org.apache.commons.math.special.Gamma.lanczos[] == orig(org.apache.commons.math.special.Gamma.lanczos[])
org.apache.commons.math.special.Gamma.HALF_LOG_2_PI == orig(org.apache.commons.math.special.Gamma.HALF_LOG_2_PI)
return one of { 1.0, Double.NaN }
===========================================================================
org.apache.commons.math.special.Gamma.regularizedGammaQ(double, double, double, int):::ENTER
epsilon one of { 1.0E-14, 1.0E-12 }
maxIterations == 2147483647
===========================================================================
org.apache.commons.math.special.Gamma.regularizedGammaQ(double, double, double, int):::EXIT
org.apache.commons.math.special.Gamma.lanczos == orig(org.apache.commons.math.special.Gamma.lanczos)
org.apache.commons.math.special.Gamma.lanczos[] == orig(org.apache.commons.math.special.Gamma.lanczos[])
org.apache.commons.math.special.Gamma.HALF_LOG_2_PI == orig(org.apache.commons.math.special.Gamma.HALF_LOG_2_PI)
return <= 1.0
===========================================================================
org.apache.commons.math.special.GammaTest:::OBJECT
===========================================================================
org.apache.commons.math.special.GammaTest.GammaTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.special.GammaTest.GammaTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.math.special.GammaTest.testRegularizedGamma(double, double, double):::ENTER
expected one of { 0.0, Double.NaN }
===========================================================================
org.apache.commons.math.special.GammaTest.testRegularizedGamma(double, double, double):::EXIT
===========================================================================
org.apache.commons.math.special.GammaTest.testRegularizedGammaNanPositive():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.special.GammaTest.testRegularizedGammaNanPositive():::EXIT
===========================================================================
org.apache.commons.math.special.GammaTest.testRegularizedGammaNegativePositive():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.special.GammaTest.testRegularizedGammaNegativePositive():::EXIT
===========================================================================
org.apache.commons.math.special.GammaTest.testRegularizedGammaPositiveNan():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.special.GammaTest.testRegularizedGammaPositiveNan():::EXIT
===========================================================================
org.apache.commons.math.special.GammaTest.testRegularizedGammaPositiveNegative():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.special.GammaTest.testRegularizedGammaPositiveNegative():::EXIT
===========================================================================
org.apache.commons.math.special.GammaTest.testRegularizedGammaPositiveZero():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.special.GammaTest.testRegularizedGammaPositiveZero():::EXIT
===========================================================================
org.apache.commons.math.special.GammaTest.testRegularizedGammaZeroPositive():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.special.GammaTest.testRegularizedGammaZeroPositive():::EXIT
===========================================================================
org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic:::CLASS
===========================================================================
org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic:::OBJECT
===========================================================================
org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic.AbstractStorelessUnivariateStatistic():::EXIT
===========================================================================
org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic:::CLASS
===========================================================================
org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic:::OBJECT
===========================================================================
org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic.AbstractUnivariateStatistic():::EXIT
===========================================================================
org.apache.commons.math.stat.descriptive.SummaryStatistics:::CLASS
===========================================================================
org.apache.commons.math.stat.descriptive.SummaryStatistics:::OBJECT
this.getClass().getName() == org.apache.commons.math.stat.descriptive.SummaryStatisticsImpl.class
===========================================================================
org.apache.commons.math.stat.descriptive.SummaryStatistics.SummaryStatistics():::EXIT
===========================================================================
org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance():::ENTER
===========================================================================
org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance():::EXIT63
===========================================================================
org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance():::EXIT
return.getClass().getName() == org.apache.commons.math.stat.descriptive.SummaryStatisticsImpl.class
===========================================================================
org.apache.commons.math.stat.descriptive.SummaryStatisticsImpl:::CLASS
===========================================================================
org.apache.commons.math.stat.descriptive.SummaryStatisticsImpl:::OBJECT
this.n == 0
this.secondMoment.m2 == Double.NaN
this.secondMoment.n == 0
this.secondMoment.m1 == Double.NaN
this.secondMoment.dev == Double.NaN
this.secondMoment.nDev == Double.NaN
this.sum.n == 0
this.sum.value == Double.NaN
this.sumsq.n == 0
this.sumsq.value == Double.NaN
this.min.n == 0
this.min.value == Double.NaN
this.max.n == 0
this.max.value == Double.NaN
this.sumLog.n == 0
this.sumLog.value == 0.0
this.geoMean.sumOfLogs.n == 0
this.geoMean.sumOfLogs.value == 0.0
this.mean == null
this.variance == null
===========================================================================
org.apache.commons.math.stat.descriptive.SummaryStatisticsImpl.SummaryStatisticsImpl():::EXIT
===========================================================================
org.apache.commons.math.stat.descriptive.moment.FirstMoment:::CLASS
===========================================================================
org.apache.commons.math.stat.descriptive.moment.FirstMoment:::OBJECT
this.n == 0
this.m1 == Double.NaN
this.dev == Double.NaN
this.nDev == Double.NaN
===========================================================================
org.apache.commons.math.stat.descriptive.moment.FirstMoment.FirstMoment():::EXIT
===========================================================================
org.apache.commons.math.stat.descriptive.moment.GeometricMean:::CLASS
===========================================================================
org.apache.commons.math.stat.descriptive.moment.GeometricMean:::OBJECT
this.sumOfLogs.n == 0
this.sumOfLogs.value == 0.0
===========================================================================
org.apache.commons.math.stat.descriptive.moment.GeometricMean.GeometricMean():::EXIT
===========================================================================
org.apache.commons.math.stat.descriptive.moment.SecondMoment:::CLASS
===========================================================================
org.apache.commons.math.stat.descriptive.moment.SecondMoment:::OBJECT
this.m2 == Double.NaN
this.n == 0
this.m1 == Double.NaN
this.dev == Double.NaN
this.nDev == Double.NaN
===========================================================================
org.apache.commons.math.stat.descriptive.moment.SecondMoment.SecondMoment():::EXIT
===========================================================================
org.apache.commons.math.stat.descriptive.rank.Max:::CLASS
===========================================================================
org.apache.commons.math.stat.descriptive.rank.Max:::OBJECT
this.n == 0
this.value == Double.NaN
===========================================================================
org.apache.commons.math.stat.descriptive.rank.Max.Max():::EXIT
===========================================================================
org.apache.commons.math.stat.descriptive.rank.Min:::CLASS
===========================================================================
org.apache.commons.math.stat.descriptive.rank.Min:::OBJECT
this.n == 0
this.value == Double.NaN
===========================================================================
org.apache.commons.math.stat.descriptive.rank.Min.Min():::EXIT
===========================================================================
org.apache.commons.math.stat.descriptive.summary.Sum:::CLASS
===========================================================================
org.apache.commons.math.stat.descriptive.summary.Sum:::OBJECT
this.n == 0
this.value == Double.NaN
===========================================================================
org.apache.commons.math.stat.descriptive.summary.Sum.Sum():::EXIT
===========================================================================
org.apache.commons.math.stat.descriptive.summary.SumOfLogs:::CLASS
===========================================================================
org.apache.commons.math.stat.descriptive.summary.SumOfLogs:::OBJECT
this.n == 0
this.value == 0.0
===========================================================================
org.apache.commons.math.stat.descriptive.summary.SumOfLogs.SumOfLogs():::EXIT
===========================================================================
org.apache.commons.math.stat.descriptive.summary.SumOfSquares:::CLASS
===========================================================================
org.apache.commons.math.stat.descriptive.summary.SumOfSquares:::OBJECT
this.n == 0
this.value == Double.NaN
===========================================================================
org.apache.commons.math.stat.descriptive.summary.SumOfSquares.SumOfSquares():::EXIT
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareFactoryTest:::OBJECT
this.testStatistic != null
this.testStatistic.getClass().getName() == org.apache.commons.math.stat.inference.ChiSquareTestImpl.class
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareFactoryTest.ChiSquareFactoryTest(java.lang.String):::ENTER
name != null
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareFactoryTest.ChiSquareFactoryTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareFactoryTest.setUp():::ENTER
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareFactoryTest.setUp():::EXIT
this.testStatistic.getClass().getName() == orig(this.testStatistic.getClass().getName())
this.testStatistic has only one value
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareFactoryTest.suite():::EXIT
return.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestImpl:::OBJECT
this.distribution.getClass().getName() == org.apache.commons.math.distribution.ChiSquaredDistributionImpl.class
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestImpl.ChiSquareTestImpl():::EXIT
this.distribution != null
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestImpl.ChiSquareTestImpl(org.apache.commons.math.distribution.ChiSquaredDistribution):::ENTER
x != null
x.getClass().getName() == org.apache.commons.math.distribution.ChiSquaredDistributionImpl.class
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestImpl.ChiSquareTestImpl(org.apache.commons.math.distribution.ChiSquaredDistribution):::EXIT
this.distribution != null
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestImpl.checkArray(long[][]):::ENTER
this.distribution != null
in != null
in.getClass().getName() == long[][].class
in[] elements != null
size(in[]) == 3
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestImpl.checkArray(long[][]):::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
in[] == orig(in[])
this.distribution != null
in[] elements != null
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquare(double[], long[]):::ENTER
this.distribution != null
expected != null
expected[] one of { [10.0, 10.0, 10.0], [485.0, 541.0, 82.0, 61.0, 37.0], [3389119.5, 649136.6, 285745.4, 2.535736476E7, 1.129118978E7, 543628.0, 232921.0, 437665.75] }
observed != null
observed[] one of { [10, 9, 11], [500, 623, 72, 70, 31], [2372383, 584222, 257170, 17750155, 7903832, 489265, 209628, 393899] }
size(expected[]) one of { 3, 5, 8 }
size(observed[]) one of { 3, 5, 8 }
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquare(double[], long[]):::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
expected[] == orig(expected[])
observed[] == orig(observed[])
this.distribution != null
expected[] one of { [10.0, 10.0, 10.0], [485.0, 541.0, 82.0, 61.0, 37.0], [3389119.5, 649136.6, 285745.4, 2.535736476E7, 1.129118978E7, 543628.0, 232921.0, 437665.75] }
observed[] one of { [10, 9, 11], [500, 623, 72, 70, 31], [2372383, 584222, 257170, 17750155, 7903832, 489265, 209628, 393899] }
return one of { 0.2, 16.413107036160778, 3624883.3429077636 }
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquare(long[][]):::ENTER
this.distribution != null
counts != null
counts.getClass().getName() == long[][].class
counts[] elements != null
size(counts[]) == 3
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquare(long[][]):::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
counts[] == orig(counts[])
this.distribution != null
counts[] elements != null
return one of { 0.1689655172413794, 9.674446622633205, 22.709027688037505 }
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquareTest(double[], long[]):::ENTER
this.distribution != null
expected != null
expected[] one of { [10.0, 10.0, 10.0], [485.0, 541.0, 82.0, 61.0, 37.0], [3389119.5, 649136.6, 285745.4, 2.535736476E7, 1.129118978E7, 543628.0, 232921.0, 437665.75] }
observed != null
observed[] one of { [10, 9, 11], [500, 623, 72, 70, 31], [2372383, 584222, 257170, 17750155, 7903832, 489265, 209628, 393899] }
size(expected[]) one of { 3, 5, 8 }
size(observed[]) one of { 3, 5, 8 }
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquareTest(double[], long[]):::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
expected[] == orig(expected[])
observed[] == orig(observed[])
this.distribution != null
expected[] one of { [10.0, 10.0, 10.0], [485.0, 541.0, 82.0, 61.0, 37.0], [3389119.5, 649136.6, 285745.4, 2.535736476E7, 1.129118978E7, 543628.0, 232921.0, 437665.75] }
observed[] one of { [10, 9, 11], [500, 623, 72, 70, 31], [2372383, 584222, 257170, 17750155, 7903832, 489265, 209628, 393899] }
return one of { 0.0, 0.002512095663000702, 0.9048374180359595 }
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquareTest(double[], long[], double):::ENTER
expected[] == [485.0, 541.0, 82.0, 61.0, 37.0]
observed[] == [500, 623, 72, 70, 31]
alpha one of { 0.002, 0.003 }
size(expected[]) == 5
size(observed[]) == 5
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquareTest(double[], long[], double):::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
expected[] == orig(expected[])
observed[] == orig(observed[])
(return == false)  <==>  (orig(alpha) == 0.002)
(return == true)  <==>  (orig(alpha) == 0.003)
expected[] == [485.0, 541.0, 82.0, 61.0, 37.0]
observed[] == [500, 623, 72, 70, 31]
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquareTest(double[], long[], double):::EXIT;condition="return == true"
return == true
orig(alpha) == 0.003
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquareTest(double[], long[], double):::EXIT;condition="not(return == true)"
return == false
orig(alpha) == 0.002
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquareTest(long[][]):::ENTER
this.distribution != null
counts != null
counts.getClass().getName() == long[][].class
counts[] elements != null
size(counts[]) == 3
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquareTest(long[][]):::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
counts[] == orig(counts[])
this.distribution != null
counts[] elements != null
return one of { 1.4475146013426254E-4, 0.04628357706028874, 0.9189874998523073 }
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquareTest(long[][], double):::ENTER
counts.getClass().getName() == long[][].class
alpha one of { 1.0E-4, 2.0E-4, 0.1 }
size(counts[]) == 3
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquareTest(long[][], double):::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
counts[] == orig(counts[])
(return == false)  <==>  (orig(alpha) one of { 1.0E-4, 0.1 })
(return == true)  <==>  (orig(alpha) == 2.0E-4)
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquareTest(long[][], double):::EXIT;condition="return == true"
return == true
orig(alpha) == 2.0E-4
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquareTest(long[][], double):::EXIT;condition="not(return == true)"
return == false
orig(alpha) one of { 1.0E-4, 0.1 }
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestImpl.isNonNegative(long[]):::ENTER
this.distribution != null
in != null
in[] elements >= -1
size(in[]) one of { 3, 5, 8 }
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestImpl.isNonNegative(long[]):::EXIT260
in[] == [-1, 9, 11]
in[] elements one of { -1, 9, 11 }
return == false
orig(size(in[])) == 3
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestImpl.isNonNegative(long[]):::EXIT260;condition="not(return == true)"
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestImpl.isNonNegative(long[]):::EXIT263
in[] one of { [10, 9, 11], [500, 623, 72, 70, 31], [2372383, 584222, 257170, 17750155, 7903832, 489265, 209628, 393899] }
return == true
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestImpl.isNonNegative(long[]):::EXIT263;condition="return == true"
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestImpl.isNonNegative(long[]):::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
in[] == orig(in[])
(in[] == [-1, 9, 11])  <==>  (return == false)
(in[] == [-1, 9, 11])  ==>  (in[] elements one of { -1, 9, 11 })
(in[] == [-1, 9, 11])  ==>  (orig(size(in[])) == 3)
(in[] one of { [10, 9, 11], [500, 623, 72, 70, 31], [2372383, 584222, 257170, 17750155, 7903832, 489265, 209628, 393899] })  <==>  (return == true)
(in[] one of { [10, 9, 11], [500, 623, 72, 70, 31], [2372383, 584222, 257170, 17750155, 7903832, 489265, 209628, 393899] })  ==>  (orig(size(in[])) one of { 3, 5, 8 })
this.distribution != null
in[] elements >= -1
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestImpl.isNonNegative(long[]):::EXIT;condition="return == true"
in[] one of { [10, 9, 11], [500, 623, 72, 70, 31], [2372383, 584222, 257170, 17750155, 7903832, 489265, 209628, 393899] }
return == true
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestImpl.isNonNegative(long[]):::EXIT;condition="not(return == true)"
in[] == [-1, 9, 11]
in[] elements one of { -1, 9, 11 }
return == false
orig(size(in[])) == 3
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestImpl.isNonNegative(long[][]):::ENTER
this.distribution != null
in != null
in.getClass().getName() == long[][].class
in[] elements != null
size(in[]) == 3
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestImpl.isNonNegative(long[][]):::EXIT278
return == false
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestImpl.isNonNegative(long[][]):::EXIT278;condition="not(return == true)"
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestImpl.isNonNegative(long[][]):::EXIT282
return == true
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestImpl.isNonNegative(long[][]):::EXIT282;condition="return == true"
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestImpl.isNonNegative(long[][]):::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
in[] == orig(in[])
this.distribution != null
in[] elements != null
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestImpl.isNonNegative(long[][]):::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestImpl.isNonNegative(long[][]):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestImpl.isPositive(double[]):::ENTER
this.distribution != null
in != null
in[] elements >= 0.0
size(in[]) one of { 3, 5, 8 }
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestImpl.isPositive(double[]):::EXIT243
in[] == [0.0, 10.0, 10.0]
in[] elements one of { 0.0, 10.0 }
return == false
orig(size(in[])) == 3
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestImpl.isPositive(double[]):::EXIT243;condition="not(return == true)"
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestImpl.isPositive(double[]):::EXIT246
in[] elements >= 1.0
return == true
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestImpl.isPositive(double[]):::EXIT246;condition="return == true"
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestImpl.isPositive(double[]):::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
in[] == orig(in[])
(return == false)  ==>  (in[] == [0.0, 10.0, 10.0])
(return == false)  ==>  (in[] elements one of { 0.0, 10.0 })
(return == false)  ==>  (orig(size(in[])) == 3)
(return == true)  ==>  (in[] elements >= 1.0)
(return == true)  ==>  (orig(size(in[])) one of { 3, 5, 8 })
this.distribution != null
in[] elements >= 0.0
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestImpl.isPositive(double[]):::EXIT;condition="return == true"
in[] elements >= 1.0
return == true
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestImpl.isPositive(double[]):::EXIT;condition="not(return == true)"
in[] == [0.0, 10.0, 10.0]
in[] elements one of { 0.0, 10.0 }
return == false
orig(size(in[])) == 3
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestImpl.isRectangular(long[][]):::ENTER
this.distribution != null
in != null
in.getClass().getName() == long[][].class
in[] elements != null
size(in[]) == 3
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestImpl.isRectangular(long[][]):::EXIT226
return == false
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestImpl.isRectangular(long[][]):::EXIT226;condition="not(return == true)"
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestImpl.isRectangular(long[][]):::EXIT229
return == true
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestImpl.isRectangular(long[][]):::EXIT229;condition="return == true"
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestImpl.isRectangular(long[][]):::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
in[] == orig(in[])
this.distribution != null
in[] elements != null
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestImpl.isRectangular(long[][]):::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestImpl.isRectangular(long[][]):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestImpl.setDistribution(org.apache.commons.math.distribution.ChiSquaredDistribution):::ENTER
this.distribution == null
value != null
value.getClass().getName() == org.apache.commons.math.distribution.ChiSquaredDistributionImpl.class
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestImpl.setDistribution(org.apache.commons.math.distribution.ChiSquaredDistribution):::EXIT
this.distribution != null
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestTest:::OBJECT
this.testStatistic != null
this.testStatistic.getClass().getName() == org.apache.commons.math.stat.inference.ChiSquareTestImpl.class
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestTest.ChiSquareTestTest(java.lang.String):::ENTER
name != null
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestTest.ChiSquareTestTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestTest.setUp():::ENTER
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestTest.setUp():::EXIT
this.testStatistic == orig(this.testStatistic)
this.testStatistic.getClass().getName() == orig(this.testStatistic.getClass().getName())
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestTest.suite():::EXIT
return.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquare():::ENTER
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquare():::EXIT
this.testStatistic == orig(this.testStatistic)
this.testStatistic.getClass().getName() == orig(this.testStatistic.getClass().getName())
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareIndependence():::ENTER
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareIndependence():::EXIT
this.testStatistic == orig(this.testStatistic)
this.testStatistic.getClass().getName() == orig(this.testStatistic.getClass().getName())
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareLargeTestStatistic():::ENTER
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareLargeTestStatistic():::EXIT
this.testStatistic == orig(this.testStatistic)
this.testStatistic.getClass().getName() == orig(this.testStatistic.getClass().getName())
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareZeroCount():::ENTER
===========================================================================
org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareZeroCount():::EXIT
this.testStatistic == orig(this.testStatistic)
this.testStatistic.getClass().getName() == orig(this.testStatistic.getClass().getName())
===========================================================================
org.apache.commons.math.stat.inference.TTestImpl:::OBJECT
this has only one value
this.distribution.getClass().getName() == org.apache.commons.math.distribution.TDistributionImpl.class
===========================================================================
org.apache.commons.math.stat.inference.TTestImpl.TTestImpl():::EXIT
this.distribution has only one value
===========================================================================
org.apache.commons.math.stat.inference.TTestImpl.TTestImpl(org.apache.commons.math.distribution.TDistribution):::ENTER
t has only one value
t.getClass().getName() == org.apache.commons.math.distribution.TDistributionImpl.class
===========================================================================
org.apache.commons.math.stat.inference.TTestImpl.TTestImpl(org.apache.commons.math.distribution.TDistribution):::EXIT
this.distribution == orig(t)
this.distribution.getClass().getName() == orig(t.getClass().getName())
this.distribution has only one value
===========================================================================
org.apache.commons.math.stat.inference.TTestImpl.setDistribution(org.apache.commons.math.distribution.TDistribution):::ENTER
this.distribution == null
value has only one value
value.getClass().getName() == org.apache.commons.math.distribution.TDistributionImpl.class
===========================================================================
org.apache.commons.math.stat.inference.TTestImpl.setDistribution(org.apache.commons.math.distribution.TDistribution):::EXIT
this.distribution == orig(value)
this.distribution.getClass().getName() == orig(value.getClass().getName())
this.distribution has only one value
===========================================================================
org.apache.commons.math.stat.inference.TestFactory:::OBJECT
this.getClass().getName() == org.apache.commons.math.stat.inference.TestFactoryImpl.class
===========================================================================
org.apache.commons.math.stat.inference.TestFactory.TestFactory():::EXIT
===========================================================================
org.apache.commons.math.stat.inference.TestFactory.newInstance():::EXIT47
===========================================================================
org.apache.commons.math.stat.inference.TestFactory.newInstance():::EXIT
return.getClass().getName() == org.apache.commons.math.stat.inference.TestFactoryImpl.class
===========================================================================
org.apache.commons.math.stat.inference.TestFactoryImpl:::OBJECT
===========================================================================
org.apache.commons.math.stat.inference.TestFactoryImpl.TestFactoryImpl():::EXIT
===========================================================================
org.apache.commons.math.stat.inference.TestFactoryImpl.createChiSquareTest():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.stat.inference.TestFactoryImpl.createChiSquareTest():::EXIT
return has only one value
return.getClass().getName() == org.apache.commons.math.stat.inference.ChiSquareTestImpl.class
===========================================================================
org.apache.commons.math.stat.inference.TestFactoryImpl.createTTest():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.stat.inference.TestFactoryImpl.createTTest():::EXIT
return has only one value
return.getClass().getName() == org.apache.commons.math.stat.inference.TTestImpl.class
===========================================================================
org.apache.commons.math.stat.inference.TestUtils:::CLASS
org.apache.commons.math.stat.inference.TestUtils.tTest has only one value
org.apache.commons.math.stat.inference.TestUtils.tTest != null
org.apache.commons.math.stat.inference.TestUtils.tTest.getClass().getName() == org.apache.commons.math.stat.inference.TTestImpl.class
org.apache.commons.math.stat.inference.TestUtils.chiSquareTest has only one value
org.apache.commons.math.stat.inference.TestUtils.chiSquareTest != null
org.apache.commons.math.stat.inference.TestUtils.chiSquareTest.getClass().getName() == org.apache.commons.math.stat.inference.ChiSquareTestImpl.class
org.apache.commons.math.stat.inference.TestUtils.tTest.getClass().getName() != org.apache.commons.math.stat.inference.TestUtils.chiSquareTest.getClass().getName()
===========================================================================
org.apache.commons.math.stat.inference.TestUtils.chiSquare(double[], long[]):::ENTER
expected[] one of { [10.0, 10.0, 10.0], [485.0, 541.0, 82.0, 61.0, 37.0], [3389119.5, 649136.6, 285745.4, 2.535736476E7, 1.129118978E7, 543628.0, 232921.0, 437665.75] }
observed[] one of { [10, 9, 11], [500, 623, 72, 70, 31], [2372383, 584222, 257170, 17750155, 7903832, 489265, 209628, 393899] }
size(expected[]) one of { 3, 5, 8 }
size(observed[]) one of { 3, 5, 8 }
===========================================================================
org.apache.commons.math.stat.inference.TestUtils.chiSquare(double[], long[]):::EXIT
org.apache.commons.math.stat.inference.TestUtils.tTest == orig(org.apache.commons.math.stat.inference.TestUtils.tTest)
org.apache.commons.math.stat.inference.TestUtils.tTest.getClass().getName() == orig(org.apache.commons.math.stat.inference.TestUtils.tTest.getClass().getName())
org.apache.commons.math.stat.inference.TestUtils.chiSquareTest == orig(org.apache.commons.math.stat.inference.TestUtils.chiSquareTest)
org.apache.commons.math.stat.inference.TestUtils.chiSquareTest.getClass().getName() == orig(org.apache.commons.math.stat.inference.TestUtils.chiSquareTest.getClass().getName())
expected[] == orig(expected[])
observed[] == orig(observed[])
expected[] one of { [10.0, 10.0, 10.0], [485.0, 541.0, 82.0, 61.0, 37.0], [3389119.5, 649136.6, 285745.4, 2.535736476E7, 1.129118978E7, 543628.0, 232921.0, 437665.75] }
observed[] one of { [10, 9, 11], [500, 623, 72, 70, 31], [2372383, 584222, 257170, 17750155, 7903832, 489265, 209628, 393899] }
return one of { 0.2, 16.413107036160778, 3624883.3429077636 }
===========================================================================
org.apache.commons.math.stat.inference.TestUtils.chiSquare(long[][]):::ENTER
counts.getClass().getName() == long[][].class
size(counts[]) == 3
===========================================================================
org.apache.commons.math.stat.inference.TestUtils.chiSquare(long[][]):::EXIT
org.apache.commons.math.stat.inference.TestUtils.tTest == orig(org.apache.commons.math.stat.inference.TestUtils.tTest)
org.apache.commons.math.stat.inference.TestUtils.tTest.getClass().getName() == orig(org.apache.commons.math.stat.inference.TestUtils.tTest.getClass().getName())
org.apache.commons.math.stat.inference.TestUtils.chiSquareTest == orig(org.apache.commons.math.stat.inference.TestUtils.chiSquareTest)
org.apache.commons.math.stat.inference.TestUtils.chiSquareTest.getClass().getName() == orig(org.apache.commons.math.stat.inference.TestUtils.chiSquareTest.getClass().getName())
counts[] == orig(counts[])
return one of { 0.1689655172413794, 9.674446622633205, 22.709027688037505 }
===========================================================================
org.apache.commons.math.stat.inference.TestUtils.chiSquareTest(double[], long[]):::ENTER
expected[] one of { [10.0, 10.0, 10.0], [485.0, 541.0, 82.0, 61.0, 37.0] }
observed[] one of { [10, 9, 11], [500, 623, 72, 70, 31] }
size(expected[]) one of { 3, 5 }
size(observed[]) one of { 3, 5 }
===========================================================================
org.apache.commons.math.stat.inference.TestUtils.chiSquareTest(double[], long[]):::EXIT
org.apache.commons.math.stat.inference.TestUtils.tTest == orig(org.apache.commons.math.stat.inference.TestUtils.tTest)
org.apache.commons.math.stat.inference.TestUtils.tTest.getClass().getName() == orig(org.apache.commons.math.stat.inference.TestUtils.tTest.getClass().getName())
org.apache.commons.math.stat.inference.TestUtils.chiSquareTest == orig(org.apache.commons.math.stat.inference.TestUtils.chiSquareTest)
org.apache.commons.math.stat.inference.TestUtils.chiSquareTest.getClass().getName() == orig(org.apache.commons.math.stat.inference.TestUtils.chiSquareTest.getClass().getName())
expected[] == orig(expected[])
observed[] == orig(observed[])
expected[] one of { [10.0, 10.0, 10.0], [485.0, 541.0, 82.0, 61.0, 37.0] }
observed[] one of { [10, 9, 11], [500, 623, 72, 70, 31] }
return one of { 0.002512095663000702, 0.9048374180359595 }
===========================================================================
org.apache.commons.math.stat.inference.TestUtils.chiSquareTest(double[], long[], double):::ENTER
expected has only one value
expected[] == [485.0, 541.0, 82.0, 61.0, 37.0]
observed has only one value
observed[] == [500, 623, 72, 70, 31]
alpha one of { 0.002, 0.003 }
size(expected[]) == 5
size(observed[]) == 5
===========================================================================
org.apache.commons.math.stat.inference.TestUtils.chiSquareTest(double[], long[], double):::EXIT
org.apache.commons.math.stat.inference.TestUtils.tTest == orig(org.apache.commons.math.stat.inference.TestUtils.tTest)
org.apache.commons.math.stat.inference.TestUtils.tTest.getClass().getName() == orig(org.apache.commons.math.stat.inference.TestUtils.tTest.getClass().getName())
org.apache.commons.math.stat.inference.TestUtils.chiSquareTest == orig(org.apache.commons.math.stat.inference.TestUtils.chiSquareTest)
org.apache.commons.math.stat.inference.TestUtils.chiSquareTest.getClass().getName() == orig(org.apache.commons.math.stat.inference.TestUtils.chiSquareTest.getClass().getName())
expected[] == orig(expected[])
observed[] == orig(observed[])
(return == false)  <==>  (orig(alpha) == 0.002)
(return == true)  <==>  (orig(alpha) == 0.003)
expected[] == [485.0, 541.0, 82.0, 61.0, 37.0]
observed[] == [500, 623, 72, 70, 31]
===========================================================================
org.apache.commons.math.stat.inference.TestUtils.chiSquareTest(double[], long[], double):::EXIT;condition="return == true"
return == true
orig(alpha) == 0.003
===========================================================================
org.apache.commons.math.stat.inference.TestUtils.chiSquareTest(double[], long[], double):::EXIT;condition="not(return == true)"
return == false
orig(alpha) == 0.002
===========================================================================
org.apache.commons.math.stat.inference.TestUtils.chiSquareTest(long[][]):::ENTER
counts.getClass().getName() == long[][].class
size(counts[]) == 3
===========================================================================
org.apache.commons.math.stat.inference.TestUtils.chiSquareTest(long[][]):::EXIT
org.apache.commons.math.stat.inference.TestUtils.tTest == orig(org.apache.commons.math.stat.inference.TestUtils.tTest)
org.apache.commons.math.stat.inference.TestUtils.tTest.getClass().getName() == orig(org.apache.commons.math.stat.inference.TestUtils.tTest.getClass().getName())
org.apache.commons.math.stat.inference.TestUtils.chiSquareTest == orig(org.apache.commons.math.stat.inference.TestUtils.chiSquareTest)
org.apache.commons.math.stat.inference.TestUtils.chiSquareTest.getClass().getName() == orig(org.apache.commons.math.stat.inference.TestUtils.chiSquareTest.getClass().getName())
counts[] == orig(counts[])
return one of { 1.4475146013426254E-4, 0.04628357706028874, 0.9189874998523073 }
===========================================================================
org.apache.commons.math.stat.inference.TestUtils.chiSquareTest(long[][], double):::ENTER
counts.getClass().getName() == long[][].class
alpha one of { 1.0E-4, 2.0E-4, 0.1 }
size(counts[]) == 3
===========================================================================
org.apache.commons.math.stat.inference.TestUtils.chiSquareTest(long[][], double):::EXIT
org.apache.commons.math.stat.inference.TestUtils.tTest == orig(org.apache.commons.math.stat.inference.TestUtils.tTest)
org.apache.commons.math.stat.inference.TestUtils.tTest.getClass().getName() == orig(org.apache.commons.math.stat.inference.TestUtils.tTest.getClass().getName())
org.apache.commons.math.stat.inference.TestUtils.chiSquareTest == orig(org.apache.commons.math.stat.inference.TestUtils.chiSquareTest)
org.apache.commons.math.stat.inference.TestUtils.chiSquareTest.getClass().getName() == orig(org.apache.commons.math.stat.inference.TestUtils.chiSquareTest.getClass().getName())
counts[] == orig(counts[])
(return == false)  <==>  (orig(alpha) one of { 1.0E-4, 0.1 })
(return == true)  <==>  (orig(alpha) == 2.0E-4)
(return == true)  ==>  (counts[] contains no nulls and has only one value, of length 3)
(return == true)  ==>  (orig(counts) has only one value)
===========================================================================
org.apache.commons.math.stat.inference.TestUtils.chiSquareTest(long[][], double):::EXIT;condition="return == true"
counts[] contains no nulls and has only one value, of length 3
return == true
orig(counts) has only one value
orig(alpha) == 2.0E-4
===========================================================================
org.apache.commons.math.stat.inference.TestUtils.chiSquareTest(long[][], double):::EXIT;condition="not(return == true)"
return == false
orig(alpha) one of { 1.0E-4, 0.1 }
===========================================================================
org.apache.commons.math.stat.inference.TestUtils.getChiSquareTest():::ENTER
===========================================================================
org.apache.commons.math.stat.inference.TestUtils.getChiSquareTest():::EXIT
org.apache.commons.math.stat.inference.TestUtils.tTest == orig(org.apache.commons.math.stat.inference.TestUtils.tTest)
org.apache.commons.math.stat.inference.TestUtils.tTest.getClass().getName() == orig(org.apache.commons.math.stat.inference.TestUtils.tTest.getClass().getName())
org.apache.commons.math.stat.inference.TestUtils.chiSquareTest == return
org.apache.commons.math.stat.inference.TestUtils.chiSquareTest == orig(org.apache.commons.math.stat.inference.TestUtils.chiSquareTest)
org.apache.commons.math.stat.inference.TestUtils.chiSquareTest.getClass().getName() == return.getClass().getName()
org.apache.commons.math.stat.inference.TestUtils.chiSquareTest.getClass().getName() == orig(org.apache.commons.math.stat.inference.TestUtils.chiSquareTest.getClass().getName())
===========================================================================
org.apache.commons.math.stat.inference.TestUtilsTest:::OBJECT
this.tooShortObs[] == [1.0]
this.tooShortObs[] elements == 1.0
this.nullObserved == null
this.emptyObs[] == []
this.emptyStats.getClass().getName() == org.apache.commons.math.stat.descriptive.SummaryStatisticsImpl.class
this.nullStats == null
this.tooShortStats == null
size(this.tooShortObs[]) == 1
===========================================================================
org.apache.commons.math.stat.inference.TestUtilsTest.TestUtilsTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.stat.inference.TestUtilsTest.TestUtilsTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.math.stat.inference.TestUtilsTest.setUp():::ENTER
===========================================================================
org.apache.commons.math.stat.inference.TestUtilsTest.setUp():::EXIT
this.tooShortObs == orig(this.tooShortObs)
this.tooShortObs[] == orig(this.tooShortObs[])
this.nullObserved == orig(this.nullObserved)
this.emptyObs == orig(this.emptyObs)
this.emptyObs[] == orig(this.emptyObs[])
this.emptyStats == orig(this.emptyStats)
this.emptyStats.getClass().getName() == orig(this.emptyStats.getClass().getName())
this.nullStats == orig(this.nullStats)
this.tooShortStats == orig(this.tooShortStats)
===========================================================================
org.apache.commons.math.stat.inference.TestUtilsTest.suite():::EXIT
return.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquare():::ENTER
this has only one value
this.tooShortObs has only one value
this.emptyObs has only one value
this.emptyStats has only one value
===========================================================================
org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquare():::EXIT
this.tooShortObs == orig(this.tooShortObs)
this.tooShortObs[] == orig(this.tooShortObs[])
this.nullObserved == orig(this.nullObserved)
this.emptyObs == orig(this.emptyObs)
this.emptyObs[] == orig(this.emptyObs[])
this.emptyStats == orig(this.emptyStats)
this.emptyStats.getClass().getName() == orig(this.emptyStats.getClass().getName())
this.nullStats == orig(this.nullStats)
this.tooShortStats == orig(this.tooShortStats)
this.tooShortObs has only one value
this.emptyObs has only one value
this.emptyStats has only one value
===========================================================================
org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquareIndependence():::ENTER
this has only one value
this.tooShortObs has only one value
this.emptyObs has only one value
this.emptyStats has only one value
===========================================================================
org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquareIndependence():::EXIT
this.tooShortObs == orig(this.tooShortObs)
this.tooShortObs[] == orig(this.tooShortObs[])
this.nullObserved == orig(this.nullObserved)
this.emptyObs == orig(this.emptyObs)
this.emptyObs[] == orig(this.emptyObs[])
this.emptyStats == orig(this.emptyStats)
this.emptyStats.getClass().getName() == orig(this.emptyStats.getClass().getName())
this.nullStats == orig(this.nullStats)
this.tooShortStats == orig(this.tooShortStats)
this.tooShortObs has only one value
this.emptyObs has only one value
this.emptyStats has only one value
===========================================================================
org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquareLargeTestStatistic():::ENTER
this has only one value
this.tooShortObs has only one value
this.emptyObs has only one value
this.emptyStats has only one value
===========================================================================
org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquareLargeTestStatistic():::EXIT
this.tooShortObs == orig(this.tooShortObs)
this.tooShortObs[] == orig(this.tooShortObs[])
this.nullObserved == orig(this.nullObserved)
this.emptyObs == orig(this.emptyObs)
this.emptyObs[] == orig(this.emptyObs[])
this.emptyStats == orig(this.emptyStats)
this.emptyStats.getClass().getName() == orig(this.emptyStats.getClass().getName())
this.nullStats == orig(this.nullStats)
this.tooShortStats == orig(this.tooShortStats)
this.tooShortObs has only one value
this.emptyObs has only one value
this.emptyStats has only one value
===========================================================================
org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquareZeroCount():::ENTER
this has only one value
this.tooShortObs has only one value
this.emptyObs has only one value
this.emptyStats has only one value
===========================================================================
org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquareZeroCount():::EXIT
this.tooShortObs == orig(this.tooShortObs)
this.tooShortObs[] == orig(this.tooShortObs[])
this.nullObserved == orig(this.nullObserved)
this.emptyObs == orig(this.emptyObs)
this.emptyObs[] == orig(this.emptyObs[])
this.emptyStats == orig(this.emptyStats)
this.emptyStats.getClass().getName() == orig(this.emptyStats.getClass().getName())
this.nullStats == orig(this.nullStats)
this.tooShortStats == orig(this.tooShortStats)
this.tooShortObs has only one value
this.emptyObs has only one value
this.emptyStats has only one value
===========================================================================
org.apache.commons.math.util.ContinuedFraction:::CLASS
===========================================================================
org.apache.commons.math.util.ContinuedFraction:::OBJECT
this.getClass().getName() == org.apache.commons.math.special.Gamma$1.class
===========================================================================
org.apache.commons.math.util.ContinuedFraction.ContinuedFraction():::EXIT
===========================================================================
org.apache.commons.math.util.ContinuedFraction.evaluate(double, double, int):::ENTER
x >= 1.0
epsilon one of { 1.0E-14, 1.0E-12 }
maxIterations == 2147483647
===========================================================================
org.apache.commons.math.util.ContinuedFraction.evaluate(double, double, int):::EXIT
return >= 1.0
