===========================================================================
org.apache.commons.math.TestUtils.assertEquals(double, double, double):::ENTER
expected == 0.632120558828558
actual == 0.6321205588285574
delta == 1.0E-14
===========================================================================
org.apache.commons.math.TestUtils.assertEquals(double, double, double):::EXIT
===========================================================================
org.apache.commons.math.TestUtils.assertEquals(java.lang.String, double, double, double):::ENTER
msg == null
expected == 0.632120558828558
actual == 0.6321205588285574
delta == 1.0E-14
===========================================================================
org.apache.commons.math.TestUtils.assertEquals(java.lang.String, double, double, double):::EXIT
===========================================================================
org.apache.commons.math.special.Gamma$1:::CLASS
===========================================================================
org.apache.commons.math.special.Gamma$1:::OBJECT
this.val$a == 1.0
===========================================================================
org.apache.commons.math.special.Gamma$1.(double):::ENTER
$hidden$1 == 1.0
===========================================================================
org.apache.commons.math.special.Gamma$1.(double):::EXIT
===========================================================================
org.apache.commons.math.special.Gamma$1.getA(int, double):::ENTER
n one of { 0, 1 }
x == 1.0
===========================================================================
org.apache.commons.math.special.Gamma$1.getA(int, double):::EXIT
this.val$a == orig(this.val$a)
return one of { 1.0, 3.0 }
===========================================================================
org.apache.commons.math.special.Gamma$1.getB(int, double):::ENTER
n == 1
x == 1.0
===========================================================================
org.apache.commons.math.special.Gamma$1.getB(int, double):::EXIT
this.val$a == orig(this.val$a)
return == 0.0
===========================================================================
org.apache.commons.math.special.Gamma:::CLASS
org.apache.commons.math.special.Gamma.lanczos has only one value
org.apache.commons.math.special.Gamma.lanczos != null
org.apache.commons.math.special.Gamma.lanczos[] == [0.9999999999999971, 57.15623566586292, -59.59796035547549, 14.136097974741746, -0.4919138160976202, 3.399464998481189E-5, 4.652362892704858E-5, -9.837447530487956E-5, 1.580887032249125E-4, -2.1026444172410488E-4, 2.1743961811521265E-4, -1.643181065367639E-4, 8.441822398385275E-5, -2.6190838401581408E-5, 3.6899182659531625E-6]
org.apache.commons.math.special.Gamma.HALF_LOG_2_PI == 0.9189385332046727
size(org.apache.commons.math.special.Gamma.lanczos[]) == 15
===========================================================================
org.apache.commons.math.special.Gamma.logGamma(double):::ENTER
x == 1.0
===========================================================================
org.apache.commons.math.special.Gamma.logGamma(double):::EXIT
org.apache.commons.math.special.Gamma.lanczos == orig(org.apache.commons.math.special.Gamma.lanczos)
org.apache.commons.math.special.Gamma.lanczos[] == orig(org.apache.commons.math.special.Gamma.lanczos[])
org.apache.commons.math.special.Gamma.HALF_LOG_2_PI == orig(org.apache.commons.math.special.Gamma.HALF_LOG_2_PI)
return == -4.440892098500626E-16
===========================================================================
org.apache.commons.math.special.Gamma.regularizedGammaP(double, double):::ENTER
a == 1.0
x == 1.0
===========================================================================
org.apache.commons.math.special.Gamma.regularizedGammaP(double, double):::EXIT
org.apache.commons.math.special.Gamma.lanczos == orig(org.apache.commons.math.special.Gamma.lanczos)
org.apache.commons.math.special.Gamma.lanczos[] == orig(org.apache.commons.math.special.Gamma.lanczos[])
org.apache.commons.math.special.Gamma.HALF_LOG_2_PI == orig(org.apache.commons.math.special.Gamma.HALF_LOG_2_PI)
return == 0.6321205588285574
===========================================================================
org.apache.commons.math.special.Gamma.regularizedGammaP(double, double, double, int):::ENTER
a == 1.0
x == 1.0
epsilon == 1.0E-8
maxIterations == 2147483647
===========================================================================
org.apache.commons.math.special.Gamma.regularizedGammaP(double, double, double, int):::EXIT
org.apache.commons.math.special.Gamma.lanczos == orig(org.apache.commons.math.special.Gamma.lanczos)
org.apache.commons.math.special.Gamma.lanczos[] == orig(org.apache.commons.math.special.Gamma.lanczos[])
org.apache.commons.math.special.Gamma.HALF_LOG_2_PI == orig(org.apache.commons.math.special.Gamma.HALF_LOG_2_PI)
return == 0.6321205588285574
===========================================================================
org.apache.commons.math.special.Gamma.regularizedGammaQ(double, double):::ENTER
a == 1.0
x == 1.0
===========================================================================
org.apache.commons.math.special.Gamma.regularizedGammaQ(double, double):::EXIT
org.apache.commons.math.special.Gamma.lanczos == orig(org.apache.commons.math.special.Gamma.lanczos)
org.apache.commons.math.special.Gamma.lanczos[] == orig(org.apache.commons.math.special.Gamma.lanczos[])
org.apache.commons.math.special.Gamma.HALF_LOG_2_PI == orig(org.apache.commons.math.special.Gamma.HALF_LOG_2_PI)
return == 0.3678794411714425
===========================================================================
org.apache.commons.math.special.Gamma.regularizedGammaQ(double, double, double, int):::ENTER
a == 1.0
x == 1.0
epsilon == 1.0E-8
maxIterations == 2147483647
===========================================================================
org.apache.commons.math.special.Gamma.regularizedGammaQ(double, double, double, int):::EXIT
org.apache.commons.math.special.Gamma.lanczos == orig(org.apache.commons.math.special.Gamma.lanczos)
org.apache.commons.math.special.Gamma.lanczos[] == orig(org.apache.commons.math.special.Gamma.lanczos[])
org.apache.commons.math.special.Gamma.HALF_LOG_2_PI == orig(org.apache.commons.math.special.Gamma.HALF_LOG_2_PI)
return == 0.3678794411714425
===========================================================================
org.apache.commons.math.special.GammaTest:::OBJECT
===========================================================================
org.apache.commons.math.special.GammaTest.GammaTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.special.GammaTest.GammaTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.math.special.GammaTest.testRegularizedGamma(double, double, double):::ENTER
this has only one value
expected == 0.632120558828558
a == 1.0
x == 1.0
===========================================================================
org.apache.commons.math.special.GammaTest.testRegularizedGamma(double, double, double):::EXIT
===========================================================================
org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive():::EXIT
===========================================================================
org.apache.commons.math.util.ContinuedFraction:::CLASS
===========================================================================
org.apache.commons.math.util.ContinuedFraction:::OBJECT
this.getClass().getName() == org.apache.commons.math.special.Gamma$1.class
===========================================================================
org.apache.commons.math.util.ContinuedFraction.ContinuedFraction():::EXIT
===========================================================================
org.apache.commons.math.util.ContinuedFraction.evaluate(double, double, int):::ENTER
x == 1.0
epsilon == 1.0E-8
maxIterations == 2147483647
===========================================================================
org.apache.commons.math.util.ContinuedFraction.evaluate(double, double, int):::EXIT
return == 1.0
