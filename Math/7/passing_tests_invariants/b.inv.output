===========================================================================
org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver:::CLASS
===========================================================================
org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver:::OBJECT
this.functionValueAccuracy == 1.0E-15
this.relativeAccuracy one of { 1.0E-15, 1.0E-14 }
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
this.searchMin == 0.0
this.searchMax == 0.0
this.searchStart == 0.0
this.function == null
===========================================================================
org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver.AbstractUnivariateSolver(double):::ENTER
===========================================================================
org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver.AbstractUnivariateSolver(double):::EXIT
this.relativeAccuracy == 1.0E-14
===========================================================================
org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver.AbstractUnivariateSolver(double, double):::ENTER
relativeAccuracy == 1.0E-15
absoluteAccuracy == 1.0E-15
===========================================================================
org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver.AbstractUnivariateSolver(double, double):::EXIT
this.absoluteAccuracy == 1.0E-15
this.relativeAccuracy == 1.0E-15
===========================================================================
org.apache.commons.math3.analysis.solvers.AllowedSolution:::CLASS
org.apache.commons.math3.analysis.solvers.AllowedSolution.ANY_SIDE has only one value
org.apache.commons.math3.analysis.solvers.AllowedSolution.LEFT_SIDE has only one value
org.apache.commons.math3.analysis.solvers.AllowedSolution.RIGHT_SIDE has only one value
org.apache.commons.math3.analysis.solvers.AllowedSolution.BELOW_SIDE has only one value
org.apache.commons.math3.analysis.solvers.AllowedSolution.ABOVE_SIDE has only one value
org.apache.commons.math3.analysis.solvers.AllowedSolution.$VALUES has only one value
org.apache.commons.math3.analysis.solvers.AllowedSolution.$VALUES.getClass().getName() == org.apache.commons.math3.analysis.solvers.AllowedSolution[].class
org.apache.commons.math3.analysis.solvers.AllowedSolution.$VALUES[] contains no nulls and has only one value, of length 5
org.apache.commons.math3.analysis.solvers.AllowedSolution.$VALUES[].getClass().getName() == [org.apache.commons.math3.analysis.solvers.AllowedSolution, org.apache.commons.math3.analysis.solvers.AllowedSolution, org.apache.commons.math3.analysis.solvers.AllowedSolution, org.apache.commons.math3.analysis.solvers.AllowedSolution, org.apache.commons.math3.analysis.solvers.AllowedSolution]
org.apache.commons.math3.analysis.solvers.AllowedSolution.$VALUES[].getClass().getName() elements == org.apache.commons.math3.analysis.solvers.AllowedSolution.class
size(org.apache.commons.math3.analysis.solvers.AllowedSolution.$VALUES[]) == 5
===========================================================================
org.apache.commons.math3.analysis.solvers.AllowedSolution:::OBJECT
===========================================================================
org.apache.commons.math3.analysis.solvers.AllowedSolution.AllowedSolution(java.lang.String, int):::ENTER
===========================================================================
org.apache.commons.math3.analysis.solvers.AllowedSolution.AllowedSolution(java.lang.String, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
===========================================================================
org.apache.commons.math3.analysis.solvers.AllowedSolution.values():::ENTER
===========================================================================
org.apache.commons.math3.analysis.solvers.AllowedSolution.values():::EXIT
org.apache.commons.math3.analysis.solvers.AllowedSolution.ANY_SIDE == orig(org.apache.commons.math3.analysis.solvers.AllowedSolution.ANY_SIDE)
org.apache.commons.math3.analysis.solvers.AllowedSolution.LEFT_SIDE == orig(org.apache.commons.math3.analysis.solvers.AllowedSolution.LEFT_SIDE)
org.apache.commons.math3.analysis.solvers.AllowedSolution.RIGHT_SIDE == orig(org.apache.commons.math3.analysis.solvers.AllowedSolution.RIGHT_SIDE)
org.apache.commons.math3.analysis.solvers.AllowedSolution.BELOW_SIDE == orig(org.apache.commons.math3.analysis.solvers.AllowedSolution.BELOW_SIDE)
org.apache.commons.math3.analysis.solvers.AllowedSolution.ABOVE_SIDE == orig(org.apache.commons.math3.analysis.solvers.AllowedSolution.ABOVE_SIDE)
org.apache.commons.math3.analysis.solvers.AllowedSolution.$VALUES == orig(org.apache.commons.math3.analysis.solvers.AllowedSolution.$VALUES)
org.apache.commons.math3.analysis.solvers.AllowedSolution.$VALUES.getClass().getName() == orig(org.apache.commons.math3.analysis.solvers.AllowedSolution.$VALUES.getClass().getName())
org.apache.commons.math3.analysis.solvers.AllowedSolution.$VALUES[] == orig(org.apache.commons.math3.analysis.solvers.AllowedSolution.$VALUES[])
return.getClass().getName() == org.apache.commons.math3.analysis.solvers.AllowedSolution[].class
return[] contains no nulls and has only one value, of length 5
size(return[]) == 5
===========================================================================
org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver:::CLASS
===========================================================================
org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver:::OBJECT
this.functionValueAccuracy == 1.0E-15
this.absoluteAccuracy <= 9.374999999999999E-7
this.relativeAccuracy one of { 1.0E-15, 1.0E-14 }
this.evaluations.maximalCount >= 0
this.evaluations.count >= 0
this.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
this.searchMin >= 0.0
this.searchMax >= 0.0
this.searchStart >= 0.0
this.function.getClass().getName() == org.apache.commons.math3.ode.events.EventState$1.class
===========================================================================
org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver.BaseAbstractUnivariateSolver(double):::ENTER
===========================================================================
org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver.BaseAbstractUnivariateSolver(double):::EXIT
this.relativeAccuracy == 1.0E-14
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.searchMin == 0.0
this.searchMax == 0.0
this.searchStart == 0.0
this.function == null
===========================================================================
org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver.BaseAbstractUnivariateSolver(double, double):::ENTER
relativeAccuracy == 1.0E-15
absoluteAccuracy == 1.0E-15
===========================================================================
org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver.BaseAbstractUnivariateSolver(double, double):::EXIT
this.absoluteAccuracy == 1.0E-15
this.relativeAccuracy == 1.0E-15
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.searchMin == 0.0
this.searchMax == 0.0
this.searchStart == 0.0
this.function == null
===========================================================================
org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver.BaseAbstractUnivariateSolver(double, double, double):::ENTER
relativeAccuracy one of { 1.0E-15, 1.0E-14 }
functionValueAccuracy == 1.0E-15
===========================================================================
org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver.BaseAbstractUnivariateSolver(double, double, double):::EXIT
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.searchMin == 0.0
this.searchMax == 0.0
this.searchStart == 0.0
this.function == null
===========================================================================
org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver.computeObjectiveValue(double):::ENTER
this.searchMin >= 0.4111
this.searchMax >= 0.5111
this.searchStart >= 0.4611
===========================================================================
org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver.computeObjectiveValue(double):::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.count >= 1
this.searchMin >= 0.4111
this.searchMax >= 0.5111
this.searchStart >= 0.4611
this.evaluations.count - orig(this.evaluations.count) - 1 == 0
===========================================================================
org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver.getAbsoluteAccuracy():::ENTER
===========================================================================
org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver.getAbsoluteAccuracy():::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
===========================================================================
org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver.getFunctionValueAccuracy():::ENTER
this.evaluations.count >= 2
===========================================================================
org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver.getFunctionValueAccuracy():::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.count >= 2
return == 1.0E-15
===========================================================================
org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver.getMax():::ENTER
this.evaluations.count == 0
===========================================================================
org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver.getMax():::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.count == 0
===========================================================================
org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver.getMin():::ENTER
this.evaluations.count == 0
===========================================================================
org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver.getMin():::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.count == 0
===========================================================================
org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver.getRelativeAccuracy():::ENTER
===========================================================================
org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver.getRelativeAccuracy():::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
return one of { 1.0E-15, 1.0E-14 }
===========================================================================
org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver.getStartValue():::ENTER
this.getClass().getName() == org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver.class
this.relativeAccuracy == 1.0E-14
this.evaluations.maximalCount one of { 3, 100, 1000 }
this.evaluations.count == 0
===========================================================================
org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver.getStartValue():::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.relativeAccuracy == 1.0E-14
this.evaluations.maximalCount one of { 3, 100, 1000 }
this.evaluations.count == 0
===========================================================================
org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver.incrementEvaluationCount():::ENTER
this.searchMin >= 0.4111
this.searchMax >= 0.5111
this.searchStart >= 0.4611
===========================================================================
org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver.incrementEvaluationCount():::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.count >= 1
this.searchMin >= 0.4111
this.searchMax >= 0.5111
this.searchStart >= 0.4611
this.evaluations.count - orig(this.evaluations.count) - 1 == 0
===========================================================================
org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver.setup(int, org.apache.commons.math3.analysis.UnivariateFunction, double, double, double):::ENTER
this.evaluations.maximalCount one of { 0, 999, 1000 }
f.getClass().getName() == org.apache.commons.math3.ode.events.EventState$1.class
===========================================================================
org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver.setup(int, org.apache.commons.math3.analysis.UnivariateFunction, double, double, double):::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.count == 0
orig(this.evaluations.maximalCount) % this.evaluations.maximalCount == 0
this.evaluations.maximalCount >= orig(this.evaluations.maximalCount)
this.evaluations.count <= orig(this.evaluations.count)
===========================================================================
org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver.solve(int, org.apache.commons.math3.analysis.UnivariateFunction, double, double):::ENTER
this.getClass().getName() == org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver.class
this.relativeAccuracy == 1.0E-14
this.evaluations.maximalCount one of { 0, 1000 }
maxEval one of { 100, 1000 }
f.getClass().getName() == org.apache.commons.math3.ode.events.EventState$1.class
===========================================================================
org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver.solve(int, org.apache.commons.math3.analysis.UnivariateFunction, double, double):::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.relativeAccuracy == 1.0E-14
this.evaluations.maximalCount one of { 100, 1000 }
this.evaluations.maximalCount >= orig(this.evaluations.maximalCount)
this.searchMin > orig(this.searchMin)
this.searchMax > orig(this.searchMax)
this.searchStart > orig(this.searchStart)
===========================================================================
org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver.solve(int, org.apache.commons.math3.analysis.UnivariateFunction, double, double, double):::ENTER
this.evaluations.maximalCount one of { 0, 999, 1000 }
maxEval one of { 100, 999, 1000 }
f.getClass().getName() == org.apache.commons.math3.ode.events.EventState$1.class
===========================================================================
org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver.solve(int, org.apache.commons.math3.analysis.UnivariateFunction, double, double, double):::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.evaluations.maximalCount one of { 100, 999, 1000 }
orig(this.evaluations.maximalCount) % this.evaluations.maximalCount == 0
this.evaluations.maximalCount >= orig(this.evaluations.maximalCount)
===========================================================================
org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver.verifyBracketing(double, double):::ENTER
this.getClass().getName() == org.apache.commons.math3.analysis.solvers.PegasusSolver.class
this.absoluteAccuracy == 1.0E-15
this.relativeAccuracy == 1.0E-15
this.evaluations.maximalCount == 999
this.evaluations.count == 2
===========================================================================
org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver.verifyBracketing(double, double):::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.absoluteAccuracy == 1.0E-15
this.relativeAccuracy == 1.0E-15
this.evaluations.maximalCount == 999
this.evaluations.count == 2
===========================================================================
org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver.verifySequence(double, double, double):::ENTER
this.getClass().getName() == org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver.class
this.relativeAccuracy == 1.0E-14
this.evaluations.maximalCount one of { 3, 100, 1000 }
this.evaluations.count == 0
===========================================================================
org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver.verifySequence(double, double, double):::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.searchMin == orig(this.searchMin)
this.searchMax == orig(this.searchMax)
this.searchStart == orig(this.searchStart)
this.function == orig(this.function)
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.relativeAccuracy == 1.0E-14
this.evaluations.maximalCount one of { 3, 100, 1000 }
this.evaluations.count == 0
===========================================================================
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method:::CLASS
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.REGULA_FALSI has only one value
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.ILLINOIS has only one value
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.PEGASUS has only one value
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.$VALUES has only one value
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.$VALUES.getClass().getName() == org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method[].class
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.$VALUES[] contains no nulls and has only one value, of length 3
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.$VALUES[].getClass().getName() == [org.apache.commons.math3.analysis.solvers.BaseSecantSolver.Method, org.apache.commons.math3.analysis.solvers.BaseSecantSolver.Method, org.apache.commons.math3.analysis.solvers.BaseSecantSolver.Method]
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.$VALUES[].getClass().getName() elements == org.apache.commons.math3.analysis.solvers.BaseSecantSolver.Method.class
size(org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.$VALUES[]) == 3
===========================================================================
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method:::OBJECT
===========================================================================
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.Method(java.lang.String, int):::ENTER
$hidden$1.toString one of { "ILLINOIS", "PEGASUS", "REGULA_FALSI" }
$hidden$2 one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.Method(java.lang.String, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
$hidden$1.toString one of { "ILLINOIS", "PEGASUS", "REGULA_FALSI" }
===========================================================================
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.values():::ENTER
===========================================================================
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.values():::EXIT
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.REGULA_FALSI == orig(org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.REGULA_FALSI)
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.ILLINOIS == orig(org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.ILLINOIS)
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.PEGASUS == orig(org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.PEGASUS)
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.$VALUES == orig(org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.$VALUES)
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.$VALUES.getClass().getName() == orig(org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.$VALUES.getClass().getName())
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.$VALUES[] == orig(org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.$VALUES[])
return has only one value
return.getClass().getName() == org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method[].class
return[] contains no nulls and has only one value, of length 3
size(return[]) == 3
===========================================================================
org.apache.commons.math3.analysis.solvers.BaseSecantSolver:::CLASS
===========================================================================
org.apache.commons.math3.analysis.solvers.BaseSecantSolver:::OBJECT
this.getClass().getName() == org.apache.commons.math3.analysis.solvers.PegasusSolver.class
org.apache.commons.math3.analysis.solvers.AllowedSolution.ANY_SIDE has only one value
org.apache.commons.math3.analysis.solvers.AllowedSolution.LEFT_SIDE has only one value
org.apache.commons.math3.analysis.solvers.AllowedSolution.RIGHT_SIDE has only one value
org.apache.commons.math3.analysis.solvers.AllowedSolution.BELOW_SIDE has only one value
org.apache.commons.math3.analysis.solvers.AllowedSolution.ABOVE_SIDE has only one value
org.apache.commons.math3.analysis.solvers.AllowedSolution.$VALUES has only one value
org.apache.commons.math3.analysis.solvers.AllowedSolution.$VALUES.getClass().getName() == org.apache.commons.math3.analysis.solvers.AllowedSolution[].class
org.apache.commons.math3.analysis.solvers.AllowedSolution.$VALUES[] contains no nulls and has only one value, of length 5
org.apache.commons.math3.analysis.solvers.AllowedSolution.$VALUES[] elements != null
org.apache.commons.math3.analysis.solvers.AllowedSolution.$VALUES[].getClass().getName() == [org.apache.commons.math3.analysis.solvers.AllowedSolution, org.apache.commons.math3.analysis.solvers.AllowedSolution, org.apache.commons.math3.analysis.solvers.AllowedSolution, org.apache.commons.math3.analysis.solvers.AllowedSolution, org.apache.commons.math3.analysis.solvers.AllowedSolution]
org.apache.commons.math3.analysis.solvers.AllowedSolution.$VALUES[].getClass().getName() elements == org.apache.commons.math3.analysis.solvers.AllowedSolution.class
this.method has only one value
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.REGULA_FALSI has only one value
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.ILLINOIS has only one value
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.PEGASUS has only one value
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.$VALUES has only one value
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.$VALUES.getClass().getName() == org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method[].class
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.$VALUES[] contains no nulls and has only one value, of length 3
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.$VALUES[] elements != null
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.$VALUES[].getClass().getName() == [org.apache.commons.math3.analysis.solvers.BaseSecantSolver.Method, org.apache.commons.math3.analysis.solvers.BaseSecantSolver.Method, org.apache.commons.math3.analysis.solvers.BaseSecantSolver.Method]
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.$VALUES[].getClass().getName() elements == org.apache.commons.math3.analysis.solvers.BaseSecantSolver.Method.class
this.functionValueAccuracy == 1.0E-15
this.absoluteAccuracy == 1.0E-15
this.relativeAccuracy == 1.0E-15
this.evaluations.maximalCount one of { 0, 999 }
this.evaluations.count >= 0
this.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
this.function.getClass().getName() == org.apache.commons.math3.ode.events.EventState$1.class
size(org.apache.commons.math3.analysis.solvers.AllowedSolution.$VALUES[]) == 5
size(org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.$VALUES[]) == 3
===========================================================================
org.apache.commons.math3.analysis.solvers.BaseSecantSolver.BaseSecantSolver(double, double, org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method):::ENTER
relativeAccuracy == 1.0E-15
absoluteAccuracy == 1.0E-15
method has only one value
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.REGULA_FALSI has only one value
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.ILLINOIS has only one value
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.PEGASUS has only one value
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.$VALUES has only one value
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.$VALUES.getClass().getName() == org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method[].class
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.$VALUES[] contains no nulls and has only one value, of length 3
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.$VALUES[].getClass().getName() == [org.apache.commons.math3.analysis.solvers.BaseSecantSolver.Method, org.apache.commons.math3.analysis.solvers.BaseSecantSolver.Method, org.apache.commons.math3.analysis.solvers.BaseSecantSolver.Method]
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.$VALUES[].getClass().getName() elements == org.apache.commons.math3.analysis.solvers.BaseSecantSolver.Method.class
size(org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.$VALUES[]) == 3
===========================================================================
org.apache.commons.math3.analysis.solvers.BaseSecantSolver.BaseSecantSolver(double, double, org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method):::EXIT
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.REGULA_FALSI == orig(org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.REGULA_FALSI)
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.ILLINOIS == orig(org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.ILLINOIS)
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.PEGASUS == orig(org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.PEGASUS)
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.$VALUES == orig(org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.$VALUES)
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.$VALUES.getClass().getName() == orig(org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.$VALUES.getClass().getName())
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.$VALUES[] == orig(org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.$VALUES[])
this.allowed has only one value
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.searchMin == 0.0
this.searchMax == 0.0
this.searchStart == 0.0
this.function == null
===========================================================================
org.apache.commons.math3.analysis.solvers.BaseSecantSolver.solve(int, org.apache.commons.math3.analysis.UnivariateFunction, double, double, double, org.apache.commons.math3.analysis.solvers.AllowedSolution):::ENTER
maxEval == 999
f.getClass().getName() == org.apache.commons.math3.ode.events.EventState$1.class
allowedSolution has only one value
===========================================================================
org.apache.commons.math3.analysis.solvers.BaseSecantSolver.solve(int, org.apache.commons.math3.analysis.UnivariateFunction, double, double, double, org.apache.commons.math3.analysis.solvers.AllowedSolution):::EXIT
org.apache.commons.math3.analysis.solvers.AllowedSolution.ANY_SIDE == orig(org.apache.commons.math3.analysis.solvers.AllowedSolution.ANY_SIDE)
org.apache.commons.math3.analysis.solvers.AllowedSolution.LEFT_SIDE == orig(org.apache.commons.math3.analysis.solvers.AllowedSolution.LEFT_SIDE)
org.apache.commons.math3.analysis.solvers.AllowedSolution.RIGHT_SIDE == orig(org.apache.commons.math3.analysis.solvers.AllowedSolution.RIGHT_SIDE)
org.apache.commons.math3.analysis.solvers.AllowedSolution.BELOW_SIDE == orig(org.apache.commons.math3.analysis.solvers.AllowedSolution.BELOW_SIDE)
org.apache.commons.math3.analysis.solvers.AllowedSolution.ABOVE_SIDE == orig(org.apache.commons.math3.analysis.solvers.AllowedSolution.ABOVE_SIDE)
org.apache.commons.math3.analysis.solvers.AllowedSolution.$VALUES == orig(org.apache.commons.math3.analysis.solvers.AllowedSolution.$VALUES)
org.apache.commons.math3.analysis.solvers.AllowedSolution.$VALUES.getClass().getName() == orig(org.apache.commons.math3.analysis.solvers.AllowedSolution.$VALUES.getClass().getName())
org.apache.commons.math3.analysis.solvers.AllowedSolution.$VALUES[] == orig(org.apache.commons.math3.analysis.solvers.AllowedSolution.$VALUES[])
this.method == orig(this.method)
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.REGULA_FALSI == orig(org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.REGULA_FALSI)
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.ILLINOIS == orig(org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.ILLINOIS)
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.PEGASUS == orig(org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.PEGASUS)
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.$VALUES == orig(org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.$VALUES)
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.$VALUES.getClass().getName() == orig(org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.$VALUES.getClass().getName())
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.$VALUES[] == orig(org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.$VALUES[])
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.allowed has only one value
this.evaluations.maximalCount == 999
this.evaluations.maximalCount >= orig(this.evaluations.maximalCount)
===========================================================================
org.apache.commons.math3.analysis.solvers.BaseSecantSolver.solve(int, org.apache.commons.math3.analysis.UnivariateFunction, double, double, org.apache.commons.math3.analysis.solvers.AllowedSolution):::ENTER
maxEval == 999
f.getClass().getName() == org.apache.commons.math3.ode.events.EventState$1.class
allowedSolution has only one value
===========================================================================
org.apache.commons.math3.analysis.solvers.BaseSecantSolver.solve(int, org.apache.commons.math3.analysis.UnivariateFunction, double, double, org.apache.commons.math3.analysis.solvers.AllowedSolution):::EXIT
org.apache.commons.math3.analysis.solvers.AllowedSolution.ANY_SIDE == orig(org.apache.commons.math3.analysis.solvers.AllowedSolution.ANY_SIDE)
org.apache.commons.math3.analysis.solvers.AllowedSolution.LEFT_SIDE == orig(org.apache.commons.math3.analysis.solvers.AllowedSolution.LEFT_SIDE)
org.apache.commons.math3.analysis.solvers.AllowedSolution.RIGHT_SIDE == orig(org.apache.commons.math3.analysis.solvers.AllowedSolution.RIGHT_SIDE)
org.apache.commons.math3.analysis.solvers.AllowedSolution.BELOW_SIDE == orig(org.apache.commons.math3.analysis.solvers.AllowedSolution.BELOW_SIDE)
org.apache.commons.math3.analysis.solvers.AllowedSolution.ABOVE_SIDE == orig(org.apache.commons.math3.analysis.solvers.AllowedSolution.ABOVE_SIDE)
org.apache.commons.math3.analysis.solvers.AllowedSolution.$VALUES == orig(org.apache.commons.math3.analysis.solvers.AllowedSolution.$VALUES)
org.apache.commons.math3.analysis.solvers.AllowedSolution.$VALUES.getClass().getName() == orig(org.apache.commons.math3.analysis.solvers.AllowedSolution.$VALUES.getClass().getName())
org.apache.commons.math3.analysis.solvers.AllowedSolution.$VALUES[] == orig(org.apache.commons.math3.analysis.solvers.AllowedSolution.$VALUES[])
this.method == orig(this.method)
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.REGULA_FALSI == orig(org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.REGULA_FALSI)
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.ILLINOIS == orig(org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.ILLINOIS)
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.PEGASUS == orig(org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.PEGASUS)
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.$VALUES == orig(org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.$VALUES)
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.$VALUES.getClass().getName() == orig(org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.$VALUES.getClass().getName())
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.$VALUES[] == orig(org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.$VALUES[])
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.evaluations == orig(this.evaluations)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.function.getClass().getName() == orig(this.function.getClass().getName())
this.allowed has only one value
this.evaluations.maximalCount == 999
this.evaluations.maximalCount >= orig(this.evaluations.maximalCount)
===========================================================================
org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver:::CLASS
===========================================================================
org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver:::OBJECT
this.maximalOrder == 5
this.allowed has only one value
org.apache.commons.math3.analysis.solvers.AllowedSolution.ANY_SIDE has only one value
org.apache.commons.math3.analysis.solvers.AllowedSolution.LEFT_SIDE has only one value
org.apache.commons.math3.analysis.solvers.AllowedSolution.RIGHT_SIDE has only one value
org.apache.commons.math3.analysis.solvers.AllowedSolution.BELOW_SIDE has only one value
org.apache.commons.math3.analysis.solvers.AllowedSolution.ABOVE_SIDE has only one value
org.apache.commons.math3.analysis.solvers.AllowedSolution.$VALUES has only one value
org.apache.commons.math3.analysis.solvers.AllowedSolution.$VALUES.getClass().getName() == org.apache.commons.math3.analysis.solvers.AllowedSolution[].class
org.apache.commons.math3.analysis.solvers.AllowedSolution.$VALUES[] contains no nulls and has only one value, of length 5
org.apache.commons.math3.analysis.solvers.AllowedSolution.$VALUES[] elements != null
org.apache.commons.math3.analysis.solvers.AllowedSolution.$VALUES[].getClass().getName() == [org.apache.commons.math3.analysis.solvers.AllowedSolution, org.apache.commons.math3.analysis.solvers.AllowedSolution, org.apache.commons.math3.analysis.solvers.AllowedSolution, org.apache.commons.math3.analysis.solvers.AllowedSolution, org.apache.commons.math3.analysis.solvers.AllowedSolution]
org.apache.commons.math3.analysis.solvers.AllowedSolution.$VALUES[].getClass().getName() elements == org.apache.commons.math3.analysis.solvers.AllowedSolution.class
this.functionValueAccuracy == 1.0E-15
this.relativeAccuracy == 1.0E-14
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
this.searchMin == 0.0
this.searchMax == 0.0
this.searchStart == 0.0
this.function == null
size(org.apache.commons.math3.analysis.solvers.AllowedSolution.$VALUES[]) == 5
===========================================================================
org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver.BracketingNthOrderBrentSolver(double, int):::ENTER
maximalOrder == 5
===========================================================================
org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver.BracketingNthOrderBrentSolver(double, int):::EXIT
===========================================================================
org.apache.commons.math3.analysis.solvers.PegasusSolver:::CLASS
===========================================================================
org.apache.commons.math3.analysis.solvers.PegasusSolver:::OBJECT
this.allowed has only one value
org.apache.commons.math3.analysis.solvers.AllowedSolution.ANY_SIDE has only one value
org.apache.commons.math3.analysis.solvers.AllowedSolution.LEFT_SIDE has only one value
org.apache.commons.math3.analysis.solvers.AllowedSolution.RIGHT_SIDE has only one value
org.apache.commons.math3.analysis.solvers.AllowedSolution.BELOW_SIDE has only one value
org.apache.commons.math3.analysis.solvers.AllowedSolution.ABOVE_SIDE has only one value
org.apache.commons.math3.analysis.solvers.AllowedSolution.$VALUES has only one value
org.apache.commons.math3.analysis.solvers.AllowedSolution.$VALUES.getClass().getName() == org.apache.commons.math3.analysis.solvers.AllowedSolution[].class
org.apache.commons.math3.analysis.solvers.AllowedSolution.$VALUES[] contains no nulls and has only one value, of length 5
org.apache.commons.math3.analysis.solvers.AllowedSolution.$VALUES[].getClass().getName() == [org.apache.commons.math3.analysis.solvers.AllowedSolution, org.apache.commons.math3.analysis.solvers.AllowedSolution, org.apache.commons.math3.analysis.solvers.AllowedSolution, org.apache.commons.math3.analysis.solvers.AllowedSolution, org.apache.commons.math3.analysis.solvers.AllowedSolution]
org.apache.commons.math3.analysis.solvers.AllowedSolution.$VALUES[].getClass().getName() elements == org.apache.commons.math3.analysis.solvers.AllowedSolution.class
this.method has only one value
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.REGULA_FALSI has only one value
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.ILLINOIS has only one value
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.PEGASUS has only one value
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.$VALUES has only one value
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.$VALUES.getClass().getName() == org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method[].class
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.$VALUES[] contains no nulls and has only one value, of length 3
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.$VALUES[].getClass().getName() == [org.apache.commons.math3.analysis.solvers.BaseSecantSolver.Method, org.apache.commons.math3.analysis.solvers.BaseSecantSolver.Method, org.apache.commons.math3.analysis.solvers.BaseSecantSolver.Method]
org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.$VALUES[].getClass().getName() elements == org.apache.commons.math3.analysis.solvers.BaseSecantSolver.Method.class
this.functionValueAccuracy == 1.0E-15
this.absoluteAccuracy == 1.0E-15
this.relativeAccuracy == 1.0E-15
this.evaluations.maximalCount == 0
this.evaluations.count == 0
this.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
this.searchMin == 0.0
this.searchMax == 0.0
this.searchStart == 0.0
this.function == null
size(org.apache.commons.math3.analysis.solvers.AllowedSolution.$VALUES[]) == 5
size(org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method.$VALUES[]) == 3
===========================================================================
org.apache.commons.math3.analysis.solvers.PegasusSolver.PegasusSolver(double, double):::ENTER
relativeAccuracy == 1.0E-15
absoluteAccuracy == 1.0E-15
===========================================================================
org.apache.commons.math3.analysis.solvers.PegasusSolver.PegasusSolver(double, double):::EXIT
===========================================================================
org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils.isBracketing(org.apache.commons.math3.analysis.UnivariateFunction, double, double):::ENTER
function.getClass().getName() == org.apache.commons.math3.ode.events.EventState$1.class
===========================================================================
org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils.isBracketing(org.apache.commons.math3.analysis.UnivariateFunction, double, double):::EXIT
return == true
===========================================================================
org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils.isBracketing(org.apache.commons.math3.analysis.UnivariateFunction, double, double):::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils.verifyBracketing(org.apache.commons.math3.analysis.UnivariateFunction, double, double):::ENTER
function.getClass().getName() == org.apache.commons.math3.ode.events.EventState$1.class
===========================================================================
org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils.verifyBracketing(org.apache.commons.math3.analysis.UnivariateFunction, double, double):::EXIT
===========================================================================
org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils.verifyInterval(double, double):::ENTER
===========================================================================
org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils.verifyInterval(double, double):::EXIT
===========================================================================
org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils.verifySequence(double, double, double):::ENTER
===========================================================================
org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils.verifySequence(double, double, double):::EXIT
===========================================================================
org.apache.commons.math3.exception.MathIllegalStateException:::CLASS
===========================================================================
org.apache.commons.math3.exception.MathIllegalStateException:::OBJECT
this.context != null
this.context.throwable != null
this.context.msgPatterns != null
this.context.msgPatterns[] elements != null
this.context.msgPatterns[].getClass().getName() elements == org.apache.commons.math3.exception.util.LocalizedFormats.class
this.context.msgPatterns[].getClass().getName() one of { [org.apache.commons.math3.exception.util.LocalizedFormats], [org.apache.commons.math3.exception.util.LocalizedFormats, org.apache.commons.math3.exception.util.LocalizedFormats] }
this.context.msgPatterns.getClass().getName() == java.util.ArrayList.class
this.context.msgArguments != null
this.context.msgArguments[] elements != null
this.context.msgArguments[].getClass().getName() elements == java.lang.Object[].class
this.context.msgArguments[].getClass().getName() one of { [java.lang.Object[]], [java.lang.Object[], java.lang.Object[]] }
this.context.msgArguments.getClass().getName() == java.util.ArrayList.class
this.context.context != null
this.context.context.getClass().getName() == java.util.HashMap.class
size(this.context.msgPatterns[]) one of { 1, 2 }
size(this.context.msgArguments[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math3.exception.MathIllegalStateException.MathIllegalStateException():::EXIT
this.context.msgPatterns[] contains no nulls and has only one value, of length 1
this.context.msgPatterns[] elements has only one value
this.context.msgPatterns[].getClass().getName() == [org.apache.commons.math3.exception.util.LocalizedFormats]
this.context.msgArguments[].getClass().getName() == [java.lang.Object[]]
size(this.context.msgPatterns[]) == 1
size(this.context.msgArguments[]) == 1
===========================================================================
org.apache.commons.math3.exception.MathIllegalStateException.MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable, java.lang.Object[]):::ENTER
pattern has only one value
pattern.getClass().getName() == org.apache.commons.math3.exception.util.LocalizedFormats.class
args.getClass().getName() == java.lang.Object[].class
args[] == []
===========================================================================
org.apache.commons.math3.exception.MathIllegalStateException.MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable, java.lang.Object[]):::EXIT
args[] == orig(args[])
this.context.msgPatterns[] contains no nulls and has only one value, of length 1
this.context.msgPatterns[] elements has only one value
this.context.msgPatterns[].getClass().getName() == [org.apache.commons.math3.exception.util.LocalizedFormats]
this.context.msgArguments[].getClass().getName() == [java.lang.Object[]]
args[] == []
size(this.context.msgPatterns[]) == 1
size(this.context.msgArguments[]) == 1
===========================================================================
org.apache.commons.math3.exception.MathIllegalStateException.getContext():::ENTER
===========================================================================
org.apache.commons.math3.exception.MathIllegalStateException.getContext():::EXIT
this.context == orig(this.context)
this.context.throwable == orig(this.context.throwable)
this.context.msgPatterns == orig(this.context.msgPatterns)
this.context.msgPatterns[] == orig(this.context.msgPatterns[])
this.context.msgPatterns.getClass().getName() == orig(this.context.msgPatterns.getClass().getName())
this.context.msgArguments == orig(this.context.msgArguments)
this.context.msgArguments[] == orig(this.context.msgArguments[])
this.context.msgArguments.getClass().getName() == orig(this.context.msgArguments.getClass().getName())
this.context.context == orig(this.context.context)
this.context.context.getClass().getName() == orig(this.context.context.getClass().getName())
return.msgPatterns[].getClass().getName() elements == org.apache.commons.math3.exception.util.LocalizedFormats.class
return.msgPatterns[].getClass().getName() one of { [org.apache.commons.math3.exception.util.LocalizedFormats], [org.apache.commons.math3.exception.util.LocalizedFormats, org.apache.commons.math3.exception.util.LocalizedFormats] }
return.msgPatterns.getClass().getName() == java.util.ArrayList.class
return.msgArguments[].getClass().getName() elements == java.lang.Object[].class
return.msgArguments[].getClass().getName() one of { [java.lang.Object[]], [java.lang.Object[], java.lang.Object[]] }
return.msgArguments.getClass().getName() == java.util.ArrayList.class
return.context.getClass().getName() == java.util.HashMap.class
size(return.msgPatterns[]) one of { 1, 2 }
size(return.msgArguments[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math3.exception.MaxCountExceededException:::CLASS
===========================================================================
org.apache.commons.math3.exception.MaxCountExceededException:::OBJECT
this.max.getClass().getName() == java.lang.Integer.class
this.context.msgPatterns[] contains no nulls and has only one value, of length 2
this.context.msgPatterns[].getClass().getName() == [org.apache.commons.math3.exception.util.LocalizedFormats, org.apache.commons.math3.exception.util.LocalizedFormats]
this.context.msgPatterns[].getClass().getName() elements == org.apache.commons.math3.exception.util.LocalizedFormats.class
this.context.msgPatterns.getClass().getName() == java.util.ArrayList.class
this.context.msgArguments[].getClass().getName() == [java.lang.Object[], java.lang.Object[]]
this.context.msgArguments[].getClass().getName() elements == java.lang.Object[].class
this.context.msgArguments.getClass().getName() == java.util.ArrayList.class
this.context.context.getClass().getName() == java.util.HashMap.class
size(this.context.msgPatterns[]) == 2
size(this.context.msgArguments[]) == 2
===========================================================================
org.apache.commons.math3.exception.MaxCountExceededException.MaxCountExceededException(java.lang.Number):::ENTER
max.getClass().getName() == java.lang.Integer.class
===========================================================================
org.apache.commons.math3.exception.MaxCountExceededException.MaxCountExceededException(java.lang.Number):::EXIT
===========================================================================
org.apache.commons.math3.exception.MaxCountExceededException.MaxCountExceededException(org.apache.commons.math3.exception.util.Localizable, java.lang.Number, java.lang.Object[]):::ENTER
specific has only one value
specific.getClass().getName() == org.apache.commons.math3.exception.util.LocalizedFormats.class
max.getClass().getName() == java.lang.Integer.class
args.getClass().getName() == java.lang.Object[].class
args[] == []
===========================================================================
org.apache.commons.math3.exception.MaxCountExceededException.MaxCountExceededException(org.apache.commons.math3.exception.util.Localizable, java.lang.Number, java.lang.Object[]):::EXIT
args[] == orig(args[])
args[] == []
===========================================================================
org.apache.commons.math3.exception.MaxCountExceededException.getMax():::ENTER
this has only one value
this.max has only one value
this.context has only one value
this.context.throwable has only one value
this.context.msgPatterns has only one value
this.context.msgArguments has only one value
this.context.msgArguments[] contains no nulls and has only one value, of length 2
this.context.context has only one value
===========================================================================
org.apache.commons.math3.exception.MaxCountExceededException.getMax():::EXIT
this.max == orig(this.max)
this.max.getClass().getName() == orig(this.max.getClass().getName())
this.context == orig(this.context)
this.context.throwable == orig(this.context.throwable)
this.context.msgPatterns == orig(this.context.msgPatterns)
this.context.msgPatterns[] == orig(this.context.msgPatterns[])
this.context.msgPatterns.getClass().getName() == orig(this.context.msgPatterns.getClass().getName())
this.context.msgArguments == orig(this.context.msgArguments)
this.context.msgArguments[] == orig(this.context.msgArguments[])
this.context.msgArguments.getClass().getName() == orig(this.context.msgArguments.getClass().getName())
this.context.context == orig(this.context.context)
this.context.context.getClass().getName() == orig(this.context.context.getClass().getName())
this.max has only one value
this.context has only one value
this.context.throwable has only one value
this.context.msgPatterns has only one value
this.context.msgArguments has only one value
this.context.msgArguments[] contains no nulls and has only one value, of length 2
this.context.context has only one value
return has only one value
return.getClass().getName() == java.lang.Integer.class
===========================================================================
org.apache.commons.math3.exception.TooManyEvaluationsException:::CLASS
===========================================================================
org.apache.commons.math3.exception.TooManyEvaluationsException:::OBJECT
this has only one value
this.max has only one value
this.max.getClass().getName() == java.lang.Integer.class
this.context has only one value
this.context.throwable has only one value
this.context.msgPatterns has only one value
this.context.msgPatterns[] contains no nulls and has only one value, of length 3
this.context.msgPatterns[].getClass().getName() == [org.apache.commons.math3.exception.util.LocalizedFormats, org.apache.commons.math3.exception.util.LocalizedFormats, org.apache.commons.math3.exception.util.LocalizedFormats]
this.context.msgPatterns[].getClass().getName() elements == org.apache.commons.math3.exception.util.LocalizedFormats.class
this.context.msgPatterns.getClass().getName() == java.util.ArrayList.class
this.context.msgArguments has only one value
this.context.msgArguments[] contains no nulls and has only one value, of length 3
this.context.msgArguments[].getClass().getName() == [java.lang.Object[], java.lang.Object[], java.lang.Object[]]
this.context.msgArguments[].getClass().getName() elements == java.lang.Object[].class
this.context.msgArguments.getClass().getName() == java.util.ArrayList.class
this.context.context has only one value
this.context.context.getClass().getName() == java.util.HashMap.class
size(this.context.msgPatterns[]) == 3
size(this.context.msgArguments[]) == 3
===========================================================================
org.apache.commons.math3.exception.TooManyEvaluationsException.TooManyEvaluationsException(java.lang.Number):::ENTER
max has only one value
max.getClass().getName() == java.lang.Integer.class
===========================================================================
org.apache.commons.math3.exception.TooManyEvaluationsException.TooManyEvaluationsException(java.lang.Number):::EXIT
===========================================================================
org.apache.commons.math3.exception.util.ArgUtils.flatten(java.lang.Object[]):::ENTER
array.getClass().getName() == java.lang.Object[].class
array[] elements != null
size(array[]) one of { 0, 2 }
size(array[])-1 != 0
===========================================================================
org.apache.commons.math3.exception.util.ArgUtils.flatten(java.lang.Object[]):::EXIT
array[] == orig(array[])
array[] elements != null
return.getClass().getName() == java.lang.Object[].class
return[] elements != null
size(array[])-1 != 0
size(return[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math3.exception.util.ExceptionContext:::CLASS
===========================================================================
org.apache.commons.math3.exception.util.ExceptionContext:::OBJECT
this.throwable != null
this.msgPatterns != null
this.msgPatterns[] elements != null
this.msgPatterns[].getClass().getName() elements == org.apache.commons.math3.exception.util.LocalizedFormats.class
this.msgPatterns.getClass().getName() == java.util.ArrayList.class
this.msgArguments != null
this.msgArguments[] elements != null
this.msgArguments[].getClass().getName() elements == java.lang.Object[].class
this.msgArguments.getClass().getName() == java.util.ArrayList.class
this.context != null
this.context.getClass().getName() == java.util.HashMap.class
===========================================================================
org.apache.commons.math3.exception.util.ExceptionContext.ExceptionContext(java.lang.Throwable):::ENTER
===========================================================================
org.apache.commons.math3.exception.util.ExceptionContext.ExceptionContext(java.lang.Throwable):::EXIT
this.msgPatterns[] == []
this.msgPatterns[].getClass().getName() == []
this.msgArguments[] == []
this.msgArguments[].getClass().getName() == []
===========================================================================
org.apache.commons.math3.exception.util.ExceptionContext.addMessage(org.apache.commons.math3.exception.util.Localizable, java.lang.Object[]):::ENTER
pattern.getClass().getName() == org.apache.commons.math3.exception.util.LocalizedFormats.class
arguments.getClass().getName() == java.lang.Object[].class
size(this.msgPatterns[]) one of { 0, 1, 2 }
size(this.msgArguments[]) one of { 0, 1, 2 }
size(arguments[]) one of { 0, 2 }
===========================================================================
org.apache.commons.math3.exception.util.ExceptionContext.addMessage(org.apache.commons.math3.exception.util.Localizable, java.lang.Object[]):::EXIT
this.throwable == orig(this.throwable)
this.msgPatterns == orig(this.msgPatterns)
this.msgPatterns.getClass().getName() == orig(this.msgPatterns.getClass().getName())
this.msgArguments == orig(this.msgArguments)
this.msgArguments.getClass().getName() == orig(this.msgArguments.getClass().getName())
this.context == orig(this.context)
this.context.getClass().getName() == orig(this.context.getClass().getName())
arguments[] == orig(arguments[])
size(this.msgPatterns[])-1 == orig(size(this.msgPatterns[]))
size(this.msgArguments[])-1 == orig(size(this.msgArguments[]))
size(this.msgPatterns[]) one of { 1, 2, 3 }
size(this.msgArguments[]) one of { 1, 2, 3 }
===========================================================================
org.apache.commons.math3.exception.util.LocalizedFormats:::OBJECT
===========================================================================
org.apache.commons.math3.exception.util.LocalizedFormats.LocalizedFormats(java.lang.String, int, java.lang.String):::ENTER
===========================================================================
org.apache.commons.math3.exception.util.LocalizedFormats.LocalizedFormats(java.lang.String, int, java.lang.String):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
sourceFormat.toString == orig(sourceFormat.toString)
===========================================================================
org.apache.commons.math3.fraction.BigFraction:::CLASS
org.apache.commons.math3.fraction.BigFraction.TWO has only one value
org.apache.commons.math3.fraction.BigFraction.ONE has only one value
org.apache.commons.math3.fraction.BigFraction.ZERO has only one value
org.apache.commons.math3.fraction.BigFraction.MINUS_ONE has only one value
org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS has only one value
org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH has only one value
org.apache.commons.math3.fraction.BigFraction.ONE_HALF has only one value
org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER has only one value
org.apache.commons.math3.fraction.BigFraction.ONE_THIRD has only one value
org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS has only one value
org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS has only one value
org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS has only one value
org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS has only one value
org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS has only one value
org.apache.commons.math3.fraction.BigFraction.ONE_HUNDRED has only one value
org.apache.commons.math3.fraction.BigFraction.TWO.numerator has only one value
org.apache.commons.math3.fraction.BigFraction.TWO.denominator has only one value
org.apache.commons.math3.fraction.BigFraction.ONE.numerator has only one value
org.apache.commons.math3.fraction.BigFraction.ONE.denominator has only one value
org.apache.commons.math3.fraction.BigFraction.ZERO.numerator has only one value
org.apache.commons.math3.fraction.BigFraction.ZERO.denominator has only one value
org.apache.commons.math3.fraction.BigFraction.MINUS_ONE.numerator has only one value
org.apache.commons.math3.fraction.BigFraction.MINUS_ONE.denominator has only one value
org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS.numerator has only one value
org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS.denominator has only one value
org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH.numerator has only one value
org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH.denominator has only one value
org.apache.commons.math3.fraction.BigFraction.ONE_HALF.numerator has only one value
org.apache.commons.math3.fraction.BigFraction.ONE_HALF.denominator has only one value
org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER.numerator has only one value
org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER.denominator has only one value
org.apache.commons.math3.fraction.BigFraction.ONE_THIRD.numerator has only one value
org.apache.commons.math3.fraction.BigFraction.ONE_THIRD.denominator has only one value
org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS.numerator has only one value
org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS.denominator has only one value
org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS.numerator has only one value
org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS.denominator has only one value
org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS.numerator has only one value
org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS.denominator has only one value
org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS.numerator has only one value
org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS.denominator has only one value
org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS.numerator has only one value
org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS.denominator has only one value
===========================================================================
org.apache.commons.math3.fraction.BigFraction:::OBJECT
===========================================================================
org.apache.commons.math3.fraction.BigFraction.BigFraction(int):::ENTER
===========================================================================
org.apache.commons.math3.fraction.BigFraction.BigFraction(int):::EXIT
this.denominator has only one value
===========================================================================
org.apache.commons.math3.fraction.BigFraction.BigFraction(int, int):::ENTER
num >= 1
===========================================================================
org.apache.commons.math3.fraction.BigFraction.BigFraction(int, int):::EXIT
===========================================================================
org.apache.commons.math3.fraction.BigFraction.BigFraction(java.math.BigInteger, java.math.BigInteger):::ENTER
===========================================================================
org.apache.commons.math3.fraction.BigFraction.BigFraction(java.math.BigInteger, java.math.BigInteger):::EXIT
===========================================================================
org.apache.commons.math3.fraction.BigFraction.divide(org.apache.commons.math3.fraction.BigFraction):::ENTER
fraction.denominator has only one value
===========================================================================
org.apache.commons.math3.fraction.BigFraction.divide(org.apache.commons.math3.fraction.BigFraction):::EXIT
org.apache.commons.math3.fraction.BigFraction.TWO == orig(org.apache.commons.math3.fraction.BigFraction.TWO)
org.apache.commons.math3.fraction.BigFraction.ONE == orig(org.apache.commons.math3.fraction.BigFraction.ONE)
org.apache.commons.math3.fraction.BigFraction.ZERO == orig(org.apache.commons.math3.fraction.BigFraction.ZERO)
org.apache.commons.math3.fraction.BigFraction.MINUS_ONE == orig(org.apache.commons.math3.fraction.BigFraction.MINUS_ONE)
org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS == orig(org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS)
org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH == orig(org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH)
org.apache.commons.math3.fraction.BigFraction.ONE_HALF == orig(org.apache.commons.math3.fraction.BigFraction.ONE_HALF)
org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER == orig(org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER)
org.apache.commons.math3.fraction.BigFraction.ONE_THIRD == orig(org.apache.commons.math3.fraction.BigFraction.ONE_THIRD)
org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS == orig(org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS)
org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS == orig(org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS)
org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS == orig(org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS)
org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS == orig(org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS)
org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS == orig(org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS)
org.apache.commons.math3.fraction.BigFraction.ONE_HUNDRED == orig(org.apache.commons.math3.fraction.BigFraction.ONE_HUNDRED)
org.apache.commons.math3.fraction.BigFraction.TWO.numerator == orig(org.apache.commons.math3.fraction.BigFraction.TWO.numerator)
org.apache.commons.math3.fraction.BigFraction.TWO.denominator == orig(org.apache.commons.math3.fraction.BigFraction.TWO.denominator)
org.apache.commons.math3.fraction.BigFraction.ONE.numerator == orig(org.apache.commons.math3.fraction.BigFraction.ONE.numerator)
org.apache.commons.math3.fraction.BigFraction.ONE.denominator == orig(org.apache.commons.math3.fraction.BigFraction.ONE.denominator)
org.apache.commons.math3.fraction.BigFraction.ZERO.numerator == orig(org.apache.commons.math3.fraction.BigFraction.ZERO.numerator)
org.apache.commons.math3.fraction.BigFraction.ZERO.denominator == orig(org.apache.commons.math3.fraction.BigFraction.ZERO.denominator)
org.apache.commons.math3.fraction.BigFraction.MINUS_ONE.numerator == orig(org.apache.commons.math3.fraction.BigFraction.MINUS_ONE.numerator)
org.apache.commons.math3.fraction.BigFraction.MINUS_ONE.denominator == orig(org.apache.commons.math3.fraction.BigFraction.MINUS_ONE.denominator)
org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS.numerator == orig(org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS.numerator)
org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS.denominator == orig(org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS.denominator)
org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH.numerator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH.numerator)
org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH.denominator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH.denominator)
org.apache.commons.math3.fraction.BigFraction.ONE_HALF.numerator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_HALF.numerator)
org.apache.commons.math3.fraction.BigFraction.ONE_HALF.denominator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_HALF.denominator)
org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER.numerator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER.numerator)
org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER.denominator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER.denominator)
org.apache.commons.math3.fraction.BigFraction.ONE_THIRD.numerator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_THIRD.numerator)
org.apache.commons.math3.fraction.BigFraction.ONE_THIRD.denominator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_THIRD.denominator)
org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS.numerator == orig(org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS.numerator)
org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS.denominator == orig(org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS.denominator)
org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS.numerator == orig(org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS.numerator)
org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS.denominator == orig(org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS.denominator)
org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS.numerator == orig(org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS.numerator)
org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS.denominator == orig(org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS.denominator)
org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS.numerator == orig(org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS.numerator)
org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS.denominator == orig(org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS.denominator)
org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS.numerator == orig(org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS.numerator)
org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS.denominator == orig(org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS.denominator)
this.numerator == orig(this.numerator)
this.denominator == orig(this.denominator)
fraction.numerator == orig(fraction.numerator)
fraction.denominator == orig(fraction.denominator)
fraction.denominator has only one value
===========================================================================
org.apache.commons.math3.fraction.BigFraction.doubleValue():::ENTER
===========================================================================
org.apache.commons.math3.fraction.BigFraction.doubleValue():::EXIT
org.apache.commons.math3.fraction.BigFraction.TWO == orig(org.apache.commons.math3.fraction.BigFraction.TWO)
org.apache.commons.math3.fraction.BigFraction.ONE == orig(org.apache.commons.math3.fraction.BigFraction.ONE)
org.apache.commons.math3.fraction.BigFraction.ZERO == orig(org.apache.commons.math3.fraction.BigFraction.ZERO)
org.apache.commons.math3.fraction.BigFraction.MINUS_ONE == orig(org.apache.commons.math3.fraction.BigFraction.MINUS_ONE)
org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS == orig(org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS)
org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH == orig(org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH)
org.apache.commons.math3.fraction.BigFraction.ONE_HALF == orig(org.apache.commons.math3.fraction.BigFraction.ONE_HALF)
org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER == orig(org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER)
org.apache.commons.math3.fraction.BigFraction.ONE_THIRD == orig(org.apache.commons.math3.fraction.BigFraction.ONE_THIRD)
org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS == orig(org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS)
org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS == orig(org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS)
org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS == orig(org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS)
org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS == orig(org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS)
org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS == orig(org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS)
org.apache.commons.math3.fraction.BigFraction.ONE_HUNDRED == orig(org.apache.commons.math3.fraction.BigFraction.ONE_HUNDRED)
org.apache.commons.math3.fraction.BigFraction.TWO.numerator == orig(org.apache.commons.math3.fraction.BigFraction.TWO.numerator)
org.apache.commons.math3.fraction.BigFraction.TWO.denominator == orig(org.apache.commons.math3.fraction.BigFraction.TWO.denominator)
org.apache.commons.math3.fraction.BigFraction.ONE.numerator == orig(org.apache.commons.math3.fraction.BigFraction.ONE.numerator)
org.apache.commons.math3.fraction.BigFraction.ONE.denominator == orig(org.apache.commons.math3.fraction.BigFraction.ONE.denominator)
org.apache.commons.math3.fraction.BigFraction.ZERO.numerator == orig(org.apache.commons.math3.fraction.BigFraction.ZERO.numerator)
org.apache.commons.math3.fraction.BigFraction.ZERO.denominator == orig(org.apache.commons.math3.fraction.BigFraction.ZERO.denominator)
org.apache.commons.math3.fraction.BigFraction.MINUS_ONE.numerator == orig(org.apache.commons.math3.fraction.BigFraction.MINUS_ONE.numerator)
org.apache.commons.math3.fraction.BigFraction.MINUS_ONE.denominator == orig(org.apache.commons.math3.fraction.BigFraction.MINUS_ONE.denominator)
org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS.numerator == orig(org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS.numerator)
org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS.denominator == orig(org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS.denominator)
org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH.numerator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH.numerator)
org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH.denominator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH.denominator)
org.apache.commons.math3.fraction.BigFraction.ONE_HALF.numerator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_HALF.numerator)
org.apache.commons.math3.fraction.BigFraction.ONE_HALF.denominator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_HALF.denominator)
org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER.numerator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER.numerator)
org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER.denominator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER.denominator)
org.apache.commons.math3.fraction.BigFraction.ONE_THIRD.numerator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_THIRD.numerator)
org.apache.commons.math3.fraction.BigFraction.ONE_THIRD.denominator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_THIRD.denominator)
org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS.numerator == orig(org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS.numerator)
org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS.denominator == orig(org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS.denominator)
org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS.numerator == orig(org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS.numerator)
org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS.denominator == orig(org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS.denominator)
org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS.numerator == orig(org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS.numerator)
org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS.denominator == orig(org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS.denominator)
org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS.numerator == orig(org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS.numerator)
org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS.denominator == orig(org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS.denominator)
org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS.numerator == orig(org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS.numerator)
org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS.denominator == orig(org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS.denominator)
this.numerator == orig(this.numerator)
this.denominator == orig(this.denominator)
===========================================================================
org.apache.commons.math3.fraction.BigFraction.equals(java.lang.Object):::ENTER
this.denominator has only one value
other.getClass().getName() == org.apache.commons.math3.fraction.BigFraction.class
===========================================================================
org.apache.commons.math3.fraction.BigFraction.equals(java.lang.Object):::EXIT
org.apache.commons.math3.fraction.BigFraction.TWO == orig(org.apache.commons.math3.fraction.BigFraction.TWO)
org.apache.commons.math3.fraction.BigFraction.ONE == orig(org.apache.commons.math3.fraction.BigFraction.ONE)
org.apache.commons.math3.fraction.BigFraction.ZERO == orig(org.apache.commons.math3.fraction.BigFraction.ZERO)
org.apache.commons.math3.fraction.BigFraction.MINUS_ONE == orig(org.apache.commons.math3.fraction.BigFraction.MINUS_ONE)
org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS == orig(org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS)
org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH == orig(org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH)
org.apache.commons.math3.fraction.BigFraction.ONE_HALF == orig(org.apache.commons.math3.fraction.BigFraction.ONE_HALF)
org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER == orig(org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER)
org.apache.commons.math3.fraction.BigFraction.ONE_THIRD == orig(org.apache.commons.math3.fraction.BigFraction.ONE_THIRD)
org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS == orig(org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS)
org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS == orig(org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS)
org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS == orig(org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS)
org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS == orig(org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS)
org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS == orig(org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS)
org.apache.commons.math3.fraction.BigFraction.ONE_HUNDRED == orig(org.apache.commons.math3.fraction.BigFraction.ONE_HUNDRED)
org.apache.commons.math3.fraction.BigFraction.TWO.numerator == orig(org.apache.commons.math3.fraction.BigFraction.TWO.numerator)
org.apache.commons.math3.fraction.BigFraction.TWO.denominator == orig(org.apache.commons.math3.fraction.BigFraction.TWO.denominator)
org.apache.commons.math3.fraction.BigFraction.ONE.numerator == orig(org.apache.commons.math3.fraction.BigFraction.ONE.numerator)
org.apache.commons.math3.fraction.BigFraction.ONE.denominator == orig(org.apache.commons.math3.fraction.BigFraction.ONE.denominator)
org.apache.commons.math3.fraction.BigFraction.ZERO.numerator == orig(org.apache.commons.math3.fraction.BigFraction.ZERO.numerator)
org.apache.commons.math3.fraction.BigFraction.ZERO.denominator == orig(org.apache.commons.math3.fraction.BigFraction.ZERO.denominator)
org.apache.commons.math3.fraction.BigFraction.MINUS_ONE.numerator == orig(org.apache.commons.math3.fraction.BigFraction.MINUS_ONE.numerator)
org.apache.commons.math3.fraction.BigFraction.MINUS_ONE.denominator == orig(org.apache.commons.math3.fraction.BigFraction.MINUS_ONE.denominator)
org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS.numerator == orig(org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS.numerator)
org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS.denominator == orig(org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS.denominator)
org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH.numerator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH.numerator)
org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH.denominator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH.denominator)
org.apache.commons.math3.fraction.BigFraction.ONE_HALF.numerator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_HALF.numerator)
org.apache.commons.math3.fraction.BigFraction.ONE_HALF.denominator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_HALF.denominator)
org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER.numerator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER.numerator)
org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER.denominator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER.denominator)
org.apache.commons.math3.fraction.BigFraction.ONE_THIRD.numerator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_THIRD.numerator)
org.apache.commons.math3.fraction.BigFraction.ONE_THIRD.denominator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_THIRD.denominator)
org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS.numerator == orig(org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS.numerator)
org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS.denominator == orig(org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS.denominator)
org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS.numerator == orig(org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS.numerator)
org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS.denominator == orig(org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS.denominator)
org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS.numerator == orig(org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS.numerator)
org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS.denominator == orig(org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS.denominator)
org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS.numerator == orig(org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS.numerator)
org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS.denominator == orig(org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS.denominator)
org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS.numerator == orig(org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS.numerator)
org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS.denominator == orig(org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS.denominator)
this.numerator == orig(this.numerator)
this.denominator == orig(this.denominator)
(return == true)  ==>  (orig(other) has only one value)
(return == true)  ==>  (orig(this) has only one value)
(return == true)  ==>  (this.numerator has only one value)
this.denominator has only one value
===========================================================================
org.apache.commons.math3.fraction.BigFraction.equals(java.lang.Object):::EXIT;condition="return == true"
this.numerator has only one value
return == true
orig(this) has only one value
orig(other) has only one value
===========================================================================
org.apache.commons.math3.fraction.BigFraction.equals(java.lang.Object):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.math3.fraction.BigFraction.getField():::ENTER
===========================================================================
org.apache.commons.math3.fraction.BigFraction.getField():::EXIT
org.apache.commons.math3.fraction.BigFraction.TWO == orig(org.apache.commons.math3.fraction.BigFraction.TWO)
org.apache.commons.math3.fraction.BigFraction.ONE == orig(org.apache.commons.math3.fraction.BigFraction.ONE)
org.apache.commons.math3.fraction.BigFraction.ZERO == orig(org.apache.commons.math3.fraction.BigFraction.ZERO)
org.apache.commons.math3.fraction.BigFraction.MINUS_ONE == orig(org.apache.commons.math3.fraction.BigFraction.MINUS_ONE)
org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS == orig(org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS)
org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH == orig(org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH)
org.apache.commons.math3.fraction.BigFraction.ONE_HALF == orig(org.apache.commons.math3.fraction.BigFraction.ONE_HALF)
org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER == orig(org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER)
org.apache.commons.math3.fraction.BigFraction.ONE_THIRD == orig(org.apache.commons.math3.fraction.BigFraction.ONE_THIRD)
org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS == orig(org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS)
org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS == orig(org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS)
org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS == orig(org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS)
org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS == orig(org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS)
org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS == orig(org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS)
org.apache.commons.math3.fraction.BigFraction.ONE_HUNDRED == orig(org.apache.commons.math3.fraction.BigFraction.ONE_HUNDRED)
org.apache.commons.math3.fraction.BigFraction.TWO.numerator == orig(org.apache.commons.math3.fraction.BigFraction.TWO.numerator)
org.apache.commons.math3.fraction.BigFraction.TWO.denominator == orig(org.apache.commons.math3.fraction.BigFraction.TWO.denominator)
org.apache.commons.math3.fraction.BigFraction.ONE.numerator == orig(org.apache.commons.math3.fraction.BigFraction.ONE.numerator)
org.apache.commons.math3.fraction.BigFraction.ONE.denominator == orig(org.apache.commons.math3.fraction.BigFraction.ONE.denominator)
org.apache.commons.math3.fraction.BigFraction.ZERO.numerator == orig(org.apache.commons.math3.fraction.BigFraction.ZERO.numerator)
org.apache.commons.math3.fraction.BigFraction.ZERO.denominator == orig(org.apache.commons.math3.fraction.BigFraction.ZERO.denominator)
org.apache.commons.math3.fraction.BigFraction.MINUS_ONE.numerator == orig(org.apache.commons.math3.fraction.BigFraction.MINUS_ONE.numerator)
org.apache.commons.math3.fraction.BigFraction.MINUS_ONE.denominator == orig(org.apache.commons.math3.fraction.BigFraction.MINUS_ONE.denominator)
org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS.numerator == orig(org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS.numerator)
org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS.denominator == orig(org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS.denominator)
org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH.numerator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH.numerator)
org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH.denominator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH.denominator)
org.apache.commons.math3.fraction.BigFraction.ONE_HALF.numerator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_HALF.numerator)
org.apache.commons.math3.fraction.BigFraction.ONE_HALF.denominator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_HALF.denominator)
org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER.numerator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER.numerator)
org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER.denominator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER.denominator)
org.apache.commons.math3.fraction.BigFraction.ONE_THIRD.numerator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_THIRD.numerator)
org.apache.commons.math3.fraction.BigFraction.ONE_THIRD.denominator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_THIRD.denominator)
org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS.numerator == orig(org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS.numerator)
org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS.denominator == orig(org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS.denominator)
org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS.numerator == orig(org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS.numerator)
org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS.denominator == orig(org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS.denominator)
org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS.numerator == orig(org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS.numerator)
org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS.denominator == orig(org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS.denominator)
org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS.numerator == orig(org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS.numerator)
org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS.denominator == orig(org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS.denominator)
org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS.numerator == orig(org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS.numerator)
org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS.denominator == orig(org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS.denominator)
this.numerator == orig(this.numerator)
this.denominator == orig(this.denominator)
return has only one value
===========================================================================
org.apache.commons.math3.fraction.BigFraction.multiply(org.apache.commons.math3.fraction.BigFraction):::ENTER
===========================================================================
org.apache.commons.math3.fraction.BigFraction.multiply(org.apache.commons.math3.fraction.BigFraction):::EXIT915
this.numerator has only one value
this.denominator has only one value
return has only one value
return.numerator has only one value
return.denominator has only one value
===========================================================================
org.apache.commons.math3.fraction.BigFraction.multiply(org.apache.commons.math3.fraction.BigFraction):::EXIT917
===========================================================================
org.apache.commons.math3.fraction.BigFraction.multiply(org.apache.commons.math3.fraction.BigFraction):::EXIT
org.apache.commons.math3.fraction.BigFraction.TWO == orig(org.apache.commons.math3.fraction.BigFraction.TWO)
org.apache.commons.math3.fraction.BigFraction.ONE == orig(org.apache.commons.math3.fraction.BigFraction.ONE)
org.apache.commons.math3.fraction.BigFraction.ZERO == orig(org.apache.commons.math3.fraction.BigFraction.ZERO)
org.apache.commons.math3.fraction.BigFraction.MINUS_ONE == orig(org.apache.commons.math3.fraction.BigFraction.MINUS_ONE)
org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS == orig(org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS)
org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH == orig(org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH)
org.apache.commons.math3.fraction.BigFraction.ONE_HALF == orig(org.apache.commons.math3.fraction.BigFraction.ONE_HALF)
org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER == orig(org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER)
org.apache.commons.math3.fraction.BigFraction.ONE_THIRD == orig(org.apache.commons.math3.fraction.BigFraction.ONE_THIRD)
org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS == orig(org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS)
org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS == orig(org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS)
org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS == orig(org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS)
org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS == orig(org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS)
org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS == orig(org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS)
org.apache.commons.math3.fraction.BigFraction.ONE_HUNDRED == orig(org.apache.commons.math3.fraction.BigFraction.ONE_HUNDRED)
org.apache.commons.math3.fraction.BigFraction.TWO.numerator == orig(org.apache.commons.math3.fraction.BigFraction.TWO.numerator)
org.apache.commons.math3.fraction.BigFraction.TWO.denominator == orig(org.apache.commons.math3.fraction.BigFraction.TWO.denominator)
org.apache.commons.math3.fraction.BigFraction.ONE.numerator == orig(org.apache.commons.math3.fraction.BigFraction.ONE.numerator)
org.apache.commons.math3.fraction.BigFraction.ONE.denominator == orig(org.apache.commons.math3.fraction.BigFraction.ONE.denominator)
org.apache.commons.math3.fraction.BigFraction.ZERO.numerator == orig(org.apache.commons.math3.fraction.BigFraction.ZERO.numerator)
org.apache.commons.math3.fraction.BigFraction.ZERO.denominator == orig(org.apache.commons.math3.fraction.BigFraction.ZERO.denominator)
org.apache.commons.math3.fraction.BigFraction.MINUS_ONE.numerator == orig(org.apache.commons.math3.fraction.BigFraction.MINUS_ONE.numerator)
org.apache.commons.math3.fraction.BigFraction.MINUS_ONE.denominator == orig(org.apache.commons.math3.fraction.BigFraction.MINUS_ONE.denominator)
org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS.numerator == orig(org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS.numerator)
org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS.denominator == orig(org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS.denominator)
org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH.numerator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH.numerator)
org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH.denominator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH.denominator)
org.apache.commons.math3.fraction.BigFraction.ONE_HALF.numerator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_HALF.numerator)
org.apache.commons.math3.fraction.BigFraction.ONE_HALF.denominator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_HALF.denominator)
org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER.numerator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER.numerator)
org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER.denominator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER.denominator)
org.apache.commons.math3.fraction.BigFraction.ONE_THIRD.numerator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_THIRD.numerator)
org.apache.commons.math3.fraction.BigFraction.ONE_THIRD.denominator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_THIRD.denominator)
org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS.numerator == orig(org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS.numerator)
org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS.denominator == orig(org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS.denominator)
org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS.numerator == orig(org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS.numerator)
org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS.denominator == orig(org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS.denominator)
org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS.numerator == orig(org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS.numerator)
org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS.denominator == orig(org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS.denominator)
org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS.numerator == orig(org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS.numerator)
org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS.denominator == orig(org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS.denominator)
org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS.numerator == orig(org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS.numerator)
org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS.denominator == orig(org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS.denominator)
this.numerator == orig(this.numerator)
this.denominator == orig(this.denominator)
fraction.numerator == orig(fraction.numerator)
fraction.denominator == orig(fraction.denominator)
===========================================================================
org.apache.commons.math3.fraction.BigFraction.reciprocal():::ENTER
this.denominator has only one value
===========================================================================
org.apache.commons.math3.fraction.BigFraction.reciprocal():::EXIT
org.apache.commons.math3.fraction.BigFraction.TWO == orig(org.apache.commons.math3.fraction.BigFraction.TWO)
org.apache.commons.math3.fraction.BigFraction.ONE == orig(org.apache.commons.math3.fraction.BigFraction.ONE)
org.apache.commons.math3.fraction.BigFraction.ZERO == orig(org.apache.commons.math3.fraction.BigFraction.ZERO)
org.apache.commons.math3.fraction.BigFraction.MINUS_ONE == orig(org.apache.commons.math3.fraction.BigFraction.MINUS_ONE)
org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS == orig(org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS)
org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH == orig(org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH)
org.apache.commons.math3.fraction.BigFraction.ONE_HALF == orig(org.apache.commons.math3.fraction.BigFraction.ONE_HALF)
org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER == orig(org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER)
org.apache.commons.math3.fraction.BigFraction.ONE_THIRD == orig(org.apache.commons.math3.fraction.BigFraction.ONE_THIRD)
org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS == orig(org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS)
org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS == orig(org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS)
org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS == orig(org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS)
org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS == orig(org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS)
org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS == orig(org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS)
org.apache.commons.math3.fraction.BigFraction.ONE_HUNDRED == orig(org.apache.commons.math3.fraction.BigFraction.ONE_HUNDRED)
org.apache.commons.math3.fraction.BigFraction.TWO.numerator == orig(org.apache.commons.math3.fraction.BigFraction.TWO.numerator)
org.apache.commons.math3.fraction.BigFraction.TWO.denominator == orig(org.apache.commons.math3.fraction.BigFraction.TWO.denominator)
org.apache.commons.math3.fraction.BigFraction.ONE.numerator == orig(org.apache.commons.math3.fraction.BigFraction.ONE.numerator)
org.apache.commons.math3.fraction.BigFraction.ONE.denominator == orig(org.apache.commons.math3.fraction.BigFraction.ONE.denominator)
org.apache.commons.math3.fraction.BigFraction.ZERO.numerator == orig(org.apache.commons.math3.fraction.BigFraction.ZERO.numerator)
org.apache.commons.math3.fraction.BigFraction.ZERO.denominator == orig(org.apache.commons.math3.fraction.BigFraction.ZERO.denominator)
org.apache.commons.math3.fraction.BigFraction.MINUS_ONE.numerator == orig(org.apache.commons.math3.fraction.BigFraction.MINUS_ONE.numerator)
org.apache.commons.math3.fraction.BigFraction.MINUS_ONE.denominator == orig(org.apache.commons.math3.fraction.BigFraction.MINUS_ONE.denominator)
org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS.numerator == orig(org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS.numerator)
org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS.denominator == orig(org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS.denominator)
org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH.numerator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH.numerator)
org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH.denominator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH.denominator)
org.apache.commons.math3.fraction.BigFraction.ONE_HALF.numerator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_HALF.numerator)
org.apache.commons.math3.fraction.BigFraction.ONE_HALF.denominator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_HALF.denominator)
org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER.numerator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER.numerator)
org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER.denominator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER.denominator)
org.apache.commons.math3.fraction.BigFraction.ONE_THIRD.numerator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_THIRD.numerator)
org.apache.commons.math3.fraction.BigFraction.ONE_THIRD.denominator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_THIRD.denominator)
org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS.numerator == orig(org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS.numerator)
org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS.denominator == orig(org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS.denominator)
org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS.numerator == orig(org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS.numerator)
org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS.denominator == orig(org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS.denominator)
org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS.numerator == orig(org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS.numerator)
org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS.denominator == orig(org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS.denominator)
org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS.numerator == orig(org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS.numerator)
org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS.denominator == orig(org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS.denominator)
org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS.numerator == orig(org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS.numerator)
org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS.denominator == orig(org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS.denominator)
this.numerator == orig(this.numerator)
this.denominator == orig(this.denominator)
this.denominator has only one value
===========================================================================
org.apache.commons.math3.fraction.BigFraction.reduce():::ENTER
===========================================================================
org.apache.commons.math3.fraction.BigFraction.reduce():::EXIT
org.apache.commons.math3.fraction.BigFraction.TWO == orig(org.apache.commons.math3.fraction.BigFraction.TWO)
org.apache.commons.math3.fraction.BigFraction.ONE == orig(org.apache.commons.math3.fraction.BigFraction.ONE)
org.apache.commons.math3.fraction.BigFraction.ZERO == orig(org.apache.commons.math3.fraction.BigFraction.ZERO)
org.apache.commons.math3.fraction.BigFraction.MINUS_ONE == orig(org.apache.commons.math3.fraction.BigFraction.MINUS_ONE)
org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS == orig(org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS)
org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH == orig(org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH)
org.apache.commons.math3.fraction.BigFraction.ONE_HALF == orig(org.apache.commons.math3.fraction.BigFraction.ONE_HALF)
org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER == orig(org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER)
org.apache.commons.math3.fraction.BigFraction.ONE_THIRD == orig(org.apache.commons.math3.fraction.BigFraction.ONE_THIRD)
org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS == orig(org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS)
org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS == orig(org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS)
org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS == orig(org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS)
org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS == orig(org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS)
org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS == orig(org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS)
org.apache.commons.math3.fraction.BigFraction.ONE_HUNDRED == orig(org.apache.commons.math3.fraction.BigFraction.ONE_HUNDRED)
org.apache.commons.math3.fraction.BigFraction.TWO.numerator == orig(org.apache.commons.math3.fraction.BigFraction.TWO.numerator)
org.apache.commons.math3.fraction.BigFraction.TWO.denominator == orig(org.apache.commons.math3.fraction.BigFraction.TWO.denominator)
org.apache.commons.math3.fraction.BigFraction.ONE.numerator == orig(org.apache.commons.math3.fraction.BigFraction.ONE.numerator)
org.apache.commons.math3.fraction.BigFraction.ONE.denominator == orig(org.apache.commons.math3.fraction.BigFraction.ONE.denominator)
org.apache.commons.math3.fraction.BigFraction.ZERO.numerator == orig(org.apache.commons.math3.fraction.BigFraction.ZERO.numerator)
org.apache.commons.math3.fraction.BigFraction.ZERO.denominator == orig(org.apache.commons.math3.fraction.BigFraction.ZERO.denominator)
org.apache.commons.math3.fraction.BigFraction.MINUS_ONE.numerator == orig(org.apache.commons.math3.fraction.BigFraction.MINUS_ONE.numerator)
org.apache.commons.math3.fraction.BigFraction.MINUS_ONE.denominator == orig(org.apache.commons.math3.fraction.BigFraction.MINUS_ONE.denominator)
org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS.numerator == orig(org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS.numerator)
org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS.denominator == orig(org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS.denominator)
org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH.numerator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH.numerator)
org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH.denominator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH.denominator)
org.apache.commons.math3.fraction.BigFraction.ONE_HALF.numerator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_HALF.numerator)
org.apache.commons.math3.fraction.BigFraction.ONE_HALF.denominator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_HALF.denominator)
org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER.numerator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER.numerator)
org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER.denominator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER.denominator)
org.apache.commons.math3.fraction.BigFraction.ONE_THIRD.numerator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_THIRD.numerator)
org.apache.commons.math3.fraction.BigFraction.ONE_THIRD.denominator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_THIRD.denominator)
org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS.numerator == orig(org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS.numerator)
org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS.denominator == orig(org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS.denominator)
org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS.numerator == orig(org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS.numerator)
org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS.denominator == orig(org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS.denominator)
org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS.numerator == orig(org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS.numerator)
org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS.denominator == orig(org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS.denominator)
org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS.numerator == orig(org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS.numerator)
org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS.denominator == orig(org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS.denominator)
org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS.numerator == orig(org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS.numerator)
org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS.denominator == orig(org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS.denominator)
this.numerator == orig(this.numerator)
this.denominator == orig(this.denominator)
===========================================================================
org.apache.commons.math3.fraction.BigFraction.subtract(org.apache.commons.math3.fraction.BigFraction):::ENTER
===========================================================================
org.apache.commons.math3.fraction.BigFraction.subtract(org.apache.commons.math3.fraction.BigFraction):::EXIT1099
fraction.numerator has only one value
fraction.denominator has only one value
orig(fraction) has only one value
===========================================================================
org.apache.commons.math3.fraction.BigFraction.subtract(org.apache.commons.math3.fraction.BigFraction):::EXIT1111
===========================================================================
org.apache.commons.math3.fraction.BigFraction.subtract(org.apache.commons.math3.fraction.BigFraction):::EXIT
org.apache.commons.math3.fraction.BigFraction.TWO == orig(org.apache.commons.math3.fraction.BigFraction.TWO)
org.apache.commons.math3.fraction.BigFraction.ONE == orig(org.apache.commons.math3.fraction.BigFraction.ONE)
org.apache.commons.math3.fraction.BigFraction.ZERO == orig(org.apache.commons.math3.fraction.BigFraction.ZERO)
org.apache.commons.math3.fraction.BigFraction.MINUS_ONE == orig(org.apache.commons.math3.fraction.BigFraction.MINUS_ONE)
org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS == orig(org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS)
org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH == orig(org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH)
org.apache.commons.math3.fraction.BigFraction.ONE_HALF == orig(org.apache.commons.math3.fraction.BigFraction.ONE_HALF)
org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER == orig(org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER)
org.apache.commons.math3.fraction.BigFraction.ONE_THIRD == orig(org.apache.commons.math3.fraction.BigFraction.ONE_THIRD)
org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS == orig(org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS)
org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS == orig(org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS)
org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS == orig(org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS)
org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS == orig(org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS)
org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS == orig(org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS)
org.apache.commons.math3.fraction.BigFraction.ONE_HUNDRED == orig(org.apache.commons.math3.fraction.BigFraction.ONE_HUNDRED)
org.apache.commons.math3.fraction.BigFraction.TWO.numerator == orig(org.apache.commons.math3.fraction.BigFraction.TWO.numerator)
org.apache.commons.math3.fraction.BigFraction.TWO.denominator == orig(org.apache.commons.math3.fraction.BigFraction.TWO.denominator)
org.apache.commons.math3.fraction.BigFraction.ONE.numerator == orig(org.apache.commons.math3.fraction.BigFraction.ONE.numerator)
org.apache.commons.math3.fraction.BigFraction.ONE.denominator == orig(org.apache.commons.math3.fraction.BigFraction.ONE.denominator)
org.apache.commons.math3.fraction.BigFraction.ZERO.numerator == orig(org.apache.commons.math3.fraction.BigFraction.ZERO.numerator)
org.apache.commons.math3.fraction.BigFraction.ZERO.denominator == orig(org.apache.commons.math3.fraction.BigFraction.ZERO.denominator)
org.apache.commons.math3.fraction.BigFraction.MINUS_ONE.numerator == orig(org.apache.commons.math3.fraction.BigFraction.MINUS_ONE.numerator)
org.apache.commons.math3.fraction.BigFraction.MINUS_ONE.denominator == orig(org.apache.commons.math3.fraction.BigFraction.MINUS_ONE.denominator)
org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS.numerator == orig(org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS.numerator)
org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS.denominator == orig(org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS.denominator)
org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH.numerator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH.numerator)
org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH.denominator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH.denominator)
org.apache.commons.math3.fraction.BigFraction.ONE_HALF.numerator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_HALF.numerator)
org.apache.commons.math3.fraction.BigFraction.ONE_HALF.denominator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_HALF.denominator)
org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER.numerator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER.numerator)
org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER.denominator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER.denominator)
org.apache.commons.math3.fraction.BigFraction.ONE_THIRD.numerator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_THIRD.numerator)
org.apache.commons.math3.fraction.BigFraction.ONE_THIRD.denominator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_THIRD.denominator)
org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS.numerator == orig(org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS.numerator)
org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS.denominator == orig(org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS.denominator)
org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS.numerator == orig(org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS.numerator)
org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS.denominator == orig(org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS.denominator)
org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS.numerator == orig(org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS.numerator)
org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS.denominator == orig(org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS.denominator)
org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS.numerator == orig(org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS.numerator)
org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS.denominator == orig(org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS.denominator)
org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS.numerator == orig(org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS.numerator)
org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS.denominator == orig(org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS.denominator)
this.numerator == orig(this.numerator)
this.denominator == orig(this.denominator)
fraction.numerator == orig(fraction.numerator)
fraction.denominator == orig(fraction.denominator)
===========================================================================
org.apache.commons.math3.fraction.BigFractionField:::CLASS
===========================================================================
org.apache.commons.math3.fraction.BigFractionField:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math3.fraction.BigFractionField.BigFractionField():::EXIT
===========================================================================
org.apache.commons.math3.fraction.BigFractionField.getInstance():::ENTER
===========================================================================
org.apache.commons.math3.fraction.BigFractionField.getInstance():::EXIT
return has only one value
===========================================================================
org.apache.commons.math3.fraction.BigFractionField.getRuntimeClass():::ENTER
===========================================================================
org.apache.commons.math3.fraction.BigFractionField.getRuntimeClass():::EXIT
return has only one value
===========================================================================
org.apache.commons.math3.fraction.BigFractionField.getZero():::ENTER
===========================================================================
org.apache.commons.math3.fraction.BigFractionField.getZero():::EXIT
return has only one value
org.apache.commons.math3.fraction.BigFraction.TWO has only one value
org.apache.commons.math3.fraction.BigFraction.ONE has only one value
org.apache.commons.math3.fraction.BigFraction.ZERO has only one value
org.apache.commons.math3.fraction.BigFraction.MINUS_ONE has only one value
org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS has only one value
org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH has only one value
org.apache.commons.math3.fraction.BigFraction.ONE_HALF has only one value
org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER has only one value
org.apache.commons.math3.fraction.BigFraction.ONE_THIRD has only one value
org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS has only one value
org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS has only one value
org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS has only one value
org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS has only one value
org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS has only one value
org.apache.commons.math3.fraction.BigFraction.ONE_HUNDRED has only one value
org.apache.commons.math3.fraction.BigFraction.TWO.numerator has only one value
org.apache.commons.math3.fraction.BigFraction.TWO.denominator has only one value
org.apache.commons.math3.fraction.BigFraction.ONE.numerator has only one value
org.apache.commons.math3.fraction.BigFraction.ONE.denominator has only one value
org.apache.commons.math3.fraction.BigFraction.ZERO.numerator has only one value
org.apache.commons.math3.fraction.BigFraction.ZERO.denominator has only one value
org.apache.commons.math3.fraction.BigFraction.MINUS_ONE.numerator has only one value
org.apache.commons.math3.fraction.BigFraction.MINUS_ONE.denominator has only one value
org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS.numerator has only one value
org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS.denominator has only one value
org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH.numerator has only one value
org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH.denominator has only one value
org.apache.commons.math3.fraction.BigFraction.ONE_HALF.numerator has only one value
org.apache.commons.math3.fraction.BigFraction.ONE_HALF.denominator has only one value
org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER.numerator has only one value
org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER.denominator has only one value
org.apache.commons.math3.fraction.BigFraction.ONE_THIRD.numerator has only one value
org.apache.commons.math3.fraction.BigFraction.ONE_THIRD.denominator has only one value
org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS.numerator has only one value
org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS.denominator has only one value
org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS.numerator has only one value
org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS.denominator has only one value
org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS.numerator has only one value
org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS.denominator has only one value
org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS.numerator has only one value
org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS.denominator has only one value
org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS.numerator has only one value
org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS.denominator has only one value
return.numerator has only one value
return.denominator has only one value
===========================================================================
org.apache.commons.math3.linear.AbstractFieldMatrix:::OBJECT
this.getClass().getName() == org.apache.commons.math3.linear.Array2DRowFieldMatrix.class
this.field has only one value
this.field.getClass().getName() == org.apache.commons.math3.fraction.BigFractionField.class
===========================================================================
org.apache.commons.math3.linear.AbstractFieldMatrix.AbstractFieldMatrix(org.apache.commons.math3.Field):::ENTER
field has only one value
field.getClass().getName() == org.apache.commons.math3.fraction.BigFractionField.class
===========================================================================
org.apache.commons.math3.linear.AbstractFieldMatrix.AbstractFieldMatrix(org.apache.commons.math3.Field):::EXIT
===========================================================================
org.apache.commons.math3.linear.AbstractFieldMatrix.checkColumnIndex(int):::ENTER
column >= 0
===========================================================================
org.apache.commons.math3.linear.AbstractFieldMatrix.checkColumnIndex(int):::EXIT
this.field == orig(this.field)
this.field.getClass().getName() == orig(this.field.getClass().getName())
===========================================================================
org.apache.commons.math3.linear.AbstractFieldMatrix.checkRowIndex(int):::ENTER
row >= 0
===========================================================================
org.apache.commons.math3.linear.AbstractFieldMatrix.checkRowIndex(int):::EXIT
this.field == orig(this.field)
this.field.getClass().getName() == orig(this.field.getClass().getName())
===========================================================================
org.apache.commons.math3.linear.AbstractFieldMatrix.extractField(org.apache.commons.math3.FieldElement[][]):::ENTER
d.getClass().getName() == org.apache.commons.math3.fraction.BigFraction[][].class
d[] elements != null
===========================================================================
org.apache.commons.math3.linear.AbstractFieldMatrix.extractField(org.apache.commons.math3.FieldElement[][]):::EXIT
d[] == orig(d[])
d[] elements != null
return has only one value
return.getClass().getName() == org.apache.commons.math3.fraction.BigFractionField.class
===========================================================================
org.apache.commons.math3.linear.AbstractFieldMatrix.getField():::ENTER
===========================================================================
org.apache.commons.math3.linear.AbstractFieldMatrix.getField():::EXIT
this.field == orig(this.field)
this.field.getClass().getName() == orig(this.field.getClass().getName())
return has only one value
return.getClass().getName() == org.apache.commons.math3.fraction.BigFractionField.class
===========================================================================
org.apache.commons.math3.linear.AbstractFieldMatrix.isSquare():::ENTER
===========================================================================
org.apache.commons.math3.linear.AbstractFieldMatrix.isSquare():::EXIT
this.field == orig(this.field)
this.field.getClass().getName() == orig(this.field.getClass().getName())
return == true
===========================================================================
org.apache.commons.math3.linear.AbstractFieldMatrix.isSquare():::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math3.linear.AbstractFieldMatrix.walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor):::ENTER
visitor.getClass().getName() == org.apache.commons.math3.linear.MatrixUtils$BigFractionMatrixConverter.class
===========================================================================
org.apache.commons.math3.linear.AbstractFieldMatrix.walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor):::EXIT
this.field == orig(this.field)
this.field.getClass().getName() == orig(this.field.getClass().getName())
return has only one value
return.getClass().getName() == org.apache.commons.math3.fraction.BigFraction.class
===========================================================================
org.apache.commons.math3.linear.AbstractRealMatrix$4:::OBJECT
this.startRow == 0
this.startColumn == 0
this.val$destination.getClass().getName() == double[][].class
this.val$destination[] elements != null
org.apache.commons.math3.linear.AbstractRealMatrix.this.getClass().getName() == org.apache.commons.math3.linear.Array2DRowRealMatrix.class
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == "{"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == "}"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == "{"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == "}"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == ","
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == ","
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == "{"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == "}"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == "{"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == "}"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == ","
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == ","
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math3.linear.AbstractRealMatrix$4.(org.apache.commons.math3.linear.AbstractRealMatrix, double[][]):::ENTER
org.apache.commons.math3.linear.AbstractRealMatrix.this.getClass().getName() == org.apache.commons.math3.linear.Array2DRowRealMatrix.class
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == "{"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == "}"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == "{"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == "}"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == ","
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == ","
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == "{"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == "}"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == "{"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == "}"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == ","
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == ","
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == java.text.DecimalFormat.class
$hidden$2.getClass().getName() == double[][].class
$hidden$2[] elements != null
===========================================================================
org.apache.commons.math3.linear.AbstractRealMatrix$4.(org.apache.commons.math3.linear.AbstractRealMatrix, double[][]):::EXIT
org.apache.commons.math3.linear.AbstractRealMatrix.this == orig(org.apache.commons.math3.linear.AbstractRealMatrix.this)
org.apache.commons.math3.linear.AbstractRealMatrix.this.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.this.getClass().getName())
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
$hidden$2[] == orig($hidden$2[])
$hidden$2[] elements != null
===========================================================================
org.apache.commons.math3.linear.AbstractRealMatrix$4.start(int, int, int, int, int, int):::ENTER
columns one of { 1, 2, 4 }
startRow == 0
startColumn == 0
endColumn one of { 0, 1, 3 }
===========================================================================
org.apache.commons.math3.linear.AbstractRealMatrix$4.start(int, int, int, int, int, int):::EXIT
this.startRow == orig(this.startRow)
this.startColumn == orig(this.startColumn)
this.val$destination == orig(this.val$destination)
this.val$destination.getClass().getName() == orig(this.val$destination.getClass().getName())
this.val$destination[] == orig(this.val$destination[])
org.apache.commons.math3.linear.AbstractRealMatrix.this == orig(org.apache.commons.math3.linear.AbstractRealMatrix.this)
org.apache.commons.math3.linear.AbstractRealMatrix.this.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.this.getClass().getName())
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
===========================================================================
org.apache.commons.math3.linear.AbstractRealMatrix$4.visit(int, int, double):::ENTER
row >= 0
column >= 0
===========================================================================
org.apache.commons.math3.linear.AbstractRealMatrix$4.visit(int, int, double):::EXIT
this.startRow == orig(this.startRow)
this.startColumn == orig(this.startColumn)
this.val$destination == orig(this.val$destination)
this.val$destination.getClass().getName() == orig(this.val$destination.getClass().getName())
this.val$destination[] == orig(this.val$destination[])
org.apache.commons.math3.linear.AbstractRealMatrix.this == orig(org.apache.commons.math3.linear.AbstractRealMatrix.this)
org.apache.commons.math3.linear.AbstractRealMatrix.this.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.this.getClass().getName())
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
===========================================================================
org.apache.commons.math3.linear.AbstractRealMatrix$5:::OBJECT
this.val$out.getClass().getName() == org.apache.commons.math3.linear.Array2DRowRealMatrix.class
org.apache.commons.math3.linear.AbstractRealMatrix.this.getClass().getName() == org.apache.commons.math3.linear.Array2DRowRealMatrix.class
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == "{"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == "}"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == "{"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == "}"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == ","
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == ","
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == "{"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == "}"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == "{"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == "}"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == ","
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == ","
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math3.linear.AbstractRealMatrix$5.(org.apache.commons.math3.linear.AbstractRealMatrix, org.apache.commons.math3.linear.RealMatrix):::ENTER
org.apache.commons.math3.linear.AbstractRealMatrix.this.getClass().getName() == org.apache.commons.math3.linear.Array2DRowRealMatrix.class
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == "{"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == "}"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == "{"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == "}"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == ","
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == ","
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == "{"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == "}"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == "{"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == "}"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == ","
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == ","
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == java.text.DecimalFormat.class
$hidden$2.getClass().getName() == org.apache.commons.math3.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math3.linear.AbstractRealMatrix$5.(org.apache.commons.math3.linear.AbstractRealMatrix, org.apache.commons.math3.linear.RealMatrix):::EXIT
org.apache.commons.math3.linear.AbstractRealMatrix.this == orig(org.apache.commons.math3.linear.AbstractRealMatrix.this)
org.apache.commons.math3.linear.AbstractRealMatrix.this.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.this.getClass().getName())
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
===========================================================================
org.apache.commons.math3.linear.AbstractRealMatrix$5.visit(int, int, double):::ENTER
row >= 0
column >= 0
===========================================================================
org.apache.commons.math3.linear.AbstractRealMatrix$5.visit(int, int, double):::EXIT
this.val$out == orig(this.val$out)
this.val$out.getClass().getName() == orig(this.val$out.getClass().getName())
org.apache.commons.math3.linear.AbstractRealMatrix.this == orig(org.apache.commons.math3.linear.AbstractRealMatrix.this)
org.apache.commons.math3.linear.AbstractRealMatrix.this.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.this.getClass().getName())
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
===========================================================================
org.apache.commons.math3.linear.AbstractRealMatrix:::CLASS
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == "{"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == "}"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == "{"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == "}"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == ","
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == ","
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == "{"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == "}"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == "{"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == "}"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == ","
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == ","
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math3.linear.AbstractRealMatrix:::OBJECT
===========================================================================
org.apache.commons.math3.linear.AbstractRealMatrix.AbstractRealMatrix():::EXIT
===========================================================================
org.apache.commons.math3.linear.AbstractRealMatrix.AbstractRealMatrix(int, int):::ENTER
===========================================================================
org.apache.commons.math3.linear.AbstractRealMatrix.AbstractRealMatrix(int, int):::EXIT
===========================================================================
org.apache.commons.math3.linear.AbstractRealMatrix.copySubMatrix(int, int, int, int, double[][]):::ENTER
this.getClass().getName() == org.apache.commons.math3.linear.Array2DRowRealMatrix.class
startRow == 0
startColumn == 0
endColumn one of { 0, 1, 3 }
destination.getClass().getName() == double[][].class
destination[] elements != null
===========================================================================
org.apache.commons.math3.linear.AbstractRealMatrix.copySubMatrix(int, int, int, int, double[][]):::EXIT
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
destination[] == orig(destination[])
destination[] elements != null
===========================================================================
org.apache.commons.math3.linear.AbstractRealMatrix.transpose():::ENTER
this.getClass().getName() == org.apache.commons.math3.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math3.linear.AbstractRealMatrix.transpose():::EXIT
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
return.getClass().getName() == org.apache.commons.math3.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math3.linear.AbstractRealMatrix.walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor):::ENTER
this.getClass().getName() == org.apache.commons.math3.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math3.linear.AbstractRealMatrix.walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor):::EXIT
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
return >= 0.0
===========================================================================
org.apache.commons.math3.linear.AbstractRealMatrix.walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor, int, int, int, int):::ENTER
this.getClass().getName() == org.apache.commons.math3.linear.Array2DRowRealMatrix.class
visitor.getClass().getName() == org.apache.commons.math3.linear.AbstractRealMatrix$4.class
startRow == 0
startColumn == 0
endColumn one of { 0, 1, 3 }
===========================================================================
org.apache.commons.math3.linear.AbstractRealMatrix.walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor, int, int, int, int):::EXIT
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
return == 0.0
===========================================================================
org.apache.commons.math3.linear.Array2DRowFieldMatrix:::CLASS
===========================================================================
org.apache.commons.math3.linear.Array2DRowFieldMatrix:::OBJECT
this.data.getClass().getName() == org.apache.commons.math3.fraction.BigFraction[][].class
this.data[] elements != null
this.field has only one value
this.field.getClass().getName() == org.apache.commons.math3.fraction.BigFractionField.class
size(this.data[]) >= 2
===========================================================================
org.apache.commons.math3.linear.Array2DRowFieldMatrix.Array2DRowFieldMatrix(org.apache.commons.math3.Field, org.apache.commons.math3.FieldElement[][], boolean):::ENTER
field has only one value
field.getClass().getName() == org.apache.commons.math3.fraction.BigFractionField.class
d.getClass().getName() == org.apache.commons.math3.fraction.BigFraction[][].class
d[] elements != null
copyArray == false
size(d[]) >= 2
===========================================================================
org.apache.commons.math3.linear.Array2DRowFieldMatrix.Array2DRowFieldMatrix(org.apache.commons.math3.Field, org.apache.commons.math3.FieldElement[][], boolean):::EXIT
d[] == orig(d[])
d[] elements != null
===========================================================================
org.apache.commons.math3.linear.Array2DRowFieldMatrix.Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][], boolean):::ENTER
d.getClass().getName() == org.apache.commons.math3.fraction.BigFraction[][].class
d[] elements != null
copyArray == false
===========================================================================
org.apache.commons.math3.linear.Array2DRowFieldMatrix.Array2DRowFieldMatrix(org.apache.commons.math3.FieldElement[][], boolean):::EXIT
d[] == orig(d[])
d[] elements != null
===========================================================================
org.apache.commons.math3.linear.Array2DRowFieldMatrix.copyOut():::ENTER
===========================================================================
org.apache.commons.math3.linear.Array2DRowFieldMatrix.copyOut():::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.field == orig(this.field)
this.field.getClass().getName() == orig(this.field.getClass().getName())
return.getClass().getName() == org.apache.commons.math3.fraction.BigFraction[][].class
return[] elements != null
===========================================================================
org.apache.commons.math3.linear.Array2DRowFieldMatrix.getColumnDimension():::ENTER
===========================================================================
org.apache.commons.math3.linear.Array2DRowFieldMatrix.getColumnDimension():::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.field == orig(this.field)
this.field.getClass().getName() == orig(this.field.getClass().getName())
===========================================================================
org.apache.commons.math3.linear.Array2DRowFieldMatrix.getData():::ENTER
===========================================================================
org.apache.commons.math3.linear.Array2DRowFieldMatrix.getData():::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.field == orig(this.field)
this.field.getClass().getName() == orig(this.field.getClass().getName())
return.getClass().getName() == org.apache.commons.math3.fraction.BigFraction[][].class
return[] elements != null
===========================================================================
org.apache.commons.math3.linear.Array2DRowFieldMatrix.getEntry(int, int):::ENTER
row >= 0
column >= 0
===========================================================================
org.apache.commons.math3.linear.Array2DRowFieldMatrix.getEntry(int, int):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.field == orig(this.field)
this.field.getClass().getName() == orig(this.field.getClass().getName())
return.getClass().getName() == org.apache.commons.math3.fraction.BigFraction.class
===========================================================================
org.apache.commons.math3.linear.Array2DRowFieldMatrix.getRowDimension():::ENTER
===========================================================================
org.apache.commons.math3.linear.Array2DRowFieldMatrix.getRowDimension():::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.field == orig(this.field)
this.field.getClass().getName() == orig(this.field.getClass().getName())
===========================================================================
org.apache.commons.math3.linear.Array2DRowFieldMatrix.walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor):::ENTER
visitor.getClass().getName() == org.apache.commons.math3.linear.MatrixUtils$BigFractionMatrixConverter.class
===========================================================================
org.apache.commons.math3.linear.Array2DRowFieldMatrix.walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.field == orig(this.field)
this.field.getClass().getName() == orig(this.field.getClass().getName())
return has only one value
return.getClass().getName() == org.apache.commons.math3.fraction.BigFraction.class
===========================================================================
org.apache.commons.math3.linear.Array2DRowRealMatrix:::CLASS
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == "{"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == "}"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == "{"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == "}"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == ","
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == ","
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == "{"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == "}"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == "{"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == "}"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == ","
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == ","
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math3.linear.Array2DRowRealMatrix:::OBJECT
this.data.getClass().getName() == double[][].class
this.data[] elements != null
size(this.data[]) >= 2
===========================================================================
org.apache.commons.math3.linear.Array2DRowRealMatrix.Array2DRowRealMatrix(double[][], boolean):::ENTER
d.getClass().getName() == double[][].class
d[] elements != null
size(d[]) >= 2
===========================================================================
org.apache.commons.math3.linear.Array2DRowRealMatrix.Array2DRowRealMatrix(double[][], boolean):::EXIT
d[] == orig(d[])
d[] elements != null
===========================================================================
org.apache.commons.math3.linear.Array2DRowRealMatrix.Array2DRowRealMatrix(int, int):::ENTER
===========================================================================
org.apache.commons.math3.linear.Array2DRowRealMatrix.Array2DRowRealMatrix(int, int):::EXIT
===========================================================================
org.apache.commons.math3.linear.Array2DRowRealMatrix.copyIn(double[][]):::ENTER
this.data == null
in.getClass().getName() == double[][].class
in[] elements != null
size(in[]) == 4
===========================================================================
org.apache.commons.math3.linear.Array2DRowRealMatrix.copyIn(double[][]):::EXIT
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
in[] == orig(in[])
in[] elements != null
size(this.data[]) == 4
===========================================================================
org.apache.commons.math3.linear.Array2DRowRealMatrix.copyOut():::ENTER
===========================================================================
org.apache.commons.math3.linear.Array2DRowRealMatrix.copyOut():::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
return.getClass().getName() == double[][].class
return[] elements != null
===========================================================================
org.apache.commons.math3.linear.Array2DRowRealMatrix.createMatrix(int, int):::ENTER
===========================================================================
org.apache.commons.math3.linear.Array2DRowRealMatrix.createMatrix(int, int):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
return.getClass().getName() == org.apache.commons.math3.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math3.linear.Array2DRowRealMatrix.getColumnDimension():::ENTER
===========================================================================
org.apache.commons.math3.linear.Array2DRowRealMatrix.getColumnDimension():::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
===========================================================================
org.apache.commons.math3.linear.Array2DRowRealMatrix.getData():::ENTER
===========================================================================
org.apache.commons.math3.linear.Array2DRowRealMatrix.getData():::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
return.getClass().getName() == double[][].class
return[] elements != null
===========================================================================
org.apache.commons.math3.linear.Array2DRowRealMatrix.getDataRef():::ENTER
===========================================================================
org.apache.commons.math3.linear.Array2DRowRealMatrix.getDataRef():::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
return.getClass().getName() == double[][].class
return[] elements != null
size(return[]) >= 2
===========================================================================
org.apache.commons.math3.linear.Array2DRowRealMatrix.getEntry(int, int):::ENTER
row >= 1
column >= 0
===========================================================================
org.apache.commons.math3.linear.Array2DRowRealMatrix.getEntry(int, int):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
===========================================================================
org.apache.commons.math3.linear.Array2DRowRealMatrix.getRowDimension():::ENTER
===========================================================================
org.apache.commons.math3.linear.Array2DRowRealMatrix.getRowDimension():::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
return >= 2
===========================================================================
org.apache.commons.math3.linear.Array2DRowRealMatrix.multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix):::ENTER
m.data.getClass().getName() == double[][].class
m.data[] elements != null
size(m.data[]) >= 2
===========================================================================
org.apache.commons.math3.linear.Array2DRowRealMatrix.multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
m.data == orig(m.data)
m.data.getClass().getName() == orig(m.data.getClass().getName())
m.data[] == orig(m.data[])
m.data.getClass().getName() == double[][].class
m.data[] elements != null
return.data.getClass().getName() == double[][].class
return.data[] elements != null
size(m.data[]) >= 2
size(return.data[]) >= 2
===========================================================================
org.apache.commons.math3.linear.Array2DRowRealMatrix.setEntry(int, int, double):::ENTER
row >= 0
column >= 0
===========================================================================
org.apache.commons.math3.linear.Array2DRowRealMatrix.setEntry(int, int, double):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
===========================================================================
org.apache.commons.math3.linear.Array2DRowRealMatrix.setSubMatrix(double[][], int, int):::ENTER
this.data == null
subMatrix.getClass().getName() == double[][].class
subMatrix[] elements != null
row == 0
column == 0
size(subMatrix[]) == 4
===========================================================================
org.apache.commons.math3.linear.Array2DRowRealMatrix.setSubMatrix(double[][], int, int):::EXIT
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
subMatrix[] == orig(subMatrix[])
subMatrix[] elements != null
size(this.data[]) == 4
===========================================================================
org.apache.commons.math3.linear.Array2DRowRealMatrix.walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor):::ENTER
===========================================================================
org.apache.commons.math3.linear.Array2DRowRealMatrix.walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
return >= 0.0
===========================================================================
org.apache.commons.math3.linear.Array2DRowRealMatrix.walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor, int, int, int, int):::ENTER
visitor.getClass().getName() == org.apache.commons.math3.linear.AbstractRealMatrix$4.class
startRow == 0
startColumn == 0
endColumn one of { 0, 1, 3 }
===========================================================================
org.apache.commons.math3.linear.Array2DRowRealMatrix.walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor, int, int, int, int):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
return == 0.0
===========================================================================
org.apache.commons.math3.linear.ArrayFieldVector:::CLASS
===========================================================================
org.apache.commons.math3.linear.ArrayFieldVector:::OBJECT
this.data.getClass().getName() == org.apache.commons.math3.fraction.BigFraction[].class
this.data[] elements != null
this.data[].getClass().getName() elements == org.apache.commons.math3.fraction.BigFraction.class
this.field has only one value
this.field.getClass().getName() == org.apache.commons.math3.fraction.BigFractionField.class
size(this.data[]) >= 2
===========================================================================
org.apache.commons.math3.linear.ArrayFieldVector.ArrayFieldVector(org.apache.commons.math3.FieldElement[], boolean):::ENTER
d.getClass().getName() == org.apache.commons.math3.fraction.BigFraction[].class
d[] elements != null
copyArray == false
===========================================================================
org.apache.commons.math3.linear.ArrayFieldVector.ArrayFieldVector(org.apache.commons.math3.FieldElement[], boolean):::EXIT
d[] == orig(d[])
d[] elements != null
===========================================================================
org.apache.commons.math3.linear.ArrayFieldVector.getDimension():::ENTER
this.data[] elements has only one value
===========================================================================
org.apache.commons.math3.linear.ArrayFieldVector.getDimension():::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.field == orig(this.field)
this.field.getClass().getName() == orig(this.field.getClass().getName())
this.data[] elements has only one value
===========================================================================
org.apache.commons.math3.linear.ArrayFieldVector.getEntry(int):::ENTER
this.data[] elements has only one value
index >= 0
===========================================================================
org.apache.commons.math3.linear.ArrayFieldVector.getEntry(int):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.field == orig(this.field)
this.field.getClass().getName() == orig(this.field.getClass().getName())
this.data[] elements has only one value
return has only one value
return.getClass().getName() == org.apache.commons.math3.fraction.BigFraction.class
===========================================================================
org.apache.commons.math3.linear.ArrayFieldVector.toArray():::ENTER
===========================================================================
org.apache.commons.math3.linear.ArrayFieldVector.toArray():::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.field == orig(this.field)
this.field.getClass().getName() == orig(this.field.getClass().getName())
return.getClass().getName() == org.apache.commons.math3.fraction.BigFraction[].class
===========================================================================
org.apache.commons.math3.linear.BlockRealMatrix:::CLASS
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == "{"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == "}"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == "{"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == "}"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == ","
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == ","
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == "{"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == "}"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == "{"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == "}"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == ","
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == ","
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math3.linear.BlockRealMatrix:::OBJECT
this.blocks.getClass().getName() == double[][].class
this.blocks[] elements != null
this.columns one of { 1, 2, 4 }
this.blockRows == 1
this.blockColumns == 1
size(this.blocks[]) == 1
===========================================================================
org.apache.commons.math3.linear.BlockRealMatrix.BlockRealMatrix(int, int, double[][], boolean):::ENTER
columns one of { 1, 2, 4 }
blockData.getClass().getName() == double[][].class
blockData[] elements != null
copyArray == false
size(blockData[]) == 1
===========================================================================
org.apache.commons.math3.linear.BlockRealMatrix.BlockRealMatrix(int, int, double[][], boolean):::EXIT
blockData[] == orig(blockData[])
blockData[] elements != null
===========================================================================
org.apache.commons.math3.linear.BlockRealMatrix.blockHeight(int):::ENTER
blockRow == 0
===========================================================================
org.apache.commons.math3.linear.BlockRealMatrix.blockHeight(int):::EXIT
this.blocks == orig(this.blocks)
this.blocks.getClass().getName() == orig(this.blocks.getClass().getName())
this.blocks[] == orig(this.blocks[])
this.rows == orig(this.rows)
this.columns == orig(this.columns)
this.blockRows == orig(this.blockRows)
this.blockColumns == orig(this.blockColumns)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
===========================================================================
org.apache.commons.math3.linear.BlockRealMatrix.blockWidth(int):::ENTER
blockColumn == 0
===========================================================================
org.apache.commons.math3.linear.BlockRealMatrix.blockWidth(int):::EXIT
this.blocks == orig(this.blocks)
this.blocks.getClass().getName() == orig(this.blocks.getClass().getName())
this.blocks[] == orig(this.blocks[])
this.rows == orig(this.rows)
this.columns == orig(this.columns)
this.blockRows == orig(this.blockRows)
this.blockColumns == orig(this.blockColumns)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
return one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math3.linear.BlockRealMatrix.createBlocksLayout(int, int):::ENTER
columns one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math3.linear.BlockRealMatrix.createBlocksLayout(int, int):::EXIT
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
return.getClass().getName() == double[][].class
return[] elements != null
size(return[]) == 1
===========================================================================
org.apache.commons.math3.linear.BlockRealMatrix.getColumnDimension():::ENTER
===========================================================================
org.apache.commons.math3.linear.BlockRealMatrix.getColumnDimension():::EXIT
this.blocks == orig(this.blocks)
this.blocks.getClass().getName() == orig(this.blocks.getClass().getName())
this.blocks[] == orig(this.blocks[])
this.rows == orig(this.rows)
this.columns == orig(this.columns)
this.blockRows == orig(this.blockRows)
this.blockColumns == orig(this.blockColumns)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
return one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math3.linear.BlockRealMatrix.getData():::ENTER
===========================================================================
org.apache.commons.math3.linear.BlockRealMatrix.getData():::EXIT
this.blocks == orig(this.blocks)
this.blocks.getClass().getName() == orig(this.blocks.getClass().getName())
this.blocks[] == orig(this.blocks[])
this.rows == orig(this.rows)
this.columns == orig(this.columns)
this.blockRows == orig(this.blockRows)
this.blockColumns == orig(this.blockColumns)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
return.getClass().getName() == double[][].class
return[] elements != null
===========================================================================
org.apache.commons.math3.linear.BlockRealMatrix.getRowDimension():::ENTER
===========================================================================
org.apache.commons.math3.linear.BlockRealMatrix.getRowDimension():::EXIT
this.blocks == orig(this.blocks)
this.blocks.getClass().getName() == orig(this.blocks.getClass().getName())
this.blocks[] == orig(this.blocks[])
this.rows == orig(this.rows)
this.columns == orig(this.columns)
this.blockRows == orig(this.blockRows)
this.blockColumns == orig(this.blockColumns)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
===========================================================================
org.apache.commons.math3.linear.DefaultFieldMatrixPreservingVisitor:::OBJECT
this.zero has only one value
this.zero.getClass().getName() == org.apache.commons.math3.fraction.BigFraction.class
===========================================================================
org.apache.commons.math3.linear.DefaultFieldMatrixPreservingVisitor.DefaultFieldMatrixPreservingVisitor(org.apache.commons.math3.FieldElement):::ENTER
zero has only one value
zero.getClass().getName() == org.apache.commons.math3.fraction.BigFraction.class
===========================================================================
org.apache.commons.math3.linear.DefaultFieldMatrixPreservingVisitor.DefaultFieldMatrixPreservingVisitor(org.apache.commons.math3.FieldElement):::EXIT
===========================================================================
org.apache.commons.math3.linear.DefaultFieldMatrixPreservingVisitor.end():::ENTER
===========================================================================
org.apache.commons.math3.linear.DefaultFieldMatrixPreservingVisitor.end():::EXIT
this.zero == orig(this.zero)
this.zero.getClass().getName() == orig(this.zero.getClass().getName())
return has only one value
return.getClass().getName() == org.apache.commons.math3.fraction.BigFraction.class
===========================================================================
org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor:::OBJECT
===========================================================================
org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor.DefaultRealMatrixPreservingVisitor():::EXIT
===========================================================================
org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor.end():::ENTER
===========================================================================
org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor.end():::EXIT
return == 0.0
===========================================================================
org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor.start(int, int, int, int, int, int):::ENTER
startRow == 0
startColumn == 0
===========================================================================
org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor.start(int, int, int, int, int, int):::EXIT
===========================================================================
org.apache.commons.math3.linear.FieldLUDecomposition$Solver:::OBJECT
this.field has only one value
this.field.getClass().getName() == org.apache.commons.math3.fraction.BigFractionField.class
this.lu.getClass().getName() == org.apache.commons.math3.fraction.BigFraction[][].class
this.lu[] elements != null
this.pivot[] elements >= 0
this.pivot[] sorted by <
this.singular == false
size(this.lu[]) >= 2
size(this.pivot[]) >= 2
===========================================================================
org.apache.commons.math3.linear.FieldLUDecomposition$Solver.Solver(org.apache.commons.math3.Field, org.apache.commons.math3.FieldElement[][], int[], boolean):::ENTER
field has only one value
field.getClass().getName() == org.apache.commons.math3.fraction.BigFractionField.class
lu.getClass().getName() == org.apache.commons.math3.fraction.BigFraction[][].class
pivot[] elements >= 0
singular == false
===========================================================================
org.apache.commons.math3.linear.FieldLUDecomposition$Solver.Solver(org.apache.commons.math3.Field, org.apache.commons.math3.FieldElement[][], int[], boolean):::EXIT
lu[] == orig(lu[])
pivot[] == orig(pivot[])
pivot[] elements >= 0
===========================================================================
org.apache.commons.math3.linear.FieldLUDecomposition$Solver.solve(org.apache.commons.math3.linear.ArrayFieldVector):::ENTER
b.data.getClass().getName() == org.apache.commons.math3.fraction.BigFraction[].class
b.data[] elements has only one value
b.data[].getClass().getName() elements == org.apache.commons.math3.fraction.BigFraction.class
b.field has only one value
b.field.getClass().getName() == org.apache.commons.math3.fraction.BigFractionField.class
===========================================================================
org.apache.commons.math3.linear.FieldLUDecomposition$Solver.solve(org.apache.commons.math3.linear.ArrayFieldVector):::EXIT
this.field == orig(this.field)
this.field.getClass().getName() == orig(this.field.getClass().getName())
this.lu == orig(this.lu)
this.lu.getClass().getName() == orig(this.lu.getClass().getName())
this.lu[] == orig(this.lu[])
this.pivot == orig(this.pivot)
this.pivot[] == orig(this.pivot[])
this.singular == orig(this.singular)
b.data == orig(b.data)
b.data.getClass().getName() == orig(b.data.getClass().getName())
b.data[] == orig(b.data[])
b.field == orig(b.field)
b.field.getClass().getName() == orig(b.field.getClass().getName())
b.data.getClass().getName() == org.apache.commons.math3.fraction.BigFraction[].class
b.data[] elements has only one value
b.data[].getClass().getName() elements == org.apache.commons.math3.fraction.BigFraction.class
b.field has only one value
b.field.getClass().getName() == org.apache.commons.math3.fraction.BigFractionField.class
return.data.getClass().getName() == org.apache.commons.math3.fraction.BigFraction[].class
return.data[].getClass().getName() elements == org.apache.commons.math3.fraction.BigFraction.class
return.field has only one value
return.field.getClass().getName() == org.apache.commons.math3.fraction.BigFractionField.class
===========================================================================
org.apache.commons.math3.linear.FieldLUDecomposition$Solver.solve(org.apache.commons.math3.linear.FieldMatrix):::ENTER
b.getClass().getName() == org.apache.commons.math3.linear.Array2DRowFieldMatrix.class
===========================================================================
org.apache.commons.math3.linear.FieldLUDecomposition$Solver.solve(org.apache.commons.math3.linear.FieldMatrix):::EXIT
this.field == orig(this.field)
this.field.getClass().getName() == orig(this.field.getClass().getName())
this.lu == orig(this.lu)
this.lu.getClass().getName() == orig(this.lu.getClass().getName())
this.lu[] == orig(this.lu[])
this.pivot == orig(this.pivot)
this.pivot[] == orig(this.pivot[])
this.singular == orig(this.singular)
return.getClass().getName() == org.apache.commons.math3.linear.Array2DRowFieldMatrix.class
===========================================================================
org.apache.commons.math3.linear.FieldLUDecomposition$Solver.solve(org.apache.commons.math3.linear.FieldVector):::ENTER
b.getClass().getName() == org.apache.commons.math3.linear.ArrayFieldVector.class
===========================================================================
org.apache.commons.math3.linear.FieldLUDecomposition$Solver.solve(org.apache.commons.math3.linear.FieldVector):::EXIT298
===========================================================================
org.apache.commons.math3.linear.FieldLUDecomposition$Solver.solve(org.apache.commons.math3.linear.FieldVector):::EXIT
this.field == orig(this.field)
this.field.getClass().getName() == orig(this.field.getClass().getName())
this.lu == orig(this.lu)
this.lu.getClass().getName() == orig(this.lu.getClass().getName())
this.lu[] == orig(this.lu[])
this.pivot == orig(this.pivot)
this.pivot[] == orig(this.pivot[])
this.singular == orig(this.singular)
return.getClass().getName() == org.apache.commons.math3.linear.ArrayFieldVector.class
===========================================================================
org.apache.commons.math3.linear.FieldLUDecomposition:::OBJECT
this.field has only one value
this.field.getClass().getName() == org.apache.commons.math3.fraction.BigFractionField.class
this.lu.getClass().getName() == org.apache.commons.math3.fraction.BigFraction[][].class
this.lu[] elements != null
this.pivot[] elements >= 0
this.pivot[] sorted by <
this.even == true
this.singular == false
this.cachedL == null
this.cachedU == null
this.cachedP == null
size(this.lu[]) >= 2
size(this.pivot[]) >= 2
===========================================================================
org.apache.commons.math3.linear.FieldLUDecomposition.FieldLUDecomposition(org.apache.commons.math3.linear.FieldMatrix):::ENTER
matrix.getClass().getName() == org.apache.commons.math3.linear.Array2DRowFieldMatrix.class
===========================================================================
org.apache.commons.math3.linear.FieldLUDecomposition.FieldLUDecomposition(org.apache.commons.math3.linear.FieldMatrix):::EXIT165
===========================================================================
org.apache.commons.math3.linear.FieldLUDecomposition.FieldLUDecomposition(org.apache.commons.math3.linear.FieldMatrix):::EXIT
===========================================================================
org.apache.commons.math3.linear.FieldLUDecomposition.getSolver():::ENTER
===========================================================================
org.apache.commons.math3.linear.FieldLUDecomposition.getSolver():::EXIT
this.field == orig(this.field)
this.field.getClass().getName() == orig(this.field.getClass().getName())
this.lu == orig(this.lu)
this.lu.getClass().getName() == orig(this.lu.getClass().getName())
this.lu[] == orig(this.lu[])
this.pivot == orig(this.pivot)
this.pivot[] == orig(this.pivot[])
this.even == orig(this.even)
this.singular == orig(this.singular)
this.cachedL == orig(this.cachedL)
this.cachedU == orig(this.cachedU)
this.cachedP == orig(this.cachedP)
return.getClass().getName() == org.apache.commons.math3.linear.FieldLUDecomposition$Solver.class
===========================================================================
org.apache.commons.math3.linear.MatrixUtils$BigFractionMatrixConverter:::OBJECT
this.data.getClass().getName() == double[][].class
this.data[] elements != null
this.zero has only one value
this.zero.getClass().getName() == org.apache.commons.math3.fraction.BigFraction.class
===========================================================================
org.apache.commons.math3.linear.MatrixUtils$BigFractionMatrixConverter.BigFractionMatrixConverter():::EXIT
this.data == null
===========================================================================
org.apache.commons.math3.linear.MatrixUtils$BigFractionMatrixConverter.getConvertedMatrix():::ENTER
===========================================================================
org.apache.commons.math3.linear.MatrixUtils$BigFractionMatrixConverter.getConvertedMatrix():::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.zero == orig(this.zero)
this.zero.getClass().getName() == orig(this.zero.getClass().getName())
return.data.getClass().getName() == double[][].class
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == "{"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == "}"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == "{"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == "}"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == ","
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == ","
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == "{"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == "}"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == "{"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == "}"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == ","
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == ","
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math3.linear.MatrixUtils$BigFractionMatrixConverter.start(int, int, int, int, int, int):::ENTER
this.data == null
startRow == 0
startColumn == 0
===========================================================================
org.apache.commons.math3.linear.MatrixUtils$BigFractionMatrixConverter.start(int, int, int, int, int, int):::EXIT
this.zero == orig(this.zero)
this.zero.getClass().getName() == orig(this.zero.getClass().getName())
===========================================================================
org.apache.commons.math3.linear.MatrixUtils$BigFractionMatrixConverter.visit(int, int, org.apache.commons.math3.fraction.BigFraction):::ENTER
row >= 0
column >= 0
org.apache.commons.math3.fraction.BigFraction.TWO has only one value
org.apache.commons.math3.fraction.BigFraction.ONE has only one value
org.apache.commons.math3.fraction.BigFraction.ZERO has only one value
org.apache.commons.math3.fraction.BigFraction.MINUS_ONE has only one value
org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS has only one value
org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH has only one value
org.apache.commons.math3.fraction.BigFraction.ONE_HALF has only one value
org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER has only one value
org.apache.commons.math3.fraction.BigFraction.ONE_THIRD has only one value
org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS has only one value
org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS has only one value
org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS has only one value
org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS has only one value
org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS has only one value
org.apache.commons.math3.fraction.BigFraction.ONE_HUNDRED has only one value
org.apache.commons.math3.fraction.BigFraction.TWO.numerator has only one value
org.apache.commons.math3.fraction.BigFraction.TWO.denominator has only one value
org.apache.commons.math3.fraction.BigFraction.ONE.numerator has only one value
org.apache.commons.math3.fraction.BigFraction.ONE.denominator has only one value
org.apache.commons.math3.fraction.BigFraction.ZERO.numerator has only one value
org.apache.commons.math3.fraction.BigFraction.ZERO.denominator has only one value
org.apache.commons.math3.fraction.BigFraction.MINUS_ONE.numerator has only one value
org.apache.commons.math3.fraction.BigFraction.MINUS_ONE.denominator has only one value
org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS.numerator has only one value
org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS.denominator has only one value
org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH.numerator has only one value
org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH.denominator has only one value
org.apache.commons.math3.fraction.BigFraction.ONE_HALF.numerator has only one value
org.apache.commons.math3.fraction.BigFraction.ONE_HALF.denominator has only one value
org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER.numerator has only one value
org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER.denominator has only one value
org.apache.commons.math3.fraction.BigFraction.ONE_THIRD.numerator has only one value
org.apache.commons.math3.fraction.BigFraction.ONE_THIRD.denominator has only one value
org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS.numerator has only one value
org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS.denominator has only one value
org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS.numerator has only one value
org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS.denominator has only one value
org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS.numerator has only one value
org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS.denominator has only one value
org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS.numerator has only one value
org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS.denominator has only one value
org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS.numerator has only one value
org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS.denominator has only one value
===========================================================================
org.apache.commons.math3.linear.MatrixUtils$BigFractionMatrixConverter.visit(int, int, org.apache.commons.math3.fraction.BigFraction):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.zero == orig(this.zero)
this.zero.getClass().getName() == orig(this.zero.getClass().getName())
org.apache.commons.math3.fraction.BigFraction.TWO == orig(org.apache.commons.math3.fraction.BigFraction.TWO)
org.apache.commons.math3.fraction.BigFraction.ONE == orig(org.apache.commons.math3.fraction.BigFraction.ONE)
org.apache.commons.math3.fraction.BigFraction.ZERO == orig(org.apache.commons.math3.fraction.BigFraction.ZERO)
org.apache.commons.math3.fraction.BigFraction.MINUS_ONE == orig(org.apache.commons.math3.fraction.BigFraction.MINUS_ONE)
org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS == orig(org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS)
org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH == orig(org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH)
org.apache.commons.math3.fraction.BigFraction.ONE_HALF == orig(org.apache.commons.math3.fraction.BigFraction.ONE_HALF)
org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER == orig(org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER)
org.apache.commons.math3.fraction.BigFraction.ONE_THIRD == orig(org.apache.commons.math3.fraction.BigFraction.ONE_THIRD)
org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS == orig(org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS)
org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS == orig(org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS)
org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS == orig(org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS)
org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS == orig(org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS)
org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS == orig(org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS)
org.apache.commons.math3.fraction.BigFraction.ONE_HUNDRED == orig(org.apache.commons.math3.fraction.BigFraction.ONE_HUNDRED)
org.apache.commons.math3.fraction.BigFraction.TWO.numerator == orig(org.apache.commons.math3.fraction.BigFraction.TWO.numerator)
org.apache.commons.math3.fraction.BigFraction.TWO.denominator == orig(org.apache.commons.math3.fraction.BigFraction.TWO.denominator)
org.apache.commons.math3.fraction.BigFraction.ONE.numerator == orig(org.apache.commons.math3.fraction.BigFraction.ONE.numerator)
org.apache.commons.math3.fraction.BigFraction.ONE.denominator == orig(org.apache.commons.math3.fraction.BigFraction.ONE.denominator)
org.apache.commons.math3.fraction.BigFraction.ZERO.numerator == orig(org.apache.commons.math3.fraction.BigFraction.ZERO.numerator)
org.apache.commons.math3.fraction.BigFraction.ZERO.denominator == orig(org.apache.commons.math3.fraction.BigFraction.ZERO.denominator)
org.apache.commons.math3.fraction.BigFraction.MINUS_ONE.numerator == orig(org.apache.commons.math3.fraction.BigFraction.MINUS_ONE.numerator)
org.apache.commons.math3.fraction.BigFraction.MINUS_ONE.denominator == orig(org.apache.commons.math3.fraction.BigFraction.MINUS_ONE.denominator)
org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS.numerator == orig(org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS.numerator)
org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS.denominator == orig(org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS.denominator)
org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH.numerator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH.numerator)
org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH.denominator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH.denominator)
org.apache.commons.math3.fraction.BigFraction.ONE_HALF.numerator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_HALF.numerator)
org.apache.commons.math3.fraction.BigFraction.ONE_HALF.denominator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_HALF.denominator)
org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER.numerator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER.numerator)
org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER.denominator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER.denominator)
org.apache.commons.math3.fraction.BigFraction.ONE_THIRD.numerator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_THIRD.numerator)
org.apache.commons.math3.fraction.BigFraction.ONE_THIRD.denominator == orig(org.apache.commons.math3.fraction.BigFraction.ONE_THIRD.denominator)
org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS.numerator == orig(org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS.numerator)
org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS.denominator == orig(org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS.denominator)
org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS.numerator == orig(org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS.numerator)
org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS.denominator == orig(org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS.denominator)
org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS.numerator == orig(org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS.numerator)
org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS.denominator == orig(org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS.denominator)
org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS.numerator == orig(org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS.numerator)
org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS.denominator == orig(org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS.denominator)
org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS.numerator == orig(org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS.numerator)
org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS.denominator == orig(org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS.denominator)
value.numerator == orig(value.numerator)
value.denominator == orig(value.denominator)
org.apache.commons.math3.fraction.BigFraction.TWO has only one value
org.apache.commons.math3.fraction.BigFraction.ONE has only one value
org.apache.commons.math3.fraction.BigFraction.ZERO has only one value
org.apache.commons.math3.fraction.BigFraction.MINUS_ONE has only one value
org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS has only one value
org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH has only one value
org.apache.commons.math3.fraction.BigFraction.ONE_HALF has only one value
org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER has only one value
org.apache.commons.math3.fraction.BigFraction.ONE_THIRD has only one value
org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS has only one value
org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS has only one value
org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS has only one value
org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS has only one value
org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS has only one value
org.apache.commons.math3.fraction.BigFraction.ONE_HUNDRED has only one value
org.apache.commons.math3.fraction.BigFraction.TWO.numerator has only one value
org.apache.commons.math3.fraction.BigFraction.TWO.denominator has only one value
org.apache.commons.math3.fraction.BigFraction.ONE.numerator has only one value
org.apache.commons.math3.fraction.BigFraction.ONE.denominator has only one value
org.apache.commons.math3.fraction.BigFraction.ZERO.numerator has only one value
org.apache.commons.math3.fraction.BigFraction.ZERO.denominator has only one value
org.apache.commons.math3.fraction.BigFraction.MINUS_ONE.numerator has only one value
org.apache.commons.math3.fraction.BigFraction.MINUS_ONE.denominator has only one value
org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS.numerator has only one value
org.apache.commons.math3.fraction.BigFraction.FOUR_FIFTHS.denominator has only one value
org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH.numerator has only one value
org.apache.commons.math3.fraction.BigFraction.ONE_FIFTH.denominator has only one value
org.apache.commons.math3.fraction.BigFraction.ONE_HALF.numerator has only one value
org.apache.commons.math3.fraction.BigFraction.ONE_HALF.denominator has only one value
org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER.numerator has only one value
org.apache.commons.math3.fraction.BigFraction.ONE_QUARTER.denominator has only one value
org.apache.commons.math3.fraction.BigFraction.ONE_THIRD.numerator has only one value
org.apache.commons.math3.fraction.BigFraction.ONE_THIRD.denominator has only one value
org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS.numerator has only one value
org.apache.commons.math3.fraction.BigFraction.THREE_FIFTHS.denominator has only one value
org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS.numerator has only one value
org.apache.commons.math3.fraction.BigFraction.THREE_QUARTERS.denominator has only one value
org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS.numerator has only one value
org.apache.commons.math3.fraction.BigFraction.TWO_FIFTHS.denominator has only one value
org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS.numerator has only one value
org.apache.commons.math3.fraction.BigFraction.TWO_QUARTERS.denominator has only one value
org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS.numerator has only one value
org.apache.commons.math3.fraction.BigFraction.TWO_THIRDS.denominator has only one value
===========================================================================
org.apache.commons.math3.linear.MatrixUtils:::CLASS
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == "{"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == "}"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == "{"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == "}"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == ","
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == ","
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.prefix has only one value
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.prefix.toString == "{"
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.suffix has only one value
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.suffix.toString == "}"
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowPrefix has only one value
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowPrefix.toString == "{"
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSuffix has only one value
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSuffix.toString == "}"
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSeparator has only one value
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSeparator.toString == ","
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.columnSeparator has only one value
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.columnSeparator.toString == ","
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.format has only one value
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.format.getClass().getName() == java.text.DecimalFormat.class
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT has only one value
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.prefix has only one value
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.prefix.toString == "["
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.suffix has only one value
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.suffix.toString == "]"
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowPrefix has only one value
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowPrefix.toString == ""
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSuffix has only one value
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSuffix.toString == ""
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSeparator has only one value
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSeparator.toString == "; "
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.columnSeparator has only one value
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.columnSeparator.toString == ", "
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.format has only one value
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math3.linear.MatrixUtils.bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix):::ENTER
m.getClass().getName() == org.apache.commons.math3.linear.Array2DRowFieldMatrix.class
===========================================================================
org.apache.commons.math3.linear.MatrixUtils.bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix):::EXIT
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.format.getClass().getName())
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.prefix == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.prefix)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.prefix.toString)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.suffix == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.suffix)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.suffix.toString)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowPrefix)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSuffix)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSeparator)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.columnSeparator)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.format == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.format)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.format.getClass().getName())
return.data.getClass().getName() == double[][].class
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == "{"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == "}"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == "{"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == "}"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == ","
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == ","
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math3.linear.MatrixUtils.checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix, int):::ENTER
m.getClass().getName() == org.apache.commons.math3.linear.Array2DRowRealMatrix.class
column >= 0
===========================================================================
org.apache.commons.math3.linear.MatrixUtils.checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix, int):::EXIT
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.format.getClass().getName())
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.prefix == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.prefix)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.prefix.toString)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.suffix == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.suffix)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.suffix.toString)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowPrefix)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSuffix)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSeparator)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.columnSeparator)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.format == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.format)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.format.getClass().getName())
===========================================================================
org.apache.commons.math3.linear.MatrixUtils.checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix, int, int):::ENTER
m.getClass().getName() == org.apache.commons.math3.linear.Array2DRowRealMatrix.class
row >= 0
column >= 0
===========================================================================
org.apache.commons.math3.linear.MatrixUtils.checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix, int, int):::EXIT
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.format.getClass().getName())
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.prefix == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.prefix)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.prefix.toString)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.suffix == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.suffix)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.suffix.toString)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowPrefix)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSuffix)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSeparator)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.columnSeparator)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.format == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.format)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.format.getClass().getName())
===========================================================================
org.apache.commons.math3.linear.MatrixUtils.checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix, org.apache.commons.math3.linear.AnyMatrix):::ENTER
left.getClass().getName() == org.apache.commons.math3.linear.Array2DRowRealMatrix.class
right.getClass().getName() == org.apache.commons.math3.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math3.linear.MatrixUtils.checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix, org.apache.commons.math3.linear.AnyMatrix):::EXIT
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.format.getClass().getName())
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.prefix == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.prefix)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.prefix.toString)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.suffix == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.suffix)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.suffix.toString)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowPrefix)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSuffix)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSeparator)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.columnSeparator)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.format == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.format)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.format.getClass().getName())
===========================================================================
org.apache.commons.math3.linear.MatrixUtils.checkRowIndex(org.apache.commons.math3.linear.AnyMatrix, int):::ENTER
m.getClass().getName() == org.apache.commons.math3.linear.Array2DRowRealMatrix.class
row >= 0
===========================================================================
org.apache.commons.math3.linear.MatrixUtils.checkRowIndex(org.apache.commons.math3.linear.AnyMatrix, int):::EXIT
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.format.getClass().getName())
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.prefix == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.prefix)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.prefix.toString)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.suffix == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.suffix)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.suffix.toString)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowPrefix)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSuffix)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSeparator)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.columnSeparator)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.format == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.format)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.format.getClass().getName())
===========================================================================
org.apache.commons.math3.linear.MatrixUtils.checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix, int, int, int, int):::ENTER
m.getClass().getName() == org.apache.commons.math3.linear.Array2DRowRealMatrix.class
startRow == 0
startColumn == 0
endColumn one of { 0, 1, 3 }
===========================================================================
org.apache.commons.math3.linear.MatrixUtils.checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix, int, int, int, int):::EXIT
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.format.getClass().getName())
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.prefix == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.prefix)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.prefix.toString)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.suffix == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.suffix)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.suffix.toString)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowPrefix)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSuffix)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSeparator)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.columnSeparator)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.format == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.format)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.format.getClass().getName())
===========================================================================
org.apache.commons.math3.linear.QRDecomposition$Solver:::OBJECT
this.qrt.getClass().getName() == double[][].class
this.qrt[] elements != null
this.threshold == 0.0
===========================================================================
org.apache.commons.math3.linear.QRDecomposition$Solver.Solver(double[][], double[], double):::ENTER
qrt.getClass().getName() == double[][].class
qrt[] elements != null
threshold == 0.0
===========================================================================
org.apache.commons.math3.linear.QRDecomposition$Solver.Solver(double[][], double[], double):::EXIT
qrt[] == orig(qrt[])
rDiag[] == orig(rDiag[])
qrt[] elements != null
===========================================================================
org.apache.commons.math3.linear.QRDecomposition$Solver.isNonSingular():::ENTER
===========================================================================
org.apache.commons.math3.linear.QRDecomposition$Solver.isNonSingular():::EXIT334
===========================================================================
org.apache.commons.math3.linear.QRDecomposition$Solver.isNonSingular():::EXIT334;condition="return == true"
===========================================================================
org.apache.commons.math3.linear.QRDecomposition$Solver.isNonSingular():::EXIT
this.qrt == orig(this.qrt)
this.qrt.getClass().getName() == orig(this.qrt.getClass().getName())
this.qrt[] == orig(this.qrt[])
this.rDiag == orig(this.rDiag)
this.rDiag[] == orig(this.rDiag[])
this.threshold == orig(this.threshold)
return == true
===========================================================================
org.apache.commons.math3.linear.QRDecomposition$Solver.isNonSingular():::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math3.linear.QRDecomposition$Solver.solve(org.apache.commons.math3.linear.RealMatrix):::ENTER
b.getClass().getName() == org.apache.commons.math3.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math3.linear.QRDecomposition$Solver.solve(org.apache.commons.math3.linear.RealMatrix):::EXIT
this.qrt == orig(this.qrt)
this.qrt.getClass().getName() == orig(this.qrt.getClass().getName())
this.qrt[] == orig(this.qrt[])
this.rDiag == orig(this.rDiag)
this.rDiag[] == orig(this.rDiag[])
this.threshold == orig(this.threshold)
return.getClass().getName() == org.apache.commons.math3.linear.BlockRealMatrix.class
===========================================================================
org.apache.commons.math3.linear.QRDecomposition:::OBJECT
this.qrt.getClass().getName() == double[][].class
this.qrt[] elements != null
this.cachedQ == null
this.cachedQT == null
this.cachedR == null
this.cachedH == null
this.threshold == 0.0
===========================================================================
org.apache.commons.math3.linear.QRDecomposition.QRDecomposition(org.apache.commons.math3.linear.RealMatrix):::ENTER
matrix.getClass().getName() == org.apache.commons.math3.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math3.linear.QRDecomposition.QRDecomposition(org.apache.commons.math3.linear.RealMatrix):::EXIT
===========================================================================
org.apache.commons.math3.linear.QRDecomposition.QRDecomposition(org.apache.commons.math3.linear.RealMatrix, double):::ENTER
matrix.getClass().getName() == org.apache.commons.math3.linear.Array2DRowRealMatrix.class
threshold == 0.0
===========================================================================
org.apache.commons.math3.linear.QRDecomposition.QRDecomposition(org.apache.commons.math3.linear.RealMatrix, double):::EXIT
===========================================================================
org.apache.commons.math3.linear.QRDecomposition.decompose(double[][]):::ENTER
this.rDiag[] elements == 0.0
matrix.getClass().getName() == double[][].class
matrix[] elements != null
===========================================================================
org.apache.commons.math3.linear.QRDecomposition.decompose(double[][]):::EXIT
this.qrt == orig(this.qrt)
this.qrt.getClass().getName() == orig(this.qrt.getClass().getName())
this.qrt[] == orig(this.qrt[])
this.rDiag == orig(this.rDiag)
this.cachedQ == orig(this.cachedQ)
this.cachedQT == orig(this.cachedQT)
this.cachedR == orig(this.cachedR)
this.cachedH == orig(this.cachedH)
this.threshold == orig(this.threshold)
matrix[] == orig(matrix[])
size(this.rDiag[]) == orig(size(this.rDiag[]))
matrix[] elements != null
this.rDiag[] < orig(this.rDiag[]) (lexically)
this.rDiag[] <= orig(this.rDiag[]) (lexically)
===========================================================================
org.apache.commons.math3.linear.QRDecomposition.getSolver():::ENTER
===========================================================================
org.apache.commons.math3.linear.QRDecomposition.getSolver():::EXIT
this.qrt == orig(this.qrt)
this.qrt.getClass().getName() == orig(this.qrt.getClass().getName())
this.qrt[] == orig(this.qrt[])
this.rDiag == orig(this.rDiag)
this.rDiag[] == orig(this.rDiag[])
this.cachedQ == orig(this.cachedQ)
this.cachedQT == orig(this.cachedQT)
this.cachedR == orig(this.cachedR)
this.cachedH == orig(this.cachedH)
this.threshold == orig(this.threshold)
return.getClass().getName() == org.apache.commons.math3.linear.QRDecomposition$Solver.class
===========================================================================
org.apache.commons.math3.linear.QRDecomposition.performHouseholderReflection(int, double[][]):::ENTER
minor >= 0
matrix.getClass().getName() == double[][].class
matrix[] elements != null
===========================================================================
org.apache.commons.math3.linear.QRDecomposition.performHouseholderReflection(int, double[][]):::EXIT
this.qrt == orig(this.qrt)
this.qrt.getClass().getName() == orig(this.qrt.getClass().getName())
this.qrt[] == orig(this.qrt[])
this.rDiag == orig(this.rDiag)
this.cachedQ == orig(this.cachedQ)
this.cachedQT == orig(this.cachedQT)
this.cachedR == orig(this.cachedR)
this.cachedH == orig(this.cachedH)
this.threshold == orig(this.threshold)
matrix[] == orig(matrix[])
size(this.rDiag[]) == orig(size(this.rDiag[]))
matrix[] elements != null
===========================================================================
org.apache.commons.math3.linear.RealLinearOperator:::OBJECT
===========================================================================
org.apache.commons.math3.linear.RealLinearOperator.RealLinearOperator():::EXIT
===========================================================================
org.apache.commons.math3.linear.RealMatrixFormat:::CLASS
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == "{"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == "}"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == "{"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == "}"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == ","
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == ","
===========================================================================
org.apache.commons.math3.linear.RealMatrixFormat:::OBJECT
this.prefix.toString one of { "[", "{" }
this.suffix.toString one of { "]", "}" }
this.rowPrefix.toString one of { "", "{" }
this.rowSuffix.toString one of { "", "}" }
this.rowSeparator.toString one of { ",", "; " }
this.columnSeparator.toString one of { ",", ", " }
this.format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math3.linear.RealMatrixFormat.RealMatrixFormat(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String):::ENTER
prefix has only one value
prefix.toString == "["
suffix has only one value
suffix.toString == "]"
rowPrefix has only one value
rowPrefix.toString == ""
rowSuffix has only one value
rowSuffix.toString == ""
rowSeparator has only one value
rowSeparator.toString == "; "
columnSeparator has only one value
columnSeparator.toString == ", "
===========================================================================
org.apache.commons.math3.linear.RealMatrixFormat.RealMatrixFormat(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String):::EXIT
prefix.toString == orig(prefix.toString)
suffix.toString == orig(suffix.toString)
rowPrefix.toString == orig(rowPrefix.toString)
rowSuffix.toString == orig(rowSuffix.toString)
rowSeparator.toString == orig(rowSeparator.toString)
columnSeparator.toString == orig(columnSeparator.toString)
this.prefix has only one value
this.prefix.toString == "["
this.suffix has only one value
this.suffix.toString == "]"
this.rowPrefix has only one value
this.rowPrefix.toString == ""
this.rowSuffix has only one value
this.rowSuffix.toString == ""
this.rowSeparator has only one value
this.rowSeparator.toString == "; "
this.columnSeparator has only one value
this.columnSeparator.toString == ", "
this.format has only one value
prefix.toString == "["
suffix.toString == "]"
rowPrefix.toString == ""
rowSuffix.toString == ""
rowSeparator.toString == "; "
columnSeparator.toString == ", "
===========================================================================
org.apache.commons.math3.linear.RealMatrixFormat.RealMatrixFormat(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.text.NumberFormat):::ENTER
prefix.toString one of { "[", "{" }
suffix.toString one of { "]", "}" }
rowPrefix.toString one of { "", "{" }
rowSuffix.toString one of { "", "}" }
rowSeparator.toString one of { ",", "; " }
columnSeparator.toString one of { ",", ", " }
format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math3.linear.RealMatrixFormat.RealMatrixFormat(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.text.NumberFormat):::EXIT
prefix.toString == orig(prefix.toString)
suffix.toString == orig(suffix.toString)
rowPrefix.toString == orig(rowPrefix.toString)
rowSuffix.toString == orig(rowSuffix.toString)
rowSeparator.toString == orig(rowSeparator.toString)
columnSeparator.toString == orig(columnSeparator.toString)
prefix.toString one of { "[", "{" }
suffix.toString one of { "]", "}" }
rowPrefix.toString one of { "", "{" }
rowSuffix.toString one of { "", "}" }
rowSeparator.toString one of { ",", "; " }
columnSeparator.toString one of { ",", ", " }
===========================================================================
org.apache.commons.math3.linear.RealMatrixFormat.RealMatrixFormat(java.text.NumberFormat):::ENTER
format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math3.linear.RealMatrixFormat.RealMatrixFormat(java.text.NumberFormat):::EXIT
this.prefix has only one value
this.prefix.toString == "{"
this.suffix has only one value
this.suffix.toString == "}"
this.rowPrefix has only one value
this.rowPrefix.toString == "{"
this.rowSuffix has only one value
this.rowSuffix.toString == "}"
this.rowSeparator has only one value
this.rowSeparator.toString == ","
this.columnSeparator has only one value
this.columnSeparator.toString == ","
===========================================================================
org.apache.commons.math3.linear.RealMatrixFormat.getFormat():::ENTER
this has only one value
this.prefix has only one value
this.prefix.toString == "{"
this.suffix has only one value
this.suffix.toString == "}"
this.rowPrefix has only one value
this.rowPrefix.toString == "{"
this.rowSuffix has only one value
this.rowSuffix.toString == "}"
this.rowSeparator has only one value
this.rowSeparator.toString == ","
this.columnSeparator has only one value
this.columnSeparator.toString == ","
this.format has only one value
===========================================================================
org.apache.commons.math3.linear.RealMatrixFormat.getFormat():::EXIT
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
this.prefix == orig(this.prefix)
this.prefix.toString == orig(this.prefix.toString)
this.suffix == orig(this.suffix)
this.suffix.toString == orig(this.suffix.toString)
this.rowPrefix == orig(this.rowPrefix)
this.rowPrefix.toString == orig(this.rowPrefix.toString)
this.rowSuffix == orig(this.rowSuffix)
this.rowSuffix.toString == orig(this.rowSuffix.toString)
this.rowSeparator == orig(this.rowSeparator)
this.rowSeparator.toString == orig(this.rowSeparator.toString)
this.columnSeparator == orig(this.columnSeparator)
this.columnSeparator.toString == orig(this.columnSeparator.toString)
this.format == orig(this.format)
this.format.getClass().getName() == orig(this.format.getClass().getName())
this.prefix has only one value
this.prefix.toString == "{"
this.suffix has only one value
this.suffix.toString == "}"
this.rowPrefix has only one value
this.rowPrefix.toString == "{"
this.rowSuffix has only one value
this.rowSuffix.toString == "}"
this.rowSeparator has only one value
this.rowSeparator.toString == ","
this.columnSeparator has only one value
this.columnSeparator.toString == ","
this.format has only one value
return has only one value
return.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math3.linear.RealMatrixFormat.getInstance():::ENTER
===========================================================================
org.apache.commons.math3.linear.RealMatrixFormat.getInstance():::EXIT
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
return has only one value
return.prefix has only one value
return.prefix.toString == "{"
return.suffix has only one value
return.suffix.toString == "}"
return.rowPrefix has only one value
return.rowPrefix.toString == "{"
return.rowSuffix has only one value
return.rowSuffix.toString == "}"
return.rowSeparator has only one value
return.rowSeparator.toString == ","
return.columnSeparator has only one value
return.columnSeparator.toString == ","
return.format has only one value
return.format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math3.linear.RealMatrixFormat.getInstance(java.util.Locale):::ENTER
locale has only one value
===========================================================================
org.apache.commons.math3.linear.RealMatrixFormat.getInstance(java.util.Locale):::EXIT
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
return.prefix has only one value
return.prefix.toString == "{"
return.suffix has only one value
return.suffix.toString == "}"
return.rowPrefix has only one value
return.rowPrefix.toString == "{"
return.rowSuffix has only one value
return.rowSuffix.toString == "}"
return.rowSeparator has only one value
return.rowSeparator.toString == ","
return.columnSeparator has only one value
return.columnSeparator.toString == ","
return.format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math3.ode.AbstractIntegrator$1:::OBJECT
this.val$orderingSign one of { -1, 1 }
org.apache.commons.math3.ode.AbstractIntegrator.this.stepHandlers.getClass().getName() == java.util.ArrayList.class
org.apache.commons.math3.ode.AbstractIntegrator.this.eventsStates.getClass().getName() == java.util.ArrayList.class
org.apache.commons.math3.ode.AbstractIntegrator.this.statesInitialized == true
org.apache.commons.math3.ode.AbstractIntegrator.this.evaluations.count >= 1
org.apache.commons.math3.ode.AbstractIntegrator.this.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.time >= 0.0
org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.components[] elements != null
org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.components[].getClass().getName() elements == org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent.class
org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.components[].getClass().getName() one of { [], [org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent] }
org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.components.getClass().getName() == java.util.ArrayList.class
size(org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.primaryState[]) >= 1
size(org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.primaryStateDot[]) >= 1
size(org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.components[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math3.ode.AbstractIntegrator$1.(org.apache.commons.math3.ode.AbstractIntegrator, int):::ENTER
org.apache.commons.math3.ode.AbstractIntegrator.this != null
org.apache.commons.math3.ode.AbstractIntegrator.this.stepHandlers != null
org.apache.commons.math3.ode.AbstractIntegrator.this.stepHandlers.getClass().getName() == java.util.ArrayList.class
org.apache.commons.math3.ode.AbstractIntegrator.this.stepSize != 0
org.apache.commons.math3.ode.AbstractIntegrator.this.eventsStates != null
org.apache.commons.math3.ode.AbstractIntegrator.this.eventsStates.getClass().getName() == java.util.ArrayList.class
org.apache.commons.math3.ode.AbstractIntegrator.this.statesInitialized == true
org.apache.commons.math3.ode.AbstractIntegrator.this.name != null
org.apache.commons.math3.ode.AbstractIntegrator.this.evaluations != null
org.apache.commons.math3.ode.AbstractIntegrator.this.evaluations.count >= 1
org.apache.commons.math3.ode.AbstractIntegrator.this.evaluations.maxCountCallback != null
org.apache.commons.math3.ode.AbstractIntegrator.this.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
org.apache.commons.math3.ode.AbstractIntegrator.this.expandable != null
org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.primary != null
org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.primaryMapper != null
org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.time >= 0.0
org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.primaryState != null
org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.primaryStateDot != null
org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.components != null
org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.components[] elements != null
org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.components[].getClass().getName() elements == org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent.class
org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.components[].getClass().getName() one of { [], [org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent] }
org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.components.getClass().getName() == java.util.ArrayList.class
$hidden$2 one of { -1, 1 }
$hidden$2 != 0
size(org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.primaryState[]) >= 1
size(org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.primaryStateDot[]) >= 1
size(org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.components[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math3.ode.AbstractIntegrator$1.(org.apache.commons.math3.ode.AbstractIntegrator, int):::EXIT
org.apache.commons.math3.ode.AbstractIntegrator.this == orig(org.apache.commons.math3.ode.AbstractIntegrator.this)
org.apache.commons.math3.ode.AbstractIntegrator.this.getClass().getName() == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.getClass().getName())
org.apache.commons.math3.ode.AbstractIntegrator.this.stepHandlers == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.stepHandlers)
org.apache.commons.math3.ode.AbstractIntegrator.this.stepHandlers.getClass().getName() == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.stepHandlers.getClass().getName())
org.apache.commons.math3.ode.AbstractIntegrator.this.stepStart == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.stepStart)
org.apache.commons.math3.ode.AbstractIntegrator.this.stepSize == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.stepSize)
org.apache.commons.math3.ode.AbstractIntegrator.this.isLastStep == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.isLastStep)
org.apache.commons.math3.ode.AbstractIntegrator.this.resetOccurred == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.resetOccurred)
org.apache.commons.math3.ode.AbstractIntegrator.this.eventsStates == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.eventsStates)
org.apache.commons.math3.ode.AbstractIntegrator.this.eventsStates.getClass().getName() == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.eventsStates.getClass().getName())
org.apache.commons.math3.ode.AbstractIntegrator.this.statesInitialized == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.statesInitialized)
org.apache.commons.math3.ode.AbstractIntegrator.this.name == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.name)
org.apache.commons.math3.ode.AbstractIntegrator.this.name.toString == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.name.toString)
org.apache.commons.math3.ode.AbstractIntegrator.this.evaluations == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.evaluations)
org.apache.commons.math3.ode.AbstractIntegrator.this.evaluations.maximalCount == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.evaluations.maximalCount)
org.apache.commons.math3.ode.AbstractIntegrator.this.evaluations.count == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.evaluations.count)
org.apache.commons.math3.ode.AbstractIntegrator.this.evaluations.maxCountCallback == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.evaluations.maxCountCallback)
org.apache.commons.math3.ode.AbstractIntegrator.this.evaluations.maxCountCallback.getClass().getName() == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.evaluations.maxCountCallback.getClass().getName())
org.apache.commons.math3.ode.AbstractIntegrator.this.expandable == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.expandable)
org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.primary == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.primary)
org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.primary.getClass().getName() == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.primary.getClass().getName())
org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.primaryMapper == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.primaryMapper)
org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.time == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.time)
org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.primaryState == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.primaryState)
org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.primaryStateDot == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.primaryStateDot)
org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.components == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.components)
org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.components[] == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.components[])
org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.components.getClass().getName() == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.components.getClass().getName())
this.val$orderingSign != 0
org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.primaryState[] == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.primaryState[]) (elementwise)
org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.primaryStateDot[] == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.primaryStateDot[]) (elementwise)
org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.components[] is the reverse of orig(org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.components[])
===========================================================================
org.apache.commons.math3.ode.AbstractIntegrator$1.compare(org.apache.commons.math3.ode.events.EventState, org.apache.commons.math3.ode.events.EventState):::ENTER
this.val$orderingSign == 1
org.apache.commons.math3.ode.AbstractIntegrator.this.stepStart >= 0.1111
org.apache.commons.math3.ode.AbstractIntegrator.this.stepSize >= 0.029296875
org.apache.commons.math3.ode.AbstractIntegrator.this.isLastStep == false
org.apache.commons.math3.ode.AbstractIntegrator.this.evaluations.maximalCount == 2147483647
org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.components[] == []
org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.components[].getClass().getName() == []
es0.maxCheckInterval one of { 0.1, 1.0, Infinity }
es0.maxIterationCount one of { 100, 999, 1000 }
es0.t0 >= 0.1111
es0.pendingEvent == true
es0.forward == true
es0.nextAction has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.STOP has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.RESET_STATE has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.RESET_DERIVATIVES has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.CONTINUE has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES.getClass().getName() == org.apache.commons.math3.ode.events.EventHandler$Action[].class
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[] contains no nulls and has only one value, of length 4
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[] elements != null
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[].getClass().getName() == [org.apache.commons.math3.ode.events.EventHandler.Action, org.apache.commons.math3.ode.events.EventHandler.Action, org.apache.commons.math3.ode.events.EventHandler.Action, org.apache.commons.math3.ode.events.EventHandler.Action]
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[].getClass().getName() elements == org.apache.commons.math3.ode.events.EventHandler.Action.class
es1.maxCheckInterval one of { 0.1, 1.0, Infinity }
es1.maxIterationCount one of { 100, 999, 1000 }
es1.t0 >= 0.1111
es1.pendingEvent == true
es1.forward == true
es1.nextAction has only one value
size(org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.primaryState[]) one of { 1, 2, 3 }
size(org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.primaryStateDot[]) one of { 1, 2, 3 }
size(org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[]) == 4
===========================================================================
org.apache.commons.math3.ode.AbstractIntegrator$1.compare(org.apache.commons.math3.ode.events.EventState, org.apache.commons.math3.ode.events.EventState):::EXIT
this.val$orderingSign == orig(this.val$orderingSign)
org.apache.commons.math3.ode.AbstractIntegrator.this == orig(org.apache.commons.math3.ode.AbstractIntegrator.this)
org.apache.commons.math3.ode.AbstractIntegrator.this.getClass().getName() == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.getClass().getName())
org.apache.commons.math3.ode.AbstractIntegrator.this.stepHandlers == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.stepHandlers)
org.apache.commons.math3.ode.AbstractIntegrator.this.stepHandlers.getClass().getName() == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.stepHandlers.getClass().getName())
org.apache.commons.math3.ode.AbstractIntegrator.this.stepStart == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.stepStart)
org.apache.commons.math3.ode.AbstractIntegrator.this.stepSize == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.stepSize)
org.apache.commons.math3.ode.AbstractIntegrator.this.isLastStep == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.isLastStep)
org.apache.commons.math3.ode.AbstractIntegrator.this.resetOccurred == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.resetOccurred)
org.apache.commons.math3.ode.AbstractIntegrator.this.eventsStates == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.eventsStates)
org.apache.commons.math3.ode.AbstractIntegrator.this.eventsStates.getClass().getName() == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.eventsStates.getClass().getName())
org.apache.commons.math3.ode.AbstractIntegrator.this.statesInitialized == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.statesInitialized)
org.apache.commons.math3.ode.AbstractIntegrator.this.name == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.name)
org.apache.commons.math3.ode.AbstractIntegrator.this.name.toString == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.name.toString)
org.apache.commons.math3.ode.AbstractIntegrator.this.evaluations == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.evaluations)
org.apache.commons.math3.ode.AbstractIntegrator.this.evaluations.maximalCount == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.evaluations.maximalCount)
org.apache.commons.math3.ode.AbstractIntegrator.this.evaluations.count == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.evaluations.count)
org.apache.commons.math3.ode.AbstractIntegrator.this.evaluations.maxCountCallback == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.evaluations.maxCountCallback)
org.apache.commons.math3.ode.AbstractIntegrator.this.evaluations.maxCountCallback.getClass().getName() == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.evaluations.maxCountCallback.getClass().getName())
org.apache.commons.math3.ode.AbstractIntegrator.this.expandable == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.expandable)
org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.primary == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.primary)
org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.primary.getClass().getName() == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.primary.getClass().getName())
org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.primaryMapper == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.primaryMapper)
org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.time == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.time)
org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.primaryState == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.primaryState)
org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.primaryState[] == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.primaryState[])
org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.primaryStateDot == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.primaryStateDot)
org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.primaryStateDot[] == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.primaryStateDot[])
org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.components == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.components)
org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.components[] == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.components[])
org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.components.getClass().getName() == orig(org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.components.getClass().getName())
es0.handler == orig(es0.handler)
es0.handler.getClass().getName() == orig(es0.handler.getClass().getName())
es0.maxCheckInterval == orig(es0.maxCheckInterval)
es0.convergence == orig(es0.convergence)
es0.maxIterationCount == orig(es0.maxIterationCount)
es0.t0 == orig(es0.t0)
es0.g0 == orig(es0.g0)
es0.g0Positive == orig(es0.g0Positive)
es0.pendingEvent == orig(es0.pendingEvent)
es0.pendingEventTime == orig(es0.pendingEventTime)
es0.forward == orig(es0.forward)
es0.increasing == orig(es0.increasing)
es0.nextAction == orig(es0.nextAction)
org.apache.commons.math3.ode.events.EventHandler$Action.STOP == orig(org.apache.commons.math3.ode.events.EventHandler$Action.STOP)
org.apache.commons.math3.ode.events.EventHandler$Action.RESET_STATE == orig(org.apache.commons.math3.ode.events.EventHandler$Action.RESET_STATE)
org.apache.commons.math3.ode.events.EventHandler$Action.RESET_DERIVATIVES == orig(org.apache.commons.math3.ode.events.EventHandler$Action.RESET_DERIVATIVES)
org.apache.commons.math3.ode.events.EventHandler$Action.CONTINUE == orig(org.apache.commons.math3.ode.events.EventHandler$Action.CONTINUE)
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES == orig(org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES)
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES.getClass().getName() == orig(org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES.getClass().getName())
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[] == orig(org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[])
es0.solver == orig(es0.solver)
es0.solver.getClass().getName() == orig(es0.solver.getClass().getName())
es1.handler == orig(es1.handler)
es1.handler.getClass().getName() == orig(es1.handler.getClass().getName())
es1.maxCheckInterval == orig(es1.maxCheckInterval)
es1.convergence == orig(es1.convergence)
es1.maxIterationCount == orig(es1.maxIterationCount)
es1.t0 == orig(es1.t0)
es1.g0 == orig(es1.g0)
es1.g0Positive == orig(es1.g0Positive)
es1.pendingEvent == orig(es1.pendingEvent)
es1.pendingEventTime == orig(es1.pendingEventTime)
es1.forward == orig(es1.forward)
es1.increasing == orig(es1.increasing)
es1.nextAction == orig(es1.nextAction)
es1.solver == orig(es1.solver)
es1.solver.getClass().getName() == orig(es1.solver.getClass().getName())
this.val$orderingSign == 1
org.apache.commons.math3.ode.AbstractIntegrator.this.stepStart >= 0.1111
org.apache.commons.math3.ode.AbstractIntegrator.this.stepSize >= 0.029296875
org.apache.commons.math3.ode.AbstractIntegrator.this.isLastStep == false
org.apache.commons.math3.ode.AbstractIntegrator.this.evaluations.maximalCount == 2147483647
org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.components[] == []
org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.components[].getClass().getName() == []
es0.maxCheckInterval one of { 0.1, 1.0, Infinity }
es0.maxIterationCount one of { 100, 999, 1000 }
es0.t0 >= 0.1111
es0.pendingEvent == true
es0.forward == true
es0.nextAction has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.STOP has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.RESET_STATE has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.RESET_DERIVATIVES has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.CONTINUE has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES.getClass().getName() == org.apache.commons.math3.ode.events.EventHandler$Action[].class
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[] contains no nulls and has only one value, of length 4
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[] elements != null
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[].getClass().getName() == [org.apache.commons.math3.ode.events.EventHandler.Action, org.apache.commons.math3.ode.events.EventHandler.Action, org.apache.commons.math3.ode.events.EventHandler.Action, org.apache.commons.math3.ode.events.EventHandler.Action]
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[].getClass().getName() elements == org.apache.commons.math3.ode.events.EventHandler.Action.class
es1.maxCheckInterval one of { 0.1, 1.0, Infinity }
es1.maxIterationCount one of { 100, 999, 1000 }
es1.t0 >= 0.1111
es1.pendingEvent == true
es1.forward == true
es1.nextAction has only one value
return one of { -1, 0, 1 }
size(org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.primaryState[]) one of { 1, 2, 3 }
size(org.apache.commons.math3.ode.AbstractIntegrator.this.expandable.primaryStateDot[]) one of { 1, 2, 3 }
size(org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[]) == 4
===========================================================================
org.apache.commons.math3.ode.AbstractIntegrator:::OBJECT
this.stepHandlers != null
this.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.eventsStates != null
this.eventsStates.getClass().getName() == java.util.ArrayList.class
this.name != null
this.evaluations != null
this.evaluations.maximalCount >= 0
this.evaluations.count >= 0
this.evaluations.maxCountCallback != null
this.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
this.expandable.primary != null
this.expandable.primaryMapper != null
this.expandable.primaryMapper.firstIndex == 0
this.expandable.primaryMapper.dimension >= 1
this.expandable.primaryState != null
this.expandable.primaryStateDot != null
this.expandable.components != null
this.expandable.components[] elements != null
this.expandable.components[].getClass().getName() elements == org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent.class
this.expandable.components[].getClass().getName() one of { [], [org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent] }
this.expandable.components.getClass().getName() == java.util.ArrayList.class
size(this.expandable.primaryState[]) >= 1
size(this.expandable.primaryStateDot[]) >= 1
size(this.expandable.components[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math3.ode.AbstractIntegrator.AbstractIntegrator(java.lang.String):::ENTER
name != null
===========================================================================
org.apache.commons.math3.ode.AbstractIntegrator.AbstractIntegrator(java.lang.String):::EXIT
name.toString == orig(name.toString)
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.isLastStep == false
this.resetOccurred == false
this.statesInitialized == false
this.evaluations.maximalCount == 2147483647
this.evaluations.count == 0
this.expandable == null
===========================================================================
org.apache.commons.math3.ode.AbstractIntegrator.acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator, double[], double[], double):::ENTER
this.stepSize != 0
this.evaluations.count >= 1
this.expandable != null
this.expandable.time >= 0.0
interpolator != null
interpolator.h != 0
interpolator.currentState != null
interpolator.interpolatedState != null
interpolator.interpolatedDerivatives != null
interpolator.interpolatedPrimaryState != null
interpolator.interpolatedPrimaryDerivatives != null
interpolator.interpolatedSecondaryState != null
interpolator.interpolatedSecondaryState.getClass().getName() == double[][].class
interpolator.interpolatedSecondaryState[] elements != null
interpolator.interpolatedSecondaryDerivatives != null
interpolator.interpolatedSecondaryDerivatives.getClass().getName() == double[][].class
interpolator.interpolatedSecondaryDerivatives[] elements != null
interpolator.finalized == false
interpolator.dirtyState == true
interpolator.primaryMapper != null
interpolator.primaryMapper.firstIndex == 0
interpolator.primaryMapper.dimension >= 1
interpolator.secondaryMappers != null
interpolator.secondaryMappers.getClass().getName() == org.apache.commons.math3.ode.EquationsMapper[].class
interpolator.secondaryMappers[] elements != null
interpolator.secondaryMappers[].getClass().getName() elements == org.apache.commons.math3.ode.EquationsMapper.class
interpolator.secondaryMappers[].getClass().getName() one of { [], [org.apache.commons.math3.ode.EquationsMapper] }
interpolator.secondaryMappers[].firstIndex elements == 2
interpolator.secondaryMappers[].firstIndex one of { [], [2] }
interpolator.secondaryMappers[].dimension elements one of { 6, 10 }
interpolator.secondaryMappers[].dimension one of { [], [6], [10] }
y != null
yDot != null
size(interpolator.currentState[]) >= 1
size(interpolator.interpolatedState[]) >= 1
size(interpolator.interpolatedDerivatives[]) >= 1
size(interpolator.interpolatedPrimaryState[]) >= 1
size(interpolator.interpolatedPrimaryDerivatives[]) >= 1
size(interpolator.interpolatedSecondaryState[]) one of { 0, 1 }
size(interpolator.interpolatedSecondaryDerivatives[]) one of { 0, 1 }
size(interpolator.secondaryMappers[]) one of { 0, 1 }
size(y[]) >= 1
size(yDot[]) >= 1
===========================================================================
org.apache.commons.math3.ode.AbstractIntegrator.acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator, double[], double[], double):::EXIT360
this.resetOccurred == orig(this.resetOccurred)
interpolator.interpolatedPrimaryDerivatives[] == orig(interpolator.interpolatedPrimaryDerivatives[])
yDot[] == orig(yDot[])
this.isLastStep == true
this.evaluations.maximalCount == 2147483647
this.expandable.primaryMapper.dimension == 2
this.expandable.components[] == []
this.expandable.components[].getClass().getName() == []
interpolator.interpolatedPrimaryDerivatives[] == [0.0, 0.0]
interpolator.interpolatedPrimaryDerivatives[] elements == 0.0
interpolator.interpolatedSecondaryState[] == []
interpolator.interpolatedSecondaryDerivatives[] == []
interpolator.forward == true
interpolator.primaryMapper.dimension == 2
interpolator.secondaryMappers[] == []
interpolator.secondaryMappers[].getClass().getName() == []
interpolator.secondaryMappers[].firstIndex == []
interpolator.secondaryMappers[].dimension == []
orig(this.isLastStep) == false
orig(tEnd) one of { 10.0, 15.0 }
size(this.expandable.primaryState[]) == 2
size(this.expandable.primaryStateDot[]) == 2
size(interpolator.currentState[]) == 2
size(interpolator.interpolatedState[]) == 2
size(interpolator.interpolatedDerivatives[]) == 2
size(interpolator.interpolatedPrimaryState[]) == 2
size(interpolator.interpolatedPrimaryDerivatives[]) == 2
orig(size(y[])) == 2
orig(size(yDot[])) == 2
this.expandable.primaryState[] <= orig(this.expandable.primaryState[]) (lexically)
this.expandable.primaryStateDot[] >= orig(this.expandable.primaryStateDot[]) (elementwise)
interpolator.interpolatedTime < orig(interpolator.interpolatedTime)
interpolator.softCurrentTime < orig(interpolator.softCurrentTime)
===========================================================================
org.apache.commons.math3.ode.AbstractIntegrator.acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator, double[], double[], double):::EXIT373
this.isLastStep == orig(this.isLastStep)
this.statesInitialized == orig(this.statesInitialized)
interpolator.interpolatedPrimaryDerivatives[] == orig(interpolator.interpolatedPrimaryDerivatives[])
this.isLastStep == false
this.resetOccurred == true
this.evaluations.maximalCount == 2147483647
this.expandable.primaryMapper.dimension one of { 1, 2 }
this.expandable.time == 0.0
this.expandable.primaryState[] sorted by <
this.expandable.primaryStateDot[] sorted by >
this.expandable.components[] == []
this.expandable.components[].getClass().getName() == []
interpolator.interpolatedState[] sorted by >
interpolator.interpolatedDerivatives[] sorted by <
interpolator.interpolatedPrimaryState[] sorted by >
interpolator.interpolatedPrimaryDerivatives[] elements == 0.0
interpolator.interpolatedPrimaryDerivatives[] one of { [0.0], [0.0, 0.0] }
interpolator.interpolatedSecondaryState[] == []
interpolator.interpolatedSecondaryDerivatives[] == []
interpolator.forward == true
interpolator.primaryMapper.dimension one of { 1, 2 }
interpolator.secondaryMappers[] == []
interpolator.secondaryMappers[].getClass().getName() == []
interpolator.secondaryMappers[].firstIndex == []
interpolator.secondaryMappers[].dimension == []
y[] sorted by <
yDot[] sorted by >
orig(this.expandable.primaryStateDot[]) sorted by <
orig(interpolator.interpolatedState[]) sorted by >
orig(interpolator.interpolatedPrimaryState[]) sorted by >
orig(yDot[]) sorted by <
orig(tEnd) one of { 10.0, 15.0, 30.0 }
size(this.expandable.primaryState[]) one of { 1, 2 }
size(this.expandable.primaryStateDot[]) one of { 1, 2 }
size(interpolator.currentState[]) one of { 1, 2 }
size(interpolator.interpolatedState[]) one of { 1, 2 }
size(interpolator.interpolatedDerivatives[]) one of { 1, 2 }
size(interpolator.interpolatedPrimaryState[]) one of { 1, 2 }
size(interpolator.interpolatedPrimaryDerivatives[]) one of { 1, 2 }
orig(size(y[])) one of { 1, 2 }
orig(size(yDot[])) one of { 1, 2 }
this.evaluations.count > orig(this.evaluations.count)
this.expandable.primaryStateDot[] >= orig(this.expandable.primaryStateDot[]) (lexically)
interpolator.interpolatedTime < orig(interpolator.interpolatedTime)
interpolator.softCurrentTime < orig(interpolator.softCurrentTime)
===========================================================================
org.apache.commons.math3.ode.AbstractIntegrator.acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator, double[], double[], double):::EXIT403
this.resetOccurred == orig(this.resetOccurred)
interpolator.softCurrentTime == orig(interpolator.softCurrentTime)
y[] == orig(y[])
yDot[] == orig(yDot[])
===========================================================================
org.apache.commons.math3.ode.AbstractIntegrator.acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator, double[], double[], double):::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
this.expandable.primary == orig(this.expandable.primary)
this.expandable.primary.getClass().getName() == orig(this.expandable.primary.getClass().getName())
this.expandable.primaryMapper == orig(this.expandable.primaryMapper)
this.expandable.primaryMapper.firstIndex == orig(this.expandable.primaryMapper.firstIndex)
this.expandable.primaryMapper.dimension == orig(this.expandable.primaryMapper.dimension)
this.expandable.time == orig(this.expandable.time)
this.expandable.primaryState == orig(this.expandable.primaryState)
this.expandable.primaryStateDot == orig(this.expandable.primaryStateDot)
this.expandable.components == orig(this.expandable.components)
this.expandable.components[] == orig(this.expandable.components[])
this.expandable.components.getClass().getName() == orig(this.expandable.components.getClass().getName())
interpolator.h == orig(interpolator.h)
interpolator.currentState == orig(interpolator.currentState)
interpolator.currentState[] == orig(interpolator.currentState[])
interpolator.interpolatedState == orig(interpolator.interpolatedState)
interpolator.interpolatedDerivatives == orig(interpolator.interpolatedDerivatives)
interpolator.interpolatedPrimaryState == orig(interpolator.interpolatedPrimaryState)
interpolator.interpolatedPrimaryDerivatives == orig(interpolator.interpolatedPrimaryDerivatives)
interpolator.interpolatedSecondaryState == orig(interpolator.interpolatedSecondaryState)
interpolator.interpolatedSecondaryState.getClass().getName() == orig(interpolator.interpolatedSecondaryState.getClass().getName())
interpolator.interpolatedSecondaryState[] == orig(interpolator.interpolatedSecondaryState[])
interpolator.interpolatedSecondaryDerivatives == orig(interpolator.interpolatedSecondaryDerivatives)
interpolator.interpolatedSecondaryDerivatives.getClass().getName() == orig(interpolator.interpolatedSecondaryDerivatives.getClass().getName())
interpolator.interpolatedSecondaryDerivatives[] == orig(interpolator.interpolatedSecondaryDerivatives[])
interpolator.globalPreviousTime == orig(interpolator.globalPreviousTime)
interpolator.globalCurrentTime == orig(interpolator.globalCurrentTime)
interpolator.softPreviousTime == orig(interpolator.softPreviousTime)
interpolator.forward == orig(interpolator.forward)
interpolator.primaryMapper == orig(interpolator.primaryMapper)
interpolator.primaryMapper.firstIndex == orig(interpolator.primaryMapper.firstIndex)
interpolator.primaryMapper.dimension == orig(interpolator.primaryMapper.dimension)
interpolator.secondaryMappers == orig(interpolator.secondaryMappers)
interpolator.secondaryMappers.getClass().getName() == orig(interpolator.secondaryMappers.getClass().getName())
interpolator.secondaryMappers[] == orig(interpolator.secondaryMappers[])
interpolator.secondaryMappers[].firstIndex == orig(interpolator.secondaryMappers[].firstIndex)
interpolator.secondaryMappers[].dimension == orig(interpolator.secondaryMappers[].dimension)
size(this.expandable.primaryState[]) == orig(size(this.expandable.primaryState[]))
size(this.expandable.primaryStateDot[]) == orig(size(this.expandable.primaryStateDot[]))
size(interpolator.interpolatedState[]) == orig(size(interpolator.interpolatedState[]))
size(interpolator.interpolatedDerivatives[]) == orig(size(interpolator.interpolatedDerivatives[]))
size(interpolator.interpolatedPrimaryState[]) == orig(size(interpolator.interpolatedPrimaryState[]))
size(interpolator.interpolatedPrimaryDerivatives[]) == orig(size(interpolator.interpolatedPrimaryDerivatives[]))
this.stepSize != 0
this.statesInitialized == true
this.evaluations.count >= 1
this.expandable != null
this.expandable.time >= 0.0
interpolator.h != 0
interpolator.currentState != null
interpolator.interpolatedState != null
interpolator.interpolatedDerivatives != null
interpolator.interpolatedPrimaryState != null
interpolator.interpolatedPrimaryDerivatives != null
interpolator.interpolatedSecondaryState != null
interpolator.interpolatedSecondaryState.getClass().getName() == double[][].class
interpolator.interpolatedSecondaryState[] elements != null
interpolator.interpolatedSecondaryDerivatives != null
interpolator.interpolatedSecondaryDerivatives.getClass().getName() == double[][].class
interpolator.interpolatedSecondaryDerivatives[] elements != null
interpolator.dirtyState == false
interpolator.primaryMapper != null
interpolator.primaryMapper.firstIndex == 0
interpolator.primaryMapper.dimension >= 1
interpolator.secondaryMappers != null
interpolator.secondaryMappers.getClass().getName() == org.apache.commons.math3.ode.EquationsMapper[].class
interpolator.secondaryMappers[] elements != null
interpolator.secondaryMappers[].getClass().getName() elements == org.apache.commons.math3.ode.EquationsMapper.class
interpolator.secondaryMappers[].getClass().getName() one of { [], [org.apache.commons.math3.ode.EquationsMapper] }
interpolator.secondaryMappers[].firstIndex elements == 2
interpolator.secondaryMappers[].firstIndex one of { [], [2] }
interpolator.secondaryMappers[].dimension elements one of { 6, 10 }
interpolator.secondaryMappers[].dimension one of { [], [6], [10] }
size(interpolator.currentState[]) >= 1
size(interpolator.interpolatedState[]) >= 1
size(interpolator.interpolatedDerivatives[]) >= 1
size(interpolator.interpolatedPrimaryState[]) >= 1
size(interpolator.interpolatedPrimaryDerivatives[]) >= 1
size(interpolator.interpolatedSecondaryState[]) one of { 0, 1 }
size(interpolator.interpolatedSecondaryDerivatives[]) one of { 0, 1 }
size(interpolator.secondaryMappers[]) one of { 0, 1 }
this.evaluations.count >= orig(this.evaluations.count)
interpolator.softCurrentTime <= orig(interpolator.softCurrentTime)
yDot[] >= orig(yDot[]) (lexically)
===========================================================================
org.apache.commons.math3.ode.AbstractIntegrator.addEventHandler(org.apache.commons.math3.ode.events.EventHandler, double, double, int):::ENTER
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 1.0, Double.NaN }
this.resetOccurred == false
this.evaluations.maximalCount == 2147483647
this.evaluations.count one of { 0, 8, 16 }
this.expandable.primaryMapper.dimension == 3
this.expandable.time == 1.8782503799999986E9
this.expandable.primaryState[] elements one of { 1.0060180356222639, 2.0012003599861283, 3.0001800053872327 }
this.expandable.primaryState[] one of { [1.0060180356222639, 2.0012003599861283, 3.0001800053872327], [1.0060180356223287, 2.0012003599861288, 3.0001800053872327] }
this.expandable.primaryStateDot[] one of { [1.0046775721782596E-4, 2.0009335510782034E-5, 3.0001400032567033E-6], [1.006018035622264E-4, 2.0012003599861285E-5, 3.0001800053872324E-6] }
this.expandable.components[] == []
this.expandable.components[].getClass().getName() == []
handler != null
maxCheckInterval one of { 0.1, 1.0, Infinity }
maxIterationCount one of { 3, 100, 1000 }
size(this.expandable.primaryState[]) == 3
size(this.expandable.primaryStateDot[]) == 3
===========================================================================
org.apache.commons.math3.ode.AbstractIntegrator.addEventHandler(org.apache.commons.math3.ode.events.EventHandler, double, double, int):::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
this.expandable.primary == orig(this.expandable.primary)
this.expandable.primary.getClass().getName() == orig(this.expandable.primary.getClass().getName())
this.expandable.primaryMapper == orig(this.expandable.primaryMapper)
this.expandable.primaryMapper.firstIndex == orig(this.expandable.primaryMapper.firstIndex)
this.expandable.primaryMapper.dimension == orig(this.expandable.primaryMapper.dimension)
this.expandable.time == orig(this.expandable.time)
this.expandable.primaryState == orig(this.expandable.primaryState)
this.expandable.primaryState[] == orig(this.expandable.primaryState[])
this.expandable.primaryStateDot == orig(this.expandable.primaryStateDot)
this.expandable.primaryStateDot[] == orig(this.expandable.primaryStateDot[])
this.expandable.components == orig(this.expandable.components)
this.expandable.components[] == orig(this.expandable.components[])
this.expandable.components.getClass().getName() == orig(this.expandable.components.getClass().getName())
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 1.0, Double.NaN }
this.resetOccurred == false
this.evaluations.maximalCount == 2147483647
this.evaluations.count one of { 0, 8, 16 }
this.expandable.primaryMapper.dimension == 3
this.expandable.time == 1.8782503799999986E9
this.expandable.primaryState[] elements one of { 1.0060180356222639, 2.0012003599861283, 3.0001800053872327 }
this.expandable.primaryState[] one of { [1.0060180356222639, 2.0012003599861283, 3.0001800053872327], [1.0060180356223287, 2.0012003599861288, 3.0001800053872327] }
this.expandable.primaryStateDot[] one of { [1.0046775721782596E-4, 2.0009335510782034E-5, 3.0001400032567033E-6], [1.006018035622264E-4, 2.0012003599861285E-5, 3.0001800053872324E-6] }
this.expandable.components[] == []
this.expandable.components[].getClass().getName() == []
size(this.expandable.primaryState[]) == 3
size(this.expandable.primaryStateDot[]) == 3
===========================================================================
org.apache.commons.math3.ode.AbstractIntegrator.addEventHandler(org.apache.commons.math3.ode.events.EventHandler, double, double, int, org.apache.commons.math3.analysis.solvers.UnivariateSolver):::ENTER
this.stepStart == Double.NaN
this.resetOccurred == false
this.evaluations.maximalCount == 2147483647
this.evaluations.count one of { 0, 8, 16 }
this.expandable.primaryMapper.dimension == 3
this.expandable.time == 1.8782503799999986E9
this.expandable.primaryState[] elements one of { 1.0060180356222639, 2.0012003599861283, 3.0001800053872327 }
this.expandable.primaryState[] one of { [1.0060180356222639, 2.0012003599861283, 3.0001800053872327], [1.0060180356223287, 2.0012003599861288, 3.0001800053872327] }
this.expandable.primaryStateDot[] one of { [1.0046775721782596E-4, 2.0009335510782034E-5, 3.0001400032567033E-6], [1.006018035622264E-4, 2.0012003599861285E-5, 3.0001800053872324E-6] }
this.expandable.components[] == []
this.expandable.components[].getClass().getName() == []
handler != null
maxCheckInterval one of { 0.1, 1.0, Infinity }
solver != null
size(this.expandable.primaryState[]) == 3
size(this.expandable.primaryStateDot[]) == 3
===========================================================================
org.apache.commons.math3.ode.AbstractIntegrator.addEventHandler(org.apache.commons.math3.ode.events.EventHandler, double, double, int, org.apache.commons.math3.analysis.solvers.UnivariateSolver):::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
this.expandable.primary == orig(this.expandable.primary)
this.expandable.primary.getClass().getName() == orig(this.expandable.primary.getClass().getName())
this.expandable.primaryMapper == orig(this.expandable.primaryMapper)
this.expandable.primaryMapper.firstIndex == orig(this.expandable.primaryMapper.firstIndex)
this.expandable.primaryMapper.dimension == orig(this.expandable.primaryMapper.dimension)
this.expandable.time == orig(this.expandable.time)
this.expandable.primaryState == orig(this.expandable.primaryState)
this.expandable.primaryState[] == orig(this.expandable.primaryState[])
this.expandable.primaryStateDot == orig(this.expandable.primaryStateDot)
this.expandable.primaryStateDot[] == orig(this.expandable.primaryStateDot[])
this.expandable.components == orig(this.expandable.components)
this.expandable.components[] == orig(this.expandable.components[])
this.expandable.components.getClass().getName() == orig(this.expandable.components.getClass().getName())
this.stepStart == Double.NaN
this.resetOccurred == false
this.evaluations.maximalCount == 2147483647
this.evaluations.count one of { 0, 8, 16 }
this.expandable.primaryMapper.dimension == 3
this.expandable.time == 1.8782503799999986E9
this.expandable.primaryState[] elements one of { 1.0060180356222639, 2.0012003599861283, 3.0001800053872327 }
this.expandable.primaryState[] one of { [1.0060180356222639, 2.0012003599861283, 3.0001800053872327], [1.0060180356223287, 2.0012003599861288, 3.0001800053872327] }
this.expandable.primaryStateDot[] one of { [1.0046775721782596E-4, 2.0009335510782034E-5, 3.0001400032567033E-6], [1.006018035622264E-4, 2.0012003599861285E-5, 3.0001800053872324E-6] }
this.expandable.components[] == []
this.expandable.components[].getClass().getName() == []
size(this.expandable.primaryState[]) == 3
size(this.expandable.primaryStateDot[]) == 3
===========================================================================
org.apache.commons.math3.ode.AbstractIntegrator.addStepHandler(org.apache.commons.math3.ode.sampling.StepHandler):::ENTER
this.stepStart == Double.NaN
this.resetOccurred == false
this.evaluations.maximalCount == 2147483647
this.expandable.primaryMapper.dimension one of { 2, 4 }
this.expandable.time one of { 4.0, 20.0 }
this.expandable.primaryState[] elements != 0
this.expandable.primaryStateDot[] elements != 0
this.expandable.components[] == []
this.expandable.components[].getClass().getName() == []
handler != null
size(this.expandable.primaryState[]) one of { 2, 4 }
size(this.expandable.primaryStateDot[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math3.ode.AbstractIntegrator.addStepHandler(org.apache.commons.math3.ode.sampling.StepHandler):::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
this.expandable.primary == orig(this.expandable.primary)
this.expandable.primary.getClass().getName() == orig(this.expandable.primary.getClass().getName())
this.expandable.primaryMapper == orig(this.expandable.primaryMapper)
this.expandable.primaryMapper.firstIndex == orig(this.expandable.primaryMapper.firstIndex)
this.expandable.primaryMapper.dimension == orig(this.expandable.primaryMapper.dimension)
this.expandable.time == orig(this.expandable.time)
this.expandable.primaryState == orig(this.expandable.primaryState)
this.expandable.primaryState[] == orig(this.expandable.primaryState[])
this.expandable.primaryStateDot == orig(this.expandable.primaryStateDot)
this.expandable.primaryStateDot[] == orig(this.expandable.primaryStateDot[])
this.expandable.components == orig(this.expandable.components)
this.expandable.components[] == orig(this.expandable.components[])
this.expandable.components.getClass().getName() == orig(this.expandable.components.getClass().getName())
this.stepStart == Double.NaN
this.resetOccurred == false
this.evaluations.maximalCount == 2147483647
this.expandable.primaryMapper.dimension one of { 2, 4 }
this.expandable.time one of { 4.0, 20.0 }
this.expandable.primaryState[] elements != 0
this.expandable.primaryStateDot[] elements != 0
this.expandable.components[] == []
this.expandable.components[].getClass().getName() == []
size(this.expandable.primaryState[]) one of { 2, 4 }
size(this.expandable.primaryStateDot[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math3.ode.AbstractIntegrator.clearEventHandlers():::ENTER
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 3.1622776601683794E-4, Double.NaN }
this.evaluations.maximalCount == 2147483647
this.expandable.primaryMapper.dimension one of { 1, 2, 4 }
this.expandable.components[] == []
this.expandable.components[].getClass().getName() == []
size(this.expandable.primaryState[]) one of { 1, 2, 4 }
size(this.expandable.primaryStateDot[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math3.ode.AbstractIntegrator.clearEventHandlers():::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
this.expandable.primary == orig(this.expandable.primary)
this.expandable.primary.getClass().getName() == orig(this.expandable.primary.getClass().getName())
this.expandable.primaryMapper == orig(this.expandable.primaryMapper)
this.expandable.primaryMapper.firstIndex == orig(this.expandable.primaryMapper.firstIndex)
this.expandable.primaryMapper.dimension == orig(this.expandable.primaryMapper.dimension)
this.expandable.time == orig(this.expandable.time)
this.expandable.primaryState == orig(this.expandable.primaryState)
this.expandable.primaryState[] == orig(this.expandable.primaryState[])
this.expandable.primaryStateDot == orig(this.expandable.primaryStateDot)
this.expandable.primaryStateDot[] == orig(this.expandable.primaryStateDot[])
this.expandable.components == orig(this.expandable.components)
this.expandable.components[] == orig(this.expandable.components[])
this.expandable.components.getClass().getName() == orig(this.expandable.components.getClass().getName())
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 3.1622776601683794E-4, Double.NaN }
this.evaluations.maximalCount == 2147483647
this.expandable.primaryMapper.dimension one of { 1, 2, 4 }
this.expandable.components[] == []
this.expandable.components[].getClass().getName() == []
size(this.expandable.primaryState[]) one of { 1, 2, 4 }
size(this.expandable.primaryStateDot[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math3.ode.AbstractIntegrator.clearStepHandlers():::ENTER
this.getClass().getName() == org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.class
this.resetOccurred == false
this.name has only one value
this.name.toString == "Dormand-Prince 8 (5, 3)"
this.evaluations.maximalCount == 2147483647
this.expandable.primary.getClass().getName() == org.apache.commons.math3.ode.MultistepIntegrator$CountingDifferentialEquations.class
this.expandable.primaryMapper.dimension one of { 1, 2, 4 }
this.expandable.time == 0.0
this.expandable.components[] == []
this.expandable.components[].getClass().getName() == []
size(this.expandable.primaryState[]) one of { 1, 2, 4 }
size(this.expandable.primaryStateDot[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math3.ode.AbstractIntegrator.clearStepHandlers():::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepSize == orig(this.stepSize)
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
this.expandable.primary == orig(this.expandable.primary)
this.expandable.primary.getClass().getName() == orig(this.expandable.primary.getClass().getName())
this.expandable.primaryMapper == orig(this.expandable.primaryMapper)
this.expandable.primaryMapper.firstIndex == orig(this.expandable.primaryMapper.firstIndex)
this.expandable.primaryMapper.dimension == orig(this.expandable.primaryMapper.dimension)
this.expandable.time == orig(this.expandable.time)
this.expandable.primaryState == orig(this.expandable.primaryState)
this.expandable.primaryState[] == orig(this.expandable.primaryState[])
this.expandable.primaryStateDot == orig(this.expandable.primaryStateDot)
this.expandable.primaryStateDot[] == orig(this.expandable.primaryStateDot[])
this.expandable.components == orig(this.expandable.components)
this.expandable.components[] == orig(this.expandable.components[])
this.expandable.components.getClass().getName() == orig(this.expandable.components.getClass().getName())
this.resetOccurred == false
this.name has only one value
this.name.toString == "Dormand-Prince 8 (5, 3)"
this.evaluations.maximalCount == 2147483647
this.expandable.primary.getClass().getName() == org.apache.commons.math3.ode.MultistepIntegrator$CountingDifferentialEquations.class
this.expandable.primaryMapper.dimension one of { 1, 2, 4 }
this.expandable.time == 0.0
this.expandable.components[] == []
this.expandable.components[].getClass().getName() == []
size(this.expandable.primaryState[]) one of { 1, 2, 4 }
size(this.expandable.primaryStateDot[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math3.ode.AbstractIntegrator.computeDerivatives(double, double[], double[]):::ENTER
this.expandable != null
this.expandable.time >= 0.0
y != null
yDot != null
size(y[]) >= 1
size(yDot[]) >= 1
===========================================================================
org.apache.commons.math3.ode.AbstractIntegrator.computeDerivatives(double, double[], double[]):::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
this.expandable.primary == orig(this.expandable.primary)
this.expandable.primary.getClass().getName() == orig(this.expandable.primary.getClass().getName())
this.expandable.primaryMapper == orig(this.expandable.primaryMapper)
this.expandable.primaryMapper.firstIndex == orig(this.expandable.primaryMapper.firstIndex)
this.expandable.primaryMapper.dimension == orig(this.expandable.primaryMapper.dimension)
this.expandable.time == orig(this.expandable.time)
this.expandable.primaryState == orig(this.expandable.primaryState)
this.expandable.primaryStateDot == orig(this.expandable.primaryStateDot)
this.expandable.components == orig(this.expandable.components)
this.expandable.components[] == orig(this.expandable.components[])
this.expandable.components.getClass().getName() == orig(this.expandable.components.getClass().getName())
y[] == orig(y[])
size(this.expandable.primaryState[]) == orig(size(this.expandable.primaryState[]))
size(this.expandable.primaryStateDot[]) == orig(size(this.expandable.primaryStateDot[]))
this.evaluations.count >= 1
this.expandable != null
this.expandable.time >= 0.0
this.evaluations.count - orig(this.evaluations.count) - 1 == 0
===========================================================================
org.apache.commons.math3.ode.AbstractIntegrator.getCurrentSignedStepsize():::ENTER
this.stepSize != 0
this.statesInitialized == true
this.evaluations.maximalCount one of { 650, 2147483647 }
this.evaluations.count >= 1
this.expandable != null
this.expandable.primaryMapper.dimension one of { 1, 2, 4 }
this.expandable.time == 0.0
this.expandable.components[] == []
this.expandable.components[].getClass().getName() == []
size(this.expandable.primaryState[]) one of { 1, 2, 4 }
size(this.expandable.primaryStateDot[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math3.ode.AbstractIntegrator.getCurrentSignedStepsize():::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
this.expandable.primary == orig(this.expandable.primary)
this.expandable.primary.getClass().getName() == orig(this.expandable.primary.getClass().getName())
this.expandable.primaryMapper == orig(this.expandable.primaryMapper)
this.expandable.primaryMapper.firstIndex == orig(this.expandable.primaryMapper.firstIndex)
this.expandable.primaryMapper.dimension == orig(this.expandable.primaryMapper.dimension)
this.expandable.time == orig(this.expandable.time)
this.expandable.primaryState == orig(this.expandable.primaryState)
this.expandable.primaryState[] == orig(this.expandable.primaryState[])
this.expandable.primaryStateDot == orig(this.expandable.primaryStateDot)
this.expandable.primaryStateDot[] == orig(this.expandable.primaryStateDot[])
this.expandable.components == orig(this.expandable.components)
this.expandable.components[] == orig(this.expandable.components[])
this.expandable.components.getClass().getName() == orig(this.expandable.components.getClass().getName())
this.stepSize != 0
this.statesInitialized == true
this.evaluations.maximalCount one of { 650, 2147483647 }
this.evaluations.count >= 1
this.expandable != null
this.expandable.primaryMapper.dimension one of { 1, 2, 4 }
this.expandable.time == 0.0
this.expandable.components[] == []
this.expandable.components[].getClass().getName() == []
return != 0
size(this.expandable.primaryState[]) one of { 1, 2, 4 }
size(this.expandable.primaryStateDot[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math3.ode.AbstractIntegrator.getCurrentStepStart():::ENTER
this.stepSize != 0
this.statesInitialized == true
this.evaluations.maximalCount == 2147483647
this.evaluations.count >= 1
this.expandable != null
this.expandable.primaryMapper.dimension one of { 1, 2, 4 }
this.expandable.time == 0.0
this.expandable.components[] == []
this.expandable.components[].getClass().getName() == []
size(this.expandable.primaryState[]) one of { 1, 2, 4 }
size(this.expandable.primaryStateDot[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math3.ode.AbstractIntegrator.getCurrentStepStart():::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
this.expandable.primary == orig(this.expandable.primary)
this.expandable.primary.getClass().getName() == orig(this.expandable.primary.getClass().getName())
this.expandable.primaryMapper == orig(this.expandable.primaryMapper)
this.expandable.primaryMapper.firstIndex == orig(this.expandable.primaryMapper.firstIndex)
this.expandable.primaryMapper.dimension == orig(this.expandable.primaryMapper.dimension)
this.expandable.time == orig(this.expandable.time)
this.expandable.primaryState == orig(this.expandable.primaryState)
this.expandable.primaryState[] == orig(this.expandable.primaryState[])
this.expandable.primaryStateDot == orig(this.expandable.primaryStateDot)
this.expandable.primaryStateDot[] == orig(this.expandable.primaryStateDot[])
this.expandable.components == orig(this.expandable.components)
this.expandable.components[] == orig(this.expandable.components[])
this.expandable.components.getClass().getName() == orig(this.expandable.components.getClass().getName())
this.stepSize != 0
this.statesInitialized == true
this.evaluations.maximalCount == 2147483647
this.evaluations.count >= 1
this.expandable != null
this.expandable.primaryMapper.dimension one of { 1, 2, 4 }
this.expandable.time == 0.0
this.expandable.components[] == []
this.expandable.components[].getClass().getName() == []
size(this.expandable.primaryState[]) one of { 1, 2, 4 }
size(this.expandable.primaryStateDot[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math3.ode.AbstractIntegrator.getEvaluations():::ENTER
this.stepStart == Double.NaN
this.stepSize == 0.0
this.isLastStep == true
this.resetOccurred == false
this.statesInitialized == true
this.evaluations.maximalCount == 2147483647
this.expandable != null
this.expandable.primaryMapper.dimension one of { 2, 4 }
this.expandable.time one of { 4.0, 20.0 }
this.expandable.primaryState[] elements != 0
this.expandable.primaryStateDot[] elements != 0
this.expandable.components[] == []
this.expandable.components[].getClass().getName() == []
size(this.expandable.primaryState[]) one of { 2, 4 }
size(this.expandable.primaryStateDot[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math3.ode.AbstractIntegrator.getEvaluations():::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepSize == orig(this.stepSize)
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
this.expandable.primary == orig(this.expandable.primary)
this.expandable.primary.getClass().getName() == orig(this.expandable.primary.getClass().getName())
this.expandable.primaryMapper == orig(this.expandable.primaryMapper)
this.expandable.primaryMapper.firstIndex == orig(this.expandable.primaryMapper.firstIndex)
this.expandable.primaryMapper.dimension == orig(this.expandable.primaryMapper.dimension)
this.expandable.time == orig(this.expandable.time)
this.expandable.primaryState == orig(this.expandable.primaryState)
this.expandable.primaryState[] == orig(this.expandable.primaryState[])
this.expandable.primaryStateDot == orig(this.expandable.primaryStateDot)
this.expandable.primaryStateDot[] == orig(this.expandable.primaryStateDot[])
this.expandable.components == orig(this.expandable.components)
this.expandable.components[] == orig(this.expandable.components[])
this.expandable.components.getClass().getName() == orig(this.expandable.components.getClass().getName())
this.stepStart == Double.NaN
this.stepSize == 0.0
this.isLastStep == true
this.resetOccurred == false
this.statesInitialized == true
this.evaluations.maximalCount == 2147483647
this.expandable != null
this.expandable.primaryMapper.dimension one of { 2, 4 }
this.expandable.time one of { 4.0, 20.0 }
this.expandable.primaryState[] elements != 0
this.expandable.primaryStateDot[] elements != 0
this.expandable.components[] == []
this.expandable.components[].getClass().getName() == []
size(this.expandable.primaryState[]) one of { 2, 4 }
size(this.expandable.primaryStateDot[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math3.ode.AbstractIntegrator.getEventHandlers():::ENTER
this.stepStart == Double.NaN
this.stepSize one of { 0.0, Double.NaN }
this.evaluations.maximalCount == 2147483647
this.expandable.primaryMapper.dimension one of { 1, 2, 4 }
this.expandable.components[] == []
this.expandable.components[].getClass().getName() == []
size(this.expandable.primaryState[]) one of { 1, 2, 4 }
size(this.expandable.primaryStateDot[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math3.ode.AbstractIntegrator.getEventHandlers():::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
this.expandable.primary == orig(this.expandable.primary)
this.expandable.primary.getClass().getName() == orig(this.expandable.primary.getClass().getName())
this.expandable.primaryMapper == orig(this.expandable.primaryMapper)
this.expandable.primaryMapper.firstIndex == orig(this.expandable.primaryMapper.firstIndex)
this.expandable.primaryMapper.dimension == orig(this.expandable.primaryMapper.dimension)
this.expandable.time == orig(this.expandable.time)
this.expandable.primaryState == orig(this.expandable.primaryState)
this.expandable.primaryState[] == orig(this.expandable.primaryState[])
this.expandable.primaryStateDot == orig(this.expandable.primaryStateDot)
this.expandable.primaryStateDot[] == orig(this.expandable.primaryStateDot[])
this.expandable.components == orig(this.expandable.components)
this.expandable.components[] == orig(this.expandable.components[])
this.expandable.components.getClass().getName() == orig(this.expandable.components.getClass().getName())
this.stepStart == Double.NaN
this.stepSize one of { 0.0, Double.NaN }
this.evaluations.maximalCount == 2147483647
this.expandable.primaryMapper.dimension one of { 1, 2, 4 }
this.expandable.components[] == []
this.expandable.components[].getClass().getName() == []
return != null
return.getClass().getName() == java.util.Collections$UnmodifiableCollection.class
size(this.expandable.primaryState[]) one of { 1, 2, 4 }
size(this.expandable.primaryStateDot[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math3.ode.AbstractIntegrator.getName():::ENTER
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 2.23606797749979, Double.NaN }
this.isLastStep == true
this.resetOccurred == false
this.statesInitialized == true
this.evaluations.maximalCount == 2147483647
this.expandable != null
this.expandable.primaryMapper.dimension one of { 2, 4 }
this.expandable.time one of { -4.0, 4.0, 20.0 }
this.expandable.components[] == []
this.expandable.components[].getClass().getName() == []
size(this.expandable.primaryState[]) one of { 2, 4 }
size(this.expandable.primaryStateDot[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math3.ode.AbstractIntegrator.getName():::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
this.expandable.primary == orig(this.expandable.primary)
this.expandable.primary.getClass().getName() == orig(this.expandable.primary.getClass().getName())
this.expandable.primaryMapper == orig(this.expandable.primaryMapper)
this.expandable.primaryMapper.firstIndex == orig(this.expandable.primaryMapper.firstIndex)
this.expandable.primaryMapper.dimension == orig(this.expandable.primaryMapper.dimension)
this.expandable.time == orig(this.expandable.time)
this.expandable.primaryState == orig(this.expandable.primaryState)
this.expandable.primaryState[] == orig(this.expandable.primaryState[])
this.expandable.primaryStateDot == orig(this.expandable.primaryStateDot)
this.expandable.primaryStateDot[] == orig(this.expandable.primaryStateDot[])
this.expandable.components == orig(this.expandable.components)
this.expandable.components[] == orig(this.expandable.components[])
this.expandable.components.getClass().getName() == orig(this.expandable.components.getClass().getName())
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 2.23606797749979, Double.NaN }
this.isLastStep == true
this.resetOccurred == false
this.statesInitialized == true
this.evaluations.maximalCount == 2147483647
this.expandable != null
this.expandable.primaryMapper.dimension one of { 2, 4 }
this.expandable.time one of { -4.0, 4.0, 20.0 }
this.expandable.components[] == []
this.expandable.components[].getClass().getName() == []
return != null
size(this.expandable.primaryState[]) one of { 2, 4 }
size(this.expandable.primaryStateDot[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math3.ode.AbstractIntegrator.getStepHandlers():::ENTER
this.stepStart == Double.NaN
this.stepSize one of { 0.0, Double.NaN }
this.isLastStep == true
this.resetOccurred == false
this.statesInitialized == true
this.evaluations.maximalCount == 2147483647
this.expandable.primaryMapper.dimension one of { 2, 4 }
this.expandable.time one of { 4.0, 20.0 }
this.expandable.primaryState[] elements != 0
this.expandable.primaryStateDot[] elements != 0
this.expandable.components[] == []
this.expandable.components[].getClass().getName() == []
size(this.expandable.primaryState[]) one of { 2, 4 }
size(this.expandable.primaryStateDot[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math3.ode.AbstractIntegrator.getStepHandlers():::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
this.expandable.primary == orig(this.expandable.primary)
this.expandable.primary.getClass().getName() == orig(this.expandable.primary.getClass().getName())
this.expandable.primaryMapper == orig(this.expandable.primaryMapper)
this.expandable.primaryMapper.firstIndex == orig(this.expandable.primaryMapper.firstIndex)
this.expandable.primaryMapper.dimension == orig(this.expandable.primaryMapper.dimension)
this.expandable.time == orig(this.expandable.time)
this.expandable.primaryState == orig(this.expandable.primaryState)
this.expandable.primaryState[] == orig(this.expandable.primaryState[])
this.expandable.primaryStateDot == orig(this.expandable.primaryStateDot)
this.expandable.primaryStateDot[] == orig(this.expandable.primaryStateDot[])
this.expandable.components == orig(this.expandable.components)
this.expandable.components[] == orig(this.expandable.components[])
this.expandable.components.getClass().getName() == orig(this.expandable.components.getClass().getName())
this.stepStart == Double.NaN
this.stepSize one of { 0.0, Double.NaN }
this.isLastStep == true
this.resetOccurred == false
this.statesInitialized == true
this.evaluations.maximalCount == 2147483647
this.expandable.primaryMapper.dimension one of { 2, 4 }
this.expandable.time one of { 4.0, 20.0 }
this.expandable.primaryState[] elements != 0
this.expandable.primaryStateDot[] elements != 0
this.expandable.components[] == []
this.expandable.components[].getClass().getName() == []
return.getClass().getName() == java.util.Collections$UnmodifiableCollection.class
size(this.expandable.primaryState[]) one of { 2, 4 }
size(this.expandable.primaryStateDot[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math3.ode.AbstractIntegrator.initIntegration(double, double[], double):::ENTER
this.stepStart >= 0.0
this.resetOccurred == false
this.expandable != null
this.expandable.time >= 0.0
this.expandable.primaryStateDot[] elements == 0.0
t0 >= 0.0
y0 != null
===========================================================================
org.apache.commons.math3.ode.AbstractIntegrator.initIntegration(double, double[], double):::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
this.expandable.primary == orig(this.expandable.primary)
this.expandable.primary.getClass().getName() == orig(this.expandable.primary.getClass().getName())
this.expandable.primaryMapper == orig(this.expandable.primaryMapper)
this.expandable.primaryMapper.firstIndex == orig(this.expandable.primaryMapper.firstIndex)
this.expandable.primaryMapper.dimension == orig(this.expandable.primaryMapper.dimension)
this.expandable.time == orig(this.expandable.time)
this.expandable.primaryState == orig(this.expandable.primaryState)
this.expandable.primaryState[] == orig(this.expandable.primaryState[])
this.expandable.primaryStateDot == orig(this.expandable.primaryStateDot)
this.expandable.primaryStateDot[] == orig(this.expandable.primaryStateDot[])
this.expandable.components == orig(this.expandable.components)
this.expandable.components[] == orig(this.expandable.components[])
this.expandable.components.getClass().getName() == orig(this.expandable.components.getClass().getName())
y0[] == orig(y0[])
this.stepStart >= 0.0
this.resetOccurred == false
this.statesInitialized == false
this.evaluations.count == 0
this.expandable != null
this.expandable.time >= 0.0
this.expandable.primaryStateDot[] elements == 0.0
this.evaluations.count <= orig(this.evaluations.count)
===========================================================================
org.apache.commons.math3.ode.AbstractIntegrator.integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations, double, double[], double, double[]):::ENTER
this.stepStart == Double.NaN
this.resetOccurred == false
this.evaluations.maximalCount == 2147483647
this.expandable.primaryMapper.dimension one of { 2, 3, 4 }
this.expandable.primaryStateDot[] elements != 0
this.expandable.components[] == []
this.expandable.components[].getClass().getName() == []
equations != null
t0 >= 0.0
y0 != null
y != null
y[] elements >= 0.0
size(this.expandable.primaryState[]) one of { 2, 3, 4 }
size(this.expandable.primaryStateDot[]) one of { 2, 3, 4 }
===========================================================================
org.apache.commons.math3.ode.AbstractIntegrator.integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations, double, double[], double, double[]):::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable.primary.getClass().getName() == orig(this.expandable.primary.getClass().getName())
this.expandable.primaryMapper.firstIndex == orig(this.expandable.primaryMapper.firstIndex)
this.expandable.primaryMapper.dimension == orig(this.expandable.primaryMapper.dimension)
this.expandable.components[] == orig(this.expandable.components[])
this.expandable.components[].getClass().getName() == orig(this.expandable.components[].getClass().getName())
this.expandable.components.getClass().getName() == orig(this.expandable.components.getClass().getName())
size(this.expandable.primaryState[]) == orig(size(this.expandable.primaryState[]))
size(this.expandable.primaryStateDot[]) == orig(size(this.expandable.primaryStateDot[]))
this.stepStart == Double.NaN
this.isLastStep == true
this.statesInitialized == true
this.evaluations.maximalCount == 2147483647
this.expandable != null
this.expandable.components[] == []
this.expandable.components[].getClass().getName() == []
this.expandable.time >= orig(this.expandable.time)
this.expandable.components[] is the reverse of orig(this.expandable.components[])
===========================================================================
org.apache.commons.math3.ode.AbstractIntegrator.sanityChecks(org.apache.commons.math3.ode.ExpandableStatefulODE, double):::ENTER
this.stepStart == Double.NaN
this.resetOccurred == false
this.expandable.primaryMapper.dimension one of { 2, 3, 4 }
this.expandable.primaryStateDot[] elements != 0
equations != null
equations.primary != null
equations.primaryMapper != null
equations.primaryMapper.firstIndex == 0
equations.time >= 0.0
equations.primaryState != null
equations.primaryStateDot != null
equations.primaryStateDot[] elements == 0.0
equations.components != null
equations.components[] elements != null
equations.components[].getClass().getName() elements == org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent.class
equations.components[].getClass().getName() one of { [], [org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent] }
equations.components.getClass().getName() == java.util.ArrayList.class
size(this.expandable.primaryState[]) one of { 2, 3, 4 }
size(this.expandable.primaryStateDot[]) one of { 2, 3, 4 }
size(equations.components[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math3.ode.AbstractIntegrator.sanityChecks(org.apache.commons.math3.ode.ExpandableStatefulODE, double):::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
this.expandable.primary == orig(this.expandable.primary)
this.expandable.primary.getClass().getName() == orig(this.expandable.primary.getClass().getName())
this.expandable.primaryMapper == orig(this.expandable.primaryMapper)
this.expandable.primaryMapper.firstIndex == orig(this.expandable.primaryMapper.firstIndex)
this.expandable.primaryMapper.dimension == orig(this.expandable.primaryMapper.dimension)
this.expandable.time == orig(this.expandable.time)
this.expandable.primaryState == orig(this.expandable.primaryState)
this.expandable.primaryState[] == orig(this.expandable.primaryState[])
this.expandable.primaryStateDot == orig(this.expandable.primaryStateDot)
this.expandable.primaryStateDot[] == orig(this.expandable.primaryStateDot[])
this.expandable.components == orig(this.expandable.components)
this.expandable.components[] == orig(this.expandable.components[])
this.expandable.components.getClass().getName() == orig(this.expandable.components.getClass().getName())
equations.primary == orig(equations.primary)
equations.primary.getClass().getName() == orig(equations.primary.getClass().getName())
equations.primaryMapper == orig(equations.primaryMapper)
equations.primaryMapper.firstIndex == orig(equations.primaryMapper.firstIndex)
equations.primaryMapper.dimension == orig(equations.primaryMapper.dimension)
equations.time == orig(equations.time)
equations.primaryState == orig(equations.primaryState)
equations.primaryState[] == orig(equations.primaryState[])
equations.primaryStateDot == orig(equations.primaryStateDot)
equations.primaryStateDot[] == orig(equations.primaryStateDot[])
equations.components == orig(equations.components)
equations.components[] == orig(equations.components[])
equations.components.getClass().getName() == orig(equations.components.getClass().getName())
this.stepStart == Double.NaN
this.resetOccurred == false
this.expandable.primaryMapper.dimension one of { 2, 3, 4 }
this.expandable.primaryStateDot[] elements != 0
equations.primary != null
equations.primaryMapper != null
equations.primaryMapper.firstIndex == 0
equations.time >= 0.0
equations.primaryState != null
equations.primaryStateDot != null
equations.primaryStateDot[] elements == 0.0
equations.components != null
equations.components[] elements != null
equations.components[].getClass().getName() elements == org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent.class
equations.components[].getClass().getName() one of { [], [org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent] }
equations.components.getClass().getName() == java.util.ArrayList.class
size(this.expandable.primaryState[]) one of { 2, 3, 4 }
size(this.expandable.primaryStateDot[]) one of { 2, 3, 4 }
size(equations.components[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math3.ode.AbstractIntegrator.setEquations(org.apache.commons.math3.ode.ExpandableStatefulODE):::ENTER
this.stepStart == Double.NaN
this.resetOccurred == false
this.expandable.primaryMapper.dimension one of { 2, 3, 4 }
this.expandable.primaryStateDot[] elements != 0
equations != null
equations.primary != null
equations.primaryMapper != null
equations.primaryMapper.firstIndex == 0
equations.time >= 0.0
equations.primaryState != null
equations.primaryStateDot != null
equations.primaryStateDot[] elements == 0.0
equations.components != null
equations.components[] elements != null
equations.components[].getClass().getName() elements == org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent.class
equations.components[].getClass().getName() one of { [], [org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent] }
equations.components.getClass().getName() == java.util.ArrayList.class
size(this.expandable.primaryState[]) one of { 2, 3, 4 }
size(this.expandable.primaryStateDot[]) one of { 2, 3, 4 }
size(equations.components[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math3.ode.AbstractIntegrator.setEquations(org.apache.commons.math3.ode.ExpandableStatefulODE):::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable.primary.getClass().getName() == orig(this.expandable.primary.getClass().getName())
this.expandable.primaryMapper.firstIndex == orig(this.expandable.primaryMapper.firstIndex)
this.expandable.primaryMapper.dimension == orig(this.expandable.primaryMapper.dimension)
this.expandable.components[].getClass().getName() == orig(this.expandable.components[].getClass().getName())
this.expandable.components.getClass().getName() == orig(this.expandable.components.getClass().getName())
equations.primary == orig(equations.primary)
equations.primary.getClass().getName() == orig(equations.primary.getClass().getName())
equations.primaryMapper == orig(equations.primaryMapper)
equations.primaryMapper.firstIndex == orig(equations.primaryMapper.firstIndex)
equations.primaryMapper.dimension == orig(equations.primaryMapper.dimension)
equations.time == orig(equations.time)
equations.primaryState == orig(equations.primaryState)
equations.primaryState[] == orig(equations.primaryState[])
equations.primaryStateDot == orig(equations.primaryStateDot)
equations.primaryStateDot[] == orig(equations.primaryStateDot[])
equations.components == orig(equations.components)
equations.components[] == orig(equations.components[])
equations.components.getClass().getName() == orig(equations.components.getClass().getName())
size(this.expandable.primaryState[]) == orig(size(this.expandable.primaryState[]))
size(this.expandable.primaryStateDot[]) == orig(size(this.expandable.primaryStateDot[]))
size(this.expandable.components[]) == orig(size(this.expandable.components[]))
this.stepStart == Double.NaN
this.resetOccurred == false
this.expandable != null
this.expandable.time >= 0.0
this.expandable.primaryStateDot[] elements == 0.0
equations.primary != null
equations.primaryMapper != null
equations.primaryMapper.firstIndex == 0
equations.time >= 0.0
equations.primaryState != null
equations.primaryStateDot != null
equations.primaryStateDot[] elements == 0.0
equations.components != null
equations.components[] elements != null
equations.components[].getClass().getName() elements == org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent.class
equations.components[].getClass().getName() one of { [], [org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent] }
equations.components.getClass().getName() == java.util.ArrayList.class
size(equations.components[]) one of { 0, 1 }
this.expandable.time <= orig(this.expandable.time)
===========================================================================
org.apache.commons.math3.ode.AbstractIntegrator.setMaxEvaluations(int):::ENTER
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 0.001, Double.NaN }
this.resetOccurred == false
this.evaluations.maximalCount one of { 0, 5000, 2147483647 }
this.expandable.primaryMapper.dimension == 2
this.expandable.time == 20.0
this.expandable.primaryState[] sorted by <
this.expandable.components[].getClass().getName() == [org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent]
maxEvaluations != 0
maxEvaluations >= -1
size(this.expandable.primaryState[]) == 2
size(this.expandable.primaryStateDot[]) == 2
size(this.expandable.components[]) == 1
===========================================================================
org.apache.commons.math3.ode.AbstractIntegrator.setMaxEvaluations(int):::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
this.expandable.primary == orig(this.expandable.primary)
this.expandable.primary.getClass().getName() == orig(this.expandable.primary.getClass().getName())
this.expandable.primaryMapper == orig(this.expandable.primaryMapper)
this.expandable.primaryMapper.firstIndex == orig(this.expandable.primaryMapper.firstIndex)
this.expandable.primaryMapper.dimension == orig(this.expandable.primaryMapper.dimension)
this.expandable.time == orig(this.expandable.time)
this.expandable.primaryState == orig(this.expandable.primaryState)
this.expandable.primaryState[] == orig(this.expandable.primaryState[])
this.expandable.primaryStateDot == orig(this.expandable.primaryStateDot)
this.expandable.primaryStateDot[] == orig(this.expandable.primaryStateDot[])
this.expandable.components == orig(this.expandable.components)
this.expandable.components[] == orig(this.expandable.components[])
this.expandable.components.getClass().getName() == orig(this.expandable.components.getClass().getName())
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 0.001, Double.NaN }
this.resetOccurred == false
this.expandable.primaryMapper.dimension == 2
this.expandable.time == 20.0
this.expandable.primaryState[] sorted by <
this.expandable.components[].getClass().getName() == [org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent]
size(this.expandable.primaryState[]) == 2
size(this.expandable.primaryStateDot[]) == 2
size(this.expandable.components[]) == 1
===========================================================================
org.apache.commons.math3.ode.AbstractIntegrator.setStateInitialized(boolean):::ENTER
this.stepStart >= 0.0
this.resetOccurred == false
this.evaluations.count == 0
this.expandable != null
this.expandable.time >= 0.0
this.expandable.primaryStateDot[] elements == 0.0
stateInitialized == false
===========================================================================
org.apache.commons.math3.ode.AbstractIntegrator.setStateInitialized(boolean):::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
this.expandable.primary == orig(this.expandable.primary)
this.expandable.primary.getClass().getName() == orig(this.expandable.primary.getClass().getName())
this.expandable.primaryMapper == orig(this.expandable.primaryMapper)
this.expandable.primaryMapper.firstIndex == orig(this.expandable.primaryMapper.firstIndex)
this.expandable.primaryMapper.dimension == orig(this.expandable.primaryMapper.dimension)
this.expandable.time == orig(this.expandable.time)
this.expandable.primaryState == orig(this.expandable.primaryState)
this.expandable.primaryState[] == orig(this.expandable.primaryState[])
this.expandable.primaryStateDot == orig(this.expandable.primaryStateDot)
this.expandable.primaryStateDot[] == orig(this.expandable.primaryStateDot[])
this.expandable.components == orig(this.expandable.components)
this.expandable.components[] == orig(this.expandable.components[])
this.expandable.components.getClass().getName() == orig(this.expandable.components.getClass().getName())
this.stepStart >= 0.0
this.resetOccurred == false
this.statesInitialized == false
this.evaluations.count == 0
this.expandable != null
this.expandable.time >= 0.0
this.expandable.primaryStateDot[] elements == 0.0
===========================================================================
org.apache.commons.math3.ode.AbstractParameterizable:::OBJECT
this.parametersNames.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.apache.commons.math3.ode.AbstractParameterizable.AbstractParameterizable(java.lang.String[]):::ENTER
names.getClass().getName() == java.lang.String[].class
names[] elements != null
names[].toString one of { [b], [cx, cy, omega] }
size(names[]) one of { 1, 3 }
===========================================================================
org.apache.commons.math3.ode.AbstractParameterizable.AbstractParameterizable(java.lang.String[]):::EXIT
names[] == orig(names[])
names[] elements != null
names[].toString one of { [b], [cx, cy, omega] }
===========================================================================
org.apache.commons.math3.ode.AbstractParameterizable.complainIfNotSupported(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math3.ode.AbstractParameterizable.complainIfNotSupported(java.lang.String):::EXIT
this.parametersNames == orig(this.parametersNames)
this.parametersNames.getClass().getName() == orig(this.parametersNames.getClass().getName())
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.math3.ode.AbstractParameterizable.isSupported(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math3.ode.AbstractParameterizable.isSupported(java.lang.String):::EXIT60
===========================================================================
org.apache.commons.math3.ode.AbstractParameterizable.isSupported(java.lang.String):::EXIT60;condition="return == true"
===========================================================================
org.apache.commons.math3.ode.AbstractParameterizable.isSupported(java.lang.String):::EXIT
this.parametersNames == orig(this.parametersNames)
this.parametersNames.getClass().getName() == orig(this.parametersNames.getClass().getName())
name.toString == orig(name.toString)
return == true
===========================================================================
org.apache.commons.math3.ode.AbstractParameterizable.isSupported(java.lang.String):::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math3.ode.ContinuousOutputModel:::CLASS
===========================================================================
org.apache.commons.math3.ode.ContinuousOutputModel:::OBJECT
this.initialTime >= 0.0
this.finalTime >= 0.0
this.index >= 0
this.steps[] elements != null
this.steps.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.apache.commons.math3.ode.ContinuousOutputModel.ContinuousOutputModel():::EXIT
this.initialTime == Double.NaN
this.finalTime == Double.NaN
this.forward == true
this.index == 0
this.steps[] == []
this.steps[].getClass().getName() == []
===========================================================================
org.apache.commons.math3.ode.ContinuousOutputModel.append(org.apache.commons.math3.ode.ContinuousOutputModel):::ENTER
this has only one value
this.initialTime one of { 6.283185307179586, Double.NaN }
this.finalTime one of { 3.141592653589793, Double.NaN }
this.index one of { 0, 32 }
this.steps has only one value
this.steps[].getClass().getName() elements == org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.class
this.steps[].getClass().getName() one of { [], [org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator] }
model.initialTime one of { 3.141592653589793, 6.283185307179586, Double.NaN }
model.finalTime one of { 0.0, 3.141592653589793, Double.NaN }
model.index one of { 0, 5, 32 }
model.steps[].getClass().getName() elements == org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.class
model.steps.getClass().getName() == java.util.ArrayList.class
size(this.steps[]) one of { 0, 33 }
size(model.steps[]) one of { 0, 6, 33 }
===========================================================================
org.apache.commons.math3.ode.ContinuousOutputModel.append(org.apache.commons.math3.ode.ContinuousOutputModel):::EXIT134
this.initialTime == orig(this.initialTime)
this.finalTime == orig(this.finalTime)
this.forward == orig(this.forward)
this.index == orig(this.index)
this.steps[] == orig(this.steps[])
this.finalTime == 3.141592653589793
this.index == 32
this.steps[] contains no nulls and has only one value, of length 33
this.steps[].getClass().getName() == [org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator]
model.initialTime == Double.NaN
model.finalTime == Double.NaN
model.forward == true
model.index == 0
model.steps has only one value
model.steps[] == []
model.steps[].getClass().getName() == []
orig(model) has only one value
orig(model.initialTime) == Double.NaN
orig(model.finalTime) == Double.NaN
size(this.steps[]) == 33
===========================================================================
org.apache.commons.math3.ode.ContinuousOutputModel.append(org.apache.commons.math3.ode.ContinuousOutputModel):::EXIT170
model.initialTime == orig(model.initialTime)
model.finalTime == orig(model.finalTime)
model.initialTime one of { 3.141592653589793, 6.283185307179586 }
model.finalTime one of { 0.0, 3.141592653589793 }
model.forward == false
model.index one of { 5, 32 }
model.steps[].getClass().getName() one of { [org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator], [org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator] }
size(model.steps[]) one of { 6, 33 }
===========================================================================
org.apache.commons.math3.ode.ContinuousOutputModel.append(org.apache.commons.math3.ode.ContinuousOutputModel):::EXIT
this.steps == orig(this.steps)
this.steps.getClass().getName() == orig(this.steps.getClass().getName())
model.forward == orig(model.forward)
model.index == orig(model.index)
model.steps == orig(model.steps)
model.steps[] == orig(model.steps[])
model.steps.getClass().getName() == orig(model.steps.getClass().getName())
(model.initialTime == Double.NaN)  <==>  (model.finalTime == Double.NaN)
(model.initialTime == Double.NaN)  <==>  (model.forward == true)
(model.initialTime == Double.NaN)  <==>  (model.index == 0)
(model.initialTime == Double.NaN)  <==>  (model.steps[].getClass().getName() == [])
(model.initialTime == Double.NaN)  <==>  (orig(model.finalTime) == Double.NaN)
(model.initialTime == Double.NaN)  <==>  (orig(model.initialTime) == Double.NaN)
(model.initialTime == Double.NaN)  <==>  (this.finalTime == orig(this.finalTime))
(model.initialTime == Double.NaN)  <==>  (this.index == orig(this.index))
(model.initialTime == Double.NaN)  ==>  (model.steps has only one value)
(model.initialTime == Double.NaN)  ==>  (model.steps[] == [])
(model.initialTime == Double.NaN)  ==>  (orig(model) has only one value)
(model.initialTime == Double.NaN)  ==>  (orig(size(this.steps[])) == 33)
(model.initialTime == Double.NaN)  ==>  (orig(this.finalTime) == 3.141592653589793)
(model.initialTime == Double.NaN)  ==>  (orig(this.forward) == false)
(model.initialTime == Double.NaN)  ==>  (orig(this.index) == 32)
(model.initialTime == Double.NaN)  ==>  (orig(this.initialTime) == 6.283185307179586)
(model.initialTime == Double.NaN)  ==>  (orig(this.steps[]) contains no nulls and has only one value, of length 33)
(model.initialTime == Double.NaN)  ==>  (orig(this.steps[].getClass().getName()) == [org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator])
(model.initialTime == Double.NaN)  ==>  (size(this.steps[]) == 33)
(model.initialTime == Double.NaN)  ==>  (this.finalTime == 3.141592653589793)
(model.initialTime == Double.NaN)  ==>  (this.forward == orig(this.forward))
(model.initialTime == Double.NaN)  ==>  (this.index == 32)
(model.initialTime == Double.NaN)  ==>  (this.initialTime == orig(this.initialTime))
(model.initialTime == Double.NaN)  ==>  (this.steps[] contains no nulls and has only one value, of length 33)
(model.initialTime == Double.NaN)  ==>  (this.steps[].getClass().getName() == [org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator])
(model.initialTime one of { 3.141592653589793, 6.283185307179586 })  <==>  (model.finalTime == orig(model.finalTime))
(model.initialTime one of { 3.141592653589793, 6.283185307179586 })  <==>  (model.finalTime one of { 0.0, 3.141592653589793 })
(model.initialTime one of { 3.141592653589793, 6.283185307179586 })  <==>  (model.forward == false)
(model.initialTime one of { 3.141592653589793, 6.283185307179586 })  <==>  (model.index one of { 5, 32 })
(model.initialTime one of { 3.141592653589793, 6.283185307179586 })  <==>  (model.initialTime == orig(model.initialTime))
(model.initialTime one of { 3.141592653589793, 6.283185307179586 })  <==>  (model.steps[].getClass().getName() one of { [org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator], [org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator] })
(model.initialTime one of { 3.141592653589793, 6.283185307179586 })  <==>  (orig(model.finalTime) one of { 0.0, 3.141592653589793 })
(model.initialTime one of { 3.141592653589793, 6.283185307179586 })  <==>  (orig(model.initialTime) one of { 3.141592653589793, 6.283185307179586 })
(model.initialTime one of { 3.141592653589793, 6.283185307179586 })  <==>  (size(model.steps[]) one of { 6, 33 })
(model.initialTime one of { 3.141592653589793, 6.283185307179586 })  ==>  (model.steps[].getClass().getName() elements == org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.class)
(model.initialTime one of { 3.141592653589793, 6.283185307179586 })  ==>  (orig(size(this.steps[])) one of { 0, 33 })
(model.initialTime one of { 3.141592653589793, 6.283185307179586 })  ==>  (orig(this.finalTime) one of { 3.141592653589793, Double.NaN })
(model.initialTime one of { 3.141592653589793, 6.283185307179586 })  ==>  (orig(this.index) one of { 0, 32 })
(model.initialTime one of { 3.141592653589793, 6.283185307179586 })  ==>  (orig(this.initialTime) one of { 6.283185307179586, Double.NaN })
(model.initialTime one of { 3.141592653589793, 6.283185307179586 })  ==>  (orig(this.steps[].getClass().getName()) one of { [], [org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator] })
(model.initialTime one of { 3.141592653589793, 6.283185307179586 })  ==>  (size(this.steps[]) one of { 33, 39 })
(model.initialTime one of { 3.141592653589793, 6.283185307179586 })  ==>  (this.finalTime one of { 0.0, 3.141592653589793 })
(model.initialTime one of { 3.141592653589793, 6.283185307179586 })  ==>  (this.index one of { 32, 38 })
(model.initialTime one of { 3.141592653589793, 6.283185307179586 })  ==>  (this.steps[].getClass().getName() one of { [org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator], [org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator] })
this.initialTime == 6.283185307179586
this.finalTime one of { 0.0, 3.141592653589793 }
this.forward == false
this.index one of { 32, 38 }
this.steps has only one value
this.steps[].getClass().getName() elements == org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.class
this.steps[].getClass().getName() one of { [org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator], [org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator] }
model.initialTime one of { 3.141592653589793, 6.283185307179586, Double.NaN }
model.finalTime one of { 0.0, 3.141592653589793, Double.NaN }
model.index one of { 0, 5, 32 }
model.steps[].getClass().getName() elements == org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.class
model.steps.getClass().getName() == java.util.ArrayList.class
size(this.steps[]) one of { 33, 39 }
size(model.steps[]) one of { 0, 6, 33 }
===========================================================================
org.apache.commons.math3.ode.ContinuousOutputModel.getFinalTime():::ENTER
this has only one value
this.initialTime == 6.283185307179586
this.finalTime == 0.0
this.forward == false
this.index == 38
this.steps has only one value
this.steps[] contains no nulls and has only one value, of length 39
this.steps[].getClass().getName() == [org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator]
this.steps[].getClass().getName() elements == org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.class
size(this.steps[]) == 39
===========================================================================
org.apache.commons.math3.ode.ContinuousOutputModel.getFinalTime():::EXIT
this.initialTime == orig(this.initialTime)
this.finalTime == orig(this.finalTime)
this.forward == orig(this.forward)
this.index == orig(this.index)
this.steps == orig(this.steps)
this.steps[] == orig(this.steps[])
this.steps.getClass().getName() == orig(this.steps.getClass().getName())
this.initialTime == 6.283185307179586
this.finalTime == 0.0
this.forward == false
this.index == 38
this.steps has only one value
this.steps[] contains no nulls and has only one value, of length 39
this.steps[].getClass().getName() == [org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator]
this.steps[].getClass().getName() elements == org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.class
return == 0.0
size(this.steps[]) == 39
===========================================================================
org.apache.commons.math3.ode.ContinuousOutputModel.getInitialTime():::ENTER
this.initialTime one of { 3.141592653589793, 6.283185307179586 }
this.finalTime == 0.0
this.forward == false
this.index one of { 5, 38 }
this.steps[].getClass().getName() elements == org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.class
this.steps[].getClass().getName() one of { [org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator], [org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator] }
size(this.steps[]) one of { 6, 39 }
===========================================================================
org.apache.commons.math3.ode.ContinuousOutputModel.getInitialTime():::EXIT
this.initialTime == orig(this.initialTime)
this.finalTime == orig(this.finalTime)
this.forward == orig(this.forward)
this.index == orig(this.index)
this.steps == orig(this.steps)
this.steps[] == orig(this.steps[])
this.steps.getClass().getName() == orig(this.steps.getClass().getName())
this.initialTime one of { 3.141592653589793, 6.283185307179586 }
this.finalTime == 0.0
this.forward == false
this.index one of { 5, 38 }
this.steps[].getClass().getName() elements == org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.class
this.steps[].getClass().getName() one of { [org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator], [org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator] }
return one of { 3.141592653589793, 6.283185307179586 }
size(this.steps[]) one of { 6, 39 }
===========================================================================
org.apache.commons.math3.ode.ContinuousOutputModel.getInterpolatedState():::ENTER
this.initialTime one of { 0.0, 3.141592653589793, 6.283185307179586 }
===========================================================================
org.apache.commons.math3.ode.ContinuousOutputModel.getInterpolatedState():::EXIT
this.initialTime == orig(this.initialTime)
this.finalTime == orig(this.finalTime)
this.forward == orig(this.forward)
this.index == orig(this.index)
this.steps == orig(this.steps)
this.steps[] == orig(this.steps[])
this.steps.getClass().getName() == orig(this.steps.getClass().getName())
this.initialTime one of { 0.0, 3.141592653589793, 6.283185307179586 }
size(return[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math3.ode.ContinuousOutputModel.getInterpolatedTime():::ENTER
this has only one value
this.initialTime == 6.283185307179586
this.finalTime == 0.0
this.forward == false
this.index == 38
this.steps has only one value
this.steps[] contains no nulls and has only one value, of length 39
this.steps[].getClass().getName() == [org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator]
this.steps[].getClass().getName() elements == org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.class
size(this.steps[]) == 39
===========================================================================
org.apache.commons.math3.ode.ContinuousOutputModel.getInterpolatedTime():::EXIT
this.initialTime == orig(this.initialTime)
this.finalTime == orig(this.finalTime)
this.forward == orig(this.forward)
this.index == orig(this.index)
this.steps == orig(this.steps)
this.steps[] == orig(this.steps[])
this.steps.getClass().getName() == orig(this.steps.getClass().getName())
this.initialTime == 6.283185307179586
this.finalTime == 0.0
this.forward == false
this.index == 38
this.steps has only one value
this.steps[] contains no nulls and has only one value, of length 39
this.steps[].getClass().getName() == [org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator]
this.steps[].getClass().getName() elements == org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.class
return == 0.0
size(this.steps[]) == 39
===========================================================================
org.apache.commons.math3.ode.ContinuousOutputModel.handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean):::ENTER
this.finalTime == Double.NaN
this.index == 0
===========================================================================
org.apache.commons.math3.ode.ContinuousOutputModel.handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean):::EXIT
this.steps == orig(this.steps)
this.steps.getClass().getName() == orig(this.steps.getClass().getName())
size(this.steps[])-1 == orig(size(this.steps[]))
this.initialTime one of { 0.0, 3.141592653589793, 6.283185307179586 }
size(this.steps[]) >= 1
this.finalTime != orig(this.finalTime)
this.index >= orig(this.index)
===========================================================================
org.apache.commons.math3.ode.ContinuousOutputModel.init(double, double[], double):::ENTER
this.initialTime == Double.NaN
this.finalTime == Double.NaN
this.forward == true
this.index == 0
this.steps[] == []
this.steps[].getClass().getName() == []
t0 one of { 0.0, 3.141592653589793, 6.283185307179586 }
size(y0[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math3.ode.ContinuousOutputModel.init(double, double[], double):::EXIT
this.forward == orig(this.forward)
this.index == orig(this.index)
this.steps == orig(this.steps)
this.steps[] == orig(this.steps[])
this.steps.getClass().getName() == orig(this.steps.getClass().getName())
y0[] == orig(y0[])
this.initialTime == Double.NaN
this.finalTime == Double.NaN
this.forward == true
this.index == 0
this.steps[] == []
this.steps[].getClass().getName() == []
===========================================================================
org.apache.commons.math3.ode.ContinuousOutputModel.locatePoint(double, org.apache.commons.math3.ode.sampling.StepInterpolator):::ENTER
this.initialTime one of { 0.0, 6.283185307179586 }
this.finalTime one of { 0.0, 4.0, 20.0 }
===========================================================================
org.apache.commons.math3.ode.ContinuousOutputModel.locatePoint(double, org.apache.commons.math3.ode.sampling.StepInterpolator):::EXIT351
this.initialTime == 0.0
this.finalTime one of { 4.0, 20.0 }
this.forward == true
return == -1
===========================================================================
org.apache.commons.math3.ode.ContinuousOutputModel.locatePoint(double, org.apache.commons.math3.ode.sampling.StepInterpolator):::EXIT353
this.initialTime == 0.0
this.finalTime one of { 4.0, 20.0 }
this.forward == true
return == 1
===========================================================================
org.apache.commons.math3.ode.ContinuousOutputModel.locatePoint(double, org.apache.commons.math3.ode.sampling.StepInterpolator):::EXIT355
this.initialTime == 0.0
this.finalTime one of { 4.0, 20.0 }
this.forward == true
this.index >= 1
return == 0
===========================================================================
org.apache.commons.math3.ode.ContinuousOutputModel.locatePoint(double, org.apache.commons.math3.ode.sampling.StepInterpolator):::EXIT359
this.initialTime == 6.283185307179586
this.finalTime == 0.0
this.forward == false
this.steps has only one value
this.steps[] contains no nulls and has only one value, of length 39
this.steps[].getClass().getName() == [org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator]
this.steps[].getClass().getName() elements == org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.class
return == -1
orig(this) has only one value
orig(interval.getClass().getName()) == org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.class
size(this.steps[]) == 39
===========================================================================
org.apache.commons.math3.ode.ContinuousOutputModel.locatePoint(double, org.apache.commons.math3.ode.sampling.StepInterpolator):::EXIT361
this.initialTime == 6.283185307179586
this.finalTime == 0.0
this.forward == false
this.steps has only one value
this.steps[] contains no nulls and has only one value, of length 39
this.steps[].getClass().getName() == [org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator]
this.steps[].getClass().getName() elements == org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.class
return == 1
orig(this) has only one value
orig(interval.getClass().getName()) == org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.class
size(this.steps[]) == 39
===========================================================================
org.apache.commons.math3.ode.ContinuousOutputModel.locatePoint(double, org.apache.commons.math3.ode.sampling.StepInterpolator):::EXIT363
this.initialTime == 6.283185307179586
this.finalTime == 0.0
this.forward == false
this.steps has only one value
this.steps[] contains no nulls and has only one value, of length 39
this.steps[].getClass().getName() == [org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator]
this.steps[].getClass().getName() elements == org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.class
return == 0
orig(this) has only one value
orig(interval.getClass().getName()) == org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.class
size(this.steps[]) == 39
===========================================================================
org.apache.commons.math3.ode.ContinuousOutputModel.locatePoint(double, org.apache.commons.math3.ode.sampling.StepInterpolator):::EXIT
this.initialTime == orig(this.initialTime)
this.finalTime == orig(this.finalTime)
this.forward == orig(this.forward)
this.index == orig(this.index)
this.steps == orig(this.steps)
this.steps[] == orig(this.steps[])
this.steps.getClass().getName() == orig(this.steps.getClass().getName())
this.initialTime one of { 0.0, 6.283185307179586 }
this.finalTime one of { 0.0, 4.0, 20.0 }
return one of { -1, 0, 1 }
===========================================================================
org.apache.commons.math3.ode.ContinuousOutputModel.setInterpolatedTime(double):::ENTER
this.initialTime one of { 0.0, 6.283185307179586 }
this.finalTime one of { 0.0, 4.0, 20.0 }
===========================================================================
org.apache.commons.math3.ode.ContinuousOutputModel.setInterpolatedTime(double):::EXIT260
this.initialTime == 0.0
this.finalTime one of { 4.0, 20.0 }
this.forward == true
this.index == 0
this.steps[].getClass().getName() one of { [org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator], [org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator] }
size(this.steps[]) one of { 108, 387 }
this.index % orig(this.index) == 0
===========================================================================
org.apache.commons.math3.ode.ContinuousOutputModel.setInterpolatedTime(double):::EXIT265
this.index >= orig(this.index)
===========================================================================
org.apache.commons.math3.ode.ContinuousOutputModel.setInterpolatedTime(double):::EXIT283
===========================================================================
org.apache.commons.math3.ode.ContinuousOutputModel.setInterpolatedTime(double):::EXIT330
this.index >= 1
this.index != orig(this.index)
===========================================================================
org.apache.commons.math3.ode.ContinuousOutputModel.setInterpolatedTime(double):::EXIT
this.initialTime == orig(this.initialTime)
this.finalTime == orig(this.finalTime)
this.forward == orig(this.forward)
this.steps == orig(this.steps)
this.steps[] == orig(this.steps[])
this.steps.getClass().getName() == orig(this.steps.getClass().getName())
this.initialTime one of { 0.0, 6.283185307179586 }
this.finalTime one of { 0.0, 4.0, 20.0 }
===========================================================================
org.apache.commons.math3.ode.ContinuousOutputModelTest$1:::OBJECT
this has only one value
org.apache.commons.math3.ode.ContinuousOutputModelTest.this has only one value
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb has only one value
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.e == 0.9
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.y has only one value
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.y[] elements == 0.0
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.n == 4
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.calls == 0
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.t0 == 0.0
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.y0 has only one value
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.t1 == 20.0
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.errorScale has only one value
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.errorScale[] elements == 1.0
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.integ has only one value
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.integ.getClass().getName() == org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.class
size(org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.y[]) == 4
size(org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.y0[]) == 4
size(org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math3.ode.ContinuousOutputModelTest$1.(org.apache.commons.math3.ode.ContinuousOutputModelTest):::ENTER
org.apache.commons.math3.ode.ContinuousOutputModelTest.this has only one value
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb has only one value
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.e == 0.9
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.y has only one value
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.y[] elements == 0.0
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.n == 4
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.calls == 0
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.t0 == 0.0
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.y0 has only one value
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.t1 == 20.0
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.errorScale has only one value
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.errorScale[] elements == 1.0
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.integ has only one value
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.integ.getClass().getName() == org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.class
size(org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.y[]) == 4
size(org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.y0[]) == 4
size(org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math3.ode.ContinuousOutputModelTest$1.(org.apache.commons.math3.ode.ContinuousOutputModelTest):::EXIT
org.apache.commons.math3.ode.ContinuousOutputModelTest.this == orig(org.apache.commons.math3.ode.ContinuousOutputModelTest.this)
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb == orig(org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb)
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.e == orig(org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.e)
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.y == orig(org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.y)
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.y[] == orig(org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.y[])
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.n == orig(org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.n)
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.calls == orig(org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.calls)
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.t0 == orig(org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.t0)
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.y0 == orig(org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.y0)
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.y0[] == orig(org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.y0[])
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.t1 == orig(org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.t1)
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.errorScale == orig(org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.errorScale)
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.errorScale[] == orig(org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.errorScale[])
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.integ == orig(org.apache.commons.math3.ode.ContinuousOutputModelTest.this.integ)
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.integ.getClass().getName() == orig(org.apache.commons.math3.ode.ContinuousOutputModelTest.this.integ.getClass().getName())
===========================================================================
org.apache.commons.math3.ode.ContinuousOutputModelTest$1.computeDerivatives(double, double[], double[]):::ENTER
size(y[]) == 2
size(dot[]) == 2
===========================================================================
org.apache.commons.math3.ode.ContinuousOutputModelTest$1.computeDerivatives(double, double[], double[]):::EXIT
org.apache.commons.math3.ode.ContinuousOutputModelTest.this == orig(org.apache.commons.math3.ode.ContinuousOutputModelTest.this)
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb == orig(org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb)
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.e == orig(org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.e)
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.y == orig(org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.y)
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.y[] == orig(org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.y[])
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.n == orig(org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.n)
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.calls == orig(org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.calls)
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.t0 == orig(org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.t0)
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.y0 == orig(org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.y0)
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.y0[] == orig(org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.y0[])
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.t1 == orig(org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.t1)
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.errorScale == orig(org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.errorScale)
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.errorScale[] == orig(org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.errorScale[])
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.integ == orig(org.apache.commons.math3.ode.ContinuousOutputModelTest.this.integ)
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.integ.getClass().getName() == orig(org.apache.commons.math3.ode.ContinuousOutputModelTest.this.integ.getClass().getName())
y[] == orig(y[])
===========================================================================
org.apache.commons.math3.ode.ContinuousOutputModelTest$1.getDimension():::ENTER
===========================================================================
org.apache.commons.math3.ode.ContinuousOutputModelTest$1.getDimension():::EXIT
org.apache.commons.math3.ode.ContinuousOutputModelTest.this == orig(org.apache.commons.math3.ode.ContinuousOutputModelTest.this)
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb == orig(org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb)
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.e == orig(org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.e)
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.y == orig(org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.y)
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.y[] == orig(org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.y[])
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.n == orig(org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.n)
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.calls == orig(org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.calls)
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.t0 == orig(org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.t0)
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.y0 == orig(org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.y0)
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.y0[] == orig(org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.y0[])
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.t1 == orig(org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.t1)
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.errorScale == orig(org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.errorScale)
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.errorScale[] == orig(org.apache.commons.math3.ode.ContinuousOutputModelTest.this.pb.errorScale[])
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.integ == orig(org.apache.commons.math3.ode.ContinuousOutputModelTest.this.integ)
org.apache.commons.math3.ode.ContinuousOutputModelTest.this.integ.getClass().getName() == orig(org.apache.commons.math3.ode.ContinuousOutputModelTest.this.integ.getClass().getName())
return == 2
===========================================================================
org.apache.commons.math3.ode.ContinuousOutputModelTest:::OBJECT
this.pb.e == 0.9
this.pb.y[] one of { [-1.8298368664672038, -0.1603952815207037, 0.20032739482773365, -0.22065263459462622], [0.0, 0.0, 0.0, 0.0] }
this.pb.n == 4
this.pb.calls one of { 0, 2768 }
this.pb.t0 == 0.0
this.pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
this.pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
this.pb.t1 == 20.0
this.pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
this.pb.errorScale[] elements == 1.0
this.integ.getClass().getName() == org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.class
size(this.pb.y[]) == 4
size(this.pb.y0[]) == 4
size(this.pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math3.ode.ContinuousOutputModelTest.ContinuousOutputModelTest():::EXIT
this.pb == null
this.integ == null
===========================================================================
org.apache.commons.math3.ode.ContinuousOutputModelTest.setUp():::ENTER
this.pb == null
this.integ == null
===========================================================================
org.apache.commons.math3.ode.ContinuousOutputModelTest.setUp():::EXIT
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
===========================================================================
org.apache.commons.math3.ode.ContinuousOutputModelTest.tearDown():::ENTER
===========================================================================
org.apache.commons.math3.ode.ContinuousOutputModelTest.tearDown():::EXIT
this.pb == null
this.integ == null
===========================================================================
org.apache.commons.math3.ode.ContinuousOutputModelTest.testBoundaries():::ENTER
this has only one value
this.pb has only one value
this.pb.y has only one value
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
this.pb.y0 has only one value
this.pb.errorScale has only one value
this.integ has only one value
===========================================================================
org.apache.commons.math3.ode.ContinuousOutputModelTest.testBoundaries():::EXIT
this.pb == orig(this.pb)
this.pb.e == orig(this.pb.e)
this.pb.y == orig(this.pb.y)
this.pb.y[] == orig(this.pb.y[])
this.pb.n == orig(this.pb.n)
this.pb.t0 == orig(this.pb.t0)
this.pb.y0 == orig(this.pb.y0)
this.pb.y0[] == orig(this.pb.y0[])
this.pb.t1 == orig(this.pb.t1)
this.pb.errorScale == orig(this.pb.errorScale)
this.pb.errorScale[] == orig(this.pb.errorScale[])
this.integ == orig(this.integ)
this.integ.getClass().getName() == orig(this.integ.getClass().getName())
this.pb has only one value
this.pb.y has only one value
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 2768
this.pb.y0 has only one value
this.pb.errorScale has only one value
this.integ has only one value
===========================================================================
org.apache.commons.math3.ode.ContinuousOutputModelTest.testModelsMerging():::ENTER
this has only one value
this.pb has only one value
this.pb.y has only one value
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
this.pb.y0 has only one value
this.pb.errorScale has only one value
this.integ has only one value
===========================================================================
org.apache.commons.math3.ode.ContinuousOutputModelTest.testModelsMerging():::EXIT
this.pb == orig(this.pb)
this.pb.e == orig(this.pb.e)
this.pb.y == orig(this.pb.y)
this.pb.y[] == orig(this.pb.y[])
this.pb.n == orig(this.pb.n)
this.pb.calls == orig(this.pb.calls)
this.pb.t0 == orig(this.pb.t0)
this.pb.y0 == orig(this.pb.y0)
this.pb.y0[] == orig(this.pb.y0[])
this.pb.t1 == orig(this.pb.t1)
this.pb.errorScale == orig(this.pb.errorScale)
this.pb.errorScale[] == orig(this.pb.errorScale[])
this.integ == orig(this.integ)
this.integ.getClass().getName() == orig(this.integ.getClass().getName())
this.pb has only one value
this.pb.y has only one value
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
this.pb.y0 has only one value
this.pb.errorScale has only one value
this.integ has only one value
===========================================================================
org.apache.commons.math3.ode.ContinuousOutputModelTest.testRandomAccess():::ENTER
this has only one value
this.pb has only one value
this.pb.y has only one value
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
this.pb.y0 has only one value
this.pb.errorScale has only one value
this.integ has only one value
===========================================================================
org.apache.commons.math3.ode.ContinuousOutputModelTest.testRandomAccess():::EXIT
this.pb == orig(this.pb)
this.pb.e == orig(this.pb.e)
this.pb.y == orig(this.pb.y)
this.pb.n == orig(this.pb.n)
this.pb.t0 == orig(this.pb.t0)
this.pb.y0 == orig(this.pb.y0)
this.pb.y0[] == orig(this.pb.y0[])
this.pb.t1 == orig(this.pb.t1)
this.pb.errorScale == orig(this.pb.errorScale)
this.pb.errorScale[] == orig(this.pb.errorScale[])
this.integ == orig(this.integ)
this.integ.getClass().getName() == orig(this.integ.getClass().getName())
size(this.pb.y[]) == orig(size(this.pb.y[]))
this.pb has only one value
this.pb.y has only one value
this.pb.y[] == [-1.8298368664672038, -0.1603952815207037, 0.20032739482773365, -0.22065263459462622]
this.pb.calls == 2768
this.pb.y0 has only one value
this.pb.errorScale has only one value
this.integ has only one value
===========================================================================
org.apache.commons.math3.ode.EquationsMapper:::CLASS
===========================================================================
org.apache.commons.math3.ode.EquationsMapper:::OBJECT
this.firstIndex one of { 0, 2 }
this.dimension >= 1
===========================================================================
org.apache.commons.math3.ode.EquationsMapper.EquationsMapper(int, int):::ENTER
firstIndex one of { 0, 2 }
===========================================================================
org.apache.commons.math3.ode.EquationsMapper.EquationsMapper(int, int):::EXIT
===========================================================================
org.apache.commons.math3.ode.EquationsMapper.extractEquationData(double[], double[]):::ENTER
complete != null
equationData != null
size(complete[]) >= 1
size(equationData[]) >= 1
===========================================================================
org.apache.commons.math3.ode.EquationsMapper.extractEquationData(double[], double[]):::EXIT
this.firstIndex == orig(this.firstIndex)
this.dimension == orig(this.dimension)
complete[] == orig(complete[])
===========================================================================
org.apache.commons.math3.ode.EquationsMapper.getDimension():::ENTER
===========================================================================
org.apache.commons.math3.ode.EquationsMapper.getDimension():::EXIT
this.firstIndex == orig(this.firstIndex)
this.dimension == orig(this.dimension)
return >= 1
===========================================================================
org.apache.commons.math3.ode.EquationsMapper.getFirstIndex():::ENTER
this.firstIndex == 2
this.dimension one of { 6, 10 }
===========================================================================
org.apache.commons.math3.ode.EquationsMapper.getFirstIndex():::EXIT
this.firstIndex == orig(this.firstIndex)
this.dimension == orig(this.dimension)
this.firstIndex == 2
this.dimension one of { 6, 10 }
return == 2
===========================================================================
org.apache.commons.math3.ode.EquationsMapper.insertEquationData(double[], double[]):::ENTER
equationData != null
complete != null
size(equationData[]) >= 1
size(complete[]) >= 1
===========================================================================
org.apache.commons.math3.ode.EquationsMapper.insertEquationData(double[], double[]):::EXIT
this.firstIndex == orig(this.firstIndex)
this.dimension == orig(this.dimension)
equationData[] == orig(equationData[])
===========================================================================
org.apache.commons.math3.ode.ExpandableStatefulODE$SecondaryComponent:::OBJECT
this.equation.getClass().getName() == org.apache.commons.math3.ode.JacobianMatrices$JacobiansSecondaryEquations.class
this.mapper.firstIndex == 2
this.mapper.dimension one of { 6, 10 }
this.state[] elements == 0.0
this.state[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.stateDot[] elements == 0.0
this.stateDot[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
size(this.state[]) one of { 6, 10 }
size(this.stateDot[]) one of { 6, 10 }
===========================================================================
org.apache.commons.math3.ode.ExpandableStatefulODE$SecondaryComponent.SecondaryComponent(org.apache.commons.math3.ode.SecondaryEquations, int):::ENTER
equation.getClass().getName() == org.apache.commons.math3.ode.JacobianMatrices$JacobiansSecondaryEquations.class
firstIndex == 2
===========================================================================
org.apache.commons.math3.ode.ExpandableStatefulODE$SecondaryComponent.SecondaryComponent(org.apache.commons.math3.ode.SecondaryEquations, int):::EXIT
===========================================================================
org.apache.commons.math3.ode.ExpandableStatefulODE:::OBJECT
this.primary != null
this.primaryMapper != null
this.primaryMapper.firstIndex == 0
this.primaryMapper.dimension >= 1
this.primaryState != null
this.primaryStateDot != null
this.components != null
this.components[] elements != null
this.components[].getClass().getName() elements == org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent.class
this.components[].getClass().getName() one of { [], [org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent] }
this.components.getClass().getName() == java.util.ArrayList.class
size(this.primaryState[]) >= 1
size(this.primaryStateDot[]) >= 1
size(this.components[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math3.ode.ExpandableStatefulODE.ExpandableStatefulODE(org.apache.commons.math3.ode.FirstOrderDifferentialEquations):::ENTER
primary != null
===========================================================================
org.apache.commons.math3.ode.ExpandableStatefulODE.ExpandableStatefulODE(org.apache.commons.math3.ode.FirstOrderDifferentialEquations):::EXIT
this.time == Double.NaN
this.primaryState[] elements == 0.0
this.primaryStateDot[] elements == 0.0
this.components[] == []
this.components[].getClass().getName() == []
===========================================================================
org.apache.commons.math3.ode.ExpandableStatefulODE.addSecondaryEquations(org.apache.commons.math3.ode.SecondaryEquations):::ENTER
this.primaryMapper.dimension == 2
this.time == 0.0
this.primaryState[] sorted by <
this.primaryStateDot[] == [0.0, 0.0]
this.primaryStateDot[] elements == 0.0
this.components[] == []
this.components[].getClass().getName() == []
secondary != null
secondary.getClass().getName() == org.apache.commons.math3.ode.JacobianMatrices$JacobiansSecondaryEquations.class
size(this.primaryState[]) == 2
size(this.primaryStateDot[]) == 2
===========================================================================
org.apache.commons.math3.ode.ExpandableStatefulODE.addSecondaryEquations(org.apache.commons.math3.ode.SecondaryEquations):::EXIT
this.primary == orig(this.primary)
this.primary.getClass().getName() == orig(this.primary.getClass().getName())
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.time == orig(this.time)
this.primaryState == orig(this.primaryState)
this.primaryState[] == orig(this.primaryState[])
this.primaryStateDot == orig(this.primaryStateDot)
this.primaryStateDot[] == orig(this.primaryStateDot[])
this.components.getClass().getName() == orig(this.components.getClass().getName())
size(this.components[])-1 == orig(size(this.components[]))
this.primaryMapper.dimension == 2
this.time == 0.0
this.primaryState[] sorted by <
this.primaryStateDot[] == [0.0, 0.0]
this.primaryStateDot[] elements == 0.0
this.components[].getClass().getName() == [org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent]
return == 0
size(this.primaryState[]) == 2
size(this.primaryStateDot[]) == 2
size(this.components[]) == 1
===========================================================================
org.apache.commons.math3.ode.ExpandableStatefulODE.computeDerivatives(double, double[], double[]):::ENTER
this.time >= 0.0
y != null
yDot != null
size(y[]) >= 1
size(yDot[]) >= 1
===========================================================================
org.apache.commons.math3.ode.ExpandableStatefulODE.computeDerivatives(double, double[], double[]):::EXIT
this.primary == orig(this.primary)
this.primary.getClass().getName() == orig(this.primary.getClass().getName())
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.time == orig(this.time)
this.primaryState == orig(this.primaryState)
this.primaryStateDot == orig(this.primaryStateDot)
this.components == orig(this.components)
this.components[] == orig(this.components[])
this.components.getClass().getName() == orig(this.components.getClass().getName())
y[] == orig(y[])
size(this.primaryState[]) == orig(size(this.primaryState[]))
size(this.primaryStateDot[]) == orig(size(this.primaryStateDot[]))
this.time >= 0.0
===========================================================================
org.apache.commons.math3.ode.ExpandableStatefulODE.getCompleteState():::ENTER
this.time >= 0.0
this.primaryStateDot[] elements == 0.0
===========================================================================
org.apache.commons.math3.ode.ExpandableStatefulODE.getCompleteState():::EXIT
this.primary == orig(this.primary)
this.primary.getClass().getName() == orig(this.primary.getClass().getName())
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.time == orig(this.time)
this.primaryState == orig(this.primaryState)
this.primaryState[] == orig(this.primaryState[])
this.primaryStateDot == orig(this.primaryStateDot)
this.primaryStateDot[] == orig(this.primaryStateDot[])
this.components == orig(this.components)
this.components[] == orig(this.components[])
this.components.getClass().getName() == orig(this.components.getClass().getName())
this.time >= 0.0
this.primaryStateDot[] elements == 0.0
return != null
===========================================================================
org.apache.commons.math3.ode.ExpandableStatefulODE.getPrimary():::ENTER
this.primaryMapper.dimension == 2
this.time == 0.0
this.primaryState[] sorted by <
this.primaryStateDot[] == [0.0, 0.0]
this.primaryStateDot[] elements == 0.0
this.components[] == []
this.components[].getClass().getName() == []
size(this.primaryState[]) == 2
size(this.primaryStateDot[]) == 2
===========================================================================
org.apache.commons.math3.ode.ExpandableStatefulODE.getPrimary():::EXIT
this.primary == orig(this.primary)
this.primary.getClass().getName() == orig(this.primary.getClass().getName())
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.time == orig(this.time)
this.primaryState == orig(this.primaryState)
this.primaryState[] == orig(this.primaryState[])
this.primaryStateDot == orig(this.primaryStateDot)
this.primaryStateDot[] == orig(this.primaryStateDot[])
this.components == orig(this.components)
this.components[] == orig(this.components[])
this.components.getClass().getName() == orig(this.components.getClass().getName())
this.primaryMapper.dimension == 2
this.time == 0.0
this.primaryState[] sorted by <
this.primaryStateDot[] == [0.0, 0.0]
this.primaryStateDot[] elements == 0.0
this.components[] == []
this.components[].getClass().getName() == []
return != null
size(this.primaryState[]) == 2
size(this.primaryStateDot[]) == 2
===========================================================================
org.apache.commons.math3.ode.ExpandableStatefulODE.getPrimaryMapper():::ENTER
this.time >= 0.0
this.primaryStateDot[] elements == 0.0
===========================================================================
org.apache.commons.math3.ode.ExpandableStatefulODE.getPrimaryMapper():::EXIT
this.primary == orig(this.primary)
this.primary.getClass().getName() == orig(this.primary.getClass().getName())
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.time == orig(this.time)
this.primaryState == orig(this.primaryState)
this.primaryState[] == orig(this.primaryState[])
this.primaryStateDot == orig(this.primaryStateDot)
this.primaryStateDot[] == orig(this.primaryStateDot[])
this.components == orig(this.components)
this.components[] == orig(this.components[])
this.components.getClass().getName() == orig(this.components.getClass().getName())
this.time >= 0.0
this.primaryStateDot[] elements == 0.0
return != null
return.firstIndex == 0
===========================================================================
org.apache.commons.math3.ode.ExpandableStatefulODE.getPrimaryState():::ENTER
===========================================================================
org.apache.commons.math3.ode.ExpandableStatefulODE.getPrimaryState():::EXIT
this.primary == orig(this.primary)
this.primary.getClass().getName() == orig(this.primary.getClass().getName())
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.time == orig(this.time)
this.primaryState == orig(this.primaryState)
this.primaryState[] == orig(this.primaryState[])
this.primaryStateDot == orig(this.primaryStateDot)
this.primaryStateDot[] == orig(this.primaryStateDot[])
this.components == orig(this.components)
this.components[] == orig(this.components[])
this.components.getClass().getName() == orig(this.components.getClass().getName())
return != null
===========================================================================
org.apache.commons.math3.ode.ExpandableStatefulODE.getSecondaryMappers():::ENTER
this.time >= 0.0
this.primaryStateDot[] elements == 0.0
===========================================================================
org.apache.commons.math3.ode.ExpandableStatefulODE.getSecondaryMappers():::EXIT
this.primary == orig(this.primary)
this.primary.getClass().getName() == orig(this.primary.getClass().getName())
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.time == orig(this.time)
this.primaryState == orig(this.primaryState)
this.primaryState[] == orig(this.primaryState[])
this.primaryStateDot == orig(this.primaryStateDot)
this.primaryStateDot[] == orig(this.primaryStateDot[])
this.components == orig(this.components)
this.components[] == orig(this.components[])
this.components.getClass().getName() == orig(this.components.getClass().getName())
this.time >= 0.0
this.primaryStateDot[] elements == 0.0
return != null
return.getClass().getName() == org.apache.commons.math3.ode.EquationsMapper[].class
return[] elements != null
return[].firstIndex elements == 2
return[].firstIndex one of { [], [2] }
return[].dimension elements one of { 6, 10 }
return[].dimension one of { [], [6], [10] }
size(return[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math3.ode.ExpandableStatefulODE.getSecondaryState(int):::ENTER
this.primaryMapper.dimension == 2
this.time one of { 20.0, 56.548667764616276 }
this.primaryState[] sorted by <
this.primaryStateDot[] elements != 0
this.components[].getClass().getName() == [org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent]
index == 0
size(this.primaryState[]) == 2
size(this.primaryStateDot[]) == 2
size(this.components[]) == 1
===========================================================================
org.apache.commons.math3.ode.ExpandableStatefulODE.getSecondaryState(int):::EXIT
this.primary == orig(this.primary)
this.primary.getClass().getName() == orig(this.primary.getClass().getName())
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.time == orig(this.time)
this.primaryState == orig(this.primaryState)
this.primaryState[] == orig(this.primaryState[])
this.primaryStateDot == orig(this.primaryStateDot)
this.primaryStateDot[] == orig(this.primaryStateDot[])
this.components == orig(this.components)
this.components[] == orig(this.components[])
this.components.getClass().getName() == orig(this.components.getClass().getName())
this.primaryMapper.dimension == 2
this.time one of { 20.0, 56.548667764616276 }
this.primaryState[] sorted by <
this.primaryStateDot[] elements != 0
this.components[].getClass().getName() == [org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent]
return != null
return[] elements != 0
size(this.primaryState[]) == 2
size(this.primaryStateDot[]) == 2
size(this.components[]) == 1
size(return[]) one of { 6, 10 }
===========================================================================
org.apache.commons.math3.ode.ExpandableStatefulODE.getTime():::ENTER
===========================================================================
org.apache.commons.math3.ode.ExpandableStatefulODE.getTime():::EXIT
this.primary == orig(this.primary)
this.primary.getClass().getName() == orig(this.primary.getClass().getName())
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.time == orig(this.time)
this.primaryState == orig(this.primaryState)
this.primaryState[] == orig(this.primaryState[])
this.primaryStateDot == orig(this.primaryStateDot)
this.primaryStateDot[] == orig(this.primaryStateDot[])
this.components == orig(this.components)
this.components[] == orig(this.components[])
this.components.getClass().getName() == orig(this.components.getClass().getName())
===========================================================================
org.apache.commons.math3.ode.ExpandableStatefulODE.getTotalDimension():::ENTER
===========================================================================
org.apache.commons.math3.ode.ExpandableStatefulODE.getTotalDimension():::EXIT103
this.primaryMapper.dimension == 2
this.time one of { 0.0, 20.0, 56.548667764616276 }
this.primaryState[] sorted by <
this.components[].getClass().getName() == [org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent]
return one of { 8, 12 }
size(this.primaryState[]) == 2
size(this.primaryStateDot[]) == 2
size(this.components[]) == 1
===========================================================================
org.apache.commons.math3.ode.ExpandableStatefulODE.getTotalDimension():::EXIT99
this.components[] == []
this.components[].getClass().getName() == []
===========================================================================
org.apache.commons.math3.ode.ExpandableStatefulODE.getTotalDimension():::EXIT
this.primary == orig(this.primary)
this.primary.getClass().getName() == orig(this.primary.getClass().getName())
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.time == orig(this.time)
this.primaryState == orig(this.primaryState)
this.primaryState[] == orig(this.primaryState[])
this.primaryStateDot == orig(this.primaryStateDot)
this.primaryStateDot[] == orig(this.primaryStateDot[])
this.components == orig(this.components)
this.components[] == orig(this.components[])
this.components.getClass().getName() == orig(this.components.getClass().getName())
(this.components[].getClass().getName() == [])  ==>  (this.components[] == [])
(this.components[].getClass().getName() == [org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent])  <==>  (return one of { 8, 12 })
(this.components[].getClass().getName() == [org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent])  <==>  (size(this.components[]) == 1)
(this.components[].getClass().getName() == [org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent])  ==>  (size(this.primaryStateDot[]) == 2)
(this.components[].getClass().getName() == [org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent])  ==>  (size(this.primaryState[]) == 2)
(this.components[].getClass().getName() == [org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent])  ==>  (this.components[].getClass().getName() elements == org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent.class)
(this.components[].getClass().getName() == [org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent])  ==>  (this.primaryMapper.dimension == 2)
(this.components[].getClass().getName() == [org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent])  ==>  (this.primaryState[] sorted by <)
(this.components[].getClass().getName() == [org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent])  ==>  (this.time one of { 0.0, 20.0, 56.548667764616276 })
===========================================================================
org.apache.commons.math3.ode.ExpandableStatefulODE.setCompleteState(double[]):::ENTER
completeState != null
===========================================================================
org.apache.commons.math3.ode.ExpandableStatefulODE.setCompleteState(double[]):::EXIT
this.primary == orig(this.primary)
this.primary.getClass().getName() == orig(this.primary.getClass().getName())
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.time == orig(this.time)
this.primaryState == orig(this.primaryState)
this.primaryStateDot == orig(this.primaryStateDot)
this.primaryStateDot[] == orig(this.primaryStateDot[])
this.components == orig(this.components)
this.components[] == orig(this.components[])
this.components.getClass().getName() == orig(this.components.getClass().getName())
completeState[] == orig(completeState[])
size(this.primaryState[]) == orig(size(this.primaryState[]))
===========================================================================
org.apache.commons.math3.ode.ExpandableStatefulODE.setPrimaryState(double[]):::ENTER
this.time >= 0.0
this.primaryState[] elements == 0.0
this.primaryStateDot[] elements == 0.0
this.components[] == []
this.components[].getClass().getName() == []
primaryState != null
===========================================================================
org.apache.commons.math3.ode.ExpandableStatefulODE.setPrimaryState(double[]):::EXIT
this.primary == orig(this.primary)
this.primary.getClass().getName() == orig(this.primary.getClass().getName())
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.time == orig(this.time)
this.primaryState == orig(this.primaryState)
this.primaryStateDot == orig(this.primaryStateDot)
this.primaryStateDot[] == orig(this.primaryStateDot[])
this.components == orig(this.components)
this.components[] == orig(this.components[])
this.components.getClass().getName() == orig(this.components.getClass().getName())
primaryState[] == orig(primaryState[])
size(this.primaryState[]) == orig(size(this.primaryState[]))
this.time >= 0.0
this.primaryStateDot[] elements == 0.0
this.components[] == []
this.components[].getClass().getName() == []
===========================================================================
org.apache.commons.math3.ode.ExpandableStatefulODE.setSecondaryState(int, double[]):::ENTER
this.primaryMapper.dimension == 2
this.time == 0.0
this.primaryState[] sorted by <
this.primaryStateDot[] == [0.0, 0.0]
this.primaryStateDot[] elements == 0.0
this.components[].getClass().getName() == [org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent]
index == 0
secondaryState != null
secondaryState[] elements one of { 0.0, 1.0 }
secondaryState[] one of { [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 1.0, 0.0, 1.0] }
size(this.primaryState[]) == 2
size(this.primaryStateDot[]) == 2
size(this.components[]) == 1
size(secondaryState[]) one of { 6, 10 }
===========================================================================
org.apache.commons.math3.ode.ExpandableStatefulODE.setSecondaryState(int, double[]):::EXIT
this.primary == orig(this.primary)
this.primary.getClass().getName() == orig(this.primary.getClass().getName())
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.time == orig(this.time)
this.primaryState == orig(this.primaryState)
this.primaryState[] == orig(this.primaryState[])
this.primaryStateDot == orig(this.primaryStateDot)
this.primaryStateDot[] == orig(this.primaryStateDot[])
this.components == orig(this.components)
this.components[] == orig(this.components[])
this.components.getClass().getName() == orig(this.components.getClass().getName())
secondaryState[] == orig(secondaryState[])
this.primaryMapper.dimension == 2
this.time == 0.0
this.primaryState[] sorted by <
this.primaryStateDot[] == [0.0, 0.0]
this.primaryStateDot[] elements == 0.0
this.components[].getClass().getName() == [org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent]
secondaryState[] elements one of { 0.0, 1.0 }
secondaryState[] one of { [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 1.0, 0.0, 1.0] }
size(this.primaryState[]) == 2
size(this.primaryStateDot[]) == 2
size(this.components[]) == 1
===========================================================================
org.apache.commons.math3.ode.ExpandableStatefulODE.setTime(double):::ENTER
this.time >= 0.0
===========================================================================
org.apache.commons.math3.ode.ExpandableStatefulODE.setTime(double):::EXIT
this.primary == orig(this.primary)
this.primary.getClass().getName() == orig(this.primary.getClass().getName())
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.primaryState == orig(this.primaryState)
this.primaryState[] == orig(this.primaryState[])
this.primaryStateDot == orig(this.primaryStateDot)
this.primaryStateDot[] == orig(this.primaryStateDot[])
this.components == orig(this.components)
this.components[] == orig(this.components[])
this.components.getClass().getName() == orig(this.components.getClass().getName())
===========================================================================
org.apache.commons.math3.ode.FirstOrderConverter:::OBJECT
this.equations.getClass().getName() == org.apache.commons.math3.ode.FirstOrderConverterTest$Equations.class
this.dimension == 1
size(this.z[]) == 1
size(this.zDot[]) == 1
size(this.zDDot[]) == 1
===========================================================================
org.apache.commons.math3.ode.FirstOrderConverter.FirstOrderConverter(org.apache.commons.math3.ode.SecondOrderDifferentialEquations):::ENTER
equations.getClass().getName() == org.apache.commons.math3.ode.FirstOrderConverterTest$Equations.class
===========================================================================
org.apache.commons.math3.ode.FirstOrderConverter.FirstOrderConverter(org.apache.commons.math3.ode.SecondOrderDifferentialEquations):::EXIT
this.z[] == [0.0]
this.z[] elements == 0.0
this.zDot[] == [0.0]
this.zDot[] elements == 0.0
this.zDDot[] == [0.0]
this.zDDot[] elements == 0.0
===========================================================================
org.apache.commons.math3.ode.FirstOrderConverter.computeDerivatives(double, double[], double[]):::ENTER
size(y[]) == 2
size(yDot[]) == 2
===========================================================================
org.apache.commons.math3.ode.FirstOrderConverter.computeDerivatives(double, double[], double[]):::EXIT
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.dimension == orig(this.dimension)
this.z == orig(this.z)
this.zDot == orig(this.zDot)
this.zDDot == orig(this.zDDot)
y[] == orig(y[])
size(this.z[]) == orig(size(this.z[]))
size(this.zDot[]) == orig(size(this.zDot[]))
size(this.zDDot[]) == orig(size(this.zDDot[]))
===========================================================================
org.apache.commons.math3.ode.FirstOrderConverter.getDimension():::ENTER
this.z[] == [0.0]
this.z[] elements == 0.0
this.zDot[] == [0.0]
this.zDot[] elements == 0.0
this.zDDot[] == [0.0]
this.zDDot[] elements == 0.0
===========================================================================
org.apache.commons.math3.ode.FirstOrderConverter.getDimension():::EXIT
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.dimension == orig(this.dimension)
this.z == orig(this.z)
this.z[] == orig(this.z[])
this.zDot == orig(this.zDot)
this.zDot[] == orig(this.zDot[])
this.zDDot == orig(this.zDDot)
this.zDDot[] == orig(this.zDDot[])
this.z[] == [0.0]
this.z[] elements == 0.0
this.zDot[] == [0.0]
this.zDot[] elements == 0.0
this.zDDot[] == [0.0]
this.zDDot[] elements == 0.0
return == 2
===========================================================================
org.apache.commons.math3.ode.FirstOrderConverterTest$Equations:::OBJECT
this.n == 1
this.omega2 == 16.0
===========================================================================
org.apache.commons.math3.ode.FirstOrderConverterTest$Equations.Equations(int, double):::ENTER
n == 1
omega == 4.0
===========================================================================
org.apache.commons.math3.ode.FirstOrderConverterTest$Equations.Equations(int, double):::EXIT
===========================================================================
org.apache.commons.math3.ode.FirstOrderConverterTest$Equations.computeSecondDerivatives(double, double[], double[], double[]):::ENTER
size(y[]) == 1
size(yDot[]) == 1
size(yDDot[]) == 1
===========================================================================
org.apache.commons.math3.ode.FirstOrderConverterTest$Equations.computeSecondDerivatives(double, double[], double[], double[]):::EXIT
this.n == orig(this.n)
this.omega2 == orig(this.omega2)
y[] == orig(y[])
yDot[] == orig(yDot[])
===========================================================================
org.apache.commons.math3.ode.FirstOrderConverterTest$Equations.getDimension():::ENTER
===========================================================================
org.apache.commons.math3.ode.FirstOrderConverterTest$Equations.getDimension():::EXIT
this.n == orig(this.n)
this.omega2 == orig(this.omega2)
return == 1
===========================================================================
org.apache.commons.math3.ode.FirstOrderConverterTest:::OBJECT
===========================================================================
org.apache.commons.math3.ode.FirstOrderConverterTest.FirstOrderConverterTest():::EXIT
===========================================================================
org.apache.commons.math3.ode.FirstOrderConverterTest.integrateWithSpecifiedStep(double, double, double, double):::ENTER
omega == 4.0
t0 == 0.0
t == 1.0
===========================================================================
org.apache.commons.math3.ode.FirstOrderConverterTest.integrateWithSpecifiedStep(double, double, double, double):::EXIT
===========================================================================
org.apache.commons.math3.ode.FirstOrderConverterTest.testBigStep():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.FirstOrderConverterTest.testBigStep():::EXIT
===========================================================================
org.apache.commons.math3.ode.FirstOrderConverterTest.testDecreasingSteps():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.FirstOrderConverterTest.testDecreasingSteps():::EXIT
===========================================================================
org.apache.commons.math3.ode.FirstOrderConverterTest.testSmallStep():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.FirstOrderConverterTest.testSmallStep():::EXIT
===========================================================================
org.apache.commons.math3.ode.JacobianMatrices$JacobiansSecondaryEquations:::OBJECT
org.apache.commons.math3.ode.JacobianMatrices.this.efode.time == 0.0
org.apache.commons.math3.ode.JacobianMatrices.this.efode.components[] elements != null
org.apache.commons.math3.ode.JacobianMatrices.this.efode.components[].getClass().getName() elements == org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent.class
org.apache.commons.math3.ode.JacobianMatrices.this.efode.components[].getClass().getName() one of { [], [org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent] }
org.apache.commons.math3.ode.JacobianMatrices.this.efode.components.getClass().getName() == java.util.ArrayList.class
org.apache.commons.math3.ode.JacobianMatrices.this.index one of { -1, 0 }
org.apache.commons.math3.ode.JacobianMatrices.this.stateDim == 2
org.apache.commons.math3.ode.JacobianMatrices.this.selectedParameters.getClass().getName() == org.apache.commons.math3.ode.ParameterConfiguration[].class
org.apache.commons.math3.ode.JacobianMatrices.this.selectedParameters[] elements != null
org.apache.commons.math3.ode.JacobianMatrices.this.selectedParameters[].getClass().getName() elements == org.apache.commons.math3.ode.ParameterConfiguration.class
org.apache.commons.math3.ode.JacobianMatrices.this.selectedParameters[].getClass().getName() one of { [org.apache.commons.math3.ode.ParameterConfiguration], [org.apache.commons.math3.ode.ParameterConfiguration, org.apache.commons.math3.ode.ParameterConfiguration, org.apache.commons.math3.ode.ParameterConfiguration] }
org.apache.commons.math3.ode.JacobianMatrices.this.selectedParameters[].parameterName elements != null
org.apache.commons.math3.ode.JacobianMatrices.this.selectedParameters[].parameterName.toString one of { [b], [cx, cy, omega] }
org.apache.commons.math3.ode.JacobianMatrices.this.selectedParameters[].hP elements one of { 1.0E-12, Double.NaN }
org.apache.commons.math3.ode.JacobianMatrices.this.selectedParameters[].hP elements <= 1.0E-12
org.apache.commons.math3.ode.JacobianMatrices.this.jacobianProviders[] elements != null
org.apache.commons.math3.ode.JacobianMatrices.this.jacobianProviders.getClass().getName() == java.util.ArrayList.class
org.apache.commons.math3.ode.JacobianMatrices.this.paramDim one of { 1, 3 }
org.apache.commons.math3.ode.JacobianMatrices.this.matricesData[] elements one of { 0.0, 1.0 }
org.apache.commons.math3.ode.JacobianMatrices.this.matricesData[] one of { [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 1.0, 0.0, 1.0] }
size(org.apache.commons.math3.ode.JacobianMatrices.this.efode.primaryState[]) == 2
size(org.apache.commons.math3.ode.JacobianMatrices.this.efode.primaryStateDot[]) == 2
size(org.apache.commons.math3.ode.JacobianMatrices.this.efode.components[]) one of { 0, 1 }
size(org.apache.commons.math3.ode.JacobianMatrices.this.selectedParameters[]) one of { 1, 3 }
size(org.apache.commons.math3.ode.JacobianMatrices.this.jacobianProviders[]) one of { 0, 1 }
size(org.apache.commons.math3.ode.JacobianMatrices.this.matricesData[]) one of { 6, 10 }
===========================================================================
org.apache.commons.math3.ode.JacobianMatrices$JacobiansSecondaryEquations.JacobiansSecondaryEquations(org.apache.commons.math3.ode.JacobianMatrices):::ENTER
org.apache.commons.math3.ode.JacobianMatrices.this.efode.time == 0.0
org.apache.commons.math3.ode.JacobianMatrices.this.efode.primaryState[] sorted by <
org.apache.commons.math3.ode.JacobianMatrices.this.efode.primaryStateDot[] == [0.0, 0.0]
org.apache.commons.math3.ode.JacobianMatrices.this.efode.primaryStateDot[] elements == 0.0
org.apache.commons.math3.ode.JacobianMatrices.this.efode.components[] == []
org.apache.commons.math3.ode.JacobianMatrices.this.efode.components[].getClass().getName() == []
org.apache.commons.math3.ode.JacobianMatrices.this.efode.components.getClass().getName() == java.util.ArrayList.class
org.apache.commons.math3.ode.JacobianMatrices.this.index == -1
org.apache.commons.math3.ode.JacobianMatrices.this.stateDim == 2
org.apache.commons.math3.ode.JacobianMatrices.this.selectedParameters.getClass().getName() == org.apache.commons.math3.ode.ParameterConfiguration[].class
org.apache.commons.math3.ode.JacobianMatrices.this.selectedParameters[] elements != null
org.apache.commons.math3.ode.JacobianMatrices.this.selectedParameters[].getClass().getName() elements == org.apache.commons.math3.ode.ParameterConfiguration.class
org.apache.commons.math3.ode.JacobianMatrices.this.selectedParameters[].getClass().getName() one of { [org.apache.commons.math3.ode.ParameterConfiguration], [org.apache.commons.math3.ode.ParameterConfiguration, org.apache.commons.math3.ode.ParameterConfiguration, org.apache.commons.math3.ode.ParameterConfiguration] }
org.apache.commons.math3.ode.JacobianMatrices.this.selectedParameters[].parameterName elements != null
org.apache.commons.math3.ode.JacobianMatrices.this.selectedParameters[].parameterName.toString one of { [b], [cx, cy, omega] }
org.apache.commons.math3.ode.JacobianMatrices.this.selectedParameters[].hP elements one of { 1.0E-12, Double.NaN }
org.apache.commons.math3.ode.JacobianMatrices.this.jacobianProviders[] elements != null
org.apache.commons.math3.ode.JacobianMatrices.this.jacobianProviders.getClass().getName() == java.util.ArrayList.class
org.apache.commons.math3.ode.JacobianMatrices.this.paramDim one of { 1, 3 }
org.apache.commons.math3.ode.JacobianMatrices.this.matricesData[] elements one of { 0.0, 1.0 }
org.apache.commons.math3.ode.JacobianMatrices.this.matricesData[] one of { [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 1.0, 0.0, 1.0] }
size(org.apache.commons.math3.ode.JacobianMatrices.this.efode.primaryState[]) == 2
size(org.apache.commons.math3.ode.JacobianMatrices.this.efode.primaryStateDot[]) == 2
size(org.apache.commons.math3.ode.JacobianMatrices.this.selectedParameters[]) one of { 1, 3 }
size(org.apache.commons.math3.ode.JacobianMatrices.this.jacobianProviders[]) one of { 0, 1 }
size(org.apache.commons.math3.ode.JacobianMatrices.this.matricesData[]) one of { 6, 10 }
===========================================================================
org.apache.commons.math3.ode.JacobianMatrices$JacobiansSecondaryEquations.JacobiansSecondaryEquations(org.apache.commons.math3.ode.JacobianMatrices):::EXIT
org.apache.commons.math3.ode.JacobianMatrices.this == orig(org.apache.commons.math3.ode.JacobianMatrices.this)
org.apache.commons.math3.ode.JacobianMatrices.this.efode == orig(org.apache.commons.math3.ode.JacobianMatrices.this.efode)
org.apache.commons.math3.ode.JacobianMatrices.this.efode.primary == orig(org.apache.commons.math3.ode.JacobianMatrices.this.efode.primary)
org.apache.commons.math3.ode.JacobianMatrices.this.efode.primary.getClass().getName() == orig(org.apache.commons.math3.ode.JacobianMatrices.this.efode.primary.getClass().getName())
org.apache.commons.math3.ode.JacobianMatrices.this.efode.primaryMapper == orig(org.apache.commons.math3.ode.JacobianMatrices.this.efode.primaryMapper)
org.apache.commons.math3.ode.JacobianMatrices.this.efode.time == orig(org.apache.commons.math3.ode.JacobianMatrices.this.efode.time)
org.apache.commons.math3.ode.JacobianMatrices.this.efode.primaryState == orig(org.apache.commons.math3.ode.JacobianMatrices.this.efode.primaryState)
org.apache.commons.math3.ode.JacobianMatrices.this.efode.primaryState[] == orig(org.apache.commons.math3.ode.JacobianMatrices.this.efode.primaryState[])
org.apache.commons.math3.ode.JacobianMatrices.this.efode.primaryStateDot == orig(org.apache.commons.math3.ode.JacobianMatrices.this.efode.primaryStateDot)
org.apache.commons.math3.ode.JacobianMatrices.this.efode.primaryStateDot[] == orig(org.apache.commons.math3.ode.JacobianMatrices.this.efode.primaryStateDot[])
org.apache.commons.math3.ode.JacobianMatrices.this.efode.components == orig(org.apache.commons.math3.ode.JacobianMatrices.this.efode.components)
org.apache.commons.math3.ode.JacobianMatrices.this.efode.components[] == orig(org.apache.commons.math3.ode.JacobianMatrices.this.efode.components[])
org.apache.commons.math3.ode.JacobianMatrices.this.efode.components.getClass().getName() == orig(org.apache.commons.math3.ode.JacobianMatrices.this.efode.components.getClass().getName())
org.apache.commons.math3.ode.JacobianMatrices.this.index == orig(org.apache.commons.math3.ode.JacobianMatrices.this.index)
org.apache.commons.math3.ode.JacobianMatrices.this.jode == orig(org.apache.commons.math3.ode.JacobianMatrices.this.jode)
org.apache.commons.math3.ode.JacobianMatrices.this.jode.getClass().getName() == orig(org.apache.commons.math3.ode.JacobianMatrices.this.jode.getClass().getName())
org.apache.commons.math3.ode.JacobianMatrices.this.pode == orig(org.apache.commons.math3.ode.JacobianMatrices.this.pode)
org.apache.commons.math3.ode.JacobianMatrices.this.pode.getClass().getName() == orig(org.apache.commons.math3.ode.JacobianMatrices.this.pode.getClass().getName())
org.apache.commons.math3.ode.JacobianMatrices.this.stateDim == orig(org.apache.commons.math3.ode.JacobianMatrices.this.stateDim)
org.apache.commons.math3.ode.JacobianMatrices.this.selectedParameters == orig(org.apache.commons.math3.ode.JacobianMatrices.this.selectedParameters)
org.apache.commons.math3.ode.JacobianMatrices.this.selectedParameters.getClass().getName() == orig(org.apache.commons.math3.ode.JacobianMatrices.this.selectedParameters.getClass().getName())
org.apache.commons.math3.ode.JacobianMatrices.this.selectedParameters[] == orig(org.apache.commons.math3.ode.JacobianMatrices.this.selectedParameters[])
org.apache.commons.math3.ode.JacobianMatrices.this.selectedParameters[].parameterName == orig(org.apache.commons.math3.ode.JacobianMatrices.this.selectedParameters[].parameterName)
org.apache.commons.math3.ode.JacobianMatrices.this.selectedParameters[].hP == orig(org.apache.commons.math3.ode.JacobianMatrices.this.selectedParameters[].hP)
org.apache.commons.math3.ode.JacobianMatrices.this.jacobianProviders == orig(org.apache.commons.math3.ode.JacobianMatrices.this.jacobianProviders)
org.apache.commons.math3.ode.JacobianMatrices.this.jacobianProviders[] == orig(org.apache.commons.math3.ode.JacobianMatrices.this.jacobianProviders[])
org.apache.commons.math3.ode.JacobianMatrices.this.jacobianProviders.getClass().getName() == orig(org.apache.commons.math3.ode.JacobianMatrices.this.jacobianProviders.getClass().getName())
org.apache.commons.math3.ode.JacobianMatrices.this.paramDim == orig(org.apache.commons.math3.ode.JacobianMatrices.this.paramDim)
org.apache.commons.math3.ode.JacobianMatrices.this.dirtyParameter == orig(org.apache.commons.math3.ode.JacobianMatrices.this.dirtyParameter)
org.apache.commons.math3.ode.JacobianMatrices.this.matricesData == orig(org.apache.commons.math3.ode.JacobianMatrices.this.matricesData)
org.apache.commons.math3.ode.JacobianMatrices.this.matricesData[] == orig(org.apache.commons.math3.ode.JacobianMatrices.this.matricesData[])
org.apache.commons.math3.ode.JacobianMatrices.this.efode.primaryState[] sorted by <
org.apache.commons.math3.ode.JacobianMatrices.this.efode.primaryStateDot[] == [0.0, 0.0]
org.apache.commons.math3.ode.JacobianMatrices.this.efode.primaryStateDot[] elements == 0.0
org.apache.commons.math3.ode.JacobianMatrices.this.efode.components[] == []
org.apache.commons.math3.ode.JacobianMatrices.this.efode.components[].getClass().getName() == []
org.apache.commons.math3.ode.JacobianMatrices.this.index == -1
===========================================================================
org.apache.commons.math3.ode.JacobianMatrices$JacobiansSecondaryEquations.computeDerivatives(double, double[], double[], double[], double[]):::ENTER
org.apache.commons.math3.ode.JacobianMatrices.this.efode.components[].getClass().getName() == [org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent]
org.apache.commons.math3.ode.JacobianMatrices.this.index == 0
size(org.apache.commons.math3.ode.JacobianMatrices.this.efode.components[]) == 1
size(y[]) == 2
size(yDot[]) == 2
size(z[]) one of { 6, 10 }
size(zDot[]) one of { 6, 10 }
===========================================================================
org.apache.commons.math3.ode.JacobianMatrices$JacobiansSecondaryEquations.computeDerivatives(double, double[], double[], double[], double[]):::EXIT
org.apache.commons.math3.ode.JacobianMatrices.this == orig(org.apache.commons.math3.ode.JacobianMatrices.this)
org.apache.commons.math3.ode.JacobianMatrices.this.efode == orig(org.apache.commons.math3.ode.JacobianMatrices.this.efode)
org.apache.commons.math3.ode.JacobianMatrices.this.efode.primary == orig(org.apache.commons.math3.ode.JacobianMatrices.this.efode.primary)
org.apache.commons.math3.ode.JacobianMatrices.this.efode.primary.getClass().getName() == orig(org.apache.commons.math3.ode.JacobianMatrices.this.efode.primary.getClass().getName())
org.apache.commons.math3.ode.JacobianMatrices.this.efode.primaryMapper == orig(org.apache.commons.math3.ode.JacobianMatrices.this.efode.primaryMapper)
org.apache.commons.math3.ode.JacobianMatrices.this.efode.time == orig(org.apache.commons.math3.ode.JacobianMatrices.this.efode.time)
org.apache.commons.math3.ode.JacobianMatrices.this.efode.primaryState == orig(org.apache.commons.math3.ode.JacobianMatrices.this.efode.primaryState)
org.apache.commons.math3.ode.JacobianMatrices.this.efode.primaryState[] == orig(org.apache.commons.math3.ode.JacobianMatrices.this.efode.primaryState[])
org.apache.commons.math3.ode.JacobianMatrices.this.efode.primaryStateDot == orig(org.apache.commons.math3.ode.JacobianMatrices.this.efode.primaryStateDot)
org.apache.commons.math3.ode.JacobianMatrices.this.efode.primaryStateDot[] == orig(org.apache.commons.math3.ode.JacobianMatrices.this.efode.primaryStateDot[])
org.apache.commons.math3.ode.JacobianMatrices.this.efode.components == orig(org.apache.commons.math3.ode.JacobianMatrices.this.efode.components)
org.apache.commons.math3.ode.JacobianMatrices.this.efode.components[] == orig(org.apache.commons.math3.ode.JacobianMatrices.this.efode.components[])
org.apache.commons.math3.ode.JacobianMatrices.this.efode.components.getClass().getName() == orig(org.apache.commons.math3.ode.JacobianMatrices.this.efode.components.getClass().getName())
org.apache.commons.math3.ode.JacobianMatrices.this.index == orig(org.apache.commons.math3.ode.JacobianMatrices.this.index)
org.apache.commons.math3.ode.JacobianMatrices.this.jode == orig(org.apache.commons.math3.ode.JacobianMatrices.this.jode)
org.apache.commons.math3.ode.JacobianMatrices.this.jode.getClass().getName() == orig(org.apache.commons.math3.ode.JacobianMatrices.this.jode.getClass().getName())
org.apache.commons.math3.ode.JacobianMatrices.this.pode == orig(org.apache.commons.math3.ode.JacobianMatrices.this.pode)
org.apache.commons.math3.ode.JacobianMatrices.this.pode.getClass().getName() == orig(org.apache.commons.math3.ode.JacobianMatrices.this.pode.getClass().getName())
org.apache.commons.math3.ode.JacobianMatrices.this.stateDim == orig(org.apache.commons.math3.ode.JacobianMatrices.this.stateDim)
org.apache.commons.math3.ode.JacobianMatrices.this.selectedParameters == orig(org.apache.commons.math3.ode.JacobianMatrices.this.selectedParameters)
org.apache.commons.math3.ode.JacobianMatrices.this.selectedParameters.getClass().getName() == orig(org.apache.commons.math3.ode.JacobianMatrices.this.selectedParameters.getClass().getName())
org.apache.commons.math3.ode.JacobianMatrices.this.selectedParameters[] == orig(org.apache.commons.math3.ode.JacobianMatrices.this.selectedParameters[])
org.apache.commons.math3.ode.JacobianMatrices.this.selectedParameters[].parameterName == orig(org.apache.commons.math3.ode.JacobianMatrices.this.selectedParameters[].parameterName)
org.apache.commons.math3.ode.JacobianMatrices.this.selectedParameters[].hP == orig(org.apache.commons.math3.ode.JacobianMatrices.this.selectedParameters[].hP)
org.apache.commons.math3.ode.JacobianMatrices.this.jacobianProviders == orig(org.apache.commons.math3.ode.JacobianMatrices.this.jacobianProviders)
org.apache.commons.math3.ode.JacobianMatrices.this.jacobianProviders.getClass().getName() == orig(org.apache.commons.math3.ode.JacobianMatrices.this.jacobianProviders.getClass().getName())
org.apache.commons.math3.ode.JacobianMatrices.this.paramDim == orig(org.apache.commons.math3.ode.JacobianMatrices.this.paramDim)
org.apache.commons.math3.ode.JacobianMatrices.this.matricesData == orig(org.apache.commons.math3.ode.JacobianMatrices.this.matricesData)
org.apache.commons.math3.ode.JacobianMatrices.this.matricesData[] == orig(org.apache.commons.math3.ode.JacobianMatrices.this.matricesData[])
y[] == orig(y[])
yDot[] == orig(yDot[])
z[] == orig(z[])
org.apache.commons.math3.ode.JacobianMatrices.this.efode.components[].getClass().getName() == [org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent]
org.apache.commons.math3.ode.JacobianMatrices.this.index == 0
org.apache.commons.math3.ode.JacobianMatrices.this.dirtyParameter == false
size(org.apache.commons.math3.ode.JacobianMatrices.this.efode.components[]) == 1
size(org.apache.commons.math3.ode.JacobianMatrices.this.jacobianProviders[]) == 1
size(org.apache.commons.math3.ode.JacobianMatrices.this.jacobianProviders[]) >= orig(size(org.apache.commons.math3.ode.JacobianMatrices.this.jacobianProviders[]))
size(org.apache.commons.math3.ode.JacobianMatrices.this.jacobianProviders[])-1 <= orig(size(org.apache.commons.math3.ode.JacobianMatrices.this.jacobianProviders[]))
size(org.apache.commons.math3.ode.JacobianMatrices.this.jacobianProviders[])-1 >= orig(size(org.apache.commons.math3.ode.JacobianMatrices.this.jacobianProviders[]))-1
===========================================================================
org.apache.commons.math3.ode.JacobianMatrices$JacobiansSecondaryEquations.getDimension():::ENTER
org.apache.commons.math3.ode.JacobianMatrices.this.efode.primaryState[] sorted by <
org.apache.commons.math3.ode.JacobianMatrices.this.efode.primaryStateDot[] == [0.0, 0.0]
org.apache.commons.math3.ode.JacobianMatrices.this.efode.primaryStateDot[] elements == 0.0
org.apache.commons.math3.ode.JacobianMatrices.this.efode.components[] == []
org.apache.commons.math3.ode.JacobianMatrices.this.efode.components[].getClass().getName() == []
org.apache.commons.math3.ode.JacobianMatrices.this.index == -1
===========================================================================
org.apache.commons.math3.ode.JacobianMatrices$JacobiansSecondaryEquations.getDimension():::EXIT
org.apache.commons.math3.ode.JacobianMatrices.this == orig(org.apache.commons.math3.ode.JacobianMatrices.this)
org.apache.commons.math3.ode.JacobianMatrices.this.efode == orig(org.apache.commons.math3.ode.JacobianMatrices.this.efode)
org.apache.commons.math3.ode.JacobianMatrices.this.efode.primary == orig(org.apache.commons.math3.ode.JacobianMatrices.this.efode.primary)
org.apache.commons.math3.ode.JacobianMatrices.this.efode.primary.getClass().getName() == orig(org.apache.commons.math3.ode.JacobianMatrices.this.efode.primary.getClass().getName())
org.apache.commons.math3.ode.JacobianMatrices.this.efode.primaryMapper == orig(org.apache.commons.math3.ode.JacobianMatrices.this.efode.primaryMapper)
org.apache.commons.math3.ode.JacobianMatrices.this.efode.time == orig(org.apache.commons.math3.ode.JacobianMatrices.this.efode.time)
org.apache.commons.math3.ode.JacobianMatrices.this.efode.primaryState == orig(org.apache.commons.math3.ode.JacobianMatrices.this.efode.primaryState)
org.apache.commons.math3.ode.JacobianMatrices.this.efode.primaryState[] == orig(org.apache.commons.math3.ode.JacobianMatrices.this.efode.primaryState[])
org.apache.commons.math3.ode.JacobianMatrices.this.efode.primaryStateDot == orig(org.apache.commons.math3.ode.JacobianMatrices.this.efode.primaryStateDot)
org.apache.commons.math3.ode.JacobianMatrices.this.efode.primaryStateDot[] == orig(org.apache.commons.math3.ode.JacobianMatrices.this.efode.primaryStateDot[])
org.apache.commons.math3.ode.JacobianMatrices.this.efode.components == orig(org.apache.commons.math3.ode.JacobianMatrices.this.efode.components)
org.apache.commons.math3.ode.JacobianMatrices.this.efode.components[] == orig(org.apache.commons.math3.ode.JacobianMatrices.this.efode.components[])
org.apache.commons.math3.ode.JacobianMatrices.this.efode.components.getClass().getName() == orig(org.apache.commons.math3.ode.JacobianMatrices.this.efode.components.getClass().getName())
org.apache.commons.math3.ode.JacobianMatrices.this.index == orig(org.apache.commons.math3.ode.JacobianMatrices.this.index)
org.apache.commons.math3.ode.JacobianMatrices.this.jode == orig(org.apache.commons.math3.ode.JacobianMatrices.this.jode)
org.apache.commons.math3.ode.JacobianMatrices.this.jode.getClass().getName() == orig(org.apache.commons.math3.ode.JacobianMatrices.this.jode.getClass().getName())
org.apache.commons.math3.ode.JacobianMatrices.this.pode == orig(org.apache.commons.math3.ode.JacobianMatrices.this.pode)
org.apache.commons.math3.ode.JacobianMatrices.this.pode.getClass().getName() == orig(org.apache.commons.math3.ode.JacobianMatrices.this.pode.getClass().getName())
org.apache.commons.math3.ode.JacobianMatrices.this.stateDim == orig(org.apache.commons.math3.ode.JacobianMatrices.this.stateDim)
org.apache.commons.math3.ode.JacobianMatrices.this.selectedParameters == orig(org.apache.commons.math3.ode.JacobianMatrices.this.selectedParameters)
org.apache.commons.math3.ode.JacobianMatrices.this.selectedParameters.getClass().getName() == orig(org.apache.commons.math3.ode.JacobianMatrices.this.selectedParameters.getClass().getName())
org.apache.commons.math3.ode.JacobianMatrices.this.selectedParameters[] == orig(org.apache.commons.math3.ode.JacobianMatrices.this.selectedParameters[])
org.apache.commons.math3.ode.JacobianMatrices.this.selectedParameters[].parameterName == orig(org.apache.commons.math3.ode.JacobianMatrices.this.selectedParameters[].parameterName)
org.apache.commons.math3.ode.JacobianMatrices.this.selectedParameters[].hP == orig(org.apache.commons.math3.ode.JacobianMatrices.this.selectedParameters[].hP)
org.apache.commons.math3.ode.JacobianMatrices.this.jacobianProviders == orig(org.apache.commons.math3.ode.JacobianMatrices.this.jacobianProviders)
org.apache.commons.math3.ode.JacobianMatrices.this.jacobianProviders[] == orig(org.apache.commons.math3.ode.JacobianMatrices.this.jacobianProviders[])
org.apache.commons.math3.ode.JacobianMatrices.this.jacobianProviders.getClass().getName() == orig(org.apache.commons.math3.ode.JacobianMatrices.this.jacobianProviders.getClass().getName())
org.apache.commons.math3.ode.JacobianMatrices.this.paramDim == orig(org.apache.commons.math3.ode.JacobianMatrices.this.paramDim)
org.apache.commons.math3.ode.JacobianMatrices.this.dirtyParameter == orig(org.apache.commons.math3.ode.JacobianMatrices.this.dirtyParameter)
org.apache.commons.math3.ode.JacobianMatrices.this.matricesData == orig(org.apache.commons.math3.ode.JacobianMatrices.this.matricesData)
org.apache.commons.math3.ode.JacobianMatrices.this.matricesData[] == orig(org.apache.commons.math3.ode.JacobianMatrices.this.matricesData[])
org.apache.commons.math3.ode.JacobianMatrices.this.efode.primaryState[] sorted by <
org.apache.commons.math3.ode.JacobianMatrices.this.efode.primaryStateDot[] == [0.0, 0.0]
org.apache.commons.math3.ode.JacobianMatrices.this.efode.primaryStateDot[] elements == 0.0
org.apache.commons.math3.ode.JacobianMatrices.this.efode.components[] == []
org.apache.commons.math3.ode.JacobianMatrices.this.efode.components[].getClass().getName() == []
org.apache.commons.math3.ode.JacobianMatrices.this.index == -1
return one of { 6, 10 }
===========================================================================
org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper:::OBJECT
this.hY[] == [1.0E-12, 1.0E-12]
this.hY[] elements == 1.0E-12
size(this.hY[]) == 2
===========================================================================
org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper.MainStateJacobianWrapper(org.apache.commons.math3.ode.FirstOrderDifferentialEquations, double[]):::ENTER
hY[] == [1.0E-12, 1.0E-12]
hY[] elements == 1.0E-12
size(hY[]) == 2
===========================================================================
org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper.MainStateJacobianWrapper(org.apache.commons.math3.ode.FirstOrderDifferentialEquations, double[]):::EXIT
hY[] == orig(hY[])
hY[] == [1.0E-12, 1.0E-12]
hY[] elements == 1.0E-12
===========================================================================
org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper.computeDerivatives(double, double[], double[]):::ENTER
yDot[] == [0.0, 0.0]
yDot[] elements == 0.0
size(y[]) == 2
size(yDot[]) == 2
===========================================================================
org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper.computeDerivatives(double, double[], double[]):::EXIT
this.ode == orig(this.ode)
this.ode.getClass().getName() == orig(this.ode.getClass().getName())
this.hY == orig(this.hY)
this.hY[] == orig(this.hY[])
y[] == orig(y[])
===========================================================================
org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper.computeMainStateJacobian(double, double[], double[], double[][]):::ENTER
dFdY.getClass().getName() == double[][].class
dFdY[] elements != null
size(y[]) == 2
size(yDot[]) == 2
size(dFdY[]) == 2
===========================================================================
org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper.computeMainStateJacobian(double, double[], double[], double[][]):::EXIT
this.ode == orig(this.ode)
this.ode.getClass().getName() == orig(this.ode.getClass().getName())
this.hY == orig(this.hY)
this.hY[] == orig(this.hY[])
y[] == orig(y[])
yDot[] == orig(yDot[])
dFdY[] == orig(dFdY[])
dFdY[] elements != null
===========================================================================
org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper.getDimension():::ENTER
===========================================================================
org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper.getDimension():::EXIT
this.ode == orig(this.ode)
this.ode.getClass().getName() == orig(this.ode.getClass().getName())
this.hY == orig(this.hY)
this.hY[] == orig(this.hY[])
return == 2
===========================================================================
org.apache.commons.math3.ode.JacobianMatrices:::OBJECT
this.efode.primaryMapper.firstIndex == 0
this.efode.primaryMapper.dimension == 2
this.efode.time one of { 0.0, 20.0, 56.548667764616276 }
this.efode.primaryState[] sorted by <
this.efode.components[] elements != null
this.efode.components[].getClass().getName() == [org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent]
this.efode.components[].getClass().getName() elements == org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent.class
this.efode.components.getClass().getName() == java.util.ArrayList.class
this.index one of { -1, 0 }
this.stateDim == 2
this.selectedParameters.getClass().getName() == org.apache.commons.math3.ode.ParameterConfiguration[].class
this.selectedParameters[] elements != null
this.selectedParameters[].getClass().getName() elements == org.apache.commons.math3.ode.ParameterConfiguration.class
this.selectedParameters[].getClass().getName() one of { [org.apache.commons.math3.ode.ParameterConfiguration], [org.apache.commons.math3.ode.ParameterConfiguration, org.apache.commons.math3.ode.ParameterConfiguration, org.apache.commons.math3.ode.ParameterConfiguration] }
this.selectedParameters[].parameterName elements != null
this.selectedParameters[].parameterName.toString one of { [b], [cx, cy, omega] }
this.selectedParameters[].hP elements one of { 1.0E-12, Double.NaN }
this.selectedParameters[].hP elements <= 1.0E-12
this.jacobianProviders[] elements != null
this.jacobianProviders.getClass().getName() == java.util.ArrayList.class
this.paramDim one of { 1, 3 }
this.matricesData[] elements one of { 0.0, 1.0 }
this.matricesData[] one of { [1.0, 0.0, 0.0, 1.0, 0.0, 0.0], [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 1.0, 0.0, 1.0] }
size(this.efode.primaryState[]) == 2
size(this.efode.primaryStateDot[]) == 2
size(this.efode.components[]) == 1
size(this.selectedParameters[]) one of { 1, 3 }
size(this.jacobianProviders[]) one of { 0, 1 }
size(this.matricesData[]) one of { 6, 10 }
===========================================================================
org.apache.commons.math3.ode.JacobianMatrices.JacobianMatrices(org.apache.commons.math3.ode.FirstOrderDifferentialEquations, double[], java.lang.String[]):::ENTER
hY[] == [1.0E-12, 1.0E-12]
hY[] elements == 1.0E-12
parameters.getClass().getName() == java.lang.String[].class
parameters[] elements != null
parameters[].toString one of { [b], [cx, cy, omega] }
size(hY[]) == 2
size(parameters[]) one of { 1, 3 }
===========================================================================
org.apache.commons.math3.ode.JacobianMatrices.JacobianMatrices(org.apache.commons.math3.ode.FirstOrderDifferentialEquations, double[], java.lang.String[]):::EXIT
hY[] == orig(hY[])
parameters[] == orig(parameters[])
this.efode == null
this.index == -1
this.jode.getClass().getName() == org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper.class
this.pode == null
this.selectedParameters[].hP elements == Double.NaN
this.selectedParameters[].hP one of { [NaN], [NaN, NaN, NaN] }
this.jacobianProviders[] == []
this.jacobianProviders[].getClass().getName() == []
this.dirtyParameter == false
this.matricesData[] one of { [1.0, 0.0, 0.0, 1.0, 0.0, 0.0], [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
hY[] == [1.0E-12, 1.0E-12]
hY[] elements == 1.0E-12
parameters[] elements != null
parameters[].toString one of { [b], [cx, cy, omega] }
===========================================================================
org.apache.commons.math3.ode.JacobianMatrices.JacobianMatrices(org.apache.commons.math3.ode.MainStateJacobianProvider, java.lang.String[]):::ENTER
parameters.getClass().getName() == java.lang.String[].class
parameters[] elements != null
parameters[].toString one of { [b], [cx, cy, omega] }
size(parameters[]) one of { 1, 3 }
===========================================================================
org.apache.commons.math3.ode.JacobianMatrices.JacobianMatrices(org.apache.commons.math3.ode.MainStateJacobianProvider, java.lang.String[]):::EXIT
parameters[] == orig(parameters[])
this.efode == null
this.index == -1
this.pode == null
this.selectedParameters[].hP elements == Double.NaN
this.selectedParameters[].hP one of { [NaN], [NaN, NaN, NaN] }
this.jacobianProviders[] == []
this.jacobianProviders[].getClass().getName() == []
this.dirtyParameter == false
this.matricesData[] one of { [1.0, 0.0, 0.0, 1.0, 0.0, 0.0], [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
parameters[] elements != null
parameters[].toString one of { [b], [cx, cy, omega] }
===========================================================================
org.apache.commons.math3.ode.JacobianMatrices.addParameterJacobianProvider(org.apache.commons.math3.ode.ParameterJacobianProvider):::ENTER
this.efode == null
this.index == -1
this.pode == null
this.selectedParameters[].hP elements == Double.NaN
this.selectedParameters[].hP one of { [NaN], [NaN, NaN, NaN] }
this.jacobianProviders[] == []
this.jacobianProviders[].getClass().getName() == []
this.dirtyParameter == false
this.matricesData[] one of { [1.0, 0.0, 0.0, 1.0, 0.0, 0.0], [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
===========================================================================
org.apache.commons.math3.ode.JacobianMatrices.addParameterJacobianProvider(org.apache.commons.math3.ode.ParameterJacobianProvider):::EXIT
this.efode == orig(this.efode)
this.index == orig(this.index)
this.jode == orig(this.jode)
this.jode.getClass().getName() == orig(this.jode.getClass().getName())
this.pode == orig(this.pode)
this.stateDim == orig(this.stateDim)
this.selectedParameters == orig(this.selectedParameters)
this.selectedParameters.getClass().getName() == orig(this.selectedParameters.getClass().getName())
this.selectedParameters[] == orig(this.selectedParameters[])
this.selectedParameters[].parameterName == orig(this.selectedParameters[].parameterName)
this.selectedParameters[].hP == orig(this.selectedParameters[].hP)
this.jacobianProviders == orig(this.jacobianProviders)
this.jacobianProviders.getClass().getName() == orig(this.jacobianProviders.getClass().getName())
this.paramDim == orig(this.paramDim)
this.dirtyParameter == orig(this.dirtyParameter)
this.matricesData == orig(this.matricesData)
this.matricesData[] == orig(this.matricesData[])
size(this.jacobianProviders[])-1 == orig(size(this.jacobianProviders[]))
this.efode == null
this.index == -1
this.pode == null
this.selectedParameters[].hP elements == Double.NaN
this.selectedParameters[].hP one of { [NaN], [NaN, NaN, NaN] }
this.jacobianProviders[].getClass().getName() one of { [org.apache.commons.math3.ode.JacobianMatricesTest.Brusselator], [org.apache.commons.math3.ode.JacobianMatricesTest.Circle] }
this.dirtyParameter == false
this.matricesData[] one of { [1.0, 0.0, 0.0, 1.0, 0.0, 0.0], [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
size(this.jacobianProviders[]) == 1
===========================================================================
org.apache.commons.math3.ode.JacobianMatrices.checkDimension(int, java.lang.Object):::ENTER
this.efode == null
this.index == -1
this.matricesData[] one of { [1.0, 0.0, 0.0, 1.0, 0.0, 0.0], [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
expected == 2
===========================================================================
org.apache.commons.math3.ode.JacobianMatrices.checkDimension(int, java.lang.Object):::EXIT
this.efode == orig(this.efode)
this.index == orig(this.index)
this.jode == orig(this.jode)
this.jode.getClass().getName() == orig(this.jode.getClass().getName())
this.pode == orig(this.pode)
this.pode.getClass().getName() == orig(this.pode.getClass().getName())
this.stateDim == orig(this.stateDim)
this.selectedParameters == orig(this.selectedParameters)
this.selectedParameters.getClass().getName() == orig(this.selectedParameters.getClass().getName())
this.selectedParameters[] == orig(this.selectedParameters[])
this.selectedParameters[].parameterName == orig(this.selectedParameters[].parameterName)
this.selectedParameters[].hP == orig(this.selectedParameters[].hP)
this.jacobianProviders == orig(this.jacobianProviders)
this.jacobianProviders[] == orig(this.jacobianProviders[])
this.jacobianProviders.getClass().getName() == orig(this.jacobianProviders.getClass().getName())
this.paramDim == orig(this.paramDim)
this.dirtyParameter == orig(this.dirtyParameter)
this.matricesData == orig(this.matricesData)
this.matricesData[] == orig(this.matricesData[])
this.efode == null
this.index == -1
this.matricesData[] one of { [1.0, 0.0, 0.0, 1.0, 0.0, 0.0], [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
===========================================================================
org.apache.commons.math3.ode.JacobianMatrices.getCurrentMainSetJacobian(double[][]):::ENTER
this.efode.time one of { 20.0, 56.548667764616276 }
this.efode.primaryStateDot[] elements != 0
this.index == 0
this.dirtyParameter == false
this.matricesData[] one of { [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 1.0, 0.0, 1.0] }
dYdY0.getClass().getName() == double[][].class
dYdY0[] elements != null
size(this.jacobianProviders[]) == 1
size(dYdY0[]) == 2
===========================================================================
org.apache.commons.math3.ode.JacobianMatrices.getCurrentMainSetJacobian(double[][]):::EXIT
this.efode == orig(this.efode)
this.efode.primary == orig(this.efode.primary)
this.efode.primary.getClass().getName() == orig(this.efode.primary.getClass().getName())
this.efode.primaryMapper == orig(this.efode.primaryMapper)
this.efode.primaryMapper.firstIndex == orig(this.efode.primaryMapper.firstIndex)
this.efode.primaryMapper.dimension == orig(this.efode.primaryMapper.dimension)
this.efode.time == orig(this.efode.time)
this.efode.primaryState == orig(this.efode.primaryState)
this.efode.primaryState[] == orig(this.efode.primaryState[])
this.efode.primaryStateDot == orig(this.efode.primaryStateDot)
this.efode.primaryStateDot[] == orig(this.efode.primaryStateDot[])
this.efode.components == orig(this.efode.components)
this.efode.components[] == orig(this.efode.components[])
this.efode.components.getClass().getName() == orig(this.efode.components.getClass().getName())
this.index == orig(this.index)
this.jode == orig(this.jode)
this.jode.getClass().getName() == orig(this.jode.getClass().getName())
this.pode == orig(this.pode)
this.pode.getClass().getName() == orig(this.pode.getClass().getName())
this.stateDim == orig(this.stateDim)
this.selectedParameters == orig(this.selectedParameters)
this.selectedParameters.getClass().getName() == orig(this.selectedParameters.getClass().getName())
this.selectedParameters[] == orig(this.selectedParameters[])
this.selectedParameters[].parameterName == orig(this.selectedParameters[].parameterName)
this.selectedParameters[].hP == orig(this.selectedParameters[].hP)
this.jacobianProviders == orig(this.jacobianProviders)
this.jacobianProviders[] == orig(this.jacobianProviders[])
this.jacobianProviders.getClass().getName() == orig(this.jacobianProviders.getClass().getName())
this.paramDim == orig(this.paramDim)
this.dirtyParameter == orig(this.dirtyParameter)
this.matricesData == orig(this.matricesData)
this.matricesData[] == orig(this.matricesData[])
dYdY0[] == orig(dYdY0[])
this.efode.time one of { 20.0, 56.548667764616276 }
this.efode.primaryStateDot[] elements != 0
this.index == 0
this.dirtyParameter == false
this.matricesData[] one of { [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 1.0, 0.0, 1.0] }
dYdY0[] elements != null
size(this.jacobianProviders[]) == 1
===========================================================================
org.apache.commons.math3.ode.JacobianMatrices.getCurrentParameterJacobian(java.lang.String, double[]):::ENTER
this.efode.time one of { 20.0, 56.548667764616276 }
this.efode.primaryStateDot[] elements != 0
this.index == 0
this.dirtyParameter == false
this.matricesData[] one of { [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 1.0, 0.0, 1.0] }
dYdP[] == [0.0, 0.0]
dYdP[] elements == 0.0
size(this.jacobianProviders[]) == 1
size(dYdP[]) == 2
===========================================================================
org.apache.commons.math3.ode.JacobianMatrices.getCurrentParameterJacobian(java.lang.String, double[]):::EXIT318
===========================================================================
org.apache.commons.math3.ode.JacobianMatrices.getCurrentParameterJacobian(java.lang.String, double[]):::EXIT
this.efode == orig(this.efode)
this.efode.primary == orig(this.efode.primary)
this.efode.primary.getClass().getName() == orig(this.efode.primary.getClass().getName())
this.efode.primaryMapper == orig(this.efode.primaryMapper)
this.efode.primaryMapper.firstIndex == orig(this.efode.primaryMapper.firstIndex)
this.efode.primaryMapper.dimension == orig(this.efode.primaryMapper.dimension)
this.efode.time == orig(this.efode.time)
this.efode.primaryState == orig(this.efode.primaryState)
this.efode.primaryState[] == orig(this.efode.primaryState[])
this.efode.primaryStateDot == orig(this.efode.primaryStateDot)
this.efode.primaryStateDot[] == orig(this.efode.primaryStateDot[])
this.efode.components == orig(this.efode.components)
this.efode.components[] == orig(this.efode.components[])
this.efode.components.getClass().getName() == orig(this.efode.components.getClass().getName())
this.index == orig(this.index)
this.jode == orig(this.jode)
this.jode.getClass().getName() == orig(this.jode.getClass().getName())
this.pode == orig(this.pode)
this.pode.getClass().getName() == orig(this.pode.getClass().getName())
this.stateDim == orig(this.stateDim)
this.selectedParameters == orig(this.selectedParameters)
this.selectedParameters.getClass().getName() == orig(this.selectedParameters.getClass().getName())
this.selectedParameters[] == orig(this.selectedParameters[])
this.selectedParameters[].parameterName == orig(this.selectedParameters[].parameterName)
this.selectedParameters[].hP == orig(this.selectedParameters[].hP)
this.jacobianProviders == orig(this.jacobianProviders)
this.jacobianProviders[] == orig(this.jacobianProviders[])
this.jacobianProviders.getClass().getName() == orig(this.jacobianProviders.getClass().getName())
this.paramDim == orig(this.paramDim)
this.dirtyParameter == orig(this.dirtyParameter)
this.matricesData == orig(this.matricesData)
this.matricesData[] == orig(this.matricesData[])
pName.toString == orig(pName.toString)
this.efode.time one of { 20.0, 56.548667764616276 }
this.efode.primaryStateDot[] elements != 0
this.index == 0
this.dirtyParameter == false
this.matricesData[] one of { [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 1.0, 0.0, 1.0] }
dYdP[] elements != 0
size(this.jacobianProviders[]) == 1
===========================================================================
org.apache.commons.math3.ode.JacobianMatrices.registerVariationalEquations(org.apache.commons.math3.ode.ExpandableStatefulODE):::ENTER
this.efode == null
this.index == -1
this.matricesData[] one of { [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 1.0, 0.0, 1.0] }
expandable.primaryMapper.firstIndex == 0
expandable.primaryMapper.dimension == 2
expandable.time == 0.0
expandable.primaryState[] sorted by <
expandable.primaryStateDot[] == [0.0, 0.0]
expandable.primaryStateDot[] elements == 0.0
expandable.components[] == []
expandable.components[].getClass().getName() == []
expandable.components.getClass().getName() == java.util.ArrayList.class
size(expandable.primaryState[]) == 2
size(expandable.primaryStateDot[]) == 2
===========================================================================
org.apache.commons.math3.ode.JacobianMatrices.registerVariationalEquations(org.apache.commons.math3.ode.ExpandableStatefulODE):::EXIT
this.jode == orig(this.jode)
this.jode.getClass().getName() == orig(this.jode.getClass().getName())
this.pode == orig(this.pode)
this.pode.getClass().getName() == orig(this.pode.getClass().getName())
this.stateDim == orig(this.stateDim)
this.selectedParameters == orig(this.selectedParameters)
this.selectedParameters.getClass().getName() == orig(this.selectedParameters.getClass().getName())
this.selectedParameters[] == orig(this.selectedParameters[])
this.selectedParameters[].parameterName == orig(this.selectedParameters[].parameterName)
this.selectedParameters[].hP == orig(this.selectedParameters[].hP)
this.jacobianProviders == orig(this.jacobianProviders)
this.jacobianProviders[] == orig(this.jacobianProviders[])
this.jacobianProviders.getClass().getName() == orig(this.jacobianProviders.getClass().getName())
this.paramDim == orig(this.paramDim)
this.dirtyParameter == orig(this.dirtyParameter)
this.matricesData == orig(this.matricesData)
this.matricesData[] == orig(this.matricesData[])
expandable.primary == orig(expandable.primary)
expandable.primary.getClass().getName() == orig(expandable.primary.getClass().getName())
expandable.primaryMapper == orig(expandable.primaryMapper)
expandable.primaryMapper.firstIndex == orig(expandable.primaryMapper.firstIndex)
expandable.primaryMapper.dimension == orig(expandable.primaryMapper.dimension)
expandable.time == orig(expandable.time)
expandable.primaryState == orig(expandable.primaryState)
expandable.primaryState[] == orig(expandable.primaryState[])
expandable.primaryStateDot == orig(expandable.primaryStateDot)
expandable.primaryStateDot[] == orig(expandable.primaryStateDot[])
expandable.components.getClass().getName() == orig(expandable.components.getClass().getName())
size(expandable.components[])-1 == orig(size(expandable.components[]))
this.efode.time == 0.0
this.efode.primaryStateDot[] == [0.0, 0.0]
this.efode.primaryStateDot[] elements == 0.0
this.index == 0
this.matricesData[] one of { [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 1.0, 0.0, 1.0] }
expandable.primaryMapper.firstIndex == 0
expandable.primaryMapper.dimension == 2
expandable.time == 0.0
expandable.primaryState[] sorted by <
expandable.primaryStateDot[] == [0.0, 0.0]
expandable.primaryStateDot[] elements == 0.0
expandable.components[] elements != null
expandable.components[].getClass().getName() == [org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent]
expandable.components[].getClass().getName() elements == org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent.class
expandable.components.getClass().getName() == java.util.ArrayList.class
size(expandable.primaryState[]) == 2
size(expandable.primaryStateDot[]) == 2
size(expandable.components[]) == 1
===========================================================================
org.apache.commons.math3.ode.JacobianMatrices.setInitialMainStateJacobian(double[][]):::ENTER
this.efode == null
this.index == -1
this.pode.getClass().getName() == org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.class
this.selectedParameters[].getClass().getName() == [org.apache.commons.math3.ode.ParameterConfiguration, org.apache.commons.math3.ode.ParameterConfiguration, org.apache.commons.math3.ode.ParameterConfiguration]
this.selectedParameters[].parameterName contains no nulls and has only one value, of length 3
this.selectedParameters[].parameterName.toString == [cx, cy, omega]
this.selectedParameters[].parameterName.toString elements one of { "cx", "cy", "omega" }
this.selectedParameters[].hP one of { [1.0E-12, 1.0E-12, 1.0E-12], [NaN, NaN, NaN] }
this.jacobianProviders[] elements has only one value
this.jacobianProviders[].getClass().getName() elements == org.apache.commons.math3.ode.JacobianMatricesTest.Circle.class
this.jacobianProviders[].getClass().getName() one of { [], [org.apache.commons.math3.ode.JacobianMatricesTest.Circle] }
this.paramDim == 3
this.matricesData[] == [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
dYdY0.getClass().getName() == double[][].class
size(this.selectedParameters[]) == 3
size(this.matricesData[]) == 10
size(dYdY0[]) == 2
===========================================================================
org.apache.commons.math3.ode.JacobianMatrices.setInitialMainStateJacobian(double[][]):::EXIT
this.efode == orig(this.efode)
this.index == orig(this.index)
this.jode == orig(this.jode)
this.jode.getClass().getName() == orig(this.jode.getClass().getName())
this.pode == orig(this.pode)
this.pode.getClass().getName() == orig(this.pode.getClass().getName())
this.stateDim == orig(this.stateDim)
this.selectedParameters == orig(this.selectedParameters)
this.selectedParameters.getClass().getName() == orig(this.selectedParameters.getClass().getName())
this.selectedParameters[] == orig(this.selectedParameters[])
this.selectedParameters[].parameterName == orig(this.selectedParameters[].parameterName)
this.selectedParameters[].hP == orig(this.selectedParameters[].hP)
this.jacobianProviders == orig(this.jacobianProviders)
this.jacobianProviders[] == orig(this.jacobianProviders[])
this.jacobianProviders.getClass().getName() == orig(this.jacobianProviders.getClass().getName())
this.paramDim == orig(this.paramDim)
this.dirtyParameter == orig(this.dirtyParameter)
this.matricesData == orig(this.matricesData)
this.matricesData[] == orig(this.matricesData[])
dYdY0[] == orig(dYdY0[])
this.efode == null
this.index == -1
this.pode.getClass().getName() == org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.class
this.selectedParameters[].getClass().getName() == [org.apache.commons.math3.ode.ParameterConfiguration, org.apache.commons.math3.ode.ParameterConfiguration, org.apache.commons.math3.ode.ParameterConfiguration]
this.selectedParameters[].parameterName contains no nulls and has only one value, of length 3
this.selectedParameters[].parameterName.toString == [cx, cy, omega]
this.selectedParameters[].parameterName.toString elements one of { "cx", "cy", "omega" }
this.selectedParameters[].hP one of { [1.0E-12, 1.0E-12, 1.0E-12], [NaN, NaN, NaN] }
this.jacobianProviders[] elements has only one value
this.jacobianProviders[].getClass().getName() elements == org.apache.commons.math3.ode.JacobianMatricesTest.Circle.class
this.jacobianProviders[].getClass().getName() one of { [], [org.apache.commons.math3.ode.JacobianMatricesTest.Circle] }
this.paramDim == 3
this.matricesData[] == [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
size(this.selectedParameters[]) == 3
size(this.matricesData[]) == 10
===========================================================================
org.apache.commons.math3.ode.JacobianMatrices.setInitialParameterJacobian(java.lang.String, double[]):::ENTER
this.efode == null
this.index == -1
this.matricesData[] one of { [1.0, 0.0, 0.0, 1.0, 0.0, 0.0], [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
dYdP[] elements one of { 0.0, 1.0 }
dYdP[] one of { [0.0, 0.0], [0.0, 1.0] }
dYdP[] sorted by <=
size(dYdP[]) == 2
===========================================================================
org.apache.commons.math3.ode.JacobianMatrices.setInitialParameterJacobian(java.lang.String, double[]):::EXIT
this.efode == orig(this.efode)
this.index == orig(this.index)
this.jode == orig(this.jode)
this.jode.getClass().getName() == orig(this.jode.getClass().getName())
this.pode == orig(this.pode)
this.pode.getClass().getName() == orig(this.pode.getClass().getName())
this.stateDim == orig(this.stateDim)
this.selectedParameters == orig(this.selectedParameters)
this.selectedParameters.getClass().getName() == orig(this.selectedParameters.getClass().getName())
this.selectedParameters[] == orig(this.selectedParameters[])
this.selectedParameters[].parameterName == orig(this.selectedParameters[].parameterName)
this.selectedParameters[].hP == orig(this.selectedParameters[].hP)
this.jacobianProviders == orig(this.jacobianProviders)
this.jacobianProviders[] == orig(this.jacobianProviders[])
this.jacobianProviders.getClass().getName() == orig(this.jacobianProviders.getClass().getName())
this.paramDim == orig(this.paramDim)
this.dirtyParameter == orig(this.dirtyParameter)
this.matricesData == orig(this.matricesData)
pName.toString == orig(pName.toString)
dYdP[] == orig(dYdP[])
size(this.matricesData[]) == orig(size(this.matricesData[]))
this.efode == null
this.index == -1
this.matricesData[] one of { [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 1.0, 0.0, 1.0] }
dYdP[] elements one of { 0.0, 1.0 }
dYdP[] one of { [0.0, 0.0], [0.0, 1.0] }
dYdP[] sorted by <=
this.matricesData[] >= orig(this.matricesData[]) (elementwise)
===========================================================================
org.apache.commons.math3.ode.JacobianMatrices.setParameterStep(java.lang.String, double):::ENTER
this.efode == null
this.index == -1
this.jode.getClass().getName() == org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper.class
this.jacobianProviders[] == []
this.jacobianProviders[].getClass().getName() == []
this.dirtyParameter == true
this.matricesData[] one of { [1.0, 0.0, 0.0, 1.0, 0.0, 0.0], [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
hP == 1.0E-12
===========================================================================
org.apache.commons.math3.ode.JacobianMatrices.setParameterStep(java.lang.String, double):::EXIT
this.efode == orig(this.efode)
this.index == orig(this.index)
this.jode == orig(this.jode)
this.jode.getClass().getName() == orig(this.jode.getClass().getName())
this.pode == orig(this.pode)
this.pode.getClass().getName() == orig(this.pode.getClass().getName())
this.stateDim == orig(this.stateDim)
this.selectedParameters == orig(this.selectedParameters)
this.selectedParameters.getClass().getName() == orig(this.selectedParameters.getClass().getName())
this.selectedParameters[] == orig(this.selectedParameters[])
this.selectedParameters[].parameterName == orig(this.selectedParameters[].parameterName)
this.jacobianProviders == orig(this.jacobianProviders)
this.jacobianProviders[] == orig(this.jacobianProviders[])
this.jacobianProviders.getClass().getName() == orig(this.jacobianProviders.getClass().getName())
this.paramDim == orig(this.paramDim)
this.dirtyParameter == orig(this.dirtyParameter)
this.matricesData == orig(this.matricesData)
this.matricesData[] == orig(this.matricesData[])
parameter.toString == orig(parameter.toString)
this.efode == null
this.index == -1
this.jode.getClass().getName() == org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper.class
this.jacobianProviders[] == []
this.jacobianProviders[].getClass().getName() == []
this.dirtyParameter == true
this.matricesData[] one of { [1.0, 0.0, 0.0, 1.0, 0.0, 0.0], [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
===========================================================================
org.apache.commons.math3.ode.JacobianMatrices.setParameterizedODE(org.apache.commons.math3.ode.ParameterizedODE):::ENTER
this.efode == null
this.index == -1
this.jode.getClass().getName() == org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper.class
this.pode == null
this.selectedParameters[].hP elements == Double.NaN
this.selectedParameters[].hP one of { [NaN], [NaN, NaN, NaN] }
this.jacobianProviders[] == []
this.jacobianProviders[].getClass().getName() == []
this.dirtyParameter == false
this.matricesData[] one of { [1.0, 0.0, 0.0, 1.0, 0.0, 0.0], [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
===========================================================================
org.apache.commons.math3.ode.JacobianMatrices.setParameterizedODE(org.apache.commons.math3.ode.ParameterizedODE):::EXIT
this.efode == orig(this.efode)
this.index == orig(this.index)
this.jode == orig(this.jode)
this.jode.getClass().getName() == orig(this.jode.getClass().getName())
this.stateDim == orig(this.stateDim)
this.selectedParameters == orig(this.selectedParameters)
this.selectedParameters.getClass().getName() == orig(this.selectedParameters.getClass().getName())
this.selectedParameters[] == orig(this.selectedParameters[])
this.selectedParameters[].parameterName == orig(this.selectedParameters[].parameterName)
this.selectedParameters[].hP == orig(this.selectedParameters[].hP)
this.jacobianProviders == orig(this.jacobianProviders)
this.jacobianProviders[] == orig(this.jacobianProviders[])
this.jacobianProviders.getClass().getName() == orig(this.jacobianProviders.getClass().getName())
this.paramDim == orig(this.paramDim)
this.matricesData == orig(this.matricesData)
this.matricesData[] == orig(this.matricesData[])
this.efode == null
this.index == -1
this.jode.getClass().getName() == org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper.class
this.selectedParameters[].hP elements == Double.NaN
this.selectedParameters[].hP one of { [NaN], [NaN, NaN, NaN] }
this.jacobianProviders[] == []
this.jacobianProviders[].getClass().getName() == []
this.dirtyParameter == true
this.matricesData[] one of { [1.0, 0.0, 0.0, 1.0, 0.0, 0.0], [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$Brusselator:::CLASS
org.apache.commons.math3.ode.JacobianMatricesTest$Brusselator.B has only one value
org.apache.commons.math3.ode.JacobianMatricesTest$Brusselator.B.toString == "b"
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$Brusselator:::OBJECT
this.parametersNames.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$Brusselator.Brusselator(double):::ENTER
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$Brusselator.Brusselator(double):::EXIT
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$Brusselator.computeDerivatives(double, double[], double[]):::ENTER
t >= 0.0
size(y[]) == 2
size(yDot[]) == 2
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$Brusselator.computeDerivatives(double, double[], double[]):::EXIT
org.apache.commons.math3.ode.JacobianMatricesTest$Brusselator.B == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Brusselator.B)
org.apache.commons.math3.ode.JacobianMatricesTest$Brusselator.B.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Brusselator.B.toString)
this.b == orig(this.b)
this.parametersNames == orig(this.parametersNames)
this.parametersNames.getClass().getName() == orig(this.parametersNames.getClass().getName())
y[] == orig(y[])
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$Brusselator.computeMainStateJacobian(double, double[], double[], double[][]):::ENTER
dFdY.getClass().getName() == double[][].class
dFdY[] elements != null
size(y[]) == 2
size(yDot[]) == 2
size(dFdY[]) == 2
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$Brusselator.computeMainStateJacobian(double, double[], double[], double[][]):::EXIT
org.apache.commons.math3.ode.JacobianMatricesTest$Brusselator.B == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Brusselator.B)
org.apache.commons.math3.ode.JacobianMatricesTest$Brusselator.B.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Brusselator.B.toString)
this.b == orig(this.b)
this.parametersNames == orig(this.parametersNames)
this.parametersNames.getClass().getName() == orig(this.parametersNames.getClass().getName())
y[] == orig(y[])
yDot[] == orig(yDot[])
dFdY[] == orig(dFdY[])
dFdY[] elements != null
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$Brusselator.computeParameterJacobian(double, double[], double[], java.lang.String, double[]):::ENTER
paramName has only one value
paramName.toString == "b"
dFdP[] == [0.0, 0.0]
dFdP[] elements == 0.0
size(y[]) == 2
size(yDot[]) == 2
size(dFdP[]) == 2
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$Brusselator.computeParameterJacobian(double, double[], double[], java.lang.String, double[]):::EXIT
org.apache.commons.math3.ode.JacobianMatricesTest$Brusselator.B == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Brusselator.B)
org.apache.commons.math3.ode.JacobianMatricesTest$Brusselator.B.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Brusselator.B.toString)
this.b == orig(this.b)
this.parametersNames == orig(this.parametersNames)
this.parametersNames.getClass().getName() == orig(this.parametersNames.getClass().getName())
y[] == orig(y[])
yDot[] == orig(yDot[])
paramName.toString == orig(paramName.toString)
paramName.toString == "b"
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$Brusselator.dYdP0():::ENTER
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$Brusselator.dYdP0():::EXIT
org.apache.commons.math3.ode.JacobianMatricesTest$Brusselator.B == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Brusselator.B)
org.apache.commons.math3.ode.JacobianMatricesTest$Brusselator.B.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Brusselator.B.toString)
this.b == orig(this.b)
this.parametersNames == orig(this.parametersNames)
this.parametersNames.getClass().getName() == orig(this.parametersNames.getClass().getName())
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$Brusselator.dYdP1():::ENTER
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$Brusselator.dYdP1():::EXIT
org.apache.commons.math3.ode.JacobianMatricesTest$Brusselator.B == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Brusselator.B)
org.apache.commons.math3.ode.JacobianMatricesTest$Brusselator.B.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Brusselator.B.toString)
this.b == orig(this.b)
this.parametersNames == orig(this.parametersNames)
this.parametersNames.getClass().getName() == orig(this.parametersNames.getClass().getName())
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$Brusselator.getDimension():::ENTER
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$Brusselator.getDimension():::EXIT
org.apache.commons.math3.ode.JacobianMatricesTest$Brusselator.B == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Brusselator.B)
org.apache.commons.math3.ode.JacobianMatricesTest$Brusselator.B.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Brusselator.B.toString)
this.b == orig(this.b)
this.parametersNames == orig(this.parametersNames)
this.parametersNames.getClass().getName() == orig(this.parametersNames.getClass().getName())
return == 2
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$Circle:::CLASS
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CX has only one value
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CX.toString == "cx"
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CY has only one value
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CY.toString == "cy"
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.OMEGA has only one value
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.OMEGA.toString == "omega"
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$Circle:::OBJECT
this has only one value
this.y0 has only one value
this.y0[] == [0.0, 1.0]
this.y0[] elements one of { 0.0, 1.0 }
this.y0[] sorted by <
this.cx == 1.0
this.cy == 1.0
this.omega == 0.1
this.parametersNames has only one value
this.parametersNames.getClass().getName() == java.util.ArrayList.class
size(this.y0[]) == 2
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.Circle(double[], double, double, double):::ENTER
y0 has only one value
y0[] == [0.0, 1.0]
y0[] elements one of { 0.0, 1.0 }
cx == 1.0
cy == 1.0
omega == 0.1
size(y0[]) == 2
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.Circle(double[], double, double, double):::EXIT
y0[] == orig(y0[])
y0[] == [0.0, 1.0]
y0[] elements one of { 0.0, 1.0 }
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.computeDerivatives(double, double[], double[]):::ENTER
y has only one value
yDot has only one value
size(y[]) == 2
size(yDot[]) == 2
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.computeDerivatives(double, double[], double[]):::EXIT
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CX == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CX)
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CX.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CX.toString)
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CY == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CY)
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CY.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CY.toString)
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.OMEGA == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Circle.OMEGA)
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.OMEGA.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Circle.OMEGA.toString)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.cx == orig(this.cx)
this.cy == orig(this.cy)
this.omega == orig(this.omega)
this.parametersNames == orig(this.parametersNames)
this.parametersNames.getClass().getName() == orig(this.parametersNames.getClass().getName())
y[] == orig(y[])
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.computeMainStateJacobian(double, double[], double[], double[][]):::ENTER
y has only one value
yDot has only one value
dFdY.getClass().getName() == double[][].class
dFdY[] elements != null
size(y[]) == 2
size(yDot[]) == 2
size(dFdY[]) == 2
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.computeMainStateJacobian(double, double[], double[], double[][]):::EXIT
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CX == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CX)
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CX.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CX.toString)
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CY == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CY)
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CY.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CY.toString)
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.OMEGA == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Circle.OMEGA)
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.OMEGA.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Circle.OMEGA.toString)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.cx == orig(this.cx)
this.cy == orig(this.cy)
this.omega == orig(this.omega)
this.parametersNames == orig(this.parametersNames)
this.parametersNames.getClass().getName() == orig(this.parametersNames.getClass().getName())
y[] == orig(y[])
yDot[] == orig(yDot[])
dFdY[] == orig(dFdY[])
dFdY[] elements != null
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.computeParameterJacobian(double, double[], double[], java.lang.String, double[]):::ENTER
y has only one value
yDot has only one value
paramName.toString one of { "cx", "cy", "omega" }
dFdP[] elements one of { -0.1, 0.0, 0.1 }
dFdP[] one of { [0.0, -0.1], [0.0, 0.0], [0.1, 0.0] }
dFdP[] sorted by >=
size(y[]) == 2
size(yDot[]) == 2
size(dFdP[]) == 2
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.computeParameterJacobian(double, double[], double[], java.lang.String, double[]):::EXIT
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CX == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CX)
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CX.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CX.toString)
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CY == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CY)
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CY.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CY.toString)
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.OMEGA == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Circle.OMEGA)
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.OMEGA.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Circle.OMEGA.toString)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.cx == orig(this.cx)
this.cy == orig(this.cy)
this.omega == orig(this.omega)
this.parametersNames == orig(this.parametersNames)
this.parametersNames.getClass().getName() == orig(this.parametersNames.getClass().getName())
y[] == orig(y[])
yDot[] == orig(yDot[])
paramName.toString == orig(paramName.toString)
paramName.toString one of { "cx", "cy", "omega" }
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.exactDyDcx(double):::ENTER
t one of { 0.0, 56.548667764616276 }
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.exactDyDcx(double):::EXIT
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CX == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CX)
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CX.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CX.toString)
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CY == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CY)
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CY.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CY.toString)
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.OMEGA == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Circle.OMEGA)
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.OMEGA.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Circle.OMEGA.toString)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.cx == orig(this.cx)
this.cy == orig(this.cy)
this.omega == orig(this.omega)
this.parametersNames == orig(this.parametersNames)
this.parametersNames.getClass().getName() == orig(this.parametersNames.getClass().getName())
return[] elements one of { 0.0, 0.19098300562505266, 0.5877852522924734 }
return[] one of { [0.0, 0.0], [0.19098300562505266, 0.5877852522924734] }
size(return[]) == 2
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.exactDyDcy(double):::ENTER
t one of { 0.0, 56.548667764616276 }
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.exactDyDcy(double):::EXIT
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CX == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CX)
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CX.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CX.toString)
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CY == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CY)
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CY.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CY.toString)
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.OMEGA == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Circle.OMEGA)
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.OMEGA.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Circle.OMEGA.toString)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.cx == orig(this.cx)
this.cy == orig(this.cy)
this.omega == orig(this.omega)
this.parametersNames == orig(this.parametersNames)
this.parametersNames.getClass().getName() == orig(this.parametersNames.getClass().getName())
return[] elements one of { -0.5877852522924734, 0.0, 0.19098300562505266 }
return[] one of { [-0.5877852522924734, 0.19098300562505266], [0.0, 0.0] }
size(return[]) == 2
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.exactDyDom(double):::ENTER
t one of { 0.0, 56.548667764616276 }
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.exactDyDom(double):::EXIT
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CX == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CX)
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CX.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CX.toString)
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CY == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CY)
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CY.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CY.toString)
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.OMEGA == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Circle.OMEGA)
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.OMEGA.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Circle.OMEGA.toString)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.cx == orig(this.cx)
this.cy == orig(this.cy)
this.omega == orig(this.omega)
this.parametersNames == orig(this.parametersNames)
this.parametersNames.getClass().getName() == orig(this.parametersNames.getClass().getName())
return[] elements one of { -45.748833230837334, -33.23847294882823, 0.0 }
return[] one of { [-33.23847294882823, -45.748833230837334], [0.0, 0.0] }
size(return[]) == 2
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.exactDyDy0(double):::ENTER
t one of { 0.0, 56.548667764616276 }
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.exactDyDy0(double):::EXIT
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CX == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CX)
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CX.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CX.toString)
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CY == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CY)
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CY.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CY.toString)
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.OMEGA == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Circle.OMEGA)
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.OMEGA.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Circle.OMEGA.toString)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.cx == orig(this.cx)
this.cy == orig(this.cy)
this.omega == orig(this.omega)
this.parametersNames == orig(this.parametersNames)
this.parametersNames.getClass().getName() == orig(this.parametersNames.getClass().getName())
return.getClass().getName() == double[][].class
size(return[]) == 2
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.exactY(double):::ENTER
t == 56.548667764616276
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.exactY(double):::EXIT
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CX == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CX)
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CX.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CX.toString)
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CY == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CY)
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CY.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CY.toString)
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.OMEGA == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Circle.OMEGA)
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.OMEGA.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Circle.OMEGA.toString)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.cx == orig(this.cx)
this.cy == orig(this.cy)
this.omega == orig(this.omega)
this.parametersNames == orig(this.parametersNames)
this.parametersNames.getClass().getName() == orig(this.parametersNames.getClass().getName())
return[] == [0.19098300562505266, 1.5877852522924734]
return[] elements one of { 0.19098300562505266, 1.5877852522924734 }
size(return[]) == 2
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.getDimension():::ENTER
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.getDimension():::EXIT
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CX == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CX)
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CX.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CX.toString)
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CY == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CY)
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CY.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Circle.CY.toString)
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.OMEGA == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Circle.OMEGA)
org.apache.commons.math3.ode.JacobianMatricesTest$Circle.OMEGA.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$Circle.OMEGA.toString)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.cx == orig(this.cx)
this.cy == orig(this.cy)
this.omega == orig(this.omega)
this.parametersNames == orig(this.parametersNames)
this.parametersNames.getClass().getName() == orig(this.parametersNames.getClass().getName())
return == 2
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$ParamBrusselator:::CLASS
org.apache.commons.math3.ode.JacobianMatricesTest$ParamBrusselator.B has only one value
org.apache.commons.math3.ode.JacobianMatricesTest$ParamBrusselator.B.toString == "b"
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$ParamBrusselator:::OBJECT
this.parametersNames.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$ParamBrusselator.ParamBrusselator(double):::ENTER
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$ParamBrusselator.ParamBrusselator(double):::EXIT
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$ParamBrusselator.computeDerivatives(double, double[], double[]):::ENTER
t >= 0.0
size(y[]) == 2
size(yDot[]) == 2
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$ParamBrusselator.computeDerivatives(double, double[], double[]):::EXIT
org.apache.commons.math3.ode.JacobianMatricesTest$ParamBrusselator.B == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParamBrusselator.B)
org.apache.commons.math3.ode.JacobianMatricesTest$ParamBrusselator.B.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParamBrusselator.B.toString)
this.b == orig(this.b)
this.parametersNames == orig(this.parametersNames)
this.parametersNames.getClass().getName() == orig(this.parametersNames.getClass().getName())
y[] == orig(y[])
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$ParamBrusselator.dYdP0():::ENTER
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$ParamBrusselator.dYdP0():::EXIT
org.apache.commons.math3.ode.JacobianMatricesTest$ParamBrusselator.B == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParamBrusselator.B)
org.apache.commons.math3.ode.JacobianMatricesTest$ParamBrusselator.B.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParamBrusselator.B.toString)
this.b == orig(this.b)
this.parametersNames == orig(this.parametersNames)
this.parametersNames.getClass().getName() == orig(this.parametersNames.getClass().getName())
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$ParamBrusselator.dYdP1():::ENTER
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$ParamBrusselator.dYdP1():::EXIT
org.apache.commons.math3.ode.JacobianMatricesTest$ParamBrusselator.B == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParamBrusselator.B)
org.apache.commons.math3.ode.JacobianMatricesTest$ParamBrusselator.B.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParamBrusselator.B.toString)
this.b == orig(this.b)
this.parametersNames == orig(this.parametersNames)
this.parametersNames.getClass().getName() == orig(this.parametersNames.getClass().getName())
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$ParamBrusselator.getDimension():::ENTER
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$ParamBrusselator.getDimension():::EXIT
org.apache.commons.math3.ode.JacobianMatricesTest$ParamBrusselator.B == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParamBrusselator.B)
org.apache.commons.math3.ode.JacobianMatricesTest$ParamBrusselator.B.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParamBrusselator.B.toString)
this.b == orig(this.b)
this.parametersNames == orig(this.parametersNames)
this.parametersNames.getClass().getName() == orig(this.parametersNames.getClass().getName())
return == 2
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$ParamBrusselator.getParameter(java.lang.String):::ENTER
name has only one value
name.toString == "b"
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$ParamBrusselator.getParameter(java.lang.String):::EXIT
org.apache.commons.math3.ode.JacobianMatricesTest$ParamBrusselator.B == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParamBrusselator.B)
org.apache.commons.math3.ode.JacobianMatricesTest$ParamBrusselator.B.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParamBrusselator.B.toString)
this.b == orig(this.b)
this.parametersNames == orig(this.parametersNames)
this.parametersNames.getClass().getName() == orig(this.parametersNames.getClass().getName())
name.toString == orig(name.toString)
name.toString == "b"
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$ParamBrusselator.setParameter(java.lang.String, double):::ENTER
name has only one value
name.toString == "b"
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$ParamBrusselator.setParameter(java.lang.String, double):::EXIT
org.apache.commons.math3.ode.JacobianMatricesTest$ParamBrusselator.B == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParamBrusselator.B)
org.apache.commons.math3.ode.JacobianMatricesTest$ParamBrusselator.B.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParamBrusselator.B.toString)
this.b == orig(this.b)
this.parametersNames == orig(this.parametersNames)
this.parametersNames.getClass().getName() == orig(this.parametersNames.getClass().getName())
name.toString == orig(name.toString)
name.toString == "b"
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle:::CLASS
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CX has only one value
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CX.toString == "cx"
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CY has only one value
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CY.toString == "cy"
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.OMEGA has only one value
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.OMEGA.toString == "omega"
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle:::OBJECT
this has only one value
this.y0 has only one value
this.y0[] == [0.0, 1.0]
this.y0[] elements one of { 0.0, 1.0 }
this.y0[] sorted by <
this.cx == 1.0
this.cy == 1.0
this.omega == 0.1
this.parametersNames has only one value
this.parametersNames.getClass().getName() == java.util.ArrayList.class
size(this.y0[]) == 2
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.ParameterizedCircle(double[], double, double, double):::ENTER
y0 has only one value
y0[] == [0.0, 1.0]
y0[] elements one of { 0.0, 1.0 }
cx == 1.0
cy == 1.0
omega == 0.1
size(y0[]) == 2
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.ParameterizedCircle(double[], double, double, double):::EXIT
y0[] == orig(y0[])
y0[] == [0.0, 1.0]
y0[] elements one of { 0.0, 1.0 }
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.computeDerivatives(double, double[], double[]):::ENTER
y has only one value
size(y[]) == 2
size(yDot[]) == 2
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.computeDerivatives(double, double[], double[]):::EXIT
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CX == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CX)
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CX.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CX.toString)
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CY == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CY)
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CY.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CY.toString)
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.OMEGA == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.OMEGA)
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.OMEGA.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.OMEGA.toString)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.cx == orig(this.cx)
this.cy == orig(this.cy)
this.omega == orig(this.omega)
this.parametersNames == orig(this.parametersNames)
this.parametersNames.getClass().getName() == orig(this.parametersNames.getClass().getName())
y[] == orig(y[])
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.exactDyDcx(double):::ENTER
t one of { 0.0, 56.548667764616276 }
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.exactDyDcx(double):::EXIT
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CX == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CX)
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CX.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CX.toString)
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CY == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CY)
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CY.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CY.toString)
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.OMEGA == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.OMEGA)
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.OMEGA.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.OMEGA.toString)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.cx == orig(this.cx)
this.cy == orig(this.cy)
this.omega == orig(this.omega)
this.parametersNames == orig(this.parametersNames)
this.parametersNames.getClass().getName() == orig(this.parametersNames.getClass().getName())
return[] elements one of { 0.0, 0.19098300562505266, 0.5877852522924734 }
return[] one of { [0.0, 0.0], [0.19098300562505266, 0.5877852522924734] }
size(return[]) == 2
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.exactDyDcy(double):::ENTER
t == 0.0
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.exactDyDcy(double):::EXIT
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CX == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CX)
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CX.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CX.toString)
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CY == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CY)
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CY.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CY.toString)
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.OMEGA == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.OMEGA)
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.OMEGA.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.OMEGA.toString)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.cx == orig(this.cx)
this.cy == orig(this.cy)
this.omega == orig(this.omega)
this.parametersNames == orig(this.parametersNames)
this.parametersNames.getClass().getName() == orig(this.parametersNames.getClass().getName())
return has only one value
return[] == [0.0, 0.0]
return[] elements == 0.0
size(return[]) == 2
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.exactDyDom(double):::ENTER
t one of { 0.0, 56.548667764616276 }
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.exactDyDom(double):::EXIT
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CX == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CX)
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CX.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CX.toString)
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CY == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CY)
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CY.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CY.toString)
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.OMEGA == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.OMEGA)
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.OMEGA.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.OMEGA.toString)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.cx == orig(this.cx)
this.cy == orig(this.cy)
this.omega == orig(this.omega)
this.parametersNames == orig(this.parametersNames)
this.parametersNames.getClass().getName() == orig(this.parametersNames.getClass().getName())
return[] elements one of { -45.748833230837334, -33.23847294882823, 0.0 }
return[] one of { [-33.23847294882823, -45.748833230837334], [0.0, 0.0] }
size(return[]) == 2
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.exactDyDy0(double):::ENTER
t one of { 0.0, 56.548667764616276 }
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.exactDyDy0(double):::EXIT
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CX == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CX)
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CX.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CX.toString)
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CY == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CY)
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CY.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CY.toString)
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.OMEGA == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.OMEGA)
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.OMEGA.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.OMEGA.toString)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.cx == orig(this.cx)
this.cy == orig(this.cy)
this.omega == orig(this.omega)
this.parametersNames == orig(this.parametersNames)
this.parametersNames.getClass().getName() == orig(this.parametersNames.getClass().getName())
return.getClass().getName() == double[][].class
size(return[]) == 2
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.exactY(double):::ENTER
t == 56.548667764616276
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.exactY(double):::EXIT
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CX == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CX)
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CX.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CX.toString)
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CY == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CY)
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CY.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CY.toString)
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.OMEGA == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.OMEGA)
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.OMEGA.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.OMEGA.toString)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.cx == orig(this.cx)
this.cy == orig(this.cy)
this.omega == orig(this.omega)
this.parametersNames == orig(this.parametersNames)
this.parametersNames.getClass().getName() == orig(this.parametersNames.getClass().getName())
return[] == [0.19098300562505266, 1.5877852522924734]
return[] elements one of { 0.19098300562505266, 1.5877852522924734 }
size(return[]) == 2
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.getDimension():::ENTER
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.getDimension():::EXIT
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CX == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CX)
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CX.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CX.toString)
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CY == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CY)
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CY.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CY.toString)
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.OMEGA == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.OMEGA)
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.OMEGA.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.OMEGA.toString)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.cx == orig(this.cx)
this.cy == orig(this.cy)
this.omega == orig(this.omega)
this.parametersNames == orig(this.parametersNames)
this.parametersNames.getClass().getName() == orig(this.parametersNames.getClass().getName())
return == 2
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.getParameter(java.lang.String):::ENTER
name.toString one of { "cx", "cy", "omega" }
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.getParameter(java.lang.String):::EXIT525
name.toString == "cx"
return == 1.0
orig(name) has only one value
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.getParameter(java.lang.String):::EXIT527
name.toString == "cy"
return == 1.0
orig(name) has only one value
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.getParameter(java.lang.String):::EXIT529
name.toString == "omega"
return == 0.1
orig(name) has only one value
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.getParameter(java.lang.String):::EXIT
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CX == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CX)
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CX.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CX.toString)
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CY == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CY)
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CY.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CY.toString)
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.OMEGA == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.OMEGA)
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.OMEGA.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.OMEGA.toString)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.cx == orig(this.cx)
this.cy == orig(this.cy)
this.omega == orig(this.omega)
this.parametersNames == orig(this.parametersNames)
this.parametersNames.getClass().getName() == orig(this.parametersNames.getClass().getName())
name.toString == orig(name.toString)
name.toString one of { "cx", "cy", "omega" }
return one of { 0.1, 1.0 }
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.setParameter(java.lang.String, double):::ENTER
name.toString one of { "cx", "cy", "omega" }
value one of { 0.10000000000100001, 1.000000000001 }
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.setParameter(java.lang.String, double):::EXIT
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CX == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CX)
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CX.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CX.toString)
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CY == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CY)
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CY.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.CY.toString)
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.OMEGA == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.OMEGA)
org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.OMEGA.toString == orig(org.apache.commons.math3.ode.JacobianMatricesTest$ParameterizedCircle.OMEGA.toString)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.cx == orig(this.cx)
this.cy == orig(this.cy)
this.omega == orig(this.omega)
this.parametersNames == orig(this.parametersNames)
this.parametersNames.getClass().getName() == orig(this.parametersNames.getClass().getName())
name.toString == orig(name.toString)
name.toString one of { "cx", "cy", "omega" }
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest:::OBJECT
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest.JacobianMatricesTest():::EXIT
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest.testAnalyticalDifferentiation():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest.testAnalyticalDifferentiation():::EXIT
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest.testFinalResult():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest.testFinalResult():::EXIT
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest.testHighAccuracyExternalDifferentiation():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest.testHighAccuracyExternalDifferentiation():::EXIT
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest.testInternalDifferentiation():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest.testInternalDifferentiation():::EXIT
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest.testLowAccuracyExternalDifferentiation():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest.testLowAccuracyExternalDifferentiation():::EXIT
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest.testParameterizable():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.JacobianMatricesTest.testParameterizable():::EXIT
===========================================================================
org.apache.commons.math3.ode.MultistepIntegrator$CountingDifferentialEquations:::OBJECT
this.dimension one of { 1, 2, 4 }
org.apache.commons.math3.ode.MultistepIntegrator.this.scaled == null
org.apache.commons.math3.ode.MultistepIntegrator.this.nordsieck == null
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT has only one value
org.apache.commons.math3.ode.MultistepIntegrator.this.starter.getClass().getName() == org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.class
org.apache.commons.math3.ode.MultistepIntegrator.this.nSteps >= 2
org.apache.commons.math3.ode.MultistepIntegrator.this.safety == 0.9
org.apache.commons.math3.ode.MultistepIntegrator.this.minReduction == 0.2
org.apache.commons.math3.ode.MultistepIntegrator.this.vecAbsoluteTolerance == null
org.apache.commons.math3.ode.MultistepIntegrator.this.vecRelativeTolerance == null
org.apache.commons.math3.ode.MultistepIntegrator.this.mainSetDimension one of { 1, 2, 4 }
org.apache.commons.math3.ode.MultistepIntegrator.this.initialStep == -1.0
org.apache.commons.math3.ode.MultistepIntegrator.this.minStep one of { 0.0, 1.0E-6 }
org.apache.commons.math3.ode.MultistepIntegrator.this.maxStep one of { 0.1, 1.0, 4.0 }
org.apache.commons.math3.ode.MultistepIntegrator.this.stepHandlers.getClass().getName() == java.util.ArrayList.class
org.apache.commons.math3.ode.MultistepIntegrator.this.stepStart == Double.NaN
org.apache.commons.math3.ode.MultistepIntegrator.this.stepSize one of { 0.0, 3.1622776601683794E-4 }
org.apache.commons.math3.ode.MultistepIntegrator.this.isLastStep == false
org.apache.commons.math3.ode.MultistepIntegrator.this.resetOccurred == false
org.apache.commons.math3.ode.MultistepIntegrator.this.eventsStates.getClass().getName() == java.util.ArrayList.class
org.apache.commons.math3.ode.MultistepIntegrator.this.statesInitialized == false
org.apache.commons.math3.ode.MultistepIntegrator.this.name.toString one of { "Adams-Bashforth", "Adams-Moulton" }
org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.maximalCount one of { 650, 2147483647 }
org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.count >= 0
org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.time == 0.0
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.components[] == []
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.components[].getClass().getName() == []
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.components.getClass().getName() == java.util.ArrayList.class
size(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryState[]) one of { 1, 2, 4 }
size(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryStateDot[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math3.ode.MultistepIntegrator$CountingDifferentialEquations.CountingDifferentialEquations(org.apache.commons.math3.ode.MultistepIntegrator, int):::ENTER
org.apache.commons.math3.ode.MultistepIntegrator.this.scaled == null
org.apache.commons.math3.ode.MultistepIntegrator.this.nordsieck == null
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT has only one value
org.apache.commons.math3.ode.MultistepIntegrator.this.starter.getClass().getName() == org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.class
org.apache.commons.math3.ode.MultistepIntegrator.this.safety == 0.9
org.apache.commons.math3.ode.MultistepIntegrator.this.minReduction == 0.2
org.apache.commons.math3.ode.MultistepIntegrator.this.vecAbsoluteTolerance == null
org.apache.commons.math3.ode.MultistepIntegrator.this.vecRelativeTolerance == null
org.apache.commons.math3.ode.MultistepIntegrator.this.mainSetDimension one of { 1, 2, 4 }
org.apache.commons.math3.ode.MultistepIntegrator.this.initialStep == -1.0
org.apache.commons.math3.ode.MultistepIntegrator.this.minStep one of { 0.0, 1.0E-6 }
org.apache.commons.math3.ode.MultistepIntegrator.this.maxStep one of { 0.1, 1.0, 4.0 }
org.apache.commons.math3.ode.MultistepIntegrator.this.stepHandlers.getClass().getName() == java.util.ArrayList.class
org.apache.commons.math3.ode.MultistepIntegrator.this.stepStart == Double.NaN
org.apache.commons.math3.ode.MultistepIntegrator.this.stepSize one of { 0.0, 3.1622776601683794E-4 }
org.apache.commons.math3.ode.MultistepIntegrator.this.isLastStep == false
org.apache.commons.math3.ode.MultistepIntegrator.this.resetOccurred == false
org.apache.commons.math3.ode.MultistepIntegrator.this.eventsStates.getClass().getName() == java.util.ArrayList.class
org.apache.commons.math3.ode.MultistepIntegrator.this.statesInitialized == false
org.apache.commons.math3.ode.MultistepIntegrator.this.name.toString one of { "Adams-Bashforth", "Adams-Moulton" }
org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.maximalCount one of { 650, 2147483647 }
org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.count == 0
org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.time == 0.0
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryState[] one of { [-360.0], [0.9, 0.0, 0.0, 1.1055415967851334], [1.0, 0.1] }
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryStateDot[] elements == 0.0
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryStateDot[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.components[] == []
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.components[].getClass().getName() == []
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.components.getClass().getName() == java.util.ArrayList.class
dimension one of { 1, 2, 4 }
size(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryState[]) one of { 1, 2, 4 }
size(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryStateDot[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math3.ode.MultistepIntegrator$CountingDifferentialEquations.CountingDifferentialEquations(org.apache.commons.math3.ode.MultistepIntegrator, int):::EXIT
org.apache.commons.math3.ode.MultistepIntegrator.this == orig(org.apache.commons.math3.ode.MultistepIntegrator.this)
org.apache.commons.math3.ode.MultistepIntegrator.this.getClass().getName() == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.getClass().getName())
org.apache.commons.math3.ode.MultistepIntegrator.this.scaled == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.scaled)
org.apache.commons.math3.ode.MultistepIntegrator.this.nordsieck == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.nordsieck)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.ode.MultistepIntegrator.this.starter == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.starter)
org.apache.commons.math3.ode.MultistepIntegrator.this.starter.getClass().getName() == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.starter.getClass().getName())
org.apache.commons.math3.ode.MultistepIntegrator.this.nSteps == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.nSteps)
org.apache.commons.math3.ode.MultistepIntegrator.this.exp == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.exp)
org.apache.commons.math3.ode.MultistepIntegrator.this.safety == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.safety)
org.apache.commons.math3.ode.MultistepIntegrator.this.minReduction == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.minReduction)
org.apache.commons.math3.ode.MultistepIntegrator.this.maxGrowth == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.maxGrowth)
org.apache.commons.math3.ode.MultistepIntegrator.this.scalAbsoluteTolerance == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.scalAbsoluteTolerance)
org.apache.commons.math3.ode.MultistepIntegrator.this.scalRelativeTolerance == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.scalRelativeTolerance)
org.apache.commons.math3.ode.MultistepIntegrator.this.vecAbsoluteTolerance == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.vecAbsoluteTolerance)
org.apache.commons.math3.ode.MultistepIntegrator.this.vecRelativeTolerance == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.vecRelativeTolerance)
org.apache.commons.math3.ode.MultistepIntegrator.this.mainSetDimension == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.mainSetDimension)
org.apache.commons.math3.ode.MultistepIntegrator.this.initialStep == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.initialStep)
org.apache.commons.math3.ode.MultistepIntegrator.this.minStep == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.minStep)
org.apache.commons.math3.ode.MultistepIntegrator.this.maxStep == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.maxStep)
org.apache.commons.math3.ode.MultistepIntegrator.this.stepHandlers == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.stepHandlers)
org.apache.commons.math3.ode.MultistepIntegrator.this.stepHandlers.getClass().getName() == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.stepHandlers.getClass().getName())
org.apache.commons.math3.ode.MultistepIntegrator.this.stepSize == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.stepSize)
org.apache.commons.math3.ode.MultistepIntegrator.this.isLastStep == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.isLastStep)
org.apache.commons.math3.ode.MultistepIntegrator.this.resetOccurred == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.resetOccurred)
org.apache.commons.math3.ode.MultistepIntegrator.this.eventsStates == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.eventsStates)
org.apache.commons.math3.ode.MultistepIntegrator.this.eventsStates.getClass().getName() == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.eventsStates.getClass().getName())
org.apache.commons.math3.ode.MultistepIntegrator.this.statesInitialized == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.statesInitialized)
org.apache.commons.math3.ode.MultistepIntegrator.this.name == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.name)
org.apache.commons.math3.ode.MultistepIntegrator.this.name.toString == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.name.toString)
org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations)
org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.maximalCount == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.maximalCount)
org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.count == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.count)
org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.maxCountCallback == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.maxCountCallback)
org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.maxCountCallback.getClass().getName() == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.maxCountCallback.getClass().getName())
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable)
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primary == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primary)
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primary.getClass().getName() == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primary.getClass().getName())
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryMapper == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryMapper)
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.time == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.time)
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryState == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryState)
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryState[] == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryState[])
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryStateDot == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryStateDot)
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryStateDot[] == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryStateDot[])
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.components == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.components)
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.components[] == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.components[])
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.components.getClass().getName() == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.components.getClass().getName())
org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.count == 0
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryState[] one of { [-360.0], [0.9, 0.0, 0.0, 1.1055415967851334], [1.0, 0.1] }
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryStateDot[] elements == 0.0
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryStateDot[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
===========================================================================
org.apache.commons.math3.ode.MultistepIntegrator$CountingDifferentialEquations.computeDerivatives(double, double[], double[]):::ENTER
size(y[]) one of { 1, 2, 4 }
size(dot[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math3.ode.MultistepIntegrator$CountingDifferentialEquations.computeDerivatives(double, double[], double[]):::EXIT
this.dimension == orig(this.dimension)
org.apache.commons.math3.ode.MultistepIntegrator.this == orig(org.apache.commons.math3.ode.MultistepIntegrator.this)
org.apache.commons.math3.ode.MultistepIntegrator.this.getClass().getName() == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.getClass().getName())
org.apache.commons.math3.ode.MultistepIntegrator.this.scaled == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.scaled)
org.apache.commons.math3.ode.MultistepIntegrator.this.nordsieck == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.nordsieck)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.ode.MultistepIntegrator.this.starter == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.starter)
org.apache.commons.math3.ode.MultistepIntegrator.this.starter.getClass().getName() == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.starter.getClass().getName())
org.apache.commons.math3.ode.MultistepIntegrator.this.nSteps == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.nSteps)
org.apache.commons.math3.ode.MultistepIntegrator.this.exp == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.exp)
org.apache.commons.math3.ode.MultistepIntegrator.this.safety == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.safety)
org.apache.commons.math3.ode.MultistepIntegrator.this.minReduction == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.minReduction)
org.apache.commons.math3.ode.MultistepIntegrator.this.maxGrowth == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.maxGrowth)
org.apache.commons.math3.ode.MultistepIntegrator.this.scalAbsoluteTolerance == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.scalAbsoluteTolerance)
org.apache.commons.math3.ode.MultistepIntegrator.this.scalRelativeTolerance == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.scalRelativeTolerance)
org.apache.commons.math3.ode.MultistepIntegrator.this.vecAbsoluteTolerance == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.vecAbsoluteTolerance)
org.apache.commons.math3.ode.MultistepIntegrator.this.vecRelativeTolerance == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.vecRelativeTolerance)
org.apache.commons.math3.ode.MultistepIntegrator.this.mainSetDimension == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.mainSetDimension)
org.apache.commons.math3.ode.MultistepIntegrator.this.initialStep == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.initialStep)
org.apache.commons.math3.ode.MultistepIntegrator.this.minStep == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.minStep)
org.apache.commons.math3.ode.MultistepIntegrator.this.maxStep == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.maxStep)
org.apache.commons.math3.ode.MultistepIntegrator.this.stepHandlers == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.stepHandlers)
org.apache.commons.math3.ode.MultistepIntegrator.this.stepHandlers.getClass().getName() == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.stepHandlers.getClass().getName())
org.apache.commons.math3.ode.MultistepIntegrator.this.stepSize == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.stepSize)
org.apache.commons.math3.ode.MultistepIntegrator.this.isLastStep == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.isLastStep)
org.apache.commons.math3.ode.MultistepIntegrator.this.resetOccurred == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.resetOccurred)
org.apache.commons.math3.ode.MultistepIntegrator.this.eventsStates == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.eventsStates)
org.apache.commons.math3.ode.MultistepIntegrator.this.eventsStates.getClass().getName() == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.eventsStates.getClass().getName())
org.apache.commons.math3.ode.MultistepIntegrator.this.statesInitialized == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.statesInitialized)
org.apache.commons.math3.ode.MultistepIntegrator.this.name == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.name)
org.apache.commons.math3.ode.MultistepIntegrator.this.name.toString == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.name.toString)
org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations)
org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.maximalCount == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.maximalCount)
org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.maxCountCallback == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.maxCountCallback)
org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.maxCountCallback.getClass().getName() == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.maxCountCallback.getClass().getName())
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable)
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primary == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primary)
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primary.getClass().getName() == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primary.getClass().getName())
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryMapper == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryMapper)
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.time == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.time)
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryState == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryState)
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryStateDot == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryStateDot)
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.components == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.components)
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.components[] == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.components[])
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.components.getClass().getName() == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.components.getClass().getName())
y[] == orig(y[])
size(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryState[]) == orig(size(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryState[]))
size(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryStateDot[]) == orig(size(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryStateDot[]))
org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.count >= 1
org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.count - orig(org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.count) - 1 == 0
===========================================================================
org.apache.commons.math3.ode.MultistepIntegrator$CountingDifferentialEquations.getDimension():::ENTER
org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.count == 0
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryState[] one of { [-360.0], [0.9, 0.0, 0.0, 1.1055415967851334], [1.0, 0.1] }
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryState[] elements <= 1.1055415967851334
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryStateDot[] elements == 0.0
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryStateDot[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
===========================================================================
org.apache.commons.math3.ode.MultistepIntegrator$CountingDifferentialEquations.getDimension():::EXIT
this.dimension == orig(this.dimension)
org.apache.commons.math3.ode.MultistepIntegrator.this == orig(org.apache.commons.math3.ode.MultistepIntegrator.this)
org.apache.commons.math3.ode.MultistepIntegrator.this.getClass().getName() == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.getClass().getName())
org.apache.commons.math3.ode.MultistepIntegrator.this.scaled == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.scaled)
org.apache.commons.math3.ode.MultistepIntegrator.this.nordsieck == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.nordsieck)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.ode.MultistepIntegrator.this.starter == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.starter)
org.apache.commons.math3.ode.MultistepIntegrator.this.starter.getClass().getName() == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.starter.getClass().getName())
org.apache.commons.math3.ode.MultistepIntegrator.this.nSteps == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.nSteps)
org.apache.commons.math3.ode.MultistepIntegrator.this.exp == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.exp)
org.apache.commons.math3.ode.MultistepIntegrator.this.safety == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.safety)
org.apache.commons.math3.ode.MultistepIntegrator.this.minReduction == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.minReduction)
org.apache.commons.math3.ode.MultistepIntegrator.this.maxGrowth == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.maxGrowth)
org.apache.commons.math3.ode.MultistepIntegrator.this.scalAbsoluteTolerance == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.scalAbsoluteTolerance)
org.apache.commons.math3.ode.MultistepIntegrator.this.scalRelativeTolerance == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.scalRelativeTolerance)
org.apache.commons.math3.ode.MultistepIntegrator.this.vecAbsoluteTolerance == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.vecAbsoluteTolerance)
org.apache.commons.math3.ode.MultistepIntegrator.this.vecRelativeTolerance == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.vecRelativeTolerance)
org.apache.commons.math3.ode.MultistepIntegrator.this.mainSetDimension == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.mainSetDimension)
org.apache.commons.math3.ode.MultistepIntegrator.this.initialStep == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.initialStep)
org.apache.commons.math3.ode.MultistepIntegrator.this.minStep == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.minStep)
org.apache.commons.math3.ode.MultistepIntegrator.this.maxStep == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.maxStep)
org.apache.commons.math3.ode.MultistepIntegrator.this.stepHandlers == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.stepHandlers)
org.apache.commons.math3.ode.MultistepIntegrator.this.stepHandlers.getClass().getName() == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.stepHandlers.getClass().getName())
org.apache.commons.math3.ode.MultistepIntegrator.this.stepSize == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.stepSize)
org.apache.commons.math3.ode.MultistepIntegrator.this.isLastStep == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.isLastStep)
org.apache.commons.math3.ode.MultistepIntegrator.this.resetOccurred == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.resetOccurred)
org.apache.commons.math3.ode.MultistepIntegrator.this.eventsStates == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.eventsStates)
org.apache.commons.math3.ode.MultistepIntegrator.this.eventsStates.getClass().getName() == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.eventsStates.getClass().getName())
org.apache.commons.math3.ode.MultistepIntegrator.this.statesInitialized == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.statesInitialized)
org.apache.commons.math3.ode.MultistepIntegrator.this.name == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.name)
org.apache.commons.math3.ode.MultistepIntegrator.this.name.toString == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.name.toString)
org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations)
org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.maximalCount == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.maximalCount)
org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.count == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.count)
org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.maxCountCallback == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.maxCountCallback)
org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.maxCountCallback.getClass().getName() == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.maxCountCallback.getClass().getName())
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable)
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primary == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primary)
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primary.getClass().getName() == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primary.getClass().getName())
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryMapper == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryMapper)
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.time == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.time)
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryState == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryState)
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryState[] == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryState[])
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryStateDot == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryStateDot)
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryStateDot[] == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryStateDot[])
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.components == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.components)
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.components[] == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.components[])
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.components.getClass().getName() == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.components.getClass().getName())
org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.count == 0
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryState[] one of { [-360.0], [0.9, 0.0, 0.0, 1.1055415967851334], [1.0, 0.1] }
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryState[] elements <= 1.1055415967851334
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryStateDot[] elements == 0.0
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryStateDot[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
return one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math3.ode.MultistepIntegrator$InitializationCompletedMarkerException:::CLASS
===========================================================================
org.apache.commons.math3.ode.MultistepIntegrator$InitializationCompletedMarkerException:::OBJECT
===========================================================================
org.apache.commons.math3.ode.MultistepIntegrator$InitializationCompletedMarkerException.InitializationCompletedMarkerException():::EXIT
===========================================================================
org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer:::OBJECT
this.count >= 0
this.y.getClass().getName() == double[][].class
this.y[] elements != null
this.yDot.getClass().getName() == double[][].class
this.yDot[] elements != null
org.apache.commons.math3.ode.MultistepIntegrator.this.scaled == null
org.apache.commons.math3.ode.MultistepIntegrator.this.nordsieck == null
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT has only one value
org.apache.commons.math3.ode.MultistepIntegrator.this.starter.getClass().getName() == org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.class
org.apache.commons.math3.ode.MultistepIntegrator.this.safety == 0.9
org.apache.commons.math3.ode.MultistepIntegrator.this.minReduction == 0.2
org.apache.commons.math3.ode.MultistepIntegrator.this.vecAbsoluteTolerance == null
org.apache.commons.math3.ode.MultistepIntegrator.this.vecRelativeTolerance == null
org.apache.commons.math3.ode.MultistepIntegrator.this.mainSetDimension one of { 1, 2, 4 }
org.apache.commons.math3.ode.MultistepIntegrator.this.initialStep == -1.0
org.apache.commons.math3.ode.MultistepIntegrator.this.minStep one of { 0.0, 1.0E-6 }
org.apache.commons.math3.ode.MultistepIntegrator.this.maxStep one of { 0.1, 1.0, 4.0 }
org.apache.commons.math3.ode.MultistepIntegrator.this.stepHandlers.getClass().getName() == java.util.ArrayList.class
org.apache.commons.math3.ode.MultistepIntegrator.this.stepStart == Double.NaN
org.apache.commons.math3.ode.MultistepIntegrator.this.stepSize one of { 0.0, 3.1622776601683794E-4 }
org.apache.commons.math3.ode.MultistepIntegrator.this.isLastStep == false
org.apache.commons.math3.ode.MultistepIntegrator.this.resetOccurred == false
org.apache.commons.math3.ode.MultistepIntegrator.this.eventsStates.getClass().getName() == java.util.ArrayList.class
org.apache.commons.math3.ode.MultistepIntegrator.this.statesInitialized == false
org.apache.commons.math3.ode.MultistepIntegrator.this.name.toString one of { "Adams-Bashforth", "Adams-Moulton" }
org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.maximalCount one of { 650, 2147483647 }
org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.count >= 0
org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.time == 0.0
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryState[] elements <= 1.1851571940882653
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.components[] == []
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.components[].getClass().getName() == []
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.components.getClass().getName() == java.util.ArrayList.class
size(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryState[]) one of { 1, 2, 4 }
size(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryStateDot[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer.NordsieckInitializer(org.apache.commons.math3.ode.MultistepIntegrator, int, int):::ENTER
org.apache.commons.math3.ode.MultistepIntegrator.this.scaled == null
org.apache.commons.math3.ode.MultistepIntegrator.this.nordsieck == null
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT has only one value
org.apache.commons.math3.ode.MultistepIntegrator.this.starter.getClass().getName() == org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.class
org.apache.commons.math3.ode.MultistepIntegrator.this.safety == 0.9
org.apache.commons.math3.ode.MultistepIntegrator.this.minReduction == 0.2
org.apache.commons.math3.ode.MultistepIntegrator.this.vecAbsoluteTolerance == null
org.apache.commons.math3.ode.MultistepIntegrator.this.vecRelativeTolerance == null
org.apache.commons.math3.ode.MultistepIntegrator.this.mainSetDimension one of { 1, 2, 4 }
org.apache.commons.math3.ode.MultistepIntegrator.this.initialStep == -1.0
org.apache.commons.math3.ode.MultistepIntegrator.this.minStep one of { 0.0, 1.0E-6 }
org.apache.commons.math3.ode.MultistepIntegrator.this.maxStep one of { 0.1, 1.0, 4.0 }
org.apache.commons.math3.ode.MultistepIntegrator.this.stepHandlers.getClass().getName() == java.util.ArrayList.class
org.apache.commons.math3.ode.MultistepIntegrator.this.stepStart == Double.NaN
org.apache.commons.math3.ode.MultistepIntegrator.this.stepSize one of { 0.0, 3.1622776601683794E-4 }
org.apache.commons.math3.ode.MultistepIntegrator.this.isLastStep == false
org.apache.commons.math3.ode.MultistepIntegrator.this.resetOccurred == false
org.apache.commons.math3.ode.MultistepIntegrator.this.eventsStates.getClass().getName() == java.util.ArrayList.class
org.apache.commons.math3.ode.MultistepIntegrator.this.statesInitialized == false
org.apache.commons.math3.ode.MultistepIntegrator.this.name.toString one of { "Adams-Bashforth", "Adams-Moulton" }
org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.maximalCount one of { 650, 2147483647 }
org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.count == 0
org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.time == 0.0
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryState[] one of { [-360.0], [0.9, 0.0, 0.0, 1.1055415967851334], [1.0, 0.1] }
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryStateDot[] elements == 0.0
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryStateDot[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.components[] == []
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.components[].getClass().getName() == []
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.components.getClass().getName() == java.util.ArrayList.class
n one of { 1, 2, 4 }
size(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryState[]) one of { 1, 2, 4 }
size(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryStateDot[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer.NordsieckInitializer(org.apache.commons.math3.ode.MultistepIntegrator, int, int):::EXIT
org.apache.commons.math3.ode.MultistepIntegrator.this == orig(org.apache.commons.math3.ode.MultistepIntegrator.this)
org.apache.commons.math3.ode.MultistepIntegrator.this.getClass().getName() == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.getClass().getName())
org.apache.commons.math3.ode.MultistepIntegrator.this.scaled == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.scaled)
org.apache.commons.math3.ode.MultistepIntegrator.this.nordsieck == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.nordsieck)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.ode.MultistepIntegrator.this.starter == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.starter)
org.apache.commons.math3.ode.MultistepIntegrator.this.starter.getClass().getName() == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.starter.getClass().getName())
org.apache.commons.math3.ode.MultistepIntegrator.this.nSteps == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.nSteps)
org.apache.commons.math3.ode.MultistepIntegrator.this.exp == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.exp)
org.apache.commons.math3.ode.MultistepIntegrator.this.safety == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.safety)
org.apache.commons.math3.ode.MultistepIntegrator.this.minReduction == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.minReduction)
org.apache.commons.math3.ode.MultistepIntegrator.this.maxGrowth == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.maxGrowth)
org.apache.commons.math3.ode.MultistepIntegrator.this.scalAbsoluteTolerance == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.scalAbsoluteTolerance)
org.apache.commons.math3.ode.MultistepIntegrator.this.scalRelativeTolerance == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.scalRelativeTolerance)
org.apache.commons.math3.ode.MultistepIntegrator.this.vecAbsoluteTolerance == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.vecAbsoluteTolerance)
org.apache.commons.math3.ode.MultistepIntegrator.this.vecRelativeTolerance == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.vecRelativeTolerance)
org.apache.commons.math3.ode.MultistepIntegrator.this.mainSetDimension == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.mainSetDimension)
org.apache.commons.math3.ode.MultistepIntegrator.this.initialStep == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.initialStep)
org.apache.commons.math3.ode.MultistepIntegrator.this.minStep == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.minStep)
org.apache.commons.math3.ode.MultistepIntegrator.this.maxStep == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.maxStep)
org.apache.commons.math3.ode.MultistepIntegrator.this.stepHandlers == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.stepHandlers)
org.apache.commons.math3.ode.MultistepIntegrator.this.stepHandlers.getClass().getName() == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.stepHandlers.getClass().getName())
org.apache.commons.math3.ode.MultistepIntegrator.this.stepSize == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.stepSize)
org.apache.commons.math3.ode.MultistepIntegrator.this.isLastStep == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.isLastStep)
org.apache.commons.math3.ode.MultistepIntegrator.this.resetOccurred == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.resetOccurred)
org.apache.commons.math3.ode.MultistepIntegrator.this.eventsStates == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.eventsStates)
org.apache.commons.math3.ode.MultistepIntegrator.this.eventsStates.getClass().getName() == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.eventsStates.getClass().getName())
org.apache.commons.math3.ode.MultistepIntegrator.this.statesInitialized == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.statesInitialized)
org.apache.commons.math3.ode.MultistepIntegrator.this.name == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.name)
org.apache.commons.math3.ode.MultistepIntegrator.this.name.toString == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.name.toString)
org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations)
org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.maximalCount == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.maximalCount)
org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.count == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.count)
org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.maxCountCallback == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.maxCountCallback)
org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.maxCountCallback.getClass().getName() == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.maxCountCallback.getClass().getName())
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable)
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primary == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primary)
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primary.getClass().getName() == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primary.getClass().getName())
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryMapper == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryMapper)
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.time == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.time)
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryState == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryState)
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryState[] == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryState[])
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryStateDot == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryStateDot)
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryStateDot[] == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryStateDot[])
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.components == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.components)
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.components[] == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.components[])
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.components.getClass().getName() == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.components.getClass().getName())
this.count == 0
this.t[] elements == 0.0
org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.count == 0
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryState[] one of { [-360.0], [0.9, 0.0, 0.0, 1.1055415967851334], [1.0, 0.1] }
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryStateDot[] elements == 0.0
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryStateDot[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
===========================================================================
org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer.handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean):::ENTER
org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.maximalCount == 2147483647
interpolator.getClass().getName() == org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.class
isLast == false
===========================================================================
org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer.handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean):::EXIT
this.t == orig(this.t)
this.y == orig(this.y)
this.y.getClass().getName() == orig(this.y.getClass().getName())
this.y[] == orig(this.y[])
this.yDot == orig(this.yDot)
this.yDot.getClass().getName() == orig(this.yDot.getClass().getName())
this.yDot[] == orig(this.yDot[])
org.apache.commons.math3.ode.MultistepIntegrator.this == orig(org.apache.commons.math3.ode.MultistepIntegrator.this)
org.apache.commons.math3.ode.MultistepIntegrator.this.getClass().getName() == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.getClass().getName())
org.apache.commons.math3.ode.MultistepIntegrator.this.scaled == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.scaled)
org.apache.commons.math3.ode.MultistepIntegrator.this.nordsieck == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.nordsieck)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.ode.MultistepIntegrator.this.starter == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.starter)
org.apache.commons.math3.ode.MultistepIntegrator.this.starter.getClass().getName() == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.starter.getClass().getName())
org.apache.commons.math3.ode.MultistepIntegrator.this.nSteps == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.nSteps)
org.apache.commons.math3.ode.MultistepIntegrator.this.exp == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.exp)
org.apache.commons.math3.ode.MultistepIntegrator.this.safety == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.safety)
org.apache.commons.math3.ode.MultistepIntegrator.this.minReduction == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.minReduction)
org.apache.commons.math3.ode.MultistepIntegrator.this.maxGrowth == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.maxGrowth)
org.apache.commons.math3.ode.MultistepIntegrator.this.scalAbsoluteTolerance == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.scalAbsoluteTolerance)
org.apache.commons.math3.ode.MultistepIntegrator.this.scalRelativeTolerance == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.scalRelativeTolerance)
org.apache.commons.math3.ode.MultistepIntegrator.this.vecAbsoluteTolerance == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.vecAbsoluteTolerance)
org.apache.commons.math3.ode.MultistepIntegrator.this.vecRelativeTolerance == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.vecRelativeTolerance)
org.apache.commons.math3.ode.MultistepIntegrator.this.mainSetDimension == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.mainSetDimension)
org.apache.commons.math3.ode.MultistepIntegrator.this.initialStep == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.initialStep)
org.apache.commons.math3.ode.MultistepIntegrator.this.minStep == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.minStep)
org.apache.commons.math3.ode.MultistepIntegrator.this.maxStep == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.maxStep)
org.apache.commons.math3.ode.MultistepIntegrator.this.stepHandlers == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.stepHandlers)
org.apache.commons.math3.ode.MultistepIntegrator.this.stepHandlers.getClass().getName() == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.stepHandlers.getClass().getName())
org.apache.commons.math3.ode.MultistepIntegrator.this.stepSize == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.stepSize)
org.apache.commons.math3.ode.MultistepIntegrator.this.isLastStep == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.isLastStep)
org.apache.commons.math3.ode.MultistepIntegrator.this.resetOccurred == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.resetOccurred)
org.apache.commons.math3.ode.MultistepIntegrator.this.eventsStates == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.eventsStates)
org.apache.commons.math3.ode.MultistepIntegrator.this.eventsStates.getClass().getName() == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.eventsStates.getClass().getName())
org.apache.commons.math3.ode.MultistepIntegrator.this.statesInitialized == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.statesInitialized)
org.apache.commons.math3.ode.MultistepIntegrator.this.name == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.name)
org.apache.commons.math3.ode.MultistepIntegrator.this.name.toString == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.name.toString)
org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations)
org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.maximalCount == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.maximalCount)
org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.count == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.count)
org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.maxCountCallback == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.maxCountCallback)
org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.maxCountCallback.getClass().getName() == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.maxCountCallback.getClass().getName())
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable)
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primary == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primary)
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primary.getClass().getName() == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primary.getClass().getName())
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryMapper == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryMapper)
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.time == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.time)
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryState == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryState)
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryState[] == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryState[])
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryStateDot == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryStateDot)
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryStateDot[] == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryStateDot[])
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.components == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.components)
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.components[] == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.components[])
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.components.getClass().getName() == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.components.getClass().getName())
size(this.t[]) == orig(size(this.t[]))
org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.maximalCount == 2147483647
this.count - orig(this.count) - 1 == 0
===========================================================================
org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer.init(double, double[], double):::ENTER
this.count == 0
this.t[] elements == 0.0
org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.count == 0
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryState[] one of { [-360.0], [0.9, 0.0, 0.0, 1.1055415967851334], [1.0, 0.1] }
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryStateDot[] elements == 0.0
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryStateDot[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
t0 == 0.0
y0[] one of { [-360.0], [0.9, 0.0, 0.0, 1.1055415967851334], [1.0, 0.1] }
size(y0[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer.init(double, double[], double):::EXIT
this.count == orig(this.count)
this.t == orig(this.t)
this.t[] == orig(this.t[])
this.y == orig(this.y)
this.y.getClass().getName() == orig(this.y.getClass().getName())
this.y[] == orig(this.y[])
this.yDot == orig(this.yDot)
this.yDot.getClass().getName() == orig(this.yDot.getClass().getName())
this.yDot[] == orig(this.yDot[])
org.apache.commons.math3.ode.MultistepIntegrator.this == orig(org.apache.commons.math3.ode.MultistepIntegrator.this)
org.apache.commons.math3.ode.MultistepIntegrator.this.getClass().getName() == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.getClass().getName())
org.apache.commons.math3.ode.MultistepIntegrator.this.scaled == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.scaled)
org.apache.commons.math3.ode.MultistepIntegrator.this.nordsieck == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.nordsieck)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.ode.MultistepIntegrator.this.starter == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.starter)
org.apache.commons.math3.ode.MultistepIntegrator.this.starter.getClass().getName() == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.starter.getClass().getName())
org.apache.commons.math3.ode.MultistepIntegrator.this.nSteps == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.nSteps)
org.apache.commons.math3.ode.MultistepIntegrator.this.exp == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.exp)
org.apache.commons.math3.ode.MultistepIntegrator.this.safety == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.safety)
org.apache.commons.math3.ode.MultistepIntegrator.this.minReduction == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.minReduction)
org.apache.commons.math3.ode.MultistepIntegrator.this.maxGrowth == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.maxGrowth)
org.apache.commons.math3.ode.MultistepIntegrator.this.scalAbsoluteTolerance == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.scalAbsoluteTolerance)
org.apache.commons.math3.ode.MultistepIntegrator.this.scalRelativeTolerance == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.scalRelativeTolerance)
org.apache.commons.math3.ode.MultistepIntegrator.this.vecAbsoluteTolerance == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.vecAbsoluteTolerance)
org.apache.commons.math3.ode.MultistepIntegrator.this.vecRelativeTolerance == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.vecRelativeTolerance)
org.apache.commons.math3.ode.MultistepIntegrator.this.mainSetDimension == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.mainSetDimension)
org.apache.commons.math3.ode.MultistepIntegrator.this.initialStep == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.initialStep)
org.apache.commons.math3.ode.MultistepIntegrator.this.minStep == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.minStep)
org.apache.commons.math3.ode.MultistepIntegrator.this.maxStep == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.maxStep)
org.apache.commons.math3.ode.MultistepIntegrator.this.stepHandlers == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.stepHandlers)
org.apache.commons.math3.ode.MultistepIntegrator.this.stepHandlers.getClass().getName() == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.stepHandlers.getClass().getName())
org.apache.commons.math3.ode.MultistepIntegrator.this.stepSize == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.stepSize)
org.apache.commons.math3.ode.MultistepIntegrator.this.isLastStep == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.isLastStep)
org.apache.commons.math3.ode.MultistepIntegrator.this.resetOccurred == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.resetOccurred)
org.apache.commons.math3.ode.MultistepIntegrator.this.eventsStates == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.eventsStates)
org.apache.commons.math3.ode.MultistepIntegrator.this.eventsStates.getClass().getName() == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.eventsStates.getClass().getName())
org.apache.commons.math3.ode.MultistepIntegrator.this.statesInitialized == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.statesInitialized)
org.apache.commons.math3.ode.MultistepIntegrator.this.name == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.name)
org.apache.commons.math3.ode.MultistepIntegrator.this.name.toString == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.name.toString)
org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations)
org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.maximalCount == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.maximalCount)
org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.count == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.count)
org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.maxCountCallback == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.maxCountCallback)
org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.maxCountCallback.getClass().getName() == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.maxCountCallback.getClass().getName())
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable)
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primary == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primary)
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primary.getClass().getName() == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primary.getClass().getName())
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryMapper == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryMapper)
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.time == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.time)
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryState == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryState)
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryState[] == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryState[])
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryStateDot == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryStateDot)
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryStateDot[] == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryStateDot[])
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.components == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.components)
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.components[] == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.components[])
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.components.getClass().getName() == orig(org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.components.getClass().getName())
y0[] == orig(y0[])
this.count == 0
this.t[] elements == 0.0
org.apache.commons.math3.ode.MultistepIntegrator.this.evaluations.count == 0
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryState[] one of { [-360.0], [0.9, 0.0, 0.0, 1.1055415967851334], [1.0, 0.1] }
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryStateDot[] elements == 0.0
org.apache.commons.math3.ode.MultistepIntegrator.this.expandable.primaryStateDot[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
y0[] one of { [-360.0], [0.9, 0.0, 0.0, 1.1055415967851334], [1.0, 0.1] }
===========================================================================
org.apache.commons.math3.ode.MultistepIntegrator:::OBJECT
this.nordsieck.data.getClass().getName() == double[][].class
this.nordsieck.data[] elements != null
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == "{"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == "}"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == "{"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == "}"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == ","
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == ","
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == "{"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == "}"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == "{"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == "}"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == ","
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == ","
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == java.text.DecimalFormat.class
this.starter.getClass().getName() == org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.class
this.nSteps >= 2
this.exp >= -0.5
this.safety one of { 0.0, 0.9 }
this.minReduction one of { 0.0, 0.2 }
this.maxGrowth <= 1.4142135623730951
this.scalAbsoluteTolerance >= 1.0E-12
this.scalRelativeTolerance >= 1.0000000000000006E-14
this.vecAbsoluteTolerance == null
this.vecRelativeTolerance == null
this.mainSetDimension >= 0
this.initialStep == -1.0
this.minStep one of { 0.0, 1.0E-6 }
this.maxStep one of { 0.1, 1.0, 4.0 }
this.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.isLastStep == false
this.resetOccurred == false
this.eventsStates.getClass().getName() == java.util.ArrayList.class
this.name.toString one of { "Adams-Bashforth", "Adams-Moulton" }
this.evaluations.maximalCount one of { 650, 2147483647 }
this.evaluations.count >= 0
this.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
this.expandable.primaryMapper.firstIndex == 0
this.expandable.primaryMapper.dimension one of { 1, 2, 4 }
this.expandable.time == 0.0
this.expandable.components[] == []
this.expandable.components[].getClass().getName() == []
this.expandable.components.getClass().getName() == java.util.ArrayList.class
size(this.scaled[]) one of { 1, 2, 4 }
size(this.nordsieck.data[]) >= 2
size(this.expandable.primaryState[]) one of { 1, 2, 4 }
size(this.expandable.primaryStateDot[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math3.ode.MultistepIntegrator.MultistepIntegrator(java.lang.String, int, int, double, double, double, double):::ENTER
name.toString one of { "Adams-Bashforth", "Adams-Moulton" }
minStep one of { 0.0, 1.0E-6 }
maxStep one of { 0.1, 1.0, 4.0 }
===========================================================================
org.apache.commons.math3.ode.MultistepIntegrator.MultistepIntegrator(java.lang.String, int, int, double, double, double, double):::EXIT
name.toString == orig(name.toString)
this.scaled == null
this.nordsieck == null
this.safety == 0.9
this.minReduction == 0.2
this.mainSetDimension == 0
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 3.1622776601683794E-4 }
this.statesInitialized == false
this.evaluations.maximalCount == 2147483647
this.evaluations.count == 0
this.expandable == null
name.toString one of { "Adams-Bashforth", "Adams-Moulton" }
===========================================================================
org.apache.commons.math3.ode.MultistepIntegrator.computeStepGrowShrinkFactor(double):::ENTER
this.safety == 0.9
this.minReduction == 0.2
this.mainSetDimension one of { 1, 2, 4 }
this.expandable.primaryState[] elements != 0
this.expandable.primaryStateDot[] elements != 0
error >= 0.0
===========================================================================
org.apache.commons.math3.ode.MultistepIntegrator.computeStepGrowShrinkFactor(double):::EXIT
this.scaled == orig(this.scaled)
this.scaled[] == orig(this.scaled[])
this.nordsieck == orig(this.nordsieck)
this.nordsieck.data == orig(this.nordsieck.data)
this.nordsieck.data.getClass().getName() == orig(this.nordsieck.data.getClass().getName())
this.nordsieck.data[] == orig(this.nordsieck.data[])
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
this.starter == orig(this.starter)
this.starter.getClass().getName() == orig(this.starter.getClass().getName())
this.nSteps == orig(this.nSteps)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.minReduction == orig(this.minReduction)
this.maxGrowth == orig(this.maxGrowth)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.mainSetDimension == orig(this.mainSetDimension)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
this.expandable.primary == orig(this.expandable.primary)
this.expandable.primary.getClass().getName() == orig(this.expandable.primary.getClass().getName())
this.expandable.primaryMapper == orig(this.expandable.primaryMapper)
this.expandable.primaryMapper.firstIndex == orig(this.expandable.primaryMapper.firstIndex)
this.expandable.primaryMapper.dimension == orig(this.expandable.primaryMapper.dimension)
this.expandable.time == orig(this.expandable.time)
this.expandable.primaryState == orig(this.expandable.primaryState)
this.expandable.primaryState[] == orig(this.expandable.primaryState[])
this.expandable.primaryStateDot == orig(this.expandable.primaryStateDot)
this.expandable.primaryStateDot[] == orig(this.expandable.primaryStateDot[])
this.expandable.components == orig(this.expandable.components)
this.expandable.components[] == orig(this.expandable.components[])
this.expandable.components.getClass().getName() == orig(this.expandable.components.getClass().getName())
this.safety == 0.9
this.minReduction == 0.2
this.mainSetDimension one of { 1, 2, 4 }
this.expandable.primaryState[] elements != 0
this.expandable.primaryStateDot[] elements != 0
===========================================================================
org.apache.commons.math3.ode.MultistepIntegrator.setMaxGrowth(double):::ENTER
this.scaled == null
this.nordsieck == null
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 0.0
this.mainSetDimension == 0
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 3.1622776601683794E-4 }
this.statesInitialized == false
this.evaluations.maximalCount == 2147483647
this.evaluations.count == 0
this.expandable == null
===========================================================================
org.apache.commons.math3.ode.MultistepIntegrator.setMaxGrowth(double):::EXIT
this.scaled == orig(this.scaled)
this.nordsieck == orig(this.nordsieck)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
this.starter == orig(this.starter)
this.starter.getClass().getName() == orig(this.starter.getClass().getName())
this.nSteps == orig(this.nSteps)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.minReduction == orig(this.minReduction)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.mainSetDimension == orig(this.mainSetDimension)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepSize == orig(this.stepSize)
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
this.scaled == null
this.nordsieck == null
this.safety == 0.9
this.minReduction == 0.2
this.mainSetDimension == 0
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 3.1622776601683794E-4 }
this.statesInitialized == false
this.evaluations.maximalCount == 2147483647
this.evaluations.count == 0
this.expandable == null
orig(this.maxGrowth) % this.maxGrowth == 0
this.maxGrowth > orig(this.maxGrowth)
===========================================================================
org.apache.commons.math3.ode.MultistepIntegrator.setMinReduction(double):::ENTER
this.scaled == null
this.nordsieck == null
this.safety == 0.9
this.minReduction == 0.0
this.maxGrowth == 0.0
this.mainSetDimension == 0
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 3.1622776601683794E-4 }
this.statesInitialized == false
this.evaluations.maximalCount == 2147483647
this.evaluations.count == 0
this.expandable == null
minReduction == 0.2
===========================================================================
org.apache.commons.math3.ode.MultistepIntegrator.setMinReduction(double):::EXIT
this.scaled == orig(this.scaled)
this.nordsieck == orig(this.nordsieck)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
this.starter == orig(this.starter)
this.starter.getClass().getName() == orig(this.starter.getClass().getName())
this.nSteps == orig(this.nSteps)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.maxGrowth == orig(this.maxGrowth)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.mainSetDimension == orig(this.mainSetDimension)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepSize == orig(this.stepSize)
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
this.scaled == null
this.nordsieck == null
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 0.0
this.mainSetDimension == 0
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 3.1622776601683794E-4 }
this.statesInitialized == false
this.evaluations.maximalCount == 2147483647
this.evaluations.count == 0
this.expandable == null
===========================================================================
org.apache.commons.math3.ode.MultistepIntegrator.setSafety(double):::ENTER
this.scaled == null
this.nordsieck == null
this.safety == 0.0
this.minReduction == 0.0
this.maxGrowth == 0.0
this.mainSetDimension == 0
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 3.1622776601683794E-4 }
this.statesInitialized == false
this.evaluations.maximalCount == 2147483647
this.evaluations.count == 0
this.expandable == null
safety == 0.9
===========================================================================
org.apache.commons.math3.ode.MultistepIntegrator.setSafety(double):::EXIT
this.scaled == orig(this.scaled)
this.nordsieck == orig(this.nordsieck)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
this.starter == orig(this.starter)
this.starter.getClass().getName() == orig(this.starter.getClass().getName())
this.nSteps == orig(this.nSteps)
this.exp == orig(this.exp)
this.minReduction == orig(this.minReduction)
this.maxGrowth == orig(this.maxGrowth)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.mainSetDimension == orig(this.mainSetDimension)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepSize == orig(this.stepSize)
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
this.scaled == null
this.nordsieck == null
this.safety == 0.9
this.minReduction == 0.0
this.maxGrowth == 0.0
this.mainSetDimension == 0
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 3.1622776601683794E-4 }
this.statesInitialized == false
this.evaluations.maximalCount == 2147483647
this.evaluations.count == 0
this.expandable == null
===========================================================================
org.apache.commons.math3.ode.MultistepIntegrator.start(double, double[], double):::ENTER
this.scaled == null
this.nordsieck == null
this.safety == 0.9
this.minReduction == 0.2
this.mainSetDimension one of { 1, 2, 4 }
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 3.1622776601683794E-4 }
this.statesInitialized == false
this.evaluations.count == 0
this.expandable.primaryState[] one of { [-360.0], [0.9, 0.0, 0.0, 1.1055415967851334], [1.0, 0.1] }
this.expandable.primaryStateDot[] elements == 0.0
this.expandable.primaryStateDot[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
t0 == 0.0
y0[] one of { [-360.0], [0.9, 0.0, 0.0, 1.1055415967851334], [1.0, 0.1] }
size(y0[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math3.ode.MultistepIntegrator.start(double, double[], double):::EXIT
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
this.starter == orig(this.starter)
this.starter.getClass().getName() == orig(this.starter.getClass().getName())
this.nSteps == orig(this.nSteps)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.minReduction == orig(this.minReduction)
this.maxGrowth == orig(this.maxGrowth)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.mainSetDimension == orig(this.mainSetDimension)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
this.expandable.primary == orig(this.expandable.primary)
this.expandable.primary.getClass().getName() == orig(this.expandable.primary.getClass().getName())
this.expandable.primaryMapper == orig(this.expandable.primaryMapper)
this.expandable.primaryMapper.firstIndex == orig(this.expandable.primaryMapper.firstIndex)
this.expandable.primaryMapper.dimension == orig(this.expandable.primaryMapper.dimension)
this.expandable.time == orig(this.expandable.time)
this.expandable.primaryState == orig(this.expandable.primaryState)
this.expandable.primaryStateDot == orig(this.expandable.primaryStateDot)
this.expandable.components == orig(this.expandable.components)
this.expandable.components[] == orig(this.expandable.components[])
this.expandable.components.getClass().getName() == orig(this.expandable.components.getClass().getName())
y0[] == orig(y0[])
size(this.expandable.primaryState[]) == orig(size(this.expandable.primaryState[]))
size(this.expandable.primaryStateDot[]) == orig(size(this.expandable.primaryStateDot[]))
this.safety == 0.9
this.minReduction == 0.2
this.mainSetDimension one of { 1, 2, 4 }
this.stepStart == 0.0
this.statesInitialized == false
y0[] one of { [-360.0], [0.9, 0.0, 0.0, 1.1055415967851334], [1.0, 0.1] }
this.stepSize != orig(this.stepSize)
orig(this.evaluations.count) % this.evaluations.count == 0
this.evaluations.count > orig(this.evaluations.count)
===========================================================================
org.apache.commons.math3.ode.ParameterConfiguration:::CLASS
===========================================================================
org.apache.commons.math3.ode.ParameterConfiguration:::OBJECT
this.hP one of { 1.0E-12, Double.NaN }
this.hP <= 1.0E-12
===========================================================================
org.apache.commons.math3.ode.ParameterConfiguration.ParameterConfiguration(java.lang.String, double):::ENTER
hP == Double.NaN
===========================================================================
org.apache.commons.math3.ode.ParameterConfiguration.ParameterConfiguration(java.lang.String, double):::EXIT
parameterName.toString == orig(parameterName.toString)
this.hP == Double.NaN
===========================================================================
org.apache.commons.math3.ode.ParameterConfiguration.getHP():::ENTER
this.hP == 1.0E-12
===========================================================================
org.apache.commons.math3.ode.ParameterConfiguration.getHP():::EXIT
this.parameterName == orig(this.parameterName)
this.parameterName.toString == orig(this.parameterName.toString)
this.hP == orig(this.hP)
this.hP == 1.0E-12
return == 1.0E-12
===========================================================================
org.apache.commons.math3.ode.ParameterConfiguration.getParameterName():::ENTER
===========================================================================
org.apache.commons.math3.ode.ParameterConfiguration.getParameterName():::EXIT
this.parameterName == orig(this.parameterName)
this.parameterName.toString == orig(this.parameterName.toString)
===========================================================================
org.apache.commons.math3.ode.ParameterConfiguration.setHP(double):::ENTER
this.hP == Double.NaN
hParam == 1.0E-12
===========================================================================
org.apache.commons.math3.ode.ParameterConfiguration.setHP(double):::EXIT
this.parameterName == orig(this.parameterName)
this.parameterName.toString == orig(this.parameterName.toString)
this.hP == 1.0E-12
===========================================================================
org.apache.commons.math3.ode.ParameterJacobianWrapper:::OBJECT
this.fode.getClass().getName() == org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper.class
this.hParam.getClass().getName() == java.util.HashMap.class
===========================================================================
org.apache.commons.math3.ode.ParameterJacobianWrapper.ParameterJacobianWrapper(org.apache.commons.math3.ode.FirstOrderDifferentialEquations, org.apache.commons.math3.ode.ParameterizedODE, org.apache.commons.math3.ode.ParameterConfiguration[]):::ENTER
fode.getClass().getName() == org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper.class
paramsAndSteps.getClass().getName() == org.apache.commons.math3.ode.ParameterConfiguration[].class
paramsAndSteps[] elements != null
paramsAndSteps[].parameterName elements != null
paramsAndSteps[].parameterName.toString one of { [b], [cx, cy, omega] }
paramsAndSteps[].hP elements == 1.0E-12
paramsAndSteps[].hP one of { [1.0E-12], [1.0E-12, 1.0E-12, 1.0E-12] }
size(paramsAndSteps[]) one of { 1, 3 }
===========================================================================
org.apache.commons.math3.ode.ParameterJacobianWrapper.ParameterJacobianWrapper(org.apache.commons.math3.ode.FirstOrderDifferentialEquations, org.apache.commons.math3.ode.ParameterizedODE, org.apache.commons.math3.ode.ParameterConfiguration[]):::EXIT
paramsAndSteps[] == orig(paramsAndSteps[])
paramsAndSteps[].parameterName == orig(paramsAndSteps[].parameterName)
paramsAndSteps[].hP == orig(paramsAndSteps[].hP)
paramsAndSteps[] elements != null
paramsAndSteps[].parameterName elements != null
paramsAndSteps[].parameterName.toString one of { [b], [cx, cy, omega] }
paramsAndSteps[].hP elements == 1.0E-12
paramsAndSteps[].hP one of { [1.0E-12], [1.0E-12, 1.0E-12, 1.0E-12] }
===========================================================================
org.apache.commons.math3.ode.ParameterJacobianWrapper.computeParameterJacobian(double, double[], double[], java.lang.String, double[]):::ENTER
dFdP[] sorted by >=
size(y[]) == 2
size(yDot[]) == 2
size(dFdP[]) == 2
===========================================================================
org.apache.commons.math3.ode.ParameterJacobianWrapper.computeParameterJacobian(double, double[], double[], java.lang.String, double[]):::EXIT
this.fode == orig(this.fode)
this.fode.getClass().getName() == orig(this.fode.getClass().getName())
this.pode == orig(this.pode)
this.pode.getClass().getName() == orig(this.pode.getClass().getName())
this.hParam == orig(this.hParam)
this.hParam.getClass().getName() == orig(this.hParam.getClass().getName())
y[] == orig(y[])
yDot[] == orig(yDot[])
paramName.toString == orig(paramName.toString)
===========================================================================
org.apache.commons.math3.ode.ParameterJacobianWrapper.isSupported(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math3.ode.ParameterJacobianWrapper.isSupported(java.lang.String):::EXIT
this.fode == orig(this.fode)
this.fode.getClass().getName() == orig(this.fode.getClass().getName())
this.pode == orig(this.pode)
this.pode.getClass().getName() == orig(this.pode.getClass().getName())
this.hParam == orig(this.hParam)
this.hParam.getClass().getName() == orig(this.hParam.getClass().getName())
name.toString == orig(name.toString)
return == true
===========================================================================
org.apache.commons.math3.ode.ParameterJacobianWrapper.isSupported(java.lang.String):::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math3.ode.TestProblem1:::OBJECT
this.y[] elements >= 0.0
this.y[] sorted by >=
this.n == 2
this.calls >= 0
this.t0 == 0.0
this.y0[] == [1.0, 0.1]
this.y0[] elements one of { 0.1, 1.0 }
this.y0[] sorted by >
this.t1 one of { -4.0, 4.0 }
this.errorScale[] == [1.0, 1.0]
this.errorScale[] elements == 1.0
size(this.y[]) == 2
size(this.y0[]) == 2
size(this.errorScale[]) == 2
===========================================================================
org.apache.commons.math3.ode.TestProblem1.TestProblem1():::EXIT
this.y[] == [0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
this.t1 == 4.0
===========================================================================
org.apache.commons.math3.ode.TestProblem1.TestProblem1(org.apache.commons.math3.ode.TestProblem1):::ENTER
problem has only one value
problem.y has only one value
problem.y[] == [0.0, 0.0]
problem.y[] elements == 0.0
problem.n == 2
problem.calls == 0
problem.t0 == 0.0
problem.y0 has only one value
problem.y0[] == [1.0, 0.1]
problem.y0[] elements one of { 0.1, 1.0 }
problem.y0[] sorted by >
problem.t1 == 4.0
problem.errorScale has only one value
problem.errorScale[] == [1.0, 1.0]
problem.errorScale[] elements == 1.0
size(problem.y[]) == 2
size(problem.y0[]) == 2
size(problem.errorScale[]) == 2
===========================================================================
org.apache.commons.math3.ode.TestProblem1.TestProblem1(org.apache.commons.math3.ode.TestProblem1):::EXIT
problem.y == orig(problem.y)
problem.y[] == orig(problem.y[])
problem.n == orig(problem.n)
problem.calls == orig(problem.calls)
problem.t0 == orig(problem.t0)
problem.y0 == orig(problem.y0)
problem.y0[] == orig(problem.y0[])
problem.t1 == orig(problem.t1)
problem.errorScale == orig(problem.errorScale)
problem.errorScale[] == orig(problem.errorScale[])
this.y[] == [0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
this.t1 == 4.0
problem.y has only one value
problem.y[] == [0.0, 0.0]
problem.y[] elements == 0.0
problem.n == 2
problem.calls == 0
problem.t0 == 0.0
problem.y0 has only one value
problem.y0[] == [1.0, 0.1]
problem.y0[] elements one of { 0.1, 1.0 }
problem.y0[] sorted by >
problem.t1 == 4.0
problem.errorScale has only one value
problem.errorScale[] == [1.0, 1.0]
problem.errorScale[] elements == 1.0
size(problem.y[]) == 2
size(problem.y0[]) == 2
size(problem.errorScale[]) == 2
===========================================================================
org.apache.commons.math3.ode.TestProblem1.computeTheoreticalState(double):::ENTER
this.calls >= 1
===========================================================================
org.apache.commons.math3.ode.TestProblem1.computeTheoreticalState(double):::EXIT
this.y == orig(this.y)
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
size(this.y[]) == orig(size(this.y[]))
this.y[] sorted by >
this.calls >= 1
return[] sorted by >
size(return[]) == 2
===========================================================================
org.apache.commons.math3.ode.TestProblem1.copy():::ENTER
this has only one value
this.y has only one value
this.y[] == [0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
this.y0 has only one value
this.t1 == 4.0
this.errorScale has only one value
===========================================================================
org.apache.commons.math3.ode.TestProblem1.copy():::EXIT
this.y == orig(this.y)
this.y[] == orig(this.y[])
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
this.y has only one value
this.y[] == [0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
this.y0 has only one value
this.t1 == 4.0
this.errorScale has only one value
return.y[] == [0.0, 0.0]
return.y[] elements == 0.0
return.n == 2
return.calls == 0
return.t0 == 0.0
return.y0[] == [1.0, 0.1]
return.y0[] elements one of { 0.1, 1.0 }
return.y0[] sorted by >
return.t1 == 4.0
return.errorScale[] == [1.0, 1.0]
return.errorScale[] elements == 1.0
size(return.y[]) == 2
size(return.y0[]) == 2
size(return.errorScale[]) == 2
===========================================================================
org.apache.commons.math3.ode.TestProblem1.doComputeDerivatives(double, double[], double[]):::ENTER
this.calls >= 1
y[] elements != 0
size(y[]) == 2
size(yDot[]) == 2
===========================================================================
org.apache.commons.math3.ode.TestProblem1.doComputeDerivatives(double, double[], double[]):::EXIT
this.y == orig(this.y)
this.y[] == orig(this.y[])
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
y[] == orig(y[])
this.calls >= 1
y[] elements != 0
yDot[] elements != 0
===========================================================================
org.apache.commons.math3.ode.TestProblem2:::OBJECT
this.n == 1
this.calls >= 0
this.t0 == 0.0
this.y0[] == [0.0]
this.y0[] elements == 0.0
this.t1 == 1.0
this.errorScale[] == [1.0]
this.errorScale[] elements == 1.0
size(this.y[]) == 1
size(this.y0[]) == 1
size(this.errorScale[]) == 1
===========================================================================
org.apache.commons.math3.ode.TestProblem2.TestProblem2():::EXIT
this.y has only one value
this.y[] == [0.0]
this.y[] elements == 0.0
this.calls == 0
this.y0 has only one value
this.errorScale has only one value
===========================================================================
org.apache.commons.math3.ode.TestProblem2.TestProblem2(org.apache.commons.math3.ode.TestProblem2):::ENTER
problem has only one value
problem.y has only one value
problem.y[] == [0.0]
problem.y[] elements == 0.0
problem.n == 1
problem.calls == 0
problem.t0 == 0.0
problem.y0 has only one value
problem.y0[] == [0.0]
problem.y0[] elements == 0.0
problem.t1 == 1.0
problem.errorScale has only one value
problem.errorScale[] == [1.0]
problem.errorScale[] elements == 1.0
size(problem.y[]) == 1
size(problem.y0[]) == 1
size(problem.errorScale[]) == 1
===========================================================================
org.apache.commons.math3.ode.TestProblem2.TestProblem2(org.apache.commons.math3.ode.TestProblem2):::EXIT
problem.y == orig(problem.y)
problem.y[] == orig(problem.y[])
problem.n == orig(problem.n)
problem.calls == orig(problem.calls)
problem.t0 == orig(problem.t0)
problem.y0 == orig(problem.y0)
problem.y0[] == orig(problem.y0[])
problem.t1 == orig(problem.t1)
problem.errorScale == orig(problem.errorScale)
problem.errorScale[] == orig(problem.errorScale[])
this.y[] == [0.0]
this.y[] elements == 0.0
this.calls == 0
problem.y has only one value
problem.y[] == [0.0]
problem.y[] elements == 0.0
problem.n == 1
problem.calls == 0
problem.t0 == 0.0
problem.y0 has only one value
problem.y0[] == [0.0]
problem.y0[] elements == 0.0
problem.t1 == 1.0
problem.errorScale has only one value
problem.errorScale[] == [1.0]
problem.errorScale[] elements == 1.0
size(problem.y[]) == 1
size(problem.y0[]) == 1
size(problem.errorScale[]) == 1
===========================================================================
org.apache.commons.math3.ode.TestProblem2.computeTheoreticalState(double):::ENTER
this.calls >= 1
===========================================================================
org.apache.commons.math3.ode.TestProblem2.computeTheoreticalState(double):::EXIT
this.y == orig(this.y)
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
size(this.y[]) == orig(size(this.y[]))
this.calls >= 1
size(return[]) == 1
===========================================================================
org.apache.commons.math3.ode.TestProblem2.copy():::ENTER
this has only one value
this.y has only one value
this.y[] == [0.0]
this.y[] elements == 0.0
this.calls == 0
this.y0 has only one value
this.errorScale has only one value
===========================================================================
org.apache.commons.math3.ode.TestProblem2.copy():::EXIT
this.y == orig(this.y)
this.y[] == orig(this.y[])
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
this.y has only one value
this.y[] == [0.0]
this.y[] elements == 0.0
this.calls == 0
this.y0 has only one value
this.errorScale has only one value
return.y[] == [0.0]
return.y[] elements == 0.0
return.n == 1
return.calls == 0
return.t0 == 0.0
return.y0[] == [0.0]
return.y0[] elements == 0.0
return.t1 == 1.0
return.errorScale[] == [1.0]
return.errorScale[] elements == 1.0
size(return.y[]) == 1
size(return.y0[]) == 1
size(return.errorScale[]) == 1
===========================================================================
org.apache.commons.math3.ode.TestProblem2.doComputeDerivatives(double, double[], double[]):::ENTER
this.calls >= 1
size(y[]) == 1
size(yDot[]) == 1
===========================================================================
org.apache.commons.math3.ode.TestProblem2.doComputeDerivatives(double, double[], double[]):::EXIT
this.y == orig(this.y)
this.y[] == orig(this.y[])
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
y[] == orig(y[])
this.calls >= 1
===========================================================================
org.apache.commons.math3.ode.TestProblem3:::OBJECT
this.e one of { 0.1, 0.9, 0.999 }
this.y != null
this.n == 4
this.calls >= 0
this.t0 == 0.0
this.y0 != null
this.y0[] one of { [0.0010000000000000009, 0.0, 0.0, 44.710177812216294], [0.09999999999999998, 0.0, 0.0, 4.358898943540674], [0.9, 0.0, 0.0, 1.1055415967851334] }
this.y0[] elements >= 0.0
this.t1 == 20.0
this.errorScale != null
this.errorScale[] == [1.0, 1.0, 1.0, 1.0]
this.errorScale[] elements == 1.0
size(this.y[]) == 4
size(this.y0[]) == 4
size(this.errorScale[]) == 4
===========================================================================
org.apache.commons.math3.ode.TestProblem3.TestProblem3():::EXIT
this.e == 0.1
this.y[] == [0.0, 0.0, 0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
this.y0[] == [0.9, 0.0, 0.0, 1.1055415967851334]
this.y0[] elements one of { 0.0, 0.9, 1.1055415967851334 }
===========================================================================
org.apache.commons.math3.ode.TestProblem3.TestProblem3(double):::ENTER
e one of { 0.1, 0.9, 0.999 }
===========================================================================
org.apache.commons.math3.ode.TestProblem3.TestProblem3(double):::EXIT
this.y[] == [0.0, 0.0, 0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
===========================================================================
org.apache.commons.math3.ode.TestProblem3.TestProblem3(org.apache.commons.math3.ode.TestProblem3):::ENTER
problem has only one value
problem != null
problem.e == 0.1
problem.y has only one value
problem.y != null
problem.y[] == [0.0, 0.0, 0.0, 0.0]
problem.y[] elements == 0.0
problem.n == 4
problem.calls == 0
problem.t0 == 0.0
problem.y0 has only one value
problem.y0 != null
problem.y0[] == [0.9, 0.0, 0.0, 1.1055415967851334]
problem.y0[] elements one of { 0.0, 0.9, 1.1055415967851334 }
problem.t1 == 20.0
problem.errorScale has only one value
problem.errorScale != null
problem.errorScale[] == [1.0, 1.0, 1.0, 1.0]
problem.errorScale[] elements == 1.0
size(problem.y[]) == 4
size(problem.y0[]) == 4
size(problem.errorScale[]) == 4
===========================================================================
org.apache.commons.math3.ode.TestProblem3.TestProblem3(org.apache.commons.math3.ode.TestProblem3):::EXIT
problem.e == orig(problem.e)
problem.y == orig(problem.y)
problem.y[] == orig(problem.y[])
problem.n == orig(problem.n)
problem.calls == orig(problem.calls)
problem.t0 == orig(problem.t0)
problem.y0 == orig(problem.y0)
problem.y0[] == orig(problem.y0[])
problem.t1 == orig(problem.t1)
problem.errorScale == orig(problem.errorScale)
problem.errorScale[] == orig(problem.errorScale[])
this.e == 0.1
this.y[] == [0.0, 0.0, 0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
this.y0[] == [0.9, 0.0, 0.0, 1.1055415967851334]
this.y0[] elements one of { 0.0, 0.9, 1.1055415967851334 }
problem.e == 0.1
problem.y has only one value
problem.y != null
problem.y[] == [0.0, 0.0, 0.0, 0.0]
problem.y[] elements == 0.0
problem.n == 4
problem.calls == 0
problem.t0 == 0.0
problem.y0 has only one value
problem.y0 != null
problem.y0[] == [0.9, 0.0, 0.0, 1.1055415967851334]
problem.y0[] elements one of { 0.0, 0.9, 1.1055415967851334 }
problem.t1 == 20.0
problem.errorScale has only one value
problem.errorScale != null
problem.errorScale[] == [1.0, 1.0, 1.0, 1.0]
problem.errorScale[] elements == 1.0
size(problem.y[]) == 4
size(problem.y0[]) == 4
size(problem.errorScale[]) == 4
===========================================================================
org.apache.commons.math3.ode.TestProblem3.computeTheoreticalState(double):::ENTER
this.calls >= 1
===========================================================================
org.apache.commons.math3.ode.TestProblem3.computeTheoreticalState(double):::EXIT
this.e == orig(this.e)
this.y == orig(this.y)
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
size(this.y[]) == orig(size(this.y[]))
this.calls >= 1
return != null
size(return[]) == 4
===========================================================================
org.apache.commons.math3.ode.TestProblem3.copy():::ENTER
this has only one value
this.e == 0.1
this.y has only one value
this.y[] == [0.0, 0.0, 0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
this.y0 has only one value
this.y0[] == [0.9, 0.0, 0.0, 1.1055415967851334]
this.y0[] elements one of { 0.0, 0.9, 1.1055415967851334 }
this.errorScale has only one value
===========================================================================
org.apache.commons.math3.ode.TestProblem3.copy():::EXIT
this.e == orig(this.e)
this.y == orig(this.y)
this.y[] == orig(this.y[])
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
this.e == 0.1
this.y has only one value
this.y[] == [0.0, 0.0, 0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
this.y0 has only one value
this.y0[] == [0.9, 0.0, 0.0, 1.1055415967851334]
this.y0[] elements one of { 0.0, 0.9, 1.1055415967851334 }
this.errorScale has only one value
return != null
return.e == 0.1
return.y != null
return.y[] == [0.0, 0.0, 0.0, 0.0]
return.y[] elements == 0.0
return.n == 4
return.calls == 0
return.t0 == 0.0
return.y0 != null
return.y0[] == [0.9, 0.0, 0.0, 1.1055415967851334]
return.y0[] elements one of { 0.0, 0.9, 1.1055415967851334 }
return.t1 == 20.0
return.errorScale != null
return.errorScale[] == [1.0, 1.0, 1.0, 1.0]
return.errorScale[] elements == 1.0
size(return.y[]) == 4
size(return.y0[]) == 4
size(return.errorScale[]) == 4
===========================================================================
org.apache.commons.math3.ode.TestProblem3.doComputeDerivatives(double, double[], double[]):::ENTER
this.calls >= 1
y != null
yDot != null
size(y[]) == 4
size(yDot[]) == 4
===========================================================================
org.apache.commons.math3.ode.TestProblem3.doComputeDerivatives(double, double[], double[]):::EXIT
this.e == orig(this.e)
this.y == orig(this.y)
this.y[] == orig(this.y[])
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
y[] == orig(y[])
this.calls >= 1
===========================================================================
org.apache.commons.math3.ode.TestProblem4$Bounce:::OBJECT
this.sign one of { -1, 1 }
===========================================================================
org.apache.commons.math3.ode.TestProblem4$Bounce.Bounce():::EXIT
this.sign == 1
===========================================================================
org.apache.commons.math3.ode.TestProblem4$Bounce.eventOccurred(double, double[], boolean):::ENTER
y[] sorted by >
size(y[]) == 2
===========================================================================
org.apache.commons.math3.ode.TestProblem4$Bounce.eventOccurred(double, double[], boolean):::EXIT
y[] == orig(y[])
y[] sorted by >
return has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.STOP has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.RESET_STATE has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.RESET_DERIVATIVES has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.CONTINUE has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES.getClass().getName() == org.apache.commons.math3.ode.events.EventHandler$Action[].class
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[] contains no nulls and has only one value, of length 4
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[] elements != null
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[].getClass().getName() == [org.apache.commons.math3.ode.events.EventHandler.Action, org.apache.commons.math3.ode.events.EventHandler.Action, org.apache.commons.math3.ode.events.EventHandler.Action, org.apache.commons.math3.ode.events.EventHandler.Action]
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[].getClass().getName() elements == org.apache.commons.math3.ode.events.EventHandler.Action.class
size(org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[]) == 4
this.sign != orig(this.sign)
===========================================================================
org.apache.commons.math3.ode.TestProblem4$Bounce.g(double, double[]):::ENTER
size(y[]) == 2
===========================================================================
org.apache.commons.math3.ode.TestProblem4$Bounce.g(double, double[]):::EXIT
this.sign == orig(this.sign)
y[] == orig(y[])
===========================================================================
org.apache.commons.math3.ode.TestProblem4$Bounce.init(double, double[], double):::ENTER
this.sign == 1
t0 == 0.0
y0[] == [0.9320390859672263, 0.3623577544766736]
y0[] elements one of { 0.3623577544766736, 0.9320390859672263 }
y0[] sorted by >
t == 15.0
size(y0[]) == 2
===========================================================================
org.apache.commons.math3.ode.TestProblem4$Bounce.init(double, double[], double):::EXIT
this.sign == orig(this.sign)
y0[] == orig(y0[])
this.sign == 1
y0[] == [0.9320390859672263, 0.3623577544766736]
y0[] elements one of { 0.3623577544766736, 0.9320390859672263 }
y0[] sorted by >
===========================================================================
org.apache.commons.math3.ode.TestProblem4$Bounce.resetState(double, double[]):::ENTER
y[] sorted by >
size(y[]) == 2
===========================================================================
org.apache.commons.math3.ode.TestProblem4$Bounce.resetState(double, double[]):::EXIT
this.sign == orig(this.sign)
y[] sorted by <
y[] + orig(y[]) == 0
y[] > orig(y[]) (lexically)
y[] >= orig(y[]) (elementwise)
===========================================================================
org.apache.commons.math3.ode.TestProblem4$Stop:::OBJECT
===========================================================================
org.apache.commons.math3.ode.TestProblem4$Stop.Stop():::EXIT
===========================================================================
org.apache.commons.math3.ode.TestProblem4$Stop.eventOccurred(double, double[], boolean):::ENTER
t == 12.0
increasing == true
size(y[]) == 2
===========================================================================
org.apache.commons.math3.ode.TestProblem4$Stop.eventOccurred(double, double[], boolean):::EXIT
y[] == orig(y[])
return has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.STOP has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.RESET_STATE has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.RESET_DERIVATIVES has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.CONTINUE has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES.getClass().getName() == org.apache.commons.math3.ode.events.EventHandler$Action[].class
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[] contains no nulls and has only one value, of length 4
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[] elements != null
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[].getClass().getName() == [org.apache.commons.math3.ode.events.EventHandler.Action, org.apache.commons.math3.ode.events.EventHandler.Action, org.apache.commons.math3.ode.events.EventHandler.Action, org.apache.commons.math3.ode.events.EventHandler.Action]
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[].getClass().getName() elements == org.apache.commons.math3.ode.events.EventHandler.Action.class
size(org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[]) == 4
===========================================================================
org.apache.commons.math3.ode.TestProblem4$Stop.g(double, double[]):::ENTER
size(y[]) == 2
===========================================================================
org.apache.commons.math3.ode.TestProblem4$Stop.g(double, double[]):::EXIT
y[] == orig(y[])
===========================================================================
org.apache.commons.math3.ode.TestProblem4$Stop.init(double, double[], double):::ENTER
t0 == 0.0
y0[] == [0.9320390859672263, 0.3623577544766736]
y0[] elements one of { 0.3623577544766736, 0.9320390859672263 }
y0[] sorted by >
t == 15.0
size(y0[]) == 2
===========================================================================
org.apache.commons.math3.ode.TestProblem4$Stop.init(double, double[], double):::EXIT
y0[] == orig(y0[])
y0[] == [0.9320390859672263, 0.3623577544766736]
y0[] elements one of { 0.3623577544766736, 0.9320390859672263 }
y0[] sorted by >
===========================================================================
org.apache.commons.math3.ode.TestProblem4:::OBJECT
this.a == 1.2
this.n == 2
this.calls >= 0
this.t0 == 0.0
this.y0[] == [0.9320390859672263, 0.3623577544766736]
this.y0[] elements one of { 0.3623577544766736, 0.9320390859672263 }
this.y0[] sorted by >
this.t1 == 15.0
this.errorScale[] == [1.0, 0.0]
this.errorScale[] elements one of { 0.0, 1.0 }
this.errorScale[] sorted by >
size(this.y[]) == 2
size(this.y0[]) == 2
size(this.errorScale[]) == 2
===========================================================================
org.apache.commons.math3.ode.TestProblem4.TestProblem4():::EXIT
this.y[] == [0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
===========================================================================
org.apache.commons.math3.ode.TestProblem4.TestProblem4(org.apache.commons.math3.ode.TestProblem4):::ENTER
problem has only one value
problem.a == 1.2
problem.y has only one value
problem.y[] == [0.0, 0.0]
problem.y[] elements == 0.0
problem.n == 2
problem.calls == 0
problem.t0 == 0.0
problem.y0 has only one value
problem.y0[] == [0.9320390859672263, 0.3623577544766736]
problem.y0[] elements one of { 0.3623577544766736, 0.9320390859672263 }
problem.y0[] sorted by >
problem.t1 == 15.0
problem.errorScale has only one value
problem.errorScale[] == [1.0, 0.0]
problem.errorScale[] elements one of { 0.0, 1.0 }
problem.errorScale[] sorted by >
size(problem.y[]) == 2
size(problem.y0[]) == 2
size(problem.errorScale[]) == 2
===========================================================================
org.apache.commons.math3.ode.TestProblem4.TestProblem4(org.apache.commons.math3.ode.TestProblem4):::EXIT
problem.a == orig(problem.a)
problem.y == orig(problem.y)
problem.y[] == orig(problem.y[])
problem.n == orig(problem.n)
problem.calls == orig(problem.calls)
problem.t0 == orig(problem.t0)
problem.y0 == orig(problem.y0)
problem.y0[] == orig(problem.y0[])
problem.t1 == orig(problem.t1)
problem.errorScale == orig(problem.errorScale)
problem.errorScale[] == orig(problem.errorScale[])
this.y[] == [0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
problem.a == 1.2
problem.y has only one value
problem.y[] == [0.0, 0.0]
problem.y[] elements == 0.0
problem.n == 2
problem.calls == 0
problem.t0 == 0.0
problem.y0 has only one value
problem.y0[] == [0.9320390859672263, 0.3623577544766736]
problem.y0[] elements one of { 0.3623577544766736, 0.9320390859672263 }
problem.y0[] sorted by >
problem.t1 == 15.0
problem.errorScale has only one value
problem.errorScale[] == [1.0, 0.0]
problem.errorScale[] elements one of { 0.0, 1.0 }
problem.errorScale[] sorted by >
size(problem.y[]) == 2
size(problem.y0[]) == 2
size(problem.errorScale[]) == 2
===========================================================================
org.apache.commons.math3.ode.TestProblem4.computeTheoreticalState(double):::ENTER
this.calls >= 1
===========================================================================
org.apache.commons.math3.ode.TestProblem4.computeTheoreticalState(double):::EXIT
this.a == orig(this.a)
this.y == orig(this.y)
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
size(this.y[]) == orig(size(this.y[]))
this.calls >= 1
size(return[]) == 2
===========================================================================
org.apache.commons.math3.ode.TestProblem4.copy():::ENTER
this has only one value
this.y has only one value
this.y[] == [0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
this.y0 has only one value
this.errorScale has only one value
===========================================================================
org.apache.commons.math3.ode.TestProblem4.copy():::EXIT
this.a == orig(this.a)
this.y == orig(this.y)
this.y[] == orig(this.y[])
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
this.y has only one value
this.y[] == [0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
this.y0 has only one value
this.errorScale has only one value
return.a == 1.2
return.y[] == [0.0, 0.0]
return.y[] elements == 0.0
return.n == 2
return.calls == 0
return.t0 == 0.0
return.y0[] == [0.9320390859672263, 0.3623577544766736]
return.y0[] elements one of { 0.3623577544766736, 0.9320390859672263 }
return.y0[] sorted by >
return.t1 == 15.0
return.errorScale[] == [1.0, 0.0]
return.errorScale[] elements one of { 0.0, 1.0 }
return.errorScale[] sorted by >
size(return.y[]) == 2
size(return.y0[]) == 2
size(return.errorScale[]) == 2
===========================================================================
org.apache.commons.math3.ode.TestProblem4.doComputeDerivatives(double, double[], double[]):::ENTER
this.calls >= 1
size(y[]) == 2
size(yDot[]) == 2
===========================================================================
org.apache.commons.math3.ode.TestProblem4.doComputeDerivatives(double, double[], double[]):::EXIT
this.a == orig(this.a)
this.y == orig(this.y)
this.y[] == orig(this.y[])
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
y[] == orig(y[])
this.calls >= 1
===========================================================================
org.apache.commons.math3.ode.TestProblem4.getEventsHandlers():::ENTER
this.y[] == [0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
===========================================================================
org.apache.commons.math3.ode.TestProblem4.getEventsHandlers():::EXIT
this.a == orig(this.a)
this.y == orig(this.y)
this.y[] == orig(this.y[])
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
this.y[] == [0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
return.getClass().getName() == org.apache.commons.math3.ode.events.EventHandler[].class
return[] elements != null
size(return[]) == 2
===========================================================================
org.apache.commons.math3.ode.TestProblem4.getTheoreticalEventsTimes():::ENTER
===========================================================================
org.apache.commons.math3.ode.TestProblem4.getTheoreticalEventsTimes():::EXIT
this.a == orig(this.a)
this.y == orig(this.y)
this.y[] == orig(this.y[])
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
return[] == [1.9415926535897932, 5.083185307179586, 8.22477796076938, 11.366370614359173, 12.0]
return[] elements >= 1.9415926535897932
return[] sorted by <
size(return[]) == 5
===========================================================================
org.apache.commons.math3.ode.TestProblem5:::OBJECT
this.y[] == [0.0, 0.0]
this.y[] elements == 0.0
this.n == 2
this.calls == 0
this.t0 == 0.0
this.y0[] == [1.0, 0.1]
this.y0[] elements one of { 0.1, 1.0 }
this.y0[] sorted by >
this.t1 == -4.0
this.errorScale[] == [1.0, 1.0]
this.errorScale[] elements == 1.0
size(this.y[]) == 2
size(this.y0[]) == 2
size(this.errorScale[]) == 2
===========================================================================
org.apache.commons.math3.ode.TestProblem5.TestProblem5():::EXIT
===========================================================================
org.apache.commons.math3.ode.TestProblem5.copy():::ENTER
this has only one value
this.y has only one value
this.y0 has only one value
this.errorScale has only one value
===========================================================================
org.apache.commons.math3.ode.TestProblem5.copy():::EXIT
this.y == orig(this.y)
this.y[] == orig(this.y[])
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
this.y has only one value
this.y0 has only one value
this.errorScale has only one value
return.y[] == [0.0, 0.0]
return.y[] elements == 0.0
return.n == 2
return.calls == 0
return.t0 == 0.0
return.y0[] == [1.0, 0.1]
return.y0[] elements one of { 0.1, 1.0 }
return.y0[] sorted by >
return.t1 == -4.0
return.errorScale[] == [1.0, 1.0]
return.errorScale[] elements == 1.0
size(return.y[]) == 2
size(return.y0[]) == 2
size(return.errorScale[]) == 2
===========================================================================
org.apache.commons.math3.ode.TestProblem6:::OBJECT
this.n == 1
this.calls >= 0
this.t0 == 0.0
this.y0[] == [-360.0]
this.y0[] elements == -360.0
this.t1 == 1.0
this.errorScale[] == [1.0]
this.errorScale[] elements == 1.0
size(this.y[]) == 1
size(this.y0[]) == 1
size(this.errorScale[]) == 1
===========================================================================
org.apache.commons.math3.ode.TestProblem6.TestProblem6():::EXIT
this.y[] == [0.0]
this.y[] elements == 0.0
this.calls == 0
===========================================================================
org.apache.commons.math3.ode.TestProblem6.TestProblem6(org.apache.commons.math3.ode.TestProblem6):::ENTER
problem has only one value
problem.y has only one value
problem.y[] == [0.0]
problem.y[] elements == 0.0
problem.n == 1
problem.calls == 0
problem.t0 == 0.0
problem.y0 has only one value
problem.y0[] == [-360.0]
problem.y0[] elements == -360.0
problem.t1 == 1.0
problem.errorScale has only one value
problem.errorScale[] == [1.0]
problem.errorScale[] elements == 1.0
size(problem.y[]) == 1
size(problem.y0[]) == 1
size(problem.errorScale[]) == 1
===========================================================================
org.apache.commons.math3.ode.TestProblem6.TestProblem6(org.apache.commons.math3.ode.TestProblem6):::EXIT
problem.y == orig(problem.y)
problem.y[] == orig(problem.y[])
problem.n == orig(problem.n)
problem.calls == orig(problem.calls)
problem.t0 == orig(problem.t0)
problem.y0 == orig(problem.y0)
problem.y0[] == orig(problem.y0[])
problem.t1 == orig(problem.t1)
problem.errorScale == orig(problem.errorScale)
problem.errorScale[] == orig(problem.errorScale[])
this.y[] == [0.0]
this.y[] elements == 0.0
this.calls == 0
problem.y has only one value
problem.y[] == [0.0]
problem.y[] elements == 0.0
problem.n == 1
problem.calls == 0
problem.t0 == 0.0
problem.y0 has only one value
problem.y0[] == [-360.0]
problem.y0[] elements == -360.0
problem.t1 == 1.0
problem.errorScale has only one value
problem.errorScale[] == [1.0]
problem.errorScale[] elements == 1.0
size(problem.y[]) == 1
size(problem.y0[]) == 1
size(problem.errorScale[]) == 1
===========================================================================
org.apache.commons.math3.ode.TestProblem6.computeTheoreticalState(double):::ENTER
this.calls >= 1
===========================================================================
org.apache.commons.math3.ode.TestProblem6.computeTheoreticalState(double):::EXIT
this.y == orig(this.y)
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
size(this.y[]) == orig(size(this.y[]))
this.calls >= 1
size(return[]) == 1
===========================================================================
org.apache.commons.math3.ode.TestProblem6.copy():::ENTER
this has only one value
this.y has only one value
this.y[] == [0.0]
this.y[] elements == 0.0
this.calls == 0
this.y0 has only one value
this.errorScale has only one value
===========================================================================
org.apache.commons.math3.ode.TestProblem6.copy():::EXIT
this.y == orig(this.y)
this.y[] == orig(this.y[])
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
this.y has only one value
this.y[] == [0.0]
this.y[] elements == 0.0
this.calls == 0
this.y0 has only one value
this.errorScale has only one value
return.y[] == [0.0]
return.y[] elements == 0.0
return.n == 1
return.calls == 0
return.t0 == 0.0
return.y0[] == [-360.0]
return.y0[] elements == -360.0
return.t1 == 1.0
return.errorScale[] == [1.0]
return.errorScale[] elements == 1.0
size(return.y[]) == 1
size(return.y0[]) == 1
size(return.errorScale[]) == 1
===========================================================================
org.apache.commons.math3.ode.TestProblem6.doComputeDerivatives(double, double[], double[]):::ENTER
this.calls >= 1
size(y[]) == 1
size(yDot[]) == 1
===========================================================================
org.apache.commons.math3.ode.TestProblem6.doComputeDerivatives(double, double[], double[]):::EXIT
this.y == orig(this.y)
this.y[] == orig(this.y[])
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
y[] == orig(y[])
this.calls >= 1
===========================================================================
org.apache.commons.math3.ode.TestProblemAbstract:::OBJECT
this.n >= 0
this.calls >= 0
this.t0 == 0.0
this.errorScale[] elements one of { 0.0, 1.0 }
this.errorScale[] sorted by >=
size(this.y0[]) one of { 1, 2, 4 }
size(this.errorScale[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math3.ode.TestProblemAbstract.TestProblemAbstract():::EXIT
this.n == 0
this.calls == 0
this.y0 == null
this.t1 == 0.0
this.errorScale == null
===========================================================================
org.apache.commons.math3.ode.TestProblemAbstract.TestProblemAbstract(org.apache.commons.math3.ode.TestProblemAbstract):::ENTER
problem != null
problem.n one of { 1, 2, 4 }
problem.calls == 0
problem.t0 == 0.0
problem.y0 != null
problem.y0[] elements <= 1.1055415967851334
problem.t1 >= 1.0
problem.errorScale != null
problem.errorScale[] elements one of { 0.0, 1.0 }
problem.errorScale[] sorted by >=
size(problem.y0[]) one of { 1, 2, 4 }
size(problem.errorScale[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math3.ode.TestProblemAbstract.TestProblemAbstract(org.apache.commons.math3.ode.TestProblemAbstract):::EXIT
problem.n == orig(problem.n)
problem.calls == orig(problem.calls)
problem.t0 == orig(problem.t0)
problem.y0 == orig(problem.y0)
problem.y0[] == orig(problem.y0[])
problem.t1 == orig(problem.t1)
problem.errorScale == orig(problem.errorScale)
problem.errorScale[] == orig(problem.errorScale[])
this.n one of { 1, 2, 4 }
this.calls == 0
this.y0 != null
this.y0[] elements <= 1.1055415967851334
this.t1 >= 1.0
this.errorScale != null
problem.n one of { 1, 2, 4 }
problem.calls == 0
problem.t0 == 0.0
problem.y0 != null
problem.y0[] elements <= 1.1055415967851334
problem.t1 >= 1.0
problem.errorScale != null
problem.errorScale[] elements one of { 0.0, 1.0 }
problem.errorScale[] sorted by >=
size(problem.y0[]) one of { 1, 2, 4 }
size(problem.errorScale[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math3.ode.TestProblemAbstract.computeDerivatives(double, double[], double[]):::ENTER
this.n one of { 1, 2, 4 }
this.y0 != null
this.t1 != 0
this.errorScale != null
y != null
yDot != null
size(y[]) one of { 1, 2, 4 }
size(yDot[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math3.ode.TestProblemAbstract.computeDerivatives(double, double[], double[]):::EXIT
this.n == orig(this.n)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
y[] == orig(y[])
this.n one of { 1, 2, 4 }
this.calls >= 1
this.y0 != null
this.t1 != 0
this.errorScale != null
this.calls - orig(this.calls) - 1 == 0
===========================================================================
org.apache.commons.math3.ode.TestProblemAbstract.getCalls():::ENTER
this.n one of { 2, 4 }
this.y0 != null
this.y0[] one of { [0.09999999999999998, 0.0, 0.0, 4.358898943540674], [1.0, 0.1] }
this.t1 one of { 4.0, 20.0 }
this.errorScale != null
this.errorScale[] elements == 1.0
this.errorScale[] one of { [1.0, 1.0], [1.0, 1.0, 1.0, 1.0] }
size(this.y0[]) one of { 2, 4 }
size(this.errorScale[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math3.ode.TestProblemAbstract.getCalls():::EXIT
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
this.n one of { 2, 4 }
this.y0 != null
this.y0[] one of { [0.09999999999999998, 0.0, 0.0, 4.358898943540674], [1.0, 0.1] }
this.t1 one of { 4.0, 20.0 }
this.errorScale != null
this.errorScale[] elements == 1.0
this.errorScale[] one of { [1.0, 1.0], [1.0, 1.0, 1.0, 1.0] }
size(this.y0[]) one of { 2, 4 }
size(this.errorScale[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math3.ode.TestProblemAbstract.getDimension():::ENTER
this.n one of { 1, 2, 4 }
this.y0 != null
this.t1 != 0
this.errorScale != null
===========================================================================
org.apache.commons.math3.ode.TestProblemAbstract.getDimension():::EXIT
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
this.n one of { 1, 2, 4 }
this.y0 != null
this.t1 != 0
this.errorScale != null
return one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math3.ode.TestProblemAbstract.getErrorScale():::ENTER
this.n one of { 1, 2, 4 }
this.calls >= 1
this.y0 != null
this.t1 != 0
this.errorScale != null
===========================================================================
org.apache.commons.math3.ode.TestProblemAbstract.getErrorScale():::EXIT
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
this.n one of { 1, 2, 4 }
this.calls >= 1
this.y0 != null
this.t1 != 0
this.errorScale != null
return != null
return[] elements one of { 0.0, 1.0 }
return[] sorted by >=
size(return[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math3.ode.TestProblemAbstract.getEventsHandlers():::ENTER
this.n one of { 1, 2, 4 }
this.calls == 0
this.y0 != null
this.y0[] elements <= 1.1055415967851334
this.t1 != 0
this.errorScale != null
this.errorScale[] elements == 1.0
this.errorScale[] one of { [1.0], [1.0, 1.0], [1.0, 1.0, 1.0, 1.0] }
===========================================================================
org.apache.commons.math3.ode.TestProblemAbstract.getEventsHandlers():::EXIT
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
this.n one of { 1, 2, 4 }
this.calls == 0
this.y0 != null
this.y0[] elements <= 1.1055415967851334
this.t1 != 0
this.errorScale != null
this.errorScale[] elements == 1.0
this.errorScale[] one of { [1.0], [1.0, 1.0], [1.0, 1.0, 1.0, 1.0] }
return != null
return.getClass().getName() == org.apache.commons.math3.ode.events.EventHandler[].class
return[] == []
===========================================================================
org.apache.commons.math3.ode.TestProblemAbstract.getFinalTime():::ENTER
this.n one of { 1, 2, 4 }
this.y0 != null
this.t1 != 0
this.errorScale != null
===========================================================================
org.apache.commons.math3.ode.TestProblemAbstract.getFinalTime():::EXIT
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
this.n one of { 1, 2, 4 }
this.y0 != null
this.t1 != 0
this.errorScale != null
return != 0
===========================================================================
org.apache.commons.math3.ode.TestProblemAbstract.getInitialState():::ENTER
this.n one of { 1, 2, 4 }
this.y0 != null
this.t1 != 0
this.errorScale != null
===========================================================================
org.apache.commons.math3.ode.TestProblemAbstract.getInitialState():::EXIT
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
this.n one of { 1, 2, 4 }
this.y0 != null
this.t1 != 0
this.errorScale != null
return != null
size(return[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math3.ode.TestProblemAbstract.getInitialTime():::ENTER
this.n one of { 1, 2, 4 }
this.y0 != null
this.t1 != 0
this.errorScale != null
===========================================================================
org.apache.commons.math3.ode.TestProblemAbstract.getInitialTime():::EXIT
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
this.n one of { 1, 2, 4 }
this.y0 != null
this.t1 != 0
this.errorScale != null
return == 0.0
===========================================================================
org.apache.commons.math3.ode.TestProblemAbstract.getTheoreticalEventsTimes():::ENTER
this.n one of { 1, 2, 4 }
this.y0 != null
this.t1 != 0
this.errorScale != null
this.errorScale[] elements == 1.0
this.errorScale[] one of { [1.0], [1.0, 1.0], [1.0, 1.0, 1.0, 1.0] }
===========================================================================
org.apache.commons.math3.ode.TestProblemAbstract.getTheoreticalEventsTimes():::EXIT
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
this.n one of { 1, 2, 4 }
this.y0 != null
this.t1 != 0
this.errorScale != null
this.errorScale[] elements == 1.0
this.errorScale[] one of { [1.0], [1.0, 1.0], [1.0, 1.0, 1.0, 1.0] }
return != null
return[] == []
===========================================================================
org.apache.commons.math3.ode.TestProblemAbstract.setErrorScale(double[]):::ENTER
this.n one of { 1, 2, 4 }
this.calls == 0
this.y0 != null
this.errorScale == null
errorScale != null
errorScale[] elements one of { 0.0, 1.0 }
errorScale[] sorted by >=
size(errorScale[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math3.ode.TestProblemAbstract.setErrorScale(double[]):::EXIT
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
errorScale[] == orig(errorScale[])
this.n one of { 1, 2, 4 }
this.calls == 0
this.y0 != null
this.errorScale != null
errorScale[] elements one of { 0.0, 1.0 }
errorScale[] sorted by >=
===========================================================================
org.apache.commons.math3.ode.TestProblemAbstract.setFinalConditions(double):::ENTER
this.n one of { 1, 2, 4 }
this.calls == 0
this.y0 != null
this.t1 one of { 0.0, 4.0 }
this.errorScale[] == [1.0, 1.0]
this.errorScale[] elements == 1.0
t1 != 0
size(this.errorScale[]) == 2
===========================================================================
org.apache.commons.math3.ode.TestProblemAbstract.setFinalConditions(double):::EXIT
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
this.n one of { 1, 2, 4 }
this.calls == 0
this.y0 != null
this.t1 != 0
this.errorScale[] == [1.0, 1.0]
this.errorScale[] elements == 1.0
size(this.errorScale[]) == 2
orig(this.t1) % this.t1 == 0
this.t1 != orig(this.t1)
===========================================================================
org.apache.commons.math3.ode.TestProblemAbstract.setInitialConditions(double, double[]):::ENTER
this.n == 0
this.calls == 0
this.y0 == null
this.t1 == 0.0
this.errorScale == null
t0 == 0.0
y0 != null
size(y0[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math3.ode.TestProblemAbstract.setInitialConditions(double, double[]):::EXIT
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
y0[] == orig(y0[])
this.n one of { 1, 2, 4 }
this.calls == 0
this.y0 != null
this.t1 == 0.0
this.errorScale == null
this.n > orig(this.n)
===========================================================================
org.apache.commons.math3.ode.TestProblemFactory:::CLASS
org.apache.commons.math3.ode.TestProblemFactory.pool has only one value
org.apache.commons.math3.ode.TestProblemFactory.pool.getClass().getName() == org.apache.commons.math3.ode.TestProblemAbstract[].class
org.apache.commons.math3.ode.TestProblemFactory.pool[] contains no nulls and has only one value, of length 6
org.apache.commons.math3.ode.TestProblemFactory.pool[].getClass().getName() == [org.apache.commons.math3.ode.TestProblem1, org.apache.commons.math3.ode.TestProblem2, org.apache.commons.math3.ode.TestProblem3, org.apache.commons.math3.ode.TestProblem4, org.apache.commons.math3.ode.TestProblem5, org.apache.commons.math3.ode.TestProblem6]
org.apache.commons.math3.ode.TestProblemFactory.pool[].n == [2, 1, 4, 2, 2, 1]
org.apache.commons.math3.ode.TestProblemFactory.pool[].n elements one of { 1, 2, 4 }
org.apache.commons.math3.ode.TestProblemFactory.pool[].calls == [0, 0, 0, 0, 0, 0]
org.apache.commons.math3.ode.TestProblemFactory.pool[].calls elements == 0
org.apache.commons.math3.ode.TestProblemFactory.pool[].t0 == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
org.apache.commons.math3.ode.TestProblemFactory.pool[].t0 elements == 0.0
org.apache.commons.math3.ode.TestProblemFactory.pool[].y0 contains no nulls and has only one value, of length 6
org.apache.commons.math3.ode.TestProblemFactory.pool[].t1 == [4.0, 1.0, 20.0, 15.0, -4.0, 1.0]
org.apache.commons.math3.ode.TestProblemFactory.pool[].errorScale contains no nulls and has only one value, of length 6
size(org.apache.commons.math3.ode.TestProblemFactory.pool[]) == 6
===========================================================================
org.apache.commons.math3.ode.TestProblemFactory.getProblems():::ENTER
===========================================================================
org.apache.commons.math3.ode.TestProblemFactory.getProblems():::EXIT
org.apache.commons.math3.ode.TestProblemFactory.pool == orig(org.apache.commons.math3.ode.TestProblemFactory.pool)
org.apache.commons.math3.ode.TestProblemFactory.pool.getClass().getName() == orig(org.apache.commons.math3.ode.TestProblemFactory.pool.getClass().getName())
org.apache.commons.math3.ode.TestProblemFactory.pool[] == orig(org.apache.commons.math3.ode.TestProblemFactory.pool[])
org.apache.commons.math3.ode.TestProblemFactory.pool[].n == orig(org.apache.commons.math3.ode.TestProblemFactory.pool[].n)
org.apache.commons.math3.ode.TestProblemFactory.pool[].calls == orig(org.apache.commons.math3.ode.TestProblemFactory.pool[].calls)
org.apache.commons.math3.ode.TestProblemFactory.pool[].t0 == orig(org.apache.commons.math3.ode.TestProblemFactory.pool[].t0)
org.apache.commons.math3.ode.TestProblemFactory.pool[].y0 == orig(org.apache.commons.math3.ode.TestProblemFactory.pool[].y0)
org.apache.commons.math3.ode.TestProblemFactory.pool[].t1 == orig(org.apache.commons.math3.ode.TestProblemFactory.pool[].t1)
org.apache.commons.math3.ode.TestProblemFactory.pool[].errorScale == orig(org.apache.commons.math3.ode.TestProblemFactory.pool[].errorScale)
return has only one value
return.getClass().getName() == org.apache.commons.math3.ode.TestProblemAbstract[].class
return[] contains no nulls and has only one value, of length 6
return[].n == [2, 1, 4, 2, 2, 1]
return[].n elements one of { 1, 2, 4 }
return[].calls == [0, 0, 0, 0, 0, 0]
return[].calls elements == 0
return[].t0 == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
return[].t0 elements == 0.0
return[].y0 contains no nulls and has only one value, of length 6
return[].t1 == [4.0, 1.0, 20.0, 15.0, -4.0, 1.0]
return[].errorScale contains no nulls and has only one value, of length 6
size(return[]) == 6
===========================================================================
org.apache.commons.math3.ode.TestProblemHandler:::OBJECT
this.problem.n one of { 1, 2, 4 }
this.problem.calls >= 0
this.problem.t0 == 0.0
this.problem.errorScale[] elements one of { 0.0, 1.0 }
this.problem.errorScale[] sorted by >=
this.maxValueError >= 0.0
this.maxTimeError >= 0.0
this.lastError >= 0.0
size(this.problem.y0[]) one of { 1, 2, 4 }
size(this.problem.errorScale[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math3.ode.TestProblemHandler.TestProblemHandler(org.apache.commons.math3.ode.TestProblemAbstract, org.apache.commons.math3.ode.ODEIntegrator):::ENTER
problem.n one of { 1, 2, 4 }
problem.calls >= 0
problem.t0 == 0.0
problem.errorScale[] elements one of { 0.0, 1.0 }
problem.errorScale[] sorted by >=
size(problem.y0[]) one of { 1, 2, 4 }
size(problem.errorScale[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math3.ode.TestProblemHandler.TestProblemHandler(org.apache.commons.math3.ode.TestProblemAbstract, org.apache.commons.math3.ode.ODEIntegrator):::EXIT
problem.n == orig(problem.n)
problem.calls == orig(problem.calls)
problem.t0 == orig(problem.t0)
problem.y0 == orig(problem.y0)
problem.y0[] == orig(problem.y0[])
problem.t1 == orig(problem.t1)
problem.errorScale == orig(problem.errorScale)
problem.errorScale[] == orig(problem.errorScale[])
this.maxValueError == 0.0
this.maxTimeError == 0.0
this.lastError == 0.0
this.lastTime == 0.0
this.expectedStepStart == Double.NaN
problem.n one of { 1, 2, 4 }
problem.calls >= 0
problem.t0 == 0.0
problem.errorScale[] elements one of { 0.0, 1.0 }
problem.errorScale[] sorted by >=
size(problem.y0[]) one of { 1, 2, 4 }
size(problem.errorScale[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math3.ode.TestProblemHandler.getLastError():::ENTER
this.problem.n == 2
this.problem.y0[] == [1.0, 0.1]
this.problem.y0[] elements one of { 0.1, 1.0 }
this.problem.y0[] sorted by >
this.problem.t1 one of { -4.0, 4.0 }
this.problem.errorScale[] == [1.0, 1.0]
this.problem.errorScale[] elements == 1.0
this.maxTimeError == 0.0
this.lastTime one of { -4.0, 4.0 }
this.expectedStepStart one of { -4.0, 4.0 }
size(this.problem.y0[]) == 2
size(this.problem.errorScale[]) == 2
===========================================================================
org.apache.commons.math3.ode.TestProblemHandler.getLastError():::EXIT
this.problem == orig(this.problem)
this.problem.getClass().getName() == orig(this.problem.getClass().getName())
this.problem.n == orig(this.problem.n)
this.problem.calls == orig(this.problem.calls)
this.problem.t0 == orig(this.problem.t0)
this.problem.y0 == orig(this.problem.y0)
this.problem.y0[] == orig(this.problem.y0[])
this.problem.t1 == orig(this.problem.t1)
this.problem.errorScale == orig(this.problem.errorScale)
this.problem.errorScale[] == orig(this.problem.errorScale[])
this.maxValueError == orig(this.maxValueError)
this.maxTimeError == orig(this.maxTimeError)
this.lastError == orig(this.lastError)
this.lastTime == orig(this.lastTime)
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.expectedStepStart == orig(this.expectedStepStart)
this.problem.n == 2
this.problem.y0[] == [1.0, 0.1]
this.problem.y0[] elements one of { 0.1, 1.0 }
this.problem.y0[] sorted by >
this.problem.t1 one of { -4.0, 4.0 }
this.problem.errorScale[] == [1.0, 1.0]
this.problem.errorScale[] elements == 1.0
this.maxTimeError == 0.0
this.lastTime one of { -4.0, 4.0 }
this.expectedStepStart one of { -4.0, 4.0 }
size(this.problem.y0[]) == 2
size(this.problem.errorScale[]) == 2
===========================================================================
org.apache.commons.math3.ode.TestProblemHandler.getLastTime():::ENTER
this.problem.getClass().getName() == org.apache.commons.math3.ode.TestProblem4.class
this.problem.n == 2
this.problem.y0[] == [0.9320390859672263, 0.3623577544766736]
this.problem.y0[] elements one of { 0.3623577544766736, 0.9320390859672263 }
this.problem.t1 == 15.0
this.problem.errorScale[] == [1.0, 0.0]
this.lastTime == 12.0
size(this.problem.y0[]) == 2
size(this.problem.errorScale[]) == 2
===========================================================================
org.apache.commons.math3.ode.TestProblemHandler.getLastTime():::EXIT
this.problem == orig(this.problem)
this.problem.getClass().getName() == orig(this.problem.getClass().getName())
this.problem.n == orig(this.problem.n)
this.problem.calls == orig(this.problem.calls)
this.problem.t0 == orig(this.problem.t0)
this.problem.y0 == orig(this.problem.y0)
this.problem.y0[] == orig(this.problem.y0[])
this.problem.t1 == orig(this.problem.t1)
this.problem.errorScale == orig(this.problem.errorScale)
this.problem.errorScale[] == orig(this.problem.errorScale[])
this.maxValueError == orig(this.maxValueError)
this.maxTimeError == orig(this.maxTimeError)
this.lastError == orig(this.lastError)
this.lastTime == orig(this.lastTime)
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.expectedStepStart == orig(this.expectedStepStart)
this.problem.getClass().getName() == org.apache.commons.math3.ode.TestProblem4.class
this.problem.n == 2
this.problem.y0[] == [0.9320390859672263, 0.3623577544766736]
this.problem.y0[] elements one of { 0.3623577544766736, 0.9320390859672263 }
this.problem.t1 == 15.0
this.problem.errorScale[] == [1.0, 0.0]
this.lastTime == 12.0
return == 12.0
size(this.problem.y0[]) == 2
size(this.problem.errorScale[]) == 2
===========================================================================
org.apache.commons.math3.ode.TestProblemHandler.getMaximalTimeError():::ENTER
this.problem.y0[] elements <= 1.1055415967851334
===========================================================================
org.apache.commons.math3.ode.TestProblemHandler.getMaximalTimeError():::EXIT
this.problem == orig(this.problem)
this.problem.getClass().getName() == orig(this.problem.getClass().getName())
this.problem.n == orig(this.problem.n)
this.problem.calls == orig(this.problem.calls)
this.problem.t0 == orig(this.problem.t0)
this.problem.y0 == orig(this.problem.y0)
this.problem.y0[] == orig(this.problem.y0[])
this.problem.t1 == orig(this.problem.t1)
this.problem.errorScale == orig(this.problem.errorScale)
this.problem.errorScale[] == orig(this.problem.errorScale[])
this.maxValueError == orig(this.maxValueError)
this.maxTimeError == orig(this.maxTimeError)
this.lastError == orig(this.lastError)
this.lastTime == orig(this.lastTime)
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.expectedStepStart == orig(this.expectedStepStart)
this.problem.y0[] elements <= 1.1055415967851334
===========================================================================
org.apache.commons.math3.ode.TestProblemHandler.getMaximalValueError():::ENTER
===========================================================================
org.apache.commons.math3.ode.TestProblemHandler.getMaximalValueError():::EXIT
this.problem == orig(this.problem)
this.problem.getClass().getName() == orig(this.problem.getClass().getName())
this.problem.n == orig(this.problem.n)
this.problem.calls == orig(this.problem.calls)
this.problem.t0 == orig(this.problem.t0)
this.problem.y0 == orig(this.problem.y0)
this.problem.y0[] == orig(this.problem.y0[])
this.problem.t1 == orig(this.problem.t1)
this.problem.errorScale == orig(this.problem.errorScale)
this.problem.errorScale[] == orig(this.problem.errorScale[])
this.maxValueError == orig(this.maxValueError)
this.maxTimeError == orig(this.maxTimeError)
this.lastError == orig(this.lastError)
this.lastTime == orig(this.lastTime)
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.expectedStepStart == orig(this.expectedStepStart)
===========================================================================
org.apache.commons.math3.ode.TestProblemHandler.handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean):::ENTER
this.problem.calls >= 1
this.lastError == 0.0
this.lastTime one of { 0.0, 4.0, 20.0 }
===========================================================================
org.apache.commons.math3.ode.TestProblemHandler.handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean):::EXIT
this.problem == orig(this.problem)
this.problem.getClass().getName() == orig(this.problem.getClass().getName())
this.problem.n == orig(this.problem.n)
this.problem.calls == orig(this.problem.calls)
this.problem.t0 == orig(this.problem.t0)
this.problem.y0 == orig(this.problem.y0)
this.problem.y0[] == orig(this.problem.y0[])
this.problem.t1 == orig(this.problem.t1)
this.problem.errorScale == orig(this.problem.errorScale)
this.problem.errorScale[] == orig(this.problem.errorScale[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.problem.calls >= 1
this.maxValueError >= orig(this.maxValueError)
this.maxTimeError >= orig(this.maxTimeError)
this.lastError >= orig(this.lastError)
===========================================================================
org.apache.commons.math3.ode.TestProblemHandler.init(double, double[], double):::ENTER
this.maxTimeError == 0.0
this.lastTime one of { 0.0, 4.0, 20.0 }
this.expectedStepStart one of { 4.0, 20.0, Double.NaN }
t0 == 0.0
size(y0[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math3.ode.TestProblemHandler.init(double, double[], double):::EXIT
this.problem == orig(this.problem)
this.problem.getClass().getName() == orig(this.problem.getClass().getName())
this.problem.n == orig(this.problem.n)
this.problem.calls == orig(this.problem.calls)
this.problem.t0 == orig(this.problem.t0)
this.problem.y0 == orig(this.problem.y0)
this.problem.y0[] == orig(this.problem.y0[])
this.problem.t1 == orig(this.problem.t1)
this.problem.errorScale == orig(this.problem.errorScale)
this.problem.errorScale[] == orig(this.problem.errorScale[])
this.maxTimeError == orig(this.maxTimeError)
this.lastTime == orig(this.lastTime)
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
y0[] == orig(y0[])
this.maxValueError == 0.0
this.maxTimeError == 0.0
this.lastError == 0.0
this.lastTime one of { 0.0, 4.0, 20.0 }
this.expectedStepStart == Double.NaN
this.maxValueError <= orig(this.maxValueError)
this.lastError <= orig(this.lastError)
this.lastError == orig(this.lastError)**2
this.expectedStepStart != orig(this.expectedStepStart)
===========================================================================
org.apache.commons.math3.ode.events.EventHandler$Action:::OBJECT
===========================================================================
org.apache.commons.math3.ode.events.EventHandler$Action.Action(java.lang.String, int):::ENTER
===========================================================================
org.apache.commons.math3.ode.events.EventHandler$Action.Action(java.lang.String, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
===========================================================================
org.apache.commons.math3.ode.events.EventState$1:::OBJECT
org.apache.commons.math3.ode.events.EventState.this.maxCheckInterval one of { 0.1, 1.0, Infinity }
org.apache.commons.math3.ode.events.EventState.this.t0 >= 0.0
org.apache.commons.math3.ode.events.EventState.this.previousEventTime >= 0.5000000000000008
org.apache.commons.math3.ode.events.EventState.this.forward == true
org.apache.commons.math3.ode.events.EventHandler$Action.STOP has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.RESET_STATE has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.RESET_DERIVATIVES has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.CONTINUE has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES.getClass().getName() == org.apache.commons.math3.ode.events.EventHandler$Action[].class
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[] contains no nulls and has only one value, of length 4
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[] elements != null
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[].getClass().getName() == [org.apache.commons.math3.ode.events.EventHandler.Action, org.apache.commons.math3.ode.events.EventHandler.Action, org.apache.commons.math3.ode.events.EventHandler.Action, org.apache.commons.math3.ode.events.EventHandler.Action]
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[].getClass().getName() elements == org.apache.commons.math3.ode.events.EventHandler.Action.class
size(org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[]) == 4
===========================================================================
org.apache.commons.math3.ode.events.EventState$1.(org.apache.commons.math3.ode.events.EventState, org.apache.commons.math3.ode.sampling.StepInterpolator):::ENTER
org.apache.commons.math3.ode.events.EventState.this.maxCheckInterval one of { 0.1, 1.0, Infinity }
org.apache.commons.math3.ode.events.EventState.this.t0 >= 0.0
org.apache.commons.math3.ode.events.EventState.this.previousEventTime >= 0.5000000000000008
org.apache.commons.math3.ode.events.EventState.this.forward == true
org.apache.commons.math3.ode.events.EventHandler$Action.STOP has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.RESET_STATE has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.RESET_DERIVATIVES has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.CONTINUE has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES.getClass().getName() == org.apache.commons.math3.ode.events.EventHandler$Action[].class
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[] contains no nulls and has only one value, of length 4
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[] elements != null
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[].getClass().getName() == [org.apache.commons.math3.ode.events.EventHandler.Action, org.apache.commons.math3.ode.events.EventHandler.Action, org.apache.commons.math3.ode.events.EventHandler.Action, org.apache.commons.math3.ode.events.EventHandler.Action]
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[].getClass().getName() elements == org.apache.commons.math3.ode.events.EventHandler.Action.class
size(org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[]) == 4
===========================================================================
org.apache.commons.math3.ode.events.EventState$1.(org.apache.commons.math3.ode.events.EventState, org.apache.commons.math3.ode.sampling.StepInterpolator):::EXIT
org.apache.commons.math3.ode.events.EventState.this == orig(org.apache.commons.math3.ode.events.EventState.this)
org.apache.commons.math3.ode.events.EventState.this.handler == orig(org.apache.commons.math3.ode.events.EventState.this.handler)
org.apache.commons.math3.ode.events.EventState.this.handler.getClass().getName() == orig(org.apache.commons.math3.ode.events.EventState.this.handler.getClass().getName())
org.apache.commons.math3.ode.events.EventState.this.maxCheckInterval == orig(org.apache.commons.math3.ode.events.EventState.this.maxCheckInterval)
org.apache.commons.math3.ode.events.EventState.this.convergence == orig(org.apache.commons.math3.ode.events.EventState.this.convergence)
org.apache.commons.math3.ode.events.EventState.this.maxIterationCount == orig(org.apache.commons.math3.ode.events.EventState.this.maxIterationCount)
org.apache.commons.math3.ode.events.EventState.this.t0 == orig(org.apache.commons.math3.ode.events.EventState.this.t0)
org.apache.commons.math3.ode.events.EventState.this.g0 == orig(org.apache.commons.math3.ode.events.EventState.this.g0)
org.apache.commons.math3.ode.events.EventState.this.g0Positive == orig(org.apache.commons.math3.ode.events.EventState.this.g0Positive)
org.apache.commons.math3.ode.events.EventState.this.pendingEvent == orig(org.apache.commons.math3.ode.events.EventState.this.pendingEvent)
org.apache.commons.math3.ode.events.EventState.this.forward == orig(org.apache.commons.math3.ode.events.EventState.this.forward)
org.apache.commons.math3.ode.events.EventState.this.increasing == orig(org.apache.commons.math3.ode.events.EventState.this.increasing)
org.apache.commons.math3.ode.events.EventState.this.nextAction == orig(org.apache.commons.math3.ode.events.EventState.this.nextAction)
org.apache.commons.math3.ode.events.EventHandler$Action.STOP == orig(org.apache.commons.math3.ode.events.EventHandler$Action.STOP)
org.apache.commons.math3.ode.events.EventHandler$Action.RESET_STATE == orig(org.apache.commons.math3.ode.events.EventHandler$Action.RESET_STATE)
org.apache.commons.math3.ode.events.EventHandler$Action.RESET_DERIVATIVES == orig(org.apache.commons.math3.ode.events.EventHandler$Action.RESET_DERIVATIVES)
org.apache.commons.math3.ode.events.EventHandler$Action.CONTINUE == orig(org.apache.commons.math3.ode.events.EventHandler$Action.CONTINUE)
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES == orig(org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES)
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES.getClass().getName() == orig(org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES.getClass().getName())
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[] == orig(org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[])
org.apache.commons.math3.ode.events.EventState.this.solver == orig(org.apache.commons.math3.ode.events.EventState.this.solver)
org.apache.commons.math3.ode.events.EventState.this.solver.getClass().getName() == orig(org.apache.commons.math3.ode.events.EventState.this.solver.getClass().getName())
===========================================================================
org.apache.commons.math3.ode.events.EventState$1.value(double):::ENTER
org.apache.commons.math3.ode.events.EventState.this.t0 >= 0.1111
org.apache.commons.math3.ode.events.EventState.this.nextAction has only one value
t >= 0.4111
===========================================================================
org.apache.commons.math3.ode.events.EventState$1.value(double):::EXIT
this.val$interpolator == orig(this.val$interpolator)
this.val$interpolator.getClass().getName() == orig(this.val$interpolator.getClass().getName())
org.apache.commons.math3.ode.events.EventState.this == orig(org.apache.commons.math3.ode.events.EventState.this)
org.apache.commons.math3.ode.events.EventState.this.handler == orig(org.apache.commons.math3.ode.events.EventState.this.handler)
org.apache.commons.math3.ode.events.EventState.this.handler.getClass().getName() == orig(org.apache.commons.math3.ode.events.EventState.this.handler.getClass().getName())
org.apache.commons.math3.ode.events.EventState.this.maxCheckInterval == orig(org.apache.commons.math3.ode.events.EventState.this.maxCheckInterval)
org.apache.commons.math3.ode.events.EventState.this.convergence == orig(org.apache.commons.math3.ode.events.EventState.this.convergence)
org.apache.commons.math3.ode.events.EventState.this.maxIterationCount == orig(org.apache.commons.math3.ode.events.EventState.this.maxIterationCount)
org.apache.commons.math3.ode.events.EventState.this.t0 == orig(org.apache.commons.math3.ode.events.EventState.this.t0)
org.apache.commons.math3.ode.events.EventState.this.g0 == orig(org.apache.commons.math3.ode.events.EventState.this.g0)
org.apache.commons.math3.ode.events.EventState.this.g0Positive == orig(org.apache.commons.math3.ode.events.EventState.this.g0Positive)
org.apache.commons.math3.ode.events.EventState.this.pendingEvent == orig(org.apache.commons.math3.ode.events.EventState.this.pendingEvent)
org.apache.commons.math3.ode.events.EventState.this.forward == orig(org.apache.commons.math3.ode.events.EventState.this.forward)
org.apache.commons.math3.ode.events.EventState.this.increasing == orig(org.apache.commons.math3.ode.events.EventState.this.increasing)
org.apache.commons.math3.ode.events.EventState.this.nextAction == orig(org.apache.commons.math3.ode.events.EventState.this.nextAction)
org.apache.commons.math3.ode.events.EventHandler$Action.STOP == orig(org.apache.commons.math3.ode.events.EventHandler$Action.STOP)
org.apache.commons.math3.ode.events.EventHandler$Action.RESET_STATE == orig(org.apache.commons.math3.ode.events.EventHandler$Action.RESET_STATE)
org.apache.commons.math3.ode.events.EventHandler$Action.RESET_DERIVATIVES == orig(org.apache.commons.math3.ode.events.EventHandler$Action.RESET_DERIVATIVES)
org.apache.commons.math3.ode.events.EventHandler$Action.CONTINUE == orig(org.apache.commons.math3.ode.events.EventHandler$Action.CONTINUE)
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES == orig(org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES)
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES.getClass().getName() == orig(org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES.getClass().getName())
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[] == orig(org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[])
org.apache.commons.math3.ode.events.EventState.this.solver == orig(org.apache.commons.math3.ode.events.EventState.this.solver)
org.apache.commons.math3.ode.events.EventState.this.solver.getClass().getName() == orig(org.apache.commons.math3.ode.events.EventState.this.solver.getClass().getName())
org.apache.commons.math3.ode.events.EventState.this.t0 >= 0.1111
org.apache.commons.math3.ode.events.EventState.this.nextAction has only one value
===========================================================================
org.apache.commons.math3.ode.events.EventState:::OBJECT
this.maxCheckInterval one of { 0.1, 1.0, Infinity }
this.convergence <= 9.374999999999999E-7
this.t0 >= 0.0
this.pendingEventTime >= 0.5000000000000008
this.previousEventTime >= 0.5000000000000008
org.apache.commons.math3.ode.events.EventHandler$Action.STOP has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.RESET_STATE has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.RESET_DERIVATIVES has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.CONTINUE has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES.getClass().getName() == org.apache.commons.math3.ode.events.EventHandler$Action[].class
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[] contains no nulls and has only one value, of length 4
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[] elements != null
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[].getClass().getName() == [org.apache.commons.math3.ode.events.EventHandler.Action, org.apache.commons.math3.ode.events.EventHandler.Action, org.apache.commons.math3.ode.events.EventHandler.Action, org.apache.commons.math3.ode.events.EventHandler.Action]
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[].getClass().getName() elements == org.apache.commons.math3.ode.events.EventHandler.Action.class
size(org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[]) == 4
===========================================================================
org.apache.commons.math3.ode.events.EventState.EventState(org.apache.commons.math3.ode.events.EventHandler, double, double, int, org.apache.commons.math3.analysis.solvers.UnivariateSolver):::ENTER
maxCheckInterval one of { 0.1, 1.0, Infinity }
===========================================================================
org.apache.commons.math3.ode.events.EventState.EventState(org.apache.commons.math3.ode.events.EventHandler, double, double, int, org.apache.commons.math3.analysis.solvers.UnivariateSolver):::EXIT
this.t0 == Double.NaN
this.g0 == Double.NaN
this.g0Positive == true
this.pendingEvent == false
this.pendingEventTime == Double.NaN
this.previousEventTime == Double.NaN
this.forward == false
this.increasing == true
this.nextAction has only one value
===========================================================================
org.apache.commons.math3.ode.events.EventState.evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator):::ENTER
===========================================================================
org.apache.commons.math3.ode.events.EventState.evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator):::EXIT268
this.maxIterationCount one of { 100, 999, 1000 }
this.t0 >= 0.1111
this.pendingEvent == true
this.nextAction has only one value
return == true
===========================================================================
org.apache.commons.math3.ode.events.EventState.evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator):::EXIT268;condition="return == true"
===========================================================================
org.apache.commons.math3.ode.events.EventState.evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator):::EXIT286
this.increasing == orig(this.increasing)
this.pendingEvent == false
this.pendingEventTime == Double.NaN
return == false
this.pendingEventTime != orig(this.pendingEventTime)
===========================================================================
org.apache.commons.math3.ode.events.EventState.evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator):::EXIT286;condition="not(return == true)"
===========================================================================
org.apache.commons.math3.ode.events.EventState.evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator):::EXIT
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.maxCheckInterval == orig(this.maxCheckInterval)
this.convergence == orig(this.convergence)
this.maxIterationCount == orig(this.maxIterationCount)
this.t0 == orig(this.t0)
this.g0 == orig(this.g0)
this.g0Positive == orig(this.g0Positive)
this.nextAction == orig(this.nextAction)
org.apache.commons.math3.ode.events.EventHandler$Action.STOP == orig(org.apache.commons.math3.ode.events.EventHandler$Action.STOP)
org.apache.commons.math3.ode.events.EventHandler$Action.RESET_STATE == orig(org.apache.commons.math3.ode.events.EventHandler$Action.RESET_STATE)
org.apache.commons.math3.ode.events.EventHandler$Action.RESET_DERIVATIVES == orig(org.apache.commons.math3.ode.events.EventHandler$Action.RESET_DERIVATIVES)
org.apache.commons.math3.ode.events.EventHandler$Action.CONTINUE == orig(org.apache.commons.math3.ode.events.EventHandler$Action.CONTINUE)
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES == orig(org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES)
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES.getClass().getName() == orig(org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES.getClass().getName())
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[] == orig(org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[])
this.solver == orig(this.solver)
this.solver.getClass().getName() == orig(this.solver.getClass().getName())
(this.pendingEvent == false)  <==>  (return == false)
(this.pendingEvent == false)  ==>  (this.increasing == orig(this.increasing))
(this.pendingEvent == false)  ==>  (this.pendingEventTime != orig(this.pendingEventTime))
(this.pendingEvent == false)  ==>  (this.pendingEventTime == Double.NaN)
(this.pendingEvent == false)  ==>  (this.t0 >= 0.0)
(this.pendingEvent == true)  <==>  (return == true)
(this.pendingEvent == true)  ==>  (this.maxIterationCount one of { 100, 999, 1000 })
(this.pendingEvent == true)  ==>  (this.nextAction has only one value)
(this.pendingEvent == true)  ==>  (this.t0 >= 0.1111)
this.forward == true
===========================================================================
org.apache.commons.math3.ode.events.EventState.evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator):::EXIT;condition="return == true"
this.maxIterationCount one of { 100, 999, 1000 }
this.t0 >= 0.1111
this.pendingEvent == true
this.nextAction has only one value
return == true
===========================================================================
org.apache.commons.math3.ode.events.EventState.evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator):::EXIT;condition="not(return == true)"
this.increasing == orig(this.increasing)
this.pendingEvent == false
this.pendingEventTime == Double.NaN
return == false
this.pendingEventTime != orig(this.pendingEventTime)
===========================================================================
org.apache.commons.math3.ode.events.EventState.getEventHandler():::ENTER
this.increasing == true
===========================================================================
org.apache.commons.math3.ode.events.EventState.getEventHandler():::EXIT
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.maxCheckInterval == orig(this.maxCheckInterval)
this.convergence == orig(this.convergence)
this.maxIterationCount == orig(this.maxIterationCount)
this.g0Positive == orig(this.g0Positive)
this.pendingEvent == orig(this.pendingEvent)
this.forward == orig(this.forward)
this.increasing == orig(this.increasing)
this.nextAction == orig(this.nextAction)
org.apache.commons.math3.ode.events.EventHandler$Action.STOP == orig(org.apache.commons.math3.ode.events.EventHandler$Action.STOP)
org.apache.commons.math3.ode.events.EventHandler$Action.RESET_STATE == orig(org.apache.commons.math3.ode.events.EventHandler$Action.RESET_STATE)
org.apache.commons.math3.ode.events.EventHandler$Action.RESET_DERIVATIVES == orig(org.apache.commons.math3.ode.events.EventHandler$Action.RESET_DERIVATIVES)
org.apache.commons.math3.ode.events.EventHandler$Action.CONTINUE == orig(org.apache.commons.math3.ode.events.EventHandler$Action.CONTINUE)
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES == orig(org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES)
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES.getClass().getName() == orig(org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES.getClass().getName())
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[] == orig(org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[])
this.solver == orig(this.solver)
this.solver.getClass().getName() == orig(this.solver.getClass().getName())
this.increasing == true
===========================================================================
org.apache.commons.math3.ode.events.EventState.getEventTime():::ENTER
this.maxIterationCount one of { 100, 999, 1000 }
this.t0 >= 0.1111
this.pendingEvent == true
this.forward == true
this.nextAction has only one value
===========================================================================
org.apache.commons.math3.ode.events.EventState.getEventTime():::EXIT
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.maxCheckInterval == orig(this.maxCheckInterval)
this.convergence == orig(this.convergence)
this.maxIterationCount == orig(this.maxIterationCount)
this.t0 == orig(this.t0)
this.g0 == orig(this.g0)
this.g0Positive == orig(this.g0Positive)
this.pendingEvent == orig(this.pendingEvent)
this.pendingEventTime == orig(this.pendingEventTime)
this.forward == orig(this.forward)
this.increasing == orig(this.increasing)
this.nextAction == orig(this.nextAction)
org.apache.commons.math3.ode.events.EventHandler$Action.STOP == orig(org.apache.commons.math3.ode.events.EventHandler$Action.STOP)
org.apache.commons.math3.ode.events.EventHandler$Action.RESET_STATE == orig(org.apache.commons.math3.ode.events.EventHandler$Action.RESET_STATE)
org.apache.commons.math3.ode.events.EventHandler$Action.RESET_DERIVATIVES == orig(org.apache.commons.math3.ode.events.EventHandler$Action.RESET_DERIVATIVES)
org.apache.commons.math3.ode.events.EventHandler$Action.CONTINUE == orig(org.apache.commons.math3.ode.events.EventHandler$Action.CONTINUE)
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES == orig(org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES)
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES.getClass().getName() == orig(org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES.getClass().getName())
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[] == orig(org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[])
this.solver == orig(this.solver)
this.solver.getClass().getName() == orig(this.solver.getClass().getName())
this.maxIterationCount one of { 100, 999, 1000 }
this.t0 >= 0.1111
this.pendingEvent == true
this.forward == true
this.nextAction has only one value
===========================================================================
org.apache.commons.math3.ode.events.EventState.reinitializeBegin(org.apache.commons.math3.ode.sampling.StepInterpolator):::ENTER
this.increasing == true
===========================================================================
org.apache.commons.math3.ode.events.EventState.reinitializeBegin(org.apache.commons.math3.ode.sampling.StepInterpolator):::EXIT
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.maxCheckInterval == orig(this.maxCheckInterval)
this.convergence == orig(this.convergence)
this.maxIterationCount == orig(this.maxIterationCount)
this.pendingEvent == orig(this.pendingEvent)
this.forward == orig(this.forward)
this.increasing == orig(this.increasing)
this.nextAction == orig(this.nextAction)
org.apache.commons.math3.ode.events.EventHandler$Action.STOP == orig(org.apache.commons.math3.ode.events.EventHandler$Action.STOP)
org.apache.commons.math3.ode.events.EventHandler$Action.RESET_STATE == orig(org.apache.commons.math3.ode.events.EventHandler$Action.RESET_STATE)
org.apache.commons.math3.ode.events.EventHandler$Action.RESET_DERIVATIVES == orig(org.apache.commons.math3.ode.events.EventHandler$Action.RESET_DERIVATIVES)
org.apache.commons.math3.ode.events.EventHandler$Action.CONTINUE == orig(org.apache.commons.math3.ode.events.EventHandler$Action.CONTINUE)
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES == orig(org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES)
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES.getClass().getName() == orig(org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES.getClass().getName())
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[] == orig(org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[])
this.solver == orig(this.solver)
this.solver.getClass().getName() == orig(this.solver.getClass().getName())
this.g0 <= 0.9320390859672263
this.increasing == true
===========================================================================
org.apache.commons.math3.ode.events.EventState.reset(double, double[]):::ENTER
this.maxIterationCount one of { 100, 1000 }
this.pendingEvent == true
this.forward == true
this.solver.getClass().getName() == org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver.class
size(y[]) one of { 1, 2, 3 }
===========================================================================
org.apache.commons.math3.ode.events.EventState.reset(double, double[]):::EXIT353
(this.convergence == 1.0E-20)  <==>  (orig(size(y[])) == 3)
(this.convergence == 1.0E-20)  <==>  (orig(t) == 1.8782503799999986E9)
(this.convergence == 1.0E-20)  <==>  (orig(this.pendingEventTime) == 1.8782503799999986E9)
(this.convergence == 1.0E-20)  <==>  (return == false)
(this.convergence == 1.0E-20)  <==>  (this.maxIterationCount == 100)
(this.convergence == 1.0E-20)  <==>  (this.previousEventTime == 1.8782503799999986E9)
(this.convergence == 1.0E-20)  <==>  (this.t0 == 1.8782503799999986E9)
(this.convergence == 1.0E-20)  ==>  (orig(y[]) elements one of { 1.006018035622264, 2.0012003599861283, 3.0001800053872327 })
(this.convergence == 1.0E-20)  ==>  (orig(y[]) one of { [1.006018035622264, 2.0012003599861283, 3.0001800053872327], [1.0060180356223287, 2.0012003599861283, 3.0001800053872327] })
(this.convergence == 1.0E-20)  ==>  (this.g0 == 0.0)
(this.convergence == 1.0E-20)  ==>  (this.g0Positive == true)
(this.convergence == 1.0E-20)  ==>  (this.increasing == true)
(this.convergence == 1.0E-20)  ==>  (this.maxCheckInterval == Infinity)
(this.convergence == 1.0E-20)  ==>  (this.nextAction has only one value)
(this.convergence == 1.0E-20)  ==>  (y[] == orig(y[]))
(this.convergence == 1.0E-20)  ==>  (y[] elements one of { 1.006018035622264, 2.0012003599861283, 3.0001800053872327 })
(this.convergence == 1.0E-20)  ==>  (y[] one of { [1.006018035622264, 2.0012003599861283, 3.0001800053872327], [1.0060180356223287, 2.0012003599861283, 3.0001800053872327] })
===========================================================================
org.apache.commons.math3.ode.events.EventState.reset(double, double[]):::EXIT353;condition="return == true"
===========================================================================
org.apache.commons.math3.ode.events.EventState.reset(double, double[]):::EXIT353;condition="not(return == true)"
===========================================================================
org.apache.commons.math3.ode.events.EventState.reset(double, double[]):::EXIT
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.maxCheckInterval == orig(this.maxCheckInterval)
this.convergence == orig(this.convergence)
this.maxIterationCount == orig(this.maxIterationCount)
this.t0 == orig(this.t0)
this.g0 == orig(this.g0)
this.g0Positive == orig(this.g0Positive)
this.previousEventTime == orig(this.previousEventTime)
this.forward == orig(this.forward)
this.increasing == orig(this.increasing)
this.nextAction == orig(this.nextAction)
org.apache.commons.math3.ode.events.EventHandler$Action.STOP == orig(org.apache.commons.math3.ode.events.EventHandler$Action.STOP)
org.apache.commons.math3.ode.events.EventHandler$Action.RESET_STATE == orig(org.apache.commons.math3.ode.events.EventHandler$Action.RESET_STATE)
org.apache.commons.math3.ode.events.EventHandler$Action.RESET_DERIVATIVES == orig(org.apache.commons.math3.ode.events.EventHandler$Action.RESET_DERIVATIVES)
org.apache.commons.math3.ode.events.EventHandler$Action.CONTINUE == orig(org.apache.commons.math3.ode.events.EventHandler$Action.CONTINUE)
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES == orig(org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES)
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES.getClass().getName() == orig(org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES.getClass().getName())
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[] == orig(org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[])
this.solver == orig(this.solver)
this.solver.getClass().getName() == orig(this.solver.getClass().getName())
(this.convergence == 1.0E-20)  <==>  (orig(size(y[])) == 3)
(this.convergence == 1.0E-20)  <==>  (orig(t) == 1.8782503799999986E9)
(this.convergence == 1.0E-20)  <==>  (orig(this.pendingEventTime) == 1.8782503799999986E9)
(this.convergence == 1.0E-20)  <==>  (return == false)
(this.convergence == 1.0E-20)  <==>  (this.maxIterationCount == 100)
(this.convergence == 1.0E-20)  <==>  (this.previousEventTime == 1.8782503799999986E9)
(this.convergence == 1.0E-20)  <==>  (this.t0 == 1.8782503799999986E9)
(this.convergence == 1.0E-20)  ==>  (orig(y[]) elements one of { 1.006018035622264, 2.0012003599861283, 3.0001800053872327 })
(this.convergence == 1.0E-20)  ==>  (orig(y[]) one of { [1.006018035622264, 2.0012003599861283, 3.0001800053872327], [1.0060180356223287, 2.0012003599861283, 3.0001800053872327] })
(this.convergence == 1.0E-20)  ==>  (this.g0 == 0.0)
(this.convergence == 1.0E-20)  ==>  (this.g0Positive == true)
(this.convergence == 1.0E-20)  ==>  (this.increasing == true)
(this.convergence == 1.0E-20)  ==>  (this.maxCheckInterval == Infinity)
(this.convergence == 1.0E-20)  ==>  (this.nextAction has only one value)
(this.convergence == 1.0E-20)  ==>  (y[] == orig(y[]))
(this.convergence == 1.0E-20)  ==>  (y[] elements one of { 1.006018035622264, 2.0012003599861283, 3.0001800053872327 })
(this.convergence == 1.0E-20)  ==>  (y[] one of { [1.006018035622264, 2.0012003599861283, 3.0001800053872327], [1.0060180356223287, 2.0012003599861283, 3.0001800053872327] })
this.maxIterationCount one of { 100, 1000 }
this.pendingEvent == false
this.pendingEventTime == Double.NaN
this.forward == true
this.solver.getClass().getName() == org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver.class
y[] sorted by <
this.pendingEventTime != orig(this.pendingEventTime)
y[] >= orig(y[]) (elementwise)
===========================================================================
org.apache.commons.math3.ode.events.EventState.reset(double, double[]):::EXIT;condition="return == true"
this.maxIterationCount == 1000
return == true
orig(y[]) sorted by >
orig(size(y[])) one of { 1, 2 }
===========================================================================
org.apache.commons.math3.ode.events.EventState.reset(double, double[]):::EXIT;condition="not(return == true)"
y[] == orig(y[])
this.maxCheckInterval == Infinity
this.convergence == 1.0E-20
this.maxIterationCount == 100
this.t0 == 1.8782503799999986E9
this.g0 == 0.0
this.g0Positive == true
this.previousEventTime == 1.8782503799999986E9
this.increasing == true
this.nextAction has only one value
y[] elements one of { 1.006018035622264, 2.0012003599861283, 3.0001800053872327 }
y[] one of { [1.006018035622264, 2.0012003599861283, 3.0001800053872327], [1.0060180356223287, 2.0012003599861283, 3.0001800053872327] }
return == false
orig(this.pendingEventTime) == 1.8782503799999986E9
orig(t) == 1.8782503799999986E9
orig(size(y[])) == 3
===========================================================================
org.apache.commons.math3.ode.events.EventState.stepAccepted(double, double[]):::ENTER
this.forward == true
t >= 9.999999999999999E-5
===========================================================================
org.apache.commons.math3.ode.events.EventState.stepAccepted(double, double[]):::EXIT
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.maxCheckInterval == orig(this.maxCheckInterval)
this.convergence == orig(this.convergence)
this.maxIterationCount == orig(this.maxIterationCount)
this.pendingEvent == orig(this.pendingEvent)
this.forward == orig(this.forward)
this.increasing == orig(this.increasing)
org.apache.commons.math3.ode.events.EventHandler$Action.STOP == orig(org.apache.commons.math3.ode.events.EventHandler$Action.STOP)
org.apache.commons.math3.ode.events.EventHandler$Action.RESET_STATE == orig(org.apache.commons.math3.ode.events.EventHandler$Action.RESET_STATE)
org.apache.commons.math3.ode.events.EventHandler$Action.RESET_DERIVATIVES == orig(org.apache.commons.math3.ode.events.EventHandler$Action.RESET_DERIVATIVES)
org.apache.commons.math3.ode.events.EventHandler$Action.CONTINUE == orig(org.apache.commons.math3.ode.events.EventHandler$Action.CONTINUE)
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES == orig(org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES)
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES.getClass().getName() == orig(org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES.getClass().getName())
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[] == orig(org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[])
this.solver == orig(this.solver)
this.solver.getClass().getName() == orig(this.solver.getClass().getName())
y[] == orig(y[])
this.t0 >= 9.999999999999999E-5
this.forward == true
this.t0 >= orig(this.t0)
===========================================================================
org.apache.commons.math3.ode.events.EventState.stop():::ENTER
this.t0 >= 9.999999999999999E-5
this.forward == true
===========================================================================
org.apache.commons.math3.ode.events.EventState.stop():::EXIT
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.maxCheckInterval == orig(this.maxCheckInterval)
this.convergence == orig(this.convergence)
this.maxIterationCount == orig(this.maxIterationCount)
this.t0 == orig(this.t0)
this.g0 == orig(this.g0)
this.g0Positive == orig(this.g0Positive)
this.pendingEvent == orig(this.pendingEvent)
this.forward == orig(this.forward)
this.increasing == orig(this.increasing)
this.nextAction == orig(this.nextAction)
org.apache.commons.math3.ode.events.EventHandler$Action.STOP == orig(org.apache.commons.math3.ode.events.EventHandler$Action.STOP)
org.apache.commons.math3.ode.events.EventHandler$Action.RESET_STATE == orig(org.apache.commons.math3.ode.events.EventHandler$Action.RESET_STATE)
org.apache.commons.math3.ode.events.EventHandler$Action.RESET_DERIVATIVES == orig(org.apache.commons.math3.ode.events.EventHandler$Action.RESET_DERIVATIVES)
org.apache.commons.math3.ode.events.EventHandler$Action.CONTINUE == orig(org.apache.commons.math3.ode.events.EventHandler$Action.CONTINUE)
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES == orig(org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES)
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES.getClass().getName() == orig(org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES.getClass().getName())
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[] == orig(org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[])
this.solver == orig(this.solver)
this.solver.getClass().getName() == orig(this.solver.getClass().getName())
(return == false)  ==>  (this.maxCheckInterval one of { 0.1, 1.0, Infinity })
(return == false)  ==>  (this.t0 >= 9.999999999999999E-5)
(return == true)  ==>  (this.g0 one of { 0.0, 1.0 })
(return == true)  ==>  (this.g0Positive == true)
(return == true)  ==>  (this.increasing == true)
(return == true)  ==>  (this.maxCheckInterval one of { 0.1, Infinity })
(return == true)  ==>  (this.maxIterationCount one of { 999, 1000 })
(return == true)  ==>  (this.nextAction has only one value)
(return == true)  ==>  (this.pendingEvent == true)
(return == true)  ==>  (this.pendingEventTime == orig(this.pendingEventTime))
(return == true)  ==>  (this.previousEventTime == orig(this.previousEventTime))
this.t0 >= 9.999999999999999E-5
this.forward == true
===========================================================================
org.apache.commons.math3.ode.events.EventState.stop():::EXIT;condition="return == true"
this.pendingEventTime == orig(this.pendingEventTime)
this.previousEventTime == orig(this.previousEventTime)
this.maxCheckInterval one of { 0.1, Infinity }
this.maxIterationCount one of { 999, 1000 }
this.g0 one of { 0.0, 1.0 }
this.g0Positive == true
this.pendingEvent == true
this.increasing == true
this.nextAction has only one value
return == true
===========================================================================
org.apache.commons.math3.ode.events.EventState.stop():::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.math3.ode.events.EventStateTest$2:::OBJECT
this has only one value
org.apache.commons.math3.ode.events.EventStateTest.this has only one value
===========================================================================
org.apache.commons.math3.ode.events.EventStateTest$2.(org.apache.commons.math3.ode.events.EventStateTest):::ENTER
org.apache.commons.math3.ode.events.EventStateTest.this has only one value
===========================================================================
org.apache.commons.math3.ode.events.EventStateTest$2.(org.apache.commons.math3.ode.events.EventStateTest):::EXIT
org.apache.commons.math3.ode.events.EventStateTest.this == orig(org.apache.commons.math3.ode.events.EventStateTest.this)
===========================================================================
org.apache.commons.math3.ode.events.EventStateTest$2.computeDerivatives(double, double[], double[]):::ENTER
y has only one value
yDot has only one value
yDot[] elements one of { 0.0, 1.0 }
yDot[] one of { [0.0], [1.0] }
size(y[]) == 1
size(yDot[]) == 1
===========================================================================
org.apache.commons.math3.ode.events.EventStateTest$2.computeDerivatives(double, double[], double[]):::EXIT
org.apache.commons.math3.ode.events.EventStateTest.this == orig(org.apache.commons.math3.ode.events.EventStateTest.this)
y[] == orig(y[])
yDot[] == [1.0]
yDot[] elements == 1.0
yDot[] >= orig(yDot[]) (elementwise)
===========================================================================
org.apache.commons.math3.ode.events.EventStateTest$2.getDimension():::ENTER
===========================================================================
org.apache.commons.math3.ode.events.EventStateTest$2.getDimension():::EXIT
org.apache.commons.math3.ode.events.EventStateTest.this == orig(org.apache.commons.math3.ode.events.EventStateTest.this)
return == 1
===========================================================================
org.apache.commons.math3.ode.events.EventStateTest$ResettingEvent:::CLASS
org.apache.commons.math3.ode.events.EventStateTest$ResettingEvent.lastTriggerTime one of { -Infinity, 10.99, 11.01 }
===========================================================================
org.apache.commons.math3.ode.events.EventStateTest$ResettingEvent:::OBJECT
this.tEvent one of { 10.99, 11.01 }
===========================================================================
org.apache.commons.math3.ode.events.EventStateTest$ResettingEvent.ResettingEvent(double):::ENTER
tEvent one of { 10.99, 11.01 }
===========================================================================
org.apache.commons.math3.ode.events.EventStateTest$ResettingEvent.ResettingEvent(double):::EXIT
org.apache.commons.math3.ode.events.EventStateTest$ResettingEvent.lastTriggerTime == -Infinity
===========================================================================
org.apache.commons.math3.ode.events.EventStateTest$ResettingEvent.eventOccurred(double, double[], boolean):::ENTER
org.apache.commons.math3.ode.events.EventStateTest$ResettingEvent.lastTriggerTime one of { -Infinity, 10.99 }
t one of { 10.99, 11.01 }
y[] elements one of { 10.989999999999995, 12.009999999999994 }
y[] one of { [10.989999999999995], [12.009999999999994] }
increasing == true
size(y[]) == 1
===========================================================================
org.apache.commons.math3.ode.events.EventStateTest$ResettingEvent.eventOccurred(double, double[], boolean):::EXIT
this.tEvent == orig(this.tEvent)
y[] == orig(y[])
org.apache.commons.math3.ode.events.EventStateTest$ResettingEvent.lastTriggerTime one of { 10.99, 11.01 }
y[] elements one of { 10.989999999999995, 12.009999999999994 }
y[] one of { [10.989999999999995], [12.009999999999994] }
return has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.STOP has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.RESET_STATE has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.RESET_DERIVATIVES has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.CONTINUE has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES.getClass().getName() == org.apache.commons.math3.ode.events.EventHandler$Action[].class
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[] contains no nulls and has only one value, of length 4
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[].getClass().getName() == [org.apache.commons.math3.ode.events.EventHandler.Action, org.apache.commons.math3.ode.events.EventHandler.Action, org.apache.commons.math3.ode.events.EventHandler.Action, org.apache.commons.math3.ode.events.EventHandler.Action]
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[].getClass().getName() elements == org.apache.commons.math3.ode.events.EventHandler.Action.class
size(org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[]) == 4
===========================================================================
org.apache.commons.math3.ode.events.EventStateTest$ResettingEvent.g(double, double[]):::ENTER
size(y[]) == 1
===========================================================================
org.apache.commons.math3.ode.events.EventStateTest$ResettingEvent.g(double, double[]):::EXIT
org.apache.commons.math3.ode.events.EventStateTest$ResettingEvent.lastTriggerTime == orig(org.apache.commons.math3.ode.events.EventStateTest$ResettingEvent.lastTriggerTime)
this.tEvent == orig(this.tEvent)
y[] == orig(y[])
===========================================================================
org.apache.commons.math3.ode.events.EventStateTest$ResettingEvent.init(double, double[], double):::ENTER
org.apache.commons.math3.ode.events.EventStateTest$ResettingEvent.lastTriggerTime == -Infinity
t0 == 0.0
y0 has only one value
y0[] == [0.0]
y0[] elements == 0.0
t == 30.0
size(y0[]) == 1
===========================================================================
org.apache.commons.math3.ode.events.EventStateTest$ResettingEvent.init(double, double[], double):::EXIT
org.apache.commons.math3.ode.events.EventStateTest$ResettingEvent.lastTriggerTime == orig(org.apache.commons.math3.ode.events.EventStateTest$ResettingEvent.lastTriggerTime)
this.tEvent == orig(this.tEvent)
y0[] == orig(y0[])
org.apache.commons.math3.ode.events.EventStateTest$ResettingEvent.lastTriggerTime == -Infinity
y0[] == [0.0]
y0[] elements == 0.0
===========================================================================
org.apache.commons.math3.ode.events.EventStateTest$ResettingEvent.resetState(double, double[]):::ENTER
org.apache.commons.math3.ode.events.EventStateTest$ResettingEvent.lastTriggerTime one of { 10.99, 11.01 }
t one of { 10.99, 11.01 }
y[] elements one of { 10.989999999999995, 12.009999999999994 }
y[] one of { [10.989999999999995], [12.009999999999994] }
size(y[]) == 1
===========================================================================
org.apache.commons.math3.ode.events.EventStateTest$ResettingEvent.resetState(double, double[]):::EXIT
org.apache.commons.math3.ode.events.EventStateTest$ResettingEvent.lastTriggerTime == orig(org.apache.commons.math3.ode.events.EventStateTest$ResettingEvent.lastTriggerTime)
this.tEvent == orig(this.tEvent)
org.apache.commons.math3.ode.events.EventStateTest$ResettingEvent.lastTriggerTime one of { 10.99, 11.01 }
y[] elements one of { 11.989999999999995, 13.009999999999994 }
y[] one of { [11.989999999999995], [13.009999999999994] }
===========================================================================
org.apache.commons.math3.ode.events.EventStateTest:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math3.ode.events.EventStateTest.EventStateTest():::EXIT
===========================================================================
org.apache.commons.math3.ode.events.EventStateTest.testIssue695():::ENTER
===========================================================================
org.apache.commons.math3.ode.events.EventStateTest.testIssue695():::EXIT
===========================================================================
org.apache.commons.math3.ode.events.OverlappingEventsTest$Event:::OBJECT
this.idx one of { 0, 1 }
this.eventType one of { 0, 1 }
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES1 has only one value
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES1[] == [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0]
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES1[] elements >= 1.0
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES1[] sorted by <
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES2 has only one value
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES2[] == [0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0, 8.5, 9.0, 9.5]
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES2[] elements >= 0.5
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES2[] sorted by <
size(org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES1[]) == 9
size(org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES2[]) == 19
===========================================================================
org.apache.commons.math3.ode.events.OverlappingEventsTest$Event.Event(org.apache.commons.math3.ode.events.OverlappingEventsTest, int, int):::ENTER
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES1 has only one value
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES1[] == [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0]
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES1[] elements >= 1.0
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES2 has only one value
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES2[] == [0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0, 8.5, 9.0, 9.5]
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES2[] elements >= 0.5
idx one of { 0, 1 }
eventType one of { 0, 1 }
size(org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES1[]) == 9
size(org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES2[]) == 19
===========================================================================
org.apache.commons.math3.ode.events.OverlappingEventsTest$Event.Event(org.apache.commons.math3.ode.events.OverlappingEventsTest, int, int):::EXIT
org.apache.commons.math3.ode.events.OverlappingEventsTest.this == orig(org.apache.commons.math3.ode.events.OverlappingEventsTest.this)
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES1 == orig(org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES1)
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES1[] == orig(org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES1[])
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES2 == orig(org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES2)
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES2[] == orig(org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES2[])
===========================================================================
org.apache.commons.math3.ode.events.OverlappingEventsTest$Event.eventOccurred(double, double[], boolean):::ENTER
y[] sorted by <=
increasing == true
size(y[]) == 2
===========================================================================
org.apache.commons.math3.ode.events.OverlappingEventsTest$Event.eventOccurred(double, double[], boolean):::EXIT
this.idx == orig(this.idx)
this.eventType == orig(this.eventType)
org.apache.commons.math3.ode.events.OverlappingEventsTest.this == orig(org.apache.commons.math3.ode.events.OverlappingEventsTest.this)
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES1 == orig(org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES1)
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES1[] == orig(org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES1[])
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES2 == orig(org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES2)
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES2[] == orig(org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES2[])
y[] == orig(y[])
y[] sorted by <=
return has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.STOP has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.RESET_STATE has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.RESET_DERIVATIVES has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.CONTINUE has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES.getClass().getName() == org.apache.commons.math3.ode.events.EventHandler$Action[].class
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[] contains no nulls and has only one value, of length 4
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[] elements != null
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[].getClass().getName() == [org.apache.commons.math3.ode.events.EventHandler.Action, org.apache.commons.math3.ode.events.EventHandler.Action, org.apache.commons.math3.ode.events.EventHandler.Action, org.apache.commons.math3.ode.events.EventHandler.Action]
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[].getClass().getName() elements == org.apache.commons.math3.ode.events.EventHandler.Action.class
size(org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[]) == 4
===========================================================================
org.apache.commons.math3.ode.events.OverlappingEventsTest$Event.g(double, double[]):::ENTER
size(y[]) == 2
===========================================================================
org.apache.commons.math3.ode.events.OverlappingEventsTest$Event.g(double, double[]):::EXIT
this.idx == orig(this.idx)
this.eventType == orig(this.eventType)
org.apache.commons.math3.ode.events.OverlappingEventsTest.this == orig(org.apache.commons.math3.ode.events.OverlappingEventsTest.this)
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES1 == orig(org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES1)
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES1[] == orig(org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES1[])
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES2 == orig(org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES2)
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES2[] == orig(org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES2[])
y[] == orig(y[])
return <= 1.0
return >= -1.0
===========================================================================
org.apache.commons.math3.ode.events.OverlappingEventsTest$Event.init(double, double[], double):::ENTER
y0[] elements one of { 0.0, 0.5000000000000004, 0.9999999999999991 }
t == 10.0
size(y0[]) == 2
===========================================================================
org.apache.commons.math3.ode.events.OverlappingEventsTest$Event.init(double, double[], double):::EXIT
this.idx == orig(this.idx)
this.eventType == orig(this.eventType)
org.apache.commons.math3.ode.events.OverlappingEventsTest.this == orig(org.apache.commons.math3.ode.events.OverlappingEventsTest.this)
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES1 == orig(org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES1)
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES1[] == orig(org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES1[])
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES2 == orig(org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES2)
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES2[] == orig(org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES2[])
y0[] == orig(y0[])
y0[] elements one of { 0.0, 0.5000000000000004, 0.9999999999999991 }
===========================================================================
org.apache.commons.math3.ode.events.OverlappingEventsTest:::CLASS
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES1 has only one value
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES1[] == [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0]
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES1[] elements >= 1.0
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES1[] sorted by <
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES2 has only one value
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES2[] == [0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0, 8.5, 9.0, 9.5]
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES2[] elements >= 0.5
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES2[] sorted by <
size(org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES1[]) == 9
size(org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES2[]) == 19
===========================================================================
org.apache.commons.math3.ode.events.OverlappingEventsTest:::OBJECT
===========================================================================
org.apache.commons.math3.ode.events.OverlappingEventsTest.OverlappingEventsTest():::EXIT
===========================================================================
org.apache.commons.math3.ode.events.OverlappingEventsTest.computeDerivatives(double, double[], double[]):::ENTER
yDot[] elements one of { 0.0, 1.0, 2.0 }
yDot[] one of { [0.0, 0.0], [1.0, 2.0] }
yDot[] sorted by <=
size(y[]) == 2
size(yDot[]) == 2
===========================================================================
org.apache.commons.math3.ode.events.OverlappingEventsTest.computeDerivatives(double, double[], double[]):::EXIT
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES1 == orig(org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES1)
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES1[] == orig(org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES1[])
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES2 == orig(org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES2)
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES2[] == orig(org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES2[])
y[] == orig(y[])
yDot[] == [1.0, 2.0]
yDot[] elements one of { 1.0, 2.0 }
yDot[] sorted by <
yDot[] >= orig(yDot[]) (elementwise)
===========================================================================
org.apache.commons.math3.ode.events.OverlappingEventsTest.getDimension():::ENTER
===========================================================================
org.apache.commons.math3.ode.events.OverlappingEventsTest.getDimension():::EXIT
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES1 == orig(org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES1)
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES1[] == orig(org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES1[])
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES2 == orig(org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES2)
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES2[] == orig(org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES2[])
return == 2
===========================================================================
org.apache.commons.math3.ode.events.OverlappingEventsTest.test(int):::ENTER
eventType one of { 0, 1 }
===========================================================================
org.apache.commons.math3.ode.events.OverlappingEventsTest.test(int):::EXIT
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES1 == orig(org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES1)
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES1[] == orig(org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES1[])
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES2 == orig(org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES2)
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES2[] == orig(org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES2[])
===========================================================================
org.apache.commons.math3.ode.events.OverlappingEventsTest.testOverlappingEvents0():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.events.OverlappingEventsTest.testOverlappingEvents0():::EXIT
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES1 == orig(org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES1)
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES1[] == orig(org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES1[])
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES2 == orig(org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES2)
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES2[] == orig(org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES2[])
===========================================================================
org.apache.commons.math3.ode.events.OverlappingEventsTest.testOverlappingEvents1():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.events.OverlappingEventsTest.testOverlappingEvents1():::EXIT
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES1 == orig(org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES1)
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES1[] == orig(org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES1[])
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES2 == orig(org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES2)
org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES2[] == orig(org.apache.commons.math3.ode.events.OverlappingEventsTest.EVENT_TIMES2[])
===========================================================================
org.apache.commons.math3.ode.events.ReappearingEventTest$Event:::OBJECT
===========================================================================
org.apache.commons.math3.ode.events.ReappearingEventTest$Event.Event():::EXIT
===========================================================================
org.apache.commons.math3.ode.events.ReappearingEventTest$Event.g(double, double[]):::ENTER
size(y[]) == 7
===========================================================================
org.apache.commons.math3.ode.events.ReappearingEventTest$Event.g(double, double[]):::EXIT
y[] == orig(y[])
===========================================================================
org.apache.commons.math3.ode.events.ReappearingEventTest$Event.init(double, double[], double):::ENTER
t0 == 6.0
y0[] == [2.0, 2.0, 2.0, 4.0, 2.0, 7.0, 15.0]
y0[] elements >= 2.0
t == 10.0
size(y0[]) == 7
===========================================================================
org.apache.commons.math3.ode.events.ReappearingEventTest$Event.init(double, double[], double):::EXIT
y0[] == orig(y0[])
y0[] == [2.0, 2.0, 2.0, 4.0, 2.0, 7.0, 15.0]
y0[] elements >= 2.0
===========================================================================
org.apache.commons.math3.ode.events.ReappearingEventTest$Ode:::OBJECT
===========================================================================
org.apache.commons.math3.ode.events.ReappearingEventTest$Ode.Ode():::EXIT
===========================================================================
org.apache.commons.math3.ode.events.ReappearingEventTest$Ode.computeDerivatives(double, double[], double[]):::ENTER
yDot[] elements one of { 0.0, 1.0 }
yDot[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0] }
yDot[] sorted by ==
size(y[]) == 7
size(yDot[]) == 7
===========================================================================
org.apache.commons.math3.ode.events.ReappearingEventTest$Ode.computeDerivatives(double, double[], double[]):::EXIT
y[] == orig(y[])
yDot[] == [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
yDot[] elements == 1.0
yDot[] >= orig(yDot[]) (elementwise)
===========================================================================
org.apache.commons.math3.ode.events.ReappearingEventTest$Ode.getDimension():::ENTER
===========================================================================
org.apache.commons.math3.ode.events.ReappearingEventTest$Ode.getDimension():::EXIT
return == 7
===========================================================================
org.apache.commons.math3.ode.events.ReappearingEventTest:::OBJECT
===========================================================================
org.apache.commons.math3.ode.events.ReappearingEventTest.ReappearingEventTest():::EXIT
===========================================================================
org.apache.commons.math3.ode.events.ReappearingEventTest.test(int):::ENTER
integratorType one of { 1, 2 }
===========================================================================
org.apache.commons.math3.ode.events.ReappearingEventTest.test(int):::EXIT
return == 10.0
===========================================================================
org.apache.commons.math3.ode.events.ReappearingEventTest.testDormandPrince():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.events.ReappearingEventTest.testDormandPrince():::EXIT
===========================================================================
org.apache.commons.math3.ode.events.ReappearingEventTest.testGragg():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.events.ReappearingEventTest.testGragg():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator:::CLASS
org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator.METHOD_NAME has only one value
org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator.METHOD_NAME.toString == "Adams-Bashforth"
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator:::OBJECT
org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE has only one value
org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName() == java.util.HashMap.class
this.transformer.update.data.getClass().getName() == double[][].class
this.transformer.update.data[] elements != null
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT has only one value
this.transformer.c1[] sorted by <
this.nordsieck.data.getClass().getName() == double[][].class
this.nordsieck.data[] elements != null
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == "{"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == "}"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == "{"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == "}"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == ","
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == ","
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == "{"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == "}"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == "{"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == "}"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == ","
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == ","
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == java.text.DecimalFormat.class
this.starter.getClass().getName() == org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.class
this.safety == 0.9
this.minReduction == 0.2
this.vecAbsoluteTolerance == null
this.vecRelativeTolerance == null
this.mainSetDimension >= 0
this.initialStep == -1.0
this.minStep one of { 0.0, 1.0E-6 }
this.maxStep one of { 0.1, 1.0, 4.0 }
this.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 3.1622776601683794E-4 }
this.resetOccurred == false
this.eventsStates.getClass().getName() == java.util.ArrayList.class
this.name has only one value
this.name.toString == "Adams-Bashforth"
this.evaluations.maximalCount == 2147483647
this.evaluations.count >= 0
this.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
this.expandable.primaryMapper.firstIndex == 0
this.expandable.primaryMapper.dimension one of { 1, 2, 4 }
this.expandable.components[] == []
this.expandable.components[].getClass().getName() == []
this.expandable.components.getClass().getName() == java.util.ArrayList.class
size(this.scaled[]) one of { 1, 2, 4 }
size(this.expandable.primaryState[]) one of { 1, 2, 4 }
size(this.expandable.primaryStateDot[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator.AdamsBashforthIntegrator(int, double, double, double, double):::ENTER
minStep one of { 0.0, 1.0E-6 }
maxStep one of { 0.1, 1.0, 4.0 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator.AdamsBashforthIntegrator(int, double, double, double, double):::EXIT
this.scaled == null
this.nordsieck == null
this.mainSetDimension == 0
this.isLastStep == false
this.statesInitialized == false
this.evaluations.count == 0
this.expandable == null
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator.integrate(org.apache.commons.math3.ode.ExpandableStatefulODE, double):::ENTER
this.scaled == null
this.nordsieck == null
this.mainSetDimension == 0
this.isLastStep == false
this.statesInitialized == false
this.evaluations.count == 0
this.expandable == null
equations.primaryMapper.firstIndex == 0
equations.primaryMapper.dimension one of { 1, 2, 4 }
equations.time == 0.0
equations.primaryState[] one of { [-360.0], [0.9, 0.0, 0.0, 1.1055415967851334], [1.0, 0.1] }
equations.primaryStateDot[] elements == 0.0
equations.primaryStateDot[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
equations.components[] == []
equations.components[].getClass().getName() == []
equations.components.getClass().getName() == java.util.ArrayList.class
size(equations.primaryState[]) one of { 1, 2, 4 }
size(equations.primaryStateDot[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator.integrate(org.apache.commons.math3.ode.ExpandableStatefulODE, double):::EXIT
org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator.METHOD_NAME == orig(org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator.METHOD_NAME)
org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator.METHOD_NAME.toString == orig(org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator.METHOD_NAME.toString)
this.transformer == orig(this.transformer)
org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE == orig(org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE)
org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName() == orig(org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName())
this.transformer.update == orig(this.transformer.update)
this.transformer.update.data == orig(this.transformer.update.data)
this.transformer.update.data.getClass().getName() == orig(this.transformer.update.data.getClass().getName())
this.transformer.update.data[] == orig(this.transformer.update.data[])
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
this.transformer.c1 == orig(this.transformer.c1)
this.transformer.c1[] == orig(this.transformer.c1[])
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
this.starter == orig(this.starter)
this.starter.getClass().getName() == orig(this.starter.getClass().getName())
this.nSteps == orig(this.nSteps)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.minReduction == orig(this.minReduction)
this.maxGrowth == orig(this.maxGrowth)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepSize == orig(this.stepSize)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
equations.primary == orig(equations.primary)
equations.primary.getClass().getName() == orig(equations.primary.getClass().getName())
equations.primaryMapper == orig(equations.primaryMapper)
equations.primaryMapper.firstIndex == orig(equations.primaryMapper.firstIndex)
equations.primaryMapper.dimension == orig(equations.primaryMapper.dimension)
equations.primaryState == orig(equations.primaryState)
equations.primaryStateDot == orig(equations.primaryStateDot)
equations.components == orig(equations.components)
equations.components[] == orig(equations.components[])
equations.components.getClass().getName() == orig(equations.components.getClass().getName())
size(equations.primaryState[]) == orig(size(equations.primaryState[]))
size(equations.primaryStateDot[]) == orig(size(equations.primaryStateDot[]))
this.mainSetDimension one of { 1, 2, 4 }
this.isLastStep == true
this.statesInitialized == true
equations.primaryMapper.firstIndex == 0
equations.primaryMapper.dimension one of { 1, 2, 4 }
equations.components[] == []
equations.components[].getClass().getName() == []
equations.components.getClass().getName() == java.util.ArrayList.class
size(equations.primaryState[]) one of { 1, 2, 4 }
size(equations.primaryStateDot[]) one of { 1, 2, 4 }
this.mainSetDimension > orig(this.mainSetDimension)
orig(this.evaluations.count) % this.evaluations.count == 0
this.evaluations.count > orig(this.evaluations.count)
equations.time != orig(equations.time)
orig(equations.time) % equations.time == 0
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegratorTest:::OBJECT
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegratorTest.AdamsBashforthIntegratorTest():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegratorTest.backward():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegratorTest.backward():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegratorTest.polynomial():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegratorTest.polynomial():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegratorTest.testIncreasingTolerance():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegratorTest.testIncreasingTolerance():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsIntegrator:::OBJECT
org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE has only one value
org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName() == java.util.HashMap.class
this.transformer.update.data.getClass().getName() == double[][].class
this.transformer.update.data[] elements != null
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT has only one value
this.transformer.c1[] sorted by <
this.nordsieck.data.getClass().getName() == double[][].class
this.nordsieck.data[] elements != null
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == "{"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == "}"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == "{"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == "}"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == ","
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == ","
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == "{"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == "}"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == "{"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == "}"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == ","
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == ","
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == java.text.DecimalFormat.class
this.starter.getClass().getName() == org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.class
this.nSteps >= 2
this.exp >= -0.5
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth <= 1.4142135623730951
this.scalAbsoluteTolerance >= 1.0E-12
this.scalRelativeTolerance >= 1.0000000000000006E-14
this.vecAbsoluteTolerance == null
this.vecRelativeTolerance == null
this.mainSetDimension >= 0
this.initialStep == -1.0
this.minStep one of { 0.0, 1.0E-6 }
this.maxStep one of { 0.1, 1.0, 4.0 }
this.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.isLastStep == false
this.resetOccurred == false
this.eventsStates.getClass().getName() == java.util.ArrayList.class
this.name.toString one of { "Adams-Bashforth", "Adams-Moulton" }
this.evaluations.maximalCount one of { 650, 2147483647 }
this.evaluations.count >= 0
this.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
this.expandable.primaryMapper.firstIndex == 0
this.expandable.primaryMapper.dimension one of { 1, 2, 4 }
this.expandable.time == 0.0
this.expandable.primaryState[] elements != 0
this.expandable.primaryStateDot[] elements != 0
this.expandable.components[] == []
this.expandable.components[].getClass().getName() == []
this.expandable.components.getClass().getName() == java.util.ArrayList.class
size(this.transformer.update.data[]) >= 2
size(this.transformer.c1[]) >= 2
size(this.scaled[]) one of { 1, 2, 4 }
size(this.nordsieck.data[]) >= 2
size(this.expandable.primaryState[]) one of { 1, 2, 4 }
size(this.expandable.primaryStateDot[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsIntegrator.AdamsIntegrator(java.lang.String, int, int, double, double, double, double):::ENTER
name.toString one of { "Adams-Bashforth", "Adams-Moulton" }
minStep one of { 0.0, 1.0E-6 }
maxStep one of { 0.1, 1.0, 4.0 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsIntegrator.AdamsIntegrator(java.lang.String, int, int, double, double, double, double):::EXIT
name.toString == orig(name.toString)
this.scaled == null
this.nordsieck == null
this.mainSetDimension == 0
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 3.1622776601683794E-4 }
this.statesInitialized == false
this.evaluations.maximalCount == 2147483647
this.evaluations.count == 0
this.expandable == null
name.toString one of { "Adams-Bashforth", "Adams-Moulton" }
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsIntegrator.initializeHighOrderDerivatives(double, double[], double[][], double[][]):::ENTER
this.nordsieck == null
this.mainSetDimension one of { 1, 2, 4 }
this.stepStart == 0.0
this.statesInitialized == false
y.getClass().getName() == double[][].class
y[] elements != null
yDot.getClass().getName() == double[][].class
yDot[] elements != null
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsIntegrator.initializeHighOrderDerivatives(double, double[], double[][], double[][]):::EXIT
this.transformer == orig(this.transformer)
org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE == orig(org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE)
org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName() == orig(org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName())
this.transformer.update == orig(this.transformer.update)
this.transformer.update.data == orig(this.transformer.update.data)
this.transformer.update.data.getClass().getName() == orig(this.transformer.update.data.getClass().getName())
this.transformer.update.data[] == orig(this.transformer.update.data[])
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
this.transformer.c1 == orig(this.transformer.c1)
this.transformer.c1[] == orig(this.transformer.c1[])
this.scaled == orig(this.scaled)
this.scaled[] == orig(this.scaled[])
this.nordsieck == orig(this.nordsieck)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
this.starter == orig(this.starter)
this.starter.getClass().getName() == orig(this.starter.getClass().getName())
this.nSteps == orig(this.nSteps)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.minReduction == orig(this.minReduction)
this.maxGrowth == orig(this.maxGrowth)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.mainSetDimension == orig(this.mainSetDimension)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
this.expandable.primary == orig(this.expandable.primary)
this.expandable.primary.getClass().getName() == orig(this.expandable.primary.getClass().getName())
this.expandable.primaryMapper == orig(this.expandable.primaryMapper)
this.expandable.primaryMapper.firstIndex == orig(this.expandable.primaryMapper.firstIndex)
this.expandable.primaryMapper.dimension == orig(this.expandable.primaryMapper.dimension)
this.expandable.time == orig(this.expandable.time)
this.expandable.primaryState == orig(this.expandable.primaryState)
this.expandable.primaryState[] == orig(this.expandable.primaryState[])
this.expandable.primaryStateDot == orig(this.expandable.primaryStateDot)
this.expandable.primaryStateDot[] == orig(this.expandable.primaryStateDot[])
this.expandable.components == orig(this.expandable.components)
this.expandable.components[] == orig(this.expandable.components[])
this.expandable.components.getClass().getName() == orig(this.expandable.components.getClass().getName())
t[] == orig(t[])
y[] == orig(y[])
yDot[] == orig(yDot[])
this.nordsieck == null
this.mainSetDimension one of { 1, 2, 4 }
this.stepStart == 0.0
this.statesInitialized == false
y[] elements != null
yDot[] elements != null
return.data.getClass().getName() == double[][].class
return.data[] elements != null
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsIntegrator.updateHighOrderDerivativesPhase1(org.apache.commons.math3.linear.Array2DRowRealMatrix):::ENTER
this.mainSetDimension one of { 1, 2, 4 }
highOrder.data.getClass().getName() == double[][].class
highOrder.data[] elements != null
size(highOrder.data[]) >= 2
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsIntegrator.updateHighOrderDerivativesPhase1(org.apache.commons.math3.linear.Array2DRowRealMatrix):::EXIT
this.transformer == orig(this.transformer)
org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE == orig(org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE)
org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName() == orig(org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName())
this.transformer.update == orig(this.transformer.update)
this.transformer.update.data == orig(this.transformer.update.data)
this.transformer.update.data.getClass().getName() == orig(this.transformer.update.data.getClass().getName())
this.transformer.update.data[] == orig(this.transformer.update.data[])
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
this.transformer.c1 == orig(this.transformer.c1)
this.transformer.c1[] == orig(this.transformer.c1[])
this.scaled == orig(this.scaled)
this.scaled[] == orig(this.scaled[])
this.nordsieck == orig(this.nordsieck)
this.nordsieck.data == orig(this.nordsieck.data)
this.nordsieck.data.getClass().getName() == orig(this.nordsieck.data.getClass().getName())
this.nordsieck.data[] == orig(this.nordsieck.data[])
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
this.starter == orig(this.starter)
this.starter.getClass().getName() == orig(this.starter.getClass().getName())
this.nSteps == orig(this.nSteps)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.minReduction == orig(this.minReduction)
this.maxGrowth == orig(this.maxGrowth)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.mainSetDimension == orig(this.mainSetDimension)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
this.expandable.primary == orig(this.expandable.primary)
this.expandable.primary.getClass().getName() == orig(this.expandable.primary.getClass().getName())
this.expandable.primaryMapper == orig(this.expandable.primaryMapper)
this.expandable.primaryMapper.firstIndex == orig(this.expandable.primaryMapper.firstIndex)
this.expandable.primaryMapper.dimension == orig(this.expandable.primaryMapper.dimension)
this.expandable.time == orig(this.expandable.time)
this.expandable.primaryState == orig(this.expandable.primaryState)
this.expandable.primaryState[] == orig(this.expandable.primaryState[])
this.expandable.primaryStateDot == orig(this.expandable.primaryStateDot)
this.expandable.primaryStateDot[] == orig(this.expandable.primaryStateDot[])
this.expandable.components == orig(this.expandable.components)
this.expandable.components[] == orig(this.expandable.components[])
this.expandable.components.getClass().getName() == orig(this.expandable.components.getClass().getName())
highOrder.data == orig(highOrder.data)
highOrder.data.getClass().getName() == orig(highOrder.data.getClass().getName())
highOrder.data[] == orig(highOrder.data[])
this.mainSetDimension one of { 1, 2, 4 }
highOrder.data.getClass().getName() == double[][].class
highOrder.data[] elements != null
return.data.getClass().getName() == double[][].class
return.data[] elements != null
size(highOrder.data[]) >= 2
size(return.data[]) >= 2
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsIntegrator.updateHighOrderDerivativesPhase2(double[], double[], org.apache.commons.math3.linear.Array2DRowRealMatrix):::ENTER
this.mainSetDimension one of { 1, 2, 4 }
end[] elements != 0
highOrder.data.getClass().getName() == double[][].class
highOrder.data[] elements != null
size(start[]) one of { 1, 2, 4 }
size(end[]) one of { 1, 2, 4 }
size(highOrder.data[]) >= 2
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsIntegrator.updateHighOrderDerivativesPhase2(double[], double[], org.apache.commons.math3.linear.Array2DRowRealMatrix):::EXIT
this.transformer == orig(this.transformer)
org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE == orig(org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE)
org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName() == orig(org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName())
this.transformer.update == orig(this.transformer.update)
this.transformer.update.data == orig(this.transformer.update.data)
this.transformer.update.data.getClass().getName() == orig(this.transformer.update.data.getClass().getName())
this.transformer.update.data[] == orig(this.transformer.update.data[])
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
this.transformer.c1 == orig(this.transformer.c1)
this.transformer.c1[] == orig(this.transformer.c1[])
this.scaled == orig(this.scaled)
this.scaled[] == orig(this.scaled[])
this.nordsieck == orig(this.nordsieck)
this.nordsieck.data == orig(this.nordsieck.data)
this.nordsieck.data.getClass().getName() == orig(this.nordsieck.data.getClass().getName())
this.nordsieck.data[] == orig(this.nordsieck.data[])
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
this.starter == orig(this.starter)
this.starter.getClass().getName() == orig(this.starter.getClass().getName())
this.nSteps == orig(this.nSteps)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.minReduction == orig(this.minReduction)
this.maxGrowth == orig(this.maxGrowth)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.mainSetDimension == orig(this.mainSetDimension)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
this.expandable.primary == orig(this.expandable.primary)
this.expandable.primary.getClass().getName() == orig(this.expandable.primary.getClass().getName())
this.expandable.primaryMapper == orig(this.expandable.primaryMapper)
this.expandable.primaryMapper.firstIndex == orig(this.expandable.primaryMapper.firstIndex)
this.expandable.primaryMapper.dimension == orig(this.expandable.primaryMapper.dimension)
this.expandable.time == orig(this.expandable.time)
this.expandable.primaryState == orig(this.expandable.primaryState)
this.expandable.primaryState[] == orig(this.expandable.primaryState[])
this.expandable.primaryStateDot == orig(this.expandable.primaryStateDot)
this.expandable.primaryStateDot[] == orig(this.expandable.primaryStateDot[])
this.expandable.components == orig(this.expandable.components)
this.expandable.components[] == orig(this.expandable.components[])
this.expandable.components.getClass().getName() == orig(this.expandable.components.getClass().getName())
start[] == orig(start[])
end[] == orig(end[])
highOrder.data == orig(highOrder.data)
highOrder.data.getClass().getName() == orig(highOrder.data.getClass().getName())
highOrder.data[] == orig(highOrder.data[])
this.mainSetDimension one of { 1, 2, 4 }
end[] elements != 0
highOrder.data.getClass().getName() == double[][].class
highOrder.data[] elements != null
size(highOrder.data[]) >= 2
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator$Corrector:::OBJECT
this.previous[] elements != 0
this.previous[] sorted by >
this.scaled[] elements != 0
this.before[] elements != 0
this.before[] sorted by >
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.METHOD_NAME has only one value
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.METHOD_NAME.toString == "Adams-Moulton"
org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE has only one value
org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName() == java.util.HashMap.class
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.c1[] sorted by <
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.scaled[] elements != 0
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data.getClass().getName() == double[][].class
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data[] elements != null
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT has only one value
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.starter.getClass().getName() == org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.class
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.nSteps >= 2
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.exp >= -0.3333333333333333
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.safety == 0.9
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.minReduction == 0.2
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.maxGrowth <= 1.2599210498948732
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.scalAbsoluteTolerance >= 1.0E-12
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.scalRelativeTolerance >= 1.0000000000000006E-14
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.vecAbsoluteTolerance == null
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.vecRelativeTolerance == null
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.mainSetDimension one of { 1, 2 }
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.initialStep == -1.0
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.minStep one of { 0.0, 1.0E-6 }
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.maxStep one of { 0.1, 4.0 }
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.stepHandlers.getClass().getName() == java.util.ArrayList.class
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.isLastStep == false
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.resetOccurred == false
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.eventsStates.getClass().getName() == java.util.ArrayList.class
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.name has only one value
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.name.toString == "Adams-Moulton"
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.evaluations.maximalCount one of { 650, 2147483647 }
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.time == 0.0
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primaryState[] elements != 0
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primaryState[] sorted by >
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primaryStateDot[] elements != 0
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primaryStateDot[] sorted by <
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.components[] == []
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.components[].getClass().getName() == []
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.components.getClass().getName() == java.util.ArrayList.class
size(this.previous[]) one of { 1, 2 }
size(this.scaled[]) one of { 1, 2 }
size(this.before[]) one of { 1, 2 }
size(this.after[]) one of { 1, 2 }
size(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.c1[]) >= 2
size(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.scaled[]) one of { 1, 2 }
size(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data[]) >= 2
size(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primaryState[]) one of { 1, 2 }
size(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primaryStateDot[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator$Corrector.Corrector(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator, double[], double[], double[]):::ENTER
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.METHOD_NAME has only one value
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.METHOD_NAME.toString == "Adams-Moulton"
org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE has only one value
org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName() == java.util.HashMap.class
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.c1[] sorted by <
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.scaled[] elements != 0
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data.getClass().getName() == double[][].class
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data[] elements != null
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT has only one value
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.starter.getClass().getName() == org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.class
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.safety == 0.9
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.minReduction == 0.2
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.scalAbsoluteTolerance >= 1.0E-12
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.vecAbsoluteTolerance == null
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.vecRelativeTolerance == null
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.mainSetDimension one of { 1, 2 }
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.initialStep == -1.0
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.minStep one of { 0.0, 1.0E-6 }
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.maxStep one of { 0.1, 4.0 }
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.stepHandlers.getClass().getName() == java.util.ArrayList.class
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.isLastStep == false
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.resetOccurred == false
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.eventsStates.getClass().getName() == java.util.ArrayList.class
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.name has only one value
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.name.toString == "Adams-Moulton"
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.evaluations.maximalCount one of { 650, 2147483647 }
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.time == 0.0
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primaryState[] elements != 0
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primaryState[] sorted by >
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primaryStateDot[] elements != 0
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primaryStateDot[] sorted by <
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.components[] == []
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.components[].getClass().getName() == []
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.components.getClass().getName() == java.util.ArrayList.class
previous[] sorted by >
scaled[] elements != 0
state[] elements != 0
state[] sorted by >
size(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.scaled[]) one of { 1, 2 }
size(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primaryState[]) one of { 1, 2 }
size(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primaryStateDot[]) one of { 1, 2 }
size(previous[]) one of { 1, 2 }
size(scaled[]) one of { 1, 2 }
size(state[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator$Corrector.Corrector(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator, double[], double[], double[]):::EXIT
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.METHOD_NAME == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.METHOD_NAME)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.METHOD_NAME.toString == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.METHOD_NAME.toString)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.transformer == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.transformer)
org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE == orig(org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE)
org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName() == orig(org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName())
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.update == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.update)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.c1 == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.c1)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.c1[] == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.c1[])
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.scaled == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.scaled)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.scaled[] == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.scaled[])
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data.getClass().getName() == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data.getClass().getName())
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data[] == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data[])
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.starter == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.starter)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.starter.getClass().getName() == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.starter.getClass().getName())
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.nSteps == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.nSteps)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.exp == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.exp)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.safety == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.safety)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.minReduction == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.minReduction)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.maxGrowth == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.maxGrowth)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.scalAbsoluteTolerance == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.scalAbsoluteTolerance)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.scalRelativeTolerance == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.scalRelativeTolerance)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.vecAbsoluteTolerance == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.vecAbsoluteTolerance)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.vecRelativeTolerance == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.vecRelativeTolerance)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.mainSetDimension == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.mainSetDimension)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.initialStep == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.initialStep)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.minStep == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.minStep)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.maxStep == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.maxStep)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.stepHandlers == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.stepHandlers)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.stepHandlers.getClass().getName() == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.stepHandlers.getClass().getName())
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.stepStart == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.stepStart)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.stepSize == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.stepSize)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.isLastStep == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.isLastStep)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.resetOccurred == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.resetOccurred)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.eventsStates == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.eventsStates)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.eventsStates.getClass().getName() == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.eventsStates.getClass().getName())
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.statesInitialized == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.statesInitialized)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.name == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.name)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.name.toString == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.name.toString)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.evaluations == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.evaluations)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.evaluations.maximalCount == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.evaluations.maximalCount)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.evaluations.count == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.evaluations.count)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.evaluations.maxCountCallback == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.evaluations.maxCountCallback)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.evaluations.maxCountCallback.getClass().getName() == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.evaluations.maxCountCallback.getClass().getName())
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primary == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primary)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primary.getClass().getName() == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primary.getClass().getName())
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primaryMapper == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primaryMapper)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.time == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.time)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primaryState == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primaryState)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primaryState[] == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primaryState[])
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primaryStateDot == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primaryStateDot)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primaryStateDot[] == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primaryStateDot[])
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.components == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.components)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.components[] == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.components[])
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.components.getClass().getName() == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.components.getClass().getName())
previous[] == orig(previous[])
scaled[] == orig(scaled[])
state[] == orig(state[])
this.after[] elements != 0
this.after[] sorted by >
previous[] sorted by >
scaled[] elements != 0
state[] elements != 0
state[] sorted by >
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator$Corrector.end():::ENTER
this.after[] sorted by <
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator$Corrector.end():::EXIT
this.previous == orig(this.previous)
this.previous[] == orig(this.previous[])
this.scaled == orig(this.scaled)
this.scaled[] == orig(this.scaled[])
this.before == orig(this.before)
this.before[] == orig(this.before[])
this.after == orig(this.after)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.METHOD_NAME == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.METHOD_NAME)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.METHOD_NAME.toString == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.METHOD_NAME.toString)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.transformer == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.transformer)
org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE == orig(org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE)
org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName() == orig(org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName())
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.update == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.update)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.c1 == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.c1)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.c1[] == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.c1[])
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.scaled == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.scaled)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.scaled[] == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.scaled[])
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data.getClass().getName() == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data.getClass().getName())
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data[] == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data[])
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.starter == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.starter)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.starter.getClass().getName() == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.starter.getClass().getName())
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.nSteps == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.nSteps)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.exp == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.exp)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.safety == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.safety)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.minReduction == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.minReduction)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.maxGrowth == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.maxGrowth)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.scalAbsoluteTolerance == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.scalAbsoluteTolerance)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.scalRelativeTolerance == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.scalRelativeTolerance)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.vecAbsoluteTolerance == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.vecAbsoluteTolerance)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.vecRelativeTolerance == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.vecRelativeTolerance)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.mainSetDimension == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.mainSetDimension)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.initialStep == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.initialStep)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.minStep == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.minStep)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.maxStep == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.maxStep)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.stepHandlers == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.stepHandlers)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.stepHandlers.getClass().getName() == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.stepHandlers.getClass().getName())
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.stepStart == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.stepStart)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.stepSize == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.stepSize)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.isLastStep == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.isLastStep)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.resetOccurred == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.resetOccurred)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.eventsStates == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.eventsStates)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.eventsStates.getClass().getName() == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.eventsStates.getClass().getName())
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.statesInitialized == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.statesInitialized)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.name == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.name)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.name.toString == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.name.toString)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.evaluations == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.evaluations)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.evaluations.maximalCount == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.evaluations.maximalCount)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.evaluations.count == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.evaluations.count)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.evaluations.maxCountCallback == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.evaluations.maxCountCallback)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.evaluations.maxCountCallback.getClass().getName() == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.evaluations.maxCountCallback.getClass().getName())
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primary == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primary)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primary.getClass().getName() == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primary.getClass().getName())
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primaryMapper == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primaryMapper)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.time == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.time)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primaryState == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primaryState)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primaryState[] == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primaryState[])
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primaryStateDot == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primaryStateDot)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primaryStateDot[] == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primaryStateDot[])
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.components == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.components)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.components[] == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.components[])
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.components.getClass().getName() == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.components.getClass().getName())
size(this.after[]) == orig(size(this.after[]))
this.after[] elements != 0
this.after[] sorted by >
return >= 0.0
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator$Corrector.start(int, int, int, int, int, int):::ENTER
this.after[] elements != 0
this.after[] sorted by >
columns one of { 1, 2 }
startRow == 0
startColumn == 0
endColumn one of { 0, 1 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator$Corrector.start(int, int, int, int, int, int):::EXIT
this.previous == orig(this.previous)
this.previous[] == orig(this.previous[])
this.scaled == orig(this.scaled)
this.scaled[] == orig(this.scaled[])
this.before == orig(this.before)
this.before[] == orig(this.before[])
this.after == orig(this.after)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.METHOD_NAME == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.METHOD_NAME)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.METHOD_NAME.toString == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.METHOD_NAME.toString)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.transformer == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.transformer)
org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE == orig(org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE)
org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName() == orig(org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName())
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.update == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.update)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.c1 == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.c1)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.c1[] == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.c1[])
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.scaled == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.scaled)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.scaled[] == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.scaled[])
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data.getClass().getName() == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data.getClass().getName())
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data[] == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data[])
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.starter == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.starter)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.starter.getClass().getName() == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.starter.getClass().getName())
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.nSteps == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.nSteps)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.exp == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.exp)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.safety == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.safety)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.minReduction == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.minReduction)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.maxGrowth == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.maxGrowth)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.scalAbsoluteTolerance == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.scalAbsoluteTolerance)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.scalRelativeTolerance == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.scalRelativeTolerance)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.vecAbsoluteTolerance == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.vecAbsoluteTolerance)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.vecRelativeTolerance == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.vecRelativeTolerance)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.mainSetDimension == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.mainSetDimension)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.initialStep == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.initialStep)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.minStep == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.minStep)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.maxStep == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.maxStep)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.stepHandlers == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.stepHandlers)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.stepHandlers.getClass().getName() == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.stepHandlers.getClass().getName())
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.stepStart == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.stepStart)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.stepSize == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.stepSize)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.isLastStep == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.isLastStep)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.resetOccurred == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.resetOccurred)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.eventsStates == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.eventsStates)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.eventsStates.getClass().getName() == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.eventsStates.getClass().getName())
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.statesInitialized == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.statesInitialized)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.name == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.name)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.name.toString == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.name.toString)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.evaluations == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.evaluations)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.evaluations.maximalCount == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.evaluations.maximalCount)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.evaluations.count == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.evaluations.count)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.evaluations.maxCountCallback == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.evaluations.maxCountCallback)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.evaluations.maxCountCallback.getClass().getName() == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.evaluations.maxCountCallback.getClass().getName())
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primary == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primary)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primary.getClass().getName() == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primary.getClass().getName())
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primaryMapper == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primaryMapper)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.time == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.time)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primaryState == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primaryState)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primaryState[] == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primaryState[])
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primaryStateDot == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primaryStateDot)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primaryStateDot[] == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primaryStateDot[])
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.components == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.components)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.components[] == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.components[])
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.components.getClass().getName() == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.components.getClass().getName())
size(this.after[]) == orig(size(this.after[]))
this.after[] elements == 0.0
this.after[] one of { [0.0], [0.0, 0.0] }
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator$Corrector.visit(int, int, double):::ENTER
this.after[] sorted by <=
row >= 0
column one of { 0, 1 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator$Corrector.visit(int, int, double):::EXIT
this.previous == orig(this.previous)
this.previous[] == orig(this.previous[])
this.scaled == orig(this.scaled)
this.scaled[] == orig(this.scaled[])
this.before == orig(this.before)
this.before[] == orig(this.before[])
this.after == orig(this.after)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.METHOD_NAME == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.METHOD_NAME)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.METHOD_NAME.toString == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.METHOD_NAME.toString)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.transformer == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.transformer)
org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE == orig(org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE)
org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName() == orig(org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName())
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.update == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.update)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.c1 == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.c1)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.c1[] == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.c1[])
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.scaled == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.scaled)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.scaled[] == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.scaled[])
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data.getClass().getName() == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data.getClass().getName())
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data[] == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data[])
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.starter == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.starter)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.starter.getClass().getName() == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.starter.getClass().getName())
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.nSteps == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.nSteps)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.exp == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.exp)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.safety == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.safety)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.minReduction == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.minReduction)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.maxGrowth == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.maxGrowth)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.scalAbsoluteTolerance == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.scalAbsoluteTolerance)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.scalRelativeTolerance == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.scalRelativeTolerance)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.vecAbsoluteTolerance == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.vecAbsoluteTolerance)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.vecRelativeTolerance == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.vecRelativeTolerance)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.mainSetDimension == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.mainSetDimension)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.initialStep == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.initialStep)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.minStep == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.minStep)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.maxStep == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.maxStep)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.stepHandlers == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.stepHandlers)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.stepHandlers.getClass().getName() == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.stepHandlers.getClass().getName())
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.stepStart == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.stepStart)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.stepSize == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.stepSize)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.isLastStep == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.isLastStep)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.resetOccurred == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.resetOccurred)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.eventsStates == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.eventsStates)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.eventsStates.getClass().getName() == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.eventsStates.getClass().getName())
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.statesInitialized == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.statesInitialized)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.name == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.name)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.name.toString == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.name.toString)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.evaluations == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.evaluations)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.evaluations.maximalCount == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.evaluations.maximalCount)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.evaluations.count == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.evaluations.count)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.evaluations.maxCountCallback == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.evaluations.maxCountCallback)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.evaluations.maxCountCallback.getClass().getName() == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.evaluations.maxCountCallback.getClass().getName())
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primary == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primary)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primary.getClass().getName() == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primary.getClass().getName())
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primaryMapper == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primaryMapper)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.time == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.time)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primaryState == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primaryState)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primaryState[] == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primaryState[])
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primaryStateDot == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primaryStateDot)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primaryStateDot[] == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.primaryStateDot[])
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.components == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.components)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.components[] == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.components[])
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.components.getClass().getName() == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.this.expandable.components.getClass().getName())
size(this.after[]) == orig(size(this.after[]))
this.after[] sorted by <
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator:::CLASS
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.METHOD_NAME has only one value
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.METHOD_NAME.toString == "Adams-Moulton"
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator:::OBJECT
org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE has only one value
org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName() == java.util.HashMap.class
this.transformer.update.data.getClass().getName() == double[][].class
this.transformer.update.data[] elements != null
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT has only one value
this.transformer.c1[] sorted by <
this.nordsieck.data.getClass().getName() == double[][].class
this.nordsieck.data[] elements != null
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == "{"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == "}"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == "{"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == "}"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == ","
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == ","
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == "{"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == "}"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == "{"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == "}"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == ","
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == ","
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == java.text.DecimalFormat.class
this.starter.getClass().getName() == org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.class
this.safety == 0.9
this.minReduction == 0.2
this.vecAbsoluteTolerance == null
this.vecRelativeTolerance == null
this.mainSetDimension one of { 0, 1, 2 }
this.initialStep == -1.0
this.minStep one of { 0.0, 1.0E-6 }
this.maxStep one of { 0.1, 4.0 }
this.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 3.1622776601683794E-4 }
this.resetOccurred == false
this.eventsStates.getClass().getName() == java.util.ArrayList.class
this.name has only one value
this.name.toString == "Adams-Moulton"
this.evaluations.maximalCount == 2147483647
this.evaluations.count >= 0
this.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
this.expandable.primaryMapper.firstIndex == 0
this.expandable.primaryMapper.dimension one of { 1, 2 }
this.expandable.time one of { -4.0, 1.0, 4.0 }
this.expandable.primaryState[] sorted by >
this.expandable.primaryStateDot[] sorted by <
this.expandable.components[] == []
this.expandable.components[].getClass().getName() == []
this.expandable.components.getClass().getName() == java.util.ArrayList.class
size(this.scaled[]) one of { 1, 2 }
size(this.expandable.primaryState[]) one of { 1, 2 }
size(this.expandable.primaryStateDot[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.AdamsMoultonIntegrator(int, double, double, double, double):::ENTER
minStep one of { 0.0, 1.0E-6 }
maxStep one of { 0.1, 4.0 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.AdamsMoultonIntegrator(int, double, double, double, double):::EXIT
this.scaled == null
this.nordsieck == null
this.mainSetDimension == 0
this.isLastStep == false
this.statesInitialized == false
this.evaluations.count == 0
this.expandable == null
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.integrate(org.apache.commons.math3.ode.ExpandableStatefulODE, double):::ENTER
this.scaled == null
this.nordsieck == null
this.mainSetDimension == 0
this.isLastStep == false
this.statesInitialized == false
this.evaluations.count == 0
this.expandable == null
equations.primaryMapper.firstIndex == 0
equations.primaryMapper.dimension one of { 1, 2 }
equations.time == 0.0
equations.primaryState[] elements one of { -360.0, 0.1, 1.0 }
equations.primaryState[] one of { [-360.0], [1.0, 0.1] }
equations.primaryState[] sorted by >
equations.primaryStateDot[] elements == 0.0
equations.primaryStateDot[] one of { [0.0], [0.0, 0.0] }
equations.components[] == []
equations.components[].getClass().getName() == []
equations.components.getClass().getName() == java.util.ArrayList.class
t one of { -4.0, 1.0, 4.0 }
size(equations.primaryState[]) one of { 1, 2 }
size(equations.primaryStateDot[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.integrate(org.apache.commons.math3.ode.ExpandableStatefulODE, double):::EXIT
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.METHOD_NAME == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.METHOD_NAME)
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.METHOD_NAME.toString == orig(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator.METHOD_NAME.toString)
this.transformer == orig(this.transformer)
org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE == orig(org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE)
org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName() == orig(org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName())
this.transformer.update == orig(this.transformer.update)
this.transformer.update.data == orig(this.transformer.update.data)
this.transformer.update.data.getClass().getName() == orig(this.transformer.update.data.getClass().getName())
this.transformer.update.data[] == orig(this.transformer.update.data[])
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
this.transformer.c1 == orig(this.transformer.c1)
this.transformer.c1[] == orig(this.transformer.c1[])
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
this.starter == orig(this.starter)
this.starter.getClass().getName() == orig(this.starter.getClass().getName())
this.nSteps == orig(this.nSteps)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.minReduction == orig(this.minReduction)
this.maxGrowth == orig(this.maxGrowth)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepSize == orig(this.stepSize)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
equations.primary == orig(equations.primary)
equations.primary.getClass().getName() == orig(equations.primary.getClass().getName())
equations.primaryMapper == orig(equations.primaryMapper)
equations.primaryMapper.firstIndex == orig(equations.primaryMapper.firstIndex)
equations.primaryMapper.dimension == orig(equations.primaryMapper.dimension)
equations.primaryState == orig(equations.primaryState)
equations.primaryStateDot == orig(equations.primaryStateDot)
equations.components == orig(equations.components)
equations.components[] == orig(equations.components[])
equations.components.getClass().getName() == orig(equations.components.getClass().getName())
size(equations.primaryState[]) == orig(size(equations.primaryState[]))
size(equations.primaryStateDot[]) == orig(size(equations.primaryStateDot[]))
this.mainSetDimension one of { 1, 2 }
this.isLastStep == true
this.statesInitialized == true
equations.primaryMapper.firstIndex == 0
equations.primaryMapper.dimension one of { 1, 2 }
equations.time one of { -4.0, 1.0, 4.0 }
equations.primaryState[] sorted by >
equations.primaryStateDot[] sorted by <
equations.components[] == []
equations.components[].getClass().getName() == []
equations.components.getClass().getName() == java.util.ArrayList.class
size(equations.primaryState[]) one of { 1, 2 }
size(equations.primaryStateDot[]) one of { 1, 2 }
this.mainSetDimension > orig(this.mainSetDimension)
orig(this.evaluations.count) % this.evaluations.count == 0
this.evaluations.count > orig(this.evaluations.count)
equations.time != orig(equations.time)
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegratorTest:::OBJECT
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegratorTest.AdamsMoultonIntegratorTest():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegratorTest.backward():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegratorTest.backward():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegratorTest.polynomial():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegratorTest.polynomial():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegratorTest.testIncreasingTolerance():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegratorTest.testIncreasingTolerance():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer:::CLASS
org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE has only one value
org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName() == java.util.HashMap.class
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer:::OBJECT
this.update.data.getClass().getName() == double[][].class
this.update.data[] elements != null
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == "{"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == "}"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == "{"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == "}"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == ","
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == ","
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == "{"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == "}"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == "{"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == "}"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == ","
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == ","
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == java.text.DecimalFormat.class
this.c1[] sorted by <
size(this.update.data[]) >= 2
size(this.c1[]) >= 2
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.AdamsNordsieckTransformer(int):::ENTER
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.AdamsNordsieckTransformer(int):::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.buildP(int):::ENTER
this.update == null
this.c1 == null
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.buildP(int):::EXIT
org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE == orig(org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE)
org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName() == orig(org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName())
this.update == orig(this.update)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
this.c1 == orig(this.c1)
this.update == null
this.c1 == null
return.getClass().getName() == org.apache.commons.math3.linear.Array2DRowFieldMatrix.class
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.getInstance(int):::ENTER
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.getInstance(int):::EXIT
org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE == orig(org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE)
org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName() == orig(org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName())
return.update.data.getClass().getName() == double[][].class
return.update.data[] elements != null
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT has only one value
return.c1[] sorted by <
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.initializeHighOrderDerivatives(double, double[], double[][], double[][]):::ENTER
y.getClass().getName() == double[][].class
y[] elements != null
yDot.getClass().getName() == double[][].class
yDot[] elements != null
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.initializeHighOrderDerivatives(double, double[], double[][], double[][]):::EXIT
org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE == orig(org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE)
org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName() == orig(org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName())
this.update == orig(this.update)
this.update.data == orig(this.update.data)
this.update.data.getClass().getName() == orig(this.update.data.getClass().getName())
this.update.data[] == orig(this.update.data[])
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
this.c1 == orig(this.c1)
this.c1[] == orig(this.c1[])
t[] == orig(t[])
y[] == orig(y[])
yDot[] == orig(yDot[])
y[] elements != null
yDot[] elements != null
return.data.getClass().getName() == double[][].class
return.data[] elements != null
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.updateHighOrderDerivativesPhase1(org.apache.commons.math3.linear.Array2DRowRealMatrix):::ENTER
highOrder.data.getClass().getName() == double[][].class
highOrder.data[] elements != null
size(highOrder.data[]) >= 2
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.updateHighOrderDerivativesPhase1(org.apache.commons.math3.linear.Array2DRowRealMatrix):::EXIT
org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE == orig(org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE)
org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName() == orig(org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName())
this.update == orig(this.update)
this.update.data == orig(this.update.data)
this.update.data.getClass().getName() == orig(this.update.data.getClass().getName())
this.update.data[] == orig(this.update.data[])
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
this.c1 == orig(this.c1)
this.c1[] == orig(this.c1[])
highOrder.data == orig(highOrder.data)
highOrder.data.getClass().getName() == orig(highOrder.data.getClass().getName())
highOrder.data[] == orig(highOrder.data[])
highOrder.data.getClass().getName() == double[][].class
highOrder.data[] elements != null
return.data.getClass().getName() == double[][].class
return.data[] elements != null
size(highOrder.data[]) >= 2
size(return.data[]) >= 2
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.updateHighOrderDerivativesPhase2(double[], double[], org.apache.commons.math3.linear.Array2DRowRealMatrix):::ENTER
end[] elements != 0
highOrder.data.getClass().getName() == double[][].class
highOrder.data[] elements != null
size(start[]) one of { 1, 2, 4 }
size(end[]) one of { 1, 2, 4 }
size(highOrder.data[]) >= 2
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.updateHighOrderDerivativesPhase2(double[], double[], org.apache.commons.math3.linear.Array2DRowRealMatrix):::EXIT
org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE == orig(org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE)
org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName() == orig(org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName())
this.update == orig(this.update)
this.update.data == orig(this.update.data)
this.update.data.getClass().getName() == orig(this.update.data.getClass().getName())
this.update.data[] == orig(this.update.data[])
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
this.c1 == orig(this.c1)
this.c1[] == orig(this.c1[])
start[] == orig(start[])
end[] == orig(end[])
highOrder.data == orig(highOrder.data)
highOrder.data.getClass().getName() == orig(highOrder.data.getClass().getName())
highOrder.data[] == orig(highOrder.data[])
end[] elements != 0
highOrder.data.getClass().getName() == double[][].class
highOrder.data[] elements != null
size(highOrder.data[]) >= 2
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator:::OBJECT
this.scalAbsoluteTolerance >= 0.0
this.scalRelativeTolerance >= 0.0
this.vecAbsoluteTolerance[] elements one of { 1.0E-10, 1.0E-8, 1.0E-4 }
this.vecAbsoluteTolerance[] one of { [1.0E-10, 1.0E-10], [1.0E-8, 1.0E-8, 1.0E-10, 1.0E-10], [1.0E-4, 1.0E-4] }
this.vecAbsoluteTolerance[] sorted by >=
this.vecRelativeTolerance[] elements one of { 1.0E-10, 1.0E-8, 1.0E-4 }
this.vecRelativeTolerance[] one of { [1.0E-10, 1.0E-10], [1.0E-10, 1.0E-10, 1.0E-8, 1.0E-8], [1.0E-4, 1.0E-4] }
this.vecRelativeTolerance[] sorted by <=
this.mainSetDimension >= 0
this.initialStep >= -1.0
this.minStep >= 0.0
this.maxStep >= 0.0
this.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.eventsStates.getClass().getName() == java.util.ArrayList.class
this.evaluations.count >= 0
this.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
this.expandable.primaryMapper.firstIndex == 0
this.expandable.primaryMapper.dimension >= 1
this.expandable.components[] elements != null
this.expandable.components[].getClass().getName() elements == org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent.class
this.expandable.components[].getClass().getName() one of { [], [org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent] }
this.expandable.components.getClass().getName() == java.util.ArrayList.class
size(this.vecAbsoluteTolerance[]) one of { 2, 4 }
size(this.vecRelativeTolerance[]) one of { 2, 4 }
size(this.expandable.primaryState[]) >= 1
size(this.expandable.primaryStateDot[]) >= 1
size(this.expandable.components[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator.AdaptiveStepsizeIntegrator(java.lang.String, double, double, double, double):::ENTER
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator.AdaptiveStepsizeIntegrator(java.lang.String, double, double, double, double):::EXIT
name.toString == orig(name.toString)
this.vecAbsoluteTolerance == null
this.vecRelativeTolerance == null
this.mainSetDimension == 0
this.initialStep == -1.0
this.maxStep >= 0.1
this.stepStart == Double.NaN
this.isLastStep == false
this.resetOccurred == false
this.statesInitialized == false
this.evaluations.maximalCount == 2147483647
this.evaluations.count == 0
this.expandable == null
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator.AdaptiveStepsizeIntegrator(java.lang.String, double, double, double[], double[]):::ENTER
name.toString one of { "Dormand-Prince 5(4)", "Higham-Hall 5(4)" }
minStep one of { 0.0, 1.0E-8 }
maxStep one of { 20.0, 100.0 }
vecAbsoluteTolerance[] elements one of { 1.0E-10, 1.0E-8, 1.0E-4 }
vecAbsoluteTolerance[] one of { [1.0E-10, 1.0E-10], [1.0E-8, 1.0E-8, 1.0E-10, 1.0E-10], [1.0E-4, 1.0E-4] }
vecAbsoluteTolerance[] sorted by >=
vecRelativeTolerance[] elements one of { 1.0E-10, 1.0E-8, 1.0E-4 }
vecRelativeTolerance[] one of { [1.0E-10, 1.0E-10], [1.0E-10, 1.0E-10, 1.0E-8, 1.0E-8], [1.0E-4, 1.0E-4] }
vecRelativeTolerance[] sorted by <=
size(vecAbsoluteTolerance[]) one of { 2, 4 }
size(vecRelativeTolerance[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator.AdaptiveStepsizeIntegrator(java.lang.String, double, double, double[], double[]):::EXIT
name.toString == orig(name.toString)
vecAbsoluteTolerance[] == orig(vecAbsoluteTolerance[])
vecRelativeTolerance[] == orig(vecRelativeTolerance[])
this.scalAbsoluteTolerance == 0.0
this.scalRelativeTolerance == 0.0
this.mainSetDimension == 0
this.initialStep == -1.0
this.minStep one of { 0.0, 1.0E-8 }
this.maxStep one of { 20.0, 100.0 }
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 0.001 }
this.isLastStep == false
this.resetOccurred == false
this.statesInitialized == false
this.name.toString one of { "Dormand-Prince 5(4)", "Higham-Hall 5(4)" }
this.evaluations.maximalCount == 2147483647
this.evaluations.count == 0
this.expandable == null
name.toString one of { "Dormand-Prince 5(4)", "Higham-Hall 5(4)" }
vecAbsoluteTolerance[] elements one of { 1.0E-10, 1.0E-8, 1.0E-4 }
vecAbsoluteTolerance[] one of { [1.0E-10, 1.0E-10], [1.0E-8, 1.0E-8, 1.0E-10, 1.0E-10], [1.0E-4, 1.0E-4] }
vecAbsoluteTolerance[] sorted by >=
vecRelativeTolerance[] elements one of { 1.0E-10, 1.0E-8, 1.0E-4 }
vecRelativeTolerance[] one of { [1.0E-10, 1.0E-10], [1.0E-10, 1.0E-10, 1.0E-8, 1.0E-8], [1.0E-4, 1.0E-4] }
vecRelativeTolerance[] sorted by <=
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator.filterStep(double, boolean, boolean):::ENTER
this.mainSetDimension >= 1
this.expandable.time >= 0.0
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator.filterStep(double, boolean, boolean):::EXIT
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecAbsoluteTolerance[] == orig(this.vecAbsoluteTolerance[])
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.vecRelativeTolerance[] == orig(this.vecRelativeTolerance[])
this.mainSetDimension == orig(this.mainSetDimension)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
this.expandable.primary == orig(this.expandable.primary)
this.expandable.primary.getClass().getName() == orig(this.expandable.primary.getClass().getName())
this.expandable.primaryMapper == orig(this.expandable.primaryMapper)
this.expandable.primaryMapper.firstIndex == orig(this.expandable.primaryMapper.firstIndex)
this.expandable.primaryMapper.dimension == orig(this.expandable.primaryMapper.dimension)
this.expandable.time == orig(this.expandable.time)
this.expandable.primaryState == orig(this.expandable.primaryState)
this.expandable.primaryState[] == orig(this.expandable.primaryState[])
this.expandable.primaryStateDot == orig(this.expandable.primaryStateDot)
this.expandable.primaryStateDot[] == orig(this.expandable.primaryStateDot[])
this.expandable.components == orig(this.expandable.components)
this.expandable.components[] == orig(this.expandable.components[])
this.expandable.components.getClass().getName() == orig(this.expandable.components.getClass().getName())
this.mainSetDimension >= 1
this.expandable.time >= 0.0
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator.getCurrentStepStart():::ENTER
this.vecAbsoluteTolerance[] == [1.0E-8, 1.0E-8, 1.0E-10, 1.0E-10]
this.vecAbsoluteTolerance[] elements one of { 1.0E-10, 1.0E-8 }
this.vecRelativeTolerance[] == [1.0E-10, 1.0E-10, 1.0E-8, 1.0E-8]
this.vecRelativeTolerance[] elements one of { 1.0E-10, 1.0E-8 }
this.mainSetDimension one of { 1, 2, 4 }
this.initialStep == -1.0
this.minStep one of { 0.0, 1.0E-6 }
this.statesInitialized == true
this.evaluations.maximalCount one of { 650, 2147483647 }
this.expandable.primaryMapper.dimension one of { 1, 2, 4 }
this.expandable.time == 0.0
this.expandable.primaryState[] elements != 0
this.expandable.components[] == []
this.expandable.components[].getClass().getName() == []
size(this.vecAbsoluteTolerance[]) == 4
size(this.vecRelativeTolerance[]) == 4
size(this.expandable.primaryState[]) one of { 1, 2, 4 }
size(this.expandable.primaryStateDot[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator.getCurrentStepStart():::EXIT
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecAbsoluteTolerance[] == orig(this.vecAbsoluteTolerance[])
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.vecRelativeTolerance[] == orig(this.vecRelativeTolerance[])
this.mainSetDimension == orig(this.mainSetDimension)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
this.expandable.primary == orig(this.expandable.primary)
this.expandable.primary.getClass().getName() == orig(this.expandable.primary.getClass().getName())
this.expandable.primaryMapper == orig(this.expandable.primaryMapper)
this.expandable.primaryMapper.firstIndex == orig(this.expandable.primaryMapper.firstIndex)
this.expandable.primaryMapper.dimension == orig(this.expandable.primaryMapper.dimension)
this.expandable.time == orig(this.expandable.time)
this.expandable.primaryState == orig(this.expandable.primaryState)
this.expandable.primaryState[] == orig(this.expandable.primaryState[])
this.expandable.primaryStateDot == orig(this.expandable.primaryStateDot)
this.expandable.primaryStateDot[] == orig(this.expandable.primaryStateDot[])
this.expandable.components == orig(this.expandable.components)
this.expandable.components[] == orig(this.expandable.components[])
this.expandable.components.getClass().getName() == orig(this.expandable.components.getClass().getName())
this.vecAbsoluteTolerance[] == [1.0E-8, 1.0E-8, 1.0E-10, 1.0E-10]
this.vecAbsoluteTolerance[] elements one of { 1.0E-10, 1.0E-8 }
this.vecRelativeTolerance[] == [1.0E-10, 1.0E-10, 1.0E-8, 1.0E-8]
this.vecRelativeTolerance[] elements one of { 1.0E-10, 1.0E-8 }
this.mainSetDimension one of { 1, 2, 4 }
this.initialStep == -1.0
this.minStep one of { 0.0, 1.0E-6 }
this.statesInitialized == true
this.evaluations.maximalCount one of { 650, 2147483647 }
this.expandable.primaryMapper.dimension one of { 1, 2, 4 }
this.expandable.time == 0.0
this.expandable.primaryState[] elements != 0
this.expandable.components[] == []
this.expandable.components[].getClass().getName() == []
size(this.vecAbsoluteTolerance[]) == 4
size(this.vecRelativeTolerance[]) == 4
size(this.expandable.primaryState[]) one of { 1, 2, 4 }
size(this.expandable.primaryStateDot[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator.getMaxStep():::ENTER
this.mainSetDimension >= 1
this.initialStep == -1.0
this.evaluations.maximalCount one of { 5000, 50000, 2147483647 }
this.evaluations.count >= 2
this.expandable.time >= 0.0
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator.getMaxStep():::EXIT
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecAbsoluteTolerance[] == orig(this.vecAbsoluteTolerance[])
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.vecRelativeTolerance[] == orig(this.vecRelativeTolerance[])
this.mainSetDimension == orig(this.mainSetDimension)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepStart == orig(this.stepStart)
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
this.expandable.primary == orig(this.expandable.primary)
this.expandable.primary.getClass().getName() == orig(this.expandable.primary.getClass().getName())
this.expandable.primaryMapper == orig(this.expandable.primaryMapper)
this.expandable.primaryMapper.firstIndex == orig(this.expandable.primaryMapper.firstIndex)
this.expandable.primaryMapper.dimension == orig(this.expandable.primaryMapper.dimension)
this.expandable.time == orig(this.expandable.time)
this.expandable.primaryState == orig(this.expandable.primaryState)
this.expandable.primaryState[] == orig(this.expandable.primaryState[])
this.expandable.primaryStateDot == orig(this.expandable.primaryStateDot)
this.expandable.primaryStateDot[] == orig(this.expandable.primaryStateDot[])
this.expandable.components == orig(this.expandable.components)
this.expandable.components[] == orig(this.expandable.components[])
this.expandable.components.getClass().getName() == orig(this.expandable.components.getClass().getName())
this.mainSetDimension >= 1
this.initialStep == -1.0
this.evaluations.maximalCount one of { 5000, 50000, 2147483647 }
this.evaluations.count >= 2
this.expandable.time >= 0.0
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator.getMinStep():::ENTER
this.initialStep == -1.0
this.stepStart >= 0.0
this.isLastStep == false
this.resetOccurred == false
this.statesInitialized == false
this.evaluations.maximalCount one of { 5000, 50000, 2147483647 }
this.evaluations.count == 2
this.expandable.time >= 0.0
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator.getMinStep():::EXIT
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecAbsoluteTolerance[] == orig(this.vecAbsoluteTolerance[])
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.vecRelativeTolerance[] == orig(this.vecRelativeTolerance[])
this.mainSetDimension == orig(this.mainSetDimension)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepStart == orig(this.stepStart)
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
this.expandable.primary == orig(this.expandable.primary)
this.expandable.primary.getClass().getName() == orig(this.expandable.primary.getClass().getName())
this.expandable.primaryMapper == orig(this.expandable.primaryMapper)
this.expandable.primaryMapper.firstIndex == orig(this.expandable.primaryMapper.firstIndex)
this.expandable.primaryMapper.dimension == orig(this.expandable.primaryMapper.dimension)
this.expandable.time == orig(this.expandable.time)
this.expandable.primaryState == orig(this.expandable.primaryState)
this.expandable.primaryState[] == orig(this.expandable.primaryState[])
this.expandable.primaryStateDot == orig(this.expandable.primaryStateDot)
this.expandable.primaryStateDot[] == orig(this.expandable.primaryStateDot[])
this.expandable.components == orig(this.expandable.components)
this.expandable.components[] == orig(this.expandable.components[])
this.expandable.components.getClass().getName() == orig(this.expandable.components.getClass().getName())
this.initialStep == -1.0
this.stepStart >= 0.0
this.isLastStep == false
this.resetOccurred == false
this.statesInitialized == false
this.evaluations.maximalCount one of { 5000, 50000, 2147483647 }
this.evaluations.count == 2
this.expandable.time >= 0.0
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator.initializeStep(boolean, int, double[], double, double[], double[], double[], double[]):::ENTER
this.maxStep >= 0.1
this.stepStart >= 0.0
this.isLastStep == false
this.resetOccurred == false
this.statesInitialized == false
this.evaluations.maximalCount one of { 5000, 50000, 2147483647 }
this.evaluations.count == 1
this.expandable.time >= 0.0
t0 >= 0.0
yDot1[] elements == 0.0
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator.initializeStep(boolean, int, double[], double, double[], double[], double[], double[]):::EXIT255
this.stepSize == orig(this.stepSize)
this.evaluations.count == orig(this.evaluations.count)
this.expandable.primaryState[] == orig(this.expandable.primaryState[])
this.expandable.primaryStateDot[] == orig(this.expandable.primaryStateDot[])
y1[] == orig(y1[])
yDot1[] == orig(yDot1[])
this.scalAbsoluteTolerance one of { 1.0E-14, 1.0E-10, 6.0E-4 }
this.scalRelativeTolerance one of { 1.0E-14, 1.0E-10, 6.0E-4 }
this.vecAbsoluteTolerance == null
this.vecRelativeTolerance == null
this.mainSetDimension one of { 1, 2, 3 }
this.initialStep one of { 1.7, 3.0, 60.0 }
this.minStep one of { 0.0, 0.001, 1.25 }
this.maxStep one of { 4.0, 100.0, 1000.0 }
this.stepStart one of { 0.0, 1.8782503200000029E9 }
this.stepSize one of { 0.0, 1.0, 2.23606797749979 }
this.name.toString one of { "Dormand-Prince 5(4)", "Dormand-Prince 8 (5, 3)" }
this.evaluations.maximalCount == 2147483647
this.evaluations.count == 1
this.expandable.primaryMapper.dimension one of { 1, 2, 3 }
this.expandable.time one of { 0.0, 1.8782503200000029E9 }
this.expandable.primaryState[] one of { [0.0], [1.0, 0.1], [1.0, 2.0, 3.0] }
this.expandable.primaryStateDot[] one of { [-1.0, -0.1], [1.0E-4, 2.0E-5, 3.0E-6], [1.0] }
this.expandable.components[] == []
this.expandable.components[].getClass().getName() == []
scale[] one of { [1.0E-14], [2.0E-10, 3.0E-10, 4.0E-10], [0.0012, 6.6E-4] }
y0[] one of { [0.0], [1.0, 0.1], [1.0, 2.0, 3.0] }
yDot0[] one of { [-1.0, -0.1], [1.0E-4, 2.0E-5, 3.0E-6], [1.0] }
y1[] one of { [0.0], [1.0, 0.1], [1.0, 2.0, 3.0] }
yDot1[] elements == 0.0
yDot1[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0] }
return one of { -1.7, 3.0, 60.0 }
orig(order) one of { 5, 8 }
orig(t0) one of { 0.0, 1.8782503200000029E9 }
size(this.expandable.primaryState[]) one of { 1, 2, 3 }
size(this.expandable.primaryStateDot[]) one of { 1, 2, 3 }
orig(size(scale[])) one of { 1, 2, 3 }
orig(size(y0[])) one of { 1, 2, 3 }
orig(size(yDot0[])) one of { 1, 2, 3 }
orig(size(y1[])) one of { 1, 2, 3 }
orig(size(yDot1[])) one of { 1, 2, 3 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator.initializeStep(boolean, int, double[], double, double[], double[], double[], double[]):::EXIT308
this.initialStep == -1.0
this.evaluations.count == 2
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator.initializeStep(boolean, int, double[], double, double[], double[], double[], double[]):::EXIT
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecAbsoluteTolerance[] == orig(this.vecAbsoluteTolerance[])
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.vecRelativeTolerance[] == orig(this.vecRelativeTolerance[])
this.mainSetDimension == orig(this.mainSetDimension)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepStart == orig(this.stepStart)
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
this.expandable.primary == orig(this.expandable.primary)
this.expandable.primary.getClass().getName() == orig(this.expandable.primary.getClass().getName())
this.expandable.primaryMapper == orig(this.expandable.primaryMapper)
this.expandable.primaryMapper.firstIndex == orig(this.expandable.primaryMapper.firstIndex)
this.expandable.primaryMapper.dimension == orig(this.expandable.primaryMapper.dimension)
this.expandable.time == orig(this.expandable.time)
this.expandable.primaryState == orig(this.expandable.primaryState)
this.expandable.primaryStateDot == orig(this.expandable.primaryStateDot)
this.expandable.components == orig(this.expandable.components)
this.expandable.components[] == orig(this.expandable.components[])
this.expandable.components.getClass().getName() == orig(this.expandable.components.getClass().getName())
scale[] == orig(scale[])
y0[] == orig(y0[])
yDot0[] == orig(yDot0[])
size(this.expandable.primaryState[]) == orig(size(this.expandable.primaryState[]))
size(this.expandable.primaryStateDot[]) == orig(size(this.expandable.primaryStateDot[]))
(this.initialStep == -1.0)  <==>  (this.evaluations.count == 2)
(this.initialStep == -1.0)  <==>  (this.evaluations.count > orig(this.evaluations.count))
(this.initialStep == -1.0)  ==>  (size(this.expandable.components[]) one of { 0, 1 })
(this.initialStep == -1.0)  ==>  (size(this.vecAbsoluteTolerance[]) one of { 2, 4 })
(this.initialStep == -1.0)  ==>  (size(this.vecRelativeTolerance[]) one of { 2, 4 })
(this.initialStep == -1.0)  ==>  (this.evaluations.maximalCount one of { 5000, 50000, 2147483647 })
(this.initialStep == -1.0)  ==>  (this.expandable.components[].getClass().getName() elements == org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent.class)
(this.initialStep == -1.0)  ==>  (this.expandable.components[].getClass().getName() one of { [], [org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent] })
(this.initialStep == -1.0)  ==>  (this.scalAbsoluteTolerance >= 0.0)
(this.initialStep == -1.0)  ==>  (this.scalRelativeTolerance >= 0.0)
(this.initialStep == -1.0)  ==>  (this.vecAbsoluteTolerance[] elements one of { 1.0E-10, 1.0E-8, 1.0E-4 })
(this.initialStep == -1.0)  ==>  (this.vecAbsoluteTolerance[] one of { [1.0E-10, 1.0E-10], [1.0E-8, 1.0E-8, 1.0E-10, 1.0E-10], [1.0E-4, 1.0E-4] })
(this.initialStep == -1.0)  ==>  (this.vecAbsoluteTolerance[] sorted by >=)
(this.initialStep == -1.0)  ==>  (this.vecRelativeTolerance[] elements one of { 1.0E-10, 1.0E-8, 1.0E-4 })
(this.initialStep == -1.0)  ==>  (this.vecRelativeTolerance[] one of { [1.0E-10, 1.0E-10], [1.0E-10, 1.0E-10, 1.0E-8, 1.0E-8], [1.0E-4, 1.0E-4] })
(this.initialStep == -1.0)  ==>  (this.vecRelativeTolerance[] sorted by <=)
(this.initialStep one of { 1.7, 3.0, 60.0 })  <==>  (this.evaluations.count == 1)
(this.initialStep one of { 1.7, 3.0, 60.0 })  <==>  (this.evaluations.count == orig(this.evaluations.count))
(this.initialStep one of { 1.7, 3.0, 60.0 })  ==>  (orig(order) one of { 5, 8 })
(this.initialStep one of { 1.7, 3.0, 60.0 })  ==>  (orig(size(scale[])) one of { 1, 2, 3 })
(this.initialStep one of { 1.7, 3.0, 60.0 })  ==>  (orig(size(y0[])) one of { 1, 2, 3 })
(this.initialStep one of { 1.7, 3.0, 60.0 })  ==>  (orig(size(y1[])) one of { 1, 2, 3 })
(this.initialStep one of { 1.7, 3.0, 60.0 })  ==>  (orig(size(yDot0[])) one of { 1, 2, 3 })
(this.initialStep one of { 1.7, 3.0, 60.0 })  ==>  (orig(size(yDot1[])) one of { 1, 2, 3 })
(this.initialStep one of { 1.7, 3.0, 60.0 })  ==>  (orig(t0) one of { 0.0, 1.8782503200000029E9 })
(this.initialStep one of { 1.7, 3.0, 60.0 })  ==>  (orig(this.expandable.primaryStateDot[]) one of { [-1.0, -0.1], [1.0E-4, 2.0E-5, 3.0E-6], [1.0] })
(this.initialStep one of { 1.7, 3.0, 60.0 })  ==>  (orig(this.expandable.primaryState[]) one of { [0.0], [1.0, 0.1], [1.0, 2.0, 3.0] })
(this.initialStep one of { 1.7, 3.0, 60.0 })  ==>  (orig(this.stepSize) one of { 0.0, 1.0, 2.23606797749979 })
(this.initialStep one of { 1.7, 3.0, 60.0 })  ==>  (orig(y1[]) one of { [0.0], [1.0, 0.1], [1.0, 2.0, 3.0] })
(this.initialStep one of { 1.7, 3.0, 60.0 })  ==>  (orig(yDot1[]) one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0] })
(this.initialStep one of { 1.7, 3.0, 60.0 })  ==>  (return one of { -1.7, 3.0, 60.0 })
(this.initialStep one of { 1.7, 3.0, 60.0 })  ==>  (scale[] one of { [1.0E-14], [2.0E-10, 3.0E-10, 4.0E-10], [0.0012, 6.6E-4] })
(this.initialStep one of { 1.7, 3.0, 60.0 })  ==>  (size(this.expandable.primaryStateDot[]) one of { 1, 2, 3 })
(this.initialStep one of { 1.7, 3.0, 60.0 })  ==>  (size(this.expandable.primaryState[]) one of { 1, 2, 3 })
(this.initialStep one of { 1.7, 3.0, 60.0 })  ==>  (this.evaluations.maximalCount == 2147483647)
(this.initialStep one of { 1.7, 3.0, 60.0 })  ==>  (this.expandable.components[] == [])
(this.initialStep one of { 1.7, 3.0, 60.0 })  ==>  (this.expandable.components[].getClass().getName() == [])
(this.initialStep one of { 1.7, 3.0, 60.0 })  ==>  (this.expandable.primaryMapper.dimension one of { 1, 2, 3 })
(this.initialStep one of { 1.7, 3.0, 60.0 })  ==>  (this.expandable.primaryStateDot[] == orig(this.expandable.primaryStateDot[]))
(this.initialStep one of { 1.7, 3.0, 60.0 })  ==>  (this.expandable.primaryStateDot[] one of { [-1.0, -0.1], [1.0E-4, 2.0E-5, 3.0E-6], [1.0] })
(this.initialStep one of { 1.7, 3.0, 60.0 })  ==>  (this.expandable.primaryState[] == orig(this.expandable.primaryState[]))
(this.initialStep one of { 1.7, 3.0, 60.0 })  ==>  (this.expandable.primaryState[] one of { [0.0], [1.0, 0.1], [1.0, 2.0, 3.0] })
(this.initialStep one of { 1.7, 3.0, 60.0 })  ==>  (this.expandable.time one of { 0.0, 1.8782503200000029E9 })
(this.initialStep one of { 1.7, 3.0, 60.0 })  ==>  (this.mainSetDimension one of { 1, 2, 3 })
(this.initialStep one of { 1.7, 3.0, 60.0 })  ==>  (this.maxStep one of { 4.0, 100.0, 1000.0 })
(this.initialStep one of { 1.7, 3.0, 60.0 })  ==>  (this.minStep one of { 0.0, 0.001, 1.25 })
(this.initialStep one of { 1.7, 3.0, 60.0 })  ==>  (this.name.toString one of { "Dormand-Prince 5(4)", "Dormand-Prince 8 (5, 3)" })
(this.initialStep one of { 1.7, 3.0, 60.0 })  ==>  (this.scalAbsoluteTolerance one of { 1.0E-14, 1.0E-10, 6.0E-4 })
(this.initialStep one of { 1.7, 3.0, 60.0 })  ==>  (this.scalRelativeTolerance one of { 1.0E-14, 1.0E-10, 6.0E-4 })
(this.initialStep one of { 1.7, 3.0, 60.0 })  ==>  (this.stepSize == orig(this.stepSize))
(this.initialStep one of { 1.7, 3.0, 60.0 })  ==>  (this.stepSize one of { 0.0, 1.0, 2.23606797749979 })
(this.initialStep one of { 1.7, 3.0, 60.0 })  ==>  (this.stepStart one of { 0.0, 1.8782503200000029E9 })
(this.initialStep one of { 1.7, 3.0, 60.0 })  ==>  (this.vecAbsoluteTolerance == null)
(this.initialStep one of { 1.7, 3.0, 60.0 })  ==>  (this.vecRelativeTolerance == null)
(this.initialStep one of { 1.7, 3.0, 60.0 })  ==>  (y0[] one of { [0.0], [1.0, 0.1], [1.0, 2.0, 3.0] })
(this.initialStep one of { 1.7, 3.0, 60.0 })  ==>  (y1[] == orig(y1[]))
(this.initialStep one of { 1.7, 3.0, 60.0 })  ==>  (y1[] one of { [0.0], [1.0, 0.1], [1.0, 2.0, 3.0] })
(this.initialStep one of { 1.7, 3.0, 60.0 })  ==>  (yDot0[] one of { [-1.0, -0.1], [1.0E-4, 2.0E-5, 3.0E-6], [1.0] })
(this.initialStep one of { 1.7, 3.0, 60.0 })  ==>  (yDot1[] == orig(yDot1[]))
(this.initialStep one of { 1.7, 3.0, 60.0 })  ==>  (yDot1[] elements == 0.0)
(this.initialStep one of { 1.7, 3.0, 60.0 })  ==>  (yDot1[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0] })
this.maxStep >= 0.1
this.stepStart >= 0.0
this.isLastStep == false
this.resetOccurred == false
this.statesInitialized == false
this.evaluations.maximalCount one of { 5000, 50000, 2147483647 }
this.evaluations.count one of { 1, 2 }
this.expandable.time >= 0.0
this.evaluations.count >= orig(this.evaluations.count)
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator.resetInternalState():::ENTER
this.maxStep >= 0.1
this.evaluations.maximalCount one of { 5000, 50000, 2147483647 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator.resetInternalState():::EXIT
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecAbsoluteTolerance[] == orig(this.vecAbsoluteTolerance[])
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.vecRelativeTolerance[] == orig(this.vecRelativeTolerance[])
this.mainSetDimension == orig(this.mainSetDimension)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
this.expandable.primary == orig(this.expandable.primary)
this.expandable.primary.getClass().getName() == orig(this.expandable.primary.getClass().getName())
this.expandable.primaryMapper == orig(this.expandable.primaryMapper)
this.expandable.primaryMapper.firstIndex == orig(this.expandable.primaryMapper.firstIndex)
this.expandable.primaryMapper.dimension == orig(this.expandable.primaryMapper.dimension)
this.expandable.time == orig(this.expandable.time)
this.expandable.primaryState == orig(this.expandable.primaryState)
this.expandable.primaryState[] == orig(this.expandable.primaryState[])
this.expandable.primaryStateDot == orig(this.expandable.primaryStateDot)
this.expandable.primaryStateDot[] == orig(this.expandable.primaryStateDot[])
this.expandable.components == orig(this.expandable.components)
this.expandable.components[] == orig(this.expandable.components[])
this.expandable.components.getClass().getName() == orig(this.expandable.components.getClass().getName())
this.maxStep >= 0.1
this.stepStart == Double.NaN
this.evaluations.maximalCount one of { 5000, 50000, 2147483647 }
this.stepStart != orig(this.stepStart)
this.stepSize != orig(this.stepSize)
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator.sanityChecks(org.apache.commons.math3.ode.ExpandableStatefulODE, double):::ENTER
this.maxStep >= 0.1
this.stepStart == Double.NaN
this.resetOccurred == false
this.expandable.primaryMapper.dimension one of { 2, 3, 4 }
this.expandable.primaryStateDot[] elements != 0
equations.primaryMapper.firstIndex == 0
equations.time >= 0.0
equations.primaryStateDot[] elements == 0.0
equations.components[] elements != null
equations.components[].getClass().getName() elements == org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent.class
equations.components[].getClass().getName() one of { [], [org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent] }
equations.components.getClass().getName() == java.util.ArrayList.class
size(this.expandable.primaryState[]) one of { 2, 3, 4 }
size(this.expandable.primaryStateDot[]) one of { 2, 3, 4 }
size(equations.components[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator.sanityChecks(org.apache.commons.math3.ode.ExpandableStatefulODE, double):::EXIT
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecAbsoluteTolerance[] == orig(this.vecAbsoluteTolerance[])
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.vecRelativeTolerance[] == orig(this.vecRelativeTolerance[])
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
this.expandable.primary == orig(this.expandable.primary)
this.expandable.primary.getClass().getName() == orig(this.expandable.primary.getClass().getName())
this.expandable.primaryMapper == orig(this.expandable.primaryMapper)
this.expandable.primaryMapper.firstIndex == orig(this.expandable.primaryMapper.firstIndex)
this.expandable.primaryMapper.dimension == orig(this.expandable.primaryMapper.dimension)
this.expandable.time == orig(this.expandable.time)
this.expandable.primaryState == orig(this.expandable.primaryState)
this.expandable.primaryState[] == orig(this.expandable.primaryState[])
this.expandable.primaryStateDot == orig(this.expandable.primaryStateDot)
this.expandable.primaryStateDot[] == orig(this.expandable.primaryStateDot[])
this.expandable.components == orig(this.expandable.components)
this.expandable.components[] == orig(this.expandable.components[])
this.expandable.components.getClass().getName() == orig(this.expandable.components.getClass().getName())
equations.primary == orig(equations.primary)
equations.primary.getClass().getName() == orig(equations.primary.getClass().getName())
equations.primaryMapper == orig(equations.primaryMapper)
equations.primaryMapper.firstIndex == orig(equations.primaryMapper.firstIndex)
equations.primaryMapper.dimension == orig(equations.primaryMapper.dimension)
equations.time == orig(equations.time)
equations.primaryState == orig(equations.primaryState)
equations.primaryState[] == orig(equations.primaryState[])
equations.primaryStateDot == orig(equations.primaryStateDot)
equations.primaryStateDot[] == orig(equations.primaryStateDot[])
equations.components == orig(equations.components)
equations.components[] == orig(equations.components[])
equations.components.getClass().getName() == orig(equations.components.getClass().getName())
this.maxStep >= 0.1
this.stepStart == Double.NaN
this.resetOccurred == false
this.expandable.primaryMapper.dimension one of { 2, 3, 4 }
this.expandable.primaryStateDot[] elements != 0
equations.primaryMapper.firstIndex == 0
equations.time >= 0.0
equations.primaryStateDot[] elements == 0.0
equations.components[] elements != null
equations.components[].getClass().getName() elements == org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent.class
equations.components[].getClass().getName() one of { [], [org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent] }
equations.components.getClass().getName() == java.util.ArrayList.class
size(this.expandable.primaryState[]) one of { 2, 3, 4 }
size(this.expandable.primaryStateDot[]) one of { 2, 3, 4 }
size(equations.components[]) one of { 0, 1 }
orig(this.mainSetDimension) % this.mainSetDimension == 0
this.mainSetDimension >= orig(this.mainSetDimension)
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator.setInitialStepSize(double):::ENTER
this.scalAbsoluteTolerance one of { 1.0E-14, 1.0E-10, 6.0E-4 }
this.scalRelativeTolerance one of { 1.0E-14, 1.0E-10, 6.0E-4 }
this.vecAbsoluteTolerance == null
this.vecRelativeTolerance == null
this.mainSetDimension one of { 0, 3 }
this.initialStep one of { -1.0, 60.0 }
this.minStep one of { 0.0, 0.001, 1.25 }
this.maxStep one of { 4.0, 100.0, 1000.0 }
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 1.0, 2.23606797749979 }
this.resetOccurred == false
this.name.toString one of { "Dormand-Prince 5(4)", "Dormand-Prince 8 (5, 3)" }
this.evaluations.maximalCount == 2147483647
this.evaluations.count one of { 0, 16 }
this.expandable.primary has only one value
this.expandable.primary.getClass().getName() == org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest$1.class
this.expandable.primaryMapper has only one value
this.expandable.primaryMapper.dimension == 3
this.expandable.time == 1.8782503799999986E9
this.expandable.primaryState has only one value
this.expandable.primaryState[] == [1.0060180356223287, 2.0012003599861288, 3.0001800053872327]
this.expandable.primaryState[] elements one of { 1.0060180356223287, 2.0012003599861288, 3.0001800053872327 }
this.expandable.primaryStateDot has only one value
this.expandable.primaryStateDot[] == [1.0046775721782596E-4, 2.0009335510782034E-5, 3.0001400032567033E-6]
this.expandable.primaryStateDot[] elements one of { 3.0001400032567033E-6, 2.0009335510782034E-5, 1.0046775721782596E-4 }
this.expandable.components has only one value
this.expandable.components[] == []
this.expandable.components[].getClass().getName() == []
initialStepSize one of { 1.7, 3.0, 60.0 }
size(this.expandable.primaryState[]) == 3
size(this.expandable.primaryStateDot[]) == 3
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator.setInitialStepSize(double):::EXIT
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.mainSetDimension == orig(this.mainSetDimension)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepSize == orig(this.stepSize)
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
this.expandable.primary == orig(this.expandable.primary)
this.expandable.primary.getClass().getName() == orig(this.expandable.primary.getClass().getName())
this.expandable.primaryMapper == orig(this.expandable.primaryMapper)
this.expandable.primaryMapper.firstIndex == orig(this.expandable.primaryMapper.firstIndex)
this.expandable.primaryMapper.dimension == orig(this.expandable.primaryMapper.dimension)
this.expandable.time == orig(this.expandable.time)
this.expandable.primaryState == orig(this.expandable.primaryState)
this.expandable.primaryState[] == orig(this.expandable.primaryState[])
this.expandable.primaryStateDot == orig(this.expandable.primaryStateDot)
this.expandable.primaryStateDot[] == orig(this.expandable.primaryStateDot[])
this.expandable.components == orig(this.expandable.components)
this.expandable.components[] == orig(this.expandable.components[])
this.expandable.components.getClass().getName() == orig(this.expandable.components.getClass().getName())
this.scalAbsoluteTolerance one of { 1.0E-14, 1.0E-10, 6.0E-4 }
this.scalRelativeTolerance one of { 1.0E-14, 1.0E-10, 6.0E-4 }
this.vecAbsoluteTolerance == null
this.vecRelativeTolerance == null
this.mainSetDimension one of { 0, 3 }
this.initialStep one of { 1.7, 3.0, 60.0 }
this.minStep one of { 0.0, 0.001, 1.25 }
this.maxStep one of { 4.0, 100.0, 1000.0 }
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 1.0, 2.23606797749979 }
this.resetOccurred == false
this.name.toString one of { "Dormand-Prince 5(4)", "Dormand-Prince 8 (5, 3)" }
this.evaluations.maximalCount == 2147483647
this.evaluations.count one of { 0, 16 }
this.expandable.primary has only one value
this.expandable.primary.getClass().getName() == org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest$1.class
this.expandable.primaryMapper has only one value
this.expandable.primaryMapper.dimension == 3
this.expandable.time == 1.8782503799999986E9
this.expandable.primaryState has only one value
this.expandable.primaryState[] == [1.0060180356223287, 2.0012003599861288, 3.0001800053872327]
this.expandable.primaryState[] elements one of { 1.0060180356223287, 2.0012003599861288, 3.0001800053872327 }
this.expandable.primaryStateDot has only one value
this.expandable.primaryStateDot[] == [1.0046775721782596E-4, 2.0009335510782034E-5, 3.0001400032567033E-6]
this.expandable.primaryStateDot[] elements one of { 3.0001400032567033E-6, 2.0009335510782034E-5, 1.0046775721782596E-4 }
this.expandable.components has only one value
this.expandable.components[] == []
this.expandable.components[].getClass().getName() == []
size(this.expandable.primaryState[]) == 3
size(this.expandable.primaryStateDot[]) == 3
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator.setStepSizeControl(double, double, double, double):::ENTER
this.vecAbsoluteTolerance == null
this.vecRelativeTolerance == null
this.mainSetDimension one of { 0, 2 }
this.initialStep one of { -1.0, 0.0 }
this.minStep == 0.0
this.maxStep one of { 0.0, 4.0, Infinity }
this.stepStart == Double.NaN
this.stepSize one of { 0.0, Double.NaN }
this.resetOccurred == false
this.evaluations.maximalCount == 2147483647
this.expandable.primary.getClass().getName() == org.apache.commons.math3.ode.TestProblem1.class
this.expandable.primaryMapper.dimension == 2
this.expandable.time == 4.0
this.expandable.primaryState[] elements one of { 0.0018315638888783223, 0.01831563888878323 }
this.expandable.primaryState[] sorted by >
this.expandable.primaryStateDot[] sorted by <
this.expandable.components[] == []
this.expandable.components[].getClass().getName() == []
size(this.expandable.primaryState[]) == 2
size(this.expandable.primaryStateDot[]) == 2
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator.setStepSizeControl(double, double, double, double):::EXIT
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.mainSetDimension == orig(this.mainSetDimension)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
this.expandable.primary == orig(this.expandable.primary)
this.expandable.primary.getClass().getName() == orig(this.expandable.primary.getClass().getName())
this.expandable.primaryMapper == orig(this.expandable.primaryMapper)
this.expandable.primaryMapper.firstIndex == orig(this.expandable.primaryMapper.firstIndex)
this.expandable.primaryMapper.dimension == orig(this.expandable.primaryMapper.dimension)
this.expandable.time == orig(this.expandable.time)
this.expandable.primaryState == orig(this.expandable.primaryState)
this.expandable.primaryState[] == orig(this.expandable.primaryState[])
this.expandable.primaryStateDot == orig(this.expandable.primaryStateDot)
this.expandable.primaryStateDot[] == orig(this.expandable.primaryStateDot[])
this.expandable.components == orig(this.expandable.components)
this.expandable.components[] == orig(this.expandable.components[])
this.expandable.components.getClass().getName() == orig(this.expandable.components.getClass().getName())
this.vecAbsoluteTolerance == null
this.vecRelativeTolerance == null
this.mainSetDimension one of { 0, 2 }
this.initialStep == -1.0
this.maxStep >= 0.1
this.stepStart == Double.NaN
this.stepSize one of { 0.0, Double.NaN }
this.resetOccurred == false
this.evaluations.maximalCount == 2147483647
this.expandable.primary.getClass().getName() == org.apache.commons.math3.ode.TestProblem1.class
this.expandable.primaryMapper.dimension == 2
this.expandable.time == 4.0
this.expandable.primaryState[] elements one of { 0.0018315638888783223, 0.01831563888878323 }
this.expandable.primaryState[] sorted by >
this.expandable.primaryStateDot[] sorted by <
this.expandable.components[] == []
this.expandable.components[].getClass().getName() == []
size(this.expandable.primaryState[]) == 2
size(this.expandable.primaryStateDot[]) == 2
this.initialStep <= orig(this.initialStep)
this.minStep >= orig(this.minStep)
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator.setStepSizeControl(double, double, double[], double[]):::ENTER
this.scalAbsoluteTolerance == 0.0
this.scalRelativeTolerance == 0.0
this.vecAbsoluteTolerance == null
this.vecRelativeTolerance == null
this.mainSetDimension == 0
this.initialStep == 0.0
this.minStep == 0.0
this.maxStep == 0.0
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.isLastStep == false
this.resetOccurred == false
this.statesInitialized == false
this.name.toString one of { "Dormand-Prince 5(4)", "Higham-Hall 5(4)" }
this.evaluations.maximalCount == 2147483647
this.evaluations.count == 0
this.expandable == null
minimalStep one of { 0.0, 1.0E-8 }
maximalStep one of { 20.0, 100.0 }
absoluteTolerance[] elements one of { 1.0E-10, 1.0E-8, 1.0E-4 }
absoluteTolerance[] one of { [1.0E-10, 1.0E-10], [1.0E-8, 1.0E-8, 1.0E-10, 1.0E-10], [1.0E-4, 1.0E-4] }
absoluteTolerance[] sorted by >=
relativeTolerance[] elements one of { 1.0E-10, 1.0E-8, 1.0E-4 }
relativeTolerance[] one of { [1.0E-10, 1.0E-10], [1.0E-10, 1.0E-10, 1.0E-8, 1.0E-8], [1.0E-4, 1.0E-4] }
relativeTolerance[] sorted by <=
size(absoluteTolerance[]) one of { 2, 4 }
size(relativeTolerance[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator.setStepSizeControl(double, double, double[], double[]):::EXIT
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.mainSetDimension == orig(this.mainSetDimension)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
absoluteTolerance[] == orig(absoluteTolerance[])
relativeTolerance[] == orig(relativeTolerance[])
this.scalAbsoluteTolerance == 0.0
this.scalRelativeTolerance == 0.0
this.mainSetDimension == 0
this.initialStep == -1.0
this.minStep one of { 0.0, 1.0E-8 }
this.maxStep one of { 20.0, 100.0 }
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.isLastStep == false
this.resetOccurred == false
this.statesInitialized == false
this.name.toString one of { "Dormand-Prince 5(4)", "Higham-Hall 5(4)" }
this.evaluations.maximalCount == 2147483647
this.evaluations.count == 0
this.expandable == null
absoluteTolerance[] elements one of { 1.0E-10, 1.0E-8, 1.0E-4 }
absoluteTolerance[] one of { [1.0E-10, 1.0E-10], [1.0E-8, 1.0E-8, 1.0E-10, 1.0E-10], [1.0E-4, 1.0E-4] }
absoluteTolerance[] sorted by >=
relativeTolerance[] elements one of { 1.0E-10, 1.0E-8, 1.0E-4 }
relativeTolerance[] one of { [1.0E-10, 1.0E-10], [1.0E-10, 1.0E-10, 1.0E-8, 1.0E-8], [1.0E-4, 1.0E-4] }
relativeTolerance[] sorted by <=
this.minStep >= orig(this.minStep)
this.maxStep > orig(this.maxStep)
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator:::CLASS
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_C has only one value
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_C[] == [0.5, 0.5, 1.0]
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_C[] elements one of { 0.5, 1.0 }
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_C[] sorted by <=
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_A has only one value
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_A.getClass().getName() == double[][].class
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_A[] contains no nulls and has only one value, of length 3
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_A[] elements != null
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_B has only one value
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_B[] == [0.16666666666666666, 0.3333333333333333, 0.3333333333333333, 0.16666666666666666]
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_B[] elements one of { 0.16666666666666666, 0.3333333333333333 }
size(org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_C[]) == 3
size(org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_A[]) == 3
size(org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_B[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator:::OBJECT
this.c has only one value
this.c[] == [0.5, 0.5, 1.0]
this.c[] elements one of { 0.5, 1.0 }
this.c[] sorted by <=
this.a has only one value
this.a.getClass().getName() == double[][].class
this.a[] contains no nulls and has only one value, of length 3
this.a[] elements != null
this.b has only one value
this.b[] == [0.16666666666666666, 0.3333333333333333, 0.3333333333333333, 0.16666666666666666]
this.b[] elements one of { 0.16666666666666666, 0.3333333333333333 }
this.prototype.getClass().getName() == org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.class
this.prototype.previousState == null
this.prototype.yDotK == null
this.prototype.integrator == null
this.prototype.h == Double.NaN
this.prototype.currentState == null
this.prototype.interpolatedTime == Double.NaN
this.prototype.interpolatedState == null
this.prototype.interpolatedDerivatives == null
this.prototype.interpolatedPrimaryState == null
this.prototype.interpolatedPrimaryDerivatives == null
this.prototype.interpolatedSecondaryState == null
this.prototype.interpolatedSecondaryDerivatives == null
this.prototype.globalPreviousTime == Double.NaN
this.prototype.globalCurrentTime == Double.NaN
this.prototype.softPreviousTime == Double.NaN
this.prototype.softCurrentTime == Double.NaN
this.prototype.finalized == false
this.prototype.forward == true
this.prototype.dirtyState == true
this.prototype.primaryMapper == null
this.prototype.secondaryMappers == null
this.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.isLastStep == false
this.resetOccurred == false
this.eventsStates.getClass().getName() == java.util.ArrayList.class
this.statesInitialized == false
this.name has only one value
this.name.toString == "classical Runge-Kutta"
this.evaluations.maximalCount == 2147483647
this.evaluations.count == 0
this.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
this.expandable == null
size(this.c[]) == 3
size(this.a[]) == 3
size(this.b[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator.ClassicalRungeKuttaIntegrator(double):::ENTER
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator.ClassicalRungeKuttaIntegrator(double):::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$1:::OBJECT
this has only one value
this.val$k has only one value
this.val$k[] == [1.0E-4, 1.0E-5, 1.0E-6]
this.val$k[] elements one of { 1.0E-6, 1.0E-5, 1.0E-4 }
this.val$k[] sorted by >
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this has only one value
size(this.val$k[]) == 3
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$1.(org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, double[]):::ENTER
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this has only one value
$hidden$2 has only one value
$hidden$2[] == [1.0E-4, 1.0E-5, 1.0E-6]
$hidden$2[] elements one of { 1.0E-6, 1.0E-5, 1.0E-4 }
size($hidden$2[]) == 3
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$1.(org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, double[]):::EXIT
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this)
$hidden$2[] == orig($hidden$2[])
$hidden$2[] == [1.0E-4, 1.0E-5, 1.0E-6]
$hidden$2[] elements one of { 1.0E-6, 1.0E-5, 1.0E-4 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$1.computeDerivatives(double, double[], double[]):::ENTER
t == 1.8782503200000029E9
y[] sorted by <
yDot[] sorted by >=
size(y[]) == 3
size(yDot[]) == 3
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$1.computeDerivatives(double, double[], double[]):::EXIT
this.val$k == orig(this.val$k)
this.val$k[] == orig(this.val$k[])
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this)
y[] == orig(y[])
y[] sorted by <
yDot[] sorted by >
yDot[] >= orig(yDot[]) (elementwise)
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$1.getDimension():::ENTER
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$1.getDimension():::EXIT
this.val$k == orig(this.val$k)
this.val$k[] == orig(this.val$k[])
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this)
return == 3
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$2:::OBJECT
this has only one value
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$2.(org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest):::ENTER
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$2.(org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest):::EXIT
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this)
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$2.eventOccurred(double, double[], boolean):::ENTER
t == 1.8782503799999986E9
y has only one value
y[] == [1.006018035622264, 2.0012003599861283, 3.0001800053872327]
y[] elements one of { 1.006018035622264, 2.0012003599861283, 3.0001800053872327 }
increasing == true
size(y[]) == 3
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$2.eventOccurred(double, double[], boolean):::EXIT
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this)
y[] == orig(y[])
y[] == [1.006018035622264, 2.0012003599861283, 3.0001800053872327]
y[] elements one of { 1.006018035622264, 2.0012003599861283, 3.0001800053872327 }
return has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.STOP has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.RESET_STATE has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.RESET_DERIVATIVES has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.CONTINUE has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES.getClass().getName() == org.apache.commons.math3.ode.events.EventHandler$Action[].class
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[] contains no nulls and has only one value, of length 4
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[].getClass().getName() == [org.apache.commons.math3.ode.events.EventHandler.Action, org.apache.commons.math3.ode.events.EventHandler.Action, org.apache.commons.math3.ode.events.EventHandler.Action, org.apache.commons.math3.ode.events.EventHandler.Action]
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[].getClass().getName() elements == org.apache.commons.math3.ode.events.EventHandler.Action.class
size(org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$2.g(double, double[]):::ENTER
t == 1.8782503200000029E9
y[] sorted by <
size(y[]) == 3
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$2.g(double, double[]):::EXIT
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this)
y[] == orig(y[])
y[] sorted by <
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$2.init(double, double[], double):::ENTER
t0 == 1.8782503200000029E9
y0 has only one value
y0[] == [1.0, 2.0, 3.0]
y0[] elements one of { 1.0, 2.0, 3.0 }
t == 1.8782504999999986E9
size(y0[]) == 3
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$2.init(double, double[], double):::EXIT
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this)
y0[] == orig(y0[])
y0[] == [1.0, 2.0, 3.0]
y0[] elements one of { 1.0, 2.0, 3.0 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$3:::OBJECT
this has only one value
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$3.(org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest):::ENTER
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$3.(org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest):::EXIT
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this)
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$3.handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean):::ENTER
interpolator has only one value
interpolator.getClass().getName() == org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.class
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$3.handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean):::EXIT
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this)
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$3.init(double, double[], double):::ENTER
t0 == 0.0
y0 has only one value
y0[] == [0.0]
y0[] elements == 0.0
t == 5.0
size(y0[]) == 1
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$3.init(double, double[], double):::EXIT
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this)
y0[] == orig(y0[])
y0[] == [0.0]
y0[] elements == 0.0
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$4:::OBJECT
this has only one value
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$4.(org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest):::ENTER
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$4.(org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest):::EXIT
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this)
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$4.computeDerivatives(double, double[], double[]):::ENTER
y has only one value
dot has only one value
dot[] elements one of { 0.0, 1.0 }
dot[] one of { [0.0], [1.0] }
size(y[]) == 1
size(dot[]) == 1
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$4.computeDerivatives(double, double[], double[]):::EXIT
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this)
y[] == orig(y[])
dot[] == [1.0]
dot[] elements == 1.0
dot[] >= orig(dot[]) (elementwise)
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$4.getDimension():::ENTER
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$4.getDimension():::EXIT
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this)
return == 1
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$KeplerHandler:::OBJECT
this has only one value
this.pb has only one value
this.pb.e == 0.9
this.pb.y has only one value
this.pb.n == 4
this.pb.calls >= 0
this.pb.t0 == 0.0
this.pb.y0 has only one value
this.pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
this.pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
this.pb.t1 == 20.0
this.pb.errorScale has only one value
this.pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
this.pb.errorScale[] elements == 1.0
size(this.pb.y[]) == 4
size(this.pb.y0[]) == 4
size(this.pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$KeplerHandler.KeplerHandler(org.apache.commons.math3.ode.TestProblem3):::ENTER
pb has only one value
pb.e == 0.9
pb.y has only one value
pb.y[] == [0.0, 0.0, 0.0, 0.0]
pb.y[] elements == 0.0
pb.n == 4
pb.calls == 0
pb.t0 == 0.0
pb.y0 has only one value
pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
pb.t1 == 20.0
pb.errorScale has only one value
pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
pb.errorScale[] elements == 1.0
size(pb.y[]) == 4
size(pb.y0[]) == 4
size(pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$KeplerHandler.KeplerHandler(org.apache.commons.math3.ode.TestProblem3):::EXIT
pb.e == orig(pb.e)
pb.y == orig(pb.y)
pb.y[] == orig(pb.y[])
pb.n == orig(pb.n)
pb.calls == orig(pb.calls)
pb.t0 == orig(pb.t0)
pb.y0 == orig(pb.y0)
pb.y0[] == orig(pb.y0[])
pb.t1 == orig(pb.t1)
pb.errorScale == orig(pb.errorScale)
pb.errorScale[] == orig(pb.errorScale[])
this.maxError == 0.0
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
pb.e == 0.9
pb.y has only one value
pb.y[] == [0.0, 0.0, 0.0, 0.0]
pb.y[] elements == 0.0
pb.n == 4
pb.calls == 0
pb.t0 == 0.0
pb.y0 has only one value
pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
pb.t1 == 20.0
pb.errorScale has only one value
pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
pb.errorScale[] elements == 1.0
size(pb.y[]) == 4
size(pb.y0[]) == 4
size(pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$KeplerHandler.handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean):::ENTER
interpolator has only one value
interpolator.getClass().getName() == org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.class
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$KeplerHandler.handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean):::EXIT
this.pb == orig(this.pb)
this.pb.e == orig(this.pb.e)
this.pb.y == orig(this.pb.y)
this.pb.n == orig(this.pb.n)
this.pb.calls == orig(this.pb.calls)
this.pb.t0 == orig(this.pb.t0)
this.pb.y0 == orig(this.pb.y0)
this.pb.y0[] == orig(this.pb.y0[])
this.pb.t1 == orig(this.pb.t1)
this.pb.errorScale == orig(this.pb.errorScale)
this.pb.errorScale[] == orig(this.pb.errorScale[])
size(this.pb.y[]) == orig(size(this.pb.y[]))
this.pb.y[] elements != 0
this.maxError >= orig(this.maxError)
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$KeplerHandler.init(double, double[], double):::ENTER
this.maxError == 0.0
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
t0 == 0.0
y0 has only one value
y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
t == 20.0
size(y0[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$KeplerHandler.init(double, double[], double):::EXIT
this.maxError == orig(this.maxError)
this.pb == orig(this.pb)
this.pb.e == orig(this.pb.e)
this.pb.y == orig(this.pb.y)
this.pb.y[] == orig(this.pb.y[])
this.pb.n == orig(this.pb.n)
this.pb.calls == orig(this.pb.calls)
this.pb.t0 == orig(this.pb.t0)
this.pb.y0 == orig(this.pb.y0)
this.pb.y0[] == orig(this.pb.y0[])
this.pb.t1 == orig(this.pb.t1)
this.pb.errorScale == orig(this.pb.errorScale)
this.pb.errorScale[] == orig(this.pb.errorScale[])
y0[] == orig(y0[])
this.maxError == 0.0
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest:::OBJECT
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.ClassicalRungeKuttaIntegratorTest():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testBackward():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testBackward():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testBigStep():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testBigStep():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testDecreasingSteps():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testDecreasingSteps():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testKepler():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testKepler():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testMissedEndEvent():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testMissedEndEvent():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testSmallStep():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testSmallStep():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testStepSize():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testStepSize():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator:::CLASS
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator:::OBJECT
this.yDotK.getClass().getName() == double[][].class
this.yDotK[] elements != null
this.integrator.getClass().getName() == org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator.class
this.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.integrator.stepSize >= -0.25
this.integrator.eventsStates.getClass().getName() == java.util.ArrayList.class
this.integrator.name has only one value
this.integrator.name.toString == "classical Runge-Kutta"
this.integrator.evaluations.maximalCount == 2147483647
this.integrator.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
this.integrator.expandable.time one of { 0.0, 1.8782503200000029E9 }
this.integrator.expandable.components[] == []
this.integrator.expandable.components[].getClass().getName() == []
this.integrator.expandable.components.getClass().getName() == java.util.ArrayList.class
this.h >= -0.25
this.interpolatedSecondaryState.getClass().getName() == double[][].class
this.interpolatedSecondaryState[] == []
this.interpolatedSecondaryDerivatives.getClass().getName() == double[][].class
this.interpolatedSecondaryDerivatives[] == []
this.primaryMapper.firstIndex == 0
this.primaryMapper.dimension >= 1
this.secondaryMappers.getClass().getName() == org.apache.commons.math3.ode.EquationsMapper[].class
this.secondaryMappers[] == []
this.secondaryMappers[].getClass().getName() == []
this.secondaryMappers[].firstIndex == []
this.secondaryMappers[].dimension == []
size(this.previousState[]) >= 1
size(this.yDotK[]) == 4
size(this.integrator.expandable.primaryState[]) >= 1
size(this.integrator.expandable.primaryStateDot[]) >= 1
size(this.currentState[]) >= 1
size(this.interpolatedState[]) >= 1
size(this.interpolatedDerivatives[]) >= 1
size(this.interpolatedPrimaryState[]) >= 1
size(this.interpolatedPrimaryDerivatives[]) >= 1
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.ClassicalRungeKuttaStepInterpolator():::EXIT
this.previousState == null
this.yDotK == null
this.integrator == null
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.interpolatedPrimaryState == null
this.interpolatedPrimaryDerivatives == null
this.interpolatedSecondaryState == null
this.interpolatedSecondaryDerivatives == null
this.globalPreviousTime == Double.NaN
this.globalCurrentTime == Double.NaN
this.softPreviousTime == Double.NaN
this.softCurrentTime == Double.NaN
this.finalized == false
this.forward == true
this.dirtyState == true
this.primaryMapper == null
this.secondaryMappers == null
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.ClassicalRungeKuttaStepInterpolator(org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator):::ENTER
interpolator.yDotK.getClass().getName() == double[][].class
interpolator.yDotK[] contains no nulls and has only one value, of length 4
interpolator.yDotK[] elements != null
interpolator.integrator.getClass().getName() == org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator.class
interpolator.integrator.stepHandlers has only one value
interpolator.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.stepSize one of { 0.0019999999994659845, 0.005999999999999999 }
interpolator.integrator.resetOccurred == false
interpolator.integrator.eventsStates has only one value
interpolator.integrator.eventsStates.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.statesInitialized == true
interpolator.integrator.name has only one value
interpolator.integrator.name.toString == "classical Runge-Kutta"
interpolator.integrator.evaluations has only one value
interpolator.integrator.expandable has only one value
interpolator.h one of { 0.0019999999994659845, 0.005999999999999999, Double.NaN }
interpolator.h <= 0.006000000000000227
interpolator.currentState[] elements != 0
interpolator.interpolatedState[] elements != 0
interpolator.interpolatedDerivatives[] elements != 0
interpolator.interpolatedPrimaryState[] elements != 0
interpolator.interpolatedPrimaryDerivatives[] == [0.0, 0.0, 0.0, 0.0]
interpolator.interpolatedPrimaryDerivatives[] elements == 0.0
interpolator.interpolatedSecondaryState.getClass().getName() == double[][].class
interpolator.interpolatedSecondaryState[] == []
interpolator.interpolatedSecondaryDerivatives.getClass().getName() == double[][].class
interpolator.interpolatedSecondaryDerivatives[] == []
interpolator.finalized == true
interpolator.forward == true
interpolator.primaryMapper.firstIndex == 0
interpolator.primaryMapper.dimension == 4
interpolator.secondaryMappers.getClass().getName() == org.apache.commons.math3.ode.EquationsMapper[].class
interpolator.secondaryMappers[] == []
interpolator.secondaryMappers[].getClass().getName() == []
interpolator.secondaryMappers[].firstIndex == []
interpolator.secondaryMappers[].dimension == []
size(interpolator.previousState[]) == 4
size(interpolator.yDotK[]) == 4
size(interpolator.currentState[]) == 4
size(interpolator.interpolatedState[]) == 4
size(interpolator.interpolatedDerivatives[]) == 4
size(interpolator.interpolatedPrimaryState[]) == 4
size(interpolator.interpolatedPrimaryDerivatives[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.ClassicalRungeKuttaStepInterpolator(org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator):::EXIT
interpolator.previousState == orig(interpolator.previousState)
interpolator.previousState[] == orig(interpolator.previousState[])
interpolator.yDotK == orig(interpolator.yDotK)
interpolator.yDotK.getClass().getName() == orig(interpolator.yDotK.getClass().getName())
interpolator.yDotK[] == orig(interpolator.yDotK[])
interpolator.integrator == orig(interpolator.integrator)
interpolator.integrator.getClass().getName() == orig(interpolator.integrator.getClass().getName())
interpolator.integrator.stepHandlers == orig(interpolator.integrator.stepHandlers)
interpolator.integrator.stepHandlers.getClass().getName() == orig(interpolator.integrator.stepHandlers.getClass().getName())
interpolator.integrator.stepStart == orig(interpolator.integrator.stepStart)
interpolator.integrator.stepSize == orig(interpolator.integrator.stepSize)
interpolator.integrator.isLastStep == orig(interpolator.integrator.isLastStep)
interpolator.integrator.resetOccurred == orig(interpolator.integrator.resetOccurred)
interpolator.integrator.eventsStates == orig(interpolator.integrator.eventsStates)
interpolator.integrator.eventsStates.getClass().getName() == orig(interpolator.integrator.eventsStates.getClass().getName())
interpolator.integrator.statesInitialized == orig(interpolator.integrator.statesInitialized)
interpolator.integrator.name == orig(interpolator.integrator.name)
interpolator.integrator.name.toString == orig(interpolator.integrator.name.toString)
interpolator.integrator.evaluations == orig(interpolator.integrator.evaluations)
interpolator.integrator.expandable == orig(interpolator.integrator.expandable)
interpolator.currentState == orig(interpolator.currentState)
interpolator.currentState[] == orig(interpolator.currentState[])
interpolator.interpolatedState == orig(interpolator.interpolatedState)
interpolator.interpolatedState[] == orig(interpolator.interpolatedState[])
interpolator.interpolatedDerivatives == orig(interpolator.interpolatedDerivatives)
interpolator.interpolatedDerivatives[] == orig(interpolator.interpolatedDerivatives[])
interpolator.interpolatedPrimaryState == orig(interpolator.interpolatedPrimaryState)
interpolator.interpolatedPrimaryState[] == orig(interpolator.interpolatedPrimaryState[])
interpolator.interpolatedPrimaryDerivatives == orig(interpolator.interpolatedPrimaryDerivatives)
interpolator.interpolatedPrimaryDerivatives[] == orig(interpolator.interpolatedPrimaryDerivatives[])
interpolator.interpolatedSecondaryState == orig(interpolator.interpolatedSecondaryState)
interpolator.interpolatedSecondaryState.getClass().getName() == orig(interpolator.interpolatedSecondaryState.getClass().getName())
interpolator.interpolatedSecondaryState[] == orig(interpolator.interpolatedSecondaryState[])
interpolator.interpolatedSecondaryDerivatives == orig(interpolator.interpolatedSecondaryDerivatives)
interpolator.interpolatedSecondaryDerivatives.getClass().getName() == orig(interpolator.interpolatedSecondaryDerivatives.getClass().getName())
interpolator.interpolatedSecondaryDerivatives[] == orig(interpolator.interpolatedSecondaryDerivatives[])
interpolator.finalized == orig(interpolator.finalized)
interpolator.forward == orig(interpolator.forward)
interpolator.dirtyState == orig(interpolator.dirtyState)
interpolator.primaryMapper == orig(interpolator.primaryMapper)
interpolator.primaryMapper.firstIndex == orig(interpolator.primaryMapper.firstIndex)
interpolator.primaryMapper.dimension == orig(interpolator.primaryMapper.dimension)
interpolator.secondaryMappers == orig(interpolator.secondaryMappers)
interpolator.secondaryMappers.getClass().getName() == orig(interpolator.secondaryMappers.getClass().getName())
interpolator.secondaryMappers[] == orig(interpolator.secondaryMappers[])
interpolator.secondaryMappers[].firstIndex == orig(interpolator.secondaryMappers[].firstIndex)
interpolator.secondaryMappers[].dimension == orig(interpolator.secondaryMappers[].dimension)
this.integrator == null
this.h one of { 0.0019999999994659845, 0.005999999999999999, Double.NaN }
this.h <= 0.006000000000000227
this.currentState[] elements != 0
this.interpolatedState[] elements != 0
this.interpolatedDerivatives[] elements != 0
this.interpolatedPrimaryState[] elements != 0
this.interpolatedPrimaryDerivatives[] == [0.0, 0.0, 0.0, 0.0]
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.finalized == true
this.forward == true
this.primaryMapper.dimension == 4
interpolator.yDotK.getClass().getName() == double[][].class
interpolator.yDotK[] contains no nulls and has only one value, of length 4
interpolator.yDotK[] elements != null
interpolator.integrator.getClass().getName() == org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator.class
interpolator.integrator.stepHandlers has only one value
interpolator.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.stepSize one of { 0.0019999999994659845, 0.005999999999999999 }
interpolator.integrator.resetOccurred == false
interpolator.integrator.eventsStates has only one value
interpolator.integrator.eventsStates.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.statesInitialized == true
interpolator.integrator.name has only one value
interpolator.integrator.name.toString == "classical Runge-Kutta"
interpolator.integrator.evaluations has only one value
interpolator.integrator.expandable has only one value
interpolator.h one of { 0.0019999999994659845, 0.005999999999999999, Double.NaN }
interpolator.h <= 0.006000000000000227
interpolator.currentState[] elements != 0
interpolator.interpolatedState[] elements != 0
interpolator.interpolatedDerivatives[] elements != 0
interpolator.interpolatedPrimaryState[] elements != 0
interpolator.interpolatedPrimaryDerivatives[] == [0.0, 0.0, 0.0, 0.0]
interpolator.interpolatedPrimaryDerivatives[] elements == 0.0
interpolator.interpolatedSecondaryState.getClass().getName() == double[][].class
interpolator.interpolatedSecondaryState[] == []
interpolator.interpolatedSecondaryDerivatives.getClass().getName() == double[][].class
interpolator.interpolatedSecondaryDerivatives[] == []
interpolator.finalized == true
interpolator.forward == true
interpolator.primaryMapper.firstIndex == 0
interpolator.primaryMapper.dimension == 4
interpolator.secondaryMappers.getClass().getName() == org.apache.commons.math3.ode.EquationsMapper[].class
interpolator.secondaryMappers[] == []
interpolator.secondaryMappers[].getClass().getName() == []
interpolator.secondaryMappers[].firstIndex == []
interpolator.secondaryMappers[].dimension == []
size(this.previousState[]) == 4
size(this.currentState[]) == 4
size(this.interpolatedState[]) == 4
size(this.interpolatedDerivatives[]) == 4
size(this.interpolatedPrimaryState[]) == 4
size(this.interpolatedPrimaryDerivatives[]) == 4
size(interpolator.previousState[]) == 4
size(interpolator.yDotK[]) == 4
size(interpolator.currentState[]) == 4
size(interpolator.interpolatedState[]) == 4
size(interpolator.interpolatedDerivatives[]) == 4
size(interpolator.interpolatedPrimaryState[]) == 4
size(interpolator.interpolatedPrimaryDerivatives[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::ENTER
this.dirtyState == true
theta <= 1.0
theta >= 0.0
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::EXIT
this.previousState == orig(this.previousState)
this.previousState[] == orig(this.previousState[])
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.integrator.stepHandlers == orig(this.integrator.stepHandlers)
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.stepHandlers.getClass().getName())
this.integrator.stepStart == orig(this.integrator.stepStart)
this.integrator.stepSize == orig(this.integrator.stepSize)
this.integrator.isLastStep == orig(this.integrator.isLastStep)
this.integrator.resetOccurred == orig(this.integrator.resetOccurred)
this.integrator.eventsStates == orig(this.integrator.eventsStates)
this.integrator.eventsStates.getClass().getName() == orig(this.integrator.eventsStates.getClass().getName())
this.integrator.statesInitialized == orig(this.integrator.statesInitialized)
this.integrator.name == orig(this.integrator.name)
this.integrator.name.toString == orig(this.integrator.name.toString)
this.integrator.evaluations == orig(this.integrator.evaluations)
this.integrator.evaluations.maximalCount == orig(this.integrator.evaluations.maximalCount)
this.integrator.evaluations.count == orig(this.integrator.evaluations.count)
this.integrator.evaluations.maxCountCallback == orig(this.integrator.evaluations.maxCountCallback)
this.integrator.evaluations.maxCountCallback.getClass().getName() == orig(this.integrator.evaluations.maxCountCallback.getClass().getName())
this.integrator.expandable == orig(this.integrator.expandable)
this.integrator.expandable.primary == orig(this.integrator.expandable.primary)
this.integrator.expandable.primary.getClass().getName() == orig(this.integrator.expandable.primary.getClass().getName())
this.integrator.expandable.primaryMapper == orig(this.integrator.expandable.primaryMapper)
this.integrator.expandable.time == orig(this.integrator.expandable.time)
this.integrator.expandable.primaryState == orig(this.integrator.expandable.primaryState)
this.integrator.expandable.primaryState[] == orig(this.integrator.expandable.primaryState[])
this.integrator.expandable.primaryStateDot == orig(this.integrator.expandable.primaryStateDot)
this.integrator.expandable.primaryStateDot[] == orig(this.integrator.expandable.primaryStateDot[])
this.integrator.expandable.components == orig(this.integrator.expandable.components)
this.integrator.expandable.components[] == orig(this.integrator.expandable.components[])
this.integrator.expandable.components.getClass().getName() == orig(this.integrator.expandable.components.getClass().getName())
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedPrimaryState == orig(this.interpolatedPrimaryState)
this.interpolatedPrimaryState[] == orig(this.interpolatedPrimaryState[])
this.interpolatedPrimaryDerivatives == orig(this.interpolatedPrimaryDerivatives)
this.interpolatedPrimaryDerivatives[] == orig(this.interpolatedPrimaryDerivatives[])
this.interpolatedSecondaryState == orig(this.interpolatedSecondaryState)
this.interpolatedSecondaryState.getClass().getName() == orig(this.interpolatedSecondaryState.getClass().getName())
this.interpolatedSecondaryState[] == orig(this.interpolatedSecondaryState[])
this.interpolatedSecondaryDerivatives == orig(this.interpolatedSecondaryDerivatives)
this.interpolatedSecondaryDerivatives.getClass().getName() == orig(this.interpolatedSecondaryDerivatives.getClass().getName())
this.interpolatedSecondaryDerivatives[] == orig(this.interpolatedSecondaryDerivatives[])
this.globalPreviousTime == orig(this.globalPreviousTime)
this.globalCurrentTime == orig(this.globalCurrentTime)
this.softPreviousTime == orig(this.softPreviousTime)
this.softCurrentTime == orig(this.softCurrentTime)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.secondaryMappers == orig(this.secondaryMappers)
this.secondaryMappers.getClass().getName() == orig(this.secondaryMappers.getClass().getName())
this.secondaryMappers[] == orig(this.secondaryMappers[])
this.secondaryMappers[].firstIndex == orig(this.secondaryMappers[].firstIndex)
this.secondaryMappers[].dimension == orig(this.secondaryMappers[].dimension)
size(this.interpolatedState[]) == orig(size(this.interpolatedState[]))
size(this.interpolatedDerivatives[]) == orig(size(this.interpolatedDerivatives[]))
this.dirtyState == true
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.doCopy():::ENTER
this.yDotK[] contains no nulls and has only one value, of length 4
this.integrator.stepHandlers has only one value
this.integrator.stepSize one of { 0.0019999999994659845, 0.005999999999999999 }
this.integrator.resetOccurred == false
this.integrator.eventsStates has only one value
this.integrator.statesInitialized == true
this.integrator.evaluations has only one value
this.integrator.evaluations.maxCountCallback has only one value
this.integrator.expandable has only one value
this.integrator.expandable.primary has only one value
this.integrator.expandable.primary.getClass().getName() == org.apache.commons.math3.ode.TestProblem3.class
this.integrator.expandable.primaryMapper has only one value
this.integrator.expandable.time == 0.0
this.integrator.expandable.primaryState has only one value
this.integrator.expandable.primaryState[] elements != 0
this.integrator.expandable.primaryStateDot has only one value
this.integrator.expandable.primaryStateDot[] elements != 0
this.integrator.expandable.components has only one value
this.h one of { 0.0019999999994659845, 0.005999999999999999, Double.NaN }
this.h <= 0.006000000000000227
this.currentState[] elements != 0
this.interpolatedState[] elements != 0
this.interpolatedDerivatives[] elements != 0
this.interpolatedPrimaryState[] elements != 0
this.interpolatedPrimaryDerivatives[] == [0.0, 0.0, 0.0, 0.0]
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.finalized == true
this.forward == true
this.primaryMapper.dimension == 4
size(this.previousState[]) == 4
size(this.integrator.expandable.primaryState[]) == 4
size(this.integrator.expandable.primaryStateDot[]) == 4
size(this.currentState[]) == 4
size(this.interpolatedState[]) == 4
size(this.interpolatedDerivatives[]) == 4
size(this.interpolatedPrimaryState[]) == 4
size(this.interpolatedPrimaryDerivatives[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.doCopy():::EXIT
this.previousState == orig(this.previousState)
this.previousState[] == orig(this.previousState[])
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.integrator.stepHandlers == orig(this.integrator.stepHandlers)
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.stepHandlers.getClass().getName())
this.integrator.stepStart == orig(this.integrator.stepStart)
this.integrator.stepSize == orig(this.integrator.stepSize)
this.integrator.isLastStep == orig(this.integrator.isLastStep)
this.integrator.resetOccurred == orig(this.integrator.resetOccurred)
this.integrator.eventsStates == orig(this.integrator.eventsStates)
this.integrator.eventsStates.getClass().getName() == orig(this.integrator.eventsStates.getClass().getName())
this.integrator.statesInitialized == orig(this.integrator.statesInitialized)
this.integrator.name == orig(this.integrator.name)
this.integrator.name.toString == orig(this.integrator.name.toString)
this.integrator.evaluations == orig(this.integrator.evaluations)
this.integrator.evaluations.maximalCount == orig(this.integrator.evaluations.maximalCount)
this.integrator.evaluations.count == orig(this.integrator.evaluations.count)
this.integrator.evaluations.maxCountCallback == orig(this.integrator.evaluations.maxCountCallback)
this.integrator.evaluations.maxCountCallback.getClass().getName() == orig(this.integrator.evaluations.maxCountCallback.getClass().getName())
this.integrator.expandable == orig(this.integrator.expandable)
this.integrator.expandable.primary == orig(this.integrator.expandable.primary)
this.integrator.expandable.primary.getClass().getName() == orig(this.integrator.expandable.primary.getClass().getName())
this.integrator.expandable.primaryMapper == orig(this.integrator.expandable.primaryMapper)
this.integrator.expandable.time == orig(this.integrator.expandable.time)
this.integrator.expandable.primaryState == orig(this.integrator.expandable.primaryState)
this.integrator.expandable.primaryState[] == orig(this.integrator.expandable.primaryState[])
this.integrator.expandable.primaryStateDot == orig(this.integrator.expandable.primaryStateDot)
this.integrator.expandable.primaryStateDot[] == orig(this.integrator.expandable.primaryStateDot[])
this.integrator.expandable.components == orig(this.integrator.expandable.components)
this.integrator.expandable.components[] == orig(this.integrator.expandable.components[])
this.integrator.expandable.components.getClass().getName() == orig(this.integrator.expandable.components.getClass().getName())
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.interpolatedPrimaryState == orig(this.interpolatedPrimaryState)
this.interpolatedPrimaryState[] == orig(this.interpolatedPrimaryState[])
this.interpolatedPrimaryDerivatives == orig(this.interpolatedPrimaryDerivatives)
this.interpolatedPrimaryDerivatives[] == orig(this.interpolatedPrimaryDerivatives[])
this.interpolatedSecondaryState == orig(this.interpolatedSecondaryState)
this.interpolatedSecondaryState.getClass().getName() == orig(this.interpolatedSecondaryState.getClass().getName())
this.interpolatedSecondaryState[] == orig(this.interpolatedSecondaryState[])
this.interpolatedSecondaryDerivatives == orig(this.interpolatedSecondaryDerivatives)
this.interpolatedSecondaryDerivatives.getClass().getName() == orig(this.interpolatedSecondaryDerivatives.getClass().getName())
this.interpolatedSecondaryDerivatives[] == orig(this.interpolatedSecondaryDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.secondaryMappers == orig(this.secondaryMappers)
this.secondaryMappers.getClass().getName() == orig(this.secondaryMappers.getClass().getName())
this.secondaryMappers[] == orig(this.secondaryMappers[])
this.secondaryMappers[].firstIndex == orig(this.secondaryMappers[].firstIndex)
this.secondaryMappers[].dimension == orig(this.secondaryMappers[].dimension)
this.yDotK[] contains no nulls and has only one value, of length 4
this.integrator.stepHandlers has only one value
this.integrator.stepSize one of { 0.0019999999994659845, 0.005999999999999999 }
this.integrator.resetOccurred == false
this.integrator.eventsStates has only one value
this.integrator.statesInitialized == true
this.integrator.evaluations has only one value
this.integrator.evaluations.maxCountCallback has only one value
this.integrator.expandable has only one value
this.integrator.expandable.primary has only one value
this.integrator.expandable.primary.getClass().getName() == org.apache.commons.math3.ode.TestProblem3.class
this.integrator.expandable.primaryMapper has only one value
this.integrator.expandable.time == 0.0
this.integrator.expandable.primaryState has only one value
this.integrator.expandable.primaryState[] elements != 0
this.integrator.expandable.primaryStateDot has only one value
this.integrator.expandable.primaryStateDot[] elements != 0
this.integrator.expandable.components has only one value
this.h one of { 0.0019999999994659845, 0.005999999999999999, Double.NaN }
this.h <= 0.006000000000000227
this.currentState[] elements != 0
this.interpolatedState[] elements != 0
this.interpolatedDerivatives[] elements != 0
this.interpolatedPrimaryState[] elements != 0
this.interpolatedPrimaryDerivatives[] == [0.0, 0.0, 0.0, 0.0]
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.finalized == true
this.forward == true
this.primaryMapper.dimension == 4
return.getClass().getName() == org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.class
size(this.previousState[]) == 4
size(this.integrator.expandable.primaryState[]) == 4
size(this.integrator.expandable.primaryStateDot[]) == 4
size(this.currentState[]) == 4
size(this.interpolatedState[]) == 4
size(this.interpolatedDerivatives[]) == 4
size(this.interpolatedPrimaryState[]) == 4
size(this.interpolatedPrimaryDerivatives[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest:::OBJECT
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest.ClassicalRungeKuttaStepInterpolatorTest():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest.derivativesConsistency():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest.derivativesConsistency():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest.serialization():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest.serialization():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator:::CLASS
org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.METHOD_NAME has only one value
org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.METHOD_NAME.toString == "Dormand-Prince 5(4)"
org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.STATIC_C has only one value
org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.STATIC_C[] == [0.2, 0.3, 0.8, 0.8888888888888888, 1.0, 1.0]
org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.STATIC_C[] elements <= 1.0
org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.STATIC_C[] elements >= 0.2
org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.STATIC_C[] sorted by <=
org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.STATIC_A has only one value
org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.STATIC_A.getClass().getName() == double[][].class
org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.STATIC_A[] contains no nulls and has only one value, of length 6
org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.STATIC_A[] elements != null
org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.STATIC_B has only one value
org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.STATIC_B[] == [0.09114583333333333, 0.0, 0.44923629829290207, 0.6510416666666666, -0.322376179245283, 0.13095238095238096, 0.0]
org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.STATIC_B[] elements <= 0.6510416666666666
org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.STATIC_B[] elements >= -0.322376179245283
size(org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.STATIC_C[]) == 6
size(org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.STATIC_A[]) == 6
size(org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.STATIC_B[]) == 7
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator:::OBJECT
this.fsal == true
this.c has only one value
this.c[] == [0.2, 0.3, 0.8, 0.8888888888888888, 1.0, 1.0]
this.c[] elements <= 1.0
this.c[] elements >= 0.2
this.c[] sorted by <=
this.a has only one value
this.a.getClass().getName() == double[][].class
this.a[] contains no nulls and has only one value, of length 6
this.a[] elements != null
this.b has only one value
this.b[] == [0.09114583333333333, 0.0, 0.44923629829290207, 0.6510416666666666, -0.322376179245283, 0.13095238095238096, 0.0]
this.b[] elements <= 0.6510416666666666
this.b[] elements >= -0.322376179245283
this.prototype.getClass().getName() == org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator.class
this.prototype.previousState == null
this.prototype.yDotK == null
this.prototype.integrator == null
this.prototype.h == Double.NaN
this.prototype.currentState == null
this.prototype.interpolatedTime == Double.NaN
this.prototype.interpolatedState == null
this.prototype.interpolatedDerivatives == null
this.prototype.interpolatedPrimaryState == null
this.prototype.interpolatedPrimaryDerivatives == null
this.prototype.interpolatedSecondaryState == null
this.prototype.interpolatedSecondaryDerivatives == null
this.prototype.globalPreviousTime == Double.NaN
this.prototype.globalCurrentTime == Double.NaN
this.prototype.softPreviousTime == Double.NaN
this.prototype.softCurrentTime == Double.NaN
this.prototype.forward == true
this.prototype.dirtyState == true
this.prototype.primaryMapper == null
this.prototype.secondaryMappers == null
this.exp one of { -0.2, 0.0 }
this.safety one of { 0.0, 0.8, 0.9 }
this.minReduction one of { 0.0, 0.2, 0.3 }
this.maxGrowth one of { 0.0, 5.0, 10.0 }
this.scalAbsoluteTolerance >= 0.0
this.scalRelativeTolerance >= 0.0
this.vecAbsoluteTolerance[] elements one of { 1.0E-10, 1.0E-4 }
this.vecAbsoluteTolerance[] one of { [1.0E-10, 1.0E-10], [1.0E-4, 1.0E-4] }
this.vecAbsoluteTolerance[] sorted by ==
this.vecRelativeTolerance[] elements one of { 1.0E-10, 1.0E-4 }
this.vecRelativeTolerance[] one of { [1.0E-10, 1.0E-10], [1.0E-4, 1.0E-4] }
this.vecRelativeTolerance[] sorted by ==
this.mainSetDimension one of { 0, 2, 4 }
this.initialStep one of { -1.0, 1.7 }
this.minStep one of { 0.0, 1.0E-8, 1.25 }
this.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.isLastStep == false
this.eventsStates.getClass().getName() == java.util.ArrayList.class
this.name has only one value
this.name.toString == "Dormand-Prince 5(4)"
this.evaluations.maximalCount one of { 5000, 50000, 2147483647 }
this.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
this.expandable.primaryMapper.firstIndex == 0
this.expandable.primaryMapper.dimension one of { 2, 4 }
this.expandable.time == 0.0
this.expandable.components[] elements != null
this.expandable.components[].getClass().getName() elements == org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent.class
this.expandable.components[].getClass().getName() one of { [], [org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent] }
this.expandable.components.getClass().getName() == java.util.ArrayList.class
size(this.c[]) == 6
size(this.a[]) == 6
size(this.b[]) == 7
size(this.vecAbsoluteTolerance[]) == 2
size(this.vecRelativeTolerance[]) == 2
size(this.expandable.primaryState[]) one of { 2, 4 }
size(this.expandable.primaryStateDot[]) one of { 2, 4 }
size(this.expandable.components[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.DormandPrince54Integrator(double, double, double, double):::ENTER
minStep one of { 0.0, 1.25 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.DormandPrince54Integrator(double, double, double, double):::EXIT
this.prototype.finalized == false
this.exp == -0.2
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 10.0
this.vecAbsoluteTolerance == null
this.vecRelativeTolerance == null
this.mainSetDimension == 0
this.initialStep == -1.0
this.minStep one of { 0.0, 1.25 }
this.maxStep one of { 4.0, 15.0, 20.0 }
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 2.23606797749979 }
this.resetOccurred == false
this.statesInitialized == false
this.evaluations.maximalCount == 2147483647
this.evaluations.count == 0
this.expandable == null
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.DormandPrince54Integrator(double, double, double[], double[]):::ENTER
minStep == 1.0E-8
maxStep == 100.0
vecAbsoluteTolerance[] elements one of { 1.0E-10, 1.0E-4 }
vecAbsoluteTolerance[] one of { [1.0E-10, 1.0E-10], [1.0E-4, 1.0E-4] }
vecAbsoluteTolerance[] sorted by ==
vecRelativeTolerance[] elements one of { 1.0E-10, 1.0E-4 }
vecRelativeTolerance[] one of { [1.0E-10, 1.0E-10], [1.0E-4, 1.0E-4] }
vecRelativeTolerance[] sorted by ==
size(vecAbsoluteTolerance[]) == 2
size(vecRelativeTolerance[]) == 2
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.DormandPrince54Integrator(double, double, double[], double[]):::EXIT
vecAbsoluteTolerance[] == orig(vecAbsoluteTolerance[])
vecRelativeTolerance[] == orig(vecRelativeTolerance[])
this.prototype.finalized == false
this.exp == -0.2
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 10.0
this.scalAbsoluteTolerance == 0.0
this.scalRelativeTolerance == 0.0
this.mainSetDimension == 0
this.initialStep == -1.0
this.minStep == 1.0E-8
this.maxStep == 100.0
this.stepStart == Double.NaN
this.stepSize == 0.001
this.resetOccurred == false
this.statesInitialized == false
this.evaluations.maximalCount == 2147483647
this.evaluations.count == 0
this.expandable == null
vecAbsoluteTolerance[] elements one of { 1.0E-10, 1.0E-4 }
vecAbsoluteTolerance[] one of { [1.0E-10, 1.0E-10], [1.0E-4, 1.0E-4] }
vecAbsoluteTolerance[] sorted by ==
vecRelativeTolerance[] elements one of { 1.0E-10, 1.0E-4 }
vecRelativeTolerance[] one of { [1.0E-10, 1.0E-10], [1.0E-4, 1.0E-4] }
vecRelativeTolerance[] sorted by ==
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.estimateError(double[][], double[], double[], double):::ENTER
this.prototype.finalized == true
this.exp == -0.2
this.safety one of { 0.8, 0.9 }
this.minReduction one of { 0.2, 0.3 }
this.maxGrowth one of { 5.0, 10.0 }
this.mainSetDimension one of { 2, 4 }
yDotK.getClass().getName() == double[][].class
yDotK[] elements != null
size(yDotK[]) == 7
size(y0[]) >= 2
size(y1[]) >= 2
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.estimateError(double[][], double[], double[], double):::EXIT
org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.METHOD_NAME == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.METHOD_NAME)
org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.METHOD_NAME.toString == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.METHOD_NAME.toString)
org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.STATIC_C == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.STATIC_C)
org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.STATIC_C[] == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.STATIC_C[])
org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.STATIC_A == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.STATIC_A)
org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.STATIC_A.getClass().getName() == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.STATIC_A.getClass().getName())
org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.STATIC_A[] == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.STATIC_A[])
org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.STATIC_B == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.STATIC_B)
org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.STATIC_B[] == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.STATIC_B[])
this.fsal == orig(this.fsal)
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a.getClass().getName() == orig(this.a.getClass().getName())
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.previousState == orig(this.prototype.previousState)
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.integrator == orig(this.prototype.integrator)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.interpolatedDerivatives == orig(this.prototype.interpolatedDerivatives)
this.prototype.interpolatedPrimaryState == orig(this.prototype.interpolatedPrimaryState)
this.prototype.interpolatedPrimaryDerivatives == orig(this.prototype.interpolatedPrimaryDerivatives)
this.prototype.interpolatedSecondaryState == orig(this.prototype.interpolatedSecondaryState)
this.prototype.interpolatedSecondaryDerivatives == orig(this.prototype.interpolatedSecondaryDerivatives)
this.prototype.finalized == orig(this.prototype.finalized)
this.prototype.forward == orig(this.prototype.forward)
this.prototype.dirtyState == orig(this.prototype.dirtyState)
this.prototype.primaryMapper == orig(this.prototype.primaryMapper)
this.prototype.secondaryMappers == orig(this.prototype.secondaryMappers)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.minReduction == orig(this.minReduction)
this.maxGrowth == orig(this.maxGrowth)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecAbsoluteTolerance[] == orig(this.vecAbsoluteTolerance[])
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.vecRelativeTolerance[] == orig(this.vecRelativeTolerance[])
this.mainSetDimension == orig(this.mainSetDimension)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
this.expandable.primary == orig(this.expandable.primary)
this.expandable.primary.getClass().getName() == orig(this.expandable.primary.getClass().getName())
this.expandable.primaryMapper == orig(this.expandable.primaryMapper)
this.expandable.primaryMapper.firstIndex == orig(this.expandable.primaryMapper.firstIndex)
this.expandable.primaryMapper.dimension == orig(this.expandable.primaryMapper.dimension)
this.expandable.time == orig(this.expandable.time)
this.expandable.primaryState == orig(this.expandable.primaryState)
this.expandable.primaryState[] == orig(this.expandable.primaryState[])
this.expandable.primaryStateDot == orig(this.expandable.primaryStateDot)
this.expandable.primaryStateDot[] == orig(this.expandable.primaryStateDot[])
this.expandable.components == orig(this.expandable.components)
this.expandable.components[] == orig(this.expandable.components[])
this.expandable.components.getClass().getName() == orig(this.expandable.components.getClass().getName())
yDotK[] == orig(yDotK[])
y0[] == orig(y0[])
y1[] == orig(y1[])
this.prototype.finalized == true
this.exp == -0.2
this.safety one of { 0.8, 0.9 }
this.minReduction one of { 0.2, 0.3 }
this.maxGrowth one of { 5.0, 10.0 }
this.mainSetDimension one of { 2, 4 }
yDotK[] elements != null
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.getOrder():::ENTER
this.stepStart one of { 0.0, Double.NaN }
this.stepSize one of { 0.0, 0.001, 2.23606797749979 }
this.resetOccurred == false
this.statesInitialized == false
this.evaluations.count one of { 0, 1 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.getOrder():::EXIT
org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.METHOD_NAME == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.METHOD_NAME)
org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.METHOD_NAME.toString == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.METHOD_NAME.toString)
org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.STATIC_C == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.STATIC_C)
org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.STATIC_C[] == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.STATIC_C[])
org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.STATIC_A == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.STATIC_A)
org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.STATIC_A.getClass().getName() == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.STATIC_A.getClass().getName())
org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.STATIC_A[] == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.STATIC_A[])
org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.STATIC_B == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.STATIC_B)
org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.STATIC_B[] == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.STATIC_B[])
this.fsal == orig(this.fsal)
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a.getClass().getName() == orig(this.a.getClass().getName())
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.previousState == orig(this.prototype.previousState)
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.integrator == orig(this.prototype.integrator)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.interpolatedDerivatives == orig(this.prototype.interpolatedDerivatives)
this.prototype.interpolatedPrimaryState == orig(this.prototype.interpolatedPrimaryState)
this.prototype.interpolatedPrimaryDerivatives == orig(this.prototype.interpolatedPrimaryDerivatives)
this.prototype.interpolatedSecondaryState == orig(this.prototype.interpolatedSecondaryState)
this.prototype.interpolatedSecondaryDerivatives == orig(this.prototype.interpolatedSecondaryDerivatives)
this.prototype.finalized == orig(this.prototype.finalized)
this.prototype.forward == orig(this.prototype.forward)
this.prototype.dirtyState == orig(this.prototype.dirtyState)
this.prototype.primaryMapper == orig(this.prototype.primaryMapper)
this.prototype.secondaryMappers == orig(this.prototype.secondaryMappers)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.minReduction == orig(this.minReduction)
this.maxGrowth == orig(this.maxGrowth)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecAbsoluteTolerance[] == orig(this.vecAbsoluteTolerance[])
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.vecRelativeTolerance[] == orig(this.vecRelativeTolerance[])
this.mainSetDimension == orig(this.mainSetDimension)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepSize == orig(this.stepSize)
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
this.expandable.primary == orig(this.expandable.primary)
this.expandable.primary.getClass().getName() == orig(this.expandable.primary.getClass().getName())
this.expandable.primaryMapper == orig(this.expandable.primaryMapper)
this.expandable.primaryMapper.firstIndex == orig(this.expandable.primaryMapper.firstIndex)
this.expandable.primaryMapper.dimension == orig(this.expandable.primaryMapper.dimension)
this.expandable.time == orig(this.expandable.time)
this.expandable.primaryState == orig(this.expandable.primaryState)
this.expandable.primaryState[] == orig(this.expandable.primaryState[])
this.expandable.primaryStateDot == orig(this.expandable.primaryStateDot)
this.expandable.primaryStateDot[] == orig(this.expandable.primaryStateDot[])
this.expandable.components == orig(this.expandable.components)
this.expandable.components[] == orig(this.expandable.components[])
this.expandable.components.getClass().getName() == orig(this.expandable.components.getClass().getName())
this.stepStart one of { 0.0, Double.NaN }
this.stepSize one of { 0.0, 0.001, 2.23606797749979 }
this.resetOccurred == false
this.statesInitialized == false
this.evaluations.count one of { 0, 1 }
return == 5
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest$DP54SmallLastHandler:::OBJECT
this has only one value
this.minStep == 1.25
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest$DP54SmallLastHandler.DP54SmallLastHandler(double):::ENTER
minStep == 1.25
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest$DP54SmallLastHandler.DP54SmallLastHandler(double):::EXIT
this.lastSeen == false
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest$DP54SmallLastHandler.handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean):::ENTER
this.lastSeen == false
interpolator has only one value
interpolator.getClass().getName() == org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator.class
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest$DP54SmallLastHandler.handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean):::EXIT
this.minStep == orig(this.minStep)
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest$DP54SmallLastHandler.init(double, double[], double):::ENTER
this.lastSeen == false
t0 == 0.0
y0 has only one value
y0[] == [1.0, 0.1]
y0[] elements one of { 0.1, 1.0 }
t == -4.0
size(y0[]) == 2
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest$DP54SmallLastHandler.init(double, double[], double):::EXIT
this.lastSeen == orig(this.lastSeen)
this.minStep == orig(this.minStep)
y0[] == orig(y0[])
this.lastSeen == false
y0[] == [1.0, 0.1]
y0[] elements one of { 0.1, 1.0 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest$DP54SmallLastHandler.wasLastSeen():::ENTER
this.lastSeen == true
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest$DP54SmallLastHandler.wasLastSeen():::EXIT
this.lastSeen == orig(this.lastSeen)
this.minStep == orig(this.minStep)
this.lastSeen == true
return == true
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest$DP54SmallLastHandler.wasLastSeen():::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest$KeplerHandler:::OBJECT
this has only one value
this.nbSteps >= 0
this.pb has only one value
this.pb.e == 0.9
this.pb.y has only one value
this.pb.n == 4
this.pb.calls >= 0
this.pb.t0 == 0.0
this.pb.y0 has only one value
this.pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
this.pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
this.pb.t1 == 20.0
this.pb.errorScale has only one value
this.pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
this.pb.errorScale[] elements == 1.0
size(this.pb.y[]) == 4
size(this.pb.y0[]) == 4
size(this.pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest$KeplerHandler.KeplerHandler(org.apache.commons.math3.ode.TestProblem3):::ENTER
pb has only one value
pb.e == 0.9
pb.y has only one value
pb.y[] == [0.0, 0.0, 0.0, 0.0]
pb.y[] elements == 0.0
pb.n == 4
pb.calls == 0
pb.t0 == 0.0
pb.y0 has only one value
pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
pb.t1 == 20.0
pb.errorScale has only one value
pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
pb.errorScale[] elements == 1.0
size(pb.y[]) == 4
size(pb.y0[]) == 4
size(pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest$KeplerHandler.KeplerHandler(org.apache.commons.math3.ode.TestProblem3):::EXIT
pb.e == orig(pb.e)
pb.y == orig(pb.y)
pb.y[] == orig(pb.y[])
pb.n == orig(pb.n)
pb.calls == orig(pb.calls)
pb.t0 == orig(pb.t0)
pb.y0 == orig(pb.y0)
pb.y0[] == orig(pb.y0[])
pb.t1 == orig(pb.t1)
pb.errorScale == orig(pb.errorScale)
pb.errorScale[] == orig(pb.errorScale[])
this.nbSteps == 0
this.maxError == 0.0
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
pb.e == 0.9
pb.y has only one value
pb.y[] == [0.0, 0.0, 0.0, 0.0]
pb.y[] elements == 0.0
pb.n == 4
pb.calls == 0
pb.t0 == 0.0
pb.y0 has only one value
pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
pb.t1 == 20.0
pb.errorScale has only one value
pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
pb.errorScale[] elements == 1.0
size(pb.y[]) == 4
size(pb.y0[]) == 4
size(pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest$KeplerHandler.handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean):::ENTER
this.maxError == 0.0
interpolator has only one value
interpolator.getClass().getName() == org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator.class
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest$KeplerHandler.handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean):::EXIT
this.pb == orig(this.pb)
this.pb.e == orig(this.pb.e)
this.pb.y == orig(this.pb.y)
this.pb.n == orig(this.pb.n)
this.pb.calls == orig(this.pb.calls)
this.pb.t0 == orig(this.pb.t0)
this.pb.y0 == orig(this.pb.y0)
this.pb.y0[] == orig(this.pb.y0[])
this.pb.t1 == orig(this.pb.t1)
this.pb.errorScale == orig(this.pb.errorScale)
this.pb.errorScale[] == orig(this.pb.errorScale[])
size(this.pb.y[]) == orig(size(this.pb.y[]))
this.pb.y[] elements != 0
this.nbSteps - orig(this.nbSteps) - 1 == 0
orig(this.maxError) % this.maxError == 0
this.maxError >= orig(this.maxError)
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest$KeplerHandler.init(double, double[], double):::ENTER
this.nbSteps == 0
this.maxError == 0.0
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
t0 == 0.0
y0 has only one value
y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
t == 20.0
size(y0[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest$KeplerHandler.init(double, double[], double):::EXIT
this.nbSteps == orig(this.nbSteps)
this.maxError == orig(this.maxError)
this.pb == orig(this.pb)
this.pb.e == orig(this.pb.e)
this.pb.y == orig(this.pb.y)
this.pb.y[] == orig(this.pb.y[])
this.pb.n == orig(this.pb.n)
this.pb.calls == orig(this.pb.calls)
this.pb.t0 == orig(this.pb.t0)
this.pb.y0 == orig(this.pb.y0)
this.pb.y0[] == orig(this.pb.y0[])
this.pb.t1 == orig(this.pb.t1)
this.pb.errorScale == orig(this.pb.errorScale)
this.pb.errorScale[] == orig(this.pb.errorScale[])
y0[] == orig(y0[])
this.nbSteps == 0
this.maxError == 0.0
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest$VariableHandler:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest$VariableHandler.VariableHandler():::EXIT
this.firstTime == true
this.minStep == 0.0
this.maxStep == 0.0
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest$VariableHandler.handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean):::ENTER
interpolator has only one value
interpolator.getClass().getName() == org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator.class
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest$VariableHandler.handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean):::EXIT
this.firstTime == false
this.minStep one of { 0.002155423022426106, 0.0022000739337701327, 0.0022208202804033577 }
this.maxStep >= orig(this.maxStep)
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest$VariableHandler.init(double, double[], double):::ENTER
this.firstTime == true
this.minStep == 0.0
this.maxStep == 0.0
t0 == 0.0
y0 has only one value
y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
t == 20.0
size(y0[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest$VariableHandler.init(double, double[], double):::EXIT
this.firstTime == orig(this.firstTime)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
y0[] == orig(y0[])
this.firstTime == true
this.minStep == 0.0
this.maxStep == 0.0
y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest:::OBJECT
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest.DormandPrince54IntegratorTest():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest.testBackward():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest.testBackward():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest.testEvents():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest.testEvents():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest.testIncreasingTolerance():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest.testIncreasingTolerance():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest.testKepler():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest.testKepler():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest.testSmallLastStep():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest.testSmallLastStep():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest.testVariableSteps():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest.testVariableSteps():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator:::CLASS
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator:::OBJECT
this.v1[] elements != 0
this.yDotK.getClass().getName() == double[][].class
this.yDotK[] elements != null
this.integrator.getClass().getName() == org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.class
this.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.integrator.eventsStates.getClass().getName() == java.util.ArrayList.class
this.integrator.name has only one value
this.integrator.name.toString == "Dormand-Prince 5(4)"
this.integrator.evaluations.maximalCount one of { 5000, 50000, 2147483647 }
this.integrator.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
this.integrator.expandable.time == 0.0
this.integrator.expandable.components[] elements != null
this.integrator.expandable.components[].getClass().getName() elements == org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent.class
this.integrator.expandable.components[].getClass().getName() one of { [], [org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent] }
this.integrator.expandable.components.getClass().getName() == java.util.ArrayList.class
this.interpolatedSecondaryState.getClass().getName() == double[][].class
this.interpolatedSecondaryState[] elements != null
this.interpolatedSecondaryDerivatives.getClass().getName() == double[][].class
this.interpolatedSecondaryDerivatives[] elements != null
this.primaryMapper.firstIndex == 0
this.primaryMapper.dimension one of { 2, 4 }
this.secondaryMappers.getClass().getName() == org.apache.commons.math3.ode.EquationsMapper[].class
this.secondaryMappers[] elements != null
this.secondaryMappers[].getClass().getName() elements == org.apache.commons.math3.ode.EquationsMapper.class
this.secondaryMappers[].getClass().getName() one of { [], [org.apache.commons.math3.ode.EquationsMapper] }
this.secondaryMappers[].firstIndex elements == 2
this.secondaryMappers[].firstIndex one of { [], [2] }
this.secondaryMappers[].dimension elements one of { 6, 10 }
this.secondaryMappers[].dimension one of { [], [6], [10] }
size(this.v1[]) >= 2
size(this.v2[]) >= 2
size(this.v3[]) >= 2
size(this.v4[]) >= 2
size(this.previousState[]) >= 2
size(this.yDotK[]) == 7
size(this.integrator.expandable.primaryState[]) one of { 2, 4 }
size(this.integrator.expandable.primaryStateDot[]) one of { 2, 4 }
size(this.integrator.expandable.components[]) one of { 0, 1 }
size(this.currentState[]) >= 2
size(this.interpolatedState[]) >= 2
size(this.interpolatedDerivatives[]) >= 2
size(this.interpolatedPrimaryState[]) one of { 2, 4 }
size(this.interpolatedPrimaryDerivatives[]) one of { 2, 4 }
size(this.interpolatedSecondaryState[]) one of { 0, 1 }
size(this.interpolatedSecondaryDerivatives[]) one of { 0, 1 }
size(this.secondaryMappers[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator.DormandPrince54StepInterpolator():::EXIT
this.v1 == null
this.v2 == null
this.v3 == null
this.v4 == null
this.vectorsInitialized == false
this.previousState == null
this.yDotK == null
this.integrator == null
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.interpolatedPrimaryState == null
this.interpolatedPrimaryDerivatives == null
this.interpolatedSecondaryState == null
this.interpolatedSecondaryDerivatives == null
this.globalPreviousTime == Double.NaN
this.globalCurrentTime == Double.NaN
this.softPreviousTime == Double.NaN
this.softCurrentTime == Double.NaN
this.finalized == false
this.forward == true
this.dirtyState == true
this.primaryMapper == null
this.secondaryMappers == null
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator.DormandPrince54StepInterpolator(org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator):::ENTER
interpolator.v1[] elements != 0
interpolator.v2[] elements != 0
interpolator.v3[] elements != 0
interpolator.v4[] elements != 0
interpolator.yDotK.getClass().getName() == double[][].class
interpolator.yDotK[] elements != null
interpolator.integrator.getClass().getName() == org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.class
interpolator.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.resetOccurred == false
interpolator.integrator.eventsStates.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.statesInitialized == true
interpolator.integrator.name has only one value
interpolator.integrator.name.toString == "Dormand-Prince 5(4)"
interpolator.currentState[] elements != 0
interpolator.interpolatedState[] elements != 0
interpolator.interpolatedDerivatives[] elements != 0
interpolator.interpolatedPrimaryState[] elements != 0
interpolator.interpolatedPrimaryDerivatives[] == [0.0, 0.0, 0.0, 0.0]
interpolator.interpolatedPrimaryDerivatives[] elements == 0.0
interpolator.interpolatedSecondaryState.getClass().getName() == double[][].class
interpolator.interpolatedSecondaryState[] == []
interpolator.interpolatedSecondaryDerivatives.getClass().getName() == double[][].class
interpolator.interpolatedSecondaryDerivatives[] == []
interpolator.finalized == true
interpolator.forward == true
interpolator.primaryMapper.firstIndex == 0
interpolator.primaryMapper.dimension == 4
interpolator.secondaryMappers.getClass().getName() == org.apache.commons.math3.ode.EquationsMapper[].class
interpolator.secondaryMappers[] == []
interpolator.secondaryMappers[].getClass().getName() == []
interpolator.secondaryMappers[].firstIndex == []
interpolator.secondaryMappers[].dimension == []
size(interpolator.v1[]) == 4
size(interpolator.v2[]) == 4
size(interpolator.v3[]) == 4
size(interpolator.v4[]) == 4
size(interpolator.previousState[]) == 4
size(interpolator.yDotK[]) == 7
size(interpolator.currentState[]) == 4
size(interpolator.interpolatedState[]) == 4
size(interpolator.interpolatedDerivatives[]) == 4
size(interpolator.interpolatedPrimaryState[]) == 4
size(interpolator.interpolatedPrimaryDerivatives[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator.DormandPrince54StepInterpolator(org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator):::EXIT
interpolator.v1 == orig(interpolator.v1)
interpolator.v1[] == orig(interpolator.v1[])
interpolator.v2 == orig(interpolator.v2)
interpolator.v2[] == orig(interpolator.v2[])
interpolator.v3 == orig(interpolator.v3)
interpolator.v3[] == orig(interpolator.v3[])
interpolator.v4 == orig(interpolator.v4)
interpolator.v4[] == orig(interpolator.v4[])
interpolator.vectorsInitialized == orig(interpolator.vectorsInitialized)
interpolator.previousState == orig(interpolator.previousState)
interpolator.previousState[] == orig(interpolator.previousState[])
interpolator.yDotK == orig(interpolator.yDotK)
interpolator.yDotK.getClass().getName() == orig(interpolator.yDotK.getClass().getName())
interpolator.yDotK[] == orig(interpolator.yDotK[])
interpolator.integrator == orig(interpolator.integrator)
interpolator.integrator.getClass().getName() == orig(interpolator.integrator.getClass().getName())
interpolator.integrator.stepHandlers == orig(interpolator.integrator.stepHandlers)
interpolator.integrator.stepHandlers.getClass().getName() == orig(interpolator.integrator.stepHandlers.getClass().getName())
interpolator.integrator.stepStart == orig(interpolator.integrator.stepStart)
interpolator.integrator.stepSize == orig(interpolator.integrator.stepSize)
interpolator.integrator.isLastStep == orig(interpolator.integrator.isLastStep)
interpolator.integrator.resetOccurred == orig(interpolator.integrator.resetOccurred)
interpolator.integrator.eventsStates == orig(interpolator.integrator.eventsStates)
interpolator.integrator.eventsStates.getClass().getName() == orig(interpolator.integrator.eventsStates.getClass().getName())
interpolator.integrator.statesInitialized == orig(interpolator.integrator.statesInitialized)
interpolator.integrator.name == orig(interpolator.integrator.name)
interpolator.integrator.name.toString == orig(interpolator.integrator.name.toString)
interpolator.integrator.evaluations == orig(interpolator.integrator.evaluations)
interpolator.integrator.expandable == orig(interpolator.integrator.expandable)
interpolator.currentState == orig(interpolator.currentState)
interpolator.currentState[] == orig(interpolator.currentState[])
interpolator.interpolatedState == orig(interpolator.interpolatedState)
interpolator.interpolatedState[] == orig(interpolator.interpolatedState[])
interpolator.interpolatedDerivatives == orig(interpolator.interpolatedDerivatives)
interpolator.interpolatedDerivatives[] == orig(interpolator.interpolatedDerivatives[])
interpolator.interpolatedPrimaryState == orig(interpolator.interpolatedPrimaryState)
interpolator.interpolatedPrimaryState[] == orig(interpolator.interpolatedPrimaryState[])
interpolator.interpolatedPrimaryDerivatives == orig(interpolator.interpolatedPrimaryDerivatives)
interpolator.interpolatedPrimaryDerivatives[] == orig(interpolator.interpolatedPrimaryDerivatives[])
interpolator.interpolatedSecondaryState == orig(interpolator.interpolatedSecondaryState)
interpolator.interpolatedSecondaryState.getClass().getName() == orig(interpolator.interpolatedSecondaryState.getClass().getName())
interpolator.interpolatedSecondaryState[] == orig(interpolator.interpolatedSecondaryState[])
interpolator.interpolatedSecondaryDerivatives == orig(interpolator.interpolatedSecondaryDerivatives)
interpolator.interpolatedSecondaryDerivatives.getClass().getName() == orig(interpolator.interpolatedSecondaryDerivatives.getClass().getName())
interpolator.interpolatedSecondaryDerivatives[] == orig(interpolator.interpolatedSecondaryDerivatives[])
interpolator.finalized == orig(interpolator.finalized)
interpolator.forward == orig(interpolator.forward)
interpolator.dirtyState == orig(interpolator.dirtyState)
interpolator.primaryMapper == orig(interpolator.primaryMapper)
interpolator.primaryMapper.firstIndex == orig(interpolator.primaryMapper.firstIndex)
interpolator.primaryMapper.dimension == orig(interpolator.primaryMapper.dimension)
interpolator.secondaryMappers == orig(interpolator.secondaryMappers)
interpolator.secondaryMappers.getClass().getName() == orig(interpolator.secondaryMappers.getClass().getName())
interpolator.secondaryMappers[] == orig(interpolator.secondaryMappers[])
interpolator.secondaryMappers[].firstIndex == orig(interpolator.secondaryMappers[].firstIndex)
interpolator.secondaryMappers[].dimension == orig(interpolator.secondaryMappers[].dimension)
this.v2[] elements != 0
this.v3[] elements != 0
this.v4[] elements != 0
this.integrator == null
this.currentState[] elements != 0
this.interpolatedState[] elements != 0
this.interpolatedDerivatives[] elements != 0
this.interpolatedPrimaryState[] elements != 0
this.interpolatedPrimaryDerivatives[] == [0.0, 0.0, 0.0, 0.0]
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.interpolatedSecondaryState[] == []
this.interpolatedSecondaryDerivatives[] == []
this.finalized == true
this.forward == true
this.primaryMapper.dimension == 4
this.secondaryMappers[] == []
this.secondaryMappers[].getClass().getName() == []
this.secondaryMappers[].firstIndex == []
this.secondaryMappers[].dimension == []
interpolator.v1[] elements != 0
interpolator.v2[] elements != 0
interpolator.v3[] elements != 0
interpolator.v4[] elements != 0
interpolator.yDotK.getClass().getName() == double[][].class
interpolator.yDotK[] elements != null
interpolator.integrator.getClass().getName() == org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.class
interpolator.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.resetOccurred == false
interpolator.integrator.eventsStates.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.statesInitialized == true
interpolator.integrator.name has only one value
interpolator.integrator.name.toString == "Dormand-Prince 5(4)"
interpolator.currentState[] elements != 0
interpolator.interpolatedState[] elements != 0
interpolator.interpolatedDerivatives[] elements != 0
interpolator.interpolatedPrimaryState[] elements != 0
interpolator.interpolatedPrimaryDerivatives[] == [0.0, 0.0, 0.0, 0.0]
interpolator.interpolatedPrimaryDerivatives[] elements == 0.0
interpolator.interpolatedSecondaryState.getClass().getName() == double[][].class
interpolator.interpolatedSecondaryState[] == []
interpolator.interpolatedSecondaryDerivatives.getClass().getName() == double[][].class
interpolator.interpolatedSecondaryDerivatives[] == []
interpolator.finalized == true
interpolator.forward == true
interpolator.primaryMapper.firstIndex == 0
interpolator.primaryMapper.dimension == 4
interpolator.secondaryMappers.getClass().getName() == org.apache.commons.math3.ode.EquationsMapper[].class
interpolator.secondaryMappers[] == []
interpolator.secondaryMappers[].getClass().getName() == []
interpolator.secondaryMappers[].firstIndex == []
interpolator.secondaryMappers[].dimension == []
size(this.v1[]) == 4
size(this.v2[]) == 4
size(this.v3[]) == 4
size(this.v4[]) == 4
size(this.previousState[]) == 4
size(this.currentState[]) == 4
size(this.interpolatedState[]) == 4
size(this.interpolatedDerivatives[]) == 4
size(this.interpolatedPrimaryState[]) == 4
size(this.interpolatedPrimaryDerivatives[]) == 4
size(interpolator.v1[]) == 4
size(interpolator.v2[]) == 4
size(interpolator.v3[]) == 4
size(interpolator.v4[]) == 4
size(interpolator.previousState[]) == 4
size(interpolator.yDotK[]) == 7
size(interpolator.currentState[]) == 4
size(interpolator.interpolatedState[]) == 4
size(interpolator.interpolatedDerivatives[]) == 4
size(interpolator.interpolatedPrimaryState[]) == 4
size(interpolator.interpolatedPrimaryDerivatives[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::ENTER
this.integrator.expandable.primaryState[] elements != 0
this.integrator.expandable.primaryStateDot[] elements != 0
this.currentState[] elements != 0
this.dirtyState == true
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::EXIT
this.previousState == orig(this.previousState)
this.previousState[] == orig(this.previousState[])
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.integrator.stepHandlers == orig(this.integrator.stepHandlers)
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.stepHandlers.getClass().getName())
this.integrator.stepStart == orig(this.integrator.stepStart)
this.integrator.stepSize == orig(this.integrator.stepSize)
this.integrator.isLastStep == orig(this.integrator.isLastStep)
this.integrator.resetOccurred == orig(this.integrator.resetOccurred)
this.integrator.eventsStates == orig(this.integrator.eventsStates)
this.integrator.eventsStates.getClass().getName() == orig(this.integrator.eventsStates.getClass().getName())
this.integrator.statesInitialized == orig(this.integrator.statesInitialized)
this.integrator.name == orig(this.integrator.name)
this.integrator.name.toString == orig(this.integrator.name.toString)
this.integrator.evaluations == orig(this.integrator.evaluations)
this.integrator.evaluations.maximalCount == orig(this.integrator.evaluations.maximalCount)
this.integrator.evaluations.count == orig(this.integrator.evaluations.count)
this.integrator.evaluations.maxCountCallback == orig(this.integrator.evaluations.maxCountCallback)
this.integrator.evaluations.maxCountCallback.getClass().getName() == orig(this.integrator.evaluations.maxCountCallback.getClass().getName())
this.integrator.expandable == orig(this.integrator.expandable)
this.integrator.expandable.primary == orig(this.integrator.expandable.primary)
this.integrator.expandable.primary.getClass().getName() == orig(this.integrator.expandable.primary.getClass().getName())
this.integrator.expandable.primaryMapper == orig(this.integrator.expandable.primaryMapper)
this.integrator.expandable.time == orig(this.integrator.expandable.time)
this.integrator.expandable.primaryState == orig(this.integrator.expandable.primaryState)
this.integrator.expandable.primaryState[] == orig(this.integrator.expandable.primaryState[])
this.integrator.expandable.primaryStateDot == orig(this.integrator.expandable.primaryStateDot)
this.integrator.expandable.primaryStateDot[] == orig(this.integrator.expandable.primaryStateDot[])
this.integrator.expandable.components == orig(this.integrator.expandable.components)
this.integrator.expandable.components[] == orig(this.integrator.expandable.components[])
this.integrator.expandable.components.getClass().getName() == orig(this.integrator.expandable.components.getClass().getName())
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedPrimaryState == orig(this.interpolatedPrimaryState)
this.interpolatedPrimaryState[] == orig(this.interpolatedPrimaryState[])
this.interpolatedPrimaryDerivatives == orig(this.interpolatedPrimaryDerivatives)
this.interpolatedPrimaryDerivatives[] == orig(this.interpolatedPrimaryDerivatives[])
this.interpolatedSecondaryState == orig(this.interpolatedSecondaryState)
this.interpolatedSecondaryState.getClass().getName() == orig(this.interpolatedSecondaryState.getClass().getName())
this.interpolatedSecondaryState[] == orig(this.interpolatedSecondaryState[])
this.interpolatedSecondaryDerivatives == orig(this.interpolatedSecondaryDerivatives)
this.interpolatedSecondaryDerivatives.getClass().getName() == orig(this.interpolatedSecondaryDerivatives.getClass().getName())
this.interpolatedSecondaryDerivatives[] == orig(this.interpolatedSecondaryDerivatives[])
this.globalPreviousTime == orig(this.globalPreviousTime)
this.globalCurrentTime == orig(this.globalCurrentTime)
this.softPreviousTime == orig(this.softPreviousTime)
this.softCurrentTime == orig(this.softCurrentTime)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.secondaryMappers == orig(this.secondaryMappers)
this.secondaryMappers.getClass().getName() == orig(this.secondaryMappers.getClass().getName())
this.secondaryMappers[] == orig(this.secondaryMappers[])
this.secondaryMappers[].firstIndex == orig(this.secondaryMappers[].firstIndex)
this.secondaryMappers[].dimension == orig(this.secondaryMappers[].dimension)
size(this.v1[]) == orig(size(this.v1[]))
size(this.v2[]) == orig(size(this.v2[]))
size(this.v3[]) == orig(size(this.v3[]))
size(this.v4[]) == orig(size(this.v4[]))
size(this.interpolatedState[]) == orig(size(this.interpolatedState[]))
size(this.interpolatedDerivatives[]) == orig(size(this.interpolatedDerivatives[]))
this.vectorsInitialized == true
this.integrator.expandable.primaryState[] elements != 0
this.integrator.expandable.primaryStateDot[] elements != 0
this.currentState[] elements != 0
this.dirtyState == true
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator.doCopy():::ENTER
this.v2[] elements != 0
this.v3[] elements != 0
this.v4[] elements != 0
this.integrator.resetOccurred == false
this.integrator.statesInitialized == true
this.integrator.evaluations.maximalCount == 2147483647
this.integrator.expandable.primary.getClass().getName() == org.apache.commons.math3.ode.TestProblem3.class
this.integrator.expandable.primaryState[] elements != 0
this.integrator.expandable.primaryStateDot[] elements != 0
this.integrator.expandable.components[] == []
this.integrator.expandable.components[].getClass().getName() == []
this.currentState[] elements != 0
this.interpolatedState[] elements != 0
this.interpolatedDerivatives[] elements != 0
this.interpolatedPrimaryState[] elements != 0
this.interpolatedPrimaryDerivatives[] == [0.0, 0.0, 0.0, 0.0]
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.interpolatedSecondaryState[] == []
this.interpolatedSecondaryDerivatives[] == []
this.finalized == true
this.forward == true
this.primaryMapper.dimension == 4
this.secondaryMappers[] == []
this.secondaryMappers[].getClass().getName() == []
this.secondaryMappers[].firstIndex == []
this.secondaryMappers[].dimension == []
size(this.v1[]) == 4
size(this.v2[]) == 4
size(this.v3[]) == 4
size(this.v4[]) == 4
size(this.previousState[]) == 4
size(this.integrator.expandable.primaryState[]) == 4
size(this.integrator.expandable.primaryStateDot[]) == 4
size(this.currentState[]) == 4
size(this.interpolatedState[]) == 4
size(this.interpolatedDerivatives[]) == 4
size(this.interpolatedPrimaryState[]) == 4
size(this.interpolatedPrimaryDerivatives[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator.doCopy():::EXIT
this.v1 == orig(this.v1)
this.v1[] == orig(this.v1[])
this.v2 == orig(this.v2)
this.v2[] == orig(this.v2[])
this.v3 == orig(this.v3)
this.v3[] == orig(this.v3[])
this.v4 == orig(this.v4)
this.v4[] == orig(this.v4[])
this.vectorsInitialized == orig(this.vectorsInitialized)
this.previousState == orig(this.previousState)
this.previousState[] == orig(this.previousState[])
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.integrator.stepHandlers == orig(this.integrator.stepHandlers)
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.stepHandlers.getClass().getName())
this.integrator.stepStart == orig(this.integrator.stepStart)
this.integrator.stepSize == orig(this.integrator.stepSize)
this.integrator.isLastStep == orig(this.integrator.isLastStep)
this.integrator.resetOccurred == orig(this.integrator.resetOccurred)
this.integrator.eventsStates == orig(this.integrator.eventsStates)
this.integrator.eventsStates.getClass().getName() == orig(this.integrator.eventsStates.getClass().getName())
this.integrator.statesInitialized == orig(this.integrator.statesInitialized)
this.integrator.name == orig(this.integrator.name)
this.integrator.name.toString == orig(this.integrator.name.toString)
this.integrator.evaluations == orig(this.integrator.evaluations)
this.integrator.evaluations.maximalCount == orig(this.integrator.evaluations.maximalCount)
this.integrator.evaluations.count == orig(this.integrator.evaluations.count)
this.integrator.evaluations.maxCountCallback == orig(this.integrator.evaluations.maxCountCallback)
this.integrator.evaluations.maxCountCallback.getClass().getName() == orig(this.integrator.evaluations.maxCountCallback.getClass().getName())
this.integrator.expandable == orig(this.integrator.expandable)
this.integrator.expandable.primary == orig(this.integrator.expandable.primary)
this.integrator.expandable.primary.getClass().getName() == orig(this.integrator.expandable.primary.getClass().getName())
this.integrator.expandable.primaryMapper == orig(this.integrator.expandable.primaryMapper)
this.integrator.expandable.time == orig(this.integrator.expandable.time)
this.integrator.expandable.primaryState == orig(this.integrator.expandable.primaryState)
this.integrator.expandable.primaryState[] == orig(this.integrator.expandable.primaryState[])
this.integrator.expandable.primaryStateDot == orig(this.integrator.expandable.primaryStateDot)
this.integrator.expandable.primaryStateDot[] == orig(this.integrator.expandable.primaryStateDot[])
this.integrator.expandable.components == orig(this.integrator.expandable.components)
this.integrator.expandable.components[] == orig(this.integrator.expandable.components[])
this.integrator.expandable.components.getClass().getName() == orig(this.integrator.expandable.components.getClass().getName())
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.interpolatedPrimaryState == orig(this.interpolatedPrimaryState)
this.interpolatedPrimaryState[] == orig(this.interpolatedPrimaryState[])
this.interpolatedPrimaryDerivatives == orig(this.interpolatedPrimaryDerivatives)
this.interpolatedPrimaryDerivatives[] == orig(this.interpolatedPrimaryDerivatives[])
this.interpolatedSecondaryState == orig(this.interpolatedSecondaryState)
this.interpolatedSecondaryState.getClass().getName() == orig(this.interpolatedSecondaryState.getClass().getName())
this.interpolatedSecondaryState[] == orig(this.interpolatedSecondaryState[])
this.interpolatedSecondaryDerivatives == orig(this.interpolatedSecondaryDerivatives)
this.interpolatedSecondaryDerivatives.getClass().getName() == orig(this.interpolatedSecondaryDerivatives.getClass().getName())
this.interpolatedSecondaryDerivatives[] == orig(this.interpolatedSecondaryDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.secondaryMappers == orig(this.secondaryMappers)
this.secondaryMappers.getClass().getName() == orig(this.secondaryMappers.getClass().getName())
this.secondaryMappers[] == orig(this.secondaryMappers[])
this.secondaryMappers[].firstIndex == orig(this.secondaryMappers[].firstIndex)
this.secondaryMappers[].dimension == orig(this.secondaryMappers[].dimension)
this.v2[] elements != 0
this.v3[] elements != 0
this.v4[] elements != 0
this.integrator.resetOccurred == false
this.integrator.statesInitialized == true
this.integrator.evaluations.maximalCount == 2147483647
this.integrator.expandable.primary.getClass().getName() == org.apache.commons.math3.ode.TestProblem3.class
this.integrator.expandable.primaryState[] elements != 0
this.integrator.expandable.primaryStateDot[] elements != 0
this.integrator.expandable.components[] == []
this.integrator.expandable.components[].getClass().getName() == []
this.currentState[] elements != 0
this.interpolatedState[] elements != 0
this.interpolatedDerivatives[] elements != 0
this.interpolatedPrimaryState[] elements != 0
this.interpolatedPrimaryDerivatives[] == [0.0, 0.0, 0.0, 0.0]
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.interpolatedSecondaryState[] == []
this.interpolatedSecondaryDerivatives[] == []
this.finalized == true
this.forward == true
this.primaryMapper.dimension == 4
this.secondaryMappers[] == []
this.secondaryMappers[].getClass().getName() == []
this.secondaryMappers[].firstIndex == []
this.secondaryMappers[].dimension == []
return.getClass().getName() == org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator.class
size(this.v1[]) == 4
size(this.v2[]) == 4
size(this.v3[]) == 4
size(this.v4[]) == 4
size(this.previousState[]) == 4
size(this.integrator.expandable.primaryState[]) == 4
size(this.integrator.expandable.primaryStateDot[]) == 4
size(this.currentState[]) == 4
size(this.interpolatedState[]) == 4
size(this.interpolatedDerivatives[]) == 4
size(this.interpolatedPrimaryState[]) == 4
size(this.interpolatedPrimaryDerivatives[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator.reinitialize(org.apache.commons.math3.ode.AbstractIntegrator, double[], double[][], boolean, org.apache.commons.math3.ode.EquationsMapper, org.apache.commons.math3.ode.EquationsMapper[]):::ENTER
this.v1 == null
this.v2 == null
this.v3 == null
this.v4 == null
this.vectorsInitialized == false
this.previousState == null
this.yDotK == null
this.integrator == null
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.interpolatedPrimaryState == null
this.interpolatedPrimaryDerivatives == null
this.interpolatedSecondaryState == null
this.interpolatedSecondaryDerivatives == null
this.globalPreviousTime == Double.NaN
this.globalCurrentTime == Double.NaN
this.softPreviousTime == Double.NaN
this.softCurrentTime == Double.NaN
this.finalized == true
this.forward == true
this.dirtyState == true
this.primaryMapper == null
this.secondaryMappers == null
integrator.getClass().getName() == org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.class
integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
integrator.stepStart == Double.NaN
integrator.stepSize one of { 0.0, 0.001, 2.23606797749979 }
integrator.resetOccurred == false
integrator.eventsStates.getClass().getName() == java.util.ArrayList.class
integrator.name has only one value
integrator.name.toString == "Dormand-Prince 5(4)"
integrator.evaluations.maximalCount one of { 5000, 50000, 2147483647 }
integrator.evaluations.count >= 0
integrator.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
integrator.expandable.time == 0.0
integrator.expandable.primaryStateDot[] elements == 0.0
integrator.expandable.primaryStateDot[] one of { [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
integrator.expandable.components[] elements != null
integrator.expandable.components[].getClass().getName() elements == org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent.class
integrator.expandable.components[].getClass().getName() one of { [], [org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent] }
integrator.expandable.components.getClass().getName() == java.util.ArrayList.class
y[] elements >= 0.0
yDotK.getClass().getName() == double[][].class
yDotK[] elements != null
primaryMapper.firstIndex == 0
primaryMapper.dimension one of { 2, 4 }
secondaryMappers.getClass().getName() == org.apache.commons.math3.ode.EquationsMapper[].class
secondaryMappers[] elements != null
secondaryMappers[].firstIndex elements == 2
secondaryMappers[].firstIndex one of { [], [2] }
secondaryMappers[].dimension elements one of { 6, 10 }
secondaryMappers[].dimension one of { [], [6], [10] }
size(integrator.expandable.primaryState[]) one of { 2, 4 }
size(integrator.expandable.primaryStateDot[]) one of { 2, 4 }
size(integrator.expandable.components[]) one of { 0, 1 }
size(y[]) >= 2
size(yDotK[]) == 7
size(secondaryMappers[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator.reinitialize(org.apache.commons.math3.ode.AbstractIntegrator, double[], double[][], boolean, org.apache.commons.math3.ode.EquationsMapper, org.apache.commons.math3.ode.EquationsMapper[]):::EXIT
this.v1 == orig(this.v1)
this.v2 == orig(this.v2)
this.v3 == orig(this.v3)
this.v4 == orig(this.v4)
this.vectorsInitialized == orig(this.vectorsInitialized)
this.previousState == orig(this.previousState)
this.dirtyState == orig(this.dirtyState)
integrator.stepHandlers == orig(integrator.stepHandlers)
integrator.stepHandlers.getClass().getName() == orig(integrator.stepHandlers.getClass().getName())
integrator.stepSize == orig(integrator.stepSize)
integrator.isLastStep == orig(integrator.isLastStep)
integrator.resetOccurred == orig(integrator.resetOccurred)
integrator.eventsStates == orig(integrator.eventsStates)
integrator.eventsStates.getClass().getName() == orig(integrator.eventsStates.getClass().getName())
integrator.statesInitialized == orig(integrator.statesInitialized)
integrator.name == orig(integrator.name)
integrator.name.toString == orig(integrator.name.toString)
integrator.evaluations == orig(integrator.evaluations)
integrator.evaluations.maximalCount == orig(integrator.evaluations.maximalCount)
integrator.evaluations.count == orig(integrator.evaluations.count)
integrator.evaluations.maxCountCallback == orig(integrator.evaluations.maxCountCallback)
integrator.evaluations.maxCountCallback.getClass().getName() == orig(integrator.evaluations.maxCountCallback.getClass().getName())
integrator.expandable == orig(integrator.expandable)
integrator.expandable.primary == orig(integrator.expandable.primary)
integrator.expandable.primary.getClass().getName() == orig(integrator.expandable.primary.getClass().getName())
integrator.expandable.primaryMapper == orig(integrator.expandable.primaryMapper)
integrator.expandable.time == orig(integrator.expandable.time)
integrator.expandable.primaryState == orig(integrator.expandable.primaryState)
integrator.expandable.primaryState[] == orig(integrator.expandable.primaryState[])
integrator.expandable.primaryStateDot == orig(integrator.expandable.primaryStateDot)
integrator.expandable.primaryStateDot[] == orig(integrator.expandable.primaryStateDot[])
integrator.expandable.components == orig(integrator.expandable.components)
integrator.expandable.components[] == orig(integrator.expandable.components[])
integrator.expandable.components.getClass().getName() == orig(integrator.expandable.components.getClass().getName())
y[] == orig(y[])
yDotK[] == orig(yDotK[])
primaryMapper.firstIndex == orig(primaryMapper.firstIndex)
primaryMapper.dimension == orig(primaryMapper.dimension)
secondaryMappers[] == orig(secondaryMappers[])
secondaryMappers[].firstIndex == orig(secondaryMappers[].firstIndex)
secondaryMappers[].dimension == orig(secondaryMappers[].dimension)
this.v1 == null
this.v2 == null
this.v3 == null
this.v4 == null
this.vectorsInitialized == false
this.previousState == null
this.integrator.stepStart == Double.NaN
this.integrator.stepSize one of { 0.0, 0.001, 2.23606797749979 }
this.integrator.resetOccurred == false
this.integrator.expandable.primaryStateDot[] elements == 0.0
this.integrator.expandable.primaryStateDot[] one of { [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.h == Double.NaN
this.currentState[] elements >= 0.0
this.interpolatedTime == Double.NaN
this.interpolatedState[] elements == 0.0
this.interpolatedDerivatives[] elements == 0.0
this.interpolatedPrimaryState[] elements == 0.0
this.interpolatedPrimaryState[] one of { [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.interpolatedPrimaryDerivatives[] one of { [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.globalPreviousTime == Double.NaN
this.globalCurrentTime == Double.NaN
this.softPreviousTime == Double.NaN
this.softCurrentTime == Double.NaN
this.finalized == false
this.dirtyState == true
integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
integrator.stepStart == Double.NaN
integrator.stepSize one of { 0.0, 0.001, 2.23606797749979 }
integrator.resetOccurred == false
integrator.eventsStates.getClass().getName() == java.util.ArrayList.class
integrator.name has only one value
integrator.name.toString == "Dormand-Prince 5(4)"
integrator.evaluations.maximalCount one of { 5000, 50000, 2147483647 }
integrator.evaluations.count >= 0
integrator.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
integrator.expandable.time == 0.0
integrator.expandable.primaryStateDot[] elements == 0.0
integrator.expandable.primaryStateDot[] one of { [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
integrator.expandable.components[] elements != null
integrator.expandable.components[].getClass().getName() elements == org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent.class
integrator.expandable.components[].getClass().getName() one of { [], [org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent] }
integrator.expandable.components.getClass().getName() == java.util.ArrayList.class
y[] elements >= 0.0
yDotK[] elements != null
primaryMapper.firstIndex == 0
primaryMapper.dimension one of { 2, 4 }
secondaryMappers[] elements != null
secondaryMappers[].firstIndex elements == 2
secondaryMappers[].firstIndex one of { [], [2] }
secondaryMappers[].dimension elements one of { 6, 10 }
secondaryMappers[].dimension one of { [], [6], [10] }
size(integrator.expandable.primaryState[]) one of { 2, 4 }
size(integrator.expandable.primaryStateDot[]) one of { 2, 4 }
size(integrator.expandable.components[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator.storeTime(double):::ENTER
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator.storeTime(double):::EXIT
this.v1 == orig(this.v1)
this.v1[] == orig(this.v1[])
this.v2 == orig(this.v2)
this.v2[] == orig(this.v2[])
this.v3 == orig(this.v3)
this.v3[] == orig(this.v3[])
this.v4 == orig(this.v4)
this.v4[] == orig(this.v4[])
this.previousState == orig(this.previousState)
this.previousState[] == orig(this.previousState[])
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.integrator.stepHandlers == orig(this.integrator.stepHandlers)
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.stepHandlers.getClass().getName())
this.integrator.stepSize == orig(this.integrator.stepSize)
this.integrator.isLastStep == orig(this.integrator.isLastStep)
this.integrator.resetOccurred == orig(this.integrator.resetOccurred)
this.integrator.eventsStates == orig(this.integrator.eventsStates)
this.integrator.eventsStates.getClass().getName() == orig(this.integrator.eventsStates.getClass().getName())
this.integrator.statesInitialized == orig(this.integrator.statesInitialized)
this.integrator.name == orig(this.integrator.name)
this.integrator.name.toString == orig(this.integrator.name.toString)
this.integrator.evaluations == orig(this.integrator.evaluations)
this.integrator.evaluations.maximalCount == orig(this.integrator.evaluations.maximalCount)
this.integrator.evaluations.count == orig(this.integrator.evaluations.count)
this.integrator.evaluations.maxCountCallback == orig(this.integrator.evaluations.maxCountCallback)
this.integrator.evaluations.maxCountCallback.getClass().getName() == orig(this.integrator.evaluations.maxCountCallback.getClass().getName())
this.integrator.expandable == orig(this.integrator.expandable)
this.integrator.expandable.primary == orig(this.integrator.expandable.primary)
this.integrator.expandable.primary.getClass().getName() == orig(this.integrator.expandable.primary.getClass().getName())
this.integrator.expandable.primaryMapper == orig(this.integrator.expandable.primaryMapper)
this.integrator.expandable.time == orig(this.integrator.expandable.time)
this.integrator.expandable.primaryState == orig(this.integrator.expandable.primaryState)
this.integrator.expandable.primaryState[] == orig(this.integrator.expandable.primaryState[])
this.integrator.expandable.primaryStateDot == orig(this.integrator.expandable.primaryStateDot)
this.integrator.expandable.primaryStateDot[] == orig(this.integrator.expandable.primaryStateDot[])
this.integrator.expandable.components == orig(this.integrator.expandable.components)
this.integrator.expandable.components[] == orig(this.integrator.expandable.components[])
this.integrator.expandable.components.getClass().getName() == orig(this.integrator.expandable.components.getClass().getName())
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.interpolatedPrimaryState == orig(this.interpolatedPrimaryState)
this.interpolatedPrimaryState[] == orig(this.interpolatedPrimaryState[])
this.interpolatedPrimaryDerivatives == orig(this.interpolatedPrimaryDerivatives)
this.interpolatedPrimaryDerivatives[] == orig(this.interpolatedPrimaryDerivatives[])
this.interpolatedSecondaryState == orig(this.interpolatedSecondaryState)
this.interpolatedSecondaryState.getClass().getName() == orig(this.interpolatedSecondaryState.getClass().getName())
this.interpolatedSecondaryState[] == orig(this.interpolatedSecondaryState[])
this.interpolatedSecondaryDerivatives == orig(this.interpolatedSecondaryDerivatives)
this.interpolatedSecondaryDerivatives.getClass().getName() == orig(this.interpolatedSecondaryDerivatives.getClass().getName())
this.interpolatedSecondaryDerivatives[] == orig(this.interpolatedSecondaryDerivatives[])
this.forward == orig(this.forward)
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.secondaryMappers == orig(this.secondaryMappers)
this.secondaryMappers.getClass().getName() == orig(this.secondaryMappers.getClass().getName())
this.secondaryMappers[] == orig(this.secondaryMappers[])
this.secondaryMappers[].firstIndex == orig(this.secondaryMappers[].firstIndex)
this.secondaryMappers[].dimension == orig(this.secondaryMappers[].dimension)
this.vectorsInitialized == false
this.finalized == false
this.dirtyState == true
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolatorTest$1:::OBJECT
this has only one value
org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolatorTest.this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolatorTest$1.(org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolatorTest):::ENTER
org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolatorTest.this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolatorTest$1.(org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolatorTest):::EXIT
org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolatorTest.this == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolatorTest.this)
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolatorTest$1.handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean):::ENTER
interpolator has only one value
interpolator.getClass().getName() == org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator.class
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolatorTest$1.handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean):::EXIT
org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolatorTest.this == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolatorTest.this)
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolatorTest$1.init(double, double[], double):::ENTER
t0 == 0.0
y0 has only one value
y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
t == 20.0
size(y0[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolatorTest$1.init(double, double[], double):::EXIT
org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolatorTest.this == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolatorTest.this)
y0[] == orig(y0[])
y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolatorTest:::OBJECT
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolatorTest.DormandPrince54StepInterpolatorTest():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolatorTest.checkClone():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolatorTest.checkClone():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolatorTest.derivativesConsistency():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolatorTest.derivativesConsistency():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolatorTest.serialization():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolatorTest.serialization():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator:::CLASS
org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.METHOD_NAME has only one value
org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.METHOD_NAME.toString == "Dormand-Prince 8 (5, 3)"
org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.STATIC_C has only one value
org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.STATIC_C[] == [0.05260015195876774, 0.0789002279381516, 0.1183503419072274, 0.28164965809277265, 0.3333333333333333, 0.25, 0.3076923076923077, 0.6512820512820513, 0.6, 0.8571428571428571, 1.0, 1.0]
org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.STATIC_C[] elements <= 1.0
org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.STATIC_C[] elements >= 0.05260015195876774
org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.STATIC_A has only one value
org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.STATIC_A.getClass().getName() == double[][].class
org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.STATIC_A[] contains no nulls and has only one value, of length 12
org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.STATIC_A[] elements != null
org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.STATIC_B has only one value
org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.STATIC_B[] == [0.054293734116568765, 0.0, 0.0, 0.0, 0.0, 4.450312892752409, 1.8915178993145003, -5.801203960010585, 0.3111643669578199, -0.1521609496625161, 0.20136540080403034, 0.04471061572777259, 0.0]
size(org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.STATIC_C[]) == 12
size(org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.STATIC_A[]) == 12
size(org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.STATIC_B[]) == 13
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator:::OBJECT
this.fsal == true
this.c has only one value
this.c[] == [0.05260015195876774, 0.0789002279381516, 0.1183503419072274, 0.28164965809277265, 0.3333333333333333, 0.25, 0.3076923076923077, 0.6512820512820513, 0.6, 0.8571428571428571, 1.0, 1.0]
this.c[] elements <= 1.0
this.c[] elements >= 0.05260015195876774
this.a has only one value
this.a.getClass().getName() == double[][].class
this.a[] contains no nulls and has only one value, of length 12
this.a[] elements != null
this.b has only one value
this.b[] == [0.054293734116568765, 0.0, 0.0, 0.0, 0.0, 4.450312892752409, 1.8915178993145003, -5.801203960010585, 0.3111643669578199, -0.1521609496625161, 0.20136540080403034, 0.04471061572777259, 0.0]
this.prototype.getClass().getName() == org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.class
this.prototype.previousState == null
this.prototype.yDotK == null
this.prototype.integrator == null
this.prototype.h == Double.NaN
this.prototype.currentState == null
this.prototype.interpolatedTime == Double.NaN
this.prototype.interpolatedState == null
this.prototype.interpolatedDerivatives == null
this.prototype.interpolatedPrimaryState == null
this.prototype.interpolatedPrimaryDerivatives == null
this.prototype.interpolatedSecondaryState == null
this.prototype.interpolatedSecondaryDerivatives == null
this.prototype.globalPreviousTime == Double.NaN
this.prototype.globalCurrentTime == Double.NaN
this.prototype.softPreviousTime == Double.NaN
this.prototype.softCurrentTime == Double.NaN
this.prototype.forward == true
this.prototype.dirtyState == true
this.prototype.primaryMapper == null
this.prototype.secondaryMappers == null
this.exp one of { -0.125, 0.0 }
this.safety one of { 0.0, 0.9 }
this.minReduction one of { 0.0, 0.2 }
this.maxGrowth one of { 0.0, 10.0 }
this.vecAbsoluteTolerance == null
this.vecRelativeTolerance == null
this.mainSetDimension >= 0
this.initialStep one of { -1.0, 3.0, 60.0 }
this.minStep >= 0.0
this.maxStep >= 0.1
this.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.isLastStep == false
this.eventsStates.getClass().getName() == java.util.ArrayList.class
this.name has only one value
this.name.toString == "Dormand-Prince 8 (5, 3)"
this.evaluations.maximalCount == 2147483647
this.evaluations.count >= 0
this.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
this.expandable.primaryMapper.firstIndex == 0
this.expandable.time >= 0.0
this.expandable.components[] == []
this.expandable.components[].getClass().getName() == []
this.expandable.components.getClass().getName() == java.util.ArrayList.class
size(this.c[]) == 12
size(this.a[]) == 12
size(this.b[]) == 13
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.DormandPrince853Integrator(double, double, double, double):::ENTER
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.DormandPrince853Integrator(double, double, double, double):::EXIT
this.prototype.finalized == false
this.exp == -0.125
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 10.0
this.mainSetDimension == 0
this.initialStep == -1.0
this.stepStart == Double.NaN
this.resetOccurred == false
this.statesInitialized == false
this.evaluations.count == 0
this.expandable == null
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.estimateError(double[][], double[], double[], double):::ENTER
this.prototype.finalized == true
this.exp == -0.125
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 10.0
yDotK.getClass().getName() == double[][].class
yDotK[] elements != null
size(yDotK[]) == 13
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.estimateError(double[][], double[], double[], double):::EXIT
org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.METHOD_NAME == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.METHOD_NAME)
org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.METHOD_NAME.toString == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.METHOD_NAME.toString)
org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.STATIC_C == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.STATIC_C)
org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.STATIC_C[] == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.STATIC_C[])
org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.STATIC_A == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.STATIC_A)
org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.STATIC_A.getClass().getName() == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.STATIC_A.getClass().getName())
org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.STATIC_A[] == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.STATIC_A[])
org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.STATIC_B == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.STATIC_B)
org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.STATIC_B[] == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.STATIC_B[])
this.fsal == orig(this.fsal)
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a.getClass().getName() == orig(this.a.getClass().getName())
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.previousState == orig(this.prototype.previousState)
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.integrator == orig(this.prototype.integrator)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.interpolatedDerivatives == orig(this.prototype.interpolatedDerivatives)
this.prototype.interpolatedPrimaryState == orig(this.prototype.interpolatedPrimaryState)
this.prototype.interpolatedPrimaryDerivatives == orig(this.prototype.interpolatedPrimaryDerivatives)
this.prototype.interpolatedSecondaryState == orig(this.prototype.interpolatedSecondaryState)
this.prototype.interpolatedSecondaryDerivatives == orig(this.prototype.interpolatedSecondaryDerivatives)
this.prototype.finalized == orig(this.prototype.finalized)
this.prototype.forward == orig(this.prototype.forward)
this.prototype.dirtyState == orig(this.prototype.dirtyState)
this.prototype.primaryMapper == orig(this.prototype.primaryMapper)
this.prototype.secondaryMappers == orig(this.prototype.secondaryMappers)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.minReduction == orig(this.minReduction)
this.maxGrowth == orig(this.maxGrowth)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.mainSetDimension == orig(this.mainSetDimension)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
this.expandable.primary == orig(this.expandable.primary)
this.expandable.primary.getClass().getName() == orig(this.expandable.primary.getClass().getName())
this.expandable.primaryMapper == orig(this.expandable.primaryMapper)
this.expandable.primaryMapper.firstIndex == orig(this.expandable.primaryMapper.firstIndex)
this.expandable.primaryMapper.dimension == orig(this.expandable.primaryMapper.dimension)
this.expandable.time == orig(this.expandable.time)
this.expandable.primaryState == orig(this.expandable.primaryState)
this.expandable.primaryState[] == orig(this.expandable.primaryState[])
this.expandable.primaryStateDot == orig(this.expandable.primaryStateDot)
this.expandable.primaryStateDot[] == orig(this.expandable.primaryStateDot[])
this.expandable.components == orig(this.expandable.components)
this.expandable.components[] == orig(this.expandable.components[])
this.expandable.components.getClass().getName() == orig(this.expandable.components.getClass().getName())
yDotK[] == orig(yDotK[])
y0[] == orig(y0[])
y1[] == orig(y1[])
this.prototype.finalized == true
this.exp == -0.125
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 10.0
yDotK[] elements != null
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.getOrder():::ENTER
this.stepStart >= 0.0
this.resetOccurred == false
this.statesInitialized == false
this.evaluations.count one of { 0, 1 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.getOrder():::EXIT
org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.METHOD_NAME == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.METHOD_NAME)
org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.METHOD_NAME.toString == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.METHOD_NAME.toString)
org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.STATIC_C == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.STATIC_C)
org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.STATIC_C[] == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.STATIC_C[])
org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.STATIC_A == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.STATIC_A)
org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.STATIC_A.getClass().getName() == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.STATIC_A.getClass().getName())
org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.STATIC_A[] == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.STATIC_A[])
org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.STATIC_B == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.STATIC_B)
org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.STATIC_B[] == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.STATIC_B[])
this.fsal == orig(this.fsal)
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a.getClass().getName() == orig(this.a.getClass().getName())
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.previousState == orig(this.prototype.previousState)
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.integrator == orig(this.prototype.integrator)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.interpolatedDerivatives == orig(this.prototype.interpolatedDerivatives)
this.prototype.interpolatedPrimaryState == orig(this.prototype.interpolatedPrimaryState)
this.prototype.interpolatedPrimaryDerivatives == orig(this.prototype.interpolatedPrimaryDerivatives)
this.prototype.interpolatedSecondaryState == orig(this.prototype.interpolatedSecondaryState)
this.prototype.interpolatedSecondaryDerivatives == orig(this.prototype.interpolatedSecondaryDerivatives)
this.prototype.finalized == orig(this.prototype.finalized)
this.prototype.forward == orig(this.prototype.forward)
this.prototype.dirtyState == orig(this.prototype.dirtyState)
this.prototype.primaryMapper == orig(this.prototype.primaryMapper)
this.prototype.secondaryMappers == orig(this.prototype.secondaryMappers)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.minReduction == orig(this.minReduction)
this.maxGrowth == orig(this.maxGrowth)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.mainSetDimension == orig(this.mainSetDimension)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
this.expandable.primary == orig(this.expandable.primary)
this.expandable.primary.getClass().getName() == orig(this.expandable.primary.getClass().getName())
this.expandable.primaryMapper == orig(this.expandable.primaryMapper)
this.expandable.primaryMapper.firstIndex == orig(this.expandable.primaryMapper.firstIndex)
this.expandable.primaryMapper.dimension == orig(this.expandable.primaryMapper.dimension)
this.expandable.time == orig(this.expandable.time)
this.expandable.primaryState == orig(this.expandable.primaryState)
this.expandable.primaryState[] == orig(this.expandable.primaryState[])
this.expandable.primaryStateDot == orig(this.expandable.primaryStateDot)
this.expandable.primaryStateDot[] == orig(this.expandable.primaryStateDot[])
this.expandable.components == orig(this.expandable.components)
this.expandable.components[] == orig(this.expandable.components[])
this.expandable.components.getClass().getName() == orig(this.expandable.components.getClass().getName())
this.stepStart >= 0.0
this.resetOccurred == false
this.statesInitialized == false
this.evaluations.count one of { 0, 1 }
return == 8
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest$1:::OBJECT
this has only one value
this.val$k has only one value
this.val$k[] == [1.0E-4, 1.0E-5, 1.0E-6]
this.val$k[] elements one of { 1.0E-6, 1.0E-5, 1.0E-4 }
this.val$k[] sorted by >
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.this has only one value
size(this.val$k[]) == 3
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest$1.(org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest, double[]):::ENTER
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.this has only one value
$hidden$2 has only one value
$hidden$2[] == [1.0E-4, 1.0E-5, 1.0E-6]
$hidden$2[] elements one of { 1.0E-6, 1.0E-5, 1.0E-4 }
size($hidden$2[]) == 3
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest$1.(org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest, double[]):::EXIT
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.this)
$hidden$2[] == orig($hidden$2[])
$hidden$2[] == [1.0E-4, 1.0E-5, 1.0E-6]
$hidden$2[] elements one of { 1.0E-6, 1.0E-5, 1.0E-4 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest$1.computeDerivatives(double, double[], double[]):::ENTER
t == 1.8782503200000029E9
y[] sorted by <
yDot[] sorted by >=
size(y[]) == 3
size(yDot[]) == 3
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest$1.computeDerivatives(double, double[], double[]):::EXIT
this.val$k == orig(this.val$k)
this.val$k[] == orig(this.val$k[])
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.this)
y[] == orig(y[])
y[] sorted by <
yDot[] sorted by >
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest$1.getDimension():::ENTER
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest$1.getDimension():::EXIT
this.val$k == orig(this.val$k)
this.val$k[] == orig(this.val$k[])
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.this)
return == 3
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest$2:::OBJECT
this has only one value
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest$2.(org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest):::ENTER
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest$2.(org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest):::EXIT
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.this)
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest$2.eventOccurred(double, double[], boolean):::ENTER
t == 1.8782503799999986E9
y has only one value
y[] == [1.0060180356223287, 2.0012003599861283, 3.0001800053872327]
y[] elements one of { 1.0060180356223287, 2.0012003599861283, 3.0001800053872327 }
increasing == true
size(y[]) == 3
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest$2.eventOccurred(double, double[], boolean):::EXIT
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.this)
y[] == orig(y[])
y[] == [1.0060180356223287, 2.0012003599861283, 3.0001800053872327]
y[] elements one of { 1.0060180356223287, 2.0012003599861283, 3.0001800053872327 }
return has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.STOP has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.RESET_STATE has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.RESET_DERIVATIVES has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.CONTINUE has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES.getClass().getName() == org.apache.commons.math3.ode.events.EventHandler$Action[].class
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[] contains no nulls and has only one value, of length 4
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[].getClass().getName() == [org.apache.commons.math3.ode.events.EventHandler.Action, org.apache.commons.math3.ode.events.EventHandler.Action, org.apache.commons.math3.ode.events.EventHandler.Action, org.apache.commons.math3.ode.events.EventHandler.Action]
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[].getClass().getName() elements == org.apache.commons.math3.ode.events.EventHandler.Action.class
size(org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest$2.g(double, double[]):::ENTER
t == 1.8782503200000029E9
y[] sorted by <
size(y[]) == 3
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest$2.g(double, double[]):::EXIT
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.this)
y[] == orig(y[])
y[] sorted by <
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest$2.init(double, double[], double):::ENTER
t0 == 1.8782503200000029E9
y0 has only one value
y0[] == [1.0, 2.0, 3.0]
y0[] elements one of { 1.0, 2.0, 3.0 }
t == 1.8782504999999986E9
size(y0[]) == 3
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest$2.init(double, double[], double):::EXIT
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.this)
y0[] == orig(y0[])
y0[] == [1.0, 2.0, 3.0]
y0[] elements one of { 1.0, 2.0, 3.0 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest$3:::OBJECT
this has only one value
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest$3.(org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest):::ENTER
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest$3.(org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest):::EXIT
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.this)
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest$3.computeDerivatives(double, double[], double[]):::ENTER
y has only one value
yDot has only one value
size(y[]) == 1
size(yDot[]) == 1
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest$3.computeDerivatives(double, double[], double[]):::EXIT
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.this)
y[] == orig(y[])
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest$3.getDimension():::ENTER
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest$3.getDimension():::EXIT
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.this)
return == 1
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest$KeplerHandler:::OBJECT
this has only one value
this.nbSteps >= 0
this.pb has only one value
this.pb.e == 0.9
this.pb.y has only one value
this.pb.n == 4
this.pb.calls >= 0
this.pb.t0 == 0.0
this.pb.y0 has only one value
this.pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
this.pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
this.pb.t1 == 20.0
this.pb.errorScale has only one value
this.pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
this.pb.errorScale[] elements == 1.0
size(this.pb.y[]) == 4
size(this.pb.y0[]) == 4
size(this.pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest$KeplerHandler.KeplerHandler(org.apache.commons.math3.ode.TestProblem3):::ENTER
pb has only one value
pb.e == 0.9
pb.y has only one value
pb.y[] == [0.0, 0.0, 0.0, 0.0]
pb.y[] elements == 0.0
pb.n == 4
pb.calls == 0
pb.t0 == 0.0
pb.y0 has only one value
pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
pb.t1 == 20.0
pb.errorScale has only one value
pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
pb.errorScale[] elements == 1.0
size(pb.y[]) == 4
size(pb.y0[]) == 4
size(pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest$KeplerHandler.KeplerHandler(org.apache.commons.math3.ode.TestProblem3):::EXIT
pb.e == orig(pb.e)
pb.y == orig(pb.y)
pb.y[] == orig(pb.y[])
pb.n == orig(pb.n)
pb.calls == orig(pb.calls)
pb.t0 == orig(pb.t0)
pb.y0 == orig(pb.y0)
pb.y0[] == orig(pb.y0[])
pb.t1 == orig(pb.t1)
pb.errorScale == orig(pb.errorScale)
pb.errorScale[] == orig(pb.errorScale[])
this.nbSteps == 0
this.maxError == 0.0
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
pb.e == 0.9
pb.y has only one value
pb.y[] == [0.0, 0.0, 0.0, 0.0]
pb.y[] elements == 0.0
pb.n == 4
pb.calls == 0
pb.t0 == 0.0
pb.y0 has only one value
pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
pb.t1 == 20.0
pb.errorScale has only one value
pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
pb.errorScale[] elements == 1.0
size(pb.y[]) == 4
size(pb.y0[]) == 4
size(pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest$KeplerHandler.handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean):::ENTER
this.maxError == 0.0
interpolator has only one value
interpolator.getClass().getName() == org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.class
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest$KeplerHandler.handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean):::EXIT
this.pb == orig(this.pb)
this.pb.e == orig(this.pb.e)
this.pb.y == orig(this.pb.y)
this.pb.n == orig(this.pb.n)
this.pb.calls == orig(this.pb.calls)
this.pb.t0 == orig(this.pb.t0)
this.pb.y0 == orig(this.pb.y0)
this.pb.y0[] == orig(this.pb.y0[])
this.pb.t1 == orig(this.pb.t1)
this.pb.errorScale == orig(this.pb.errorScale)
this.pb.errorScale[] == orig(this.pb.errorScale[])
size(this.pb.y[]) == orig(size(this.pb.y[]))
this.pb.y[] elements != 0
this.nbSteps - orig(this.nbSteps) - 1 == 0
orig(this.maxError) % this.maxError == 0
this.maxError >= orig(this.maxError)
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest$KeplerHandler.init(double, double[], double):::ENTER
this.nbSteps == 0
this.maxError == 0.0
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
t0 == 0.0
y0 has only one value
y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
t == 20.0
size(y0[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest$KeplerHandler.init(double, double[], double):::EXIT
this.nbSteps == orig(this.nbSteps)
this.maxError == orig(this.maxError)
this.pb == orig(this.pb)
this.pb.e == orig(this.pb.e)
this.pb.y == orig(this.pb.y)
this.pb.y[] == orig(this.pb.y[])
this.pb.n == orig(this.pb.n)
this.pb.calls == orig(this.pb.calls)
this.pb.t0 == orig(this.pb.t0)
this.pb.y0 == orig(this.pb.y0)
this.pb.y0[] == orig(this.pb.y0[])
this.pb.t1 == orig(this.pb.t1)
this.pb.errorScale == orig(this.pb.errorScale)
this.pb.errorScale[] == orig(this.pb.errorScale[])
y0[] == orig(y0[])
this.nbSteps == 0
this.maxError == 0.0
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest$VariableHandler:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest$VariableHandler.VariableHandler():::EXIT
this.firstTime == true
this.minStep == 0.0
this.maxStep == 0.0
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest$VariableHandler.handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean):::ENTER
interpolator has only one value
interpolator.getClass().getName() == org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.class
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest$VariableHandler.handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean):::EXIT
this.firstTime == false
this.maxStep >= orig(this.maxStep)
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest$VariableHandler.init(double, double[], double):::ENTER
this.firstTime == true
this.minStep == 0.0
this.maxStep == 0.0
t0 == 0.0
y0 has only one value
y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
t == 20.0
size(y0[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest$VariableHandler.init(double, double[], double):::EXIT
this.firstTime == orig(this.firstTime)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
y0[] == orig(y0[])
this.firstTime == true
this.minStep == 0.0
this.maxStep == 0.0
y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest:::OBJECT
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.DormandPrince853IntegratorTest():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.testBackward():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.testBackward():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.testEvents():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.testEvents():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.testIncreasingTolerance():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.testIncreasingTolerance():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.testKepler():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.testKepler():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.testMissedEndEvent():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.testMissedEndEvent():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.testTooLargeFirstStep():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.testTooLargeFirstStep():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.testUnstableDerivative():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.testUnstableDerivative():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.testVariableSteps():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.testVariableSteps():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator:::CLASS
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D has only one value
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == double[][].class
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D[] contains no nulls and has only one value, of length 4
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D[] elements != null
size(org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator:::OBJECT
this.yDotKLast.getClass().getName() == double[][].class
this.yDotKLast[] elements != null
this.v.getClass().getName() == double[][].class
this.v[] elements != null
this.yDotK.getClass().getName() == double[][].class
this.yDotK[] elements != null
this.integrator.getClass().getName() == org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.class
this.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.integrator.eventsStates.getClass().getName() == java.util.ArrayList.class
this.integrator.name has only one value
this.integrator.name.toString == "Dormand-Prince 8 (5, 3)"
this.integrator.evaluations.maximalCount == 2147483647
this.integrator.evaluations.count >= 0
this.integrator.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
this.integrator.expandable.time >= 0.0
this.integrator.expandable.components[] == []
this.integrator.expandable.components[].getClass().getName() == []
this.integrator.expandable.components.getClass().getName() == java.util.ArrayList.class
this.interpolatedSecondaryState.getClass().getName() == double[][].class
this.interpolatedSecondaryState[] == []
this.interpolatedSecondaryDerivatives.getClass().getName() == double[][].class
this.interpolatedSecondaryDerivatives[] == []
this.primaryMapper.firstIndex == 0
this.primaryMapper.dimension >= 1
this.secondaryMappers.getClass().getName() == org.apache.commons.math3.ode.EquationsMapper[].class
this.secondaryMappers[] == []
this.secondaryMappers[].getClass().getName() == []
this.secondaryMappers[].firstIndex == []
this.secondaryMappers[].dimension == []
size(this.yDotKLast[]) == 3
size(this.v[]) == 7
size(this.previousState[]) >= 1
size(this.yDotK[]) == 13
size(this.integrator.expandable.primaryState[]) >= 1
size(this.integrator.expandable.primaryStateDot[]) >= 1
size(this.currentState[]) >= 1
size(this.interpolatedState[]) >= 1
size(this.interpolatedDerivatives[]) >= 1
size(this.interpolatedPrimaryState[]) >= 1
size(this.interpolatedPrimaryDerivatives[]) >= 1
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.DormandPrince853StepInterpolator():::EXIT
this.yDotKLast == null
this.v == null
this.vectorsInitialized == false
this.previousState == null
this.yDotK == null
this.integrator == null
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.interpolatedPrimaryState == null
this.interpolatedPrimaryDerivatives == null
this.interpolatedSecondaryState == null
this.interpolatedSecondaryDerivatives == null
this.globalPreviousTime == Double.NaN
this.globalCurrentTime == Double.NaN
this.softPreviousTime == Double.NaN
this.softCurrentTime == Double.NaN
this.finalized == false
this.forward == true
this.dirtyState == true
this.primaryMapper == null
this.secondaryMappers == null
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.DormandPrince853StepInterpolator(org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator):::ENTER
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D has only one value
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == double[][].class
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D[] contains no nulls and has only one value, of length 4
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D[] elements != null
interpolator.yDotKLast.getClass().getName() == double[][].class
interpolator.yDotKLast[] elements != null
interpolator.v.getClass().getName() == double[][].class
interpolator.v[] elements != null
interpolator.yDotK.getClass().getName() == double[][].class
interpolator.yDotK[] elements != null
interpolator.integrator.getClass().getName() == org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.class
interpolator.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.resetOccurred == false
interpolator.integrator.eventsStates.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.statesInitialized == true
interpolator.integrator.name has only one value
interpolator.integrator.name.toString == "Dormand-Prince 8 (5, 3)"
interpolator.interpolatedPrimaryDerivatives[] elements == 0.0
interpolator.interpolatedPrimaryDerivatives[] one of { [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
interpolator.interpolatedSecondaryState.getClass().getName() == double[][].class
interpolator.interpolatedSecondaryState[] == []
interpolator.interpolatedSecondaryDerivatives.getClass().getName() == double[][].class
interpolator.interpolatedSecondaryDerivatives[] == []
interpolator.finalized == true
interpolator.primaryMapper.firstIndex == 0
interpolator.primaryMapper.dimension one of { 2, 4 }
interpolator.secondaryMappers.getClass().getName() == org.apache.commons.math3.ode.EquationsMapper[].class
interpolator.secondaryMappers[] == []
interpolator.secondaryMappers[].getClass().getName() == []
interpolator.secondaryMappers[].firstIndex == []
interpolator.secondaryMappers[].dimension == []
size(org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D[]) == 4
size(interpolator.yDotKLast[]) == 3
size(interpolator.v[]) == 7
size(interpolator.previousState[]) one of { 2, 4 }
size(interpolator.yDotK[]) == 13
size(interpolator.currentState[]) one of { 2, 4 }
size(interpolator.interpolatedState[]) one of { 2, 4 }
size(interpolator.interpolatedDerivatives[]) one of { 2, 4 }
size(interpolator.interpolatedPrimaryState[]) one of { 2, 4 }
size(interpolator.interpolatedPrimaryDerivatives[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.DormandPrince853StepInterpolator(org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator):::EXIT
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D)
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName())
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D[] == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D[])
interpolator.yDotKLast == orig(interpolator.yDotKLast)
interpolator.yDotKLast.getClass().getName() == orig(interpolator.yDotKLast.getClass().getName())
interpolator.yDotKLast[] == orig(interpolator.yDotKLast[])
interpolator.v == orig(interpolator.v)
interpolator.v.getClass().getName() == orig(interpolator.v.getClass().getName())
interpolator.v[] == orig(interpolator.v[])
interpolator.vectorsInitialized == orig(interpolator.vectorsInitialized)
interpolator.previousState == orig(interpolator.previousState)
interpolator.previousState[] == orig(interpolator.previousState[])
interpolator.yDotK == orig(interpolator.yDotK)
interpolator.yDotK.getClass().getName() == orig(interpolator.yDotK.getClass().getName())
interpolator.yDotK[] == orig(interpolator.yDotK[])
interpolator.integrator == orig(interpolator.integrator)
interpolator.integrator.getClass().getName() == orig(interpolator.integrator.getClass().getName())
interpolator.integrator.stepHandlers == orig(interpolator.integrator.stepHandlers)
interpolator.integrator.stepHandlers.getClass().getName() == orig(interpolator.integrator.stepHandlers.getClass().getName())
interpolator.integrator.stepStart == orig(interpolator.integrator.stepStart)
interpolator.integrator.stepSize == orig(interpolator.integrator.stepSize)
interpolator.integrator.isLastStep == orig(interpolator.integrator.isLastStep)
interpolator.integrator.resetOccurred == orig(interpolator.integrator.resetOccurred)
interpolator.integrator.eventsStates == orig(interpolator.integrator.eventsStates)
interpolator.integrator.eventsStates.getClass().getName() == orig(interpolator.integrator.eventsStates.getClass().getName())
interpolator.integrator.statesInitialized == orig(interpolator.integrator.statesInitialized)
interpolator.integrator.name == orig(interpolator.integrator.name)
interpolator.integrator.name.toString == orig(interpolator.integrator.name.toString)
interpolator.integrator.evaluations == orig(interpolator.integrator.evaluations)
interpolator.integrator.expandable == orig(interpolator.integrator.expandable)
interpolator.currentState == orig(interpolator.currentState)
interpolator.currentState[] == orig(interpolator.currentState[])
interpolator.interpolatedState == orig(interpolator.interpolatedState)
interpolator.interpolatedState[] == orig(interpolator.interpolatedState[])
interpolator.interpolatedDerivatives == orig(interpolator.interpolatedDerivatives)
interpolator.interpolatedDerivatives[] == orig(interpolator.interpolatedDerivatives[])
interpolator.interpolatedPrimaryState == orig(interpolator.interpolatedPrimaryState)
interpolator.interpolatedPrimaryState[] == orig(interpolator.interpolatedPrimaryState[])
interpolator.interpolatedPrimaryDerivatives == orig(interpolator.interpolatedPrimaryDerivatives)
interpolator.interpolatedPrimaryDerivatives[] == orig(interpolator.interpolatedPrimaryDerivatives[])
interpolator.interpolatedSecondaryState == orig(interpolator.interpolatedSecondaryState)
interpolator.interpolatedSecondaryState.getClass().getName() == orig(interpolator.interpolatedSecondaryState.getClass().getName())
interpolator.interpolatedSecondaryState[] == orig(interpolator.interpolatedSecondaryState[])
interpolator.interpolatedSecondaryDerivatives == orig(interpolator.interpolatedSecondaryDerivatives)
interpolator.interpolatedSecondaryDerivatives.getClass().getName() == orig(interpolator.interpolatedSecondaryDerivatives.getClass().getName())
interpolator.interpolatedSecondaryDerivatives[] == orig(interpolator.interpolatedSecondaryDerivatives[])
interpolator.finalized == orig(interpolator.finalized)
interpolator.forward == orig(interpolator.forward)
interpolator.dirtyState == orig(interpolator.dirtyState)
interpolator.primaryMapper == orig(interpolator.primaryMapper)
interpolator.primaryMapper.firstIndex == orig(interpolator.primaryMapper.firstIndex)
interpolator.primaryMapper.dimension == orig(interpolator.primaryMapper.dimension)
interpolator.secondaryMappers == orig(interpolator.secondaryMappers)
interpolator.secondaryMappers.getClass().getName() == orig(interpolator.secondaryMappers.getClass().getName())
interpolator.secondaryMappers[] == orig(interpolator.secondaryMappers[])
interpolator.secondaryMappers[].firstIndex == orig(interpolator.secondaryMappers[].firstIndex)
interpolator.secondaryMappers[].dimension == orig(interpolator.secondaryMappers[].dimension)
this.integrator == null
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.interpolatedPrimaryDerivatives[] one of { [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.finalized == true
this.primaryMapper.dimension one of { 2, 4 }
interpolator.yDotKLast.getClass().getName() == double[][].class
interpolator.yDotKLast[] elements != null
interpolator.v.getClass().getName() == double[][].class
interpolator.v[] elements != null
interpolator.yDotK.getClass().getName() == double[][].class
interpolator.yDotK[] elements != null
interpolator.integrator.getClass().getName() == org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.class
interpolator.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.resetOccurred == false
interpolator.integrator.eventsStates.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.statesInitialized == true
interpolator.integrator.name has only one value
interpolator.integrator.name.toString == "Dormand-Prince 8 (5, 3)"
interpolator.interpolatedPrimaryDerivatives[] elements == 0.0
interpolator.interpolatedPrimaryDerivatives[] one of { [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
interpolator.interpolatedSecondaryState.getClass().getName() == double[][].class
interpolator.interpolatedSecondaryState[] == []
interpolator.interpolatedSecondaryDerivatives.getClass().getName() == double[][].class
interpolator.interpolatedSecondaryDerivatives[] == []
interpolator.finalized == true
interpolator.primaryMapper.firstIndex == 0
interpolator.primaryMapper.dimension one of { 2, 4 }
interpolator.secondaryMappers.getClass().getName() == org.apache.commons.math3.ode.EquationsMapper[].class
interpolator.secondaryMappers[] == []
interpolator.secondaryMappers[].getClass().getName() == []
interpolator.secondaryMappers[].firstIndex == []
interpolator.secondaryMappers[].dimension == []
size(this.previousState[]) one of { 2, 4 }
size(this.currentState[]) one of { 2, 4 }
size(this.interpolatedState[]) one of { 2, 4 }
size(this.interpolatedDerivatives[]) one of { 2, 4 }
size(this.interpolatedPrimaryState[]) one of { 2, 4 }
size(this.interpolatedPrimaryDerivatives[]) one of { 2, 4 }
size(interpolator.yDotKLast[]) == 3
size(interpolator.v[]) == 7
size(interpolator.previousState[]) one of { 2, 4 }
size(interpolator.yDotK[]) == 13
size(interpolator.currentState[]) one of { 2, 4 }
size(interpolator.interpolatedState[]) one of { 2, 4 }
size(interpolator.interpolatedDerivatives[]) one of { 2, 4 }
size(interpolator.interpolatedPrimaryState[]) one of { 2, 4 }
size(interpolator.interpolatedPrimaryDerivatives[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::ENTER
this.dirtyState == true
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::EXIT
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D)
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName())
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D[] == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D[])
this.yDotKLast == orig(this.yDotKLast)
this.yDotKLast.getClass().getName() == orig(this.yDotKLast.getClass().getName())
this.yDotKLast[] == orig(this.yDotKLast[])
this.v.getClass().getName() == orig(this.v.getClass().getName())
this.previousState == orig(this.previousState)
this.previousState[] == orig(this.previousState[])
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.integrator.stepHandlers == orig(this.integrator.stepHandlers)
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.stepHandlers.getClass().getName())
this.integrator.stepStart == orig(this.integrator.stepStart)
this.integrator.stepSize == orig(this.integrator.stepSize)
this.integrator.isLastStep == orig(this.integrator.isLastStep)
this.integrator.resetOccurred == orig(this.integrator.resetOccurred)
this.integrator.eventsStates == orig(this.integrator.eventsStates)
this.integrator.eventsStates.getClass().getName() == orig(this.integrator.eventsStates.getClass().getName())
this.integrator.statesInitialized == orig(this.integrator.statesInitialized)
this.integrator.name == orig(this.integrator.name)
this.integrator.name.toString == orig(this.integrator.name.toString)
this.integrator.evaluations == orig(this.integrator.evaluations)
this.integrator.evaluations.maximalCount == orig(this.integrator.evaluations.maximalCount)
this.integrator.evaluations.maxCountCallback == orig(this.integrator.evaluations.maxCountCallback)
this.integrator.evaluations.maxCountCallback.getClass().getName() == orig(this.integrator.evaluations.maxCountCallback.getClass().getName())
this.integrator.expandable == orig(this.integrator.expandable)
this.integrator.expandable.primary == orig(this.integrator.expandable.primary)
this.integrator.expandable.primary.getClass().getName() == orig(this.integrator.expandable.primary.getClass().getName())
this.integrator.expandable.primaryMapper == orig(this.integrator.expandable.primaryMapper)
this.integrator.expandable.time == orig(this.integrator.expandable.time)
this.integrator.expandable.primaryState == orig(this.integrator.expandable.primaryState)
this.integrator.expandable.primaryStateDot == orig(this.integrator.expandable.primaryStateDot)
this.integrator.expandable.components == orig(this.integrator.expandable.components)
this.integrator.expandable.components[] == orig(this.integrator.expandable.components[])
this.integrator.expandable.components.getClass().getName() == orig(this.integrator.expandable.components.getClass().getName())
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedPrimaryState == orig(this.interpolatedPrimaryState)
this.interpolatedPrimaryState[] == orig(this.interpolatedPrimaryState[])
this.interpolatedPrimaryDerivatives == orig(this.interpolatedPrimaryDerivatives)
this.interpolatedPrimaryDerivatives[] == orig(this.interpolatedPrimaryDerivatives[])
this.interpolatedSecondaryState == orig(this.interpolatedSecondaryState)
this.interpolatedSecondaryState.getClass().getName() == orig(this.interpolatedSecondaryState.getClass().getName())
this.interpolatedSecondaryState[] == orig(this.interpolatedSecondaryState[])
this.interpolatedSecondaryDerivatives == orig(this.interpolatedSecondaryDerivatives)
this.interpolatedSecondaryDerivatives.getClass().getName() == orig(this.interpolatedSecondaryDerivatives.getClass().getName())
this.interpolatedSecondaryDerivatives[] == orig(this.interpolatedSecondaryDerivatives[])
this.globalPreviousTime == orig(this.globalPreviousTime)
this.globalCurrentTime == orig(this.globalCurrentTime)
this.softPreviousTime == orig(this.softPreviousTime)
this.softCurrentTime == orig(this.softCurrentTime)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.secondaryMappers == orig(this.secondaryMappers)
this.secondaryMappers.getClass().getName() == orig(this.secondaryMappers.getClass().getName())
this.secondaryMappers[] == orig(this.secondaryMappers[])
this.secondaryMappers[].firstIndex == orig(this.secondaryMappers[].firstIndex)
this.secondaryMappers[].dimension == orig(this.secondaryMappers[].dimension)
size(this.integrator.expandable.primaryState[]) == orig(size(this.integrator.expandable.primaryState[]))
size(this.integrator.expandable.primaryStateDot[]) == orig(size(this.integrator.expandable.primaryStateDot[]))
size(this.interpolatedState[]) == orig(size(this.interpolatedState[]))
size(this.interpolatedDerivatives[]) == orig(size(this.interpolatedDerivatives[]))
this.vectorsInitialized == true
this.finalized == true
this.dirtyState == true
this.v[] == orig(this.v[]) (elementwise)
this.integrator.evaluations.count >= orig(this.integrator.evaluations.count)
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.doCopy():::ENTER
this.integrator.resetOccurred == false
this.integrator.statesInitialized == true
this.integrator.expandable.time one of { 0.0, 3.141592653589793, 6.283185307179586 }
this.integrator.expandable.primaryState[] elements != 0
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.interpolatedPrimaryDerivatives[] one of { [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.finalized == true
this.primaryMapper.dimension one of { 2, 4 }
size(this.previousState[]) one of { 2, 4 }
size(this.integrator.expandable.primaryState[]) one of { 2, 4 }
size(this.integrator.expandable.primaryStateDot[]) one of { 2, 4 }
size(this.currentState[]) one of { 2, 4 }
size(this.interpolatedState[]) one of { 2, 4 }
size(this.interpolatedDerivatives[]) one of { 2, 4 }
size(this.interpolatedPrimaryState[]) one of { 2, 4 }
size(this.interpolatedPrimaryDerivatives[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.doCopy():::EXIT
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D)
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName())
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D[] == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D[])
this.yDotKLast == orig(this.yDotKLast)
this.yDotKLast.getClass().getName() == orig(this.yDotKLast.getClass().getName())
this.yDotKLast[] == orig(this.yDotKLast[])
this.v == orig(this.v)
this.v.getClass().getName() == orig(this.v.getClass().getName())
this.v[] == orig(this.v[])
this.vectorsInitialized == orig(this.vectorsInitialized)
this.previousState == orig(this.previousState)
this.previousState[] == orig(this.previousState[])
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.integrator.stepHandlers == orig(this.integrator.stepHandlers)
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.stepHandlers.getClass().getName())
this.integrator.stepStart == orig(this.integrator.stepStart)
this.integrator.stepSize == orig(this.integrator.stepSize)
this.integrator.isLastStep == orig(this.integrator.isLastStep)
this.integrator.resetOccurred == orig(this.integrator.resetOccurred)
this.integrator.eventsStates == orig(this.integrator.eventsStates)
this.integrator.eventsStates.getClass().getName() == orig(this.integrator.eventsStates.getClass().getName())
this.integrator.statesInitialized == orig(this.integrator.statesInitialized)
this.integrator.name == orig(this.integrator.name)
this.integrator.name.toString == orig(this.integrator.name.toString)
this.integrator.evaluations == orig(this.integrator.evaluations)
this.integrator.evaluations.maximalCount == orig(this.integrator.evaluations.maximalCount)
this.integrator.evaluations.count == orig(this.integrator.evaluations.count)
this.integrator.evaluations.maxCountCallback == orig(this.integrator.evaluations.maxCountCallback)
this.integrator.evaluations.maxCountCallback.getClass().getName() == orig(this.integrator.evaluations.maxCountCallback.getClass().getName())
this.integrator.expandable == orig(this.integrator.expandable)
this.integrator.expandable.primary == orig(this.integrator.expandable.primary)
this.integrator.expandable.primary.getClass().getName() == orig(this.integrator.expandable.primary.getClass().getName())
this.integrator.expandable.primaryMapper == orig(this.integrator.expandable.primaryMapper)
this.integrator.expandable.time == orig(this.integrator.expandable.time)
this.integrator.expandable.primaryState == orig(this.integrator.expandable.primaryState)
this.integrator.expandable.primaryState[] == orig(this.integrator.expandable.primaryState[])
this.integrator.expandable.primaryStateDot == orig(this.integrator.expandable.primaryStateDot)
this.integrator.expandable.primaryStateDot[] == orig(this.integrator.expandable.primaryStateDot[])
this.integrator.expandable.components == orig(this.integrator.expandable.components)
this.integrator.expandable.components[] == orig(this.integrator.expandable.components[])
this.integrator.expandable.components.getClass().getName() == orig(this.integrator.expandable.components.getClass().getName())
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.interpolatedPrimaryState == orig(this.interpolatedPrimaryState)
this.interpolatedPrimaryState[] == orig(this.interpolatedPrimaryState[])
this.interpolatedPrimaryDerivatives == orig(this.interpolatedPrimaryDerivatives)
this.interpolatedPrimaryDerivatives[] == orig(this.interpolatedPrimaryDerivatives[])
this.interpolatedSecondaryState == orig(this.interpolatedSecondaryState)
this.interpolatedSecondaryState.getClass().getName() == orig(this.interpolatedSecondaryState.getClass().getName())
this.interpolatedSecondaryState[] == orig(this.interpolatedSecondaryState[])
this.interpolatedSecondaryDerivatives == orig(this.interpolatedSecondaryDerivatives)
this.interpolatedSecondaryDerivatives.getClass().getName() == orig(this.interpolatedSecondaryDerivatives.getClass().getName())
this.interpolatedSecondaryDerivatives[] == orig(this.interpolatedSecondaryDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.secondaryMappers == orig(this.secondaryMappers)
this.secondaryMappers.getClass().getName() == orig(this.secondaryMappers.getClass().getName())
this.secondaryMappers[] == orig(this.secondaryMappers[])
this.secondaryMappers[].firstIndex == orig(this.secondaryMappers[].firstIndex)
this.secondaryMappers[].dimension == orig(this.secondaryMappers[].dimension)
this.integrator.resetOccurred == false
this.integrator.statesInitialized == true
this.integrator.expandable.time one of { 0.0, 3.141592653589793, 6.283185307179586 }
this.integrator.expandable.primaryState[] elements != 0
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.interpolatedPrimaryDerivatives[] one of { [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.finalized == true
this.primaryMapper.dimension one of { 2, 4 }
return.getClass().getName() == org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.class
size(this.previousState[]) one of { 2, 4 }
size(this.integrator.expandable.primaryState[]) one of { 2, 4 }
size(this.integrator.expandable.primaryStateDot[]) one of { 2, 4 }
size(this.currentState[]) one of { 2, 4 }
size(this.interpolatedState[]) one of { 2, 4 }
size(this.interpolatedDerivatives[]) one of { 2, 4 }
size(this.interpolatedPrimaryState[]) one of { 2, 4 }
size(this.interpolatedPrimaryDerivatives[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.doFinalize():::ENTER
this.vectorsInitialized == false
this.integrator.isLastStep == false
this.finalized == false
this.dirtyState == true
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.doFinalize():::EXIT411
this.yDotKLast == null
this.v == null
this.previousState == null
this.yDotK == null
this.integrator == null
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.interpolatedPrimaryState == null
this.interpolatedPrimaryDerivatives == null
this.interpolatedSecondaryState == null
this.interpolatedSecondaryDerivatives == null
this.globalPreviousTime == Double.NaN
this.globalCurrentTime == Double.NaN
this.softPreviousTime == Double.NaN
this.softCurrentTime == Double.NaN
this.forward == true
this.primaryMapper == null
this.secondaryMappers == null
orig(this.h) == Double.NaN
orig(this.interpolatedTime) == Double.NaN
orig(this.globalPreviousTime) == Double.NaN
orig(this.globalCurrentTime) == Double.NaN
orig(this.softPreviousTime) == Double.NaN
orig(this.softCurrentTime) == Double.NaN
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.doFinalize():::EXIT447
this.h == orig(this.h)
this.interpolatedTime == orig(this.interpolatedTime)
this.globalPreviousTime == orig(this.globalPreviousTime)
this.globalCurrentTime == orig(this.globalCurrentTime)
this.softPreviousTime == orig(this.softPreviousTime)
this.softCurrentTime == orig(this.softCurrentTime)
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.doFinalize():::EXIT
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D)
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName())
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D[] == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D[])
this.yDotKLast == orig(this.yDotKLast)
this.yDotKLast.getClass().getName() == orig(this.yDotKLast.getClass().getName())
this.yDotKLast[] == orig(this.yDotKLast[])
this.v == orig(this.v)
this.v.getClass().getName() == orig(this.v.getClass().getName())
this.v[] == orig(this.v[])
this.vectorsInitialized == orig(this.vectorsInitialized)
this.previousState == orig(this.previousState)
this.previousState[] == orig(this.previousState[])
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.integrator.stepHandlers == orig(this.integrator.stepHandlers)
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.stepHandlers.getClass().getName())
this.integrator.stepStart == orig(this.integrator.stepStart)
this.integrator.stepSize == orig(this.integrator.stepSize)
this.integrator.isLastStep == orig(this.integrator.isLastStep)
this.integrator.resetOccurred == orig(this.integrator.resetOccurred)
this.integrator.eventsStates == orig(this.integrator.eventsStates)
this.integrator.eventsStates.getClass().getName() == orig(this.integrator.eventsStates.getClass().getName())
this.integrator.statesInitialized == orig(this.integrator.statesInitialized)
this.integrator.name == orig(this.integrator.name)
this.integrator.name.toString == orig(this.integrator.name.toString)
this.integrator.evaluations == orig(this.integrator.evaluations)
this.integrator.evaluations.maximalCount == orig(this.integrator.evaluations.maximalCount)
this.integrator.evaluations.maxCountCallback == orig(this.integrator.evaluations.maxCountCallback)
this.integrator.evaluations.maxCountCallback.getClass().getName() == orig(this.integrator.evaluations.maxCountCallback.getClass().getName())
this.integrator.expandable == orig(this.integrator.expandable)
this.integrator.expandable.primary == orig(this.integrator.expandable.primary)
this.integrator.expandable.primary.getClass().getName() == orig(this.integrator.expandable.primary.getClass().getName())
this.integrator.expandable.primaryMapper == orig(this.integrator.expandable.primaryMapper)
this.integrator.expandable.time == orig(this.integrator.expandable.time)
this.integrator.expandable.primaryState == orig(this.integrator.expandable.primaryState)
this.integrator.expandable.primaryStateDot == orig(this.integrator.expandable.primaryStateDot)
this.integrator.expandable.components == orig(this.integrator.expandable.components)
this.integrator.expandable.components[] == orig(this.integrator.expandable.components[])
this.integrator.expandable.components.getClass().getName() == orig(this.integrator.expandable.components.getClass().getName())
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.interpolatedPrimaryState == orig(this.interpolatedPrimaryState)
this.interpolatedPrimaryState[] == orig(this.interpolatedPrimaryState[])
this.interpolatedPrimaryDerivatives == orig(this.interpolatedPrimaryDerivatives)
this.interpolatedPrimaryDerivatives[] == orig(this.interpolatedPrimaryDerivatives[])
this.interpolatedSecondaryState == orig(this.interpolatedSecondaryState)
this.interpolatedSecondaryState.getClass().getName() == orig(this.interpolatedSecondaryState.getClass().getName())
this.interpolatedSecondaryState[] == orig(this.interpolatedSecondaryState[])
this.interpolatedSecondaryDerivatives == orig(this.interpolatedSecondaryDerivatives)
this.interpolatedSecondaryDerivatives.getClass().getName() == orig(this.interpolatedSecondaryDerivatives.getClass().getName())
this.interpolatedSecondaryDerivatives[] == orig(this.interpolatedSecondaryDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.secondaryMappers == orig(this.secondaryMappers)
this.secondaryMappers.getClass().getName() == orig(this.secondaryMappers.getClass().getName())
this.secondaryMappers[] == orig(this.secondaryMappers[])
this.secondaryMappers[].firstIndex == orig(this.secondaryMappers[].firstIndex)
this.secondaryMappers[].dimension == orig(this.secondaryMappers[].dimension)
size(this.integrator.expandable.primaryState[]) == orig(size(this.integrator.expandable.primaryState[]))
size(this.integrator.expandable.primaryStateDot[]) == orig(size(this.integrator.expandable.primaryStateDot[]))
(this.h != orig(this.h))  <==>  (this.globalCurrentTime != orig(this.globalCurrentTime))
(this.h != orig(this.h))  <==>  (this.globalPreviousTime != orig(this.globalPreviousTime))
(this.h != orig(this.h))  <==>  (this.interpolatedTime != orig(this.interpolatedTime))
(this.h != orig(this.h))  <==>  (this.softCurrentTime != orig(this.softCurrentTime))
(this.h != orig(this.h))  <==>  (this.softPreviousTime != orig(this.softPreviousTime))
(this.h != orig(this.h))  ==>  (orig(this.globalCurrentTime) == Double.NaN)
(this.h != orig(this.h))  ==>  (orig(this.globalPreviousTime) == Double.NaN)
(this.h != orig(this.h))  ==>  (orig(this.h) == Double.NaN)
(this.h != orig(this.h))  ==>  (orig(this.interpolatedTime) == Double.NaN)
(this.h != orig(this.h))  ==>  (orig(this.softCurrentTime) == Double.NaN)
(this.h != orig(this.h))  ==>  (orig(this.softPreviousTime) == Double.NaN)
(this.h != orig(this.h))  ==>  (this.currentState == null)
(this.h != orig(this.h))  ==>  (this.forward == true)
(this.h != orig(this.h))  ==>  (this.globalCurrentTime == Double.NaN)
(this.h != orig(this.h))  ==>  (this.globalPreviousTime == Double.NaN)
(this.h != orig(this.h))  ==>  (this.h == Double.NaN)
(this.h != orig(this.h))  ==>  (this.integrator == null)
(this.h != orig(this.h))  ==>  (this.interpolatedDerivatives == null)
(this.h != orig(this.h))  ==>  (this.interpolatedPrimaryDerivatives == null)
(this.h != orig(this.h))  ==>  (this.interpolatedPrimaryState == null)
(this.h != orig(this.h))  ==>  (this.interpolatedSecondaryDerivatives == null)
(this.h != orig(this.h))  ==>  (this.interpolatedSecondaryState == null)
(this.h != orig(this.h))  ==>  (this.interpolatedState == null)
(this.h != orig(this.h))  ==>  (this.interpolatedTime == Double.NaN)
(this.h != orig(this.h))  ==>  (this.previousState == null)
(this.h != orig(this.h))  ==>  (this.primaryMapper == null)
(this.h != orig(this.h))  ==>  (this.secondaryMappers == null)
(this.h != orig(this.h))  ==>  (this.softCurrentTime == Double.NaN)
(this.h != orig(this.h))  ==>  (this.softPreviousTime == Double.NaN)
(this.h != orig(this.h))  ==>  (this.v == null)
(this.h != orig(this.h))  ==>  (this.yDotK == null)
(this.h != orig(this.h))  ==>  (this.yDotKLast == null)
(this.h == orig(this.h))  <==>  (this.globalCurrentTime == orig(this.globalCurrentTime))
(this.h == orig(this.h))  <==>  (this.globalPreviousTime == orig(this.globalPreviousTime))
(this.h == orig(this.h))  <==>  (this.interpolatedTime == orig(this.interpolatedTime))
(this.h == orig(this.h))  <==>  (this.softCurrentTime == orig(this.softCurrentTime))
(this.h == orig(this.h))  <==>  (this.softPreviousTime == orig(this.softPreviousTime))
(this.h == orig(this.h))  ==>  (this.integrator.evaluations.count - orig(this.integrator.evaluations.count) - 3 == 0)
(this.h == orig(this.h))  ==>  (this.integrator.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class)
(this.h == orig(this.h))  ==>  (this.integrator.eventsStates.getClass().getName() == java.util.ArrayList.class)
(this.h == orig(this.h))  ==>  (this.integrator.expandable.components.getClass().getName() == java.util.ArrayList.class)
(this.h == orig(this.h))  ==>  (this.integrator.expandable.components[] == [])
(this.h == orig(this.h))  ==>  (this.integrator.expandable.components[].getClass().getName() == [])
(this.h == orig(this.h))  ==>  (this.integrator.expandable.time >= 0.0)
(this.h == orig(this.h))  ==>  (this.integrator.getClass().getName() == org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.class)
(this.h == orig(this.h))  ==>  (this.integrator.name has only one value)
(this.h == orig(this.h))  ==>  (this.integrator.name.toString == "Dormand-Prince 8 (5, 3)")
(this.h == orig(this.h))  ==>  (this.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class)
(this.h == orig(this.h))  ==>  (this.interpolatedSecondaryDerivatives.getClass().getName() == double[][].class)
(this.h == orig(this.h))  ==>  (this.interpolatedSecondaryDerivatives[] == [])
(this.h == orig(this.h))  ==>  (this.interpolatedSecondaryState.getClass().getName() == double[][].class)
(this.h == orig(this.h))  ==>  (this.interpolatedSecondaryState[] == [])
(this.h == orig(this.h))  ==>  (this.secondaryMappers.getClass().getName() == org.apache.commons.math3.ode.EquationsMapper[].class)
(this.h == orig(this.h))  ==>  (this.secondaryMappers[] == [])
(this.h == orig(this.h))  ==>  (this.secondaryMappers[].dimension == [])
(this.h == orig(this.h))  ==>  (this.secondaryMappers[].firstIndex == [])
(this.h == orig(this.h))  ==>  (this.secondaryMappers[].getClass().getName() == [])
(this.h == orig(this.h))  ==>  (this.v.getClass().getName() == double[][].class)
(this.h == orig(this.h))  ==>  (this.v[] elements != null)
(this.h == orig(this.h))  ==>  (this.yDotK.getClass().getName() == double[][].class)
(this.h == orig(this.h))  ==>  (this.yDotKLast.getClass().getName() == double[][].class)
(this.h == orig(this.h))  ==>  (this.yDotKLast[] elements != null)
(this.h == orig(this.h))  ==>  (this.yDotK[] elements != null)
this.vectorsInitialized == false
this.integrator.isLastStep == false
this.finalized == false
this.dirtyState == true
this.integrator.evaluations.count - orig(this.integrator.evaluations.count) - 3 == 0
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.readExternal(java.io.ObjectInput):::ENTER
this.yDotKLast == null
this.v == null
this.vectorsInitialized == false
this.previousState == null
this.yDotK == null
this.integrator == null
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.interpolatedPrimaryState == null
this.interpolatedPrimaryDerivatives == null
this.interpolatedSecondaryState == null
this.interpolatedSecondaryDerivatives == null
this.globalPreviousTime == Double.NaN
this.globalCurrentTime == Double.NaN
this.softPreviousTime == Double.NaN
this.softCurrentTime == Double.NaN
this.finalized == false
this.forward == true
this.dirtyState == true
this.primaryMapper == null
this.secondaryMappers == null
in has only one value
in.getClass().getName() == java.io.ObjectInputStream.class
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.readExternal(java.io.ObjectInput):::EXIT
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D)
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName())
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D[] == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D[])
this.v == orig(this.v)
this.vectorsInitialized == orig(this.vectorsInitialized)
this.integrator == orig(this.integrator)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.v == null
this.vectorsInitialized == false
this.integrator == null
this.currentState[] elements != 0
this.interpolatedState[] == [0.0, 0.0, 0.0, 0.0]
this.interpolatedState[] elements == 0.0
this.interpolatedDerivatives[] == [0.0, 0.0, 0.0, 0.0]
this.interpolatedDerivatives[] elements == 0.0
this.interpolatedPrimaryState[] == [0.0, 0.0, 0.0, 0.0]
this.interpolatedPrimaryState[] elements == 0.0
this.interpolatedPrimaryDerivatives[] == [0.0, 0.0, 0.0, 0.0]
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.finalized == true
this.forward == true
this.dirtyState == true
this.primaryMapper has only one value
this.primaryMapper.dimension == 4
size(this.previousState[]) == 4
size(this.currentState[]) == 4
size(this.interpolatedState[]) == 4
size(this.interpolatedDerivatives[]) == 4
size(this.interpolatedPrimaryState[]) == 4
size(this.interpolatedPrimaryDerivatives[]) == 4
this.h != orig(this.h)
this.interpolatedTime != orig(this.interpolatedTime)
this.globalPreviousTime != orig(this.globalPreviousTime)
this.globalCurrentTime != orig(this.globalCurrentTime)
this.softPreviousTime != orig(this.softPreviousTime)
this.softCurrentTime != orig(this.softCurrentTime)
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.reinitialize(org.apache.commons.math3.ode.AbstractIntegrator, double[], double[][], boolean, org.apache.commons.math3.ode.EquationsMapper, org.apache.commons.math3.ode.EquationsMapper[]):::ENTER
this.yDotKLast == null
this.v == null
this.vectorsInitialized == false
this.previousState == null
this.yDotK == null
this.integrator == null
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.interpolatedPrimaryState == null
this.interpolatedPrimaryDerivatives == null
this.interpolatedSecondaryState == null
this.interpolatedSecondaryDerivatives == null
this.globalPreviousTime == Double.NaN
this.globalCurrentTime == Double.NaN
this.softPreviousTime == Double.NaN
this.softCurrentTime == Double.NaN
this.finalized == true
this.forward == true
this.dirtyState == true
this.primaryMapper == null
this.secondaryMappers == null
integrator.getClass().getName() == org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.class
integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
integrator.stepStart == Double.NaN
integrator.resetOccurred == false
integrator.eventsStates.getClass().getName() == java.util.ArrayList.class
integrator.name has only one value
integrator.name.toString == "Dormand-Prince 8 (5, 3)"
integrator.evaluations.maximalCount == 2147483647
integrator.evaluations.count >= 0
integrator.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
integrator.expandable.time >= 0.0
integrator.expandable.primaryStateDot[] elements == 0.0
integrator.expandable.components[] == []
integrator.expandable.components[].getClass().getName() == []
integrator.expandable.components.getClass().getName() == java.util.ArrayList.class
yDotK.getClass().getName() == double[][].class
yDotK[] elements != null
primaryMapper.firstIndex == 0
secondaryMappers.getClass().getName() == org.apache.commons.math3.ode.EquationsMapper[].class
secondaryMappers[] == []
secondaryMappers[].firstIndex == []
secondaryMappers[].dimension == []
size(yDotK[]) == 13
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.reinitialize(org.apache.commons.math3.ode.AbstractIntegrator, double[], double[][], boolean, org.apache.commons.math3.ode.EquationsMapper, org.apache.commons.math3.ode.EquationsMapper[]):::EXIT
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D)
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName())
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D[] == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D[])
this.vectorsInitialized == orig(this.vectorsInitialized)
this.previousState == orig(this.previousState)
this.dirtyState == orig(this.dirtyState)
integrator.stepHandlers == orig(integrator.stepHandlers)
integrator.stepHandlers.getClass().getName() == orig(integrator.stepHandlers.getClass().getName())
integrator.isLastStep == orig(integrator.isLastStep)
integrator.resetOccurred == orig(integrator.resetOccurred)
integrator.eventsStates == orig(integrator.eventsStates)
integrator.eventsStates.getClass().getName() == orig(integrator.eventsStates.getClass().getName())
integrator.statesInitialized == orig(integrator.statesInitialized)
integrator.name == orig(integrator.name)
integrator.name.toString == orig(integrator.name.toString)
integrator.evaluations == orig(integrator.evaluations)
integrator.evaluations.maximalCount == orig(integrator.evaluations.maximalCount)
integrator.evaluations.count == orig(integrator.evaluations.count)
integrator.evaluations.maxCountCallback == orig(integrator.evaluations.maxCountCallback)
integrator.evaluations.maxCountCallback.getClass().getName() == orig(integrator.evaluations.maxCountCallback.getClass().getName())
integrator.expandable == orig(integrator.expandable)
integrator.expandable.primary == orig(integrator.expandable.primary)
integrator.expandable.primary.getClass().getName() == orig(integrator.expandable.primary.getClass().getName())
integrator.expandable.primaryMapper == orig(integrator.expandable.primaryMapper)
integrator.expandable.time == orig(integrator.expandable.time)
integrator.expandable.primaryState == orig(integrator.expandable.primaryState)
integrator.expandable.primaryState[] == orig(integrator.expandable.primaryState[])
integrator.expandable.primaryStateDot == orig(integrator.expandable.primaryStateDot)
integrator.expandable.primaryStateDot[] == orig(integrator.expandable.primaryStateDot[])
integrator.expandable.components == orig(integrator.expandable.components)
integrator.expandable.components[] == orig(integrator.expandable.components[])
integrator.expandable.components.getClass().getName() == orig(integrator.expandable.components.getClass().getName())
y[] == orig(y[])
yDotK[] == orig(yDotK[])
primaryMapper.firstIndex == orig(primaryMapper.firstIndex)
primaryMapper.dimension == orig(primaryMapper.dimension)
secondaryMappers[] == orig(secondaryMappers[])
secondaryMappers[].firstIndex == orig(secondaryMappers[].firstIndex)
secondaryMappers[].dimension == orig(secondaryMappers[].dimension)
this.vectorsInitialized == false
this.previousState == null
this.integrator.stepStart == Double.NaN
this.integrator.resetOccurred == false
this.integrator.expandable.primaryStateDot[] elements == 0.0
this.h == Double.NaN
this.interpolatedTime == Double.NaN
this.interpolatedState[] elements == 0.0
this.interpolatedDerivatives[] elements == 0.0
this.interpolatedPrimaryState[] elements == 0.0
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.globalPreviousTime == Double.NaN
this.globalCurrentTime == Double.NaN
this.softPreviousTime == Double.NaN
this.softCurrentTime == Double.NaN
this.finalized == false
this.dirtyState == true
integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
integrator.stepStart == Double.NaN
integrator.resetOccurred == false
integrator.eventsStates.getClass().getName() == java.util.ArrayList.class
integrator.name has only one value
integrator.name.toString == "Dormand-Prince 8 (5, 3)"
integrator.evaluations.maximalCount == 2147483647
integrator.evaluations.count >= 0
integrator.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
integrator.expandable.time >= 0.0
integrator.expandable.primaryStateDot[] elements == 0.0
integrator.expandable.components[] == []
integrator.expandable.components[].getClass().getName() == []
integrator.expandable.components.getClass().getName() == java.util.ArrayList.class
yDotK[] elements != null
primaryMapper.firstIndex == 0
secondaryMappers[] == []
secondaryMappers[].firstIndex == []
secondaryMappers[].dimension == []
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.storeTime(double):::ENTER
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.storeTime(double):::EXIT
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D)
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName())
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D[] == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D[])
this.yDotKLast == orig(this.yDotKLast)
this.yDotKLast.getClass().getName() == orig(this.yDotKLast.getClass().getName())
this.yDotKLast[] == orig(this.yDotKLast[])
this.v == orig(this.v)
this.v.getClass().getName() == orig(this.v.getClass().getName())
this.v[] == orig(this.v[])
this.previousState == orig(this.previousState)
this.previousState[] == orig(this.previousState[])
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.integrator.stepHandlers == orig(this.integrator.stepHandlers)
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.stepHandlers.getClass().getName())
this.integrator.isLastStep == orig(this.integrator.isLastStep)
this.integrator.resetOccurred == orig(this.integrator.resetOccurred)
this.integrator.eventsStates == orig(this.integrator.eventsStates)
this.integrator.eventsStates.getClass().getName() == orig(this.integrator.eventsStates.getClass().getName())
this.integrator.statesInitialized == orig(this.integrator.statesInitialized)
this.integrator.name == orig(this.integrator.name)
this.integrator.name.toString == orig(this.integrator.name.toString)
this.integrator.evaluations == orig(this.integrator.evaluations)
this.integrator.evaluations.maximalCount == orig(this.integrator.evaluations.maximalCount)
this.integrator.evaluations.count == orig(this.integrator.evaluations.count)
this.integrator.evaluations.maxCountCallback == orig(this.integrator.evaluations.maxCountCallback)
this.integrator.evaluations.maxCountCallback.getClass().getName() == orig(this.integrator.evaluations.maxCountCallback.getClass().getName())
this.integrator.expandable == orig(this.integrator.expandable)
this.integrator.expandable.primary == orig(this.integrator.expandable.primary)
this.integrator.expandable.primary.getClass().getName() == orig(this.integrator.expandable.primary.getClass().getName())
this.integrator.expandable.primaryMapper == orig(this.integrator.expandable.primaryMapper)
this.integrator.expandable.time == orig(this.integrator.expandable.time)
this.integrator.expandable.primaryState == orig(this.integrator.expandable.primaryState)
this.integrator.expandable.primaryState[] == orig(this.integrator.expandable.primaryState[])
this.integrator.expandable.primaryStateDot == orig(this.integrator.expandable.primaryStateDot)
this.integrator.expandable.primaryStateDot[] == orig(this.integrator.expandable.primaryStateDot[])
this.integrator.expandable.components == orig(this.integrator.expandable.components)
this.integrator.expandable.components[] == orig(this.integrator.expandable.components[])
this.integrator.expandable.components.getClass().getName() == orig(this.integrator.expandable.components.getClass().getName())
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.interpolatedPrimaryState == orig(this.interpolatedPrimaryState)
this.interpolatedPrimaryState[] == orig(this.interpolatedPrimaryState[])
this.interpolatedPrimaryDerivatives == orig(this.interpolatedPrimaryDerivatives)
this.interpolatedPrimaryDerivatives[] == orig(this.interpolatedPrimaryDerivatives[])
this.interpolatedSecondaryState == orig(this.interpolatedSecondaryState)
this.interpolatedSecondaryState.getClass().getName() == orig(this.interpolatedSecondaryState.getClass().getName())
this.interpolatedSecondaryState[] == orig(this.interpolatedSecondaryState[])
this.interpolatedSecondaryDerivatives == orig(this.interpolatedSecondaryDerivatives)
this.interpolatedSecondaryDerivatives.getClass().getName() == orig(this.interpolatedSecondaryDerivatives.getClass().getName())
this.interpolatedSecondaryDerivatives[] == orig(this.interpolatedSecondaryDerivatives[])
this.forward == orig(this.forward)
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.secondaryMappers == orig(this.secondaryMappers)
this.secondaryMappers.getClass().getName() == orig(this.secondaryMappers.getClass().getName())
this.secondaryMappers[] == orig(this.secondaryMappers[])
this.secondaryMappers[].firstIndex == orig(this.secondaryMappers[].firstIndex)
this.secondaryMappers[].dimension == orig(this.secondaryMappers[].dimension)
this.vectorsInitialized == false
this.finalized == false
this.dirtyState == true
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.writeExternal(java.io.ObjectOutput):::ENTER
this.vectorsInitialized == true
this.integrator == null
this.currentState[] elements != 0
this.interpolatedState[] elements != 0
this.interpolatedPrimaryState[] elements != 0
this.interpolatedPrimaryDerivatives[] == [0.0, 0.0, 0.0, 0.0]
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.finalized == true
this.forward == true
this.dirtyState == false
this.primaryMapper has only one value
this.primaryMapper.dimension == 4
out has only one value
out.getClass().getName() == java.io.ObjectOutputStream.class
size(this.previousState[]) == 4
size(this.currentState[]) == 4
size(this.interpolatedState[]) == 4
size(this.interpolatedDerivatives[]) == 4
size(this.interpolatedPrimaryState[]) == 4
size(this.interpolatedPrimaryDerivatives[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.writeExternal(java.io.ObjectOutput):::EXIT
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D)
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName())
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D[] == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.D[])
this.yDotKLast == orig(this.yDotKLast)
this.yDotKLast.getClass().getName() == orig(this.yDotKLast.getClass().getName())
this.yDotKLast[] == orig(this.yDotKLast[])
this.v == orig(this.v)
this.v.getClass().getName() == orig(this.v.getClass().getName())
this.v[] == orig(this.v[])
this.vectorsInitialized == orig(this.vectorsInitialized)
this.previousState == orig(this.previousState)
this.previousState[] == orig(this.previousState[])
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.interpolatedPrimaryState == orig(this.interpolatedPrimaryState)
this.interpolatedPrimaryState[] == orig(this.interpolatedPrimaryState[])
this.interpolatedPrimaryDerivatives == orig(this.interpolatedPrimaryDerivatives)
this.interpolatedPrimaryDerivatives[] == orig(this.interpolatedPrimaryDerivatives[])
this.interpolatedSecondaryState == orig(this.interpolatedSecondaryState)
this.interpolatedSecondaryState.getClass().getName() == orig(this.interpolatedSecondaryState.getClass().getName())
this.interpolatedSecondaryState[] == orig(this.interpolatedSecondaryState[])
this.interpolatedSecondaryDerivatives == orig(this.interpolatedSecondaryDerivatives)
this.interpolatedSecondaryDerivatives.getClass().getName() == orig(this.interpolatedSecondaryDerivatives.getClass().getName())
this.interpolatedSecondaryDerivatives[] == orig(this.interpolatedSecondaryDerivatives[])
this.globalPreviousTime == orig(this.globalPreviousTime)
this.globalCurrentTime == orig(this.globalCurrentTime)
this.softPreviousTime == orig(this.softPreviousTime)
this.softCurrentTime == orig(this.softCurrentTime)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.secondaryMappers == orig(this.secondaryMappers)
this.secondaryMappers.getClass().getName() == orig(this.secondaryMappers.getClass().getName())
this.secondaryMappers[] == orig(this.secondaryMappers[])
this.secondaryMappers[].firstIndex == orig(this.secondaryMappers[].firstIndex)
this.secondaryMappers[].dimension == orig(this.secondaryMappers[].dimension)
this.vectorsInitialized == true
this.integrator == null
this.currentState[] elements != 0
this.interpolatedState[] elements != 0
this.interpolatedPrimaryState[] elements != 0
this.interpolatedPrimaryDerivatives[] == [0.0, 0.0, 0.0, 0.0]
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.finalized == true
this.forward == true
this.dirtyState == false
this.primaryMapper has only one value
this.primaryMapper.dimension == 4
size(this.previousState[]) == 4
size(this.currentState[]) == 4
size(this.interpolatedState[]) == 4
size(this.interpolatedDerivatives[]) == 4
size(this.interpolatedPrimaryState[]) == 4
size(this.interpolatedPrimaryDerivatives[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolatorTest$1:::OBJECT
this has only one value
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolatorTest.this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolatorTest$1.(org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolatorTest):::ENTER
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolatorTest.this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolatorTest$1.(org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolatorTest):::EXIT
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolatorTest.this == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolatorTest.this)
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolatorTest$1.handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean):::ENTER
interpolator has only one value
interpolator.getClass().getName() == org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator.class
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolatorTest$1.handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean):::EXIT
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolatorTest.this == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolatorTest.this)
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolatorTest$1.init(double, double[], double):::ENTER
t0 == 0.0
y0 has only one value
y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
t == 20.0
size(y0[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolatorTest$1.init(double, double[], double):::EXIT
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolatorTest.this == orig(org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolatorTest.this)
y0[] == orig(y0[])
y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolatorTest:::OBJECT
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolatorTest.DormandPrince853StepInterpolatorTest():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolatorTest.checklone():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolatorTest.checklone():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolatorTest.derivativesConsistency():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolatorTest.derivativesConsistency():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolatorTest.serialization():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolatorTest.serialization():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator:::OBJECT
this.c[] one of { [0.05260015195876774, 0.0789002279381516, 0.1183503419072274, 0.28164965809277265, 0.3333333333333333, 0.25, 0.3076923076923077, 0.6512820512820513, 0.6, 0.8571428571428571, 1.0, 1.0], [0.2, 0.3, 0.8, 0.8888888888888888, 1.0, 1.0], [0.2222222222222222, 0.3333333333333333, 0.5, 0.6, 1.0, 1.0] }
this.c[] elements <= 1.0
this.c[] elements >= 0.05260015195876774
this.a.getClass().getName() == double[][].class
this.a[] elements != null
this.b[] one of { [0.054293734116568765, 0.0, 0.0, 0.0, 0.0, 4.450312892752409, 1.8915178993145003, -5.801203960010585, 0.3111643669578199, -0.1521609496625161, 0.20136540080403034, 0.04471061572777259, 0.0], [0.08333333333333333, 0.0, 0.84375, -1.3333333333333333, 1.3020833333333333, 0.10416666666666667, 0.0], [0.09114583333333333, 0.0, 0.44923629829290207, 0.6510416666666666, -0.322376179245283, 0.13095238095238096, 0.0] }
this.prototype.previousState == null
this.prototype.yDotK == null
this.prototype.integrator == null
this.prototype.h == Double.NaN
this.prototype.currentState == null
this.prototype.interpolatedTime == Double.NaN
this.prototype.interpolatedState == null
this.prototype.interpolatedDerivatives == null
this.prototype.interpolatedPrimaryState == null
this.prototype.interpolatedPrimaryDerivatives == null
this.prototype.interpolatedSecondaryState == null
this.prototype.interpolatedSecondaryDerivatives == null
this.prototype.globalPreviousTime == Double.NaN
this.prototype.globalCurrentTime == Double.NaN
this.prototype.softPreviousTime == Double.NaN
this.prototype.softCurrentTime == Double.NaN
this.prototype.forward == true
this.prototype.dirtyState == true
this.prototype.primaryMapper == null
this.prototype.secondaryMappers == null
this.exp one of { -0.2, -0.125 }
this.safety one of { 0.0, 0.8, 0.9 }
this.minReduction one of { 0.0, 0.2, 0.3 }
this.maxGrowth one of { 0.0, 5.0, 10.0 }
this.scalAbsoluteTolerance >= 0.0
this.scalRelativeTolerance >= 0.0
this.vecAbsoluteTolerance[] elements one of { 1.0E-10, 1.0E-8, 1.0E-4 }
this.vecAbsoluteTolerance[] one of { [1.0E-10, 1.0E-10], [1.0E-8, 1.0E-8, 1.0E-10, 1.0E-10], [1.0E-4, 1.0E-4] }
this.vecAbsoluteTolerance[] sorted by >=
this.vecRelativeTolerance[] elements one of { 1.0E-10, 1.0E-8, 1.0E-4 }
this.vecRelativeTolerance[] one of { [1.0E-10, 1.0E-10], [1.0E-10, 1.0E-10, 1.0E-8, 1.0E-8], [1.0E-4, 1.0E-4] }
this.vecRelativeTolerance[] sorted by <=
this.mainSetDimension >= 0
this.initialStep >= -1.0
this.minStep >= 0.0
this.maxStep >= 0.1
this.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.stepStart == Double.NaN
this.stepSize >= 0.0
this.eventsStates.getClass().getName() == java.util.ArrayList.class
this.name.toString one of { "Dormand-Prince 5(4)", "Dormand-Prince 8 (5, 3)", "Higham-Hall 5(4)" }
this.evaluations.maximalCount one of { 5000, 50000, 2147483647 }
this.evaluations.count >= 0
this.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
this.expandable.primaryMapper.firstIndex == 0
this.expandable.primaryStateDot[] elements != 0
this.expandable.components[] elements != null
this.expandable.components[].getClass().getName() elements == org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent.class
this.expandable.components[].getClass().getName() one of { [], [org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent] }
this.expandable.components.getClass().getName() == java.util.ArrayList.class
size(this.c[]) one of { 6, 12 }
size(this.a[]) one of { 6, 12 }
size(this.b[]) one of { 7, 13 }
size(this.vecAbsoluteTolerance[]) one of { 2, 4 }
size(this.vecRelativeTolerance[]) one of { 2, 4 }
size(this.expandable.components[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator.EmbeddedRungeKuttaIntegrator(java.lang.String, boolean, double[], double[][], double[], org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator, double, double, double, double):::ENTER
name.toString one of { "Dormand-Prince 5(4)", "Dormand-Prince 8 (5, 3)", "Higham-Hall 5(4)" }
c[] one of { [0.05260015195876774, 0.0789002279381516, 0.1183503419072274, 0.28164965809277265, 0.3333333333333333, 0.25, 0.3076923076923077, 0.6512820512820513, 0.6, 0.8571428571428571, 1.0, 1.0], [0.2, 0.3, 0.8, 0.8888888888888888, 1.0, 1.0], [0.2222222222222222, 0.3333333333333333, 0.5, 0.6, 1.0, 1.0] }
a.getClass().getName() == double[][].class
a[] elements != null
b[] one of { [0.054293734116568765, 0.0, 0.0, 0.0, 0.0, 4.450312892752409, 1.8915178993145003, -5.801203960010585, 0.3111643669578199, -0.1521609496625161, 0.20136540080403034, 0.04471061572777259, 0.0], [0.08333333333333333, 0.0, 0.84375, -1.3333333333333333, 1.3020833333333333, 0.10416666666666667, 0.0], [0.09114583333333333, 0.0, 0.44923629829290207, 0.6510416666666666, -0.322376179245283, 0.13095238095238096, 0.0] }
prototype.previousState == null
prototype.yDotK == null
prototype.integrator == null
prototype.h == Double.NaN
prototype.currentState == null
prototype.interpolatedTime == Double.NaN
prototype.interpolatedState == null
prototype.interpolatedDerivatives == null
prototype.interpolatedPrimaryState == null
prototype.interpolatedPrimaryDerivatives == null
prototype.interpolatedSecondaryState == null
prototype.interpolatedSecondaryDerivatives == null
prototype.globalPreviousTime == Double.NaN
prototype.globalCurrentTime == Double.NaN
prototype.softPreviousTime == Double.NaN
prototype.softCurrentTime == Double.NaN
prototype.finalized == false
prototype.forward == true
prototype.dirtyState == true
prototype.primaryMapper == null
prototype.secondaryMappers == null
size(c[]) one of { 6, 12 }
size(a[]) one of { 6, 12 }
size(b[]) one of { 7, 13 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator.EmbeddedRungeKuttaIntegrator(java.lang.String, boolean, double[], double[][], double[], org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator, double, double, double, double):::EXIT
name.toString == orig(name.toString)
c[] == orig(c[])
a[] == orig(a[])
b[] == orig(b[])
prototype.previousState == orig(prototype.previousState)
prototype.yDotK == orig(prototype.yDotK)
prototype.integrator == orig(prototype.integrator)
prototype.currentState == orig(prototype.currentState)
prototype.interpolatedState == orig(prototype.interpolatedState)
prototype.interpolatedDerivatives == orig(prototype.interpolatedDerivatives)
prototype.interpolatedPrimaryState == orig(prototype.interpolatedPrimaryState)
prototype.interpolatedPrimaryDerivatives == orig(prototype.interpolatedPrimaryDerivatives)
prototype.interpolatedSecondaryState == orig(prototype.interpolatedSecondaryState)
prototype.interpolatedSecondaryDerivatives == orig(prototype.interpolatedSecondaryDerivatives)
prototype.finalized == orig(prototype.finalized)
prototype.forward == orig(prototype.forward)
prototype.dirtyState == orig(prototype.dirtyState)
prototype.primaryMapper == orig(prototype.primaryMapper)
prototype.secondaryMappers == orig(prototype.secondaryMappers)
this.prototype.finalized == false
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 10.0
this.vecAbsoluteTolerance == null
this.vecRelativeTolerance == null
this.mainSetDimension == 0
this.initialStep == -1.0
this.isLastStep == false
this.resetOccurred == false
this.statesInitialized == false
this.evaluations.maximalCount == 2147483647
this.evaluations.count == 0
this.expandable == null
name.toString one of { "Dormand-Prince 5(4)", "Dormand-Prince 8 (5, 3)", "Higham-Hall 5(4)" }
c[] one of { [0.05260015195876774, 0.0789002279381516, 0.1183503419072274, 0.28164965809277265, 0.3333333333333333, 0.25, 0.3076923076923077, 0.6512820512820513, 0.6, 0.8571428571428571, 1.0, 1.0], [0.2, 0.3, 0.8, 0.8888888888888888, 1.0, 1.0], [0.2222222222222222, 0.3333333333333333, 0.5, 0.6, 1.0, 1.0] }
a[] elements != null
b[] one of { [0.054293734116568765, 0.0, 0.0, 0.0, 0.0, 4.450312892752409, 1.8915178993145003, -5.801203960010585, 0.3111643669578199, -0.1521609496625161, 0.20136540080403034, 0.04471061572777259, 0.0], [0.08333333333333333, 0.0, 0.84375, -1.3333333333333333, 1.3020833333333333, 0.10416666666666667, 0.0], [0.09114583333333333, 0.0, 0.44923629829290207, 0.6510416666666666, -0.322376179245283, 0.13095238095238096, 0.0] }
prototype.previousState == null
prototype.yDotK == null
prototype.integrator == null
prototype.h == Double.NaN
prototype.currentState == null
prototype.interpolatedTime == Double.NaN
prototype.interpolatedState == null
prototype.interpolatedDerivatives == null
prototype.interpolatedPrimaryState == null
prototype.interpolatedPrimaryDerivatives == null
prototype.interpolatedSecondaryState == null
prototype.interpolatedSecondaryDerivatives == null
prototype.globalPreviousTime == Double.NaN
prototype.globalCurrentTime == Double.NaN
prototype.softPreviousTime == Double.NaN
prototype.softCurrentTime == Double.NaN
prototype.finalized == false
prototype.forward == true
prototype.dirtyState == true
prototype.primaryMapper == null
prototype.secondaryMappers == null
===========================================================================
org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator.EmbeddedRungeKuttaIntegrator(java.lang.String, boolean, double[], double[][], double[], org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator, double, double, double[], double[]):::ENTER
name.toString one of { "Dormand-Prince 5(4)", "Higham-Hall 5(4)" }
c[] one of { [0.2, 0.3, 0.8, 0.8888888888888888, 1.0, 1.0], [0.2222222222222222, 0.3333333333333333, 0.5, 0.6, 1.0, 1.0] }
c[] sorted by <=
a.getClass().getName() == double[][].class
b[] one of { [0.08333333333333333, 0.0, 0.84375, -1.3333333333333333, 1.3020833333333333, 0.10416666666666667, 0.0], [0.09114583333333333, 0.0, 0.44923629829290207, 0.6510416666666666, -0.322376179245283, 0.13095238095238096, 0.0] }
prototype.previousState == null
prototype.yDotK == null
prototype.integrator == null
prototype.h == Double.NaN
prototype.currentState == null
prototype.interpolatedTime == Double.NaN
prototype.interpolatedState == null
prototype.interpolatedDerivatives == null
prototype.interpolatedPrimaryState == null
prototype.interpolatedPrimaryDerivatives == null
prototype.interpolatedSecondaryState == null
prototype.interpolatedSecondaryDerivatives == null
prototype.globalPreviousTime == Double.NaN
prototype.globalCurrentTime == Double.NaN
prototype.softPreviousTime == Double.NaN
prototype.softCurrentTime == Double.NaN
prototype.finalized == false
prototype.forward == true
prototype.dirtyState == true
prototype.primaryMapper == null
prototype.secondaryMappers == null
minStep one of { 0.0, 1.0E-8 }
maxStep one of { 20.0, 100.0 }
vecAbsoluteTolerance[] elements one of { 1.0E-10, 1.0E-8, 1.0E-4 }
vecAbsoluteTolerance[] one of { [1.0E-10, 1.0E-10], [1.0E-8, 1.0E-8, 1.0E-10, 1.0E-10], [1.0E-4, 1.0E-4] }
vecAbsoluteTolerance[] sorted by >=
vecRelativeTolerance[] elements one of { 1.0E-10, 1.0E-8, 1.0E-4 }
vecRelativeTolerance[] one of { [1.0E-10, 1.0E-10], [1.0E-10, 1.0E-10, 1.0E-8, 1.0E-8], [1.0E-4, 1.0E-4] }
vecRelativeTolerance[] sorted by <=
size(c[]) == 6
size(a[]) == 6
size(b[]) == 7
size(vecAbsoluteTolerance[]) one of { 2, 4 }
size(vecRelativeTolerance[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator.EmbeddedRungeKuttaIntegrator(java.lang.String, boolean, double[], double[][], double[], org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator, double, double, double[], double[]):::EXIT
name.toString == orig(name.toString)
c[] == orig(c[])
a[] == orig(a[])
b[] == orig(b[])
prototype.previousState == orig(prototype.previousState)
prototype.yDotK == orig(prototype.yDotK)
prototype.integrator == orig(prototype.integrator)
prototype.currentState == orig(prototype.currentState)
prototype.interpolatedState == orig(prototype.interpolatedState)
prototype.interpolatedDerivatives == orig(prototype.interpolatedDerivatives)
prototype.interpolatedPrimaryState == orig(prototype.interpolatedPrimaryState)
prototype.interpolatedPrimaryDerivatives == orig(prototype.interpolatedPrimaryDerivatives)
prototype.interpolatedSecondaryState == orig(prototype.interpolatedSecondaryState)
prototype.interpolatedSecondaryDerivatives == orig(prototype.interpolatedSecondaryDerivatives)
prototype.finalized == orig(prototype.finalized)
prototype.forward == orig(prototype.forward)
prototype.dirtyState == orig(prototype.dirtyState)
prototype.primaryMapper == orig(prototype.primaryMapper)
prototype.secondaryMappers == orig(prototype.secondaryMappers)
vecAbsoluteTolerance[] == orig(vecAbsoluteTolerance[])
vecRelativeTolerance[] == orig(vecRelativeTolerance[])
this.c[] one of { [0.2, 0.3, 0.8, 0.8888888888888888, 1.0, 1.0], [0.2222222222222222, 0.3333333333333333, 0.5, 0.6, 1.0, 1.0] }
this.c[] sorted by <=
this.b[] one of { [0.08333333333333333, 0.0, 0.84375, -1.3333333333333333, 1.3020833333333333, 0.10416666666666667, 0.0], [0.09114583333333333, 0.0, 0.44923629829290207, 0.6510416666666666, -0.322376179245283, 0.13095238095238096, 0.0] }
this.prototype.finalized == false
this.exp == -0.2
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 10.0
this.scalAbsoluteTolerance == 0.0
this.scalRelativeTolerance == 0.0
this.mainSetDimension == 0
this.initialStep == -1.0
this.minStep one of { 0.0, 1.0E-8 }
this.maxStep one of { 20.0, 100.0 }
this.stepSize one of { 0.0, 0.001 }
this.isLastStep == false
this.resetOccurred == false
this.statesInitialized == false
this.name.toString one of { "Dormand-Prince 5(4)", "Higham-Hall 5(4)" }
this.evaluations.maximalCount == 2147483647
this.evaluations.count == 0
this.expandable == null
name.toString one of { "Dormand-Prince 5(4)", "Higham-Hall 5(4)" }
c[] one of { [0.2, 0.3, 0.8, 0.8888888888888888, 1.0, 1.0], [0.2222222222222222, 0.3333333333333333, 0.5, 0.6, 1.0, 1.0] }
c[] sorted by <=
b[] one of { [0.08333333333333333, 0.0, 0.84375, -1.3333333333333333, 1.3020833333333333, 0.10416666666666667, 0.0], [0.09114583333333333, 0.0, 0.44923629829290207, 0.6510416666666666, -0.322376179245283, 0.13095238095238096, 0.0] }
prototype.previousState == null
prototype.yDotK == null
prototype.integrator == null
prototype.h == Double.NaN
prototype.currentState == null
prototype.interpolatedTime == Double.NaN
prototype.interpolatedState == null
prototype.interpolatedDerivatives == null
prototype.interpolatedPrimaryState == null
prototype.interpolatedPrimaryDerivatives == null
prototype.interpolatedSecondaryState == null
prototype.interpolatedSecondaryDerivatives == null
prototype.globalPreviousTime == Double.NaN
prototype.globalCurrentTime == Double.NaN
prototype.softPreviousTime == Double.NaN
prototype.softCurrentTime == Double.NaN
prototype.finalized == false
prototype.forward == true
prototype.dirtyState == true
prototype.primaryMapper == null
prototype.secondaryMappers == null
vecAbsoluteTolerance[] elements one of { 1.0E-10, 1.0E-8, 1.0E-4 }
vecAbsoluteTolerance[] one of { [1.0E-10, 1.0E-10], [1.0E-8, 1.0E-8, 1.0E-10, 1.0E-10], [1.0E-4, 1.0E-4] }
vecAbsoluteTolerance[] sorted by >=
vecRelativeTolerance[] elements one of { 1.0E-10, 1.0E-8, 1.0E-4 }
vecRelativeTolerance[] one of { [1.0E-10, 1.0E-10], [1.0E-10, 1.0E-10, 1.0E-8, 1.0E-8], [1.0E-4, 1.0E-4] }
vecRelativeTolerance[] sorted by <=
size(this.c[]) == 6
size(this.a[]) == 6
size(this.b[]) == 7
===========================================================================
org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator.getMaxGrowth():::ENTER
this.getClass().getName() == org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.class
this.fsal == true
this.c has only one value
this.c[] == [0.2, 0.3, 0.8, 0.8888888888888888, 1.0, 1.0]
this.c[] sorted by <=
this.a has only one value
this.a[] contains no nulls and has only one value, of length 6
this.b has only one value
this.b[] == [0.09114583333333333, 0.0, 0.44923629829290207, 0.6510416666666666, -0.322376179245283, 0.13095238095238096, 0.0]
this.prototype.getClass().getName() == org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator.class
this.prototype.finalized == true
this.exp == -0.2
this.safety == 0.8
this.minReduction == 0.3
this.maxGrowth == 5.0
this.vecAbsoluteTolerance == null
this.vecRelativeTolerance == null
this.mainSetDimension == 2
this.initialStep == -1.0
this.minStep == 0.0
this.maxStep == 4.0
this.stepSize == 0.0
this.isLastStep == true
this.resetOccurred == false
this.statesInitialized == true
this.name has only one value
this.name.toString == "Dormand-Prince 5(4)"
this.evaluations.maximalCount == 2147483647
this.expandable.primary.getClass().getName() == org.apache.commons.math3.ode.TestProblem1.class
this.expandable.primaryMapper.dimension == 2
this.expandable.time == 4.0
this.expandable.primaryState[] sorted by >
this.expandable.primaryStateDot[] sorted by <
this.expandable.components[] == []
this.expandable.components[].getClass().getName() == []
size(this.c[]) == 6
size(this.a[]) == 6
size(this.b[]) == 7
size(this.expandable.primaryState[]) == 2
size(this.expandable.primaryStateDot[]) == 2
===========================================================================
org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator.getMaxGrowth():::EXIT
this.fsal == orig(this.fsal)
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a.getClass().getName() == orig(this.a.getClass().getName())
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.previousState == orig(this.prototype.previousState)
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.integrator == orig(this.prototype.integrator)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.interpolatedDerivatives == orig(this.prototype.interpolatedDerivatives)
this.prototype.interpolatedPrimaryState == orig(this.prototype.interpolatedPrimaryState)
this.prototype.interpolatedPrimaryDerivatives == orig(this.prototype.interpolatedPrimaryDerivatives)
this.prototype.interpolatedSecondaryState == orig(this.prototype.interpolatedSecondaryState)
this.prototype.interpolatedSecondaryDerivatives == orig(this.prototype.interpolatedSecondaryDerivatives)
this.prototype.finalized == orig(this.prototype.finalized)
this.prototype.forward == orig(this.prototype.forward)
this.prototype.dirtyState == orig(this.prototype.dirtyState)
this.prototype.primaryMapper == orig(this.prototype.primaryMapper)
this.prototype.secondaryMappers == orig(this.prototype.secondaryMappers)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.minReduction == orig(this.minReduction)
this.maxGrowth == orig(this.maxGrowth)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.mainSetDimension == orig(this.mainSetDimension)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepSize == orig(this.stepSize)
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
this.expandable.primary == orig(this.expandable.primary)
this.expandable.primary.getClass().getName() == orig(this.expandable.primary.getClass().getName())
this.expandable.primaryMapper == orig(this.expandable.primaryMapper)
this.expandable.primaryMapper.firstIndex == orig(this.expandable.primaryMapper.firstIndex)
this.expandable.primaryMapper.dimension == orig(this.expandable.primaryMapper.dimension)
this.expandable.time == orig(this.expandable.time)
this.expandable.primaryState == orig(this.expandable.primaryState)
this.expandable.primaryState[] == orig(this.expandable.primaryState[])
this.expandable.primaryStateDot == orig(this.expandable.primaryStateDot)
this.expandable.primaryStateDot[] == orig(this.expandable.primaryStateDot[])
this.expandable.components == orig(this.expandable.components)
this.expandable.components[] == orig(this.expandable.components[])
this.expandable.components.getClass().getName() == orig(this.expandable.components.getClass().getName())
this.fsal == true
this.c has only one value
this.c[] == [0.2, 0.3, 0.8, 0.8888888888888888, 1.0, 1.0]
this.c[] sorted by <=
this.a has only one value
this.a[] contains no nulls and has only one value, of length 6
this.b has only one value
this.b[] == [0.09114583333333333, 0.0, 0.44923629829290207, 0.6510416666666666, -0.322376179245283, 0.13095238095238096, 0.0]
this.prototype.getClass().getName() == org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator.class
this.prototype.finalized == true
this.exp == -0.2
this.safety == 0.8
this.minReduction == 0.3
this.maxGrowth == 5.0
this.vecAbsoluteTolerance == null
this.vecRelativeTolerance == null
this.mainSetDimension == 2
this.initialStep == -1.0
this.minStep == 0.0
this.maxStep == 4.0
this.stepSize == 0.0
this.isLastStep == true
this.resetOccurred == false
this.statesInitialized == true
this.name has only one value
this.name.toString == "Dormand-Prince 5(4)"
this.evaluations.maximalCount == 2147483647
this.expandable.primary.getClass().getName() == org.apache.commons.math3.ode.TestProblem1.class
this.expandable.primaryMapper.dimension == 2
this.expandable.time == 4.0
this.expandable.primaryState[] sorted by >
this.expandable.primaryStateDot[] sorted by <
this.expandable.components[] == []
this.expandable.components[].getClass().getName() == []
return == 5.0
size(this.c[]) == 6
size(this.a[]) == 6
size(this.b[]) == 7
size(this.expandable.primaryState[]) == 2
size(this.expandable.primaryStateDot[]) == 2
===========================================================================
org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator.getMinReduction():::ENTER
this.getClass().getName() == org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.class
this.fsal == true
this.c has only one value
this.c[] == [0.2, 0.3, 0.8, 0.8888888888888888, 1.0, 1.0]
this.c[] sorted by <=
this.a has only one value
this.a[] contains no nulls and has only one value, of length 6
this.b has only one value
this.b[] == [0.09114583333333333, 0.0, 0.44923629829290207, 0.6510416666666666, -0.322376179245283, 0.13095238095238096, 0.0]
this.prototype.getClass().getName() == org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator.class
this.prototype.finalized == true
this.exp == -0.2
this.safety == 0.8
this.minReduction == 0.3
this.maxGrowth == 5.0
this.vecAbsoluteTolerance == null
this.vecRelativeTolerance == null
this.mainSetDimension == 2
this.initialStep == -1.0
this.minStep == 0.0
this.maxStep == 4.0
this.stepSize == 0.0
this.isLastStep == true
this.resetOccurred == false
this.statesInitialized == true
this.name has only one value
this.name.toString == "Dormand-Prince 5(4)"
this.evaluations.maximalCount == 2147483647
this.expandable.primary.getClass().getName() == org.apache.commons.math3.ode.TestProblem1.class
this.expandable.primaryMapper.dimension == 2
this.expandable.time == 4.0
this.expandable.primaryState[] sorted by >
this.expandable.primaryStateDot[] sorted by <
this.expandable.components[] == []
this.expandable.components[].getClass().getName() == []
size(this.c[]) == 6
size(this.a[]) == 6
size(this.b[]) == 7
size(this.expandable.primaryState[]) == 2
size(this.expandable.primaryStateDot[]) == 2
===========================================================================
org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator.getMinReduction():::EXIT
this.fsal == orig(this.fsal)
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a.getClass().getName() == orig(this.a.getClass().getName())
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.previousState == orig(this.prototype.previousState)
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.integrator == orig(this.prototype.integrator)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.interpolatedDerivatives == orig(this.prototype.interpolatedDerivatives)
this.prototype.interpolatedPrimaryState == orig(this.prototype.interpolatedPrimaryState)
this.prototype.interpolatedPrimaryDerivatives == orig(this.prototype.interpolatedPrimaryDerivatives)
this.prototype.interpolatedSecondaryState == orig(this.prototype.interpolatedSecondaryState)
this.prototype.interpolatedSecondaryDerivatives == orig(this.prototype.interpolatedSecondaryDerivatives)
this.prototype.finalized == orig(this.prototype.finalized)
this.prototype.forward == orig(this.prototype.forward)
this.prototype.dirtyState == orig(this.prototype.dirtyState)
this.prototype.primaryMapper == orig(this.prototype.primaryMapper)
this.prototype.secondaryMappers == orig(this.prototype.secondaryMappers)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.minReduction == orig(this.minReduction)
this.maxGrowth == orig(this.maxGrowth)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.mainSetDimension == orig(this.mainSetDimension)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepSize == orig(this.stepSize)
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
this.expandable.primary == orig(this.expandable.primary)
this.expandable.primary.getClass().getName() == orig(this.expandable.primary.getClass().getName())
this.expandable.primaryMapper == orig(this.expandable.primaryMapper)
this.expandable.primaryMapper.firstIndex == orig(this.expandable.primaryMapper.firstIndex)
this.expandable.primaryMapper.dimension == orig(this.expandable.primaryMapper.dimension)
this.expandable.time == orig(this.expandable.time)
this.expandable.primaryState == orig(this.expandable.primaryState)
this.expandable.primaryState[] == orig(this.expandable.primaryState[])
this.expandable.primaryStateDot == orig(this.expandable.primaryStateDot)
this.expandable.primaryStateDot[] == orig(this.expandable.primaryStateDot[])
this.expandable.components == orig(this.expandable.components)
this.expandable.components[] == orig(this.expandable.components[])
this.expandable.components.getClass().getName() == orig(this.expandable.components.getClass().getName())
this.fsal == true
this.c has only one value
this.c[] == [0.2, 0.3, 0.8, 0.8888888888888888, 1.0, 1.0]
this.c[] sorted by <=
this.a has only one value
this.a[] contains no nulls and has only one value, of length 6
this.b has only one value
this.b[] == [0.09114583333333333, 0.0, 0.44923629829290207, 0.6510416666666666, -0.322376179245283, 0.13095238095238096, 0.0]
this.prototype.getClass().getName() == org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator.class
this.prototype.finalized == true
this.exp == -0.2
this.safety == 0.8
this.minReduction == 0.3
this.maxGrowth == 5.0
this.vecAbsoluteTolerance == null
this.vecRelativeTolerance == null
this.mainSetDimension == 2
this.initialStep == -1.0
this.minStep == 0.0
this.maxStep == 4.0
this.stepSize == 0.0
this.isLastStep == true
this.resetOccurred == false
this.statesInitialized == true
this.name has only one value
this.name.toString == "Dormand-Prince 5(4)"
this.evaluations.maximalCount == 2147483647
this.expandable.primary.getClass().getName() == org.apache.commons.math3.ode.TestProblem1.class
this.expandable.primaryMapper.dimension == 2
this.expandable.time == 4.0
this.expandable.primaryState[] sorted by >
this.expandable.primaryStateDot[] sorted by <
this.expandable.components[] == []
this.expandable.components[].getClass().getName() == []
return == 0.3
size(this.c[]) == 6
size(this.a[]) == 6
size(this.b[]) == 7
size(this.expandable.primaryState[]) == 2
size(this.expandable.primaryStateDot[]) == 2
===========================================================================
org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator.getSafety():::ENTER
this.getClass().getName() == org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.class
this.fsal == true
this.c has only one value
this.c[] == [0.2, 0.3, 0.8, 0.8888888888888888, 1.0, 1.0]
this.c[] sorted by <=
this.a has only one value
this.a[] contains no nulls and has only one value, of length 6
this.b has only one value
this.b[] == [0.09114583333333333, 0.0, 0.44923629829290207, 0.6510416666666666, -0.322376179245283, 0.13095238095238096, 0.0]
this.prototype.getClass().getName() == org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator.class
this.prototype.finalized == true
this.exp == -0.2
this.safety == 0.8
this.minReduction == 0.3
this.maxGrowth == 5.0
this.vecAbsoluteTolerance == null
this.vecRelativeTolerance == null
this.mainSetDimension == 2
this.initialStep == -1.0
this.minStep == 0.0
this.maxStep == 4.0
this.stepSize == 0.0
this.isLastStep == true
this.resetOccurred == false
this.statesInitialized == true
this.name has only one value
this.name.toString == "Dormand-Prince 5(4)"
this.evaluations.maximalCount == 2147483647
this.expandable.primary.getClass().getName() == org.apache.commons.math3.ode.TestProblem1.class
this.expandable.primaryMapper.dimension == 2
this.expandable.time == 4.0
this.expandable.primaryState[] sorted by >
this.expandable.primaryStateDot[] sorted by <
this.expandable.components[] == []
this.expandable.components[].getClass().getName() == []
size(this.c[]) == 6
size(this.a[]) == 6
size(this.b[]) == 7
size(this.expandable.primaryState[]) == 2
size(this.expandable.primaryStateDot[]) == 2
===========================================================================
org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator.getSafety():::EXIT
this.fsal == orig(this.fsal)
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a.getClass().getName() == orig(this.a.getClass().getName())
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.previousState == orig(this.prototype.previousState)
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.integrator == orig(this.prototype.integrator)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.interpolatedDerivatives == orig(this.prototype.interpolatedDerivatives)
this.prototype.interpolatedPrimaryState == orig(this.prototype.interpolatedPrimaryState)
this.prototype.interpolatedPrimaryDerivatives == orig(this.prototype.interpolatedPrimaryDerivatives)
this.prototype.interpolatedSecondaryState == orig(this.prototype.interpolatedSecondaryState)
this.prototype.interpolatedSecondaryDerivatives == orig(this.prototype.interpolatedSecondaryDerivatives)
this.prototype.finalized == orig(this.prototype.finalized)
this.prototype.forward == orig(this.prototype.forward)
this.prototype.dirtyState == orig(this.prototype.dirtyState)
this.prototype.primaryMapper == orig(this.prototype.primaryMapper)
this.prototype.secondaryMappers == orig(this.prototype.secondaryMappers)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.minReduction == orig(this.minReduction)
this.maxGrowth == orig(this.maxGrowth)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.mainSetDimension == orig(this.mainSetDimension)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepSize == orig(this.stepSize)
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
this.expandable.primary == orig(this.expandable.primary)
this.expandable.primary.getClass().getName() == orig(this.expandable.primary.getClass().getName())
this.expandable.primaryMapper == orig(this.expandable.primaryMapper)
this.expandable.primaryMapper.firstIndex == orig(this.expandable.primaryMapper.firstIndex)
this.expandable.primaryMapper.dimension == orig(this.expandable.primaryMapper.dimension)
this.expandable.time == orig(this.expandable.time)
this.expandable.primaryState == orig(this.expandable.primaryState)
this.expandable.primaryState[] == orig(this.expandable.primaryState[])
this.expandable.primaryStateDot == orig(this.expandable.primaryStateDot)
this.expandable.primaryStateDot[] == orig(this.expandable.primaryStateDot[])
this.expandable.components == orig(this.expandable.components)
this.expandable.components[] == orig(this.expandable.components[])
this.expandable.components.getClass().getName() == orig(this.expandable.components.getClass().getName())
this.fsal == true
this.c has only one value
this.c[] == [0.2, 0.3, 0.8, 0.8888888888888888, 1.0, 1.0]
this.c[] sorted by <=
this.a has only one value
this.a[] contains no nulls and has only one value, of length 6
this.b has only one value
this.b[] == [0.09114583333333333, 0.0, 0.44923629829290207, 0.6510416666666666, -0.322376179245283, 0.13095238095238096, 0.0]
this.prototype.getClass().getName() == org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator.class
this.prototype.finalized == true
this.exp == -0.2
this.safety == 0.8
this.minReduction == 0.3
this.maxGrowth == 5.0
this.vecAbsoluteTolerance == null
this.vecRelativeTolerance == null
this.mainSetDimension == 2
this.initialStep == -1.0
this.minStep == 0.0
this.maxStep == 4.0
this.stepSize == 0.0
this.isLastStep == true
this.resetOccurred == false
this.statesInitialized == true
this.name has only one value
this.name.toString == "Dormand-Prince 5(4)"
this.evaluations.maximalCount == 2147483647
this.expandable.primary.getClass().getName() == org.apache.commons.math3.ode.TestProblem1.class
this.expandable.primaryMapper.dimension == 2
this.expandable.time == 4.0
this.expandable.primaryState[] sorted by >
this.expandable.primaryStateDot[] sorted by <
this.expandable.components[] == []
this.expandable.components[].getClass().getName() == []
return == 0.8
size(this.c[]) == 6
size(this.a[]) == 6
size(this.b[]) == 7
size(this.expandable.primaryState[]) == 2
size(this.expandable.primaryStateDot[]) == 2
===========================================================================
org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator.integrate(org.apache.commons.math3.ode.ExpandableStatefulODE, double):::ENTER
this.safety one of { 0.8, 0.9 }
this.minReduction one of { 0.2, 0.3 }
this.maxGrowth one of { 5.0, 10.0 }
this.mainSetDimension one of { 0, 2, 3 }
this.resetOccurred == false
this.expandable.primaryMapper.dimension one of { 2, 3 }
equations.primaryMapper.firstIndex == 0
equations.time >= 0.0
equations.primaryStateDot[] elements == 0.0
equations.components[] elements != null
equations.components[].getClass().getName() elements == org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent.class
equations.components[].getClass().getName() one of { [], [org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent] }
equations.components.getClass().getName() == java.util.ArrayList.class
size(this.expandable.primaryState[]) one of { 2, 3 }
size(this.expandable.primaryStateDot[]) one of { 2, 3 }
size(equations.components[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator.integrate(org.apache.commons.math3.ode.ExpandableStatefulODE, double):::EXIT
this.fsal == orig(this.fsal)
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a.getClass().getName() == orig(this.a.getClass().getName())
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.previousState == orig(this.prototype.previousState)
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.integrator == orig(this.prototype.integrator)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.interpolatedDerivatives == orig(this.prototype.interpolatedDerivatives)
this.prototype.interpolatedPrimaryState == orig(this.prototype.interpolatedPrimaryState)
this.prototype.interpolatedPrimaryDerivatives == orig(this.prototype.interpolatedPrimaryDerivatives)
this.prototype.interpolatedSecondaryState == orig(this.prototype.interpolatedSecondaryState)
this.prototype.interpolatedSecondaryDerivatives == orig(this.prototype.interpolatedSecondaryDerivatives)
this.prototype.forward == orig(this.prototype.forward)
this.prototype.dirtyState == orig(this.prototype.dirtyState)
this.prototype.primaryMapper == orig(this.prototype.primaryMapper)
this.prototype.secondaryMappers == orig(this.prototype.secondaryMappers)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.minReduction == orig(this.minReduction)
this.maxGrowth == orig(this.maxGrowth)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecAbsoluteTolerance[] == orig(this.vecAbsoluteTolerance[])
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.vecRelativeTolerance[] == orig(this.vecRelativeTolerance[])
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable.primary.getClass().getName() == orig(this.expandable.primary.getClass().getName())
this.expandable.primaryMapper.firstIndex == orig(this.expandable.primaryMapper.firstIndex)
this.expandable.primaryMapper.dimension == orig(this.expandable.primaryMapper.dimension)
this.expandable.components[].getClass().getName() == orig(this.expandable.components[].getClass().getName())
this.expandable.components.getClass().getName() == orig(this.expandable.components.getClass().getName())
equations.primary == orig(equations.primary)
equations.primary.getClass().getName() == orig(equations.primary.getClass().getName())
equations.primaryMapper == orig(equations.primaryMapper)
equations.primaryMapper.firstIndex == orig(equations.primaryMapper.firstIndex)
equations.primaryMapper.dimension == orig(equations.primaryMapper.dimension)
equations.primaryState == orig(equations.primaryState)
equations.primaryStateDot == orig(equations.primaryStateDot)
equations.components == orig(equations.components)
equations.components[] == orig(equations.components[])
equations.components.getClass().getName() == orig(equations.components.getClass().getName())
size(this.expandable.primaryState[]) == orig(size(this.expandable.primaryState[]))
size(this.expandable.primaryStateDot[]) == orig(size(this.expandable.primaryStateDot[]))
size(this.expandable.components[]) == orig(size(this.expandable.components[]))
size(equations.primaryState[]) == orig(size(equations.primaryState[]))
size(equations.primaryStateDot[]) == orig(size(equations.primaryStateDot[]))
this.prototype.finalized == true
this.safety one of { 0.8, 0.9 }
this.minReduction one of { 0.2, 0.3 }
this.maxGrowth one of { 5.0, 10.0 }
this.isLastStep == true
this.statesInitialized == true
equations.primaryMapper.firstIndex == 0
equations.primaryStateDot[] elements != 0
equations.components[] elements != null
equations.components[].getClass().getName() elements == org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent.class
equations.components[].getClass().getName() one of { [], [org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent] }
equations.components.getClass().getName() == java.util.ArrayList.class
size(equations.components[]) one of { 0, 1 }
orig(this.mainSetDimension) % this.mainSetDimension == 0
this.mainSetDimension >= orig(this.mainSetDimension)
orig(this.expandable.primaryMapper.dimension) % this.expandable.primaryMapper.dimension == 0
this.expandable.primaryMapper.dimension % orig(this.expandable.primaryMapper.dimension) == 0
this.expandable.time >= orig(this.expandable.time)
===========================================================================
org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator.setMaxGrowth(double):::ENTER
this.prototype.finalized == false
this.safety one of { 0.8, 0.9 }
this.minReduction == 0.2
this.maxGrowth one of { 0.0, 10.0 }
this.mainSetDimension == 0
this.initialStep == -1.0
this.isLastStep == false
this.resetOccurred == false
this.statesInitialized == false
this.evaluations.maximalCount == 2147483647
this.evaluations.count == 0
this.expandable == null
maxGrowth one of { 5.0, 10.0 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator.setMaxGrowth(double):::EXIT
this.fsal == orig(this.fsal)
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a.getClass().getName() == orig(this.a.getClass().getName())
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.previousState == orig(this.prototype.previousState)
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.integrator == orig(this.prototype.integrator)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.interpolatedDerivatives == orig(this.prototype.interpolatedDerivatives)
this.prototype.interpolatedPrimaryState == orig(this.prototype.interpolatedPrimaryState)
this.prototype.interpolatedPrimaryDerivatives == orig(this.prototype.interpolatedPrimaryDerivatives)
this.prototype.interpolatedSecondaryState == orig(this.prototype.interpolatedSecondaryState)
this.prototype.interpolatedSecondaryDerivatives == orig(this.prototype.interpolatedSecondaryDerivatives)
this.prototype.finalized == orig(this.prototype.finalized)
this.prototype.forward == orig(this.prototype.forward)
this.prototype.dirtyState == orig(this.prototype.dirtyState)
this.prototype.primaryMapper == orig(this.prototype.primaryMapper)
this.prototype.secondaryMappers == orig(this.prototype.secondaryMappers)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.minReduction == orig(this.minReduction)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecAbsoluteTolerance[] == orig(this.vecAbsoluteTolerance[])
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.vecRelativeTolerance[] == orig(this.vecRelativeTolerance[])
this.mainSetDimension == orig(this.mainSetDimension)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
this.prototype.finalized == false
this.safety one of { 0.8, 0.9 }
this.minReduction == 0.2
this.maxGrowth one of { 5.0, 10.0 }
this.mainSetDimension == 0
this.initialStep == -1.0
this.isLastStep == false
this.resetOccurred == false
this.statesInitialized == false
this.evaluations.maximalCount == 2147483647
this.evaluations.count == 0
this.expandable == null
this.maxGrowth != orig(this.maxGrowth)
===========================================================================
org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator.setMinReduction(double):::ENTER
this.prototype.finalized == false
this.safety one of { 0.8, 0.9 }
this.minReduction one of { 0.0, 0.2 }
this.maxGrowth one of { 0.0, 5.0 }
this.mainSetDimension == 0
this.initialStep == -1.0
this.isLastStep == false
this.resetOccurred == false
this.statesInitialized == false
this.evaluations.maximalCount == 2147483647
this.evaluations.count == 0
this.expandable == null
minReduction one of { 0.2, 0.3 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator.setMinReduction(double):::EXIT
this.fsal == orig(this.fsal)
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a.getClass().getName() == orig(this.a.getClass().getName())
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.previousState == orig(this.prototype.previousState)
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.integrator == orig(this.prototype.integrator)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.interpolatedDerivatives == orig(this.prototype.interpolatedDerivatives)
this.prototype.interpolatedPrimaryState == orig(this.prototype.interpolatedPrimaryState)
this.prototype.interpolatedPrimaryDerivatives == orig(this.prototype.interpolatedPrimaryDerivatives)
this.prototype.interpolatedSecondaryState == orig(this.prototype.interpolatedSecondaryState)
this.prototype.interpolatedSecondaryDerivatives == orig(this.prototype.interpolatedSecondaryDerivatives)
this.prototype.finalized == orig(this.prototype.finalized)
this.prototype.forward == orig(this.prototype.forward)
this.prototype.dirtyState == orig(this.prototype.dirtyState)
this.prototype.primaryMapper == orig(this.prototype.primaryMapper)
this.prototype.secondaryMappers == orig(this.prototype.secondaryMappers)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.maxGrowth == orig(this.maxGrowth)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecAbsoluteTolerance[] == orig(this.vecAbsoluteTolerance[])
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.vecRelativeTolerance[] == orig(this.vecRelativeTolerance[])
this.mainSetDimension == orig(this.mainSetDimension)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
this.prototype.finalized == false
this.safety one of { 0.8, 0.9 }
this.minReduction one of { 0.2, 0.3 }
this.maxGrowth one of { 0.0, 5.0 }
this.mainSetDimension == 0
this.initialStep == -1.0
this.isLastStep == false
this.resetOccurred == false
this.statesInitialized == false
this.evaluations.maximalCount == 2147483647
this.evaluations.count == 0
this.expandable == null
this.minReduction > orig(this.minReduction)
===========================================================================
org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator.setSafety(double):::ENTER
this.prototype.finalized == false
this.safety one of { 0.0, 0.9 }
this.minReduction one of { 0.0, 0.2 }
this.maxGrowth one of { 0.0, 10.0 }
this.mainSetDimension == 0
this.initialStep == -1.0
this.isLastStep == false
this.resetOccurred == false
this.statesInitialized == false
this.evaluations.maximalCount == 2147483647
this.evaluations.count == 0
this.expandable == null
safety one of { 0.8, 0.9 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator.setSafety(double):::EXIT
this.fsal == orig(this.fsal)
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a.getClass().getName() == orig(this.a.getClass().getName())
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.previousState == orig(this.prototype.previousState)
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.integrator == orig(this.prototype.integrator)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.interpolatedDerivatives == orig(this.prototype.interpolatedDerivatives)
this.prototype.interpolatedPrimaryState == orig(this.prototype.interpolatedPrimaryState)
this.prototype.interpolatedPrimaryDerivatives == orig(this.prototype.interpolatedPrimaryDerivatives)
this.prototype.interpolatedSecondaryState == orig(this.prototype.interpolatedSecondaryState)
this.prototype.interpolatedSecondaryDerivatives == orig(this.prototype.interpolatedSecondaryDerivatives)
this.prototype.finalized == orig(this.prototype.finalized)
this.prototype.forward == orig(this.prototype.forward)
this.prototype.dirtyState == orig(this.prototype.dirtyState)
this.prototype.primaryMapper == orig(this.prototype.primaryMapper)
this.prototype.secondaryMappers == orig(this.prototype.secondaryMappers)
this.exp == orig(this.exp)
this.minReduction == orig(this.minReduction)
this.maxGrowth == orig(this.maxGrowth)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecAbsoluteTolerance[] == orig(this.vecAbsoluteTolerance[])
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.vecRelativeTolerance[] == orig(this.vecRelativeTolerance[])
this.mainSetDimension == orig(this.mainSetDimension)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
this.prototype.finalized == false
this.safety one of { 0.8, 0.9 }
this.minReduction one of { 0.0, 0.2 }
this.maxGrowth one of { 0.0, 10.0 }
this.mainSetDimension == 0
this.initialStep == -1.0
this.isLastStep == false
this.resetOccurred == false
this.statesInitialized == false
this.evaluations.maximalCount == 2147483647
this.evaluations.count == 0
this.expandable == null
this.safety != orig(this.safety)
===========================================================================
org.apache.commons.math3.ode.nonstiff.EulerIntegrator:::CLASS
org.apache.commons.math3.ode.nonstiff.EulerIntegrator.STATIC_C has only one value
org.apache.commons.math3.ode.nonstiff.EulerIntegrator.STATIC_C[] == []
org.apache.commons.math3.ode.nonstiff.EulerIntegrator.STATIC_A has only one value
org.apache.commons.math3.ode.nonstiff.EulerIntegrator.STATIC_A.getClass().getName() == double[][].class
org.apache.commons.math3.ode.nonstiff.EulerIntegrator.STATIC_A[] == []
org.apache.commons.math3.ode.nonstiff.EulerIntegrator.STATIC_B has only one value
org.apache.commons.math3.ode.nonstiff.EulerIntegrator.STATIC_B[] == [1.0]
org.apache.commons.math3.ode.nonstiff.EulerIntegrator.STATIC_B[] elements == 1.0
size(org.apache.commons.math3.ode.nonstiff.EulerIntegrator.STATIC_B[]) == 1
===========================================================================
org.apache.commons.math3.ode.nonstiff.EulerIntegrator:::OBJECT
this.c has only one value
this.c[] == []
this.a has only one value
this.a.getClass().getName() == double[][].class
this.a[] == []
this.b has only one value
this.b[] == [1.0]
this.b[] elements == 1.0
this.prototype.getClass().getName() == org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator.class
this.prototype.previousState == null
this.prototype.yDotK == null
this.prototype.integrator == null
this.prototype.h == Double.NaN
this.prototype.currentState == null
this.prototype.interpolatedTime == Double.NaN
this.prototype.interpolatedState == null
this.prototype.interpolatedDerivatives == null
this.prototype.interpolatedPrimaryState == null
this.prototype.interpolatedPrimaryDerivatives == null
this.prototype.interpolatedSecondaryState == null
this.prototype.interpolatedSecondaryDerivatives == null
this.prototype.globalPreviousTime == Double.NaN
this.prototype.globalCurrentTime == Double.NaN
this.prototype.softPreviousTime == Double.NaN
this.prototype.softCurrentTime == Double.NaN
this.prototype.finalized == false
this.prototype.forward == true
this.prototype.dirtyState == true
this.prototype.primaryMapper == null
this.prototype.secondaryMappers == null
this.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.isLastStep == false
this.resetOccurred == false
this.eventsStates.getClass().getName() == java.util.ArrayList.class
this.statesInitialized == false
this.name has only one value
this.name.toString == "Euler"
this.evaluations.maximalCount == 2147483647
this.evaluations.count == 0
this.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
this.expandable == null
size(this.b[]) == 1
===========================================================================
org.apache.commons.math3.ode.nonstiff.EulerIntegrator.EulerIntegrator(double):::ENTER
===========================================================================
org.apache.commons.math3.ode.nonstiff.EulerIntegrator.EulerIntegrator(double):::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest$1:::OBJECT
this has only one value
org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest$1.(org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest):::ENTER
org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest$1.(org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest):::EXIT
org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest.this)
===========================================================================
org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest$1.handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean):::ENTER
interpolator has only one value
interpolator.getClass().getName() == org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator.class
===========================================================================
org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest$1.handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean):::EXIT
org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest.this)
===========================================================================
org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest$1.init(double, double[], double):::ENTER
t0 == 0.0
y0 has only one value
y0[] == [0.0]
y0[] elements == 0.0
t == 5.0
size(y0[]) == 1
===========================================================================
org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest$1.init(double, double[], double):::EXIT
org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest.this)
y0[] == orig(y0[])
y0[] == [0.0]
y0[] elements == 0.0
===========================================================================
org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest$2:::OBJECT
this has only one value
org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest$2.(org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest):::ENTER
org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest$2.(org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest):::EXIT
org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest.this)
===========================================================================
org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest$2.computeDerivatives(double, double[], double[]):::ENTER
y has only one value
dot has only one value
dot[] elements one of { 0.0, 1.0 }
dot[] one of { [0.0], [1.0] }
size(y[]) == 1
size(dot[]) == 1
===========================================================================
org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest$2.computeDerivatives(double, double[], double[]):::EXIT
org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest.this)
y[] == orig(y[])
dot[] == [1.0]
dot[] elements == 1.0
===========================================================================
org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest$2.getDimension():::ENTER
===========================================================================
org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest$2.getDimension():::EXIT
org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest.this)
return == 1
===========================================================================
org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest:::OBJECT
===========================================================================
org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest.EulerIntegratorTest():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest.testBackward():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest.testBackward():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest.testBigStep():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest.testBigStep():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest.testDecreasingSteps():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest.testDecreasingSteps():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest.testSmallStep():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest.testSmallStep():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest.testStepSize():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest.testStepSize():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator:::CLASS
===========================================================================
org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator:::OBJECT
this.yDotK.getClass().getName() == double[][].class
this.yDotK[] elements != null
this.integrator.getClass().getName() == org.apache.commons.math3.ode.nonstiff.EulerIntegrator.class
this.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.integrator.stepSize <= 1.25
this.integrator.stepSize >= -0.25
this.integrator.eventsStates.getClass().getName() == java.util.ArrayList.class
this.integrator.name has only one value
this.integrator.name.toString == "Euler"
this.integrator.evaluations.maximalCount == 2147483647
this.integrator.evaluations.count >= 1
this.integrator.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
this.integrator.expandable.time == 0.0
this.integrator.expandable.components[] == []
this.integrator.expandable.components[].getClass().getName() == []
this.integrator.expandable.components.getClass().getName() == java.util.ArrayList.class
this.h <= 1.25
this.h >= -0.25
this.interpolatedSecondaryState.getClass().getName() == double[][].class
this.interpolatedSecondaryState[] == []
this.interpolatedSecondaryDerivatives.getClass().getName() == double[][].class
this.interpolatedSecondaryDerivatives[] == []
this.primaryMapper.firstIndex == 0
this.primaryMapper.dimension one of { 1, 2, 4 }
this.secondaryMappers.getClass().getName() == org.apache.commons.math3.ode.EquationsMapper[].class
this.secondaryMappers[] == []
this.secondaryMappers[].getClass().getName() == []
this.secondaryMappers[].firstIndex == []
this.secondaryMappers[].dimension == []
size(this.previousState[]) one of { 1, 2, 4 }
size(this.yDotK[]) == 1
size(this.integrator.expandable.primaryState[]) one of { 1, 2, 4 }
size(this.integrator.expandable.primaryStateDot[]) one of { 1, 2, 4 }
size(this.currentState[]) one of { 1, 2, 4 }
size(this.interpolatedState[]) one of { 1, 2, 4 }
size(this.interpolatedDerivatives[]) one of { 1, 2, 4 }
size(this.interpolatedPrimaryState[]) one of { 1, 2, 4 }
size(this.interpolatedPrimaryDerivatives[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator.EulerStepInterpolator():::EXIT
this.previousState == null
this.yDotK == null
this.integrator == null
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.interpolatedPrimaryState == null
this.interpolatedPrimaryDerivatives == null
this.interpolatedSecondaryState == null
this.interpolatedSecondaryDerivatives == null
this.globalPreviousTime == Double.NaN
this.globalCurrentTime == Double.NaN
this.softPreviousTime == Double.NaN
this.softCurrentTime == Double.NaN
this.finalized == false
this.forward == true
this.dirtyState == true
this.primaryMapper == null
this.secondaryMappers == null
===========================================================================
org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator.EulerStepInterpolator(org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator):::ENTER
interpolator.previousState[] sorted by >
interpolator.yDotK.getClass().getName() == double[][].class
interpolator.yDotK[] contains no nulls and has only one value, of length 1
interpolator.yDotK[] elements has only one value
interpolator.yDotK[] elements != null
interpolator.integrator.getClass().getName() == org.apache.commons.math3.ode.nonstiff.EulerIntegrator.class
interpolator.integrator.stepHandlers has only one value
interpolator.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.stepSize == 0.004
interpolator.integrator.resetOccurred == false
interpolator.integrator.eventsStates has only one value
interpolator.integrator.eventsStates.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.statesInitialized == true
interpolator.integrator.name has only one value
interpolator.integrator.name.toString == "Euler"
interpolator.integrator.evaluations has only one value
interpolator.integrator.expandable has only one value
interpolator.h one of { 0.004, Double.NaN }
interpolator.h <= 0.0040000000000000036
interpolator.currentState[] sorted by >
interpolator.interpolatedState[] sorted by >
interpolator.interpolatedDerivatives[] sorted by <
interpolator.interpolatedPrimaryState[] sorted by >
interpolator.interpolatedPrimaryDerivatives[] == [0.0, 0.0]
interpolator.interpolatedPrimaryDerivatives[] elements == 0.0
interpolator.interpolatedSecondaryState.getClass().getName() == double[][].class
interpolator.interpolatedSecondaryState[] == []
interpolator.interpolatedSecondaryDerivatives.getClass().getName() == double[][].class
interpolator.interpolatedSecondaryDerivatives[] == []
interpolator.finalized == true
interpolator.forward == true
interpolator.primaryMapper.firstIndex == 0
interpolator.primaryMapper.dimension == 2
interpolator.secondaryMappers.getClass().getName() == org.apache.commons.math3.ode.EquationsMapper[].class
interpolator.secondaryMappers[] == []
interpolator.secondaryMappers[].getClass().getName() == []
interpolator.secondaryMappers[].firstIndex == []
interpolator.secondaryMappers[].dimension == []
size(interpolator.previousState[]) == 2
size(interpolator.yDotK[]) == 1
size(interpolator.currentState[]) == 2
size(interpolator.interpolatedState[]) == 2
size(interpolator.interpolatedDerivatives[]) == 2
size(interpolator.interpolatedPrimaryState[]) == 2
size(interpolator.interpolatedPrimaryDerivatives[]) == 2
===========================================================================
org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator.EulerStepInterpolator(org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator):::EXIT
interpolator.previousState == orig(interpolator.previousState)
interpolator.previousState[] == orig(interpolator.previousState[])
interpolator.yDotK == orig(interpolator.yDotK)
interpolator.yDotK.getClass().getName() == orig(interpolator.yDotK.getClass().getName())
interpolator.yDotK[] == orig(interpolator.yDotK[])
interpolator.integrator == orig(interpolator.integrator)
interpolator.integrator.getClass().getName() == orig(interpolator.integrator.getClass().getName())
interpolator.integrator.stepHandlers == orig(interpolator.integrator.stepHandlers)
interpolator.integrator.stepHandlers.getClass().getName() == orig(interpolator.integrator.stepHandlers.getClass().getName())
interpolator.integrator.stepStart == orig(interpolator.integrator.stepStart)
interpolator.integrator.stepSize == orig(interpolator.integrator.stepSize)
interpolator.integrator.isLastStep == orig(interpolator.integrator.isLastStep)
interpolator.integrator.resetOccurred == orig(interpolator.integrator.resetOccurred)
interpolator.integrator.eventsStates == orig(interpolator.integrator.eventsStates)
interpolator.integrator.eventsStates.getClass().getName() == orig(interpolator.integrator.eventsStates.getClass().getName())
interpolator.integrator.statesInitialized == orig(interpolator.integrator.statesInitialized)
interpolator.integrator.name == orig(interpolator.integrator.name)
interpolator.integrator.name.toString == orig(interpolator.integrator.name.toString)
interpolator.integrator.evaluations == orig(interpolator.integrator.evaluations)
interpolator.integrator.expandable == orig(interpolator.integrator.expandable)
interpolator.currentState == orig(interpolator.currentState)
interpolator.currentState[] == orig(interpolator.currentState[])
interpolator.interpolatedState == orig(interpolator.interpolatedState)
interpolator.interpolatedState[] == orig(interpolator.interpolatedState[])
interpolator.interpolatedDerivatives == orig(interpolator.interpolatedDerivatives)
interpolator.interpolatedDerivatives[] == orig(interpolator.interpolatedDerivatives[])
interpolator.interpolatedPrimaryState == orig(interpolator.interpolatedPrimaryState)
interpolator.interpolatedPrimaryState[] == orig(interpolator.interpolatedPrimaryState[])
interpolator.interpolatedPrimaryDerivatives == orig(interpolator.interpolatedPrimaryDerivatives)
interpolator.interpolatedPrimaryDerivatives[] == orig(interpolator.interpolatedPrimaryDerivatives[])
interpolator.interpolatedSecondaryState == orig(interpolator.interpolatedSecondaryState)
interpolator.interpolatedSecondaryState.getClass().getName() == orig(interpolator.interpolatedSecondaryState.getClass().getName())
interpolator.interpolatedSecondaryState[] == orig(interpolator.interpolatedSecondaryState[])
interpolator.interpolatedSecondaryDerivatives == orig(interpolator.interpolatedSecondaryDerivatives)
interpolator.interpolatedSecondaryDerivatives.getClass().getName() == orig(interpolator.interpolatedSecondaryDerivatives.getClass().getName())
interpolator.interpolatedSecondaryDerivatives[] == orig(interpolator.interpolatedSecondaryDerivatives[])
interpolator.finalized == orig(interpolator.finalized)
interpolator.forward == orig(interpolator.forward)
interpolator.dirtyState == orig(interpolator.dirtyState)
interpolator.primaryMapper == orig(interpolator.primaryMapper)
interpolator.primaryMapper.firstIndex == orig(interpolator.primaryMapper.firstIndex)
interpolator.primaryMapper.dimension == orig(interpolator.primaryMapper.dimension)
interpolator.secondaryMappers == orig(interpolator.secondaryMappers)
interpolator.secondaryMappers.getClass().getName() == orig(interpolator.secondaryMappers.getClass().getName())
interpolator.secondaryMappers[] == orig(interpolator.secondaryMappers[])
interpolator.secondaryMappers[].firstIndex == orig(interpolator.secondaryMappers[].firstIndex)
interpolator.secondaryMappers[].dimension == orig(interpolator.secondaryMappers[].dimension)
this.previousState[] sorted by >
this.integrator == null
this.h one of { 0.004, Double.NaN }
this.h <= 0.0040000000000000036
this.currentState[] sorted by >
this.interpolatedState[] sorted by >
this.interpolatedDerivatives[] sorted by <
this.interpolatedPrimaryState[] sorted by >
this.interpolatedPrimaryDerivatives[] == [0.0, 0.0]
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.finalized == true
this.forward == true
this.primaryMapper.dimension == 2
interpolator.previousState[] sorted by >
interpolator.yDotK.getClass().getName() == double[][].class
interpolator.yDotK[] contains no nulls and has only one value, of length 1
interpolator.yDotK[] elements has only one value
interpolator.yDotK[] elements != null
interpolator.integrator.getClass().getName() == org.apache.commons.math3.ode.nonstiff.EulerIntegrator.class
interpolator.integrator.stepHandlers has only one value
interpolator.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.stepSize == 0.004
interpolator.integrator.resetOccurred == false
interpolator.integrator.eventsStates has only one value
interpolator.integrator.eventsStates.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.statesInitialized == true
interpolator.integrator.name has only one value
interpolator.integrator.name.toString == "Euler"
interpolator.integrator.evaluations has only one value
interpolator.integrator.expandable has only one value
interpolator.h one of { 0.004, Double.NaN }
interpolator.h <= 0.0040000000000000036
interpolator.currentState[] sorted by >
interpolator.interpolatedState[] sorted by >
interpolator.interpolatedDerivatives[] sorted by <
interpolator.interpolatedPrimaryState[] sorted by >
interpolator.interpolatedPrimaryDerivatives[] == [0.0, 0.0]
interpolator.interpolatedPrimaryDerivatives[] elements == 0.0
interpolator.interpolatedSecondaryState.getClass().getName() == double[][].class
interpolator.interpolatedSecondaryState[] == []
interpolator.interpolatedSecondaryDerivatives.getClass().getName() == double[][].class
interpolator.interpolatedSecondaryDerivatives[] == []
interpolator.finalized == true
interpolator.forward == true
interpolator.primaryMapper.firstIndex == 0
interpolator.primaryMapper.dimension == 2
interpolator.secondaryMappers.getClass().getName() == org.apache.commons.math3.ode.EquationsMapper[].class
interpolator.secondaryMappers[] == []
interpolator.secondaryMappers[].getClass().getName() == []
interpolator.secondaryMappers[].firstIndex == []
interpolator.secondaryMappers[].dimension == []
size(this.previousState[]) == 2
size(this.currentState[]) == 2
size(this.interpolatedState[]) == 2
size(this.interpolatedDerivatives[]) == 2
size(this.interpolatedPrimaryState[]) == 2
size(this.interpolatedPrimaryDerivatives[]) == 2
size(interpolator.previousState[]) == 2
size(interpolator.yDotK[]) == 1
size(interpolator.currentState[]) == 2
size(interpolator.interpolatedState[]) == 2
size(interpolator.interpolatedDerivatives[]) == 2
size(interpolator.interpolatedPrimaryState[]) == 2
size(interpolator.interpolatedPrimaryDerivatives[]) == 2
===========================================================================
org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::ENTER
this.dirtyState == true
theta <= 1.0
theta >= 0.0
===========================================================================
org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::EXIT
this.previousState == orig(this.previousState)
this.previousState[] == orig(this.previousState[])
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.integrator.stepHandlers == orig(this.integrator.stepHandlers)
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.stepHandlers.getClass().getName())
this.integrator.stepStart == orig(this.integrator.stepStart)
this.integrator.stepSize == orig(this.integrator.stepSize)
this.integrator.isLastStep == orig(this.integrator.isLastStep)
this.integrator.resetOccurred == orig(this.integrator.resetOccurred)
this.integrator.eventsStates == orig(this.integrator.eventsStates)
this.integrator.eventsStates.getClass().getName() == orig(this.integrator.eventsStates.getClass().getName())
this.integrator.statesInitialized == orig(this.integrator.statesInitialized)
this.integrator.name == orig(this.integrator.name)
this.integrator.name.toString == orig(this.integrator.name.toString)
this.integrator.evaluations == orig(this.integrator.evaluations)
this.integrator.evaluations.maximalCount == orig(this.integrator.evaluations.maximalCount)
this.integrator.evaluations.count == orig(this.integrator.evaluations.count)
this.integrator.evaluations.maxCountCallback == orig(this.integrator.evaluations.maxCountCallback)
this.integrator.evaluations.maxCountCallback.getClass().getName() == orig(this.integrator.evaluations.maxCountCallback.getClass().getName())
this.integrator.expandable == orig(this.integrator.expandable)
this.integrator.expandable.primary == orig(this.integrator.expandable.primary)
this.integrator.expandable.primary.getClass().getName() == orig(this.integrator.expandable.primary.getClass().getName())
this.integrator.expandable.primaryMapper == orig(this.integrator.expandable.primaryMapper)
this.integrator.expandable.time == orig(this.integrator.expandable.time)
this.integrator.expandable.primaryState == orig(this.integrator.expandable.primaryState)
this.integrator.expandable.primaryState[] == orig(this.integrator.expandable.primaryState[])
this.integrator.expandable.primaryStateDot == orig(this.integrator.expandable.primaryStateDot)
this.integrator.expandable.primaryStateDot[] == orig(this.integrator.expandable.primaryStateDot[])
this.integrator.expandable.components == orig(this.integrator.expandable.components)
this.integrator.expandable.components[] == orig(this.integrator.expandable.components[])
this.integrator.expandable.components.getClass().getName() == orig(this.integrator.expandable.components.getClass().getName())
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedPrimaryState == orig(this.interpolatedPrimaryState)
this.interpolatedPrimaryState[] == orig(this.interpolatedPrimaryState[])
this.interpolatedPrimaryDerivatives == orig(this.interpolatedPrimaryDerivatives)
this.interpolatedPrimaryDerivatives[] == orig(this.interpolatedPrimaryDerivatives[])
this.interpolatedSecondaryState == orig(this.interpolatedSecondaryState)
this.interpolatedSecondaryState.getClass().getName() == orig(this.interpolatedSecondaryState.getClass().getName())
this.interpolatedSecondaryState[] == orig(this.interpolatedSecondaryState[])
this.interpolatedSecondaryDerivatives == orig(this.interpolatedSecondaryDerivatives)
this.interpolatedSecondaryDerivatives.getClass().getName() == orig(this.interpolatedSecondaryDerivatives.getClass().getName())
this.interpolatedSecondaryDerivatives[] == orig(this.interpolatedSecondaryDerivatives[])
this.globalPreviousTime == orig(this.globalPreviousTime)
this.globalCurrentTime == orig(this.globalCurrentTime)
this.softPreviousTime == orig(this.softPreviousTime)
this.softCurrentTime == orig(this.softCurrentTime)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.secondaryMappers == orig(this.secondaryMappers)
this.secondaryMappers.getClass().getName() == orig(this.secondaryMappers.getClass().getName())
this.secondaryMappers[] == orig(this.secondaryMappers[])
this.secondaryMappers[].firstIndex == orig(this.secondaryMappers[].firstIndex)
this.secondaryMappers[].dimension == orig(this.secondaryMappers[].dimension)
size(this.interpolatedState[]) == orig(size(this.interpolatedState[]))
size(this.interpolatedDerivatives[]) == orig(size(this.interpolatedDerivatives[]))
this.dirtyState == true
===========================================================================
org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator.doCopy():::ENTER
this.previousState[] sorted by >
this.yDotK[] contains no nulls and has only one value, of length 1
this.yDotK[] elements has only one value
this.integrator.stepHandlers has only one value
this.integrator.stepSize == 0.004
this.integrator.resetOccurred == false
this.integrator.eventsStates has only one value
this.integrator.statesInitialized == true
this.integrator.evaluations has only one value
this.integrator.evaluations.maxCountCallback has only one value
this.integrator.expandable has only one value
this.integrator.expandable.primary has only one value
this.integrator.expandable.primary.getClass().getName() == org.apache.commons.math3.ode.TestProblem1.class
this.integrator.expandable.primaryMapper has only one value
this.integrator.expandable.primaryState has only one value
this.integrator.expandable.primaryState[] sorted by >
this.integrator.expandable.primaryStateDot has only one value
this.integrator.expandable.primaryStateDot[] sorted by <
this.integrator.expandable.components has only one value
this.h one of { 0.004, Double.NaN }
this.h <= 0.0040000000000000036
this.currentState[] sorted by >
this.interpolatedState[] sorted by >
this.interpolatedDerivatives[] sorted by <
this.interpolatedPrimaryState[] sorted by >
this.interpolatedPrimaryDerivatives[] == [0.0, 0.0]
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.finalized == true
this.forward == true
this.primaryMapper.dimension == 2
size(this.previousState[]) == 2
size(this.integrator.expandable.primaryState[]) == 2
size(this.integrator.expandable.primaryStateDot[]) == 2
size(this.currentState[]) == 2
size(this.interpolatedState[]) == 2
size(this.interpolatedDerivatives[]) == 2
size(this.interpolatedPrimaryState[]) == 2
size(this.interpolatedPrimaryDerivatives[]) == 2
===========================================================================
org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator.doCopy():::EXIT
this.previousState == orig(this.previousState)
this.previousState[] == orig(this.previousState[])
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.integrator.stepHandlers == orig(this.integrator.stepHandlers)
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.stepHandlers.getClass().getName())
this.integrator.stepStart == orig(this.integrator.stepStart)
this.integrator.stepSize == orig(this.integrator.stepSize)
this.integrator.isLastStep == orig(this.integrator.isLastStep)
this.integrator.resetOccurred == orig(this.integrator.resetOccurred)
this.integrator.eventsStates == orig(this.integrator.eventsStates)
this.integrator.eventsStates.getClass().getName() == orig(this.integrator.eventsStates.getClass().getName())
this.integrator.statesInitialized == orig(this.integrator.statesInitialized)
this.integrator.name == orig(this.integrator.name)
this.integrator.name.toString == orig(this.integrator.name.toString)
this.integrator.evaluations == orig(this.integrator.evaluations)
this.integrator.evaluations.maximalCount == orig(this.integrator.evaluations.maximalCount)
this.integrator.evaluations.count == orig(this.integrator.evaluations.count)
this.integrator.evaluations.maxCountCallback == orig(this.integrator.evaluations.maxCountCallback)
this.integrator.evaluations.maxCountCallback.getClass().getName() == orig(this.integrator.evaluations.maxCountCallback.getClass().getName())
this.integrator.expandable == orig(this.integrator.expandable)
this.integrator.expandable.primary == orig(this.integrator.expandable.primary)
this.integrator.expandable.primary.getClass().getName() == orig(this.integrator.expandable.primary.getClass().getName())
this.integrator.expandable.primaryMapper == orig(this.integrator.expandable.primaryMapper)
this.integrator.expandable.time == orig(this.integrator.expandable.time)
this.integrator.expandable.primaryState == orig(this.integrator.expandable.primaryState)
this.integrator.expandable.primaryState[] == orig(this.integrator.expandable.primaryState[])
this.integrator.expandable.primaryStateDot == orig(this.integrator.expandable.primaryStateDot)
this.integrator.expandable.primaryStateDot[] == orig(this.integrator.expandable.primaryStateDot[])
this.integrator.expandable.components == orig(this.integrator.expandable.components)
this.integrator.expandable.components[] == orig(this.integrator.expandable.components[])
this.integrator.expandable.components.getClass().getName() == orig(this.integrator.expandable.components.getClass().getName())
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.interpolatedPrimaryState == orig(this.interpolatedPrimaryState)
this.interpolatedPrimaryState[] == orig(this.interpolatedPrimaryState[])
this.interpolatedPrimaryDerivatives == orig(this.interpolatedPrimaryDerivatives)
this.interpolatedPrimaryDerivatives[] == orig(this.interpolatedPrimaryDerivatives[])
this.interpolatedSecondaryState == orig(this.interpolatedSecondaryState)
this.interpolatedSecondaryState.getClass().getName() == orig(this.interpolatedSecondaryState.getClass().getName())
this.interpolatedSecondaryState[] == orig(this.interpolatedSecondaryState[])
this.interpolatedSecondaryDerivatives == orig(this.interpolatedSecondaryDerivatives)
this.interpolatedSecondaryDerivatives.getClass().getName() == orig(this.interpolatedSecondaryDerivatives.getClass().getName())
this.interpolatedSecondaryDerivatives[] == orig(this.interpolatedSecondaryDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.secondaryMappers == orig(this.secondaryMappers)
this.secondaryMappers.getClass().getName() == orig(this.secondaryMappers.getClass().getName())
this.secondaryMappers[] == orig(this.secondaryMappers[])
this.secondaryMappers[].firstIndex == orig(this.secondaryMappers[].firstIndex)
this.secondaryMappers[].dimension == orig(this.secondaryMappers[].dimension)
this.previousState[] sorted by >
this.yDotK[] contains no nulls and has only one value, of length 1
this.yDotK[] elements has only one value
this.integrator.stepHandlers has only one value
this.integrator.stepSize == 0.004
this.integrator.resetOccurred == false
this.integrator.eventsStates has only one value
this.integrator.statesInitialized == true
this.integrator.evaluations has only one value
this.integrator.evaluations.maxCountCallback has only one value
this.integrator.expandable has only one value
this.integrator.expandable.primary has only one value
this.integrator.expandable.primary.getClass().getName() == org.apache.commons.math3.ode.TestProblem1.class
this.integrator.expandable.primaryMapper has only one value
this.integrator.expandable.primaryState has only one value
this.integrator.expandable.primaryState[] sorted by >
this.integrator.expandable.primaryStateDot has only one value
this.integrator.expandable.primaryStateDot[] sorted by <
this.integrator.expandable.components has only one value
this.h one of { 0.004, Double.NaN }
this.h <= 0.0040000000000000036
this.currentState[] sorted by >
this.interpolatedState[] sorted by >
this.interpolatedDerivatives[] sorted by <
this.interpolatedPrimaryState[] sorted by >
this.interpolatedPrimaryDerivatives[] == [0.0, 0.0]
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.finalized == true
this.forward == true
this.primaryMapper.dimension == 2
return.getClass().getName() == org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator.class
size(this.previousState[]) == 2
size(this.integrator.expandable.primaryState[]) == 2
size(this.integrator.expandable.primaryStateDot[]) == 2
size(this.currentState[]) == 2
size(this.interpolatedState[]) == 2
size(this.interpolatedDerivatives[]) == 2
size(this.interpolatedPrimaryState[]) == 2
size(this.interpolatedPrimaryDerivatives[]) == 2
===========================================================================
org.apache.commons.math3.ode.nonstiff.EulerStepInterpolatorTest:::OBJECT
===========================================================================
org.apache.commons.math3.ode.nonstiff.EulerStepInterpolatorTest.EulerStepInterpolatorTest():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.EulerStepInterpolatorTest.derivativesConsistency():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.EulerStepInterpolatorTest.derivativesConsistency():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.EulerStepInterpolatorTest.serialization():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.EulerStepInterpolatorTest.serialization():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.GillIntegrator:::CLASS
org.apache.commons.math3.ode.nonstiff.GillIntegrator.STATIC_C has only one value
org.apache.commons.math3.ode.nonstiff.GillIntegrator.STATIC_C[] == [0.5, 0.5, 1.0]
org.apache.commons.math3.ode.nonstiff.GillIntegrator.STATIC_C[] elements one of { 0.5, 1.0 }
org.apache.commons.math3.ode.nonstiff.GillIntegrator.STATIC_C[] sorted by <=
org.apache.commons.math3.ode.nonstiff.GillIntegrator.STATIC_A has only one value
org.apache.commons.math3.ode.nonstiff.GillIntegrator.STATIC_A.getClass().getName() == double[][].class
org.apache.commons.math3.ode.nonstiff.GillIntegrator.STATIC_A[] contains no nulls and has only one value, of length 3
org.apache.commons.math3.ode.nonstiff.GillIntegrator.STATIC_A[] elements != null
org.apache.commons.math3.ode.nonstiff.GillIntegrator.STATIC_B has only one value
org.apache.commons.math3.ode.nonstiff.GillIntegrator.STATIC_B[] == [0.16666666666666666, 0.09763107293781748, 0.5690355937288492, 0.16666666666666666]
org.apache.commons.math3.ode.nonstiff.GillIntegrator.STATIC_B[] elements one of { 0.09763107293781748, 0.16666666666666666, 0.5690355937288492 }
size(org.apache.commons.math3.ode.nonstiff.GillIntegrator.STATIC_C[]) == 3
size(org.apache.commons.math3.ode.nonstiff.GillIntegrator.STATIC_A[]) == 3
size(org.apache.commons.math3.ode.nonstiff.GillIntegrator.STATIC_B[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.GillIntegrator:::OBJECT
this.c has only one value
this.c[] == [0.5, 0.5, 1.0]
this.c[] elements one of { 0.5, 1.0 }
this.c[] sorted by <=
this.a has only one value
this.a.getClass().getName() == double[][].class
this.a[] contains no nulls and has only one value, of length 3
this.a[] elements != null
this.b has only one value
this.b[] == [0.16666666666666666, 0.09763107293781748, 0.5690355937288492, 0.16666666666666666]
this.b[] elements one of { 0.09763107293781748, 0.16666666666666666, 0.5690355937288492 }
this.prototype.getClass().getName() == org.apache.commons.math3.ode.nonstiff.GillStepInterpolator.class
this.prototype.previousState == null
this.prototype.yDotK == null
this.prototype.integrator == null
this.prototype.h == Double.NaN
this.prototype.currentState == null
this.prototype.interpolatedTime == Double.NaN
this.prototype.interpolatedState == null
this.prototype.interpolatedDerivatives == null
this.prototype.interpolatedPrimaryState == null
this.prototype.interpolatedPrimaryDerivatives == null
this.prototype.interpolatedSecondaryState == null
this.prototype.interpolatedSecondaryDerivatives == null
this.prototype.globalPreviousTime == Double.NaN
this.prototype.globalCurrentTime == Double.NaN
this.prototype.softPreviousTime == Double.NaN
this.prototype.softCurrentTime == Double.NaN
this.prototype.finalized == false
this.prototype.forward == true
this.prototype.dirtyState == true
this.prototype.primaryMapper == null
this.prototype.secondaryMappers == null
this.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.isLastStep == false
this.resetOccurred == false
this.eventsStates.getClass().getName() == java.util.ArrayList.class
this.statesInitialized == false
this.name has only one value
this.name.toString == "Gill"
this.evaluations.maximalCount == 2147483647
this.evaluations.count == 0
this.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
this.expandable == null
size(this.c[]) == 3
size(this.a[]) == 3
size(this.b[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.GillIntegrator.GillIntegrator(double):::ENTER
===========================================================================
org.apache.commons.math3.ode.nonstiff.GillIntegrator.GillIntegrator(double):::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.GillIntegratorTest$1:::OBJECT
this has only one value
org.apache.commons.math3.ode.nonstiff.GillIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.GillIntegratorTest$1.(org.apache.commons.math3.ode.nonstiff.GillIntegratorTest):::ENTER
org.apache.commons.math3.ode.nonstiff.GillIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.GillIntegratorTest$1.(org.apache.commons.math3.ode.nonstiff.GillIntegratorTest):::EXIT
org.apache.commons.math3.ode.nonstiff.GillIntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.GillIntegratorTest.this)
===========================================================================
org.apache.commons.math3.ode.nonstiff.GillIntegratorTest$1.handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean):::ENTER
interpolator has only one value
interpolator.getClass().getName() == org.apache.commons.math3.ode.nonstiff.GillStepInterpolator.class
===========================================================================
org.apache.commons.math3.ode.nonstiff.GillIntegratorTest$1.handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean):::EXIT
org.apache.commons.math3.ode.nonstiff.GillIntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.GillIntegratorTest.this)
===========================================================================
org.apache.commons.math3.ode.nonstiff.GillIntegratorTest$1.init(double, double[], double):::ENTER
t0 == 0.0
y0 has only one value
y0[] == [0.0]
y0[] elements == 0.0
t == 5.0
size(y0[]) == 1
===========================================================================
org.apache.commons.math3.ode.nonstiff.GillIntegratorTest$1.init(double, double[], double):::EXIT
org.apache.commons.math3.ode.nonstiff.GillIntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.GillIntegratorTest.this)
y0[] == orig(y0[])
y0[] == [0.0]
y0[] elements == 0.0
===========================================================================
org.apache.commons.math3.ode.nonstiff.GillIntegratorTest$2:::OBJECT
this has only one value
org.apache.commons.math3.ode.nonstiff.GillIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.GillIntegratorTest$2.(org.apache.commons.math3.ode.nonstiff.GillIntegratorTest):::ENTER
org.apache.commons.math3.ode.nonstiff.GillIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.GillIntegratorTest$2.(org.apache.commons.math3.ode.nonstiff.GillIntegratorTest):::EXIT
org.apache.commons.math3.ode.nonstiff.GillIntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.GillIntegratorTest.this)
===========================================================================
org.apache.commons.math3.ode.nonstiff.GillIntegratorTest$2.computeDerivatives(double, double[], double[]):::ENTER
y has only one value
dot has only one value
dot[] elements one of { 0.0, 1.0 }
dot[] one of { [0.0], [1.0] }
size(y[]) == 1
size(dot[]) == 1
===========================================================================
org.apache.commons.math3.ode.nonstiff.GillIntegratorTest$2.computeDerivatives(double, double[], double[]):::EXIT
org.apache.commons.math3.ode.nonstiff.GillIntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.GillIntegratorTest.this)
y[] == orig(y[])
dot[] == [1.0]
dot[] elements == 1.0
dot[] >= orig(dot[]) (elementwise)
===========================================================================
org.apache.commons.math3.ode.nonstiff.GillIntegratorTest$2.getDimension():::ENTER
===========================================================================
org.apache.commons.math3.ode.nonstiff.GillIntegratorTest$2.getDimension():::EXIT
org.apache.commons.math3.ode.nonstiff.GillIntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.GillIntegratorTest.this)
return == 1
===========================================================================
org.apache.commons.math3.ode.nonstiff.GillIntegratorTest$KeplerStepHandler:::OBJECT
this has only one value
this.pb has only one value
this.pb.e == 0.9
this.pb.y has only one value
this.pb.n == 4
this.pb.calls >= 0
this.pb.t0 == 0.0
this.pb.y0 has only one value
this.pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
this.pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
this.pb.t1 == 20.0
this.pb.errorScale has only one value
this.pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
this.pb.errorScale[] elements == 1.0
size(this.pb.y[]) == 4
size(this.pb.y0[]) == 4
size(this.pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.GillIntegratorTest$KeplerStepHandler.KeplerStepHandler(org.apache.commons.math3.ode.TestProblem3):::ENTER
pb has only one value
pb.e == 0.9
pb.y has only one value
pb.y[] == [0.0, 0.0, 0.0, 0.0]
pb.y[] elements == 0.0
pb.n == 4
pb.calls == 0
pb.t0 == 0.0
pb.y0 has only one value
pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
pb.t1 == 20.0
pb.errorScale has only one value
pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
pb.errorScale[] elements == 1.0
size(pb.y[]) == 4
size(pb.y0[]) == 4
size(pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.GillIntegratorTest$KeplerStepHandler.KeplerStepHandler(org.apache.commons.math3.ode.TestProblem3):::EXIT
pb.e == orig(pb.e)
pb.y == orig(pb.y)
pb.y[] == orig(pb.y[])
pb.n == orig(pb.n)
pb.calls == orig(pb.calls)
pb.t0 == orig(pb.t0)
pb.y0 == orig(pb.y0)
pb.y0[] == orig(pb.y0[])
pb.t1 == orig(pb.t1)
pb.errorScale == orig(pb.errorScale)
pb.errorScale[] == orig(pb.errorScale[])
this.maxError == 0.0
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
pb.e == 0.9
pb.y has only one value
pb.y[] == [0.0, 0.0, 0.0, 0.0]
pb.y[] elements == 0.0
pb.n == 4
pb.calls == 0
pb.t0 == 0.0
pb.y0 has only one value
pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
pb.t1 == 20.0
pb.errorScale has only one value
pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
pb.errorScale[] elements == 1.0
size(pb.y[]) == 4
size(pb.y0[]) == 4
size(pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.GillIntegratorTest$KeplerStepHandler.handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean):::ENTER
interpolator has only one value
interpolator.getClass().getName() == org.apache.commons.math3.ode.nonstiff.GillStepInterpolator.class
===========================================================================
org.apache.commons.math3.ode.nonstiff.GillIntegratorTest$KeplerStepHandler.handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean):::EXIT
this.pb == orig(this.pb)
this.pb.e == orig(this.pb.e)
this.pb.y == orig(this.pb.y)
this.pb.n == orig(this.pb.n)
this.pb.calls == orig(this.pb.calls)
this.pb.t0 == orig(this.pb.t0)
this.pb.y0 == orig(this.pb.y0)
this.pb.y0[] == orig(this.pb.y0[])
this.pb.t1 == orig(this.pb.t1)
this.pb.errorScale == orig(this.pb.errorScale)
this.pb.errorScale[] == orig(this.pb.errorScale[])
size(this.pb.y[]) == orig(size(this.pb.y[]))
this.pb.y[] elements != 0
this.maxError >= orig(this.maxError)
===========================================================================
org.apache.commons.math3.ode.nonstiff.GillIntegratorTest$KeplerStepHandler.init(double, double[], double):::ENTER
this.maxError == 0.0
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
t0 == 0.0
y0 has only one value
y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
t == 20.0
size(y0[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.GillIntegratorTest$KeplerStepHandler.init(double, double[], double):::EXIT
this.maxError == orig(this.maxError)
this.pb == orig(this.pb)
this.pb.e == orig(this.pb.e)
this.pb.y == orig(this.pb.y)
this.pb.y[] == orig(this.pb.y[])
this.pb.n == orig(this.pb.n)
this.pb.calls == orig(this.pb.calls)
this.pb.t0 == orig(this.pb.t0)
this.pb.y0 == orig(this.pb.y0)
this.pb.y0[] == orig(this.pb.y0[])
this.pb.t1 == orig(this.pb.t1)
this.pb.errorScale == orig(this.pb.errorScale)
this.pb.errorScale[] == orig(this.pb.errorScale[])
y0[] == orig(y0[])
this.maxError == 0.0
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.GillIntegratorTest:::OBJECT
===========================================================================
org.apache.commons.math3.ode.nonstiff.GillIntegratorTest.GillIntegratorTest():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.GillIntegratorTest.testBackward():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.GillIntegratorTest.testBackward():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.GillIntegratorTest.testBigStep():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.GillIntegratorTest.testBigStep():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.GillIntegratorTest.testDecreasingSteps():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.GillIntegratorTest.testDecreasingSteps():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.GillIntegratorTest.testKepler():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.GillIntegratorTest.testKepler():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.GillIntegratorTest.testSmallStep():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.GillIntegratorTest.testSmallStep():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.GillIntegratorTest.testStepSize():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.GillIntegratorTest.testStepSize():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.GillIntegratorTest.testUnstableDerivative():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.GillIntegratorTest.testUnstableDerivative():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.GillStepInterpolator:::CLASS
org.apache.commons.math3.ode.nonstiff.GillStepInterpolator.ONE_MINUS_INV_SQRT_2 == 0.2928932188134524
org.apache.commons.math3.ode.nonstiff.GillStepInterpolator.ONE_PLUS_INV_SQRT_2 == 1.7071067811865475
===========================================================================
org.apache.commons.math3.ode.nonstiff.GillStepInterpolator:::OBJECT
this.yDotK.getClass().getName() == double[][].class
this.yDotK[] elements != null
this.integrator.getClass().getName() == org.apache.commons.math3.ode.nonstiff.GillIntegrator.class
this.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.integrator.stepSize >= -0.125
this.integrator.eventsStates.getClass().getName() == java.util.ArrayList.class
this.integrator.name has only one value
this.integrator.name.toString == "Gill"
this.integrator.evaluations.maximalCount == 2147483647
this.integrator.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
this.integrator.expandable.time == 0.0
this.integrator.expandable.components[] == []
this.integrator.expandable.components[].getClass().getName() == []
this.integrator.expandable.components.getClass().getName() == java.util.ArrayList.class
this.h >= -0.125
this.interpolatedSecondaryState.getClass().getName() == double[][].class
this.interpolatedSecondaryState[] == []
this.interpolatedSecondaryDerivatives.getClass().getName() == double[][].class
this.interpolatedSecondaryDerivatives[] == []
this.primaryMapper.firstIndex == 0
this.primaryMapper.dimension one of { 1, 2, 4 }
this.secondaryMappers.getClass().getName() == org.apache.commons.math3.ode.EquationsMapper[].class
this.secondaryMappers[] == []
this.secondaryMappers[].getClass().getName() == []
this.secondaryMappers[].firstIndex == []
this.secondaryMappers[].dimension == []
size(this.previousState[]) one of { 1, 2, 4 }
size(this.yDotK[]) == 4
size(this.integrator.expandable.primaryState[]) one of { 1, 2, 4 }
size(this.integrator.expandable.primaryStateDot[]) one of { 1, 2, 4 }
size(this.currentState[]) one of { 1, 2, 4 }
size(this.interpolatedState[]) one of { 1, 2, 4 }
size(this.interpolatedDerivatives[]) one of { 1, 2, 4 }
size(this.interpolatedPrimaryState[]) one of { 1, 2, 4 }
size(this.interpolatedPrimaryDerivatives[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.GillStepInterpolator.GillStepInterpolator():::EXIT
this.previousState == null
this.yDotK == null
this.integrator == null
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.interpolatedPrimaryState == null
this.interpolatedPrimaryDerivatives == null
this.interpolatedSecondaryState == null
this.interpolatedSecondaryDerivatives == null
this.globalPreviousTime == Double.NaN
this.globalCurrentTime == Double.NaN
this.softPreviousTime == Double.NaN
this.softCurrentTime == Double.NaN
this.finalized == false
this.forward == true
this.dirtyState == true
this.primaryMapper == null
this.secondaryMappers == null
===========================================================================
org.apache.commons.math3.ode.nonstiff.GillStepInterpolator.GillStepInterpolator(org.apache.commons.math3.ode.nonstiff.GillStepInterpolator):::ENTER
org.apache.commons.math3.ode.nonstiff.GillStepInterpolator.ONE_MINUS_INV_SQRT_2 == 0.2928932188134524
org.apache.commons.math3.ode.nonstiff.GillStepInterpolator.ONE_PLUS_INV_SQRT_2 == 1.7071067811865475
interpolator.yDotK.getClass().getName() == double[][].class
interpolator.yDotK[] contains no nulls and has only one value, of length 4
interpolator.yDotK[] elements != null
interpolator.integrator.getClass().getName() == org.apache.commons.math3.ode.nonstiff.GillIntegrator.class
interpolator.integrator.stepHandlers has only one value
interpolator.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.stepSize one of { 0.0019999999994659845, 0.005999999999999999 }
interpolator.integrator.resetOccurred == false
interpolator.integrator.eventsStates has only one value
interpolator.integrator.eventsStates.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.statesInitialized == true
interpolator.integrator.name has only one value
interpolator.integrator.name.toString == "Gill"
interpolator.integrator.evaluations has only one value
interpolator.integrator.expandable has only one value
interpolator.h one of { 0.0019999999994659845, 0.005999999999999999, Double.NaN }
interpolator.h <= 0.006000000000000227
interpolator.currentState[] elements != 0
interpolator.interpolatedState[] elements != 0
interpolator.interpolatedDerivatives[] elements != 0
interpolator.interpolatedPrimaryState[] elements != 0
interpolator.interpolatedPrimaryDerivatives[] == [0.0, 0.0, 0.0, 0.0]
interpolator.interpolatedPrimaryDerivatives[] elements == 0.0
interpolator.interpolatedSecondaryState.getClass().getName() == double[][].class
interpolator.interpolatedSecondaryState[] == []
interpolator.interpolatedSecondaryDerivatives.getClass().getName() == double[][].class
interpolator.interpolatedSecondaryDerivatives[] == []
interpolator.finalized == true
interpolator.forward == true
interpolator.primaryMapper.firstIndex == 0
interpolator.primaryMapper.dimension == 4
interpolator.secondaryMappers.getClass().getName() == org.apache.commons.math3.ode.EquationsMapper[].class
interpolator.secondaryMappers[] == []
interpolator.secondaryMappers[].getClass().getName() == []
interpolator.secondaryMappers[].firstIndex == []
interpolator.secondaryMappers[].dimension == []
size(interpolator.previousState[]) == 4
size(interpolator.yDotK[]) == 4
size(interpolator.currentState[]) == 4
size(interpolator.interpolatedState[]) == 4
size(interpolator.interpolatedDerivatives[]) == 4
size(interpolator.interpolatedPrimaryState[]) == 4
size(interpolator.interpolatedPrimaryDerivatives[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.GillStepInterpolator.GillStepInterpolator(org.apache.commons.math3.ode.nonstiff.GillStepInterpolator):::EXIT
org.apache.commons.math3.ode.nonstiff.GillStepInterpolator.ONE_MINUS_INV_SQRT_2 == orig(org.apache.commons.math3.ode.nonstiff.GillStepInterpolator.ONE_MINUS_INV_SQRT_2)
org.apache.commons.math3.ode.nonstiff.GillStepInterpolator.ONE_PLUS_INV_SQRT_2 == orig(org.apache.commons.math3.ode.nonstiff.GillStepInterpolator.ONE_PLUS_INV_SQRT_2)
interpolator.previousState == orig(interpolator.previousState)
interpolator.previousState[] == orig(interpolator.previousState[])
interpolator.yDotK == orig(interpolator.yDotK)
interpolator.yDotK.getClass().getName() == orig(interpolator.yDotK.getClass().getName())
interpolator.yDotK[] == orig(interpolator.yDotK[])
interpolator.integrator == orig(interpolator.integrator)
interpolator.integrator.getClass().getName() == orig(interpolator.integrator.getClass().getName())
interpolator.integrator.stepHandlers == orig(interpolator.integrator.stepHandlers)
interpolator.integrator.stepHandlers.getClass().getName() == orig(interpolator.integrator.stepHandlers.getClass().getName())
interpolator.integrator.stepStart == orig(interpolator.integrator.stepStart)
interpolator.integrator.stepSize == orig(interpolator.integrator.stepSize)
interpolator.integrator.isLastStep == orig(interpolator.integrator.isLastStep)
interpolator.integrator.resetOccurred == orig(interpolator.integrator.resetOccurred)
interpolator.integrator.eventsStates == orig(interpolator.integrator.eventsStates)
interpolator.integrator.eventsStates.getClass().getName() == orig(interpolator.integrator.eventsStates.getClass().getName())
interpolator.integrator.statesInitialized == orig(interpolator.integrator.statesInitialized)
interpolator.integrator.name == orig(interpolator.integrator.name)
interpolator.integrator.name.toString == orig(interpolator.integrator.name.toString)
interpolator.integrator.evaluations == orig(interpolator.integrator.evaluations)
interpolator.integrator.expandable == orig(interpolator.integrator.expandable)
interpolator.currentState == orig(interpolator.currentState)
interpolator.currentState[] == orig(interpolator.currentState[])
interpolator.interpolatedState == orig(interpolator.interpolatedState)
interpolator.interpolatedState[] == orig(interpolator.interpolatedState[])
interpolator.interpolatedDerivatives == orig(interpolator.interpolatedDerivatives)
interpolator.interpolatedDerivatives[] == orig(interpolator.interpolatedDerivatives[])
interpolator.interpolatedPrimaryState == orig(interpolator.interpolatedPrimaryState)
interpolator.interpolatedPrimaryState[] == orig(interpolator.interpolatedPrimaryState[])
interpolator.interpolatedPrimaryDerivatives == orig(interpolator.interpolatedPrimaryDerivatives)
interpolator.interpolatedPrimaryDerivatives[] == orig(interpolator.interpolatedPrimaryDerivatives[])
interpolator.interpolatedSecondaryState == orig(interpolator.interpolatedSecondaryState)
interpolator.interpolatedSecondaryState.getClass().getName() == orig(interpolator.interpolatedSecondaryState.getClass().getName())
interpolator.interpolatedSecondaryState[] == orig(interpolator.interpolatedSecondaryState[])
interpolator.interpolatedSecondaryDerivatives == orig(interpolator.interpolatedSecondaryDerivatives)
interpolator.interpolatedSecondaryDerivatives.getClass().getName() == orig(interpolator.interpolatedSecondaryDerivatives.getClass().getName())
interpolator.interpolatedSecondaryDerivatives[] == orig(interpolator.interpolatedSecondaryDerivatives[])
interpolator.finalized == orig(interpolator.finalized)
interpolator.forward == orig(interpolator.forward)
interpolator.dirtyState == orig(interpolator.dirtyState)
interpolator.primaryMapper == orig(interpolator.primaryMapper)
interpolator.primaryMapper.firstIndex == orig(interpolator.primaryMapper.firstIndex)
interpolator.primaryMapper.dimension == orig(interpolator.primaryMapper.dimension)
interpolator.secondaryMappers == orig(interpolator.secondaryMappers)
interpolator.secondaryMappers.getClass().getName() == orig(interpolator.secondaryMappers.getClass().getName())
interpolator.secondaryMappers[] == orig(interpolator.secondaryMappers[])
interpolator.secondaryMappers[].firstIndex == orig(interpolator.secondaryMappers[].firstIndex)
interpolator.secondaryMappers[].dimension == orig(interpolator.secondaryMappers[].dimension)
this.integrator == null
this.h one of { 0.0019999999994659845, 0.005999999999999999, Double.NaN }
this.h <= 0.006000000000000227
this.currentState[] elements != 0
this.interpolatedState[] elements != 0
this.interpolatedDerivatives[] elements != 0
this.interpolatedPrimaryState[] elements != 0
this.interpolatedPrimaryDerivatives[] == [0.0, 0.0, 0.0, 0.0]
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.finalized == true
this.forward == true
this.primaryMapper.dimension == 4
interpolator.yDotK.getClass().getName() == double[][].class
interpolator.yDotK[] contains no nulls and has only one value, of length 4
interpolator.yDotK[] elements != null
interpolator.integrator.getClass().getName() == org.apache.commons.math3.ode.nonstiff.GillIntegrator.class
interpolator.integrator.stepHandlers has only one value
interpolator.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.stepSize one of { 0.0019999999994659845, 0.005999999999999999 }
interpolator.integrator.resetOccurred == false
interpolator.integrator.eventsStates has only one value
interpolator.integrator.eventsStates.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.statesInitialized == true
interpolator.integrator.name has only one value
interpolator.integrator.name.toString == "Gill"
interpolator.integrator.evaluations has only one value
interpolator.integrator.expandable has only one value
interpolator.h one of { 0.0019999999994659845, 0.005999999999999999, Double.NaN }
interpolator.h <= 0.006000000000000227
interpolator.currentState[] elements != 0
interpolator.interpolatedState[] elements != 0
interpolator.interpolatedDerivatives[] elements != 0
interpolator.interpolatedPrimaryState[] elements != 0
interpolator.interpolatedPrimaryDerivatives[] == [0.0, 0.0, 0.0, 0.0]
interpolator.interpolatedPrimaryDerivatives[] elements == 0.0
interpolator.interpolatedSecondaryState.getClass().getName() == double[][].class
interpolator.interpolatedSecondaryState[] == []
interpolator.interpolatedSecondaryDerivatives.getClass().getName() == double[][].class
interpolator.interpolatedSecondaryDerivatives[] == []
interpolator.finalized == true
interpolator.forward == true
interpolator.primaryMapper.firstIndex == 0
interpolator.primaryMapper.dimension == 4
interpolator.secondaryMappers.getClass().getName() == org.apache.commons.math3.ode.EquationsMapper[].class
interpolator.secondaryMappers[] == []
interpolator.secondaryMappers[].getClass().getName() == []
interpolator.secondaryMappers[].firstIndex == []
interpolator.secondaryMappers[].dimension == []
size(this.previousState[]) == 4
size(this.currentState[]) == 4
size(this.interpolatedState[]) == 4
size(this.interpolatedDerivatives[]) == 4
size(this.interpolatedPrimaryState[]) == 4
size(this.interpolatedPrimaryDerivatives[]) == 4
size(interpolator.previousState[]) == 4
size(interpolator.yDotK[]) == 4
size(interpolator.currentState[]) == 4
size(interpolator.interpolatedState[]) == 4
size(interpolator.interpolatedDerivatives[]) == 4
size(interpolator.interpolatedPrimaryState[]) == 4
size(interpolator.interpolatedPrimaryDerivatives[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.GillStepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::ENTER
this.dirtyState == true
theta <= 1.0
theta >= 0.0
===========================================================================
org.apache.commons.math3.ode.nonstiff.GillStepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::EXIT
org.apache.commons.math3.ode.nonstiff.GillStepInterpolator.ONE_MINUS_INV_SQRT_2 == orig(org.apache.commons.math3.ode.nonstiff.GillStepInterpolator.ONE_MINUS_INV_SQRT_2)
org.apache.commons.math3.ode.nonstiff.GillStepInterpolator.ONE_PLUS_INV_SQRT_2 == orig(org.apache.commons.math3.ode.nonstiff.GillStepInterpolator.ONE_PLUS_INV_SQRT_2)
this.previousState == orig(this.previousState)
this.previousState[] == orig(this.previousState[])
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.integrator.stepHandlers == orig(this.integrator.stepHandlers)
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.stepHandlers.getClass().getName())
this.integrator.stepStart == orig(this.integrator.stepStart)
this.integrator.stepSize == orig(this.integrator.stepSize)
this.integrator.isLastStep == orig(this.integrator.isLastStep)
this.integrator.resetOccurred == orig(this.integrator.resetOccurred)
this.integrator.eventsStates == orig(this.integrator.eventsStates)
this.integrator.eventsStates.getClass().getName() == orig(this.integrator.eventsStates.getClass().getName())
this.integrator.statesInitialized == orig(this.integrator.statesInitialized)
this.integrator.name == orig(this.integrator.name)
this.integrator.name.toString == orig(this.integrator.name.toString)
this.integrator.evaluations == orig(this.integrator.evaluations)
this.integrator.evaluations.maximalCount == orig(this.integrator.evaluations.maximalCount)
this.integrator.evaluations.count == orig(this.integrator.evaluations.count)
this.integrator.evaluations.maxCountCallback == orig(this.integrator.evaluations.maxCountCallback)
this.integrator.evaluations.maxCountCallback.getClass().getName() == orig(this.integrator.evaluations.maxCountCallback.getClass().getName())
this.integrator.expandable == orig(this.integrator.expandable)
this.integrator.expandable.primary == orig(this.integrator.expandable.primary)
this.integrator.expandable.primary.getClass().getName() == orig(this.integrator.expandable.primary.getClass().getName())
this.integrator.expandable.primaryMapper == orig(this.integrator.expandable.primaryMapper)
this.integrator.expandable.time == orig(this.integrator.expandable.time)
this.integrator.expandable.primaryState == orig(this.integrator.expandable.primaryState)
this.integrator.expandable.primaryState[] == orig(this.integrator.expandable.primaryState[])
this.integrator.expandable.primaryStateDot == orig(this.integrator.expandable.primaryStateDot)
this.integrator.expandable.primaryStateDot[] == orig(this.integrator.expandable.primaryStateDot[])
this.integrator.expandable.components == orig(this.integrator.expandable.components)
this.integrator.expandable.components[] == orig(this.integrator.expandable.components[])
this.integrator.expandable.components.getClass().getName() == orig(this.integrator.expandable.components.getClass().getName())
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedPrimaryState == orig(this.interpolatedPrimaryState)
this.interpolatedPrimaryState[] == orig(this.interpolatedPrimaryState[])
this.interpolatedPrimaryDerivatives == orig(this.interpolatedPrimaryDerivatives)
this.interpolatedPrimaryDerivatives[] == orig(this.interpolatedPrimaryDerivatives[])
this.interpolatedSecondaryState == orig(this.interpolatedSecondaryState)
this.interpolatedSecondaryState.getClass().getName() == orig(this.interpolatedSecondaryState.getClass().getName())
this.interpolatedSecondaryState[] == orig(this.interpolatedSecondaryState[])
this.interpolatedSecondaryDerivatives == orig(this.interpolatedSecondaryDerivatives)
this.interpolatedSecondaryDerivatives.getClass().getName() == orig(this.interpolatedSecondaryDerivatives.getClass().getName())
this.interpolatedSecondaryDerivatives[] == orig(this.interpolatedSecondaryDerivatives[])
this.globalPreviousTime == orig(this.globalPreviousTime)
this.globalCurrentTime == orig(this.globalCurrentTime)
this.softPreviousTime == orig(this.softPreviousTime)
this.softCurrentTime == orig(this.softCurrentTime)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.secondaryMappers == orig(this.secondaryMappers)
this.secondaryMappers.getClass().getName() == orig(this.secondaryMappers.getClass().getName())
this.secondaryMappers[] == orig(this.secondaryMappers[])
this.secondaryMappers[].firstIndex == orig(this.secondaryMappers[].firstIndex)
this.secondaryMappers[].dimension == orig(this.secondaryMappers[].dimension)
size(this.interpolatedState[]) == orig(size(this.interpolatedState[]))
size(this.interpolatedDerivatives[]) == orig(size(this.interpolatedDerivatives[]))
this.dirtyState == true
===========================================================================
org.apache.commons.math3.ode.nonstiff.GillStepInterpolator.doCopy():::ENTER
this.yDotK[] contains no nulls and has only one value, of length 4
this.integrator.stepHandlers has only one value
this.integrator.stepSize one of { 0.0019999999994659845, 0.005999999999999999 }
this.integrator.resetOccurred == false
this.integrator.eventsStates has only one value
this.integrator.statesInitialized == true
this.integrator.evaluations has only one value
this.integrator.evaluations.maxCountCallback has only one value
this.integrator.expandable has only one value
this.integrator.expandable.primary has only one value
this.integrator.expandable.primary.getClass().getName() == org.apache.commons.math3.ode.TestProblem3.class
this.integrator.expandable.primaryMapper has only one value
this.integrator.expandable.primaryState has only one value
this.integrator.expandable.primaryState[] elements != 0
this.integrator.expandable.primaryStateDot has only one value
this.integrator.expandable.primaryStateDot[] elements != 0
this.integrator.expandable.components has only one value
this.h one of { 0.0019999999994659845, 0.005999999999999999, Double.NaN }
this.h <= 0.006000000000000227
this.currentState[] elements != 0
this.interpolatedState[] elements != 0
this.interpolatedDerivatives[] elements != 0
this.interpolatedPrimaryState[] elements != 0
this.interpolatedPrimaryDerivatives[] == [0.0, 0.0, 0.0, 0.0]
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.finalized == true
this.forward == true
this.primaryMapper.dimension == 4
size(this.previousState[]) == 4
size(this.integrator.expandable.primaryState[]) == 4
size(this.integrator.expandable.primaryStateDot[]) == 4
size(this.currentState[]) == 4
size(this.interpolatedState[]) == 4
size(this.interpolatedDerivatives[]) == 4
size(this.interpolatedPrimaryState[]) == 4
size(this.interpolatedPrimaryDerivatives[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.GillStepInterpolator.doCopy():::EXIT
org.apache.commons.math3.ode.nonstiff.GillStepInterpolator.ONE_MINUS_INV_SQRT_2 == orig(org.apache.commons.math3.ode.nonstiff.GillStepInterpolator.ONE_MINUS_INV_SQRT_2)
org.apache.commons.math3.ode.nonstiff.GillStepInterpolator.ONE_PLUS_INV_SQRT_2 == orig(org.apache.commons.math3.ode.nonstiff.GillStepInterpolator.ONE_PLUS_INV_SQRT_2)
this.previousState == orig(this.previousState)
this.previousState[] == orig(this.previousState[])
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.integrator.stepHandlers == orig(this.integrator.stepHandlers)
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.stepHandlers.getClass().getName())
this.integrator.stepStart == orig(this.integrator.stepStart)
this.integrator.stepSize == orig(this.integrator.stepSize)
this.integrator.isLastStep == orig(this.integrator.isLastStep)
this.integrator.resetOccurred == orig(this.integrator.resetOccurred)
this.integrator.eventsStates == orig(this.integrator.eventsStates)
this.integrator.eventsStates.getClass().getName() == orig(this.integrator.eventsStates.getClass().getName())
this.integrator.statesInitialized == orig(this.integrator.statesInitialized)
this.integrator.name == orig(this.integrator.name)
this.integrator.name.toString == orig(this.integrator.name.toString)
this.integrator.evaluations == orig(this.integrator.evaluations)
this.integrator.evaluations.maximalCount == orig(this.integrator.evaluations.maximalCount)
this.integrator.evaluations.count == orig(this.integrator.evaluations.count)
this.integrator.evaluations.maxCountCallback == orig(this.integrator.evaluations.maxCountCallback)
this.integrator.evaluations.maxCountCallback.getClass().getName() == orig(this.integrator.evaluations.maxCountCallback.getClass().getName())
this.integrator.expandable == orig(this.integrator.expandable)
this.integrator.expandable.primary == orig(this.integrator.expandable.primary)
this.integrator.expandable.primary.getClass().getName() == orig(this.integrator.expandable.primary.getClass().getName())
this.integrator.expandable.primaryMapper == orig(this.integrator.expandable.primaryMapper)
this.integrator.expandable.time == orig(this.integrator.expandable.time)
this.integrator.expandable.primaryState == orig(this.integrator.expandable.primaryState)
this.integrator.expandable.primaryState[] == orig(this.integrator.expandable.primaryState[])
this.integrator.expandable.primaryStateDot == orig(this.integrator.expandable.primaryStateDot)
this.integrator.expandable.primaryStateDot[] == orig(this.integrator.expandable.primaryStateDot[])
this.integrator.expandable.components == orig(this.integrator.expandable.components)
this.integrator.expandable.components[] == orig(this.integrator.expandable.components[])
this.integrator.expandable.components.getClass().getName() == orig(this.integrator.expandable.components.getClass().getName())
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.interpolatedPrimaryState == orig(this.interpolatedPrimaryState)
this.interpolatedPrimaryState[] == orig(this.interpolatedPrimaryState[])
this.interpolatedPrimaryDerivatives == orig(this.interpolatedPrimaryDerivatives)
this.interpolatedPrimaryDerivatives[] == orig(this.interpolatedPrimaryDerivatives[])
this.interpolatedSecondaryState == orig(this.interpolatedSecondaryState)
this.interpolatedSecondaryState.getClass().getName() == orig(this.interpolatedSecondaryState.getClass().getName())
this.interpolatedSecondaryState[] == orig(this.interpolatedSecondaryState[])
this.interpolatedSecondaryDerivatives == orig(this.interpolatedSecondaryDerivatives)
this.interpolatedSecondaryDerivatives.getClass().getName() == orig(this.interpolatedSecondaryDerivatives.getClass().getName())
this.interpolatedSecondaryDerivatives[] == orig(this.interpolatedSecondaryDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.secondaryMappers == orig(this.secondaryMappers)
this.secondaryMappers.getClass().getName() == orig(this.secondaryMappers.getClass().getName())
this.secondaryMappers[] == orig(this.secondaryMappers[])
this.secondaryMappers[].firstIndex == orig(this.secondaryMappers[].firstIndex)
this.secondaryMappers[].dimension == orig(this.secondaryMappers[].dimension)
this.yDotK[] contains no nulls and has only one value, of length 4
this.integrator.stepHandlers has only one value
this.integrator.stepSize one of { 0.0019999999994659845, 0.005999999999999999 }
this.integrator.resetOccurred == false
this.integrator.eventsStates has only one value
this.integrator.statesInitialized == true
this.integrator.evaluations has only one value
this.integrator.evaluations.maxCountCallback has only one value
this.integrator.expandable has only one value
this.integrator.expandable.primary has only one value
this.integrator.expandable.primary.getClass().getName() == org.apache.commons.math3.ode.TestProblem3.class
this.integrator.expandable.primaryMapper has only one value
this.integrator.expandable.primaryState has only one value
this.integrator.expandable.primaryState[] elements != 0
this.integrator.expandable.primaryStateDot has only one value
this.integrator.expandable.primaryStateDot[] elements != 0
this.integrator.expandable.components has only one value
this.h one of { 0.0019999999994659845, 0.005999999999999999, Double.NaN }
this.h <= 0.006000000000000227
this.currentState[] elements != 0
this.interpolatedState[] elements != 0
this.interpolatedDerivatives[] elements != 0
this.interpolatedPrimaryState[] elements != 0
this.interpolatedPrimaryDerivatives[] == [0.0, 0.0, 0.0, 0.0]
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.finalized == true
this.forward == true
this.primaryMapper.dimension == 4
return.getClass().getName() == org.apache.commons.math3.ode.nonstiff.GillStepInterpolator.class
size(this.previousState[]) == 4
size(this.integrator.expandable.primaryState[]) == 4
size(this.integrator.expandable.primaryStateDot[]) == 4
size(this.currentState[]) == 4
size(this.interpolatedState[]) == 4
size(this.interpolatedDerivatives[]) == 4
size(this.interpolatedPrimaryState[]) == 4
size(this.interpolatedPrimaryDerivatives[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.GillStepInterpolatorTest:::OBJECT
===========================================================================
org.apache.commons.math3.ode.nonstiff.GillStepInterpolatorTest.GillStepInterpolatorTest():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.GillStepInterpolatorTest.serialization():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.GillStepInterpolatorTest.serialization():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.GillStepInterpolatorTest.testDerivativesConsistency():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.GillStepInterpolatorTest.testDerivativesConsistency():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator:::CLASS
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME has only one value
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME.toString == "Gragg-Bulirsch-Stoer"
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator:::OBJECT
this.maxOrder one of { 0, 18 }
this.sequence[] == [2, 6, 10, 14, 18, 22, 26, 30, 34]
this.sequence[] elements >= 2
this.sequence[] sorted by <
this.costPerStep[] == [3, 9, 19, 33, 51, 73, 99, 129, 163]
this.costPerStep[] sorted by <
this.costPerTimeUnit[] elements >= 0.0
this.optimalStep[] elements >= 0.0
this.coeff.getClass().getName() == double[][].class
this.maxChecks one of { 0, 1 }
this.maxIter one of { 0, 2 }
this.stabilityReduction one of { 0.0, 0.5, 0.99 }
this.stepControl1 one of { 0.0, 0.5, 0.65 }
this.stepControl2 one of { 0.0, 0.94, 0.99 }
this.stepControl3 one of { 0.0, 0.02, 0.1 }
this.stepControl4 one of { 0.0, 2.5, 4.0 }
this.orderControl1 one of { 0.0, 0.7, 0.8 }
this.orderControl2 one of { 0.0, 0.9, 0.95 }
this.mudif one of { 0, 3, 4 }
this.vecAbsoluteTolerance == null
this.vecRelativeTolerance == null
this.mainSetDimension >= 0
this.initialStep == -1.0
this.minStep one of { 0.0, 1.0E-8, 0.1 }
this.maxStep >= 1.0
this.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.eventsStates.getClass().getName() == java.util.ArrayList.class
this.name has only one value
this.name.toString == "Gragg-Bulirsch-Stoer"
this.evaluations.maximalCount == 2147483647
this.evaluations.count >= 0
this.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
this.expandable.primaryMapper.firstIndex == 0
this.expandable.primaryMapper.dimension >= 1
this.expandable.time >= 0.0
this.expandable.components[] == []
this.expandable.components[].getClass().getName() == []
this.expandable.components.getClass().getName() == java.util.ArrayList.class
size(this.sequence[]) == 9
size(this.costPerStep[]) == 9
size(this.costPerTimeUnit[]) == 9
size(this.optimalStep[]) == 9
size(this.coeff[]) == 9
size(this.expandable.primaryState[]) >= 1
size(this.expandable.primaryStateDot[]) >= 1
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.GraggBulirschStoerIntegrator(double, double, double, double):::ENTER
minStep one of { 0.0, 1.0E-8, 0.1 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.GraggBulirschStoerIntegrator(double, double, double, double):::EXIT
this.maxOrder == 18
this.costPerTimeUnit[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.costPerTimeUnit[] elements == 0.0
this.optimalStep[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.optimalStep[] elements == 0.0
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction == 0.5
this.stepControl1 == 0.65
this.stepControl2 == 0.94
this.stepControl3 == 0.02
this.stepControl4 == 4.0
this.orderControl1 == 0.8
this.orderControl2 == 0.9
this.useInterpolationError == true
this.mudif == 4
this.mainSetDimension == 0
this.stepStart == Double.NaN
this.isLastStep == false
this.resetOccurred == false
this.statesInitialized == false
this.evaluations.count == 0
this.expandable == null
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.addEventHandler(org.apache.commons.math3.ode.events.EventHandler, double, double, int, org.apache.commons.math3.analysis.solvers.UnivariateSolver):::ENTER
this.maxOrder == 18
this.costPerTimeUnit[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.costPerTimeUnit[] elements == 0.0
this.optimalStep[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.optimalStep[] elements == 0.0
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction == 0.5
this.stepControl1 == 0.65
this.stepControl2 == 0.94
this.stepControl3 == 0.02
this.stepControl4 == 4.0
this.orderControl1 == 0.8
this.orderControl2 == 0.9
this.useInterpolationError == true
this.mudif == 4
this.scalAbsoluteTolerance one of { 1.0E-12, 1.0E-10, 1.0E-7 }
this.scalRelativeTolerance one of { 1.0E-12, 1.0E-7 }
this.mainSetDimension == 0
this.minStep one of { 0.0, 0.1 }
this.maxStep one of { 10.0, 15.0, 100.0 }
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 3.162277660168379E-7, 1.0 }
this.isLastStep == false
this.resetOccurred == false
this.statesInitialized == false
this.evaluations.count == 0
this.expandable == null
maxCheckInterval one of { 0.1, 1.0, Infinity }
convergence one of { 1.0E-15, 1.0E-12, 1.5E-7 }
maxIterationCount == 1000
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.addEventHandler(org.apache.commons.math3.ode.events.EventHandler, double, double, int, org.apache.commons.math3.analysis.solvers.UnivariateSolver):::EXIT
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME == orig(org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME)
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME.toString == orig(org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME.toString)
this.maxOrder == orig(this.maxOrder)
this.sequence == orig(this.sequence)
this.sequence[] == orig(this.sequence[])
this.costPerStep == orig(this.costPerStep)
this.costPerStep[] == orig(this.costPerStep[])
this.costPerTimeUnit == orig(this.costPerTimeUnit)
this.costPerTimeUnit[] == orig(this.costPerTimeUnit[])
this.optimalStep == orig(this.optimalStep)
this.optimalStep[] == orig(this.optimalStep[])
this.coeff == orig(this.coeff)
this.coeff.getClass().getName() == orig(this.coeff.getClass().getName())
this.performTest == orig(this.performTest)
this.maxChecks == orig(this.maxChecks)
this.maxIter == orig(this.maxIter)
this.stabilityReduction == orig(this.stabilityReduction)
this.stepControl1 == orig(this.stepControl1)
this.stepControl2 == orig(this.stepControl2)
this.stepControl3 == orig(this.stepControl3)
this.stepControl4 == orig(this.stepControl4)
this.orderControl1 == orig(this.orderControl1)
this.orderControl2 == orig(this.orderControl2)
this.useInterpolationError == orig(this.useInterpolationError)
this.mudif == orig(this.mudif)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.mainSetDimension == orig(this.mainSetDimension)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepSize == orig(this.stepSize)
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
size(this.coeff[]) == orig(size(this.coeff[]))
this.maxOrder == 18
this.costPerTimeUnit[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.costPerTimeUnit[] elements == 0.0
this.optimalStep[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.optimalStep[] elements == 0.0
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction == 0.5
this.stepControl1 == 0.65
this.stepControl2 == 0.94
this.stepControl3 == 0.02
this.stepControl4 == 4.0
this.orderControl1 == 0.8
this.orderControl2 == 0.9
this.useInterpolationError == true
this.mudif == 4
this.scalAbsoluteTolerance one of { 1.0E-12, 1.0E-10, 1.0E-7 }
this.scalRelativeTolerance one of { 1.0E-12, 1.0E-7 }
this.mainSetDimension == 0
this.minStep one of { 0.0, 0.1 }
this.maxStep one of { 10.0, 15.0, 100.0 }
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 3.162277660168379E-7, 1.0 }
this.isLastStep == false
this.resetOccurred == false
this.statesInitialized == false
this.evaluations.count == 0
this.expandable == null
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.addStepHandler(org.apache.commons.math3.ode.sampling.StepHandler):::ENTER
this.maxOrder == 18
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction one of { 0.5, 0.99 }
this.stepControl1 one of { 0.5, 0.65 }
this.stepControl2 one of { 0.94, 0.99 }
this.stepControl3 one of { 0.02, 0.1 }
this.stepControl4 one of { 2.5, 4.0 }
this.orderControl1 one of { 0.7, 0.8 }
this.orderControl2 one of { 0.9, 0.95 }
this.useInterpolationError == true
this.mudif one of { 3, 4 }
this.mainSetDimension one of { 0, 4 }
this.minStep one of { 0.0, 1.0E-8 }
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 1.0E-4 }
this.resetOccurred == false
this.expandable.primary has only one value
this.expandable.primary.getClass().getName() == org.apache.commons.math3.ode.TestProblem3.class
this.expandable.primaryMapper.dimension == 4
this.expandable.time == 20.0
size(this.expandable.primaryState[]) == 4
size(this.expandable.primaryStateDot[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.addStepHandler(org.apache.commons.math3.ode.sampling.StepHandler):::EXIT
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME == orig(org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME)
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME.toString == orig(org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME.toString)
this.maxOrder == orig(this.maxOrder)
this.sequence == orig(this.sequence)
this.sequence[] == orig(this.sequence[])
this.costPerStep == orig(this.costPerStep)
this.costPerStep[] == orig(this.costPerStep[])
this.costPerTimeUnit == orig(this.costPerTimeUnit)
this.costPerTimeUnit[] == orig(this.costPerTimeUnit[])
this.optimalStep == orig(this.optimalStep)
this.optimalStep[] == orig(this.optimalStep[])
this.coeff == orig(this.coeff)
this.coeff.getClass().getName() == orig(this.coeff.getClass().getName())
this.performTest == orig(this.performTest)
this.maxChecks == orig(this.maxChecks)
this.maxIter == orig(this.maxIter)
this.stabilityReduction == orig(this.stabilityReduction)
this.stepControl1 == orig(this.stepControl1)
this.stepControl2 == orig(this.stepControl2)
this.stepControl3 == orig(this.stepControl3)
this.stepControl4 == orig(this.stepControl4)
this.orderControl1 == orig(this.orderControl1)
this.orderControl2 == orig(this.orderControl2)
this.useInterpolationError == orig(this.useInterpolationError)
this.mudif == orig(this.mudif)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.mainSetDimension == orig(this.mainSetDimension)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepSize == orig(this.stepSize)
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
this.expandable.primary == orig(this.expandable.primary)
this.expandable.primary.getClass().getName() == orig(this.expandable.primary.getClass().getName())
this.expandable.primaryMapper == orig(this.expandable.primaryMapper)
this.expandable.primaryMapper.firstIndex == orig(this.expandable.primaryMapper.firstIndex)
this.expandable.primaryMapper.dimension == orig(this.expandable.primaryMapper.dimension)
this.expandable.time == orig(this.expandable.time)
this.expandable.primaryState == orig(this.expandable.primaryState)
this.expandable.primaryState[] == orig(this.expandable.primaryState[])
this.expandable.primaryStateDot == orig(this.expandable.primaryStateDot)
this.expandable.primaryStateDot[] == orig(this.expandable.primaryStateDot[])
this.expandable.components == orig(this.expandable.components)
this.expandable.components[] == orig(this.expandable.components[])
this.expandable.components.getClass().getName() == orig(this.expandable.components.getClass().getName())
size(this.coeff[]) == orig(size(this.coeff[]))
this.maxOrder == 18
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction one of { 0.5, 0.99 }
this.stepControl1 one of { 0.5, 0.65 }
this.stepControl2 one of { 0.94, 0.99 }
this.stepControl3 one of { 0.02, 0.1 }
this.stepControl4 one of { 2.5, 4.0 }
this.orderControl1 one of { 0.7, 0.8 }
this.orderControl2 one of { 0.9, 0.95 }
this.useInterpolationError == true
this.mudif one of { 3, 4 }
this.mainSetDimension one of { 0, 4 }
this.minStep one of { 0.0, 1.0E-8 }
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 1.0E-4 }
this.resetOccurred == false
this.expandable.primary has only one value
this.expandable.primary.getClass().getName() == org.apache.commons.math3.ode.TestProblem3.class
this.expandable.primaryMapper.dimension == 4
this.expandable.time == 20.0
size(this.expandable.primaryState[]) == 4
size(this.expandable.primaryStateDot[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.extrapolate(int, int, double[][], double[]):::ENTER
this.maxOrder == 18
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction one of { 0.5, 0.99 }
this.stepControl1 one of { 0.5, 0.65 }
this.stepControl2 one of { 0.94, 0.99 }
this.stepControl3 one of { 0.02, 0.1 }
this.stepControl4 one of { 2.5, 4.0 }
this.orderControl1 one of { 0.7, 0.8 }
this.orderControl2 one of { 0.9, 0.95 }
this.useInterpolationError == true
this.mudif one of { 3, 4 }
this.mainSetDimension >= 1
offset >= 0
k >= 1
diag.getClass().getName() == double[][].class
diag[] elements != null
size(diag[]) == 8
size(last[]) >= 1
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.extrapolate(int, int, double[][], double[]):::EXIT
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME == orig(org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME)
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME.toString == orig(org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME.toString)
this.maxOrder == orig(this.maxOrder)
this.sequence == orig(this.sequence)
this.sequence[] == orig(this.sequence[])
this.costPerStep == orig(this.costPerStep)
this.costPerStep[] == orig(this.costPerStep[])
this.costPerTimeUnit == orig(this.costPerTimeUnit)
this.costPerTimeUnit[] == orig(this.costPerTimeUnit[])
this.optimalStep == orig(this.optimalStep)
this.optimalStep[] == orig(this.optimalStep[])
this.coeff == orig(this.coeff)
this.coeff.getClass().getName() == orig(this.coeff.getClass().getName())
this.coeff[] == orig(this.coeff[])
this.performTest == orig(this.performTest)
this.maxChecks == orig(this.maxChecks)
this.maxIter == orig(this.maxIter)
this.stabilityReduction == orig(this.stabilityReduction)
this.stepControl1 == orig(this.stepControl1)
this.stepControl2 == orig(this.stepControl2)
this.stepControl3 == orig(this.stepControl3)
this.stepControl4 == orig(this.stepControl4)
this.orderControl1 == orig(this.orderControl1)
this.orderControl2 == orig(this.orderControl2)
this.useInterpolationError == orig(this.useInterpolationError)
this.mudif == orig(this.mudif)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.mainSetDimension == orig(this.mainSetDimension)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
this.expandable.primary == orig(this.expandable.primary)
this.expandable.primary.getClass().getName() == orig(this.expandable.primary.getClass().getName())
this.expandable.primaryMapper == orig(this.expandable.primaryMapper)
this.expandable.primaryMapper.firstIndex == orig(this.expandable.primaryMapper.firstIndex)
this.expandable.primaryMapper.dimension == orig(this.expandable.primaryMapper.dimension)
this.expandable.time == orig(this.expandable.time)
this.expandable.primaryState == orig(this.expandable.primaryState)
this.expandable.primaryState[] == orig(this.expandable.primaryState[])
this.expandable.primaryStateDot == orig(this.expandable.primaryStateDot)
this.expandable.primaryStateDot[] == orig(this.expandable.primaryStateDot[])
this.expandable.components == orig(this.expandable.components)
this.expandable.components[] == orig(this.expandable.components[])
this.expandable.components.getClass().getName() == orig(this.expandable.components.getClass().getName())
diag[] == orig(diag[])
this.maxOrder == 18
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction one of { 0.5, 0.99 }
this.stepControl1 one of { 0.5, 0.65 }
this.stepControl2 one of { 0.94, 0.99 }
this.stepControl3 one of { 0.02, 0.1 }
this.stepControl4 one of { 2.5, 4.0 }
this.orderControl1 one of { 0.7, 0.8 }
this.orderControl2 one of { 0.9, 0.95 }
this.useInterpolationError == true
this.mudif one of { 3, 4 }
this.mainSetDimension >= 1
diag[] elements != null
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.initializeArrays():::ENTER
this.maxOrder == 18
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction one of { 0.5, 0.99 }
this.stepControl1 one of { 0.5, 0.65 }
this.stepControl2 one of { 0.94, 0.99 }
this.stepControl3 one of { 0.02, 0.1 }
this.stepControl4 one of { 2.5, 4.0 }
this.orderControl1 one of { 0.7, 0.8 }
this.orderControl2 one of { 0.9, 0.95 }
this.mainSetDimension one of { 0, 4 }
this.stepStart == Double.NaN
this.resetOccurred == false
this.expandable.primary has only one value
this.expandable.primary.getClass().getName() == org.apache.commons.math3.ode.TestProblem3.class
this.expandable.primaryMapper.dimension == 4
this.expandable.time == 20.0
size(this.expandable.primaryState[]) == 4
size(this.expandable.primaryStateDot[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.initializeArrays():::EXIT
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME == orig(org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME)
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME.toString == orig(org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME.toString)
this.maxOrder == orig(this.maxOrder)
this.coeff.getClass().getName() == orig(this.coeff.getClass().getName())
this.performTest == orig(this.performTest)
this.maxChecks == orig(this.maxChecks)
this.maxIter == orig(this.maxIter)
this.stabilityReduction == orig(this.stabilityReduction)
this.stepControl1 == orig(this.stepControl1)
this.stepControl2 == orig(this.stepControl2)
this.stepControl3 == orig(this.stepControl3)
this.stepControl4 == orig(this.stepControl4)
this.orderControl1 == orig(this.orderControl1)
this.orderControl2 == orig(this.orderControl2)
this.useInterpolationError == orig(this.useInterpolationError)
this.mudif == orig(this.mudif)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.mainSetDimension == orig(this.mainSetDimension)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
this.expandable.primary == orig(this.expandable.primary)
this.expandable.primary.getClass().getName() == orig(this.expandable.primary.getClass().getName())
this.expandable.primaryMapper == orig(this.expandable.primaryMapper)
this.expandable.primaryMapper.firstIndex == orig(this.expandable.primaryMapper.firstIndex)
this.expandable.primaryMapper.dimension == orig(this.expandable.primaryMapper.dimension)
this.expandable.time == orig(this.expandable.time)
this.expandable.primaryState == orig(this.expandable.primaryState)
this.expandable.primaryState[] == orig(this.expandable.primaryState[])
this.expandable.primaryStateDot == orig(this.expandable.primaryStateDot)
this.expandable.primaryStateDot[] == orig(this.expandable.primaryStateDot[])
this.expandable.components == orig(this.expandable.components)
this.expandable.components[] == orig(this.expandable.components[])
this.expandable.components.getClass().getName() == orig(this.expandable.components.getClass().getName())
size(this.coeff[]) == orig(size(this.coeff[]))
this.maxOrder == 18
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction one of { 0.5, 0.99 }
this.stepControl1 one of { 0.5, 0.65 }
this.stepControl2 one of { 0.94, 0.99 }
this.stepControl3 one of { 0.02, 0.1 }
this.stepControl4 one of { 2.5, 4.0 }
this.orderControl1 one of { 0.7, 0.8 }
this.orderControl2 one of { 0.9, 0.95 }
this.mainSetDimension one of { 0, 4 }
this.stepStart == Double.NaN
this.resetOccurred == false
this.expandable.primary has only one value
this.expandable.primary.getClass().getName() == org.apache.commons.math3.ode.TestProblem3.class
this.expandable.primaryMapper.dimension == 4
this.expandable.time == 20.0
size(this.expandable.primaryState[]) == 4
size(this.expandable.primaryStateDot[]) == 4
this.sequence[] == orig(this.sequence[]) (elementwise)
this.costPerStep[] == orig(this.costPerStep[]) (elementwise)
this.costPerTimeUnit[] == orig(this.costPerTimeUnit[]) (elementwise)
this.optimalStep[] == orig(this.optimalStep[]) (elementwise)
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.rescale(double[], double[], double[]):::ENTER
this.maxOrder == 18
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction one of { 0.5, 0.99 }
this.stepControl1 one of { 0.5, 0.65 }
this.stepControl2 one of { 0.94, 0.99 }
this.stepControl3 one of { 0.02, 0.1 }
this.stepControl4 one of { 2.5, 4.0 }
this.orderControl1 one of { 0.7, 0.8 }
this.orderControl2 one of { 0.9, 0.95 }
this.useInterpolationError == true
this.mudif one of { 3, 4 }
this.mainSetDimension >= 1
size(y1[]) >= 1
size(y2[]) >= 1
size(scale[]) >= 1
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.rescale(double[], double[], double[]):::EXIT
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME == orig(org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME)
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME.toString == orig(org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME.toString)
this.maxOrder == orig(this.maxOrder)
this.sequence == orig(this.sequence)
this.sequence[] == orig(this.sequence[])
this.costPerStep == orig(this.costPerStep)
this.costPerStep[] == orig(this.costPerStep[])
this.costPerTimeUnit == orig(this.costPerTimeUnit)
this.costPerTimeUnit[] == orig(this.costPerTimeUnit[])
this.optimalStep == orig(this.optimalStep)
this.optimalStep[] == orig(this.optimalStep[])
this.coeff == orig(this.coeff)
this.coeff.getClass().getName() == orig(this.coeff.getClass().getName())
this.coeff[] == orig(this.coeff[])
this.performTest == orig(this.performTest)
this.maxChecks == orig(this.maxChecks)
this.maxIter == orig(this.maxIter)
this.stabilityReduction == orig(this.stabilityReduction)
this.stepControl1 == orig(this.stepControl1)
this.stepControl2 == orig(this.stepControl2)
this.stepControl3 == orig(this.stepControl3)
this.stepControl4 == orig(this.stepControl4)
this.orderControl1 == orig(this.orderControl1)
this.orderControl2 == orig(this.orderControl2)
this.useInterpolationError == orig(this.useInterpolationError)
this.mudif == orig(this.mudif)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.mainSetDimension == orig(this.mainSetDimension)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
this.expandable.primary == orig(this.expandable.primary)
this.expandable.primary.getClass().getName() == orig(this.expandable.primary.getClass().getName())
this.expandable.primaryMapper == orig(this.expandable.primaryMapper)
this.expandable.primaryMapper.firstIndex == orig(this.expandable.primaryMapper.firstIndex)
this.expandable.primaryMapper.dimension == orig(this.expandable.primaryMapper.dimension)
this.expandable.time == orig(this.expandable.time)
this.expandable.primaryState == orig(this.expandable.primaryState)
this.expandable.primaryState[] == orig(this.expandable.primaryState[])
this.expandable.primaryStateDot == orig(this.expandable.primaryStateDot)
this.expandable.primaryStateDot[] == orig(this.expandable.primaryStateDot[])
this.expandable.components == orig(this.expandable.components)
this.expandable.components[] == orig(this.expandable.components[])
this.expandable.components.getClass().getName() == orig(this.expandable.components.getClass().getName())
y1[] == orig(y1[])
y2[] == orig(y2[])
this.maxOrder == 18
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction one of { 0.5, 0.99 }
this.stepControl1 one of { 0.5, 0.65 }
this.stepControl2 one of { 0.94, 0.99 }
this.stepControl3 one of { 0.02, 0.1 }
this.stepControl4 one of { 2.5, 4.0 }
this.orderControl1 one of { 0.7, 0.8 }
this.orderControl2 one of { 0.9, 0.95 }
this.useInterpolationError == true
this.mudif one of { 3, 4 }
this.mainSetDimension >= 1
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.setControlFactors(double, double, double, double):::ENTER
this.costPerTimeUnit[] one of { [0.0, 382.4473460954976, 90.52834301532678, 60.192394167774225, 1163634.4648304202, 2285592.2517345347, 2138464.1880487935, 0.0, 0.0], [0.0, 521.510290500307, 460.5755534679323, 74.51346809719426, 2206634.25378605, 1510833.23414892, 3428134.9967390858, 0.0, 0.0] }
this.optimalStep[] one of { [0.0, 0.017257569340321008, 0.0412527322758195, 0.4428729576370716, 2.3112121962439563E-5, 4.831770863256277E-5, 2.8878676042271057E-5, 0.0, 0.0], [0.0, 0.02353265120514835, 0.2098790209468788, 0.5482420238679844, 4.3828196518253155E-5, 3.193920522989188E-5, 4.6294906668664355E-5, 0.0, 0.0] }
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction == 0.5
this.orderControl1 one of { 0.0, 0.8 }
this.orderControl2 one of { 0.0, 0.9 }
this.mudif one of { 0, 4 }
this.mainSetDimension one of { 0, 4 }
this.stepStart == Double.NaN
this.resetOccurred == false
this.evaluations.count one of { 0, 9258, 14963 }
this.expandable.primary has only one value
this.expandable.primary.getClass().getName() == org.apache.commons.math3.ode.TestProblem3.class
this.expandable.primaryMapper.dimension == 4
this.expandable.time == 20.0
this.expandable.primaryState[] one of { [-1.4520899319494502, 0.03985750633194143, -0.6136866686991826, -0.013945525794869407], [-1.4520847984638798, 0.039857680833504695, -0.613691501036382, -0.013945368656681214] }
this.expandable.primaryStateDot[] one of { [-0.613691501036382, -0.013945368656681214, 0.4737240291453457, -0.0130030568302976], [-0.6136866686991826, -0.013945525794869407, 0.47372068816225216, -0.013002862228133613] }
control1 one of { -1.0, 0.5 }
control2 one of { -1.0, 0.99 }
control3 one of { -1.0, 0.1 }
control4 one of { -1.0, 2.5 }
size(this.expandable.primaryState[]) == 4
size(this.expandable.primaryStateDot[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.setControlFactors(double, double, double, double):::EXIT
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME == orig(org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME)
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME.toString == orig(org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME.toString)
this.maxOrder == orig(this.maxOrder)
this.sequence == orig(this.sequence)
this.sequence[] == orig(this.sequence[])
this.costPerStep == orig(this.costPerStep)
this.costPerStep[] == orig(this.costPerStep[])
this.costPerTimeUnit == orig(this.costPerTimeUnit)
this.costPerTimeUnit[] == orig(this.costPerTimeUnit[])
this.optimalStep == orig(this.optimalStep)
this.optimalStep[] == orig(this.optimalStep[])
this.coeff == orig(this.coeff)
this.coeff.getClass().getName() == orig(this.coeff.getClass().getName())
this.coeff[] == orig(this.coeff[])
this.performTest == orig(this.performTest)
this.maxChecks == orig(this.maxChecks)
this.maxIter == orig(this.maxIter)
this.stabilityReduction == orig(this.stabilityReduction)
this.orderControl1 == orig(this.orderControl1)
this.orderControl2 == orig(this.orderControl2)
this.useInterpolationError == orig(this.useInterpolationError)
this.mudif == orig(this.mudif)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.mainSetDimension == orig(this.mainSetDimension)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
this.expandable.primary == orig(this.expandable.primary)
this.expandable.primary.getClass().getName() == orig(this.expandable.primary.getClass().getName())
this.expandable.primaryMapper == orig(this.expandable.primaryMapper)
this.expandable.primaryMapper.firstIndex == orig(this.expandable.primaryMapper.firstIndex)
this.expandable.primaryMapper.dimension == orig(this.expandable.primaryMapper.dimension)
this.expandable.time == orig(this.expandable.time)
this.expandable.primaryState == orig(this.expandable.primaryState)
this.expandable.primaryState[] == orig(this.expandable.primaryState[])
this.expandable.primaryStateDot == orig(this.expandable.primaryStateDot)
this.expandable.primaryStateDot[] == orig(this.expandable.primaryStateDot[])
this.expandable.components == orig(this.expandable.components)
this.expandable.components[] == orig(this.expandable.components[])
this.expandable.components.getClass().getName() == orig(this.expandable.components.getClass().getName())
this.costPerTimeUnit[] one of { [0.0, 382.4473460954976, 90.52834301532678, 60.192394167774225, 1163634.4648304202, 2285592.2517345347, 2138464.1880487935, 0.0, 0.0], [0.0, 521.510290500307, 460.5755534679323, 74.51346809719426, 2206634.25378605, 1510833.23414892, 3428134.9967390858, 0.0, 0.0] }
this.optimalStep[] one of { [0.0, 0.017257569340321008, 0.0412527322758195, 0.4428729576370716, 2.3112121962439563E-5, 4.831770863256277E-5, 2.8878676042271057E-5, 0.0, 0.0], [0.0, 0.02353265120514835, 0.2098790209468788, 0.5482420238679844, 4.3828196518253155E-5, 3.193920522989188E-5, 4.6294906668664355E-5, 0.0, 0.0] }
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction == 0.5
this.stepControl1 one of { 0.5, 0.65 }
this.stepControl2 one of { 0.94, 0.99 }
this.stepControl3 one of { 0.02, 0.1 }
this.stepControl4 one of { 2.5, 4.0 }
this.orderControl1 one of { 0.0, 0.8 }
this.orderControl2 one of { 0.0, 0.9 }
this.mudif one of { 0, 4 }
this.mainSetDimension one of { 0, 4 }
this.stepStart == Double.NaN
this.resetOccurred == false
this.evaluations.count one of { 0, 9258, 14963 }
this.expandable.primary has only one value
this.expandable.primary.getClass().getName() == org.apache.commons.math3.ode.TestProblem3.class
this.expandable.primaryMapper.dimension == 4
this.expandable.time == 20.0
this.expandable.primaryState[] one of { [-1.4520899319494502, 0.03985750633194143, -0.6136866686991826, -0.013945525794869407], [-1.4520847984638798, 0.039857680833504695, -0.613691501036382, -0.013945368656681214] }
this.expandable.primaryStateDot[] one of { [-0.613691501036382, -0.013945368656681214, 0.4737240291453457, -0.0130030568302976], [-0.6136866686991826, -0.013945525794869407, 0.47372068816225216, -0.013002862228133613] }
size(this.expandable.primaryState[]) == 4
size(this.expandable.primaryStateDot[]) == 4
this.stepControl1 != orig(this.stepControl1)
this.stepControl2 != orig(this.stepControl2)
this.stepControl3 != orig(this.stepControl3)
this.stepControl4 != orig(this.stepControl4)
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.setInterpolationControl(boolean, int):::ENTER
this.maxOrder == 18
this.costPerTimeUnit[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 375.9276971749376, 90.7647746978202, 60.43918163651349, 1293764.27073347, 1862590.7612978816, 3028942.2441429067, 0.0, 0.0], [0.0, 387.23492300340257, 90.35919488650534, 60.01636853963798, 363666.55896703055, 2434279.071187077, 1919624.4825765921, 0.0, 0.0] }
this.optimalStep[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.023241705397322645, 0.21027190452354894, 0.5498499959757654, 1.402383550053707E-4, 2.9988344748164608E-5, 5.157258666920026E-5, 0.0, 0.0], [0.0, 0.02394077389783775, 0.20933231050543558, 0.5460034220593005, 3.941985503362735E-5, 3.9192720975987496E-5, 3.268467736267907E-5, 0.0, 0.0] }
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction == 0.5
this.stepControl1 == 0.65
this.stepControl2 == 0.94
this.stepControl3 == 0.02
this.stepControl4 == 4.0
this.orderControl1 == 0.8
this.orderControl2 == 0.9
this.mainSetDimension one of { 0, 4 }
this.stepStart == Double.NaN
this.resetOccurred == false
this.evaluations.count one of { 0, 7778, 9187 }
this.expandable.primary has only one value
this.expandable.primary.getClass().getName() == org.apache.commons.math3.ode.TestProblem3.class
this.expandable.primaryMapper.dimension == 4
this.expandable.time == 20.0
this.expandable.primaryState[] one of { [-1.452120342157072, 0.03985653616220339, -0.6136589121780407, -0.013946405351687768], [-1.4520767587928183, 0.03985790978740228, -0.6136984149630568, -0.013945159371145164] }
this.expandable.primaryStateDot[] one of { [-0.6136984149630568, -0.013945159371145164, 0.4737292627977243, -0.013003347175628432], [-0.6136589121780407, -0.013946405351687768, 0.47370089556094847, -0.013001730177505402] }
useInterpolationErrorForControl == true
mudifControlParameter one of { -1, 3 }
size(this.expandable.primaryState[]) == 4
size(this.expandable.primaryStateDot[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.setInterpolationControl(boolean, int):::EXIT
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME == orig(org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME)
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME.toString == orig(org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME.toString)
this.maxOrder == orig(this.maxOrder)
this.sequence == orig(this.sequence)
this.sequence[] == orig(this.sequence[])
this.costPerStep == orig(this.costPerStep)
this.costPerStep[] == orig(this.costPerStep[])
this.costPerTimeUnit == orig(this.costPerTimeUnit)
this.costPerTimeUnit[] == orig(this.costPerTimeUnit[])
this.optimalStep == orig(this.optimalStep)
this.optimalStep[] == orig(this.optimalStep[])
this.coeff == orig(this.coeff)
this.coeff.getClass().getName() == orig(this.coeff.getClass().getName())
this.coeff[] == orig(this.coeff[])
this.performTest == orig(this.performTest)
this.maxChecks == orig(this.maxChecks)
this.maxIter == orig(this.maxIter)
this.stabilityReduction == orig(this.stabilityReduction)
this.stepControl1 == orig(this.stepControl1)
this.stepControl2 == orig(this.stepControl2)
this.stepControl3 == orig(this.stepControl3)
this.stepControl4 == orig(this.stepControl4)
this.orderControl1 == orig(this.orderControl1)
this.orderControl2 == orig(this.orderControl2)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.mainSetDimension == orig(this.mainSetDimension)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
this.expandable.primary == orig(this.expandable.primary)
this.expandable.primary.getClass().getName() == orig(this.expandable.primary.getClass().getName())
this.expandable.primaryMapper == orig(this.expandable.primaryMapper)
this.expandable.primaryMapper.firstIndex == orig(this.expandable.primaryMapper.firstIndex)
this.expandable.primaryMapper.dimension == orig(this.expandable.primaryMapper.dimension)
this.expandable.time == orig(this.expandable.time)
this.expandable.primaryState == orig(this.expandable.primaryState)
this.expandable.primaryState[] == orig(this.expandable.primaryState[])
this.expandable.primaryStateDot == orig(this.expandable.primaryStateDot)
this.expandable.primaryStateDot[] == orig(this.expandable.primaryStateDot[])
this.expandable.components == orig(this.expandable.components)
this.expandable.components[] == orig(this.expandable.components[])
this.expandable.components.getClass().getName() == orig(this.expandable.components.getClass().getName())
this.maxOrder == 18
this.costPerTimeUnit[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 375.9276971749376, 90.7647746978202, 60.43918163651349, 1293764.27073347, 1862590.7612978816, 3028942.2441429067, 0.0, 0.0], [0.0, 387.23492300340257, 90.35919488650534, 60.01636853963798, 363666.55896703055, 2434279.071187077, 1919624.4825765921, 0.0, 0.0] }
this.optimalStep[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.023241705397322645, 0.21027190452354894, 0.5498499959757654, 1.402383550053707E-4, 2.9988344748164608E-5, 5.157258666920026E-5, 0.0, 0.0], [0.0, 0.02394077389783775, 0.20933231050543558, 0.5460034220593005, 3.941985503362735E-5, 3.9192720975987496E-5, 3.268467736267907E-5, 0.0, 0.0] }
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction == 0.5
this.stepControl1 == 0.65
this.stepControl2 == 0.94
this.stepControl3 == 0.02
this.stepControl4 == 4.0
this.orderControl1 == 0.8
this.orderControl2 == 0.9
this.useInterpolationError == true
this.mudif one of { 3, 4 }
this.mainSetDimension one of { 0, 4 }
this.stepStart == Double.NaN
this.resetOccurred == false
this.evaluations.count one of { 0, 7778, 9187 }
this.expandable.primary has only one value
this.expandable.primary.getClass().getName() == org.apache.commons.math3.ode.TestProblem3.class
this.expandable.primaryMapper.dimension == 4
this.expandable.time == 20.0
this.expandable.primaryState[] one of { [-1.452120342157072, 0.03985653616220339, -0.6136589121780407, -0.013946405351687768], [-1.4520767587928183, 0.03985790978740228, -0.6136984149630568, -0.013945159371145164] }
this.expandable.primaryStateDot[] one of { [-0.6136984149630568, -0.013945159371145164, 0.4737292627977243, -0.013003347175628432], [-0.6136589121780407, -0.013946405351687768, 0.47370089556094847, -0.013001730177505402] }
size(this.expandable.primaryState[]) == 4
size(this.expandable.primaryStateDot[]) == 4
this.mudif != orig(this.mudif)
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.setOrderControl(int, double, double):::ENTER
this.costPerTimeUnit[] one of { [0.0, 375.9276971749376, 90.7647746978202, 60.43918163651349, 1293764.27073347, 1862590.7612978816, 3028942.2441429067, 0.0, 0.0], [0.0, 521.510290500307, 460.5755534679323, 74.51346809719426, 2206634.25378605, 1510833.23414892, 3428134.9967390858, 0.0, 0.0] }
this.optimalStep[] one of { [0.0, 0.017257569340321008, 0.0412527322758195, 0.4428729576370716, 2.3112121962439563E-5, 4.831770863256277E-5, 2.8878676042271057E-5, 0.0, 0.0], [0.0, 0.02394077389783775, 0.20933231050543558, 0.5460034220593005, 3.941985503362735E-5, 3.9192720975987496E-5, 3.268467736267907E-5, 0.0, 0.0] }
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction == 0.5
this.stepControl1 == 0.65
this.stepControl2 == 0.94
this.stepControl3 == 0.02
this.stepControl4 == 4.0
this.mudif one of { 0, 4 }
this.mainSetDimension one of { 0, 4 }
this.stepStart == Double.NaN
this.resetOccurred == false
this.evaluations.count one of { 0, 9187, 9258 }
this.expandable.primary has only one value
this.expandable.primary.getClass().getName() == org.apache.commons.math3.ode.TestProblem3.class
this.expandable.primaryMapper.dimension == 4
this.expandable.time == 20.0
this.expandable.primaryState[] one of { [-1.4520847984638798, 0.039857680833504695, -0.613691501036382, -0.013945368656681214], [-1.4520767587928183, 0.03985790978740228, -0.6136984149630568, -0.013945159371145164] }
this.expandable.primaryStateDot[] one of { [-0.6136984149630568, -0.013945159371145164, 0.4737292627977243, -0.013003347175628432], [-0.613691501036382, -0.013945368656681214, 0.4737240291453457, -0.0130030568302976] }
maximalOrder one of { -1, 10 }
control1 one of { -1.0, 0.7 }
control2 one of { -1.0, 0.95 }
size(this.expandable.primaryState[]) == 4
size(this.expandable.primaryStateDot[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.setOrderControl(int, double, double):::EXIT
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME == orig(org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME)
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME.toString == orig(org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME.toString)
this.coeff.getClass().getName() == orig(this.coeff.getClass().getName())
this.performTest == orig(this.performTest)
this.maxChecks == orig(this.maxChecks)
this.maxIter == orig(this.maxIter)
this.stabilityReduction == orig(this.stabilityReduction)
this.stepControl1 == orig(this.stepControl1)
this.stepControl2 == orig(this.stepControl2)
this.stepControl3 == orig(this.stepControl3)
this.stepControl4 == orig(this.stepControl4)
this.useInterpolationError == orig(this.useInterpolationError)
this.mudif == orig(this.mudif)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.mainSetDimension == orig(this.mainSetDimension)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
this.expandable.primary == orig(this.expandable.primary)
this.expandable.primary.getClass().getName() == orig(this.expandable.primary.getClass().getName())
this.expandable.primaryMapper == orig(this.expandable.primaryMapper)
this.expandable.primaryMapper.firstIndex == orig(this.expandable.primaryMapper.firstIndex)
this.expandable.primaryMapper.dimension == orig(this.expandable.primaryMapper.dimension)
this.expandable.time == orig(this.expandable.time)
this.expandable.primaryState == orig(this.expandable.primaryState)
this.expandable.primaryState[] == orig(this.expandable.primaryState[])
this.expandable.primaryStateDot == orig(this.expandable.primaryStateDot)
this.expandable.primaryStateDot[] == orig(this.expandable.primaryStateDot[])
this.expandable.components == orig(this.expandable.components)
this.expandable.components[] == orig(this.expandable.components[])
this.expandable.components.getClass().getName() == orig(this.expandable.components.getClass().getName())
size(this.coeff[]) == orig(size(this.coeff[]))
this.maxOrder == 18
this.costPerTimeUnit[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 375.9276971749376, 90.7647746978202, 60.43918163651349, 1293764.27073347, 1862590.7612978816, 3028942.2441429067, 0.0, 0.0], [0.0, 521.510290500307, 460.5755534679323, 74.51346809719426, 2206634.25378605, 1510833.23414892, 3428134.9967390858, 0.0, 0.0] }
this.optimalStep[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.017257569340321008, 0.0412527322758195, 0.4428729576370716, 2.3112121962439563E-5, 4.831770863256277E-5, 2.8878676042271057E-5, 0.0, 0.0], [0.0, 0.02394077389783775, 0.20933231050543558, 0.5460034220593005, 3.941985503362735E-5, 3.9192720975987496E-5, 3.268467736267907E-5, 0.0, 0.0] }
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction == 0.5
this.stepControl1 == 0.65
this.stepControl2 == 0.94
this.stepControl3 == 0.02
this.stepControl4 == 4.0
this.orderControl1 one of { 0.7, 0.8 }
this.orderControl2 one of { 0.9, 0.95 }
this.mudif one of { 0, 4 }
this.mainSetDimension one of { 0, 4 }
this.stepStart == Double.NaN
this.resetOccurred == false
this.evaluations.count one of { 0, 9187, 9258 }
this.expandable.primary has only one value
this.expandable.primary.getClass().getName() == org.apache.commons.math3.ode.TestProblem3.class
this.expandable.primaryMapper.dimension == 4
this.expandable.time == 20.0
this.expandable.primaryState[] one of { [-1.4520847984638798, 0.039857680833504695, -0.613691501036382, -0.013945368656681214], [-1.4520767587928183, 0.03985790978740228, -0.6136984149630568, -0.013945159371145164] }
this.expandable.primaryStateDot[] one of { [-0.6136984149630568, -0.013945159371145164, 0.4737292627977243, -0.013003347175628432], [-0.613691501036382, -0.013945368656681214, 0.4737240291453457, -0.0130030568302976] }
size(this.expandable.primaryState[]) == 4
size(this.expandable.primaryStateDot[]) == 4
this.maxOrder >= orig(this.maxOrder)
this.sequence[] == orig(this.sequence[]) (elementwise)
this.costPerStep[] == orig(this.costPerStep[]) (elementwise)
this.costPerTimeUnit[] == orig(this.costPerTimeUnit[]) (elementwise)
this.optimalStep[] == orig(this.optimalStep[]) (elementwise)
this.orderControl1 != orig(this.orderControl1)
this.orderControl2 != orig(this.orderControl2)
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.setStabilityCheck(boolean, int, int, double):::ENTER
this.costPerTimeUnit[] one of { [0.0, 382.4473460954976, 90.52834301532678, 60.192394167774225, 1163634.4648304202, 2285592.2517345347, 2138464.1880487935, 0.0, 0.0], [0.0, 403.3847382209593, 89.84022269661756, 59.4755502446731, 1618640.373959921, 2101547.7398673925, 3028942.2441429067, 0.0, 0.0] }
this.optimalStep[] one of { [0.0, 0.02231120602056623, 0.2114865639209434, 0.5548498477818729, 3.150792530599685E-5, 3.473630344681406E-5, 3.268467736267907E-5, 0.0, 0.0], [0.0, 0.02353265120514835, 0.2098790209468788, 0.5482420238679844, 4.3828196518253155E-5, 3.193920522989188E-5, 4.6294906668664355E-5, 0.0, 0.0] }
this.stepControl1 one of { 0.0, 0.65 }
this.stepControl2 one of { 0.0, 0.94 }
this.stepControl3 one of { 0.0, 0.02 }
this.stepControl4 one of { 0.0, 4.0 }
this.orderControl1 one of { 0.0, 0.8 }
this.orderControl2 one of { 0.0, 0.9 }
this.mudif one of { 0, 4 }
this.mainSetDimension one of { 0, 4 }
this.stepStart == Double.NaN
this.resetOccurred == false
this.evaluations.count one of { 0, 8739, 14963 }
this.expandable.primary has only one value
this.expandable.primary.getClass().getName() == org.apache.commons.math3.ode.TestProblem3.class
this.expandable.primaryMapper.dimension == 4
this.expandable.time == 20.0
this.expandable.primaryState[] one of { [-1.4520899319494502, 0.03985750633194143, -0.6136866686991826, -0.013945525794869407], [-1.4520859508474449, 0.039857645533912966, -0.6136904812591797, -0.01394540052085419] }
this.expandable.primaryStateDot[] one of { [-0.6136904812591797, -0.01394540052085419, 0.4737232790422334, -0.013003014405730557], [-0.6136866686991826, -0.013945525794869407, 0.47372068816225216, -0.013002862228133613] }
performStabilityCheck == true
maxNumIter one of { -1, 2 }
maxNumChecks one of { -1, 1 }
stepsizeReductionFactor one of { -1.0, 0.99 }
size(this.expandable.primaryState[]) == 4
size(this.expandable.primaryStateDot[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.setStabilityCheck(boolean, int, int, double):::EXIT
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME == orig(org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME)
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME.toString == orig(org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME.toString)
this.maxOrder == orig(this.maxOrder)
this.sequence == orig(this.sequence)
this.sequence[] == orig(this.sequence[])
this.costPerStep == orig(this.costPerStep)
this.costPerStep[] == orig(this.costPerStep[])
this.costPerTimeUnit == orig(this.costPerTimeUnit)
this.costPerTimeUnit[] == orig(this.costPerTimeUnit[])
this.optimalStep == orig(this.optimalStep)
this.optimalStep[] == orig(this.optimalStep[])
this.coeff == orig(this.coeff)
this.coeff.getClass().getName() == orig(this.coeff.getClass().getName())
this.coeff[] == orig(this.coeff[])
this.stepControl1 == orig(this.stepControl1)
this.stepControl2 == orig(this.stepControl2)
this.stepControl3 == orig(this.stepControl3)
this.stepControl4 == orig(this.stepControl4)
this.orderControl1 == orig(this.orderControl1)
this.orderControl2 == orig(this.orderControl2)
this.useInterpolationError == orig(this.useInterpolationError)
this.mudif == orig(this.mudif)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.mainSetDimension == orig(this.mainSetDimension)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
this.expandable.primary == orig(this.expandable.primary)
this.expandable.primary.getClass().getName() == orig(this.expandable.primary.getClass().getName())
this.expandable.primaryMapper == orig(this.expandable.primaryMapper)
this.expandable.primaryMapper.firstIndex == orig(this.expandable.primaryMapper.firstIndex)
this.expandable.primaryMapper.dimension == orig(this.expandable.primaryMapper.dimension)
this.expandable.time == orig(this.expandable.time)
this.expandable.primaryState == orig(this.expandable.primaryState)
this.expandable.primaryState[] == orig(this.expandable.primaryState[])
this.expandable.primaryStateDot == orig(this.expandable.primaryStateDot)
this.expandable.primaryStateDot[] == orig(this.expandable.primaryStateDot[])
this.expandable.components == orig(this.expandable.components)
this.expandable.components[] == orig(this.expandable.components[])
this.expandable.components.getClass().getName() == orig(this.expandable.components.getClass().getName())
this.costPerTimeUnit[] one of { [0.0, 382.4473460954976, 90.52834301532678, 60.192394167774225, 1163634.4648304202, 2285592.2517345347, 2138464.1880487935, 0.0, 0.0], [0.0, 403.3847382209593, 89.84022269661756, 59.4755502446731, 1618640.373959921, 2101547.7398673925, 3028942.2441429067, 0.0, 0.0] }
this.optimalStep[] one of { [0.0, 0.02231120602056623, 0.2114865639209434, 0.5548498477818729, 3.150792530599685E-5, 3.473630344681406E-5, 3.268467736267907E-5, 0.0, 0.0], [0.0, 0.02353265120514835, 0.2098790209468788, 0.5482420238679844, 4.3828196518253155E-5, 3.193920522989188E-5, 4.6294906668664355E-5, 0.0, 0.0] }
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction one of { 0.5, 0.99 }
this.stepControl1 one of { 0.0, 0.65 }
this.stepControl2 one of { 0.0, 0.94 }
this.stepControl3 one of { 0.0, 0.02 }
this.stepControl4 one of { 0.0, 4.0 }
this.orderControl1 one of { 0.0, 0.8 }
this.orderControl2 one of { 0.0, 0.9 }
this.mudif one of { 0, 4 }
this.mainSetDimension one of { 0, 4 }
this.stepStart == Double.NaN
this.resetOccurred == false
this.evaluations.count one of { 0, 8739, 14963 }
this.expandable.primary has only one value
this.expandable.primary.getClass().getName() == org.apache.commons.math3.ode.TestProblem3.class
this.expandable.primaryMapper.dimension == 4
this.expandable.time == 20.0
this.expandable.primaryState[] one of { [-1.4520899319494502, 0.03985750633194143, -0.6136866686991826, -0.013945525794869407], [-1.4520859508474449, 0.039857645533912966, -0.6136904812591797, -0.01394540052085419] }
this.expandable.primaryStateDot[] one of { [-0.6136904812591797, -0.01394540052085419, 0.4737232790422334, -0.013003014405730557], [-0.6136866686991826, -0.013945525794869407, 0.47372068816225216, -0.013002862228133613] }
size(this.expandable.primaryState[]) == 4
size(this.expandable.primaryStateDot[]) == 4
this.maxChecks >= orig(this.maxChecks)
this.maxIter >= orig(this.maxIter)
this.stabilityReduction != orig(this.stabilityReduction)
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.tryStep(double, double[], double, int, double[], double[][], double[], double[], double[]):::ENTER
this.maxOrder == 18
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction one of { 0.5, 0.99 }
this.stepControl1 one of { 0.5, 0.65 }
this.stepControl2 one of { 0.94, 0.99 }
this.stepControl3 one of { 0.02, 0.1 }
this.stepControl4 one of { 2.5, 4.0 }
this.orderControl1 one of { 0.7, 0.8 }
this.orderControl2 one of { 0.9, 0.95 }
this.useInterpolationError == true
this.mudif one of { 3, 4 }
this.mainSetDimension >= 1
this.evaluations.count >= 2
k >= 0
f.getClass().getName() == double[][].class
f[] elements != null
size(y0[]) >= 1
size(scale[]) >= 1
size(yMiddle[]) >= 1
size(yEnd[]) >= 1
size(yTmp[]) >= 1
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.tryStep(double, double[], double, int, double[], double[][], double[], double[], double[]):::EXIT506
this.scalAbsoluteTolerance one of { 1.0E-10, 1.0E-8, 1.0E-6 }
this.mainSetDimension one of { 2, 4 }
this.minStep == 0.0
this.maxStep one of { 4.0, 15.0, 20.0 }
this.isLastStep == false
this.statesInitialized == true
this.expandable.primaryMapper.dimension one of { 2, 4 }
this.expandable.time == 0.0
this.expandable.primaryState[] elements != 0
yMiddle[] elements != 0
yEnd[] elements != 0
yTmp[] elements != 0
return == false
orig(k) == 0
orig(yMiddle[]) elements != 0
orig(yTmp[]) elements != 0
size(this.expandable.primaryState[]) one of { 2, 4 }
size(this.expandable.primaryStateDot[]) one of { 2, 4 }
orig(size(y0[])) one of { 2, 4 }
orig(size(scale[])) one of { 2, 4 }
orig(size(f[])) == 3
orig(size(yMiddle[])) one of { 2, 4 }
orig(size(yEnd[])) one of { 2, 4 }
orig(size(yTmp[])) one of { 2, 4 }
this.evaluations.count - orig(this.evaluations.count) - 2 == 0
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.tryStep(double, double[], double, int, double[], double[][], double[], double[], double[]):::EXIT506;condition="not(return == true)"
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.tryStep(double, double[], double, int, double[], double[][], double[], double[], double[]):::EXIT517
return == true
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.tryStep(double, double[], double, int, double[], double[][], double[], double[], double[]):::EXIT517;condition="return == true"
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.tryStep(double, double[], double, int, double[], double[][], double[], double[], double[]):::EXIT
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME == orig(org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME)
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME.toString == orig(org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME.toString)
this.maxOrder == orig(this.maxOrder)
this.sequence == orig(this.sequence)
this.sequence[] == orig(this.sequence[])
this.costPerStep == orig(this.costPerStep)
this.costPerStep[] == orig(this.costPerStep[])
this.costPerTimeUnit == orig(this.costPerTimeUnit)
this.costPerTimeUnit[] == orig(this.costPerTimeUnit[])
this.optimalStep == orig(this.optimalStep)
this.optimalStep[] == orig(this.optimalStep[])
this.coeff == orig(this.coeff)
this.coeff.getClass().getName() == orig(this.coeff.getClass().getName())
this.coeff[] == orig(this.coeff[])
this.performTest == orig(this.performTest)
this.maxChecks == orig(this.maxChecks)
this.maxIter == orig(this.maxIter)
this.stabilityReduction == orig(this.stabilityReduction)
this.stepControl1 == orig(this.stepControl1)
this.stepControl2 == orig(this.stepControl2)
this.stepControl3 == orig(this.stepControl3)
this.stepControl4 == orig(this.stepControl4)
this.orderControl1 == orig(this.orderControl1)
this.orderControl2 == orig(this.orderControl2)
this.useInterpolationError == orig(this.useInterpolationError)
this.mudif == orig(this.mudif)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.mainSetDimension == orig(this.mainSetDimension)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
this.expandable.primary == orig(this.expandable.primary)
this.expandable.primary.getClass().getName() == orig(this.expandable.primary.getClass().getName())
this.expandable.primaryMapper == orig(this.expandable.primaryMapper)
this.expandable.primaryMapper.firstIndex == orig(this.expandable.primaryMapper.firstIndex)
this.expandable.primaryMapper.dimension == orig(this.expandable.primaryMapper.dimension)
this.expandable.time == orig(this.expandable.time)
this.expandable.primaryState == orig(this.expandable.primaryState)
this.expandable.primaryStateDot == orig(this.expandable.primaryStateDot)
this.expandable.components == orig(this.expandable.components)
this.expandable.components[] == orig(this.expandable.components[])
this.expandable.components.getClass().getName() == orig(this.expandable.components.getClass().getName())
y0[] == orig(y0[])
scale[] == orig(scale[])
f[] == orig(f[])
size(this.expandable.primaryState[]) == orig(size(this.expandable.primaryState[]))
size(this.expandable.primaryStateDot[]) == orig(size(this.expandable.primaryStateDot[]))
(return == false)  ==>  (orig(k) == 0)
(return == false)  ==>  (orig(size(f[])) == 3)
(return == false)  ==>  (orig(size(scale[])) one of { 2, 4 })
(return == false)  ==>  (orig(size(y0[])) one of { 2, 4 })
(return == false)  ==>  (orig(size(yEnd[])) one of { 2, 4 })
(return == false)  ==>  (orig(size(yMiddle[])) one of { 2, 4 })
(return == false)  ==>  (orig(size(yTmp[])) one of { 2, 4 })
(return == false)  ==>  (orig(yMiddle[]) elements != 0)
(return == false)  ==>  (orig(yTmp[]) elements != 0)
(return == false)  ==>  (size(this.expandable.primaryStateDot[]) one of { 2, 4 })
(return == false)  ==>  (size(this.expandable.primaryState[]) one of { 2, 4 })
(return == false)  ==>  (this.evaluations.count - orig(this.evaluations.count) - 2 == 0)
(return == false)  ==>  (this.expandable.primaryMapper.dimension one of { 2, 4 })
(return == false)  ==>  (this.expandable.primaryState[] elements != 0)
(return == false)  ==>  (this.expandable.time == 0.0)
(return == false)  ==>  (this.isLastStep == false)
(return == false)  ==>  (this.mainSetDimension one of { 2, 4 })
(return == false)  ==>  (this.maxStep one of { 4.0, 15.0, 20.0 })
(return == false)  ==>  (this.minStep == 0.0)
(return == false)  ==>  (this.scalAbsoluteTolerance one of { 1.0E-10, 1.0E-8, 1.0E-6 })
(return == false)  ==>  (this.statesInitialized == true)
(return == false)  ==>  (yEnd[] elements != 0)
(return == false)  ==>  (yMiddle[] elements != 0)
(return == false)  ==>  (yTmp[] elements != 0)
(return == true)  ==>  (orig(size(scale[])) >= 1)
(return == true)  ==>  (orig(size(y0[])) >= 1)
(return == true)  ==>  (orig(size(yEnd[])) >= 1)
(return == true)  ==>  (orig(size(yMiddle[])) >= 1)
(return == true)  ==>  (orig(size(yTmp[])) >= 1)
(return == true)  ==>  (orig(this.evaluations.count) >= 2)
(return == true)  ==>  (size(this.expandable.primaryStateDot[]) >= 1)
(return == true)  ==>  (size(this.expandable.primaryState[]) >= 1)
(return == true)  ==>  (this.expandable.primaryMapper.dimension >= 1)
(return == true)  ==>  (this.mainSetDimension >= 1)
(return == true)  ==>  (this.maxStep >= 1.0)
(return == true)  ==>  (this.minStep one of { 0.0, 1.0E-8, 0.1 })
this.maxOrder == 18
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction one of { 0.5, 0.99 }
this.stepControl1 one of { 0.5, 0.65 }
this.stepControl2 one of { 0.94, 0.99 }
this.stepControl3 one of { 0.02, 0.1 }
this.stepControl4 one of { 2.5, 4.0 }
this.orderControl1 one of { 0.7, 0.8 }
this.orderControl2 one of { 0.9, 0.95 }
this.useInterpolationError == true
this.mudif one of { 3, 4 }
this.mainSetDimension >= 1
f[] elements != null
this.evaluations.count > orig(this.evaluations.count)
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.tryStep(double, double[], double, int, double[], double[][], double[], double[], double[]):::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.tryStep(double, double[], double, int, double[], double[][], double[], double[], double[]):::EXIT;condition="not(return == true)"
this.scalAbsoluteTolerance one of { 1.0E-10, 1.0E-8, 1.0E-6 }
this.mainSetDimension one of { 2, 4 }
this.minStep == 0.0
this.maxStep one of { 4.0, 15.0, 20.0 }
this.isLastStep == false
this.statesInitialized == true
this.expandable.primaryMapper.dimension one of { 2, 4 }
this.expandable.time == 0.0
this.expandable.primaryState[] elements != 0
yMiddle[] elements != 0
yEnd[] elements != 0
yTmp[] elements != 0
return == false
orig(k) == 0
orig(yMiddle[]) elements != 0
orig(yTmp[]) elements != 0
size(this.expandable.primaryState[]) one of { 2, 4 }
size(this.expandable.primaryStateDot[]) one of { 2, 4 }
orig(size(y0[])) one of { 2, 4 }
orig(size(scale[])) one of { 2, 4 }
orig(size(f[])) == 3
orig(size(yMiddle[])) one of { 2, 4 }
orig(size(yEnd[])) one of { 2, 4 }
orig(size(yTmp[])) one of { 2, 4 }
this.evaluations.count - orig(this.evaluations.count) - 2 == 0
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest$1:::OBJECT
this has only one value
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest$1.(org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest):::ENTER
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest$1.(org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest):::EXIT
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.this)
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest$1.computeDerivatives(double, double[], double[]):::ENTER
y has only one value
yDot has only one value
size(y[]) == 1
size(yDot[]) == 1
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest$1.computeDerivatives(double, double[], double[]):::EXIT
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.this)
y[] == orig(y[])
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest$1.getDimension():::ENTER
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest$1.getDimension():::EXIT
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.this)
return == 1
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest$2:::OBJECT
this has only one value
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest$2.(org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest):::ENTER
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest$2.(org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest):::EXIT
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.this)
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest$2.handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean):::ENTER
interpolator has only one value
interpolator.getClass().getName() == org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator.class
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest$2.handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean):::EXIT
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.this)
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest$2.init(double, double[], double):::ENTER
t0 == 3.0
y0 has only one value
y0[] == [4.0]
y0[] elements == 4.0
t == 10.0
size(y0[]) == 1
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest$2.init(double, double[], double):::EXIT
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.this)
y0[] == orig(y0[])
y0[] == [4.0]
y0[] elements == 4.0
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest$3:::OBJECT
this has only one value
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest$3.(org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest):::ENTER
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest$3.(org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest):::EXIT
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.this)
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest$3.computeDerivatives(double, double[], double[]):::ENTER
y has only one value
yDot has only one value
yDot[] elements one of { 0.0, 3.0 }
yDot[] one of { [0.0], [3.0] }
size(y[]) == 1
size(yDot[]) == 1
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest$3.computeDerivatives(double, double[], double[]):::EXIT
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.this)
y[] == orig(y[])
yDot[] == [3.0]
yDot[] elements == 3.0
yDot[] >= orig(yDot[]) (elementwise)
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest$3.getDimension():::ENTER
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest$3.getDimension():::EXIT
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.this)
return == 1
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest$KeplerStepHandler:::OBJECT
this has only one value
this.nbSteps >= 0
this.pb has only one value
this.pb.e == 0.9
this.pb.y has only one value
this.pb.n == 4
this.pb.calls >= 0
this.pb.t0 == 0.0
this.pb.y0 has only one value
this.pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
this.pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
this.pb.t1 == 20.0
this.pb.errorScale has only one value
this.pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
this.pb.errorScale[] elements == 1.0
size(this.pb.y[]) == 4
size(this.pb.y0[]) == 4
size(this.pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest$KeplerStepHandler.KeplerStepHandler(org.apache.commons.math3.ode.TestProblem3):::ENTER
pb has only one value
pb.e == 0.9
pb.y has only one value
pb.y[] == [0.0, 0.0, 0.0, 0.0]
pb.y[] elements == 0.0
pb.n == 4
pb.calls == 0
pb.t0 == 0.0
pb.y0 has only one value
pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
pb.t1 == 20.0
pb.errorScale has only one value
pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
pb.errorScale[] elements == 1.0
size(pb.y[]) == 4
size(pb.y0[]) == 4
size(pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest$KeplerStepHandler.KeplerStepHandler(org.apache.commons.math3.ode.TestProblem3):::EXIT
pb.e == orig(pb.e)
pb.y == orig(pb.y)
pb.y[] == orig(pb.y[])
pb.n == orig(pb.n)
pb.calls == orig(pb.calls)
pb.t0 == orig(pb.t0)
pb.y0 == orig(pb.y0)
pb.y0[] == orig(pb.y0[])
pb.t1 == orig(pb.t1)
pb.errorScale == orig(pb.errorScale)
pb.errorScale[] == orig(pb.errorScale[])
this.nbSteps == 0
this.maxError == 0.0
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
pb.e == 0.9
pb.y has only one value
pb.y[] == [0.0, 0.0, 0.0, 0.0]
pb.y[] elements == 0.0
pb.n == 4
pb.calls == 0
pb.t0 == 0.0
pb.y0 has only one value
pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
pb.t1 == 20.0
pb.errorScale has only one value
pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
pb.errorScale[] elements == 1.0
size(pb.y[]) == 4
size(pb.y0[]) == 4
size(pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest$KeplerStepHandler.handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean):::ENTER
interpolator has only one value
interpolator.getClass().getName() == org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator.class
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest$KeplerStepHandler.handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean):::EXIT
this.pb == orig(this.pb)
this.pb.e == orig(this.pb.e)
this.pb.y == orig(this.pb.y)
this.pb.n == orig(this.pb.n)
this.pb.calls == orig(this.pb.calls)
this.pb.t0 == orig(this.pb.t0)
this.pb.y0 == orig(this.pb.y0)
this.pb.y0[] == orig(this.pb.y0[])
this.pb.t1 == orig(this.pb.t1)
this.pb.errorScale == orig(this.pb.errorScale)
this.pb.errorScale[] == orig(this.pb.errorScale[])
size(this.pb.y[]) == orig(size(this.pb.y[]))
this.pb.y[] elements != 0
this.nbSteps - orig(this.nbSteps) - 1 == 0
this.maxError >= orig(this.maxError)
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest$KeplerStepHandler.init(double, double[], double):::ENTER
this.nbSteps == 0
this.maxError == 0.0
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
t0 == 0.0
y0 has only one value
y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
t == 20.0
size(y0[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest$KeplerStepHandler.init(double, double[], double):::EXIT
this.nbSteps == orig(this.nbSteps)
this.maxError == orig(this.maxError)
this.pb == orig(this.pb)
this.pb.e == orig(this.pb.e)
this.pb.y == orig(this.pb.y)
this.pb.y[] == orig(this.pb.y[])
this.pb.n == orig(this.pb.n)
this.pb.calls == orig(this.pb.calls)
this.pb.t0 == orig(this.pb.t0)
this.pb.y0 == orig(this.pb.y0)
this.pb.y0[] == orig(this.pb.y0[])
this.pb.t1 == orig(this.pb.t1)
this.pb.errorScale == orig(this.pb.errorScale)
this.pb.errorScale[] == orig(this.pb.errorScale[])
y0[] == orig(y0[])
this.nbSteps == 0
this.maxError == 0.0
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest$VariableStepHandler:::OBJECT
this has only one value
this.minStep one of { 0.0, 0.008176825371455906 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest$VariableStepHandler.VariableStepHandler():::EXIT
this.firstTime == true
this.minStep == 0.0
this.maxStep == 0.0
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest$VariableStepHandler.handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean):::ENTER
interpolator has only one value
interpolator.getClass().getName() == org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator.class
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest$VariableStepHandler.handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean):::EXIT
this.firstTime == false
this.minStep == 0.008176825371455906
this.minStep >= orig(this.minStep)
this.maxStep >= orig(this.maxStep)
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest$VariableStepHandler.init(double, double[], double):::ENTER
this.firstTime == true
this.minStep == 0.0
this.maxStep == 0.0
t0 == 0.0
y0 has only one value
y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
t == 20.0
size(y0[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest$VariableStepHandler.init(double, double[], double):::EXIT
this.firstTime == orig(this.firstTime)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
y0[] == orig(y0[])
this.firstTime == true
this.minStep == 0.0
this.maxStep == 0.0
y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest:::OBJECT
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.GraggBulirschStoerIntegratorTest():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.getMaxError(org.apache.commons.math3.ode.FirstOrderIntegrator, org.apache.commons.math3.ode.TestProblemAbstract):::ENTER
this has only one value
integrator has only one value
integrator.getClass().getName() == org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator.class
pb has only one value
pb.getClass().getName() == org.apache.commons.math3.ode.TestProblem3.class
pb.n == 4
pb.t0 == 0.0
pb.y0 has only one value
pb.y0[] == [0.0010000000000000009, 0.0, 0.0, 44.710177812216294]
pb.y0[] elements one of { 0.0, 0.0010000000000000009, 44.710177812216294 }
pb.t1 == 20.0
pb.errorScale has only one value
pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
pb.errorScale[] elements == 1.0
size(pb.y0[]) == 4
size(pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.getMaxError(org.apache.commons.math3.ode.FirstOrderIntegrator, org.apache.commons.math3.ode.TestProblemAbstract):::EXIT
pb.n == orig(pb.n)
pb.t0 == orig(pb.t0)
pb.y0 == orig(pb.y0)
pb.y0[] == orig(pb.y0[])
pb.t1 == orig(pb.t1)
pb.errorScale == orig(pb.errorScale)
pb.errorScale[] == orig(pb.errorScale[])
pb.n == 4
pb.t0 == 0.0
pb.y0 has only one value
pb.y0[] == [0.0010000000000000009, 0.0, 0.0, 44.710177812216294]
pb.y0[] elements one of { 0.0, 0.0010000000000000009, 44.710177812216294 }
pb.t1 == 20.0
pb.errorScale has only one value
pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
pb.errorScale[] elements == 1.0
size(pb.y0[]) == 4
size(pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.testBackward():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.testBackward():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.testEvents():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.testEvents():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.testIncreasingTolerance():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.testIncreasingTolerance():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.testIntegratorControls():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.testIntegratorControls():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.testIssue596():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.testIssue596():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.testKepler():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.testKepler():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.testTooLargeFirstStep():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.testTooLargeFirstStep():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.testUnstableDerivative():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.testUnstableDerivative():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.testVariableSteps():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.testVariableSteps():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator:::CLASS
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator:::OBJECT
this.yMidDots.getClass().getName() == double[][].class
this.yMidDots[] elements != null
this.polynomials.getClass().getName() == double[][].class
this.polynomials[] elements != null
this.errfac[] elements <= 0.00894427190999916
this.errfac[] elements >= 4.8264138216340184E-27
this.errfac[] sorted by >
this.h >= -1.0
this.interpolatedSecondaryState.getClass().getName() == double[][].class
this.interpolatedSecondaryState[] == []
this.interpolatedSecondaryDerivatives.getClass().getName() == double[][].class
this.interpolatedSecondaryDerivatives[] == []
this.primaryMapper.firstIndex == 0
this.primaryMapper.dimension >= 1
this.secondaryMappers.getClass().getName() == org.apache.commons.math3.ode.EquationsMapper[].class
this.secondaryMappers[] == []
this.secondaryMappers[].getClass().getName() == []
this.secondaryMappers[].firstIndex == []
this.secondaryMappers[].dimension == []
size(this.y0Dot[]) >= 1
size(this.y1[]) >= 1
size(this.y1Dot[]) >= 1
size(this.yMidDots[]) == 19
size(this.currentState[]) >= 1
size(this.interpolatedState[]) >= 1
size(this.interpolatedDerivatives[]) >= 1
size(this.interpolatedPrimaryState[]) >= 1
size(this.interpolatedPrimaryDerivatives[]) >= 1
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator.GraggBulirschStoerStepInterpolator():::EXIT
this.y0Dot == null
this.y1 == null
this.y1Dot == null
this.yMidDots == null
this.polynomials == null
this.errfac == null
this.currentDegree == -1
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.interpolatedPrimaryState == null
this.interpolatedPrimaryDerivatives == null
this.interpolatedSecondaryState == null
this.interpolatedSecondaryDerivatives == null
this.globalPreviousTime == Double.NaN
this.globalCurrentTime == Double.NaN
this.softPreviousTime == Double.NaN
this.softCurrentTime == Double.NaN
this.finalized == false
this.forward == true
this.dirtyState == true
this.primaryMapper == null
this.secondaryMappers == null
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator.GraggBulirschStoerStepInterpolator(double[], double[], double[], double[], double[][], boolean, org.apache.commons.math3.ode.EquationsMapper, org.apache.commons.math3.ode.EquationsMapper[]):::ENTER
y[] elements >= 0.0
y0Dot[] elements == 0.0
y1[] elements == 0.0
y1Dot[] elements == 0.0
yMidDots.getClass().getName() == double[][].class
yMidDots[] elements != null
primaryMapper.firstIndex == 0
secondaryMappers.getClass().getName() == org.apache.commons.math3.ode.EquationsMapper[].class
secondaryMappers[] == []
secondaryMappers[].firstIndex == []
secondaryMappers[].dimension == []
size(yMidDots[]) == 19
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator.GraggBulirschStoerStepInterpolator(double[], double[], double[], double[], double[][], boolean, org.apache.commons.math3.ode.EquationsMapper, org.apache.commons.math3.ode.EquationsMapper[]):::EXIT
y[] == orig(y[])
y0Dot[] == orig(y0Dot[])
y1[] == orig(y1[])
y1Dot[] == orig(y1Dot[])
yMidDots[] == orig(yMidDots[])
primaryMapper.firstIndex == orig(primaryMapper.firstIndex)
primaryMapper.dimension == orig(primaryMapper.dimension)
secondaryMappers[] == orig(secondaryMappers[])
secondaryMappers[].firstIndex == orig(secondaryMappers[].firstIndex)
secondaryMappers[].dimension == orig(secondaryMappers[].dimension)
this.y0Dot[] elements == 0.0
this.y1[] elements == 0.0
this.y1Dot[] elements == 0.0
this.errfac[] == [0.00894427190999916, 0.0011574074074074071, 1.1928820530393167E-4, 1.0172526041666671E-5, 7.396095223550401E-7, 4.687500000000003E-8, 2.633557867380915E-9, 1.3289602249221588E-10, 6.087325272458579E-12, 2.552940897844902E-13, 9.873921158055867E-15, 3.543485851063354E-16, 1.1861666197290292E-17, 3.720620824064976E-19, 1.0979326186189016E-20, 3.0588654927279263E-22, 8.071138420780447E-24, 2.0226564078181777E-25, 4.8264138216340184E-27]
this.currentDegree == 0
this.h == Double.NaN
this.currentState[] elements >= 0.0
this.interpolatedTime == Double.NaN
this.interpolatedState[] elements == 0.0
this.interpolatedDerivatives[] elements == 0.0
this.interpolatedPrimaryState[] elements == 0.0
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.globalPreviousTime == Double.NaN
this.globalCurrentTime == Double.NaN
this.softPreviousTime == Double.NaN
this.softCurrentTime == Double.NaN
this.finalized == false
this.dirtyState == true
y[] elements >= 0.0
y0Dot[] elements == 0.0
y1[] elements == 0.0
y1Dot[] elements == 0.0
yMidDots[] elements != null
primaryMapper.firstIndex == 0
secondaryMappers[] == []
secondaryMappers[].firstIndex == []
secondaryMappers[].dimension == []
size(this.polynomials[]) == 24
size(this.errfac[]) == 19
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator.GraggBulirschStoerStepInterpolator(org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator):::ENTER
interpolator.y1[] elements != 0
interpolator.yMidDots.getClass().getName() == double[][].class
interpolator.yMidDots[] elements != null
interpolator.polynomials.getClass().getName() == double[][].class
interpolator.polynomials[] elements != null
interpolator.errfac[] == [0.00894427190999916, 0.0011574074074074071, 1.1928820530393167E-4, 1.0172526041666671E-5, 7.396095223550401E-7, 4.687500000000003E-8, 2.633557867380915E-9, 1.3289602249221588E-10, 6.087325272458579E-12, 2.552940897844902E-13, 9.873921158055867E-15, 3.543485851063354E-16, 1.1861666197290292E-17, 3.720620824064976E-19, 1.0979326186189016E-20, 3.0588654927279263E-22, 8.071138420780447E-24, 2.0226564078181777E-25, 4.8264138216340184E-27]
interpolator.errfac[] sorted by >
interpolator.interpolatedState[] elements != 0
interpolator.interpolatedPrimaryState[] elements != 0
interpolator.interpolatedPrimaryDerivatives[] == [0.0, 0.0, 0.0, 0.0]
interpolator.interpolatedPrimaryDerivatives[] elements == 0.0
interpolator.interpolatedSecondaryState.getClass().getName() == double[][].class
interpolator.interpolatedSecondaryState[] == []
interpolator.interpolatedSecondaryDerivatives.getClass().getName() == double[][].class
interpolator.interpolatedSecondaryDerivatives[] == []
interpolator.finalized == true
interpolator.forward == true
interpolator.dirtyState == false
interpolator.primaryMapper.firstIndex == 0
interpolator.primaryMapper.dimension == 4
interpolator.secondaryMappers.getClass().getName() == org.apache.commons.math3.ode.EquationsMapper[].class
interpolator.secondaryMappers[] == []
interpolator.secondaryMappers[].getClass().getName() == []
interpolator.secondaryMappers[].firstIndex == []
interpolator.secondaryMappers[].dimension == []
size(interpolator.y0Dot[]) == 4
size(interpolator.y1[]) == 4
size(interpolator.y1Dot[]) == 4
size(interpolator.yMidDots[]) == 19
size(interpolator.polynomials[]) == 24
size(interpolator.errfac[]) == 19
size(interpolator.currentState[]) == 4
size(interpolator.interpolatedState[]) == 4
size(interpolator.interpolatedDerivatives[]) == 4
size(interpolator.interpolatedPrimaryState[]) == 4
size(interpolator.interpolatedPrimaryDerivatives[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator.GraggBulirschStoerStepInterpolator(org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator):::EXIT
interpolator.y0Dot == orig(interpolator.y0Dot)
interpolator.y0Dot[] == orig(interpolator.y0Dot[])
interpolator.y1 == orig(interpolator.y1)
interpolator.y1[] == orig(interpolator.y1[])
interpolator.y1Dot == orig(interpolator.y1Dot)
interpolator.y1Dot[] == orig(interpolator.y1Dot[])
interpolator.yMidDots == orig(interpolator.yMidDots)
interpolator.yMidDots.getClass().getName() == orig(interpolator.yMidDots.getClass().getName())
interpolator.yMidDots[] == orig(interpolator.yMidDots[])
interpolator.polynomials == orig(interpolator.polynomials)
interpolator.polynomials.getClass().getName() == orig(interpolator.polynomials.getClass().getName())
interpolator.polynomials[] == orig(interpolator.polynomials[])
interpolator.errfac == orig(interpolator.errfac)
interpolator.errfac[] == orig(interpolator.errfac[])
interpolator.currentDegree == orig(interpolator.currentDegree)
interpolator.h == orig(interpolator.h)
interpolator.currentState == orig(interpolator.currentState)
interpolator.currentState[] == orig(interpolator.currentState[])
interpolator.interpolatedTime == orig(interpolator.interpolatedTime)
interpolator.interpolatedState == orig(interpolator.interpolatedState)
interpolator.interpolatedState[] == orig(interpolator.interpolatedState[])
interpolator.interpolatedDerivatives == orig(interpolator.interpolatedDerivatives)
interpolator.interpolatedDerivatives[] == orig(interpolator.interpolatedDerivatives[])
interpolator.interpolatedPrimaryState == orig(interpolator.interpolatedPrimaryState)
interpolator.interpolatedPrimaryState[] == orig(interpolator.interpolatedPrimaryState[])
interpolator.interpolatedPrimaryDerivatives == orig(interpolator.interpolatedPrimaryDerivatives)
interpolator.interpolatedPrimaryDerivatives[] == orig(interpolator.interpolatedPrimaryDerivatives[])
interpolator.interpolatedSecondaryState == orig(interpolator.interpolatedSecondaryState)
interpolator.interpolatedSecondaryState.getClass().getName() == orig(interpolator.interpolatedSecondaryState.getClass().getName())
interpolator.interpolatedSecondaryState[] == orig(interpolator.interpolatedSecondaryState[])
interpolator.interpolatedSecondaryDerivatives == orig(interpolator.interpolatedSecondaryDerivatives)
interpolator.interpolatedSecondaryDerivatives.getClass().getName() == orig(interpolator.interpolatedSecondaryDerivatives.getClass().getName())
interpolator.interpolatedSecondaryDerivatives[] == orig(interpolator.interpolatedSecondaryDerivatives[])
interpolator.globalPreviousTime == orig(interpolator.globalPreviousTime)
interpolator.globalCurrentTime == orig(interpolator.globalCurrentTime)
interpolator.softPreviousTime == orig(interpolator.softPreviousTime)
interpolator.softCurrentTime == orig(interpolator.softCurrentTime)
interpolator.finalized == orig(interpolator.finalized)
interpolator.forward == orig(interpolator.forward)
interpolator.dirtyState == orig(interpolator.dirtyState)
interpolator.primaryMapper == orig(interpolator.primaryMapper)
interpolator.primaryMapper.firstIndex == orig(interpolator.primaryMapper.firstIndex)
interpolator.primaryMapper.dimension == orig(interpolator.primaryMapper.dimension)
interpolator.secondaryMappers == orig(interpolator.secondaryMappers)
interpolator.secondaryMappers.getClass().getName() == orig(interpolator.secondaryMappers.getClass().getName())
interpolator.secondaryMappers[] == orig(interpolator.secondaryMappers[])
interpolator.secondaryMappers[].firstIndex == orig(interpolator.secondaryMappers[].firstIndex)
interpolator.secondaryMappers[].dimension == orig(interpolator.secondaryMappers[].dimension)
this.y0Dot == null
this.y1 == null
this.y1Dot == null
this.yMidDots == null
this.interpolatedState[] elements != 0
this.interpolatedPrimaryState[] elements != 0
this.interpolatedPrimaryDerivatives[] == [0.0, 0.0, 0.0, 0.0]
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.finalized == true
this.forward == true
this.dirtyState == false
this.primaryMapper.dimension == 4
interpolator.y1[] elements != 0
interpolator.yMidDots.getClass().getName() == double[][].class
interpolator.yMidDots[] elements != null
interpolator.polynomials.getClass().getName() == double[][].class
interpolator.polynomials[] elements != null
interpolator.errfac[] == [0.00894427190999916, 0.0011574074074074071, 1.1928820530393167E-4, 1.0172526041666671E-5, 7.396095223550401E-7, 4.687500000000003E-8, 2.633557867380915E-9, 1.3289602249221588E-10, 6.087325272458579E-12, 2.552940897844902E-13, 9.873921158055867E-15, 3.543485851063354E-16, 1.1861666197290292E-17, 3.720620824064976E-19, 1.0979326186189016E-20, 3.0588654927279263E-22, 8.071138420780447E-24, 2.0226564078181777E-25, 4.8264138216340184E-27]
interpolator.errfac[] sorted by >
interpolator.interpolatedState[] elements != 0
interpolator.interpolatedPrimaryState[] elements != 0
interpolator.interpolatedPrimaryDerivatives[] == [0.0, 0.0, 0.0, 0.0]
interpolator.interpolatedPrimaryDerivatives[] elements == 0.0
interpolator.interpolatedSecondaryState.getClass().getName() == double[][].class
interpolator.interpolatedSecondaryState[] == []
interpolator.interpolatedSecondaryDerivatives.getClass().getName() == double[][].class
interpolator.interpolatedSecondaryDerivatives[] == []
interpolator.finalized == true
interpolator.forward == true
interpolator.dirtyState == false
interpolator.primaryMapper.firstIndex == 0
interpolator.primaryMapper.dimension == 4
interpolator.secondaryMappers.getClass().getName() == org.apache.commons.math3.ode.EquationsMapper[].class
interpolator.secondaryMappers[] == []
interpolator.secondaryMappers[].getClass().getName() == []
interpolator.secondaryMappers[].firstIndex == []
interpolator.secondaryMappers[].dimension == []
size(this.currentState[]) == 4
size(this.interpolatedState[]) == 4
size(this.interpolatedDerivatives[]) == 4
size(this.interpolatedPrimaryState[]) == 4
size(this.interpolatedPrimaryDerivatives[]) == 4
size(interpolator.y0Dot[]) == 4
size(interpolator.y1[]) == 4
size(interpolator.y1Dot[]) == 4
size(interpolator.yMidDots[]) == 19
size(interpolator.polynomials[]) == 24
size(interpolator.errfac[]) == 19
size(interpolator.currentState[]) == 4
size(interpolator.interpolatedState[]) == 4
size(interpolator.interpolatedDerivatives[]) == 4
size(interpolator.interpolatedPrimaryState[]) == 4
size(interpolator.interpolatedPrimaryDerivatives[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator.computeCoefficients(int, double):::ENTER
this.errfac[] == [0.00894427190999916, 0.0011574074074074071, 1.1928820530393167E-4, 1.0172526041666671E-5, 7.396095223550401E-7, 4.687500000000003E-8, 2.633557867380915E-9, 1.3289602249221588E-10, 6.087325272458579E-12, 2.552940897844902E-13, 9.873921158055867E-15, 3.543485851063354E-16, 1.1861666197290292E-17, 3.720620824064976E-19, 1.0979326186189016E-20, 3.0588654927279263E-22, 8.071138420780447E-24, 2.0226564078181777E-25, 4.8264138216340184E-27]
this.finalized == false
this.dirtyState == true
mu >= 1
size(this.polynomials[]) == 24
size(this.errfac[]) == 19
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator.computeCoefficients(int, double):::EXIT296
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator.computeCoefficients(int, double):::EXIT
this.y0Dot == orig(this.y0Dot)
this.y0Dot[] == orig(this.y0Dot[])
this.y1 == orig(this.y1)
this.y1[] == orig(this.y1[])
this.y1Dot == orig(this.y1Dot)
this.y1Dot[] == orig(this.y1Dot[])
this.yMidDots == orig(this.yMidDots)
this.yMidDots.getClass().getName() == orig(this.yMidDots.getClass().getName())
this.yMidDots[] == orig(this.yMidDots[])
this.polynomials == orig(this.polynomials)
this.polynomials.getClass().getName() == orig(this.polynomials.getClass().getName())
this.polynomials[] == orig(this.polynomials[])
this.errfac == orig(this.errfac)
this.errfac[] == orig(this.errfac[])
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.interpolatedPrimaryState == orig(this.interpolatedPrimaryState)
this.interpolatedPrimaryState[] == orig(this.interpolatedPrimaryState[])
this.interpolatedPrimaryDerivatives == orig(this.interpolatedPrimaryDerivatives)
this.interpolatedPrimaryDerivatives[] == orig(this.interpolatedPrimaryDerivatives[])
this.interpolatedSecondaryState == orig(this.interpolatedSecondaryState)
this.interpolatedSecondaryState.getClass().getName() == orig(this.interpolatedSecondaryState.getClass().getName())
this.interpolatedSecondaryState[] == orig(this.interpolatedSecondaryState[])
this.interpolatedSecondaryDerivatives == orig(this.interpolatedSecondaryDerivatives)
this.interpolatedSecondaryDerivatives.getClass().getName() == orig(this.interpolatedSecondaryDerivatives.getClass().getName())
this.interpolatedSecondaryDerivatives[] == orig(this.interpolatedSecondaryDerivatives[])
this.globalPreviousTime == orig(this.globalPreviousTime)
this.globalCurrentTime == orig(this.globalCurrentTime)
this.softPreviousTime == orig(this.softPreviousTime)
this.softCurrentTime == orig(this.softCurrentTime)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.secondaryMappers == orig(this.secondaryMappers)
this.secondaryMappers.getClass().getName() == orig(this.secondaryMappers.getClass().getName())
this.secondaryMappers[] == orig(this.secondaryMappers[])
this.secondaryMappers[].firstIndex == orig(this.secondaryMappers[].firstIndex)
this.secondaryMappers[].dimension == orig(this.secondaryMappers[].dimension)
this.errfac[] == [0.00894427190999916, 0.0011574074074074071, 1.1928820530393167E-4, 1.0172526041666671E-5, 7.396095223550401E-7, 4.687500000000003E-8, 2.633557867380915E-9, 1.3289602249221588E-10, 6.087325272458579E-12, 2.552940897844902E-13, 9.873921158055867E-15, 3.543485851063354E-16, 1.1861666197290292E-17, 3.720620824064976E-19, 1.0979326186189016E-20, 3.0588654927279263E-22, 8.071138420780447E-24, 2.0226564078181777E-25, 4.8264138216340184E-27]
this.finalized == false
this.dirtyState == true
size(this.polynomials[]) == 24
size(this.errfac[]) == 19
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::ENTER
this.dirtyState == true
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::EXIT
this.y0Dot == orig(this.y0Dot)
this.y0Dot[] == orig(this.y0Dot[])
this.y1 == orig(this.y1)
this.y1[] == orig(this.y1[])
this.y1Dot == orig(this.y1Dot)
this.y1Dot[] == orig(this.y1Dot[])
this.yMidDots == orig(this.yMidDots)
this.yMidDots.getClass().getName() == orig(this.yMidDots.getClass().getName())
this.yMidDots[] == orig(this.yMidDots[])
this.polynomials == orig(this.polynomials)
this.polynomials.getClass().getName() == orig(this.polynomials.getClass().getName())
this.polynomials[] == orig(this.polynomials[])
this.errfac == orig(this.errfac)
this.errfac[] == orig(this.errfac[])
this.currentDegree == orig(this.currentDegree)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedPrimaryState == orig(this.interpolatedPrimaryState)
this.interpolatedPrimaryState[] == orig(this.interpolatedPrimaryState[])
this.interpolatedPrimaryDerivatives == orig(this.interpolatedPrimaryDerivatives)
this.interpolatedPrimaryDerivatives[] == orig(this.interpolatedPrimaryDerivatives[])
this.interpolatedSecondaryState == orig(this.interpolatedSecondaryState)
this.interpolatedSecondaryState.getClass().getName() == orig(this.interpolatedSecondaryState.getClass().getName())
this.interpolatedSecondaryState[] == orig(this.interpolatedSecondaryState[])
this.interpolatedSecondaryDerivatives == orig(this.interpolatedSecondaryDerivatives)
this.interpolatedSecondaryDerivatives.getClass().getName() == orig(this.interpolatedSecondaryDerivatives.getClass().getName())
this.interpolatedSecondaryDerivatives[] == orig(this.interpolatedSecondaryDerivatives[])
this.globalPreviousTime == orig(this.globalPreviousTime)
this.globalCurrentTime == orig(this.globalCurrentTime)
this.softPreviousTime == orig(this.softPreviousTime)
this.softCurrentTime == orig(this.softCurrentTime)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.secondaryMappers == orig(this.secondaryMappers)
this.secondaryMappers.getClass().getName() == orig(this.secondaryMappers.getClass().getName())
this.secondaryMappers[] == orig(this.secondaryMappers[])
this.secondaryMappers[].firstIndex == orig(this.secondaryMappers[].firstIndex)
this.secondaryMappers[].dimension == orig(this.secondaryMappers[].dimension)
size(this.interpolatedState[]) == orig(size(this.interpolatedState[]))
size(this.interpolatedDerivatives[]) == orig(size(this.interpolatedDerivatives[]))
this.dirtyState == true
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator.doCopy():::ENTER
this.y1[] elements != 0
this.errfac[] == [0.00894427190999916, 0.0011574074074074071, 1.1928820530393167E-4, 1.0172526041666671E-5, 7.396095223550401E-7, 4.687500000000003E-8, 2.633557867380915E-9, 1.3289602249221588E-10, 6.087325272458579E-12, 2.552940897844902E-13, 9.873921158055867E-15, 3.543485851063354E-16, 1.1861666197290292E-17, 3.720620824064976E-19, 1.0979326186189016E-20, 3.0588654927279263E-22, 8.071138420780447E-24, 2.0226564078181777E-25, 4.8264138216340184E-27]
this.interpolatedState[] elements != 0
this.interpolatedPrimaryState[] elements != 0
this.interpolatedPrimaryDerivatives[] == [0.0, 0.0, 0.0, 0.0]
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.finalized == true
this.forward == true
this.dirtyState == false
this.primaryMapper.dimension == 4
size(this.y0Dot[]) == 4
size(this.y1[]) == 4
size(this.y1Dot[]) == 4
size(this.polynomials[]) == 24
size(this.errfac[]) == 19
size(this.currentState[]) == 4
size(this.interpolatedState[]) == 4
size(this.interpolatedDerivatives[]) == 4
size(this.interpolatedPrimaryState[]) == 4
size(this.interpolatedPrimaryDerivatives[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator.doCopy():::EXIT
this.y0Dot == orig(this.y0Dot)
this.y0Dot[] == orig(this.y0Dot[])
this.y1 == orig(this.y1)
this.y1[] == orig(this.y1[])
this.y1Dot == orig(this.y1Dot)
this.y1Dot[] == orig(this.y1Dot[])
this.yMidDots == orig(this.yMidDots)
this.yMidDots.getClass().getName() == orig(this.yMidDots.getClass().getName())
this.yMidDots[] == orig(this.yMidDots[])
this.polynomials == orig(this.polynomials)
this.polynomials.getClass().getName() == orig(this.polynomials.getClass().getName())
this.polynomials[] == orig(this.polynomials[])
this.errfac == orig(this.errfac)
this.errfac[] == orig(this.errfac[])
this.currentDegree == orig(this.currentDegree)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.interpolatedPrimaryState == orig(this.interpolatedPrimaryState)
this.interpolatedPrimaryState[] == orig(this.interpolatedPrimaryState[])
this.interpolatedPrimaryDerivatives == orig(this.interpolatedPrimaryDerivatives)
this.interpolatedPrimaryDerivatives[] == orig(this.interpolatedPrimaryDerivatives[])
this.interpolatedSecondaryState == orig(this.interpolatedSecondaryState)
this.interpolatedSecondaryState.getClass().getName() == orig(this.interpolatedSecondaryState.getClass().getName())
this.interpolatedSecondaryState[] == orig(this.interpolatedSecondaryState[])
this.interpolatedSecondaryDerivatives == orig(this.interpolatedSecondaryDerivatives)
this.interpolatedSecondaryDerivatives.getClass().getName() == orig(this.interpolatedSecondaryDerivatives.getClass().getName())
this.interpolatedSecondaryDerivatives[] == orig(this.interpolatedSecondaryDerivatives[])
this.globalPreviousTime == orig(this.globalPreviousTime)
this.globalCurrentTime == orig(this.globalCurrentTime)
this.softPreviousTime == orig(this.softPreviousTime)
this.softCurrentTime == orig(this.softCurrentTime)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.secondaryMappers == orig(this.secondaryMappers)
this.secondaryMappers.getClass().getName() == orig(this.secondaryMappers.getClass().getName())
this.secondaryMappers[] == orig(this.secondaryMappers[])
this.secondaryMappers[].firstIndex == orig(this.secondaryMappers[].firstIndex)
this.secondaryMappers[].dimension == orig(this.secondaryMappers[].dimension)
this.y1[] elements != 0
this.errfac[] == [0.00894427190999916, 0.0011574074074074071, 1.1928820530393167E-4, 1.0172526041666671E-5, 7.396095223550401E-7, 4.687500000000003E-8, 2.633557867380915E-9, 1.3289602249221588E-10, 6.087325272458579E-12, 2.552940897844902E-13, 9.873921158055867E-15, 3.543485851063354E-16, 1.1861666197290292E-17, 3.720620824064976E-19, 1.0979326186189016E-20, 3.0588654927279263E-22, 8.071138420780447E-24, 2.0226564078181777E-25, 4.8264138216340184E-27]
this.interpolatedState[] elements != 0
this.interpolatedPrimaryState[] elements != 0
this.interpolatedPrimaryDerivatives[] == [0.0, 0.0, 0.0, 0.0]
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.finalized == true
this.forward == true
this.dirtyState == false
this.primaryMapper.dimension == 4
return.getClass().getName() == org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator.class
size(this.y0Dot[]) == 4
size(this.y1[]) == 4
size(this.y1Dot[]) == 4
size(this.polynomials[]) == 24
size(this.errfac[]) == 19
size(this.currentState[]) == 4
size(this.interpolatedState[]) == 4
size(this.interpolatedDerivatives[]) == 4
size(this.interpolatedPrimaryState[]) == 4
size(this.interpolatedPrimaryDerivatives[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator.estimateError(double[]):::ENTER
this.errfac[] == [0.00894427190999916, 0.0011574074074074071, 1.1928820530393167E-4, 1.0172526041666671E-5, 7.396095223550401E-7, 4.687500000000003E-8, 2.633557867380915E-9, 1.3289602249221588E-10, 6.087325272458579E-12, 2.552940897844902E-13, 9.873921158055867E-15, 3.543485851063354E-16, 1.1861666197290292E-17, 3.720620824064976E-19, 1.0979326186189016E-20, 3.0588654927279263E-22, 8.071138420780447E-24, 2.0226564078181777E-25, 4.8264138216340184E-27]
this.finalized == false
this.dirtyState == true
size(this.polynomials[]) == 24
size(this.errfac[]) == 19
size(scale[]) >= 1
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator.estimateError(double[]):::EXIT
this.y0Dot == orig(this.y0Dot)
this.y0Dot[] == orig(this.y0Dot[])
this.y1 == orig(this.y1)
this.y1[] == orig(this.y1[])
this.y1Dot == orig(this.y1Dot)
this.y1Dot[] == orig(this.y1Dot[])
this.yMidDots == orig(this.yMidDots)
this.yMidDots.getClass().getName() == orig(this.yMidDots.getClass().getName())
this.yMidDots[] == orig(this.yMidDots[])
this.polynomials == orig(this.polynomials)
this.polynomials.getClass().getName() == orig(this.polynomials.getClass().getName())
this.polynomials[] == orig(this.polynomials[])
this.errfac == orig(this.errfac)
this.errfac[] == orig(this.errfac[])
this.currentDegree == orig(this.currentDegree)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.interpolatedPrimaryState == orig(this.interpolatedPrimaryState)
this.interpolatedPrimaryState[] == orig(this.interpolatedPrimaryState[])
this.interpolatedPrimaryDerivatives == orig(this.interpolatedPrimaryDerivatives)
this.interpolatedPrimaryDerivatives[] == orig(this.interpolatedPrimaryDerivatives[])
this.interpolatedSecondaryState == orig(this.interpolatedSecondaryState)
this.interpolatedSecondaryState.getClass().getName() == orig(this.interpolatedSecondaryState.getClass().getName())
this.interpolatedSecondaryState[] == orig(this.interpolatedSecondaryState[])
this.interpolatedSecondaryDerivatives == orig(this.interpolatedSecondaryDerivatives)
this.interpolatedSecondaryDerivatives.getClass().getName() == orig(this.interpolatedSecondaryDerivatives.getClass().getName())
this.interpolatedSecondaryDerivatives[] == orig(this.interpolatedSecondaryDerivatives[])
this.globalPreviousTime == orig(this.globalPreviousTime)
this.globalCurrentTime == orig(this.globalCurrentTime)
this.softPreviousTime == orig(this.softPreviousTime)
this.softCurrentTime == orig(this.softCurrentTime)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.secondaryMappers == orig(this.secondaryMappers)
this.secondaryMappers.getClass().getName() == orig(this.secondaryMappers.getClass().getName())
this.secondaryMappers[] == orig(this.secondaryMappers[])
this.secondaryMappers[].firstIndex == orig(this.secondaryMappers[].firstIndex)
this.secondaryMappers[].dimension == orig(this.secondaryMappers[].dimension)
scale[] == orig(scale[])
this.errfac[] == [0.00894427190999916, 0.0011574074074074071, 1.1928820530393167E-4, 1.0172526041666671E-5, 7.396095223550401E-7, 4.687500000000003E-8, 2.633557867380915E-9, 1.3289602249221588E-10, 6.087325272458579E-12, 2.552940897844902E-13, 9.873921158055867E-15, 3.543485851063354E-16, 1.1861666197290292E-17, 3.720620824064976E-19, 1.0979326186189016E-20, 3.0588654927279263E-22, 8.071138420780447E-24, 2.0226564078181777E-25, 4.8264138216340184E-27]
this.finalized == false
this.dirtyState == true
return >= 0.0
size(this.polynomials[]) == 24
size(this.errfac[]) == 19
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator.readExternal(java.io.ObjectInput):::ENTER
this.y0Dot == null
this.y1 == null
this.y1Dot == null
this.yMidDots == null
this.polynomials == null
this.errfac == null
this.currentDegree == -1
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.interpolatedPrimaryState == null
this.interpolatedPrimaryDerivatives == null
this.interpolatedSecondaryState == null
this.interpolatedSecondaryDerivatives == null
this.globalPreviousTime == Double.NaN
this.globalCurrentTime == Double.NaN
this.softPreviousTime == Double.NaN
this.softCurrentTime == Double.NaN
this.finalized == false
this.forward == true
this.dirtyState == true
this.primaryMapper == null
this.secondaryMappers == null
in has only one value
in.getClass().getName() == java.io.ObjectInputStream.class
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator.readExternal(java.io.ObjectInput):::EXIT
this.y0Dot == orig(this.y0Dot)
this.y1 == orig(this.y1)
this.y1Dot == orig(this.y1Dot)
this.yMidDots == orig(this.yMidDots)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.y0Dot == null
this.y1 == null
this.y1Dot == null
this.yMidDots == null
this.interpolatedState[] == [0.0, 0.0, 0.0, 0.0]
this.interpolatedState[] elements == 0.0
this.interpolatedDerivatives[] == [0.0, 0.0, 0.0, 0.0]
this.interpolatedDerivatives[] elements == 0.0
this.interpolatedPrimaryState[] == [0.0, 0.0, 0.0, 0.0]
this.interpolatedPrimaryState[] elements == 0.0
this.interpolatedPrimaryDerivatives[] == [0.0, 0.0, 0.0, 0.0]
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.finalized == true
this.forward == true
this.dirtyState == true
this.primaryMapper has only one value
this.primaryMapper.dimension == 4
size(this.currentState[]) == 4
size(this.interpolatedState[]) == 4
size(this.interpolatedDerivatives[]) == 4
size(this.interpolatedPrimaryState[]) == 4
size(this.interpolatedPrimaryDerivatives[]) == 4
this.currentDegree > orig(this.currentDegree)
this.h != orig(this.h)
this.interpolatedTime != orig(this.interpolatedTime)
this.globalPreviousTime != orig(this.globalPreviousTime)
this.globalCurrentTime != orig(this.globalCurrentTime)
this.softPreviousTime != orig(this.softPreviousTime)
this.softCurrentTime != orig(this.softCurrentTime)
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator.resetTables(int):::ENTER
this.y0Dot[] elements == 0.0
this.y1[] elements == 0.0
this.y1Dot[] elements == 0.0
this.polynomials == null
this.errfac == null
this.currentDegree one of { -1, 0 }
this.interpolatedPrimaryDerivatives[] elements == 0.0
maxDegree >= -1
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator.resetTables(int):::EXIT
this.y0Dot == orig(this.y0Dot)
this.y0Dot[] == orig(this.y0Dot[])
this.y1 == orig(this.y1)
this.y1[] == orig(this.y1[])
this.y1Dot == orig(this.y1Dot)
this.y1Dot[] == orig(this.y1Dot[])
this.yMidDots == orig(this.yMidDots)
this.yMidDots.getClass().getName() == orig(this.yMidDots.getClass().getName())
this.yMidDots[] == orig(this.yMidDots[])
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.interpolatedPrimaryState == orig(this.interpolatedPrimaryState)
this.interpolatedPrimaryState[] == orig(this.interpolatedPrimaryState[])
this.interpolatedPrimaryDerivatives == orig(this.interpolatedPrimaryDerivatives)
this.interpolatedPrimaryDerivatives[] == orig(this.interpolatedPrimaryDerivatives[])
this.interpolatedSecondaryState == orig(this.interpolatedSecondaryState)
this.interpolatedSecondaryState.getClass().getName() == orig(this.interpolatedSecondaryState.getClass().getName())
this.interpolatedSecondaryState[] == orig(this.interpolatedSecondaryState[])
this.interpolatedSecondaryDerivatives == orig(this.interpolatedSecondaryDerivatives)
this.interpolatedSecondaryDerivatives.getClass().getName() == orig(this.interpolatedSecondaryDerivatives.getClass().getName())
this.interpolatedSecondaryDerivatives[] == orig(this.interpolatedSecondaryDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.secondaryMappers == orig(this.secondaryMappers)
this.secondaryMappers.getClass().getName() == orig(this.secondaryMappers.getClass().getName())
this.secondaryMappers[] == orig(this.secondaryMappers[])
this.secondaryMappers[].firstIndex == orig(this.secondaryMappers[].firstIndex)
this.secondaryMappers[].dimension == orig(this.secondaryMappers[].dimension)
this.y0Dot[] elements == 0.0
this.y1[] elements == 0.0
this.y1Dot[] elements == 0.0
this.currentDegree one of { -1, 0 }
this.interpolatedPrimaryDerivatives[] elements == 0.0
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator.writeExternal(java.io.ObjectOutput):::ENTER
this.y0Dot == null
this.y1 == null
this.y1Dot == null
this.yMidDots == null
this.interpolatedState[] elements != 0
this.interpolatedPrimaryState[] elements != 0
this.interpolatedPrimaryDerivatives[] == [0.0, 0.0, 0.0, 0.0]
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.finalized == true
this.forward == true
this.dirtyState == false
this.primaryMapper has only one value
this.primaryMapper.dimension == 4
out has only one value
out.getClass().getName() == java.io.ObjectOutputStream.class
size(this.currentState[]) == 4
size(this.interpolatedState[]) == 4
size(this.interpolatedDerivatives[]) == 4
size(this.interpolatedPrimaryState[]) == 4
size(this.interpolatedPrimaryDerivatives[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator.writeExternal(java.io.ObjectOutput):::EXIT
this.y0Dot == orig(this.y0Dot)
this.y1 == orig(this.y1)
this.y1Dot == orig(this.y1Dot)
this.yMidDots == orig(this.yMidDots)
this.polynomials == orig(this.polynomials)
this.polynomials.getClass().getName() == orig(this.polynomials.getClass().getName())
this.polynomials[] == orig(this.polynomials[])
this.errfac == orig(this.errfac)
this.errfac[] == orig(this.errfac[])
this.currentDegree == orig(this.currentDegree)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.interpolatedPrimaryState == orig(this.interpolatedPrimaryState)
this.interpolatedPrimaryState[] == orig(this.interpolatedPrimaryState[])
this.interpolatedPrimaryDerivatives == orig(this.interpolatedPrimaryDerivatives)
this.interpolatedPrimaryDerivatives[] == orig(this.interpolatedPrimaryDerivatives[])
this.interpolatedSecondaryState == orig(this.interpolatedSecondaryState)
this.interpolatedSecondaryState.getClass().getName() == orig(this.interpolatedSecondaryState.getClass().getName())
this.interpolatedSecondaryState[] == orig(this.interpolatedSecondaryState[])
this.interpolatedSecondaryDerivatives == orig(this.interpolatedSecondaryDerivatives)
this.interpolatedSecondaryDerivatives.getClass().getName() == orig(this.interpolatedSecondaryDerivatives.getClass().getName())
this.interpolatedSecondaryDerivatives[] == orig(this.interpolatedSecondaryDerivatives[])
this.globalPreviousTime == orig(this.globalPreviousTime)
this.globalCurrentTime == orig(this.globalCurrentTime)
this.softPreviousTime == orig(this.softPreviousTime)
this.softCurrentTime == orig(this.softCurrentTime)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.secondaryMappers == orig(this.secondaryMappers)
this.secondaryMappers.getClass().getName() == orig(this.secondaryMappers.getClass().getName())
this.secondaryMappers[] == orig(this.secondaryMappers[])
this.secondaryMappers[].firstIndex == orig(this.secondaryMappers[].firstIndex)
this.secondaryMappers[].dimension == orig(this.secondaryMappers[].dimension)
this.y0Dot == null
this.y1 == null
this.y1Dot == null
this.yMidDots == null
this.interpolatedState[] elements != 0
this.interpolatedPrimaryState[] elements != 0
this.interpolatedPrimaryDerivatives[] == [0.0, 0.0, 0.0, 0.0]
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.finalized == true
this.forward == true
this.dirtyState == false
this.primaryMapper has only one value
this.primaryMapper.dimension == 4
size(this.currentState[]) == 4
size(this.interpolatedState[]) == 4
size(this.interpolatedDerivatives[]) == 4
size(this.interpolatedPrimaryState[]) == 4
size(this.interpolatedPrimaryDerivatives[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest$1:::OBJECT
this has only one value
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest.this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest$1.(org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest):::ENTER
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest.this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest$1.(org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest):::EXIT
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest.this == orig(org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest.this)
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest$1.handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean):::ENTER
interpolator has only one value
interpolator.getClass().getName() == org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator.class
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest$1.handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean):::EXIT
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest.this == orig(org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest.this)
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest$1.init(double, double[], double):::ENTER
t0 == 0.0
y0 has only one value
y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
t == 20.0
size(y0[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest$1.init(double, double[], double):::EXIT
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest.this == orig(org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest.this)
y0[] == orig(y0[])
y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest:::OBJECT
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest.GraggBulirschStoerStepInterpolatorTest():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest.checklone():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest.checklone():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest.derivativesConsistency():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest.derivativesConsistency():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest.serialization():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest.serialization():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator:::CLASS
org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.METHOD_NAME has only one value
org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.METHOD_NAME.toString == "Higham-Hall 5(4)"
org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.STATIC_C has only one value
org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.STATIC_C[] == [0.2222222222222222, 0.3333333333333333, 0.5, 0.6, 1.0, 1.0]
org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.STATIC_C[] elements <= 1.0
org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.STATIC_C[] elements >= 0.2222222222222222
org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.STATIC_C[] sorted by <=
org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.STATIC_A has only one value
org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.STATIC_A.getClass().getName() == double[][].class
org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.STATIC_A[] contains no nulls and has only one value, of length 6
org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.STATIC_A[] elements != null
org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.STATIC_B has only one value
org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.STATIC_B[] == [0.08333333333333333, 0.0, 0.84375, -1.3333333333333333, 1.3020833333333333, 0.10416666666666667, 0.0]
org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.STATIC_B[] elements <= 1.3020833333333333
org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.STATIC_E has only one value
org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.STATIC_E[] == [-0.05, 0.0, 0.50625, -1.2, 0.78125, 0.0625, -0.1]
org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.STATIC_E[] elements <= 0.78125
size(org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.STATIC_C[]) == 6
size(org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.STATIC_A[]) == 6
size(org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.STATIC_B[]) == 7
size(org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.STATIC_E[]) == 7
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator:::OBJECT
this.fsal == false
this.c has only one value
this.c[] == [0.2222222222222222, 0.3333333333333333, 0.5, 0.6, 1.0, 1.0]
this.c[] elements <= 1.0
this.c[] elements >= 0.2222222222222222
this.c[] sorted by <=
this.a has only one value
this.a.getClass().getName() == double[][].class
this.a[] contains no nulls and has only one value, of length 6
this.a[] elements != null
this.b has only one value
this.b[] == [0.08333333333333333, 0.0, 0.84375, -1.3333333333333333, 1.3020833333333333, 0.10416666666666667, 0.0]
this.b[] elements <= 1.3020833333333333
this.prototype.getClass().getName() == org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolator.class
this.prototype.previousState == null
this.prototype.yDotK == null
this.prototype.integrator == null
this.prototype.h == Double.NaN
this.prototype.currentState == null
this.prototype.interpolatedTime == Double.NaN
this.prototype.interpolatedState == null
this.prototype.interpolatedDerivatives == null
this.prototype.interpolatedPrimaryState == null
this.prototype.interpolatedPrimaryDerivatives == null
this.prototype.interpolatedSecondaryState == null
this.prototype.interpolatedSecondaryDerivatives == null
this.prototype.globalPreviousTime == Double.NaN
this.prototype.globalCurrentTime == Double.NaN
this.prototype.softPreviousTime == Double.NaN
this.prototype.softCurrentTime == Double.NaN
this.prototype.forward == true
this.prototype.dirtyState == true
this.prototype.primaryMapper == null
this.prototype.secondaryMappers == null
this.exp one of { -0.2, 0.0 }
this.safety one of { 0.0, 0.9 }
this.minReduction one of { 0.0, 0.2 }
this.maxGrowth one of { 0.0, 10.0 }
this.scalAbsoluteTolerance >= 0.0
this.scalRelativeTolerance >= 0.0
this.vecAbsoluteTolerance[] == [1.0E-8, 1.0E-8, 1.0E-10, 1.0E-10]
this.vecAbsoluteTolerance[] elements one of { 1.0E-10, 1.0E-8 }
this.vecAbsoluteTolerance[] sorted by >=
this.vecRelativeTolerance[] == [1.0E-10, 1.0E-10, 1.0E-8, 1.0E-8]
this.vecRelativeTolerance[] elements one of { 1.0E-10, 1.0E-8 }
this.vecRelativeTolerance[] sorted by <=
this.mainSetDimension one of { 0, 2, 4 }
this.initialStep == -1.0
this.minStep == 0.0
this.maxStep one of { 4.0, 15.0, 20.0 }
this.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.isLastStep == false
this.eventsStates.getClass().getName() == java.util.ArrayList.class
this.name has only one value
this.name.toString == "Higham-Hall 5(4)"
this.evaluations.maximalCount == 2147483647
this.evaluations.count >= 0
this.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
this.expandable.primaryMapper.firstIndex == 0
this.expandable.primaryMapper.dimension one of { 2, 4 }
this.expandable.time == 0.0
this.expandable.components[] == []
this.expandable.components[].getClass().getName() == []
this.expandable.components.getClass().getName() == java.util.ArrayList.class
size(this.c[]) == 6
size(this.a[]) == 6
size(this.b[]) == 7
size(this.vecAbsoluteTolerance[]) == 4
size(this.vecRelativeTolerance[]) == 4
size(this.expandable.primaryState[]) one of { 2, 4 }
size(this.expandable.primaryStateDot[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.HighamHall54Integrator(double, double, double, double):::ENTER
minStep == 0.0
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.HighamHall54Integrator(double, double, double, double):::EXIT
this.prototype.finalized == false
this.exp == -0.2
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 10.0
this.vecAbsoluteTolerance == null
this.vecRelativeTolerance == null
this.mainSetDimension == 0
this.stepStart == Double.NaN
this.stepSize == 0.0
this.resetOccurred == false
this.statesInitialized == false
this.evaluations.count == 0
this.expandable == null
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.HighamHall54Integrator(double, double, double[], double[]):::ENTER
minStep == 0.0
maxStep == 20.0
vecAbsoluteTolerance has only one value
vecAbsoluteTolerance[] == [1.0E-8, 1.0E-8, 1.0E-10, 1.0E-10]
vecAbsoluteTolerance[] elements one of { 1.0E-10, 1.0E-8 }
vecRelativeTolerance has only one value
vecRelativeTolerance[] == [1.0E-10, 1.0E-10, 1.0E-8, 1.0E-8]
vecRelativeTolerance[] elements one of { 1.0E-10, 1.0E-8 }
size(vecAbsoluteTolerance[]) == 4
size(vecRelativeTolerance[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.HighamHall54Integrator(double, double, double[], double[]):::EXIT
vecAbsoluteTolerance[] == orig(vecAbsoluteTolerance[])
vecRelativeTolerance[] == orig(vecRelativeTolerance[])
this.prototype has only one value
this.prototype.finalized == false
this.exp == -0.2
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 10.0
this.scalAbsoluteTolerance == 0.0
this.scalRelativeTolerance == 0.0
this.vecAbsoluteTolerance has only one value
this.vecRelativeTolerance has only one value
this.mainSetDimension == 0
this.maxStep == 20.0
this.stepHandlers has only one value
this.stepStart == Double.NaN
this.stepSize == 0.0
this.resetOccurred == false
this.eventsStates has only one value
this.statesInitialized == false
this.evaluations has only one value
this.evaluations.count == 0
this.evaluations.maxCountCallback has only one value
this.expandable == null
vecAbsoluteTolerance[] == [1.0E-8, 1.0E-8, 1.0E-10, 1.0E-10]
vecAbsoluteTolerance[] elements one of { 1.0E-10, 1.0E-8 }
vecRelativeTolerance[] == [1.0E-10, 1.0E-10, 1.0E-8, 1.0E-8]
vecRelativeTolerance[] elements one of { 1.0E-10, 1.0E-8 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.estimateError(double[][], double[], double[], double):::ENTER
this.prototype.finalized == true
this.exp == -0.2
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 10.0
this.mainSetDimension one of { 2, 4 }
this.expandable.primaryState[] elements != 0
this.expandable.primaryStateDot[] elements != 0
yDotK.getClass().getName() == double[][].class
yDotK[] elements != null
y1[] elements != 0
size(yDotK[]) == 7
size(y0[]) one of { 2, 4 }
size(y1[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.estimateError(double[][], double[], double[], double):::EXIT
org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.METHOD_NAME == orig(org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.METHOD_NAME)
org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.METHOD_NAME.toString == orig(org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.METHOD_NAME.toString)
org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.STATIC_C == orig(org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.STATIC_C)
org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.STATIC_C[] == orig(org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.STATIC_C[])
org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.STATIC_A == orig(org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.STATIC_A)
org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.STATIC_A.getClass().getName() == orig(org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.STATIC_A.getClass().getName())
org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.STATIC_A[] == orig(org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.STATIC_A[])
org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.STATIC_B == orig(org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.STATIC_B)
org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.STATIC_B[] == orig(org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.STATIC_B[])
org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.STATIC_E == orig(org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.STATIC_E)
org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.STATIC_E[] == orig(org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.STATIC_E[])
this.fsal == orig(this.fsal)
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a.getClass().getName() == orig(this.a.getClass().getName())
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.previousState == orig(this.prototype.previousState)
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.integrator == orig(this.prototype.integrator)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.interpolatedDerivatives == orig(this.prototype.interpolatedDerivatives)
this.prototype.interpolatedPrimaryState == orig(this.prototype.interpolatedPrimaryState)
this.prototype.interpolatedPrimaryDerivatives == orig(this.prototype.interpolatedPrimaryDerivatives)
this.prototype.interpolatedSecondaryState == orig(this.prototype.interpolatedSecondaryState)
this.prototype.interpolatedSecondaryDerivatives == orig(this.prototype.interpolatedSecondaryDerivatives)
this.prototype.finalized == orig(this.prototype.finalized)
this.prototype.forward == orig(this.prototype.forward)
this.prototype.dirtyState == orig(this.prototype.dirtyState)
this.prototype.primaryMapper == orig(this.prototype.primaryMapper)
this.prototype.secondaryMappers == orig(this.prototype.secondaryMappers)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.minReduction == orig(this.minReduction)
this.maxGrowth == orig(this.maxGrowth)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecAbsoluteTolerance[] == orig(this.vecAbsoluteTolerance[])
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.vecRelativeTolerance[] == orig(this.vecRelativeTolerance[])
this.mainSetDimension == orig(this.mainSetDimension)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
this.expandable.primary == orig(this.expandable.primary)
this.expandable.primary.getClass().getName() == orig(this.expandable.primary.getClass().getName())
this.expandable.primaryMapper == orig(this.expandable.primaryMapper)
this.expandable.primaryMapper.firstIndex == orig(this.expandable.primaryMapper.firstIndex)
this.expandable.primaryMapper.dimension == orig(this.expandable.primaryMapper.dimension)
this.expandable.time == orig(this.expandable.time)
this.expandable.primaryState == orig(this.expandable.primaryState)
this.expandable.primaryState[] == orig(this.expandable.primaryState[])
this.expandable.primaryStateDot == orig(this.expandable.primaryStateDot)
this.expandable.primaryStateDot[] == orig(this.expandable.primaryStateDot[])
this.expandable.components == orig(this.expandable.components)
this.expandable.components[] == orig(this.expandable.components[])
this.expandable.components.getClass().getName() == orig(this.expandable.components.getClass().getName())
yDotK[] == orig(yDotK[])
y0[] == orig(y0[])
y1[] == orig(y1[])
this.prototype.finalized == true
this.exp == -0.2
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 10.0
this.mainSetDimension one of { 2, 4 }
this.expandable.primaryState[] elements != 0
this.expandable.primaryStateDot[] elements != 0
yDotK[] elements != null
y1[] elements != 0
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.getOrder():::ENTER
this.stepStart one of { 0.0, Double.NaN }
this.stepSize == 0.0
this.resetOccurred == false
this.statesInitialized == false
this.evaluations.count one of { 0, 1 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.getOrder():::EXIT
org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.METHOD_NAME == orig(org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.METHOD_NAME)
org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.METHOD_NAME.toString == orig(org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.METHOD_NAME.toString)
org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.STATIC_C == orig(org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.STATIC_C)
org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.STATIC_C[] == orig(org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.STATIC_C[])
org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.STATIC_A == orig(org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.STATIC_A)
org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.STATIC_A.getClass().getName() == orig(org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.STATIC_A.getClass().getName())
org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.STATIC_A[] == orig(org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.STATIC_A[])
org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.STATIC_B == orig(org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.STATIC_B)
org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.STATIC_B[] == orig(org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.STATIC_B[])
org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.STATIC_E == orig(org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.STATIC_E)
org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.STATIC_E[] == orig(org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.STATIC_E[])
this.fsal == orig(this.fsal)
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a.getClass().getName() == orig(this.a.getClass().getName())
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.previousState == orig(this.prototype.previousState)
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.integrator == orig(this.prototype.integrator)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.interpolatedDerivatives == orig(this.prototype.interpolatedDerivatives)
this.prototype.interpolatedPrimaryState == orig(this.prototype.interpolatedPrimaryState)
this.prototype.interpolatedPrimaryDerivatives == orig(this.prototype.interpolatedPrimaryDerivatives)
this.prototype.interpolatedSecondaryState == orig(this.prototype.interpolatedSecondaryState)
this.prototype.interpolatedSecondaryDerivatives == orig(this.prototype.interpolatedSecondaryDerivatives)
this.prototype.finalized == orig(this.prototype.finalized)
this.prototype.forward == orig(this.prototype.forward)
this.prototype.dirtyState == orig(this.prototype.dirtyState)
this.prototype.primaryMapper == orig(this.prototype.primaryMapper)
this.prototype.secondaryMappers == orig(this.prototype.secondaryMappers)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.minReduction == orig(this.minReduction)
this.maxGrowth == orig(this.maxGrowth)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecAbsoluteTolerance[] == orig(this.vecAbsoluteTolerance[])
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.vecRelativeTolerance[] == orig(this.vecRelativeTolerance[])
this.mainSetDimension == orig(this.mainSetDimension)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepSize == orig(this.stepSize)
this.isLastStep == orig(this.isLastStep)
this.resetOccurred == orig(this.resetOccurred)
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.statesInitialized == orig(this.statesInitialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.count == orig(this.evaluations.count)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable == orig(this.expandable)
this.expandable.primary == orig(this.expandable.primary)
this.expandable.primary.getClass().getName() == orig(this.expandable.primary.getClass().getName())
this.expandable.primaryMapper == orig(this.expandable.primaryMapper)
this.expandable.primaryMapper.firstIndex == orig(this.expandable.primaryMapper.firstIndex)
this.expandable.primaryMapper.dimension == orig(this.expandable.primaryMapper.dimension)
this.expandable.time == orig(this.expandable.time)
this.expandable.primaryState == orig(this.expandable.primaryState)
this.expandable.primaryState[] == orig(this.expandable.primaryState[])
this.expandable.primaryStateDot == orig(this.expandable.primaryStateDot)
this.expandable.primaryStateDot[] == orig(this.expandable.primaryStateDot[])
this.expandable.components == orig(this.expandable.components)
this.expandable.components[] == orig(this.expandable.components[])
this.expandable.components.getClass().getName() == orig(this.expandable.components.getClass().getName())
this.stepStart one of { 0.0, Double.NaN }
this.stepSize == 0.0
this.resetOccurred == false
this.statesInitialized == false
this.evaluations.count one of { 0, 1 }
return == 5
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest$2:::OBJECT
this has only one value
this.val$pb has only one value
this.val$pb.y has only one value
this.val$pb.y[] sorted by >=
this.val$pb.n == 2
this.val$pb.calls >= 0
this.val$pb.t0 == 0.0
this.val$pb.y0 has only one value
this.val$pb.y0[] == [1.0, 0.1]
this.val$pb.y0[] elements one of { 0.1, 1.0 }
this.val$pb.y0[] sorted by >
this.val$pb.t1 == 4.0
this.val$pb.errorScale has only one value
this.val$pb.errorScale[] == [1.0, 1.0]
this.val$pb.errorScale[] elements == 1.0
org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest.this has only one value
size(this.val$pb.y[]) == 2
size(this.val$pb.y0[]) == 2
size(this.val$pb.errorScale[]) == 2
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest$2.(org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math3.ode.TestProblem1):::ENTER
org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest.this has only one value
$hidden$2 has only one value
$hidden$2.y has only one value
$hidden$2.y[] == [0.0, 0.0]
$hidden$2.y[] elements == 0.0
$hidden$2.n == 2
$hidden$2.calls == 0
$hidden$2.t0 == 0.0
$hidden$2.y0 has only one value
$hidden$2.y0[] == [1.0, 0.1]
$hidden$2.y0[] elements one of { 0.1, 1.0 }
$hidden$2.t1 == 4.0
$hidden$2.errorScale has only one value
$hidden$2.errorScale[] == [1.0, 1.0]
$hidden$2.errorScale[] elements == 1.0
size($hidden$2.y[]) == 2
size($hidden$2.y0[]) == 2
size($hidden$2.errorScale[]) == 2
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest$2.(org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math3.ode.TestProblem1):::EXIT
org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest.this)
$hidden$2.y == orig($hidden$2.y)
$hidden$2.y[] == orig($hidden$2.y[])
$hidden$2.n == orig($hidden$2.n)
$hidden$2.calls == orig($hidden$2.calls)
$hidden$2.t0 == orig($hidden$2.t0)
$hidden$2.y0 == orig($hidden$2.y0)
$hidden$2.y0[] == orig($hidden$2.y0[])
$hidden$2.t1 == orig($hidden$2.t1)
$hidden$2.errorScale == orig($hidden$2.errorScale)
$hidden$2.errorScale[] == orig($hidden$2.errorScale[])
this.val$pb.y[] == [0.0, 0.0]
this.val$pb.y[] elements == 0.0
this.val$pb.calls == 0
$hidden$2.y has only one value
$hidden$2.y[] == [0.0, 0.0]
$hidden$2.y[] elements == 0.0
$hidden$2.n == 2
$hidden$2.calls == 0
$hidden$2.t0 == 0.0
$hidden$2.y0 has only one value
$hidden$2.y0[] == [1.0, 0.1]
$hidden$2.y0[] elements one of { 0.1, 1.0 }
$hidden$2.t1 == 4.0
$hidden$2.errorScale has only one value
$hidden$2.errorScale[] == [1.0, 1.0]
$hidden$2.errorScale[] elements == 1.0
size($hidden$2.y[]) == 2
size($hidden$2.y0[]) == 2
size($hidden$2.errorScale[]) == 2
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest$2.g(double, double[]):::ENTER
y has only one value
y[] sorted by >
size(y[]) == 2
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest$2.g(double, double[]):::EXIT
this.val$pb == orig(this.val$pb)
this.val$pb.y == orig(this.val$pb.y)
this.val$pb.y[] == orig(this.val$pb.y[])
this.val$pb.n == orig(this.val$pb.n)
this.val$pb.calls == orig(this.val$pb.calls)
this.val$pb.t0 == orig(this.val$pb.t0)
this.val$pb.y0 == orig(this.val$pb.y0)
this.val$pb.y0[] == orig(this.val$pb.y0[])
this.val$pb.t1 == orig(this.val$pb.t1)
this.val$pb.errorScale == orig(this.val$pb.errorScale)
this.val$pb.errorScale[] == orig(this.val$pb.errorScale[])
org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest.this)
y[] == orig(y[])
y[] sorted by >
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest$2.init(double, double[], double):::ENTER
this.val$pb.y[] == [0.0, 0.0]
this.val$pb.y[] elements == 0.0
this.val$pb.calls == 0
t0 == 0.0
y0 has only one value
y0[] == [1.0, 0.1]
y0[] elements one of { 0.1, 1.0 }
t == 4.0
size(y0[]) == 2
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest$2.init(double, double[], double):::EXIT
this.val$pb == orig(this.val$pb)
this.val$pb.y == orig(this.val$pb.y)
this.val$pb.y[] == orig(this.val$pb.y[])
this.val$pb.n == orig(this.val$pb.n)
this.val$pb.calls == orig(this.val$pb.calls)
this.val$pb.t0 == orig(this.val$pb.t0)
this.val$pb.y0 == orig(this.val$pb.y0)
this.val$pb.y0[] == orig(this.val$pb.y0[])
this.val$pb.t1 == orig(this.val$pb.t1)
this.val$pb.errorScale == orig(this.val$pb.errorScale)
this.val$pb.errorScale[] == orig(this.val$pb.errorScale[])
org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest.this)
y0[] == orig(y0[])
this.val$pb.y[] == [0.0, 0.0]
this.val$pb.y[] elements == 0.0
this.val$pb.calls == 0
y0[] == [1.0, 0.1]
y0[] elements one of { 0.1, 1.0 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest$3:::OBJECT
this has only one value
this.val$pb has only one value
this.val$pb.y has only one value
this.val$pb.y[] sorted by >=
this.val$pb.n == 2
this.val$pb.calls >= 0
this.val$pb.t0 == 0.0
this.val$pb.y0 has only one value
this.val$pb.y0[] == [1.0, 0.1]
this.val$pb.y0[] elements one of { 0.1, 1.0 }
this.val$pb.y0[] sorted by >
this.val$pb.t1 == 4.0
this.val$pb.errorScale has only one value
this.val$pb.errorScale[] == [1.0, 1.0]
this.val$pb.errorScale[] elements == 1.0
org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest.this has only one value
size(this.val$pb.y[]) == 2
size(this.val$pb.y0[]) == 2
size(this.val$pb.errorScale[]) == 2
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest$3.(org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math3.ode.TestProblem1):::ENTER
org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest.this has only one value
$hidden$2 has only one value
$hidden$2.y has only one value
$hidden$2.y[] == [0.0, 0.0]
$hidden$2.y[] elements == 0.0
$hidden$2.n == 2
$hidden$2.calls == 0
$hidden$2.t0 == 0.0
$hidden$2.y0 has only one value
$hidden$2.y0[] == [1.0, 0.1]
$hidden$2.y0[] elements one of { 0.1, 1.0 }
$hidden$2.t1 == 4.0
$hidden$2.errorScale has only one value
$hidden$2.errorScale[] == [1.0, 1.0]
$hidden$2.errorScale[] elements == 1.0
size($hidden$2.y[]) == 2
size($hidden$2.y0[]) == 2
size($hidden$2.errorScale[]) == 2
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest$3.(org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math3.ode.TestProblem1):::EXIT
org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest.this)
$hidden$2.y == orig($hidden$2.y)
$hidden$2.y[] == orig($hidden$2.y[])
$hidden$2.n == orig($hidden$2.n)
$hidden$2.calls == orig($hidden$2.calls)
$hidden$2.t0 == orig($hidden$2.t0)
$hidden$2.y0 == orig($hidden$2.y0)
$hidden$2.y0[] == orig($hidden$2.y0[])
$hidden$2.t1 == orig($hidden$2.t1)
$hidden$2.errorScale == orig($hidden$2.errorScale)
$hidden$2.errorScale[] == orig($hidden$2.errorScale[])
this.val$pb.y[] == [0.0, 0.0]
this.val$pb.y[] elements == 0.0
this.val$pb.calls == 0
$hidden$2.y has only one value
$hidden$2.y[] == [0.0, 0.0]
$hidden$2.y[] elements == 0.0
$hidden$2.n == 2
$hidden$2.calls == 0
$hidden$2.t0 == 0.0
$hidden$2.y0 has only one value
$hidden$2.y0[] == [1.0, 0.1]
$hidden$2.y0[] elements one of { 0.1, 1.0 }
$hidden$2.t1 == 4.0
$hidden$2.errorScale has only one value
$hidden$2.errorScale[] == [1.0, 1.0]
$hidden$2.errorScale[] elements == 1.0
size($hidden$2.y[]) == 2
size($hidden$2.y0[]) == 2
size($hidden$2.errorScale[]) == 2
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest$3.g(double, double[]):::ENTER
y has only one value
y[] sorted by >
size(y[]) == 2
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest$3.g(double, double[]):::EXIT
this.val$pb == orig(this.val$pb)
this.val$pb.y == orig(this.val$pb.y)
this.val$pb.y[] == orig(this.val$pb.y[])
this.val$pb.n == orig(this.val$pb.n)
this.val$pb.calls == orig(this.val$pb.calls)
this.val$pb.t0 == orig(this.val$pb.t0)
this.val$pb.y0 == orig(this.val$pb.y0)
this.val$pb.y0[] == orig(this.val$pb.y0[])
this.val$pb.t1 == orig(this.val$pb.t1)
this.val$pb.errorScale == orig(this.val$pb.errorScale)
this.val$pb.errorScale[] == orig(this.val$pb.errorScale[])
org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest.this)
y[] == orig(y[])
y[] sorted by >
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest$3.init(double, double[], double):::ENTER
this.val$pb.y[] == [0.0, 0.0]
this.val$pb.y[] elements == 0.0
this.val$pb.calls == 0
t0 == 0.0
y0 has only one value
y0[] == [1.0, 0.1]
y0[] elements one of { 0.1, 1.0 }
t == 4.0
size(y0[]) == 2
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest$3.init(double, double[], double):::EXIT
this.val$pb == orig(this.val$pb)
this.val$pb.y == orig(this.val$pb.y)
this.val$pb.y[] == orig(this.val$pb.y[])
this.val$pb.n == orig(this.val$pb.n)
this.val$pb.calls == orig(this.val$pb.calls)
this.val$pb.t0 == orig(this.val$pb.t0)
this.val$pb.y0 == orig(this.val$pb.y0)
this.val$pb.y0[] == orig(this.val$pb.y0[])
this.val$pb.t1 == orig(this.val$pb.t1)
this.val$pb.errorScale == orig(this.val$pb.errorScale)
this.val$pb.errorScale[] == orig(this.val$pb.errorScale[])
org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest.this)
y0[] == orig(y0[])
this.val$pb.y[] == [0.0, 0.0]
this.val$pb.y[] elements == 0.0
this.val$pb.calls == 0
y0[] == [1.0, 0.1]
y0[] elements one of { 0.1, 1.0 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest$LocalException:::CLASS
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest$LocalException:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest$LocalException.LocalException():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest:::OBJECT
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest.HighamHall54IntegratorTest():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest.testBackward():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest.testBackward():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest.testEvents():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest.testEvents():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest.testEventsNoConvergence():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest.testEventsNoConvergence():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest.testIncreasingTolerance():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest.testIncreasingTolerance():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest.testKepler():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest.testKepler():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolator:::CLASS
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolator:::OBJECT
this.yDotK.getClass().getName() == double[][].class
this.yDotK[] elements != null
this.integrator.getClass().getName() == org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.class
this.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.integrator.eventsStates.getClass().getName() == java.util.ArrayList.class
this.integrator.name has only one value
this.integrator.name.toString == "Higham-Hall 5(4)"
this.integrator.evaluations.maximalCount == 2147483647
this.integrator.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
this.integrator.expandable.time == 0.0
this.integrator.expandable.primaryState[] elements != 0
this.integrator.expandable.primaryStateDot[] elements != 0
this.integrator.expandable.components[] == []
this.integrator.expandable.components[].getClass().getName() == []
this.integrator.expandable.components.getClass().getName() == java.util.ArrayList.class
this.currentState[] elements != 0
this.interpolatedSecondaryState.getClass().getName() == double[][].class
this.interpolatedSecondaryState[] == []
this.interpolatedSecondaryDerivatives.getClass().getName() == double[][].class
this.interpolatedSecondaryDerivatives[] == []
this.primaryMapper.firstIndex == 0
this.primaryMapper.dimension one of { 2, 4 }
this.secondaryMappers.getClass().getName() == org.apache.commons.math3.ode.EquationsMapper[].class
this.secondaryMappers[] == []
this.secondaryMappers[].getClass().getName() == []
this.secondaryMappers[].firstIndex == []
this.secondaryMappers[].dimension == []
size(this.previousState[]) one of { 2, 4 }
size(this.yDotK[]) == 7
size(this.integrator.expandable.primaryState[]) one of { 2, 4 }
size(this.integrator.expandable.primaryStateDot[]) one of { 2, 4 }
size(this.currentState[]) one of { 2, 4 }
size(this.interpolatedState[]) one of { 2, 4 }
size(this.interpolatedDerivatives[]) one of { 2, 4 }
size(this.interpolatedPrimaryState[]) one of { 2, 4 }
size(this.interpolatedPrimaryDerivatives[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolator.HighamHall54StepInterpolator():::EXIT
this.previousState == null
this.yDotK == null
this.integrator == null
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.interpolatedPrimaryState == null
this.interpolatedPrimaryDerivatives == null
this.interpolatedSecondaryState == null
this.interpolatedSecondaryDerivatives == null
this.globalPreviousTime == Double.NaN
this.globalCurrentTime == Double.NaN
this.softPreviousTime == Double.NaN
this.softCurrentTime == Double.NaN
this.finalized == false
this.forward == true
this.dirtyState == true
this.primaryMapper == null
this.secondaryMappers == null
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolator.HighamHall54StepInterpolator(org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolator):::ENTER
interpolator.yDotK.getClass().getName() == double[][].class
interpolator.yDotK[] elements != null
interpolator.integrator.getClass().getName() == org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.class
interpolator.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.resetOccurred == false
interpolator.integrator.eventsStates.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.statesInitialized == true
interpolator.integrator.name has only one value
interpolator.integrator.name.toString == "Higham-Hall 5(4)"
interpolator.currentState[] elements != 0
interpolator.interpolatedState[] elements != 0
interpolator.interpolatedDerivatives[] elements != 0
interpolator.interpolatedPrimaryState[] elements != 0
interpolator.interpolatedPrimaryDerivatives[] == [0.0, 0.0, 0.0, 0.0]
interpolator.interpolatedPrimaryDerivatives[] elements == 0.0
interpolator.interpolatedSecondaryState.getClass().getName() == double[][].class
interpolator.interpolatedSecondaryState[] == []
interpolator.interpolatedSecondaryDerivatives.getClass().getName() == double[][].class
interpolator.interpolatedSecondaryDerivatives[] == []
interpolator.finalized == true
interpolator.forward == true
interpolator.primaryMapper.firstIndex == 0
interpolator.primaryMapper.dimension == 4
interpolator.secondaryMappers.getClass().getName() == org.apache.commons.math3.ode.EquationsMapper[].class
interpolator.secondaryMappers[] == []
interpolator.secondaryMappers[].getClass().getName() == []
interpolator.secondaryMappers[].firstIndex == []
interpolator.secondaryMappers[].dimension == []
size(interpolator.previousState[]) == 4
size(interpolator.yDotK[]) == 7
size(interpolator.currentState[]) == 4
size(interpolator.interpolatedState[]) == 4
size(interpolator.interpolatedDerivatives[]) == 4
size(interpolator.interpolatedPrimaryState[]) == 4
size(interpolator.interpolatedPrimaryDerivatives[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolator.HighamHall54StepInterpolator(org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolator):::EXIT
interpolator.previousState == orig(interpolator.previousState)
interpolator.previousState[] == orig(interpolator.previousState[])
interpolator.yDotK == orig(interpolator.yDotK)
interpolator.yDotK.getClass().getName() == orig(interpolator.yDotK.getClass().getName())
interpolator.yDotK[] == orig(interpolator.yDotK[])
interpolator.integrator == orig(interpolator.integrator)
interpolator.integrator.getClass().getName() == orig(interpolator.integrator.getClass().getName())
interpolator.integrator.stepHandlers == orig(interpolator.integrator.stepHandlers)
interpolator.integrator.stepHandlers.getClass().getName() == orig(interpolator.integrator.stepHandlers.getClass().getName())
interpolator.integrator.stepStart == orig(interpolator.integrator.stepStart)
interpolator.integrator.stepSize == orig(interpolator.integrator.stepSize)
interpolator.integrator.isLastStep == orig(interpolator.integrator.isLastStep)
interpolator.integrator.resetOccurred == orig(interpolator.integrator.resetOccurred)
interpolator.integrator.eventsStates == orig(interpolator.integrator.eventsStates)
interpolator.integrator.eventsStates.getClass().getName() == orig(interpolator.integrator.eventsStates.getClass().getName())
interpolator.integrator.statesInitialized == orig(interpolator.integrator.statesInitialized)
interpolator.integrator.name == orig(interpolator.integrator.name)
interpolator.integrator.name.toString == orig(interpolator.integrator.name.toString)
interpolator.integrator.evaluations == orig(interpolator.integrator.evaluations)
interpolator.integrator.expandable == orig(interpolator.integrator.expandable)
interpolator.currentState == orig(interpolator.currentState)
interpolator.currentState[] == orig(interpolator.currentState[])
interpolator.interpolatedState == orig(interpolator.interpolatedState)
interpolator.interpolatedState[] == orig(interpolator.interpolatedState[])
interpolator.interpolatedDerivatives == orig(interpolator.interpolatedDerivatives)
interpolator.interpolatedDerivatives[] == orig(interpolator.interpolatedDerivatives[])
interpolator.interpolatedPrimaryState == orig(interpolator.interpolatedPrimaryState)
interpolator.interpolatedPrimaryState[] == orig(interpolator.interpolatedPrimaryState[])
interpolator.interpolatedPrimaryDerivatives == orig(interpolator.interpolatedPrimaryDerivatives)
interpolator.interpolatedPrimaryDerivatives[] == orig(interpolator.interpolatedPrimaryDerivatives[])
interpolator.interpolatedSecondaryState == orig(interpolator.interpolatedSecondaryState)
interpolator.interpolatedSecondaryState.getClass().getName() == orig(interpolator.interpolatedSecondaryState.getClass().getName())
interpolator.interpolatedSecondaryState[] == orig(interpolator.interpolatedSecondaryState[])
interpolator.interpolatedSecondaryDerivatives == orig(interpolator.interpolatedSecondaryDerivatives)
interpolator.interpolatedSecondaryDerivatives.getClass().getName() == orig(interpolator.interpolatedSecondaryDerivatives.getClass().getName())
interpolator.interpolatedSecondaryDerivatives[] == orig(interpolator.interpolatedSecondaryDerivatives[])
interpolator.finalized == orig(interpolator.finalized)
interpolator.forward == orig(interpolator.forward)
interpolator.dirtyState == orig(interpolator.dirtyState)
interpolator.primaryMapper == orig(interpolator.primaryMapper)
interpolator.primaryMapper.firstIndex == orig(interpolator.primaryMapper.firstIndex)
interpolator.primaryMapper.dimension == orig(interpolator.primaryMapper.dimension)
interpolator.secondaryMappers == orig(interpolator.secondaryMappers)
interpolator.secondaryMappers.getClass().getName() == orig(interpolator.secondaryMappers.getClass().getName())
interpolator.secondaryMappers[] == orig(interpolator.secondaryMappers[])
interpolator.secondaryMappers[].firstIndex == orig(interpolator.secondaryMappers[].firstIndex)
interpolator.secondaryMappers[].dimension == orig(interpolator.secondaryMappers[].dimension)
this.integrator == null
this.interpolatedState[] elements != 0
this.interpolatedDerivatives[] elements != 0
this.interpolatedPrimaryState[] elements != 0
this.interpolatedPrimaryDerivatives[] == [0.0, 0.0, 0.0, 0.0]
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.finalized == true
this.forward == true
this.primaryMapper.dimension == 4
interpolator.yDotK.getClass().getName() == double[][].class
interpolator.yDotK[] elements != null
interpolator.integrator.getClass().getName() == org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator.class
interpolator.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.resetOccurred == false
interpolator.integrator.eventsStates.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.statesInitialized == true
interpolator.integrator.name has only one value
interpolator.integrator.name.toString == "Higham-Hall 5(4)"
interpolator.currentState[] elements != 0
interpolator.interpolatedState[] elements != 0
interpolator.interpolatedDerivatives[] elements != 0
interpolator.interpolatedPrimaryState[] elements != 0
interpolator.interpolatedPrimaryDerivatives[] == [0.0, 0.0, 0.0, 0.0]
interpolator.interpolatedPrimaryDerivatives[] elements == 0.0
interpolator.interpolatedSecondaryState.getClass().getName() == double[][].class
interpolator.interpolatedSecondaryState[] == []
interpolator.interpolatedSecondaryDerivatives.getClass().getName() == double[][].class
interpolator.interpolatedSecondaryDerivatives[] == []
interpolator.finalized == true
interpolator.forward == true
interpolator.primaryMapper.firstIndex == 0
interpolator.primaryMapper.dimension == 4
interpolator.secondaryMappers.getClass().getName() == org.apache.commons.math3.ode.EquationsMapper[].class
interpolator.secondaryMappers[] == []
interpolator.secondaryMappers[].getClass().getName() == []
interpolator.secondaryMappers[].firstIndex == []
interpolator.secondaryMappers[].dimension == []
size(this.previousState[]) == 4
size(this.currentState[]) == 4
size(this.interpolatedState[]) == 4
size(this.interpolatedDerivatives[]) == 4
size(this.interpolatedPrimaryState[]) == 4
size(this.interpolatedPrimaryDerivatives[]) == 4
size(interpolator.previousState[]) == 4
size(interpolator.yDotK[]) == 7
size(interpolator.currentState[]) == 4
size(interpolator.interpolatedState[]) == 4
size(interpolator.interpolatedDerivatives[]) == 4
size(interpolator.interpolatedPrimaryState[]) == 4
size(interpolator.interpolatedPrimaryDerivatives[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::ENTER
this.dirtyState == true
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::EXIT
this.previousState == orig(this.previousState)
this.previousState[] == orig(this.previousState[])
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.integrator.stepHandlers == orig(this.integrator.stepHandlers)
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.stepHandlers.getClass().getName())
this.integrator.stepStart == orig(this.integrator.stepStart)
this.integrator.stepSize == orig(this.integrator.stepSize)
this.integrator.isLastStep == orig(this.integrator.isLastStep)
this.integrator.resetOccurred == orig(this.integrator.resetOccurred)
this.integrator.eventsStates == orig(this.integrator.eventsStates)
this.integrator.eventsStates.getClass().getName() == orig(this.integrator.eventsStates.getClass().getName())
this.integrator.statesInitialized == orig(this.integrator.statesInitialized)
this.integrator.name == orig(this.integrator.name)
this.integrator.name.toString == orig(this.integrator.name.toString)
this.integrator.evaluations == orig(this.integrator.evaluations)
this.integrator.evaluations.maximalCount == orig(this.integrator.evaluations.maximalCount)
this.integrator.evaluations.count == orig(this.integrator.evaluations.count)
this.integrator.evaluations.maxCountCallback == orig(this.integrator.evaluations.maxCountCallback)
this.integrator.evaluations.maxCountCallback.getClass().getName() == orig(this.integrator.evaluations.maxCountCallback.getClass().getName())
this.integrator.expandable == orig(this.integrator.expandable)
this.integrator.expandable.primary == orig(this.integrator.expandable.primary)
this.integrator.expandable.primary.getClass().getName() == orig(this.integrator.expandable.primary.getClass().getName())
this.integrator.expandable.primaryMapper == orig(this.integrator.expandable.primaryMapper)
this.integrator.expandable.time == orig(this.integrator.expandable.time)
this.integrator.expandable.primaryState == orig(this.integrator.expandable.primaryState)
this.integrator.expandable.primaryState[] == orig(this.integrator.expandable.primaryState[])
this.integrator.expandable.primaryStateDot == orig(this.integrator.expandable.primaryStateDot)
this.integrator.expandable.primaryStateDot[] == orig(this.integrator.expandable.primaryStateDot[])
this.integrator.expandable.components == orig(this.integrator.expandable.components)
this.integrator.expandable.components[] == orig(this.integrator.expandable.components[])
this.integrator.expandable.components.getClass().getName() == orig(this.integrator.expandable.components.getClass().getName())
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedPrimaryState == orig(this.interpolatedPrimaryState)
this.interpolatedPrimaryState[] == orig(this.interpolatedPrimaryState[])
this.interpolatedPrimaryDerivatives == orig(this.interpolatedPrimaryDerivatives)
this.interpolatedPrimaryDerivatives[] == orig(this.interpolatedPrimaryDerivatives[])
this.interpolatedSecondaryState == orig(this.interpolatedSecondaryState)
this.interpolatedSecondaryState.getClass().getName() == orig(this.interpolatedSecondaryState.getClass().getName())
this.interpolatedSecondaryState[] == orig(this.interpolatedSecondaryState[])
this.interpolatedSecondaryDerivatives == orig(this.interpolatedSecondaryDerivatives)
this.interpolatedSecondaryDerivatives.getClass().getName() == orig(this.interpolatedSecondaryDerivatives.getClass().getName())
this.interpolatedSecondaryDerivatives[] == orig(this.interpolatedSecondaryDerivatives[])
this.globalPreviousTime == orig(this.globalPreviousTime)
this.globalCurrentTime == orig(this.globalCurrentTime)
this.softPreviousTime == orig(this.softPreviousTime)
this.softCurrentTime == orig(this.softCurrentTime)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.secondaryMappers == orig(this.secondaryMappers)
this.secondaryMappers.getClass().getName() == orig(this.secondaryMappers.getClass().getName())
this.secondaryMappers[] == orig(this.secondaryMappers[])
this.secondaryMappers[].firstIndex == orig(this.secondaryMappers[].firstIndex)
this.secondaryMappers[].dimension == orig(this.secondaryMappers[].dimension)
size(this.interpolatedState[]) == orig(size(this.interpolatedState[]))
size(this.interpolatedDerivatives[]) == orig(size(this.interpolatedDerivatives[]))
this.dirtyState == true
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolator.doCopy():::ENTER
this.integrator.resetOccurred == false
this.integrator.statesInitialized == true
this.integrator.expandable.primary.getClass().getName() == org.apache.commons.math3.ode.TestProblem3.class
this.interpolatedState[] elements != 0
this.interpolatedDerivatives[] elements != 0
this.interpolatedPrimaryState[] elements != 0
this.interpolatedPrimaryDerivatives[] == [0.0, 0.0, 0.0, 0.0]
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.finalized == true
this.forward == true
this.primaryMapper.dimension == 4
size(this.previousState[]) == 4
size(this.integrator.expandable.primaryState[]) == 4
size(this.integrator.expandable.primaryStateDot[]) == 4
size(this.currentState[]) == 4
size(this.interpolatedState[]) == 4
size(this.interpolatedDerivatives[]) == 4
size(this.interpolatedPrimaryState[]) == 4
size(this.interpolatedPrimaryDerivatives[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolator.doCopy():::EXIT
this.previousState == orig(this.previousState)
this.previousState[] == orig(this.previousState[])
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.integrator.stepHandlers == orig(this.integrator.stepHandlers)
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.stepHandlers.getClass().getName())
this.integrator.stepStart == orig(this.integrator.stepStart)
this.integrator.stepSize == orig(this.integrator.stepSize)
this.integrator.isLastStep == orig(this.integrator.isLastStep)
this.integrator.resetOccurred == orig(this.integrator.resetOccurred)
this.integrator.eventsStates == orig(this.integrator.eventsStates)
this.integrator.eventsStates.getClass().getName() == orig(this.integrator.eventsStates.getClass().getName())
this.integrator.statesInitialized == orig(this.integrator.statesInitialized)
this.integrator.name == orig(this.integrator.name)
this.integrator.name.toString == orig(this.integrator.name.toString)
this.integrator.evaluations == orig(this.integrator.evaluations)
this.integrator.evaluations.maximalCount == orig(this.integrator.evaluations.maximalCount)
this.integrator.evaluations.count == orig(this.integrator.evaluations.count)
this.integrator.evaluations.maxCountCallback == orig(this.integrator.evaluations.maxCountCallback)
this.integrator.evaluations.maxCountCallback.getClass().getName() == orig(this.integrator.evaluations.maxCountCallback.getClass().getName())
this.integrator.expandable == orig(this.integrator.expandable)
this.integrator.expandable.primary == orig(this.integrator.expandable.primary)
this.integrator.expandable.primary.getClass().getName() == orig(this.integrator.expandable.primary.getClass().getName())
this.integrator.expandable.primaryMapper == orig(this.integrator.expandable.primaryMapper)
this.integrator.expandable.time == orig(this.integrator.expandable.time)
this.integrator.expandable.primaryState == orig(this.integrator.expandable.primaryState)
this.integrator.expandable.primaryState[] == orig(this.integrator.expandable.primaryState[])
this.integrator.expandable.primaryStateDot == orig(this.integrator.expandable.primaryStateDot)
this.integrator.expandable.primaryStateDot[] == orig(this.integrator.expandable.primaryStateDot[])
this.integrator.expandable.components == orig(this.integrator.expandable.components)
this.integrator.expandable.components[] == orig(this.integrator.expandable.components[])
this.integrator.expandable.components.getClass().getName() == orig(this.integrator.expandable.components.getClass().getName())
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.interpolatedPrimaryState == orig(this.interpolatedPrimaryState)
this.interpolatedPrimaryState[] == orig(this.interpolatedPrimaryState[])
this.interpolatedPrimaryDerivatives == orig(this.interpolatedPrimaryDerivatives)
this.interpolatedPrimaryDerivatives[] == orig(this.interpolatedPrimaryDerivatives[])
this.interpolatedSecondaryState == orig(this.interpolatedSecondaryState)
this.interpolatedSecondaryState.getClass().getName() == orig(this.interpolatedSecondaryState.getClass().getName())
this.interpolatedSecondaryState[] == orig(this.interpolatedSecondaryState[])
this.interpolatedSecondaryDerivatives == orig(this.interpolatedSecondaryDerivatives)
this.interpolatedSecondaryDerivatives.getClass().getName() == orig(this.interpolatedSecondaryDerivatives.getClass().getName())
this.interpolatedSecondaryDerivatives[] == orig(this.interpolatedSecondaryDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.secondaryMappers == orig(this.secondaryMappers)
this.secondaryMappers.getClass().getName() == orig(this.secondaryMappers.getClass().getName())
this.secondaryMappers[] == orig(this.secondaryMappers[])
this.secondaryMappers[].firstIndex == orig(this.secondaryMappers[].firstIndex)
this.secondaryMappers[].dimension == orig(this.secondaryMappers[].dimension)
this.integrator.resetOccurred == false
this.integrator.statesInitialized == true
this.integrator.expandable.primary.getClass().getName() == org.apache.commons.math3.ode.TestProblem3.class
this.interpolatedState[] elements != 0
this.interpolatedDerivatives[] elements != 0
this.interpolatedPrimaryState[] elements != 0
this.interpolatedPrimaryDerivatives[] == [0.0, 0.0, 0.0, 0.0]
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.finalized == true
this.forward == true
this.primaryMapper.dimension == 4
return.getClass().getName() == org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolator.class
size(this.previousState[]) == 4
size(this.integrator.expandable.primaryState[]) == 4
size(this.integrator.expandable.primaryStateDot[]) == 4
size(this.currentState[]) == 4
size(this.interpolatedState[]) == 4
size(this.interpolatedDerivatives[]) == 4
size(this.interpolatedPrimaryState[]) == 4
size(this.interpolatedPrimaryDerivatives[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolatorTest$1:::OBJECT
this has only one value
org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolatorTest.this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolatorTest$1.(org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolatorTest):::ENTER
org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolatorTest.this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolatorTest$1.(org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolatorTest):::EXIT
org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolatorTest.this == orig(org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolatorTest.this)
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolatorTest$1.handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean):::ENTER
interpolator has only one value
interpolator.getClass().getName() == org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolator.class
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolatorTest$1.handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean):::EXIT
org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolatorTest.this == orig(org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolatorTest.this)
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolatorTest$1.init(double, double[], double):::ENTER
t0 == 0.0
y0 has only one value
y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
t == 20.0
size(y0[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolatorTest$1.init(double, double[], double):::EXIT
org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolatorTest.this == orig(org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolatorTest.this)
y0[] == orig(y0[])
y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolatorTest:::OBJECT
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolatorTest.HighamHall54StepInterpolatorTest():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolatorTest.checkClone():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolatorTest.checkClone():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolatorTest.derivativesConsistency():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolatorTest.derivativesConsistency():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolatorTest.serialization():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolatorTest.serialization():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.MidpointIntegrator:::CLASS
org.apache.commons.math3.ode.nonstiff.MidpointIntegrator.STATIC_C has only one value
org.apache.commons.math3.ode.nonstiff.MidpointIntegrator.STATIC_C != null
org.apache.commons.math3.ode.nonstiff.MidpointIntegrator.STATIC_C[] == [0.5]
org.apache.commons.math3.ode.nonstiff.MidpointIntegrator.STATIC_C[] elements == 0.5
org.apache.commons.math3.ode.nonstiff.MidpointIntegrator.STATIC_A has only one value
org.apache.commons.math3.ode.nonstiff.MidpointIntegrator.STATIC_A != null
org.apache.commons.math3.ode.nonstiff.MidpointIntegrator.STATIC_A.getClass().getName() == double[][].class
org.apache.commons.math3.ode.nonstiff.MidpointIntegrator.STATIC_A[] contains no nulls and has only one value, of length 1
org.apache.commons.math3.ode.nonstiff.MidpointIntegrator.STATIC_A[] elements has only one value
org.apache.commons.math3.ode.nonstiff.MidpointIntegrator.STATIC_A[] elements != null
org.apache.commons.math3.ode.nonstiff.MidpointIntegrator.STATIC_B has only one value
org.apache.commons.math3.ode.nonstiff.MidpointIntegrator.STATIC_B != null
org.apache.commons.math3.ode.nonstiff.MidpointIntegrator.STATIC_B[] == [0.0, 1.0]
org.apache.commons.math3.ode.nonstiff.MidpointIntegrator.STATIC_B[] elements one of { 0.0, 1.0 }
org.apache.commons.math3.ode.nonstiff.MidpointIntegrator.STATIC_B[] sorted by <
size(org.apache.commons.math3.ode.nonstiff.MidpointIntegrator.STATIC_C[]) == 1
size(org.apache.commons.math3.ode.nonstiff.MidpointIntegrator.STATIC_A[]) == 1
size(org.apache.commons.math3.ode.nonstiff.MidpointIntegrator.STATIC_B[]) == 2
===========================================================================
org.apache.commons.math3.ode.nonstiff.MidpointIntegrator:::OBJECT
this.c has only one value
this.c != null
this.c[] == [0.5]
this.c[] elements == 0.5
this.a has only one value
this.a != null
this.a.getClass().getName() == double[][].class
this.a[] contains no nulls and has only one value, of length 1
this.a[] elements has only one value
this.a[] elements != null
this.b has only one value
this.b != null
this.b[] == [0.0, 1.0]
this.b[] elements one of { 0.0, 1.0 }
this.b[] sorted by <
this.prototype != null
this.prototype.getClass().getName() == org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolator.class
this.prototype.previousState == null
this.prototype.yDotK == null
this.prototype.integrator == null
this.prototype.h == Double.NaN
this.prototype.currentState == null
this.prototype.interpolatedTime == Double.NaN
this.prototype.interpolatedState == null
this.prototype.interpolatedDerivatives == null
this.prototype.interpolatedPrimaryState == null
this.prototype.interpolatedPrimaryDerivatives == null
this.prototype.interpolatedSecondaryState == null
this.prototype.interpolatedSecondaryDerivatives == null
this.prototype.globalPreviousTime == Double.NaN
this.prototype.globalCurrentTime == Double.NaN
this.prototype.softPreviousTime == Double.NaN
this.prototype.softCurrentTime == Double.NaN
this.prototype.finalized == false
this.prototype.forward == true
this.prototype.dirtyState == true
this.prototype.primaryMapper == null
this.prototype.secondaryMappers == null
this.stepHandlers != null
this.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.isLastStep == false
this.resetOccurred == false
this.eventsStates != null
this.eventsStates.getClass().getName() == java.util.ArrayList.class
this.statesInitialized == false
this.name has only one value
this.name != null
this.name.toString == "midpoint"
this.evaluations != null
this.evaluations.maximalCount == 2147483647
this.evaluations.count == 0
this.evaluations.maxCountCallback != null
this.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
this.expandable == null
size(this.c[]) == 1
size(this.a[]) == 1
size(this.b[]) == 2
===========================================================================
org.apache.commons.math3.ode.nonstiff.MidpointIntegrator.MidpointIntegrator(double):::ENTER
step != 0
===========================================================================
org.apache.commons.math3.ode.nonstiff.MidpointIntegrator.MidpointIntegrator(double):::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest$1:::OBJECT
this has only one value
org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest$1.(org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest):::ENTER
org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest$1.(org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest):::EXIT
org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest.this)
===========================================================================
org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest$1.handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean):::ENTER
interpolator has only one value
interpolator.getClass().getName() == org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolator.class
===========================================================================
org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest$1.handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean):::EXIT
org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest.this)
===========================================================================
org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest$1.init(double, double[], double):::ENTER
t0 == 0.0
y0 has only one value
y0[] == [0.0]
y0[] elements == 0.0
t == 5.0
size(y0[]) == 1
===========================================================================
org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest$1.init(double, double[], double):::EXIT
org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest.this)
y0[] == orig(y0[])
y0[] == [0.0]
y0[] elements == 0.0
===========================================================================
org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest$2:::OBJECT
this has only one value
org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest$2.(org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest):::ENTER
org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest$2.(org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest):::EXIT
org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest.this)
===========================================================================
org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest$2.computeDerivatives(double, double[], double[]):::ENTER
y has only one value
dot has only one value
dot[] elements one of { 0.0, 1.0 }
dot[] one of { [0.0], [1.0] }
size(y[]) == 1
size(dot[]) == 1
===========================================================================
org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest$2.computeDerivatives(double, double[], double[]):::EXIT
org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest.this)
y[] == orig(y[])
dot[] == [1.0]
dot[] elements == 1.0
dot[] >= orig(dot[]) (elementwise)
===========================================================================
org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest$2.getDimension():::ENTER
===========================================================================
org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest$2.getDimension():::EXIT
org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest.this)
return == 1
===========================================================================
org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest:::OBJECT
===========================================================================
org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest.MidpointIntegratorTest():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest.testBackward():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest.testBackward():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest.testBigStep():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest.testBigStep():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest.testDecreasingSteps():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest.testDecreasingSteps():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest.testSmallStep():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest.testSmallStep():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest.testStepSize():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest.testStepSize():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolator:::CLASS
===========================================================================
org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolator:::OBJECT
this.yDotK.getClass().getName() == double[][].class
this.yDotK[] elements != null
this.integrator.getClass().getName() == org.apache.commons.math3.ode.nonstiff.MidpointIntegrator.class
this.integrator.stepHandlers != null
this.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.integrator.stepSize != 0
this.integrator.stepSize <= 1.25
this.integrator.stepSize >= -0.25
this.integrator.eventsStates != null
this.integrator.eventsStates.getClass().getName() == java.util.ArrayList.class
this.integrator.name has only one value
this.integrator.name != null
this.integrator.name.toString == "midpoint"
this.integrator.evaluations != null
this.integrator.evaluations.maximalCount == 2147483647
this.integrator.evaluations.count >= 2
this.integrator.evaluations.maxCountCallback != null
this.integrator.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
this.integrator.expandable != null
this.integrator.expandable.primary != null
this.integrator.expandable.primaryMapper != null
this.integrator.expandable.time == 0.0
this.integrator.expandable.primaryState != null
this.integrator.expandable.primaryStateDot != null
this.integrator.expandable.components != null
this.integrator.expandable.components[] == []
this.integrator.expandable.components[].getClass().getName() == []
this.integrator.expandable.components.getClass().getName() == java.util.ArrayList.class
this.h != 0
this.h <= 1.25
this.h >= -0.25
this.interpolatedSecondaryState.getClass().getName() == double[][].class
this.interpolatedSecondaryState[] == []
this.interpolatedSecondaryDerivatives.getClass().getName() == double[][].class
this.interpolatedSecondaryDerivatives[] == []
this.globalCurrentTime != 0
this.softCurrentTime != 0
this.primaryMapper.firstIndex == 0
this.primaryMapper.dimension one of { 1, 2, 4 }
this.secondaryMappers.getClass().getName() == org.apache.commons.math3.ode.EquationsMapper[].class
this.secondaryMappers[] == []
this.secondaryMappers[].getClass().getName() == []
this.secondaryMappers[].firstIndex == []
this.secondaryMappers[].dimension == []
size(this.previousState[]) one of { 1, 2, 4 }
size(this.yDotK[]) == 2
size(this.integrator.expandable.primaryState[]) one of { 1, 2, 4 }
size(this.integrator.expandable.primaryStateDot[]) one of { 1, 2, 4 }
size(this.currentState[]) one of { 1, 2, 4 }
size(this.interpolatedState[]) one of { 1, 2, 4 }
size(this.interpolatedDerivatives[]) one of { 1, 2, 4 }
size(this.interpolatedPrimaryState[]) one of { 1, 2, 4 }
size(this.interpolatedPrimaryDerivatives[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolator.MidpointStepInterpolator():::EXIT
this.previousState == null
this.yDotK == null
this.integrator == null
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.interpolatedPrimaryState == null
this.interpolatedPrimaryDerivatives == null
this.interpolatedSecondaryState == null
this.interpolatedSecondaryDerivatives == null
this.globalPreviousTime == Double.NaN
this.globalCurrentTime == Double.NaN
this.softPreviousTime == Double.NaN
this.softCurrentTime == Double.NaN
this.finalized == false
this.forward == true
this.dirtyState == true
this.primaryMapper == null
this.secondaryMappers == null
===========================================================================
org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolator.MidpointStepInterpolator(org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolator):::ENTER
interpolator != null
interpolator.previousState[] sorted by >
interpolator.yDotK.getClass().getName() == double[][].class
interpolator.yDotK[] contains no nulls and has only one value, of length 2
interpolator.yDotK[] elements != null
interpolator.integrator.getClass().getName() == org.apache.commons.math3.ode.nonstiff.MidpointIntegrator.class
interpolator.integrator.stepHandlers has only one value
interpolator.integrator.stepHandlers != null
interpolator.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.stepSize == 0.004
interpolator.integrator.resetOccurred == false
interpolator.integrator.eventsStates has only one value
interpolator.integrator.eventsStates != null
interpolator.integrator.eventsStates.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.statesInitialized == true
interpolator.integrator.name has only one value
interpolator.integrator.name != null
interpolator.integrator.name.toString == "midpoint"
interpolator.integrator.evaluations has only one value
interpolator.integrator.evaluations != null
interpolator.integrator.expandable has only one value
interpolator.integrator.expandable != null
interpolator.h one of { 0.004, Double.NaN }
interpolator.h <= 0.0040000000000000036
interpolator.currentState[] sorted by >
interpolator.interpolatedState[] sorted by >
interpolator.interpolatedDerivatives[] sorted by <
interpolator.interpolatedPrimaryState[] sorted by >
interpolator.interpolatedPrimaryDerivatives[] == [0.0, 0.0]
interpolator.interpolatedPrimaryDerivatives[] elements == 0.0
interpolator.interpolatedSecondaryState.getClass().getName() == double[][].class
interpolator.interpolatedSecondaryState[] == []
interpolator.interpolatedSecondaryDerivatives.getClass().getName() == double[][].class
interpolator.interpolatedSecondaryDerivatives[] == []
interpolator.finalized == true
interpolator.forward == true
interpolator.primaryMapper.firstIndex == 0
interpolator.primaryMapper.dimension == 2
interpolator.secondaryMappers.getClass().getName() == org.apache.commons.math3.ode.EquationsMapper[].class
interpolator.secondaryMappers[] == []
interpolator.secondaryMappers[].getClass().getName() == []
interpolator.secondaryMappers[].firstIndex == []
interpolator.secondaryMappers[].dimension == []
size(interpolator.previousState[]) == 2
size(interpolator.yDotK[]) == 2
size(interpolator.currentState[]) == 2
size(interpolator.interpolatedState[]) == 2
size(interpolator.interpolatedDerivatives[]) == 2
size(interpolator.interpolatedPrimaryState[]) == 2
size(interpolator.interpolatedPrimaryDerivatives[]) == 2
===========================================================================
org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolator.MidpointStepInterpolator(org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolator):::EXIT
interpolator.previousState == orig(interpolator.previousState)
interpolator.previousState[] == orig(interpolator.previousState[])
interpolator.yDotK == orig(interpolator.yDotK)
interpolator.yDotK.getClass().getName() == orig(interpolator.yDotK.getClass().getName())
interpolator.yDotK[] == orig(interpolator.yDotK[])
interpolator.integrator == orig(interpolator.integrator)
interpolator.integrator.getClass().getName() == orig(interpolator.integrator.getClass().getName())
interpolator.integrator.stepHandlers == orig(interpolator.integrator.stepHandlers)
interpolator.integrator.stepHandlers.getClass().getName() == orig(interpolator.integrator.stepHandlers.getClass().getName())
interpolator.integrator.stepStart == orig(interpolator.integrator.stepStart)
interpolator.integrator.stepSize == orig(interpolator.integrator.stepSize)
interpolator.integrator.isLastStep == orig(interpolator.integrator.isLastStep)
interpolator.integrator.resetOccurred == orig(interpolator.integrator.resetOccurred)
interpolator.integrator.eventsStates == orig(interpolator.integrator.eventsStates)
interpolator.integrator.eventsStates.getClass().getName() == orig(interpolator.integrator.eventsStates.getClass().getName())
interpolator.integrator.statesInitialized == orig(interpolator.integrator.statesInitialized)
interpolator.integrator.name == orig(interpolator.integrator.name)
interpolator.integrator.name.toString == orig(interpolator.integrator.name.toString)
interpolator.integrator.evaluations == orig(interpolator.integrator.evaluations)
interpolator.integrator.expandable == orig(interpolator.integrator.expandable)
interpolator.currentState == orig(interpolator.currentState)
interpolator.currentState[] == orig(interpolator.currentState[])
interpolator.interpolatedState == orig(interpolator.interpolatedState)
interpolator.interpolatedState[] == orig(interpolator.interpolatedState[])
interpolator.interpolatedDerivatives == orig(interpolator.interpolatedDerivatives)
interpolator.interpolatedDerivatives[] == orig(interpolator.interpolatedDerivatives[])
interpolator.interpolatedPrimaryState == orig(interpolator.interpolatedPrimaryState)
interpolator.interpolatedPrimaryState[] == orig(interpolator.interpolatedPrimaryState[])
interpolator.interpolatedPrimaryDerivatives == orig(interpolator.interpolatedPrimaryDerivatives)
interpolator.interpolatedPrimaryDerivatives[] == orig(interpolator.interpolatedPrimaryDerivatives[])
interpolator.interpolatedSecondaryState == orig(interpolator.interpolatedSecondaryState)
interpolator.interpolatedSecondaryState.getClass().getName() == orig(interpolator.interpolatedSecondaryState.getClass().getName())
interpolator.interpolatedSecondaryState[] == orig(interpolator.interpolatedSecondaryState[])
interpolator.interpolatedSecondaryDerivatives == orig(interpolator.interpolatedSecondaryDerivatives)
interpolator.interpolatedSecondaryDerivatives.getClass().getName() == orig(interpolator.interpolatedSecondaryDerivatives.getClass().getName())
interpolator.interpolatedSecondaryDerivatives[] == orig(interpolator.interpolatedSecondaryDerivatives[])
interpolator.finalized == orig(interpolator.finalized)
interpolator.forward == orig(interpolator.forward)
interpolator.dirtyState == orig(interpolator.dirtyState)
interpolator.primaryMapper == orig(interpolator.primaryMapper)
interpolator.primaryMapper.firstIndex == orig(interpolator.primaryMapper.firstIndex)
interpolator.primaryMapper.dimension == orig(interpolator.primaryMapper.dimension)
interpolator.secondaryMappers == orig(interpolator.secondaryMappers)
interpolator.secondaryMappers.getClass().getName() == orig(interpolator.secondaryMappers.getClass().getName())
interpolator.secondaryMappers[] == orig(interpolator.secondaryMappers[])
interpolator.secondaryMappers[].firstIndex == orig(interpolator.secondaryMappers[].firstIndex)
interpolator.secondaryMappers[].dimension == orig(interpolator.secondaryMappers[].dimension)
this.previousState[] sorted by >
this.integrator == null
this.h one of { 0.004, Double.NaN }
this.h <= 0.0040000000000000036
this.currentState[] sorted by >
this.interpolatedState[] sorted by >
this.interpolatedDerivatives[] sorted by <
this.interpolatedPrimaryState[] sorted by >
this.interpolatedPrimaryDerivatives[] == [0.0, 0.0]
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.finalized == true
this.forward == true
this.primaryMapper.dimension == 2
interpolator.previousState[] sorted by >
interpolator.yDotK.getClass().getName() == double[][].class
interpolator.yDotK[] contains no nulls and has only one value, of length 2
interpolator.yDotK[] elements != null
interpolator.integrator.getClass().getName() == org.apache.commons.math3.ode.nonstiff.MidpointIntegrator.class
interpolator.integrator.stepHandlers has only one value
interpolator.integrator.stepHandlers != null
interpolator.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.stepSize == 0.004
interpolator.integrator.resetOccurred == false
interpolator.integrator.eventsStates has only one value
interpolator.integrator.eventsStates != null
interpolator.integrator.eventsStates.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.statesInitialized == true
interpolator.integrator.name has only one value
interpolator.integrator.name != null
interpolator.integrator.name.toString == "midpoint"
interpolator.integrator.evaluations has only one value
interpolator.integrator.evaluations != null
interpolator.integrator.expandable has only one value
interpolator.integrator.expandable != null
interpolator.h one of { 0.004, Double.NaN }
interpolator.h <= 0.0040000000000000036
interpolator.currentState[] sorted by >
interpolator.interpolatedState[] sorted by >
interpolator.interpolatedDerivatives[] sorted by <
interpolator.interpolatedPrimaryState[] sorted by >
interpolator.interpolatedPrimaryDerivatives[] == [0.0, 0.0]
interpolator.interpolatedPrimaryDerivatives[] elements == 0.0
interpolator.interpolatedSecondaryState.getClass().getName() == double[][].class
interpolator.interpolatedSecondaryState[] == []
interpolator.interpolatedSecondaryDerivatives.getClass().getName() == double[][].class
interpolator.interpolatedSecondaryDerivatives[] == []
interpolator.finalized == true
interpolator.forward == true
interpolator.primaryMapper.firstIndex == 0
interpolator.primaryMapper.dimension == 2
interpolator.secondaryMappers.getClass().getName() == org.apache.commons.math3.ode.EquationsMapper[].class
interpolator.secondaryMappers[] == []
interpolator.secondaryMappers[].getClass().getName() == []
interpolator.secondaryMappers[].firstIndex == []
interpolator.secondaryMappers[].dimension == []
size(this.previousState[]) == 2
size(this.currentState[]) == 2
size(this.interpolatedState[]) == 2
size(this.interpolatedDerivatives[]) == 2
size(this.interpolatedPrimaryState[]) == 2
size(this.interpolatedPrimaryDerivatives[]) == 2
size(interpolator.previousState[]) == 2
size(interpolator.yDotK[]) == 2
size(interpolator.currentState[]) == 2
size(interpolator.interpolatedState[]) == 2
size(interpolator.interpolatedDerivatives[]) == 2
size(interpolator.interpolatedPrimaryState[]) == 2
size(interpolator.interpolatedPrimaryDerivatives[]) == 2
===========================================================================
org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::ENTER
this.previousState != null
this.yDotK != null
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.interpolatedPrimaryState != null
this.interpolatedPrimaryDerivatives != null
this.interpolatedSecondaryState != null
this.interpolatedSecondaryDerivatives != null
this.dirtyState == true
this.primaryMapper != null
this.secondaryMappers != null
theta <= 1.0
theta >= 0.0
===========================================================================
org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::EXIT
this.previousState == orig(this.previousState)
this.previousState[] == orig(this.previousState[])
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.integrator.stepHandlers == orig(this.integrator.stepHandlers)
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.stepHandlers.getClass().getName())
this.integrator.stepStart == orig(this.integrator.stepStart)
this.integrator.stepSize == orig(this.integrator.stepSize)
this.integrator.isLastStep == orig(this.integrator.isLastStep)
this.integrator.resetOccurred == orig(this.integrator.resetOccurred)
this.integrator.eventsStates == orig(this.integrator.eventsStates)
this.integrator.eventsStates.getClass().getName() == orig(this.integrator.eventsStates.getClass().getName())
this.integrator.statesInitialized == orig(this.integrator.statesInitialized)
this.integrator.name == orig(this.integrator.name)
this.integrator.name.toString == orig(this.integrator.name.toString)
this.integrator.evaluations == orig(this.integrator.evaluations)
this.integrator.evaluations.maximalCount == orig(this.integrator.evaluations.maximalCount)
this.integrator.evaluations.count == orig(this.integrator.evaluations.count)
this.integrator.evaluations.maxCountCallback == orig(this.integrator.evaluations.maxCountCallback)
this.integrator.evaluations.maxCountCallback.getClass().getName() == orig(this.integrator.evaluations.maxCountCallback.getClass().getName())
this.integrator.expandable == orig(this.integrator.expandable)
this.integrator.expandable.primary == orig(this.integrator.expandable.primary)
this.integrator.expandable.primary.getClass().getName() == orig(this.integrator.expandable.primary.getClass().getName())
this.integrator.expandable.primaryMapper == orig(this.integrator.expandable.primaryMapper)
this.integrator.expandable.time == orig(this.integrator.expandable.time)
this.integrator.expandable.primaryState == orig(this.integrator.expandable.primaryState)
this.integrator.expandable.primaryState[] == orig(this.integrator.expandable.primaryState[])
this.integrator.expandable.primaryStateDot == orig(this.integrator.expandable.primaryStateDot)
this.integrator.expandable.primaryStateDot[] == orig(this.integrator.expandable.primaryStateDot[])
this.integrator.expandable.components == orig(this.integrator.expandable.components)
this.integrator.expandable.components[] == orig(this.integrator.expandable.components[])
this.integrator.expandable.components.getClass().getName() == orig(this.integrator.expandable.components.getClass().getName())
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedPrimaryState == orig(this.interpolatedPrimaryState)
this.interpolatedPrimaryState[] == orig(this.interpolatedPrimaryState[])
this.interpolatedPrimaryDerivatives == orig(this.interpolatedPrimaryDerivatives)
this.interpolatedPrimaryDerivatives[] == orig(this.interpolatedPrimaryDerivatives[])
this.interpolatedSecondaryState == orig(this.interpolatedSecondaryState)
this.interpolatedSecondaryState.getClass().getName() == orig(this.interpolatedSecondaryState.getClass().getName())
this.interpolatedSecondaryState[] == orig(this.interpolatedSecondaryState[])
this.interpolatedSecondaryDerivatives == orig(this.interpolatedSecondaryDerivatives)
this.interpolatedSecondaryDerivatives.getClass().getName() == orig(this.interpolatedSecondaryDerivatives.getClass().getName())
this.interpolatedSecondaryDerivatives[] == orig(this.interpolatedSecondaryDerivatives[])
this.globalPreviousTime == orig(this.globalPreviousTime)
this.globalCurrentTime == orig(this.globalCurrentTime)
this.softPreviousTime == orig(this.softPreviousTime)
this.softCurrentTime == orig(this.softCurrentTime)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.secondaryMappers == orig(this.secondaryMappers)
this.secondaryMappers.getClass().getName() == orig(this.secondaryMappers.getClass().getName())
this.secondaryMappers[] == orig(this.secondaryMappers[])
this.secondaryMappers[].firstIndex == orig(this.secondaryMappers[].firstIndex)
this.secondaryMappers[].dimension == orig(this.secondaryMappers[].dimension)
size(this.interpolatedState[]) == orig(size(this.interpolatedState[]))
size(this.interpolatedDerivatives[]) == orig(size(this.interpolatedDerivatives[]))
this.previousState != null
this.yDotK != null
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.interpolatedPrimaryState != null
this.interpolatedPrimaryDerivatives != null
this.interpolatedSecondaryState != null
this.interpolatedSecondaryDerivatives != null
this.dirtyState == true
this.primaryMapper != null
this.secondaryMappers != null
===========================================================================
org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolator.doCopy():::ENTER
this.previousState[] sorted by >
this.yDotK[] contains no nulls and has only one value, of length 2
this.integrator.stepHandlers has only one value
this.integrator.stepSize == 0.004
this.integrator.resetOccurred == false
this.integrator.eventsStates has only one value
this.integrator.statesInitialized == true
this.integrator.evaluations has only one value
this.integrator.evaluations.maxCountCallback has only one value
this.integrator.expandable has only one value
this.integrator.expandable.primary has only one value
this.integrator.expandable.primary.getClass().getName() == org.apache.commons.math3.ode.TestProblem1.class
this.integrator.expandable.primaryMapper has only one value
this.integrator.expandable.primaryState has only one value
this.integrator.expandable.primaryState[] sorted by >
this.integrator.expandable.primaryStateDot has only one value
this.integrator.expandable.primaryStateDot[] sorted by <
this.integrator.expandable.components has only one value
this.h one of { 0.004, Double.NaN }
this.h <= 0.0040000000000000036
this.currentState[] sorted by >
this.interpolatedState[] sorted by >
this.interpolatedDerivatives[] sorted by <
this.interpolatedPrimaryState[] sorted by >
this.interpolatedPrimaryDerivatives[] == [0.0, 0.0]
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.finalized == true
this.forward == true
this.primaryMapper.dimension == 2
size(this.previousState[]) == 2
size(this.integrator.expandable.primaryState[]) == 2
size(this.integrator.expandable.primaryStateDot[]) == 2
size(this.currentState[]) == 2
size(this.interpolatedState[]) == 2
size(this.interpolatedDerivatives[]) == 2
size(this.interpolatedPrimaryState[]) == 2
size(this.interpolatedPrimaryDerivatives[]) == 2
===========================================================================
org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolator.doCopy():::EXIT
this.previousState == orig(this.previousState)
this.previousState[] == orig(this.previousState[])
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.integrator.stepHandlers == orig(this.integrator.stepHandlers)
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.stepHandlers.getClass().getName())
this.integrator.stepStart == orig(this.integrator.stepStart)
this.integrator.stepSize == orig(this.integrator.stepSize)
this.integrator.isLastStep == orig(this.integrator.isLastStep)
this.integrator.resetOccurred == orig(this.integrator.resetOccurred)
this.integrator.eventsStates == orig(this.integrator.eventsStates)
this.integrator.eventsStates.getClass().getName() == orig(this.integrator.eventsStates.getClass().getName())
this.integrator.statesInitialized == orig(this.integrator.statesInitialized)
this.integrator.name == orig(this.integrator.name)
this.integrator.name.toString == orig(this.integrator.name.toString)
this.integrator.evaluations == orig(this.integrator.evaluations)
this.integrator.evaluations.maximalCount == orig(this.integrator.evaluations.maximalCount)
this.integrator.evaluations.count == orig(this.integrator.evaluations.count)
this.integrator.evaluations.maxCountCallback == orig(this.integrator.evaluations.maxCountCallback)
this.integrator.evaluations.maxCountCallback.getClass().getName() == orig(this.integrator.evaluations.maxCountCallback.getClass().getName())
this.integrator.expandable == orig(this.integrator.expandable)
this.integrator.expandable.primary == orig(this.integrator.expandable.primary)
this.integrator.expandable.primary.getClass().getName() == orig(this.integrator.expandable.primary.getClass().getName())
this.integrator.expandable.primaryMapper == orig(this.integrator.expandable.primaryMapper)
this.integrator.expandable.time == orig(this.integrator.expandable.time)
this.integrator.expandable.primaryState == orig(this.integrator.expandable.primaryState)
this.integrator.expandable.primaryState[] == orig(this.integrator.expandable.primaryState[])
this.integrator.expandable.primaryStateDot == orig(this.integrator.expandable.primaryStateDot)
this.integrator.expandable.primaryStateDot[] == orig(this.integrator.expandable.primaryStateDot[])
this.integrator.expandable.components == orig(this.integrator.expandable.components)
this.integrator.expandable.components[] == orig(this.integrator.expandable.components[])
this.integrator.expandable.components.getClass().getName() == orig(this.integrator.expandable.components.getClass().getName())
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.interpolatedPrimaryState == orig(this.interpolatedPrimaryState)
this.interpolatedPrimaryState[] == orig(this.interpolatedPrimaryState[])
this.interpolatedPrimaryDerivatives == orig(this.interpolatedPrimaryDerivatives)
this.interpolatedPrimaryDerivatives[] == orig(this.interpolatedPrimaryDerivatives[])
this.interpolatedSecondaryState == orig(this.interpolatedSecondaryState)
this.interpolatedSecondaryState.getClass().getName() == orig(this.interpolatedSecondaryState.getClass().getName())
this.interpolatedSecondaryState[] == orig(this.interpolatedSecondaryState[])
this.interpolatedSecondaryDerivatives == orig(this.interpolatedSecondaryDerivatives)
this.interpolatedSecondaryDerivatives.getClass().getName() == orig(this.interpolatedSecondaryDerivatives.getClass().getName())
this.interpolatedSecondaryDerivatives[] == orig(this.interpolatedSecondaryDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.secondaryMappers == orig(this.secondaryMappers)
this.secondaryMappers.getClass().getName() == orig(this.secondaryMappers.getClass().getName())
this.secondaryMappers[] == orig(this.secondaryMappers[])
this.secondaryMappers[].firstIndex == orig(this.secondaryMappers[].firstIndex)
this.secondaryMappers[].dimension == orig(this.secondaryMappers[].dimension)
this.previousState[] sorted by >
this.yDotK[] contains no nulls and has only one value, of length 2
this.integrator.stepHandlers has only one value
this.integrator.stepSize == 0.004
this.integrator.resetOccurred == false
this.integrator.eventsStates has only one value
this.integrator.statesInitialized == true
this.integrator.evaluations has only one value
this.integrator.evaluations.maxCountCallback has only one value
this.integrator.expandable has only one value
this.integrator.expandable.primary has only one value
this.integrator.expandable.primary.getClass().getName() == org.apache.commons.math3.ode.TestProblem1.class
this.integrator.expandable.primaryMapper has only one value
this.integrator.expandable.primaryState has only one value
this.integrator.expandable.primaryState[] sorted by >
this.integrator.expandable.primaryStateDot has only one value
this.integrator.expandable.primaryStateDot[] sorted by <
this.integrator.expandable.components has only one value
this.h one of { 0.004, Double.NaN }
this.h <= 0.0040000000000000036
this.currentState[] sorted by >
this.interpolatedState[] sorted by >
this.interpolatedDerivatives[] sorted by <
this.interpolatedPrimaryState[] sorted by >
this.interpolatedPrimaryDerivatives[] == [0.0, 0.0]
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.finalized == true
this.forward == true
this.primaryMapper.dimension == 2
return != null
return.getClass().getName() == org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolator.class
size(this.previousState[]) == 2
size(this.integrator.expandable.primaryState[]) == 2
size(this.integrator.expandable.primaryStateDot[]) == 2
size(this.currentState[]) == 2
size(this.interpolatedState[]) == 2
size(this.interpolatedDerivatives[]) == 2
size(this.interpolatedPrimaryState[]) == 2
size(this.interpolatedPrimaryDerivatives[]) == 2
===========================================================================
org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolatorTest:::OBJECT
===========================================================================
org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolatorTest.MidpointStepInterpolatorTest():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolatorTest.serialization():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolatorTest.serialization():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolatorTest.testDerivativesConsistency():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolatorTest.testDerivativesConsistency():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator:::OBJECT
this.c != null
this.c[] sorted by <=
this.a != null
this.a.getClass().getName() == double[][].class
this.a[] elements != null
this.b != null
this.prototype != null
this.prototype.previousState == null
this.prototype.yDotK == null
this.prototype.integrator == null
this.prototype.h == Double.NaN
this.prototype.currentState == null
this.prototype.interpolatedTime == Double.NaN
this.prototype.interpolatedState == null
this.prototype.interpolatedDerivatives == null
this.prototype.interpolatedPrimaryState == null
this.prototype.interpolatedPrimaryDerivatives == null
this.prototype.interpolatedSecondaryState == null
this.prototype.interpolatedSecondaryDerivatives == null
this.prototype.globalPreviousTime == Double.NaN
this.prototype.globalCurrentTime == Double.NaN
this.prototype.softPreviousTime == Double.NaN
this.prototype.softCurrentTime == Double.NaN
this.prototype.forward == true
this.prototype.dirtyState == true
this.prototype.primaryMapper == null
this.prototype.secondaryMappers == null
this.stepHandlers != null
this.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.eventsStates != null
this.eventsStates.getClass().getName() == java.util.ArrayList.class
this.name != null
this.evaluations != null
this.evaluations.maximalCount == 2147483647
this.evaluations.count >= 0
this.evaluations.maxCountCallback != null
this.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
this.expandable.primary != null
this.expandable.primaryMapper != null
this.expandable.primaryMapper.firstIndex == 0
this.expandable.primaryState != null
this.expandable.primaryStateDot != null
this.expandable.components != null
this.expandable.components[] == []
this.expandable.components[].getClass().getName() == []
this.expandable.components.getClass().getName() == java.util.ArrayList.class
size(this.c[]) one of { 0, 1, 3 }
size(this.a[]) one of { 0, 1, 3 }
size(this.b[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator.RungeKuttaIntegrator(java.lang.String, double[], double[][], double[], org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator, double):::ENTER
name != null
c != null
c[] sorted by <=
a != null
a.getClass().getName() == double[][].class
a[] elements != null
b != null
prototype != null
prototype.previousState == null
prototype.yDotK == null
prototype.integrator == null
prototype.h == Double.NaN
prototype.currentState == null
prototype.interpolatedTime == Double.NaN
prototype.interpolatedState == null
prototype.interpolatedDerivatives == null
prototype.interpolatedPrimaryState == null
prototype.interpolatedPrimaryDerivatives == null
prototype.interpolatedSecondaryState == null
prototype.interpolatedSecondaryDerivatives == null
prototype.globalPreviousTime == Double.NaN
prototype.globalCurrentTime == Double.NaN
prototype.softPreviousTime == Double.NaN
prototype.softCurrentTime == Double.NaN
prototype.finalized == false
prototype.forward == true
prototype.dirtyState == true
prototype.primaryMapper == null
prototype.secondaryMappers == null
size(c[]) one of { 0, 1, 3 }
size(a[]) one of { 0, 1, 3 }
size(b[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator.RungeKuttaIntegrator(java.lang.String, double[], double[][], double[], org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator, double):::EXIT
name.toString == orig(name.toString)
c[] == orig(c[])
a[] == orig(a[])
b[] == orig(b[])
prototype.previousState == orig(prototype.previousState)
prototype.yDotK == orig(prototype.yDotK)
prototype.integrator == orig(prototype.integrator)
prototype.currentState == orig(prototype.currentState)
prototype.interpolatedState == orig(prototype.interpolatedState)
prototype.interpolatedDerivatives == orig(prototype.interpolatedDerivatives)
prototype.interpolatedPrimaryState == orig(prototype.interpolatedPrimaryState)
prototype.interpolatedPrimaryDerivatives == orig(prototype.interpolatedPrimaryDerivatives)
prototype.interpolatedSecondaryState == orig(prototype.interpolatedSecondaryState)
prototype.interpolatedSecondaryDerivatives == orig(prototype.interpolatedSecondaryDerivatives)
prototype.finalized == orig(prototype.finalized)
prototype.forward == orig(prototype.forward)
prototype.dirtyState == orig(prototype.dirtyState)
prototype.primaryMapper == orig(prototype.primaryMapper)
prototype.secondaryMappers == orig(prototype.secondaryMappers)
this.prototype.finalized == false
this.isLastStep == false
this.resetOccurred == false
this.statesInitialized == false
this.evaluations.count == 0
this.expandable == null
c[] sorted by <=
a[] elements != null
prototype.previousState == null
prototype.yDotK == null
prototype.integrator == null
prototype.h == Double.NaN
prototype.currentState == null
prototype.interpolatedTime == Double.NaN
prototype.interpolatedState == null
prototype.interpolatedDerivatives == null
prototype.interpolatedPrimaryState == null
prototype.interpolatedPrimaryDerivatives == null
prototype.interpolatedSecondaryState == null
prototype.interpolatedSecondaryDerivatives == null
prototype.globalPreviousTime == Double.NaN
prototype.globalCurrentTime == Double.NaN
prototype.softPreviousTime == Double.NaN
prototype.softCurrentTime == Double.NaN
prototype.finalized == false
prototype.forward == true
prototype.dirtyState == true
prototype.primaryMapper == null
prototype.secondaryMappers == null
===========================================================================
org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator.integrate(org.apache.commons.math3.ode.ExpandableStatefulODE, double):::ENTER
this.resetOccurred == false
this.evaluations.count one of { 0, 8 }
this.expandable.primary has only one value
this.expandable.primary.getClass().getName() == org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$1.class
this.expandable.primaryMapper has only one value
this.expandable.primaryMapper.dimension == 3
this.expandable.time == 1.8782503799999986E9
this.expandable.primaryState has only one value
this.expandable.primaryState[] == [1.0060180356222639, 2.0012003599861283, 3.0001800053872327]
this.expandable.primaryState[] elements one of { 1.0060180356222639, 2.0012003599861283, 3.0001800053872327 }
this.expandable.primaryStateDot has only one value
this.expandable.primaryStateDot[] == [1.006018035622264E-4, 2.0012003599861285E-5, 3.0001800053872324E-6]
this.expandable.primaryStateDot[] elements one of { 3.0001800053872324E-6, 2.0012003599861285E-5, 1.006018035622264E-4 }
this.expandable.components has only one value
equations != null
equations.primary != null
equations.primaryMapper != null
equations.primaryMapper.firstIndex == 0
equations.time one of { 0.0, 1.8782503200000029E9 }
equations.primaryState != null
equations.primaryStateDot != null
equations.primaryStateDot[] elements == 0.0
equations.components != null
equations.components[] == []
equations.components[].getClass().getName() == []
equations.components.getClass().getName() == java.util.ArrayList.class
size(this.expandable.primaryState[]) == 3
size(this.expandable.primaryStateDot[]) == 3
===========================================================================
org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator.integrate(org.apache.commons.math3.ode.ExpandableStatefulODE, double):::EXIT
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a.getClass().getName() == orig(this.a.getClass().getName())
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.previousState == orig(this.prototype.previousState)
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.integrator == orig(this.prototype.integrator)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.interpolatedDerivatives == orig(this.prototype.interpolatedDerivatives)
this.prototype.interpolatedPrimaryState == orig(this.prototype.interpolatedPrimaryState)
this.prototype.interpolatedPrimaryDerivatives == orig(this.prototype.interpolatedPrimaryDerivatives)
this.prototype.interpolatedSecondaryState == orig(this.prototype.interpolatedSecondaryState)
this.prototype.interpolatedSecondaryDerivatives == orig(this.prototype.interpolatedSecondaryDerivatives)
this.prototype.forward == orig(this.prototype.forward)
this.prototype.dirtyState == orig(this.prototype.dirtyState)
this.prototype.primaryMapper == orig(this.prototype.primaryMapper)
this.prototype.secondaryMappers == orig(this.prototype.secondaryMappers)
this.step == orig(this.step)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.eventsStates == orig(this.eventsStates)
this.eventsStates.getClass().getName() == orig(this.eventsStates.getClass().getName())
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.evaluations.maximalCount == orig(this.evaluations.maximalCount)
this.evaluations.maxCountCallback == orig(this.evaluations.maxCountCallback)
this.evaluations.maxCountCallback.getClass().getName() == orig(this.evaluations.maxCountCallback.getClass().getName())
this.expandable.primary == orig(this.expandable.primary)
this.expandable.primary.getClass().getName() == orig(this.expandable.primary.getClass().getName())
this.expandable.primaryMapper.firstIndex == orig(this.expandable.primaryMapper.firstIndex)
this.expandable.primaryMapper.dimension == orig(this.expandable.primaryMapper.dimension)
this.expandable.time == orig(this.expandable.time)
this.expandable.components[] == orig(this.expandable.components[])
this.expandable.components[].getClass().getName() == orig(this.expandable.components[].getClass().getName())
this.expandable.components.getClass().getName() == orig(this.expandable.components.getClass().getName())
equations.primary == orig(equations.primary)
equations.primary.getClass().getName() == orig(equations.primary.getClass().getName())
equations.primaryMapper == orig(equations.primaryMapper)
equations.primaryMapper.firstIndex == orig(equations.primaryMapper.firstIndex)
equations.primaryMapper.dimension == orig(equations.primaryMapper.dimension)
equations.primaryState == orig(equations.primaryState)
equations.primaryStateDot == orig(equations.primaryStateDot)
equations.components == orig(equations.components)
equations.components[] == orig(equations.components[])
equations.components.getClass().getName() == orig(equations.components.getClass().getName())
size(this.expandable.primaryState[]) == orig(size(this.expandable.primaryState[]))
size(this.expandable.primaryStateDot[]) == orig(size(this.expandable.primaryStateDot[]))
size(equations.primaryState[]) == orig(size(equations.primaryState[]))
size(equations.primaryStateDot[]) == orig(size(equations.primaryStateDot[]))
this.prototype.finalized == true
this.isLastStep == true
this.statesInitialized == true
this.expandable != null
equations.primary != null
equations.primaryMapper != null
equations.primaryMapper.firstIndex == 0
equations.primaryState != null
equations.primaryStateDot != null
equations.components != null
equations.components[] == []
equations.components[].getClass().getName() == []
equations.components.getClass().getName() == java.util.ArrayList.class
this.evaluations.count > orig(this.evaluations.count)
this.expandable.components[] is the reverse of orig(this.expandable.components[])
===========================================================================
org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator:::OBJECT
this.yDotK.getClass().getName() == double[][].class
this.yDotK[] elements != null
this.integrator.stepHandlers != null
this.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.integrator.eventsStates != null
this.integrator.eventsStates.getClass().getName() == java.util.ArrayList.class
this.integrator.name != null
this.integrator.evaluations != null
this.integrator.evaluations.maximalCount one of { 5000, 50000, 2147483647 }
this.integrator.evaluations.count >= 0
this.integrator.evaluations.maxCountCallback != null
this.integrator.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
this.integrator.expandable != null
this.integrator.expandable.primary != null
this.integrator.expandable.primaryMapper != null
this.integrator.expandable.time >= 0.0
this.integrator.expandable.primaryState != null
this.integrator.expandable.primaryStateDot != null
this.integrator.expandable.components != null
this.integrator.expandable.components[] elements != null
this.integrator.expandable.components[].getClass().getName() elements == org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent.class
this.integrator.expandable.components[].getClass().getName() one of { [], [org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent] }
this.integrator.expandable.components.getClass().getName() == java.util.ArrayList.class
this.h != 0
this.interpolatedSecondaryState.getClass().getName() == double[][].class
this.interpolatedSecondaryState[] elements != null
this.interpolatedSecondaryDerivatives.getClass().getName() == double[][].class
this.interpolatedSecondaryDerivatives[] elements != null
this.primaryMapper.firstIndex == 0
this.primaryMapper.dimension >= 1
this.secondaryMappers.getClass().getName() == org.apache.commons.math3.ode.EquationsMapper[].class
this.secondaryMappers[] elements != null
this.secondaryMappers[].getClass().getName() elements == org.apache.commons.math3.ode.EquationsMapper.class
this.secondaryMappers[].getClass().getName() one of { [], [org.apache.commons.math3.ode.EquationsMapper] }
this.secondaryMappers[].firstIndex elements == 2
this.secondaryMappers[].firstIndex one of { [], [2] }
this.secondaryMappers[].dimension elements one of { 6, 10 }
this.secondaryMappers[].dimension one of { [], [6], [10] }
size(this.previousState[]) >= 1
size(this.yDotK[]) >= 1
size(this.integrator.expandable.primaryState[]) >= 1
size(this.integrator.expandable.primaryStateDot[]) >= 1
size(this.integrator.expandable.components[]) one of { 0, 1 }
size(this.currentState[]) >= 1
size(this.interpolatedState[]) >= 1
size(this.interpolatedDerivatives[]) >= 1
size(this.interpolatedPrimaryState[]) >= 1
size(this.interpolatedPrimaryDerivatives[]) >= 1
size(this.interpolatedSecondaryState[]) one of { 0, 1 }
size(this.interpolatedSecondaryDerivatives[]) one of { 0, 1 }
size(this.secondaryMappers[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator.RungeKuttaStepInterpolator():::EXIT
this.previousState == null
this.yDotK == null
this.integrator == null
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.interpolatedPrimaryState == null
this.interpolatedPrimaryDerivatives == null
this.interpolatedSecondaryState == null
this.interpolatedSecondaryDerivatives == null
this.globalPreviousTime == Double.NaN
this.globalCurrentTime == Double.NaN
this.softPreviousTime == Double.NaN
this.softCurrentTime == Double.NaN
this.finalized == false
this.forward == true
this.dirtyState == true
this.primaryMapper == null
this.secondaryMappers == null
===========================================================================
org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator.RungeKuttaStepInterpolator(org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator):::ENTER
interpolator != null
interpolator.yDotK.getClass().getName() == double[][].class
interpolator.yDotK[] elements != null
interpolator.integrator.stepHandlers != null
interpolator.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.stepSize != 0
interpolator.integrator.resetOccurred == false
interpolator.integrator.eventsStates != null
interpolator.integrator.eventsStates.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.statesInitialized == true
interpolator.integrator.name != null
interpolator.integrator.evaluations != null
interpolator.integrator.expandable != null
interpolator.h != 0
interpolator.interpolatedPrimaryDerivatives[] elements == 0.0
interpolator.interpolatedPrimaryDerivatives[] one of { [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
interpolator.interpolatedSecondaryState.getClass().getName() == double[][].class
interpolator.interpolatedSecondaryState[] == []
interpolator.interpolatedSecondaryDerivatives.getClass().getName() == double[][].class
interpolator.interpolatedSecondaryDerivatives[] == []
interpolator.finalized == true
interpolator.primaryMapper.firstIndex == 0
interpolator.primaryMapper.dimension one of { 2, 4 }
interpolator.secondaryMappers.getClass().getName() == org.apache.commons.math3.ode.EquationsMapper[].class
interpolator.secondaryMappers[] == []
interpolator.secondaryMappers[].getClass().getName() == []
interpolator.secondaryMappers[].firstIndex == []
interpolator.secondaryMappers[].dimension == []
size(interpolator.previousState[]) one of { 2, 4 }
size(interpolator.yDotK[]) >= 1
size(interpolator.currentState[]) one of { 2, 4 }
size(interpolator.interpolatedState[]) one of { 2, 4 }
size(interpolator.interpolatedDerivatives[]) one of { 2, 4 }
size(interpolator.interpolatedPrimaryState[]) one of { 2, 4 }
size(interpolator.interpolatedPrimaryDerivatives[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator.RungeKuttaStepInterpolator(org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator):::EXIT
interpolator.previousState == orig(interpolator.previousState)
interpolator.previousState[] == orig(interpolator.previousState[])
interpolator.yDotK == orig(interpolator.yDotK)
interpolator.yDotK.getClass().getName() == orig(interpolator.yDotK.getClass().getName())
interpolator.yDotK[] == orig(interpolator.yDotK[])
interpolator.integrator == orig(interpolator.integrator)
interpolator.integrator.getClass().getName() == orig(interpolator.integrator.getClass().getName())
interpolator.integrator.stepHandlers == orig(interpolator.integrator.stepHandlers)
interpolator.integrator.stepHandlers.getClass().getName() == orig(interpolator.integrator.stepHandlers.getClass().getName())
interpolator.integrator.stepStart == orig(interpolator.integrator.stepStart)
interpolator.integrator.stepSize == orig(interpolator.integrator.stepSize)
interpolator.integrator.isLastStep == orig(interpolator.integrator.isLastStep)
interpolator.integrator.resetOccurred == orig(interpolator.integrator.resetOccurred)
interpolator.integrator.eventsStates == orig(interpolator.integrator.eventsStates)
interpolator.integrator.eventsStates.getClass().getName() == orig(interpolator.integrator.eventsStates.getClass().getName())
interpolator.integrator.statesInitialized == orig(interpolator.integrator.statesInitialized)
interpolator.integrator.name == orig(interpolator.integrator.name)
interpolator.integrator.name.toString == orig(interpolator.integrator.name.toString)
interpolator.integrator.evaluations == orig(interpolator.integrator.evaluations)
interpolator.integrator.expandable == orig(interpolator.integrator.expandable)
interpolator.currentState == orig(interpolator.currentState)
interpolator.currentState[] == orig(interpolator.currentState[])
interpolator.interpolatedState == orig(interpolator.interpolatedState)
interpolator.interpolatedState[] == orig(interpolator.interpolatedState[])
interpolator.interpolatedDerivatives == orig(interpolator.interpolatedDerivatives)
interpolator.interpolatedDerivatives[] == orig(interpolator.interpolatedDerivatives[])
interpolator.interpolatedPrimaryState == orig(interpolator.interpolatedPrimaryState)
interpolator.interpolatedPrimaryState[] == orig(interpolator.interpolatedPrimaryState[])
interpolator.interpolatedPrimaryDerivatives == orig(interpolator.interpolatedPrimaryDerivatives)
interpolator.interpolatedPrimaryDerivatives[] == orig(interpolator.interpolatedPrimaryDerivatives[])
interpolator.interpolatedSecondaryState == orig(interpolator.interpolatedSecondaryState)
interpolator.interpolatedSecondaryState.getClass().getName() == orig(interpolator.interpolatedSecondaryState.getClass().getName())
interpolator.interpolatedSecondaryState[] == orig(interpolator.interpolatedSecondaryState[])
interpolator.interpolatedSecondaryDerivatives == orig(interpolator.interpolatedSecondaryDerivatives)
interpolator.interpolatedSecondaryDerivatives.getClass().getName() == orig(interpolator.interpolatedSecondaryDerivatives.getClass().getName())
interpolator.interpolatedSecondaryDerivatives[] == orig(interpolator.interpolatedSecondaryDerivatives[])
interpolator.finalized == orig(interpolator.finalized)
interpolator.forward == orig(interpolator.forward)
interpolator.dirtyState == orig(interpolator.dirtyState)
interpolator.primaryMapper == orig(interpolator.primaryMapper)
interpolator.primaryMapper.firstIndex == orig(interpolator.primaryMapper.firstIndex)
interpolator.primaryMapper.dimension == orig(interpolator.primaryMapper.dimension)
interpolator.secondaryMappers == orig(interpolator.secondaryMappers)
interpolator.secondaryMappers.getClass().getName() == orig(interpolator.secondaryMappers.getClass().getName())
interpolator.secondaryMappers[] == orig(interpolator.secondaryMappers[])
interpolator.secondaryMappers[].firstIndex == orig(interpolator.secondaryMappers[].firstIndex)
interpolator.secondaryMappers[].dimension == orig(interpolator.secondaryMappers[].dimension)
this.integrator == null
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.interpolatedPrimaryDerivatives[] one of { [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.interpolatedSecondaryState[] == []
this.interpolatedSecondaryDerivatives[] == []
this.finalized == true
this.primaryMapper.dimension one of { 2, 4 }
this.secondaryMappers[] == []
this.secondaryMappers[].getClass().getName() == []
this.secondaryMappers[].firstIndex == []
this.secondaryMappers[].dimension == []
interpolator.yDotK.getClass().getName() == double[][].class
interpolator.yDotK[] elements != null
interpolator.integrator.stepHandlers != null
interpolator.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.stepSize != 0
interpolator.integrator.resetOccurred == false
interpolator.integrator.eventsStates != null
interpolator.integrator.eventsStates.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.statesInitialized == true
interpolator.integrator.name != null
interpolator.integrator.evaluations != null
interpolator.integrator.expandable != null
interpolator.h != 0
interpolator.interpolatedPrimaryDerivatives[] elements == 0.0
interpolator.interpolatedPrimaryDerivatives[] one of { [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
interpolator.interpolatedSecondaryState.getClass().getName() == double[][].class
interpolator.interpolatedSecondaryState[] == []
interpolator.interpolatedSecondaryDerivatives.getClass().getName() == double[][].class
interpolator.interpolatedSecondaryDerivatives[] == []
interpolator.finalized == true
interpolator.primaryMapper.firstIndex == 0
interpolator.primaryMapper.dimension one of { 2, 4 }
interpolator.secondaryMappers.getClass().getName() == org.apache.commons.math3.ode.EquationsMapper[].class
interpolator.secondaryMappers[] == []
interpolator.secondaryMappers[].getClass().getName() == []
interpolator.secondaryMappers[].firstIndex == []
interpolator.secondaryMappers[].dimension == []
size(this.previousState[]) one of { 2, 4 }
size(this.currentState[]) one of { 2, 4 }
size(this.interpolatedState[]) one of { 2, 4 }
size(this.interpolatedDerivatives[]) one of { 2, 4 }
size(this.interpolatedPrimaryState[]) one of { 2, 4 }
size(this.interpolatedPrimaryDerivatives[]) one of { 2, 4 }
size(interpolator.previousState[]) one of { 2, 4 }
size(interpolator.yDotK[]) >= 1
size(interpolator.currentState[]) one of { 2, 4 }
size(interpolator.interpolatedState[]) one of { 2, 4 }
size(interpolator.interpolatedDerivatives[]) one of { 2, 4 }
size(interpolator.interpolatedPrimaryState[]) one of { 2, 4 }
size(interpolator.interpolatedPrimaryDerivatives[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator.readExternal(java.io.ObjectInput):::ENTER
this.previousState == null
this.yDotK == null
this.integrator == null
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.interpolatedPrimaryState == null
this.interpolatedPrimaryDerivatives == null
this.interpolatedSecondaryState == null
this.interpolatedSecondaryDerivatives == null
this.globalPreviousTime == Double.NaN
this.globalCurrentTime == Double.NaN
this.softPreviousTime == Double.NaN
this.softCurrentTime == Double.NaN
this.finalized == false
this.forward == true
this.dirtyState == true
this.primaryMapper == null
this.secondaryMappers == null
in != null
in.getClass().getName() == java.io.ObjectInputStream.class
===========================================================================
org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator.readExternal(java.io.ObjectInput):::EXIT
this.integrator == orig(this.integrator)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.previousState != null
this.yDotK != null
this.integrator == null
this.currentState != null
this.currentState[] elements != 0
this.interpolatedState != null
this.interpolatedState[] elements == 0.0
this.interpolatedState[] one of { [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.interpolatedDerivatives != null
this.interpolatedDerivatives[] elements == 0.0
this.interpolatedDerivatives[] one of { [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.interpolatedPrimaryState != null
this.interpolatedPrimaryState[] elements == 0.0
this.interpolatedPrimaryState[] one of { [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.interpolatedPrimaryDerivatives != null
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.interpolatedPrimaryDerivatives[] one of { [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.interpolatedSecondaryState != null
this.interpolatedSecondaryState[] == []
this.interpolatedSecondaryDerivatives != null
this.interpolatedSecondaryDerivatives[] == []
this.finalized == true
this.forward == true
this.dirtyState == true
this.primaryMapper != null
this.primaryMapper.dimension one of { 2, 4 }
this.secondaryMappers != null
this.secondaryMappers[] == []
this.secondaryMappers[].getClass().getName() == []
this.secondaryMappers[].firstIndex == []
this.secondaryMappers[].dimension == []
size(this.previousState[]) one of { 2, 4 }
size(this.currentState[]) one of { 2, 4 }
size(this.interpolatedState[]) one of { 2, 4 }
size(this.interpolatedDerivatives[]) one of { 2, 4 }
size(this.interpolatedPrimaryState[]) one of { 2, 4 }
size(this.interpolatedPrimaryDerivatives[]) one of { 2, 4 }
this.h != orig(this.h)
this.interpolatedTime != orig(this.interpolatedTime)
this.globalPreviousTime != orig(this.globalPreviousTime)
this.globalCurrentTime != orig(this.globalCurrentTime)
this.softPreviousTime != orig(this.softPreviousTime)
this.softCurrentTime != orig(this.softCurrentTime)
===========================================================================
org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator.reinitialize(org.apache.commons.math3.ode.AbstractIntegrator, double[], double[][], boolean, org.apache.commons.math3.ode.EquationsMapper, org.apache.commons.math3.ode.EquationsMapper[]):::ENTER
this.previousState == null
this.yDotK == null
this.integrator == null
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.interpolatedPrimaryState == null
this.interpolatedPrimaryDerivatives == null
this.interpolatedSecondaryState == null
this.interpolatedSecondaryDerivatives == null
this.globalPreviousTime == Double.NaN
this.globalCurrentTime == Double.NaN
this.softPreviousTime == Double.NaN
this.softCurrentTime == Double.NaN
this.finalized == true
this.forward == true
this.dirtyState == true
this.primaryMapper == null
this.secondaryMappers == null
rkIntegrator != null
rkIntegrator.stepHandlers != null
rkIntegrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
rkIntegrator.stepStart == Double.NaN
rkIntegrator.resetOccurred == false
rkIntegrator.eventsStates != null
rkIntegrator.eventsStates.getClass().getName() == java.util.ArrayList.class
rkIntegrator.name != null
rkIntegrator.evaluations != null
rkIntegrator.evaluations.maximalCount one of { 5000, 50000, 2147483647 }
rkIntegrator.evaluations.count >= 0
rkIntegrator.evaluations.maxCountCallback != null
rkIntegrator.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
rkIntegrator.expandable != null
rkIntegrator.expandable.primary != null
rkIntegrator.expandable.primaryMapper != null
rkIntegrator.expandable.time >= 0.0
rkIntegrator.expandable.primaryState != null
rkIntegrator.expandable.primaryStateDot != null
rkIntegrator.expandable.primaryStateDot[] elements == 0.0
rkIntegrator.expandable.components != null
rkIntegrator.expandable.components[] elements != null
rkIntegrator.expandable.components[].getClass().getName() elements == org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent.class
rkIntegrator.expandable.components[].getClass().getName() one of { [], [org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent] }
rkIntegrator.expandable.components.getClass().getName() == java.util.ArrayList.class
y != null
yDotArray != null
yDotArray.getClass().getName() == double[][].class
yDotArray[] elements != null
primaryMapper != null
primaryMapper.firstIndex == 0
secondaryMappers != null
secondaryMappers.getClass().getName() == org.apache.commons.math3.ode.EquationsMapper[].class
secondaryMappers[] elements != null
secondaryMappers[].firstIndex elements == 2
secondaryMappers[].firstIndex one of { [], [2] }
secondaryMappers[].dimension elements one of { 6, 10 }
secondaryMappers[].dimension one of { [], [6], [10] }
size(rkIntegrator.expandable.components[]) one of { 0, 1 }
size(secondaryMappers[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator.reinitialize(org.apache.commons.math3.ode.AbstractIntegrator, double[], double[][], boolean, org.apache.commons.math3.ode.EquationsMapper, org.apache.commons.math3.ode.EquationsMapper[]):::EXIT
this.previousState == orig(this.previousState)
this.dirtyState == orig(this.dirtyState)
rkIntegrator.stepHandlers == orig(rkIntegrator.stepHandlers)
rkIntegrator.stepHandlers.getClass().getName() == orig(rkIntegrator.stepHandlers.getClass().getName())
rkIntegrator.isLastStep == orig(rkIntegrator.isLastStep)
rkIntegrator.resetOccurred == orig(rkIntegrator.resetOccurred)
rkIntegrator.eventsStates == orig(rkIntegrator.eventsStates)
rkIntegrator.eventsStates.getClass().getName() == orig(rkIntegrator.eventsStates.getClass().getName())
rkIntegrator.statesInitialized == orig(rkIntegrator.statesInitialized)
rkIntegrator.name == orig(rkIntegrator.name)
rkIntegrator.name.toString == orig(rkIntegrator.name.toString)
rkIntegrator.evaluations == orig(rkIntegrator.evaluations)
rkIntegrator.evaluations.maximalCount == orig(rkIntegrator.evaluations.maximalCount)
rkIntegrator.evaluations.count == orig(rkIntegrator.evaluations.count)
rkIntegrator.evaluations.maxCountCallback == orig(rkIntegrator.evaluations.maxCountCallback)
rkIntegrator.evaluations.maxCountCallback.getClass().getName() == orig(rkIntegrator.evaluations.maxCountCallback.getClass().getName())
rkIntegrator.expandable == orig(rkIntegrator.expandable)
rkIntegrator.expandable.primary == orig(rkIntegrator.expandable.primary)
rkIntegrator.expandable.primary.getClass().getName() == orig(rkIntegrator.expandable.primary.getClass().getName())
rkIntegrator.expandable.primaryMapper == orig(rkIntegrator.expandable.primaryMapper)
rkIntegrator.expandable.time == orig(rkIntegrator.expandable.time)
rkIntegrator.expandable.primaryState == orig(rkIntegrator.expandable.primaryState)
rkIntegrator.expandable.primaryState[] == orig(rkIntegrator.expandable.primaryState[])
rkIntegrator.expandable.primaryStateDot == orig(rkIntegrator.expandable.primaryStateDot)
rkIntegrator.expandable.primaryStateDot[] == orig(rkIntegrator.expandable.primaryStateDot[])
rkIntegrator.expandable.components == orig(rkIntegrator.expandable.components)
rkIntegrator.expandable.components[] == orig(rkIntegrator.expandable.components[])
rkIntegrator.expandable.components.getClass().getName() == orig(rkIntegrator.expandable.components.getClass().getName())
y[] == orig(y[])
yDotArray[] == orig(yDotArray[])
primaryMapper.firstIndex == orig(primaryMapper.firstIndex)
primaryMapper.dimension == orig(primaryMapper.dimension)
secondaryMappers[] == orig(secondaryMappers[])
secondaryMappers[].firstIndex == orig(secondaryMappers[].firstIndex)
secondaryMappers[].dimension == orig(secondaryMappers[].dimension)
this.previousState == null
this.yDotK != null
this.integrator != null
this.integrator.stepStart == Double.NaN
this.integrator.resetOccurred == false
this.integrator.expandable.primaryStateDot[] elements == 0.0
this.h == Double.NaN
this.currentState != null
this.interpolatedTime == Double.NaN
this.interpolatedState != null
this.interpolatedState[] elements == 0.0
this.interpolatedDerivatives != null
this.interpolatedDerivatives[] elements == 0.0
this.interpolatedPrimaryState != null
this.interpolatedPrimaryState[] elements == 0.0
this.interpolatedPrimaryDerivatives != null
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.interpolatedSecondaryState != null
this.interpolatedSecondaryDerivatives != null
this.globalPreviousTime == Double.NaN
this.globalCurrentTime == Double.NaN
this.softPreviousTime == Double.NaN
this.softCurrentTime == Double.NaN
this.finalized == false
this.dirtyState == true
this.primaryMapper != null
this.secondaryMappers != null
rkIntegrator.stepHandlers != null
rkIntegrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
rkIntegrator.stepStart == Double.NaN
rkIntegrator.resetOccurred == false
rkIntegrator.eventsStates != null
rkIntegrator.eventsStates.getClass().getName() == java.util.ArrayList.class
rkIntegrator.name != null
rkIntegrator.evaluations != null
rkIntegrator.evaluations.maximalCount one of { 5000, 50000, 2147483647 }
rkIntegrator.evaluations.count >= 0
rkIntegrator.evaluations.maxCountCallback != null
rkIntegrator.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
rkIntegrator.expandable != null
rkIntegrator.expandable.primary != null
rkIntegrator.expandable.primaryMapper != null
rkIntegrator.expandable.time >= 0.0
rkIntegrator.expandable.primaryState != null
rkIntegrator.expandable.primaryStateDot != null
rkIntegrator.expandable.primaryStateDot[] elements == 0.0
rkIntegrator.expandable.components != null
rkIntegrator.expandable.components[] elements != null
rkIntegrator.expandable.components[].getClass().getName() elements == org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent.class
rkIntegrator.expandable.components[].getClass().getName() one of { [], [org.apache.commons.math3.ode.ExpandableStatefulODE.SecondaryComponent] }
rkIntegrator.expandable.components.getClass().getName() == java.util.ArrayList.class
yDotArray[] elements != null
primaryMapper.firstIndex == 0
secondaryMappers[] elements != null
secondaryMappers[].firstIndex elements == 2
secondaryMappers[].firstIndex one of { [], [2] }
secondaryMappers[].dimension elements one of { 6, 10 }
secondaryMappers[].dimension one of { [], [6], [10] }
size(rkIntegrator.expandable.components[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator.shift():::ENTER
this.yDotK != null
this.integrator != null
this.integrator.isLastStep == false
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.interpolatedPrimaryState != null
this.interpolatedPrimaryDerivatives != null
this.interpolatedSecondaryState != null
this.interpolatedSecondaryDerivatives != null
this.finalized == false
this.dirtyState == true
this.primaryMapper != null
this.secondaryMappers != null
===========================================================================
org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator.shift():::EXIT
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.integrator.stepHandlers == orig(this.integrator.stepHandlers)
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.stepHandlers.getClass().getName())
this.integrator.stepStart == orig(this.integrator.stepStart)
this.integrator.isLastStep == orig(this.integrator.isLastStep)
this.integrator.resetOccurred == orig(this.integrator.resetOccurred)
this.integrator.eventsStates == orig(this.integrator.eventsStates)
this.integrator.eventsStates.getClass().getName() == orig(this.integrator.eventsStates.getClass().getName())
this.integrator.statesInitialized == orig(this.integrator.statesInitialized)
this.integrator.name == orig(this.integrator.name)
this.integrator.name.toString == orig(this.integrator.name.toString)
this.integrator.evaluations == orig(this.integrator.evaluations)
this.integrator.evaluations.maximalCount == orig(this.integrator.evaluations.maximalCount)
this.integrator.evaluations.count == orig(this.integrator.evaluations.count)
this.integrator.evaluations.maxCountCallback == orig(this.integrator.evaluations.maxCountCallback)
this.integrator.evaluations.maxCountCallback.getClass().getName() == orig(this.integrator.evaluations.maxCountCallback.getClass().getName())
this.integrator.expandable == orig(this.integrator.expandable)
this.integrator.expandable.primary == orig(this.integrator.expandable.primary)
this.integrator.expandable.primary.getClass().getName() == orig(this.integrator.expandable.primary.getClass().getName())
this.integrator.expandable.primaryMapper == orig(this.integrator.expandable.primaryMapper)
this.integrator.expandable.time == orig(this.integrator.expandable.time)
this.integrator.expandable.primaryState == orig(this.integrator.expandable.primaryState)
this.integrator.expandable.primaryState[] == orig(this.integrator.expandable.primaryState[])
this.integrator.expandable.primaryStateDot == orig(this.integrator.expandable.primaryStateDot)
this.integrator.expandable.primaryStateDot[] == orig(this.integrator.expandable.primaryStateDot[])
this.integrator.expandable.components == orig(this.integrator.expandable.components)
this.integrator.expandable.components[] == orig(this.integrator.expandable.components[])
this.integrator.expandable.components.getClass().getName() == orig(this.integrator.expandable.components.getClass().getName())
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.interpolatedPrimaryState == orig(this.interpolatedPrimaryState)
this.interpolatedPrimaryState[] == orig(this.interpolatedPrimaryState[])
this.interpolatedPrimaryDerivatives == orig(this.interpolatedPrimaryDerivatives)
this.interpolatedPrimaryDerivatives[] == orig(this.interpolatedPrimaryDerivatives[])
this.interpolatedSecondaryState == orig(this.interpolatedSecondaryState)
this.interpolatedSecondaryState.getClass().getName() == orig(this.interpolatedSecondaryState.getClass().getName())
this.interpolatedSecondaryState[] == orig(this.interpolatedSecondaryState[])
this.interpolatedSecondaryDerivatives == orig(this.interpolatedSecondaryDerivatives)
this.interpolatedSecondaryDerivatives.getClass().getName() == orig(this.interpolatedSecondaryDerivatives.getClass().getName())
this.interpolatedSecondaryDerivatives[] == orig(this.interpolatedSecondaryDerivatives[])
this.globalCurrentTime == orig(this.globalCurrentTime)
this.softCurrentTime == orig(this.softCurrentTime)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.secondaryMappers == orig(this.secondaryMappers)
this.secondaryMappers.getClass().getName() == orig(this.secondaryMappers.getClass().getName())
this.secondaryMappers[] == orig(this.secondaryMappers[])
this.secondaryMappers[].firstIndex == orig(this.secondaryMappers[].firstIndex)
this.secondaryMappers[].dimension == orig(this.secondaryMappers[].dimension)
size(this.previousState[]) == orig(size(this.previousState[]))
this.previousState != null
this.yDotK != null
this.integrator != null
this.integrator.isLastStep == false
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.interpolatedPrimaryState != null
this.interpolatedPrimaryDerivatives != null
this.interpolatedSecondaryState != null
this.interpolatedSecondaryDerivatives != null
this.finalized == false
this.dirtyState == true
this.primaryMapper != null
this.secondaryMappers != null
===========================================================================
org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator.writeExternal(java.io.ObjectOutput):::ENTER
this.previousState != null
this.yDotK != null
this.integrator == null
this.currentState != null
this.currentState[] elements != 0
this.interpolatedState != null
this.interpolatedState[] elements != 0
this.interpolatedDerivatives != null
this.interpolatedDerivatives[] elements != 0
this.interpolatedPrimaryState != null
this.interpolatedPrimaryState[] elements != 0
this.interpolatedPrimaryDerivatives != null
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.interpolatedPrimaryDerivatives[] one of { [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.interpolatedSecondaryState != null
this.interpolatedSecondaryState[] == []
this.interpolatedSecondaryDerivatives != null
this.interpolatedSecondaryDerivatives[] == []
this.finalized == true
this.forward == true
this.dirtyState == false
this.primaryMapper != null
this.primaryMapper.dimension one of { 2, 4 }
this.secondaryMappers != null
this.secondaryMappers[] == []
this.secondaryMappers[].getClass().getName() == []
this.secondaryMappers[].firstIndex == []
this.secondaryMappers[].dimension == []
out != null
out.getClass().getName() == java.io.ObjectOutputStream.class
size(this.previousState[]) one of { 2, 4 }
size(this.currentState[]) one of { 2, 4 }
size(this.interpolatedState[]) one of { 2, 4 }
size(this.interpolatedDerivatives[]) one of { 2, 4 }
size(this.interpolatedPrimaryState[]) one of { 2, 4 }
size(this.interpolatedPrimaryDerivatives[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator.writeExternal(java.io.ObjectOutput):::EXIT
this.previousState == orig(this.previousState)
this.previousState[] == orig(this.previousState[])
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.interpolatedPrimaryState == orig(this.interpolatedPrimaryState)
this.interpolatedPrimaryState[] == orig(this.interpolatedPrimaryState[])
this.interpolatedPrimaryDerivatives == orig(this.interpolatedPrimaryDerivatives)
this.interpolatedPrimaryDerivatives[] == orig(this.interpolatedPrimaryDerivatives[])
this.interpolatedSecondaryState == orig(this.interpolatedSecondaryState)
this.interpolatedSecondaryState.getClass().getName() == orig(this.interpolatedSecondaryState.getClass().getName())
this.interpolatedSecondaryState[] == orig(this.interpolatedSecondaryState[])
this.interpolatedSecondaryDerivatives == orig(this.interpolatedSecondaryDerivatives)
this.interpolatedSecondaryDerivatives.getClass().getName() == orig(this.interpolatedSecondaryDerivatives.getClass().getName())
this.interpolatedSecondaryDerivatives[] == orig(this.interpolatedSecondaryDerivatives[])
this.globalPreviousTime == orig(this.globalPreviousTime)
this.globalCurrentTime == orig(this.globalCurrentTime)
this.softPreviousTime == orig(this.softPreviousTime)
this.softCurrentTime == orig(this.softCurrentTime)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.secondaryMappers == orig(this.secondaryMappers)
this.secondaryMappers.getClass().getName() == orig(this.secondaryMappers.getClass().getName())
this.secondaryMappers[] == orig(this.secondaryMappers[])
this.secondaryMappers[].firstIndex == orig(this.secondaryMappers[].firstIndex)
this.secondaryMappers[].dimension == orig(this.secondaryMappers[].dimension)
this.previousState != null
this.yDotK != null
this.integrator == null
this.currentState != null
this.currentState[] elements != 0
this.interpolatedState != null
this.interpolatedState[] elements != 0
this.interpolatedDerivatives != null
this.interpolatedDerivatives[] elements != 0
this.interpolatedPrimaryState != null
this.interpolatedPrimaryState[] elements != 0
this.interpolatedPrimaryDerivatives != null
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.interpolatedPrimaryDerivatives[] one of { [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.interpolatedSecondaryState != null
this.interpolatedSecondaryState[] == []
this.interpolatedSecondaryDerivatives != null
this.interpolatedSecondaryDerivatives[] == []
this.finalized == true
this.forward == true
this.dirtyState == false
this.primaryMapper != null
this.primaryMapper.dimension one of { 2, 4 }
this.secondaryMappers != null
this.secondaryMappers[] == []
this.secondaryMappers[].getClass().getName() == []
this.secondaryMappers[].firstIndex == []
this.secondaryMappers[].dimension == []
size(this.previousState[]) one of { 2, 4 }
size(this.currentState[]) one of { 2, 4 }
size(this.interpolatedState[]) one of { 2, 4 }
size(this.interpolatedDerivatives[]) one of { 2, 4 }
size(this.interpolatedPrimaryState[]) one of { 2, 4 }
size(this.interpolatedPrimaryDerivatives[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.StepProblem:::OBJECT
this.rate one of { 0.0, 1.0 }
this.rateAfter == 1.0
this.switchTime == 2.0
===========================================================================
org.apache.commons.math3.ode.nonstiff.StepProblem.StepProblem(double, double, double):::ENTER
rateBefore == 0.0
rateAfter == 1.0
switchTime == 2.0
===========================================================================
org.apache.commons.math3.ode.nonstiff.StepProblem.StepProblem(double, double, double):::EXIT
this.rate == 0.0
===========================================================================
org.apache.commons.math3.ode.nonstiff.StepProblem.computeDerivatives(double, double[], double[]):::ENTER
yDot[] elements one of { 0.0, 1.0 }
yDot[] one of { [0.0], [1.0] }
size(y[]) == 1
size(yDot[]) == 1
===========================================================================
org.apache.commons.math3.ode.nonstiff.StepProblem.computeDerivatives(double, double[], double[]):::EXIT
this.rate == orig(this.rate)
this.rateAfter == orig(this.rateAfter)
this.switchTime == orig(this.switchTime)
y[] == orig(y[])
yDot[] elements one of { 0.0, 1.0 }
yDot[] one of { [0.0], [1.0] }
yDot[] >= orig(yDot[]) (elementwise)
===========================================================================
org.apache.commons.math3.ode.nonstiff.StepProblem.eventOccurred(double, double[], boolean):::ENTER
this.rate == 0.0
t == 2.0
y[] == [0.0]
y[] elements == 0.0
increasing == true
size(y[]) == 1
===========================================================================
org.apache.commons.math3.ode.nonstiff.StepProblem.eventOccurred(double, double[], boolean):::EXIT
this.rateAfter == orig(this.rateAfter)
this.switchTime == orig(this.switchTime)
y[] == orig(y[])
this.rate == 1.0
y[] == [0.0]
y[] elements == 0.0
return has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.STOP has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.RESET_STATE has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.RESET_DERIVATIVES has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.CONTINUE has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES has only one value
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES.getClass().getName() == org.apache.commons.math3.ode.events.EventHandler$Action[].class
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[] contains no nulls and has only one value, of length 4
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[].getClass().getName() == [org.apache.commons.math3.ode.events.EventHandler.Action, org.apache.commons.math3.ode.events.EventHandler.Action, org.apache.commons.math3.ode.events.EventHandler.Action, org.apache.commons.math3.ode.events.EventHandler.Action]
org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[].getClass().getName() elements == org.apache.commons.math3.ode.events.EventHandler.Action.class
size(org.apache.commons.math3.ode.events.EventHandler$Action.$VALUES[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.StepProblem.g(double, double[]):::ENTER
size(y[]) == 1
===========================================================================
org.apache.commons.math3.ode.nonstiff.StepProblem.g(double, double[]):::EXIT
this.rate == orig(this.rate)
this.rateAfter == orig(this.rateAfter)
this.switchTime == orig(this.switchTime)
y[] == orig(y[])
===========================================================================
org.apache.commons.math3.ode.nonstiff.StepProblem.getDimension():::ENTER
this.rate == 0.0
===========================================================================
org.apache.commons.math3.ode.nonstiff.StepProblem.getDimension():::EXIT
this.rate == orig(this.rate)
this.rateAfter == orig(this.rateAfter)
this.switchTime == orig(this.switchTime)
this.rate == 0.0
return == 1
===========================================================================
org.apache.commons.math3.ode.nonstiff.StepProblem.init(double, double[], double):::ENTER
this.rate == 0.0
t0 == 0.0
y0[] == [0.0]
y0[] elements == 0.0
t == 10.0
size(y0[]) == 1
===========================================================================
org.apache.commons.math3.ode.nonstiff.StepProblem.init(double, double[], double):::EXIT
this.rate == orig(this.rate)
this.rateAfter == orig(this.rateAfter)
this.switchTime == orig(this.switchTime)
y0[] == orig(y0[])
this.rate == 0.0
y0[] == [0.0]
y0[] elements == 0.0
===========================================================================
org.apache.commons.math3.ode.nonstiff.StepProblem.setRate(double):::ENTER
this.rate == 0.0
rate one of { 0.0, 1.0 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.StepProblem.setRate(double):::EXIT
this.rateAfter == orig(this.rateAfter)
this.switchTime == orig(this.switchTime)
===========================================================================
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator:::CLASS
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator.STATIC_C has only one value
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator.STATIC_C[] == [0.3333333333333333, 0.6666666666666666, 1.0]
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator.STATIC_C[] elements one of { 0.3333333333333333, 0.6666666666666666, 1.0 }
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator.STATIC_C[] sorted by <
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator.STATIC_A has only one value
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator.STATIC_A.getClass().getName() == double[][].class
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator.STATIC_A[] contains no nulls and has only one value, of length 3
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator.STATIC_A[] elements != null
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator.STATIC_B has only one value
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator.STATIC_B[] == [0.125, 0.375, 0.375, 0.125]
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator.STATIC_B[] elements one of { 0.125, 0.375 }
size(org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator.STATIC_C[]) == 3
size(org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator.STATIC_A[]) == 3
size(org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator.STATIC_B[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator:::OBJECT
this.c has only one value
this.c[] == [0.3333333333333333, 0.6666666666666666, 1.0]
this.c[] elements one of { 0.3333333333333333, 0.6666666666666666, 1.0 }
this.c[] sorted by <
this.a has only one value
this.a.getClass().getName() == double[][].class
this.a[] contains no nulls and has only one value, of length 3
this.a[] elements != null
this.b has only one value
this.b[] == [0.125, 0.375, 0.375, 0.125]
this.b[] elements one of { 0.125, 0.375 }
this.prototype.getClass().getName() == org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolator.class
this.prototype.previousState == null
this.prototype.yDotK == null
this.prototype.integrator == null
this.prototype.h == Double.NaN
this.prototype.currentState == null
this.prototype.interpolatedTime == Double.NaN
this.prototype.interpolatedState == null
this.prototype.interpolatedDerivatives == null
this.prototype.interpolatedPrimaryState == null
this.prototype.interpolatedPrimaryDerivatives == null
this.prototype.interpolatedSecondaryState == null
this.prototype.interpolatedSecondaryDerivatives == null
this.prototype.globalPreviousTime == Double.NaN
this.prototype.globalCurrentTime == Double.NaN
this.prototype.softPreviousTime == Double.NaN
this.prototype.softCurrentTime == Double.NaN
this.prototype.finalized == false
this.prototype.forward == true
this.prototype.dirtyState == true
this.prototype.primaryMapper == null
this.prototype.secondaryMappers == null
this.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.isLastStep == false
this.resetOccurred == false
this.eventsStates.getClass().getName() == java.util.ArrayList.class
this.statesInitialized == false
this.name has only one value
this.name.toString == "3/8"
this.evaluations.maximalCount == 2147483647
this.evaluations.count == 0
this.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
this.expandable == null
size(this.c[]) == 3
size(this.a[]) == 3
size(this.b[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator.ThreeEighthesIntegrator(double):::ENTER
===========================================================================
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator.ThreeEighthesIntegrator(double):::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest$1:::OBJECT
this has only one value
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest$1.(org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest):::ENTER
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest$1.(org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest):::EXIT
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest.this)
===========================================================================
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest$1.handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean):::ENTER
interpolator has only one value
interpolator.getClass().getName() == org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolator.class
===========================================================================
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest$1.handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean):::EXIT
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest.this)
===========================================================================
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest$1.init(double, double[], double):::ENTER
t0 == 0.0
y0 has only one value
y0[] == [0.0]
y0[] elements == 0.0
t == 5.0
size(y0[]) == 1
===========================================================================
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest$1.init(double, double[], double):::EXIT
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest.this)
y0[] == orig(y0[])
y0[] == [0.0]
y0[] elements == 0.0
===========================================================================
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest$2:::OBJECT
this has only one value
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest$2.(org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest):::ENTER
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest$2.(org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest):::EXIT
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest.this)
===========================================================================
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest$2.computeDerivatives(double, double[], double[]):::ENTER
y has only one value
dot has only one value
dot[] elements one of { 0.0, 1.0 }
dot[] one of { [0.0], [1.0] }
size(y[]) == 1
size(dot[]) == 1
===========================================================================
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest$2.computeDerivatives(double, double[], double[]):::EXIT
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest.this)
y[] == orig(y[])
dot[] == [1.0]
dot[] elements == 1.0
dot[] >= orig(dot[]) (elementwise)
===========================================================================
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest$2.getDimension():::ENTER
===========================================================================
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest$2.getDimension():::EXIT
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest.this == orig(org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest.this)
return == 1
===========================================================================
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest$KeplerHandler:::OBJECT
this has only one value
this.pb has only one value
this.pb.e == 0.9
this.pb.y has only one value
this.pb.n == 4
this.pb.calls >= 0
this.pb.t0 == 0.0
this.pb.y0 has only one value
this.pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
this.pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
this.pb.t1 == 20.0
this.pb.errorScale has only one value
this.pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
this.pb.errorScale[] elements == 1.0
size(this.pb.y[]) == 4
size(this.pb.y0[]) == 4
size(this.pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest$KeplerHandler.KeplerHandler(org.apache.commons.math3.ode.TestProblem3):::ENTER
pb has only one value
pb.e == 0.9
pb.y has only one value
pb.y[] == [0.0, 0.0, 0.0, 0.0]
pb.y[] elements == 0.0
pb.n == 4
pb.calls == 0
pb.t0 == 0.0
pb.y0 has only one value
pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
pb.t1 == 20.0
pb.errorScale has only one value
pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
pb.errorScale[] elements == 1.0
size(pb.y[]) == 4
size(pb.y0[]) == 4
size(pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest$KeplerHandler.KeplerHandler(org.apache.commons.math3.ode.TestProblem3):::EXIT
pb.e == orig(pb.e)
pb.y == orig(pb.y)
pb.y[] == orig(pb.y[])
pb.n == orig(pb.n)
pb.calls == orig(pb.calls)
pb.t0 == orig(pb.t0)
pb.y0 == orig(pb.y0)
pb.y0[] == orig(pb.y0[])
pb.t1 == orig(pb.t1)
pb.errorScale == orig(pb.errorScale)
pb.errorScale[] == orig(pb.errorScale[])
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
this.maxError == 0.0
pb.e == 0.9
pb.y has only one value
pb.y[] == [0.0, 0.0, 0.0, 0.0]
pb.y[] elements == 0.0
pb.n == 4
pb.calls == 0
pb.t0 == 0.0
pb.y0 has only one value
pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
pb.t1 == 20.0
pb.errorScale has only one value
pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
pb.errorScale[] elements == 1.0
size(pb.y[]) == 4
size(pb.y0[]) == 4
size(pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest$KeplerHandler.handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean):::ENTER
interpolator has only one value
interpolator.getClass().getName() == org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolator.class
===========================================================================
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest$KeplerHandler.handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean):::EXIT
this.pb == orig(this.pb)
this.pb.e == orig(this.pb.e)
this.pb.y == orig(this.pb.y)
this.pb.n == orig(this.pb.n)
this.pb.calls == orig(this.pb.calls)
this.pb.t0 == orig(this.pb.t0)
this.pb.y0 == orig(this.pb.y0)
this.pb.y0[] == orig(this.pb.y0[])
this.pb.t1 == orig(this.pb.t1)
this.pb.errorScale == orig(this.pb.errorScale)
this.pb.errorScale[] == orig(this.pb.errorScale[])
size(this.pb.y[]) == orig(size(this.pb.y[]))
this.pb.y[] elements != 0
this.maxError >= orig(this.maxError)
===========================================================================
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest$KeplerHandler.init(double, double[], double):::ENTER
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
this.maxError == 0.0
t0 == 0.0
y0 has only one value
y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
t == 20.0
size(y0[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest$KeplerHandler.init(double, double[], double):::EXIT
this.pb == orig(this.pb)
this.pb.e == orig(this.pb.e)
this.pb.y == orig(this.pb.y)
this.pb.y[] == orig(this.pb.y[])
this.pb.n == orig(this.pb.n)
this.pb.calls == orig(this.pb.calls)
this.pb.t0 == orig(this.pb.t0)
this.pb.y0 == orig(this.pb.y0)
this.pb.y0[] == orig(this.pb.y0[])
this.pb.t1 == orig(this.pb.t1)
this.pb.errorScale == orig(this.pb.errorScale)
this.pb.errorScale[] == orig(this.pb.errorScale[])
this.maxError == orig(this.maxError)
y0[] == orig(y0[])
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
this.maxError == 0.0
y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest:::OBJECT
===========================================================================
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest.ThreeEighthesIntegratorTest():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest.testBackward():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest.testBackward():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest.testBigStep():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest.testBigStep():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest.testDecreasingSteps():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest.testDecreasingSteps():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest.testKepler():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest.testKepler():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest.testSmallStep():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest.testSmallStep():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest.testStepSize():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest.testStepSize():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolator:::CLASS
===========================================================================
org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolator:::OBJECT
this.yDotK.getClass().getName() == double[][].class
this.yDotK[] elements != null
this.integrator.getClass().getName() == org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator.class
this.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.integrator.stepSize <= 1.25
this.integrator.stepSize >= -0.25
this.integrator.eventsStates.getClass().getName() == java.util.ArrayList.class
this.integrator.name has only one value
this.integrator.name.toString == "3/8"
this.integrator.evaluations.maximalCount == 2147483647
this.integrator.evaluations.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
this.integrator.expandable.time == 0.0
this.integrator.expandable.components[] == []
this.integrator.expandable.components[].getClass().getName() == []
this.integrator.expandable.components.getClass().getName() == java.util.ArrayList.class
this.h <= 1.25
this.h >= -0.25
this.interpolatedSecondaryState.getClass().getName() == double[][].class
this.interpolatedSecondaryState[] == []
this.interpolatedSecondaryDerivatives.getClass().getName() == double[][].class
this.interpolatedSecondaryDerivatives[] == []
this.primaryMapper.firstIndex == 0
this.primaryMapper.dimension one of { 1, 2, 4 }
this.secondaryMappers.getClass().getName() == org.apache.commons.math3.ode.EquationsMapper[].class
this.secondaryMappers[] == []
this.secondaryMappers[].getClass().getName() == []
this.secondaryMappers[].firstIndex == []
this.secondaryMappers[].dimension == []
size(this.previousState[]) one of { 1, 2, 4 }
size(this.yDotK[]) == 4
size(this.integrator.expandable.primaryState[]) one of { 1, 2, 4 }
size(this.integrator.expandable.primaryStateDot[]) one of { 1, 2, 4 }
size(this.currentState[]) one of { 1, 2, 4 }
size(this.interpolatedState[]) one of { 1, 2, 4 }
size(this.interpolatedDerivatives[]) one of { 1, 2, 4 }
size(this.interpolatedPrimaryState[]) one of { 1, 2, 4 }
size(this.interpolatedPrimaryDerivatives[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolator.ThreeEighthesStepInterpolator():::EXIT
this.previousState == null
this.yDotK == null
this.integrator == null
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.interpolatedPrimaryState == null
this.interpolatedPrimaryDerivatives == null
this.interpolatedSecondaryState == null
this.interpolatedSecondaryDerivatives == null
this.globalPreviousTime == Double.NaN
this.globalCurrentTime == Double.NaN
this.softPreviousTime == Double.NaN
this.softCurrentTime == Double.NaN
this.finalized == false
this.forward == true
this.dirtyState == true
this.primaryMapper == null
this.secondaryMappers == null
===========================================================================
org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolator.ThreeEighthesStepInterpolator(org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolator):::ENTER
interpolator.yDotK.getClass().getName() == double[][].class
interpolator.yDotK[] contains no nulls and has only one value, of length 4
interpolator.yDotK[] elements != null
interpolator.integrator.getClass().getName() == org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator.class
interpolator.integrator.stepHandlers has only one value
interpolator.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.stepSize one of { 0.0019999999994659845, 0.005999999999999999 }
interpolator.integrator.resetOccurred == false
interpolator.integrator.eventsStates has only one value
interpolator.integrator.eventsStates.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.statesInitialized == true
interpolator.integrator.name has only one value
interpolator.integrator.name.toString == "3/8"
interpolator.integrator.evaluations has only one value
interpolator.integrator.expandable has only one value
interpolator.h one of { 0.0019999999994659845, 0.005999999999999999, Double.NaN }
interpolator.h <= 0.006000000000000227
interpolator.currentState[] elements != 0
interpolator.interpolatedState[] elements != 0
interpolator.interpolatedDerivatives[] elements != 0
interpolator.interpolatedPrimaryState[] elements != 0
interpolator.interpolatedPrimaryDerivatives[] == [0.0, 0.0, 0.0, 0.0]
interpolator.interpolatedPrimaryDerivatives[] elements == 0.0
interpolator.interpolatedSecondaryState.getClass().getName() == double[][].class
interpolator.interpolatedSecondaryState[] == []
interpolator.interpolatedSecondaryDerivatives.getClass().getName() == double[][].class
interpolator.interpolatedSecondaryDerivatives[] == []
interpolator.finalized == true
interpolator.forward == true
interpolator.primaryMapper.firstIndex == 0
interpolator.primaryMapper.dimension == 4
interpolator.secondaryMappers.getClass().getName() == org.apache.commons.math3.ode.EquationsMapper[].class
interpolator.secondaryMappers[] == []
interpolator.secondaryMappers[].getClass().getName() == []
interpolator.secondaryMappers[].firstIndex == []
interpolator.secondaryMappers[].dimension == []
size(interpolator.previousState[]) == 4
size(interpolator.yDotK[]) == 4
size(interpolator.currentState[]) == 4
size(interpolator.interpolatedState[]) == 4
size(interpolator.interpolatedDerivatives[]) == 4
size(interpolator.interpolatedPrimaryState[]) == 4
size(interpolator.interpolatedPrimaryDerivatives[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolator.ThreeEighthesStepInterpolator(org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolator):::EXIT
interpolator.previousState == orig(interpolator.previousState)
interpolator.previousState[] == orig(interpolator.previousState[])
interpolator.yDotK == orig(interpolator.yDotK)
interpolator.yDotK.getClass().getName() == orig(interpolator.yDotK.getClass().getName())
interpolator.yDotK[] == orig(interpolator.yDotK[])
interpolator.integrator == orig(interpolator.integrator)
interpolator.integrator.getClass().getName() == orig(interpolator.integrator.getClass().getName())
interpolator.integrator.stepHandlers == orig(interpolator.integrator.stepHandlers)
interpolator.integrator.stepHandlers.getClass().getName() == orig(interpolator.integrator.stepHandlers.getClass().getName())
interpolator.integrator.stepStart == orig(interpolator.integrator.stepStart)
interpolator.integrator.stepSize == orig(interpolator.integrator.stepSize)
interpolator.integrator.isLastStep == orig(interpolator.integrator.isLastStep)
interpolator.integrator.resetOccurred == orig(interpolator.integrator.resetOccurred)
interpolator.integrator.eventsStates == orig(interpolator.integrator.eventsStates)
interpolator.integrator.eventsStates.getClass().getName() == orig(interpolator.integrator.eventsStates.getClass().getName())
interpolator.integrator.statesInitialized == orig(interpolator.integrator.statesInitialized)
interpolator.integrator.name == orig(interpolator.integrator.name)
interpolator.integrator.name.toString == orig(interpolator.integrator.name.toString)
interpolator.integrator.evaluations == orig(interpolator.integrator.evaluations)
interpolator.integrator.expandable == orig(interpolator.integrator.expandable)
interpolator.currentState == orig(interpolator.currentState)
interpolator.currentState[] == orig(interpolator.currentState[])
interpolator.interpolatedState == orig(interpolator.interpolatedState)
interpolator.interpolatedState[] == orig(interpolator.interpolatedState[])
interpolator.interpolatedDerivatives == orig(interpolator.interpolatedDerivatives)
interpolator.interpolatedDerivatives[] == orig(interpolator.interpolatedDerivatives[])
interpolator.interpolatedPrimaryState == orig(interpolator.interpolatedPrimaryState)
interpolator.interpolatedPrimaryState[] == orig(interpolator.interpolatedPrimaryState[])
interpolator.interpolatedPrimaryDerivatives == orig(interpolator.interpolatedPrimaryDerivatives)
interpolator.interpolatedPrimaryDerivatives[] == orig(interpolator.interpolatedPrimaryDerivatives[])
interpolator.interpolatedSecondaryState == orig(interpolator.interpolatedSecondaryState)
interpolator.interpolatedSecondaryState.getClass().getName() == orig(interpolator.interpolatedSecondaryState.getClass().getName())
interpolator.interpolatedSecondaryState[] == orig(interpolator.interpolatedSecondaryState[])
interpolator.interpolatedSecondaryDerivatives == orig(interpolator.interpolatedSecondaryDerivatives)
interpolator.interpolatedSecondaryDerivatives.getClass().getName() == orig(interpolator.interpolatedSecondaryDerivatives.getClass().getName())
interpolator.interpolatedSecondaryDerivatives[] == orig(interpolator.interpolatedSecondaryDerivatives[])
interpolator.finalized == orig(interpolator.finalized)
interpolator.forward == orig(interpolator.forward)
interpolator.dirtyState == orig(interpolator.dirtyState)
interpolator.primaryMapper == orig(interpolator.primaryMapper)
interpolator.primaryMapper.firstIndex == orig(interpolator.primaryMapper.firstIndex)
interpolator.primaryMapper.dimension == orig(interpolator.primaryMapper.dimension)
interpolator.secondaryMappers == orig(interpolator.secondaryMappers)
interpolator.secondaryMappers.getClass().getName() == orig(interpolator.secondaryMappers.getClass().getName())
interpolator.secondaryMappers[] == orig(interpolator.secondaryMappers[])
interpolator.secondaryMappers[].firstIndex == orig(interpolator.secondaryMappers[].firstIndex)
interpolator.secondaryMappers[].dimension == orig(interpolator.secondaryMappers[].dimension)
this.integrator == null
this.h one of { 0.0019999999994659845, 0.005999999999999999, Double.NaN }
this.h <= 0.006000000000000227
this.currentState[] elements != 0
this.interpolatedState[] elements != 0
this.interpolatedDerivatives[] elements != 0
this.interpolatedPrimaryState[] elements != 0
this.interpolatedPrimaryDerivatives[] == [0.0, 0.0, 0.0, 0.0]
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.finalized == true
this.forward == true
this.primaryMapper.dimension == 4
interpolator.yDotK.getClass().getName() == double[][].class
interpolator.yDotK[] contains no nulls and has only one value, of length 4
interpolator.yDotK[] elements != null
interpolator.integrator.getClass().getName() == org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator.class
interpolator.integrator.stepHandlers has only one value
interpolator.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.stepSize one of { 0.0019999999994659845, 0.005999999999999999 }
interpolator.integrator.resetOccurred == false
interpolator.integrator.eventsStates has only one value
interpolator.integrator.eventsStates.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.statesInitialized == true
interpolator.integrator.name has only one value
interpolator.integrator.name.toString == "3/8"
interpolator.integrator.evaluations has only one value
interpolator.integrator.expandable has only one value
interpolator.h one of { 0.0019999999994659845, 0.005999999999999999, Double.NaN }
interpolator.h <= 0.006000000000000227
interpolator.currentState[] elements != 0
interpolator.interpolatedState[] elements != 0
interpolator.interpolatedDerivatives[] elements != 0
interpolator.interpolatedPrimaryState[] elements != 0
interpolator.interpolatedPrimaryDerivatives[] == [0.0, 0.0, 0.0, 0.0]
interpolator.interpolatedPrimaryDerivatives[] elements == 0.0
interpolator.interpolatedSecondaryState.getClass().getName() == double[][].class
interpolator.interpolatedSecondaryState[] == []
interpolator.interpolatedSecondaryDerivatives.getClass().getName() == double[][].class
interpolator.interpolatedSecondaryDerivatives[] == []
interpolator.finalized == true
interpolator.forward == true
interpolator.primaryMapper.firstIndex == 0
interpolator.primaryMapper.dimension == 4
interpolator.secondaryMappers.getClass().getName() == org.apache.commons.math3.ode.EquationsMapper[].class
interpolator.secondaryMappers[] == []
interpolator.secondaryMappers[].getClass().getName() == []
interpolator.secondaryMappers[].firstIndex == []
interpolator.secondaryMappers[].dimension == []
size(this.previousState[]) == 4
size(this.currentState[]) == 4
size(this.interpolatedState[]) == 4
size(this.interpolatedDerivatives[]) == 4
size(this.interpolatedPrimaryState[]) == 4
size(this.interpolatedPrimaryDerivatives[]) == 4
size(interpolator.previousState[]) == 4
size(interpolator.yDotK[]) == 4
size(interpolator.currentState[]) == 4
size(interpolator.interpolatedState[]) == 4
size(interpolator.interpolatedDerivatives[]) == 4
size(interpolator.interpolatedPrimaryState[]) == 4
size(interpolator.interpolatedPrimaryDerivatives[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::ENTER
this.dirtyState == true
theta <= 1.0
theta >= 0.0
===========================================================================
org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::EXIT
this.previousState == orig(this.previousState)
this.previousState[] == orig(this.previousState[])
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.integrator.stepHandlers == orig(this.integrator.stepHandlers)
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.stepHandlers.getClass().getName())
this.integrator.stepStart == orig(this.integrator.stepStart)
this.integrator.stepSize == orig(this.integrator.stepSize)
this.integrator.isLastStep == orig(this.integrator.isLastStep)
this.integrator.resetOccurred == orig(this.integrator.resetOccurred)
this.integrator.eventsStates == orig(this.integrator.eventsStates)
this.integrator.eventsStates.getClass().getName() == orig(this.integrator.eventsStates.getClass().getName())
this.integrator.statesInitialized == orig(this.integrator.statesInitialized)
this.integrator.name == orig(this.integrator.name)
this.integrator.name.toString == orig(this.integrator.name.toString)
this.integrator.evaluations == orig(this.integrator.evaluations)
this.integrator.evaluations.maximalCount == orig(this.integrator.evaluations.maximalCount)
this.integrator.evaluations.count == orig(this.integrator.evaluations.count)
this.integrator.evaluations.maxCountCallback == orig(this.integrator.evaluations.maxCountCallback)
this.integrator.evaluations.maxCountCallback.getClass().getName() == orig(this.integrator.evaluations.maxCountCallback.getClass().getName())
this.integrator.expandable == orig(this.integrator.expandable)
this.integrator.expandable.primary == orig(this.integrator.expandable.primary)
this.integrator.expandable.primary.getClass().getName() == orig(this.integrator.expandable.primary.getClass().getName())
this.integrator.expandable.primaryMapper == orig(this.integrator.expandable.primaryMapper)
this.integrator.expandable.time == orig(this.integrator.expandable.time)
this.integrator.expandable.primaryState == orig(this.integrator.expandable.primaryState)
this.integrator.expandable.primaryState[] == orig(this.integrator.expandable.primaryState[])
this.integrator.expandable.primaryStateDot == orig(this.integrator.expandable.primaryStateDot)
this.integrator.expandable.primaryStateDot[] == orig(this.integrator.expandable.primaryStateDot[])
this.integrator.expandable.components == orig(this.integrator.expandable.components)
this.integrator.expandable.components[] == orig(this.integrator.expandable.components[])
this.integrator.expandable.components.getClass().getName() == orig(this.integrator.expandable.components.getClass().getName())
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedPrimaryState == orig(this.interpolatedPrimaryState)
this.interpolatedPrimaryState[] == orig(this.interpolatedPrimaryState[])
this.interpolatedPrimaryDerivatives == orig(this.interpolatedPrimaryDerivatives)
this.interpolatedPrimaryDerivatives[] == orig(this.interpolatedPrimaryDerivatives[])
this.interpolatedSecondaryState == orig(this.interpolatedSecondaryState)
this.interpolatedSecondaryState.getClass().getName() == orig(this.interpolatedSecondaryState.getClass().getName())
this.interpolatedSecondaryState[] == orig(this.interpolatedSecondaryState[])
this.interpolatedSecondaryDerivatives == orig(this.interpolatedSecondaryDerivatives)
this.interpolatedSecondaryDerivatives.getClass().getName() == orig(this.interpolatedSecondaryDerivatives.getClass().getName())
this.interpolatedSecondaryDerivatives[] == orig(this.interpolatedSecondaryDerivatives[])
this.globalPreviousTime == orig(this.globalPreviousTime)
this.globalCurrentTime == orig(this.globalCurrentTime)
this.softPreviousTime == orig(this.softPreviousTime)
this.softCurrentTime == orig(this.softCurrentTime)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.secondaryMappers == orig(this.secondaryMappers)
this.secondaryMappers.getClass().getName() == orig(this.secondaryMappers.getClass().getName())
this.secondaryMappers[] == orig(this.secondaryMappers[])
this.secondaryMappers[].firstIndex == orig(this.secondaryMappers[].firstIndex)
this.secondaryMappers[].dimension == orig(this.secondaryMappers[].dimension)
size(this.interpolatedState[]) == orig(size(this.interpolatedState[]))
size(this.interpolatedDerivatives[]) == orig(size(this.interpolatedDerivatives[]))
this.dirtyState == true
===========================================================================
org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolator.doCopy():::ENTER
this.yDotK[] contains no nulls and has only one value, of length 4
this.integrator.stepHandlers has only one value
this.integrator.stepSize one of { 0.0019999999994659845, 0.005999999999999999 }
this.integrator.resetOccurred == false
this.integrator.eventsStates has only one value
this.integrator.statesInitialized == true
this.integrator.evaluations has only one value
this.integrator.evaluations.maxCountCallback has only one value
this.integrator.expandable has only one value
this.integrator.expandable.primary has only one value
this.integrator.expandable.primary.getClass().getName() == org.apache.commons.math3.ode.TestProblem3.class
this.integrator.expandable.primaryMapper has only one value
this.integrator.expandable.primaryState has only one value
this.integrator.expandable.primaryState[] elements != 0
this.integrator.expandable.primaryStateDot has only one value
this.integrator.expandable.primaryStateDot[] elements != 0
this.integrator.expandable.components has only one value
this.h one of { 0.0019999999994659845, 0.005999999999999999, Double.NaN }
this.h <= 0.006000000000000227
this.currentState[] elements != 0
this.interpolatedState[] elements != 0
this.interpolatedDerivatives[] elements != 0
this.interpolatedPrimaryState[] elements != 0
this.interpolatedPrimaryDerivatives[] == [0.0, 0.0, 0.0, 0.0]
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.finalized == true
this.forward == true
this.primaryMapper.dimension == 4
size(this.previousState[]) == 4
size(this.integrator.expandable.primaryState[]) == 4
size(this.integrator.expandable.primaryStateDot[]) == 4
size(this.currentState[]) == 4
size(this.interpolatedState[]) == 4
size(this.interpolatedDerivatives[]) == 4
size(this.interpolatedPrimaryState[]) == 4
size(this.interpolatedPrimaryDerivatives[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolator.doCopy():::EXIT
this.previousState == orig(this.previousState)
this.previousState[] == orig(this.previousState[])
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.integrator.stepHandlers == orig(this.integrator.stepHandlers)
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.stepHandlers.getClass().getName())
this.integrator.stepStart == orig(this.integrator.stepStart)
this.integrator.stepSize == orig(this.integrator.stepSize)
this.integrator.isLastStep == orig(this.integrator.isLastStep)
this.integrator.resetOccurred == orig(this.integrator.resetOccurred)
this.integrator.eventsStates == orig(this.integrator.eventsStates)
this.integrator.eventsStates.getClass().getName() == orig(this.integrator.eventsStates.getClass().getName())
this.integrator.statesInitialized == orig(this.integrator.statesInitialized)
this.integrator.name == orig(this.integrator.name)
this.integrator.name.toString == orig(this.integrator.name.toString)
this.integrator.evaluations == orig(this.integrator.evaluations)
this.integrator.evaluations.maximalCount == orig(this.integrator.evaluations.maximalCount)
this.integrator.evaluations.count == orig(this.integrator.evaluations.count)
this.integrator.evaluations.maxCountCallback == orig(this.integrator.evaluations.maxCountCallback)
this.integrator.evaluations.maxCountCallback.getClass().getName() == orig(this.integrator.evaluations.maxCountCallback.getClass().getName())
this.integrator.expandable == orig(this.integrator.expandable)
this.integrator.expandable.primary == orig(this.integrator.expandable.primary)
this.integrator.expandable.primary.getClass().getName() == orig(this.integrator.expandable.primary.getClass().getName())
this.integrator.expandable.primaryMapper == orig(this.integrator.expandable.primaryMapper)
this.integrator.expandable.time == orig(this.integrator.expandable.time)
this.integrator.expandable.primaryState == orig(this.integrator.expandable.primaryState)
this.integrator.expandable.primaryState[] == orig(this.integrator.expandable.primaryState[])
this.integrator.expandable.primaryStateDot == orig(this.integrator.expandable.primaryStateDot)
this.integrator.expandable.primaryStateDot[] == orig(this.integrator.expandable.primaryStateDot[])
this.integrator.expandable.components == orig(this.integrator.expandable.components)
this.integrator.expandable.components[] == orig(this.integrator.expandable.components[])
this.integrator.expandable.components.getClass().getName() == orig(this.integrator.expandable.components.getClass().getName())
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.interpolatedPrimaryState == orig(this.interpolatedPrimaryState)
this.interpolatedPrimaryState[] == orig(this.interpolatedPrimaryState[])
this.interpolatedPrimaryDerivatives == orig(this.interpolatedPrimaryDerivatives)
this.interpolatedPrimaryDerivatives[] == orig(this.interpolatedPrimaryDerivatives[])
this.interpolatedSecondaryState == orig(this.interpolatedSecondaryState)
this.interpolatedSecondaryState.getClass().getName() == orig(this.interpolatedSecondaryState.getClass().getName())
this.interpolatedSecondaryState[] == orig(this.interpolatedSecondaryState[])
this.interpolatedSecondaryDerivatives == orig(this.interpolatedSecondaryDerivatives)
this.interpolatedSecondaryDerivatives.getClass().getName() == orig(this.interpolatedSecondaryDerivatives.getClass().getName())
this.interpolatedSecondaryDerivatives[] == orig(this.interpolatedSecondaryDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.secondaryMappers == orig(this.secondaryMappers)
this.secondaryMappers.getClass().getName() == orig(this.secondaryMappers.getClass().getName())
this.secondaryMappers[] == orig(this.secondaryMappers[])
this.secondaryMappers[].firstIndex == orig(this.secondaryMappers[].firstIndex)
this.secondaryMappers[].dimension == orig(this.secondaryMappers[].dimension)
this.yDotK[] contains no nulls and has only one value, of length 4
this.integrator.stepHandlers has only one value
this.integrator.stepSize one of { 0.0019999999994659845, 0.005999999999999999 }
this.integrator.resetOccurred == false
this.integrator.eventsStates has only one value
this.integrator.statesInitialized == true
this.integrator.evaluations has only one value
this.integrator.evaluations.maxCountCallback has only one value
this.integrator.expandable has only one value
this.integrator.expandable.primary has only one value
this.integrator.expandable.primary.getClass().getName() == org.apache.commons.math3.ode.TestProblem3.class
this.integrator.expandable.primaryMapper has only one value
this.integrator.expandable.primaryState has only one value
this.integrator.expandable.primaryState[] elements != 0
this.integrator.expandable.primaryStateDot has only one value
this.integrator.expandable.primaryStateDot[] elements != 0
this.integrator.expandable.components has only one value
this.h one of { 0.0019999999994659845, 0.005999999999999999, Double.NaN }
this.h <= 0.006000000000000227
this.currentState[] elements != 0
this.interpolatedState[] elements != 0
this.interpolatedDerivatives[] elements != 0
this.interpolatedPrimaryState[] elements != 0
this.interpolatedPrimaryDerivatives[] == [0.0, 0.0, 0.0, 0.0]
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.finalized == true
this.forward == true
this.primaryMapper.dimension == 4
return.getClass().getName() == org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolator.class
size(this.previousState[]) == 4
size(this.integrator.expandable.primaryState[]) == 4
size(this.integrator.expandable.primaryStateDot[]) == 4
size(this.currentState[]) == 4
size(this.interpolatedState[]) == 4
size(this.interpolatedDerivatives[]) == 4
size(this.interpolatedPrimaryState[]) == 4
size(this.interpolatedPrimaryDerivatives[]) == 4
===========================================================================
org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolatorTest:::OBJECT
===========================================================================
org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolatorTest.ThreeEighthesStepInterpolatorTest():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolatorTest.derivativesConsistency():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolatorTest.derivativesConsistency():::EXIT
===========================================================================
org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolatorTest.serialization():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolatorTest.serialization():::EXIT
===========================================================================
org.apache.commons.math3.ode.sampling.AbstractStepInterpolator:::OBJECT
this.h != 0
this.interpolatedSecondaryState.getClass().getName() == double[][].class
this.interpolatedSecondaryState[] elements != null
this.interpolatedSecondaryDerivatives.getClass().getName() == double[][].class
this.interpolatedSecondaryDerivatives[] elements != null
this.primaryMapper.firstIndex == 0
this.primaryMapper.dimension >= 1
this.secondaryMappers.getClass().getName() == org.apache.commons.math3.ode.EquationsMapper[].class
this.secondaryMappers[] elements != null
this.secondaryMappers[].getClass().getName() elements == org.apache.commons.math3.ode.EquationsMapper.class
this.secondaryMappers[].getClass().getName() one of { [], [org.apache.commons.math3.ode.EquationsMapper] }
this.secondaryMappers[].firstIndex elements == 2
this.secondaryMappers[].firstIndex one of { [], [2] }
this.secondaryMappers[].dimension elements one of { 6, 10 }
this.secondaryMappers[].dimension one of { [], [6], [10] }
size(this.currentState[]) >= 1
size(this.interpolatedState[]) >= 1
size(this.interpolatedDerivatives[]) >= 1
size(this.interpolatedPrimaryState[]) >= 1
size(this.interpolatedPrimaryDerivatives[]) >= 1
size(this.interpolatedSecondaryState[]) one of { 0, 1 }
size(this.interpolatedSecondaryDerivatives[]) one of { 0, 1 }
size(this.secondaryMappers[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.AbstractStepInterpolator():::EXIT
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.interpolatedPrimaryState == null
this.interpolatedPrimaryDerivatives == null
this.interpolatedSecondaryState == null
this.interpolatedSecondaryDerivatives == null
this.globalPreviousTime == Double.NaN
this.globalCurrentTime == Double.NaN
this.softPreviousTime == Double.NaN
this.softCurrentTime == Double.NaN
this.finalized == false
this.forward == true
this.dirtyState == true
this.primaryMapper == null
this.secondaryMappers == null
===========================================================================
org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.AbstractStepInterpolator(double[], boolean, org.apache.commons.math3.ode.EquationsMapper, org.apache.commons.math3.ode.EquationsMapper[]):::ENTER
y != null
y[] elements >= 0.0
primaryMapper != null
primaryMapper.firstIndex == 0
secondaryMappers != null
secondaryMappers.getClass().getName() == org.apache.commons.math3.ode.EquationsMapper[].class
secondaryMappers[] == []
secondaryMappers[].firstIndex == []
secondaryMappers[].dimension == []
===========================================================================
org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.AbstractStepInterpolator(double[], boolean, org.apache.commons.math3.ode.EquationsMapper, org.apache.commons.math3.ode.EquationsMapper[]):::EXIT
y[] == orig(y[])
primaryMapper.firstIndex == orig(primaryMapper.firstIndex)
primaryMapper.dimension == orig(primaryMapper.dimension)
secondaryMappers[] == orig(secondaryMappers[])
secondaryMappers[].firstIndex == orig(secondaryMappers[].firstIndex)
secondaryMappers[].dimension == orig(secondaryMappers[].dimension)
this.h == Double.NaN
this.currentState != null
this.currentState[] elements >= 0.0
this.interpolatedTime == Double.NaN
this.interpolatedState != null
this.interpolatedState[] elements == 0.0
this.interpolatedDerivatives != null
this.interpolatedDerivatives[] elements == 0.0
this.interpolatedPrimaryState != null
this.interpolatedPrimaryState[] elements == 0.0
this.interpolatedPrimaryDerivatives != null
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.interpolatedSecondaryState != null
this.interpolatedSecondaryState[] == []
this.interpolatedSecondaryDerivatives != null
this.interpolatedSecondaryDerivatives[] == []
this.globalPreviousTime == Double.NaN
this.globalCurrentTime == Double.NaN
this.softPreviousTime == Double.NaN
this.softCurrentTime == Double.NaN
this.finalized == false
this.dirtyState == true
this.primaryMapper != null
this.secondaryMappers != null
this.secondaryMappers[] == []
this.secondaryMappers[].getClass().getName() == []
this.secondaryMappers[].firstIndex == []
this.secondaryMappers[].dimension == []
y[] elements >= 0.0
primaryMapper.firstIndex == 0
secondaryMappers[] == []
secondaryMappers[].firstIndex == []
secondaryMappers[].dimension == []
===========================================================================
org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.AbstractStepInterpolator(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator):::ENTER
interpolator != null
interpolator.h != 0
interpolator.interpolatedPrimaryDerivatives[] elements == 0.0
interpolator.interpolatedPrimaryDerivatives[] one of { [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
interpolator.interpolatedSecondaryState.getClass().getName() == double[][].class
interpolator.interpolatedSecondaryState[] == []
interpolator.interpolatedSecondaryDerivatives.getClass().getName() == double[][].class
interpolator.interpolatedSecondaryDerivatives[] == []
interpolator.finalized == true
interpolator.primaryMapper.firstIndex == 0
interpolator.primaryMapper.dimension one of { 2, 4 }
interpolator.secondaryMappers.getClass().getName() == org.apache.commons.math3.ode.EquationsMapper[].class
interpolator.secondaryMappers[] == []
interpolator.secondaryMappers[].getClass().getName() == []
interpolator.secondaryMappers[].firstIndex == []
interpolator.secondaryMappers[].dimension == []
size(interpolator.currentState[]) one of { 2, 4 }
size(interpolator.interpolatedState[]) one of { 2, 4 }
size(interpolator.interpolatedDerivatives[]) one of { 2, 4 }
size(interpolator.interpolatedPrimaryState[]) one of { 2, 4 }
size(interpolator.interpolatedPrimaryDerivatives[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.AbstractStepInterpolator(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator):::EXIT
interpolator.currentState == orig(interpolator.currentState)
interpolator.currentState[] == orig(interpolator.currentState[])
interpolator.interpolatedState == orig(interpolator.interpolatedState)
interpolator.interpolatedState[] == orig(interpolator.interpolatedState[])
interpolator.interpolatedDerivatives == orig(interpolator.interpolatedDerivatives)
interpolator.interpolatedDerivatives[] == orig(interpolator.interpolatedDerivatives[])
interpolator.interpolatedPrimaryState == orig(interpolator.interpolatedPrimaryState)
interpolator.interpolatedPrimaryState[] == orig(interpolator.interpolatedPrimaryState[])
interpolator.interpolatedPrimaryDerivatives == orig(interpolator.interpolatedPrimaryDerivatives)
interpolator.interpolatedPrimaryDerivatives[] == orig(interpolator.interpolatedPrimaryDerivatives[])
interpolator.interpolatedSecondaryState == orig(interpolator.interpolatedSecondaryState)
interpolator.interpolatedSecondaryState.getClass().getName() == orig(interpolator.interpolatedSecondaryState.getClass().getName())
interpolator.interpolatedSecondaryState[] == orig(interpolator.interpolatedSecondaryState[])
interpolator.interpolatedSecondaryDerivatives == orig(interpolator.interpolatedSecondaryDerivatives)
interpolator.interpolatedSecondaryDerivatives.getClass().getName() == orig(interpolator.interpolatedSecondaryDerivatives.getClass().getName())
interpolator.interpolatedSecondaryDerivatives[] == orig(interpolator.interpolatedSecondaryDerivatives[])
interpolator.finalized == orig(interpolator.finalized)
interpolator.forward == orig(interpolator.forward)
interpolator.dirtyState == orig(interpolator.dirtyState)
interpolator.primaryMapper == orig(interpolator.primaryMapper)
interpolator.primaryMapper.firstIndex == orig(interpolator.primaryMapper.firstIndex)
interpolator.primaryMapper.dimension == orig(interpolator.primaryMapper.dimension)
interpolator.secondaryMappers == orig(interpolator.secondaryMappers)
interpolator.secondaryMappers.getClass().getName() == orig(interpolator.secondaryMappers.getClass().getName())
interpolator.secondaryMappers[] == orig(interpolator.secondaryMappers[])
interpolator.secondaryMappers[].firstIndex == orig(interpolator.secondaryMappers[].firstIndex)
interpolator.secondaryMappers[].dimension == orig(interpolator.secondaryMappers[].dimension)
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.interpolatedPrimaryDerivatives[] one of { [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.interpolatedSecondaryState[] == []
this.interpolatedSecondaryDerivatives[] == []
this.finalized == true
this.primaryMapper.dimension one of { 2, 4 }
this.secondaryMappers[] == []
this.secondaryMappers[].getClass().getName() == []
this.secondaryMappers[].firstIndex == []
this.secondaryMappers[].dimension == []
interpolator.h != 0
interpolator.interpolatedPrimaryDerivatives[] elements == 0.0
interpolator.interpolatedPrimaryDerivatives[] one of { [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
interpolator.interpolatedSecondaryState.getClass().getName() == double[][].class
interpolator.interpolatedSecondaryState[] == []
interpolator.interpolatedSecondaryDerivatives.getClass().getName() == double[][].class
interpolator.interpolatedSecondaryDerivatives[] == []
interpolator.finalized == true
interpolator.primaryMapper.firstIndex == 0
interpolator.primaryMapper.dimension one of { 2, 4 }
interpolator.secondaryMappers.getClass().getName() == org.apache.commons.math3.ode.EquationsMapper[].class
interpolator.secondaryMappers[] == []
interpolator.secondaryMappers[].getClass().getName() == []
interpolator.secondaryMappers[].firstIndex == []
interpolator.secondaryMappers[].dimension == []
size(this.currentState[]) one of { 2, 4 }
size(this.interpolatedState[]) one of { 2, 4 }
size(this.interpolatedDerivatives[]) one of { 2, 4 }
size(this.interpolatedPrimaryState[]) one of { 2, 4 }
size(this.interpolatedPrimaryDerivatives[]) one of { 2, 4 }
size(interpolator.currentState[]) one of { 2, 4 }
size(interpolator.interpolatedState[]) one of { 2, 4 }
size(interpolator.interpolatedDerivatives[]) one of { 2, 4 }
size(interpolator.interpolatedPrimaryState[]) one of { 2, 4 }
size(interpolator.interpolatedPrimaryDerivatives[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.allocateInterpolatedArrays(int):::ENTER
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.interpolatedPrimaryState == null
this.interpolatedPrimaryDerivatives == null
this.interpolatedSecondaryState == null
this.interpolatedSecondaryDerivatives == null
this.finalized == false
dimension != 0
dimension >= -1
===========================================================================
org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.allocateInterpolatedArrays(int):::EXIT
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.secondaryMappers == orig(this.secondaryMappers)
this.secondaryMappers.getClass().getName() == orig(this.secondaryMappers.getClass().getName())
this.secondaryMappers[] == orig(this.secondaryMappers[])
this.secondaryMappers[].firstIndex == orig(this.secondaryMappers[].firstIndex)
this.secondaryMappers[].dimension == orig(this.secondaryMappers[].dimension)
this.interpolatedTime == Double.NaN
this.interpolatedState[] elements == 0.0
this.interpolatedDerivatives[] elements == 0.0
this.interpolatedPrimaryState[] elements == 0.0
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.finalized == false
===========================================================================
org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.copy():::ENTER
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.interpolatedPrimaryDerivatives[] one of { [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.interpolatedSecondaryState[] == []
this.interpolatedSecondaryDerivatives[] == []
this.primaryMapper.dimension one of { 2, 4 }
this.secondaryMappers[] == []
this.secondaryMappers[].getClass().getName() == []
this.secondaryMappers[].firstIndex == []
this.secondaryMappers[].dimension == []
size(this.currentState[]) one of { 2, 4 }
size(this.interpolatedState[]) one of { 2, 4 }
size(this.interpolatedDerivatives[]) one of { 2, 4 }
size(this.interpolatedPrimaryState[]) one of { 2, 4 }
size(this.interpolatedPrimaryDerivatives[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.copy():::EXIT
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.interpolatedPrimaryState == orig(this.interpolatedPrimaryState)
this.interpolatedPrimaryState[] == orig(this.interpolatedPrimaryState[])
this.interpolatedPrimaryDerivatives == orig(this.interpolatedPrimaryDerivatives)
this.interpolatedPrimaryDerivatives[] == orig(this.interpolatedPrimaryDerivatives[])
this.interpolatedSecondaryState == orig(this.interpolatedSecondaryState)
this.interpolatedSecondaryState.getClass().getName() == orig(this.interpolatedSecondaryState.getClass().getName())
this.interpolatedSecondaryState[] == orig(this.interpolatedSecondaryState[])
this.interpolatedSecondaryDerivatives == orig(this.interpolatedSecondaryDerivatives)
this.interpolatedSecondaryDerivatives.getClass().getName() == orig(this.interpolatedSecondaryDerivatives.getClass().getName())
this.interpolatedSecondaryDerivatives[] == orig(this.interpolatedSecondaryDerivatives[])
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.secondaryMappers == orig(this.secondaryMappers)
this.secondaryMappers.getClass().getName() == orig(this.secondaryMappers.getClass().getName())
this.secondaryMappers[] == orig(this.secondaryMappers[])
this.secondaryMappers[].firstIndex == orig(this.secondaryMappers[].firstIndex)
this.secondaryMappers[].dimension == orig(this.secondaryMappers[].dimension)
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.interpolatedPrimaryDerivatives[] one of { [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.interpolatedSecondaryState[] == []
this.interpolatedSecondaryDerivatives[] == []
this.finalized == true
this.primaryMapper.dimension one of { 2, 4 }
this.secondaryMappers[] == []
this.secondaryMappers[].getClass().getName() == []
this.secondaryMappers[].firstIndex == []
this.secondaryMappers[].dimension == []
return != null
size(this.currentState[]) one of { 2, 4 }
size(this.interpolatedState[]) one of { 2, 4 }
size(this.interpolatedDerivatives[]) one of { 2, 4 }
size(this.interpolatedPrimaryState[]) one of { 2, 4 }
size(this.interpolatedPrimaryDerivatives[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.doFinalize():::ENTER
this.interpolatedState[] elements != 0
this.interpolatedDerivatives[] elements != 0
this.interpolatedPrimaryState[] elements != 0
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.interpolatedPrimaryDerivatives[] one of { [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.interpolatedSecondaryState[] == []
this.interpolatedSecondaryDerivatives[] == []
this.finalized == false
this.forward == true
this.primaryMapper.dimension one of { 2, 4 }
this.secondaryMappers[] == []
this.secondaryMappers[].getClass().getName() == []
this.secondaryMappers[].firstIndex == []
this.secondaryMappers[].dimension == []
size(this.currentState[]) one of { 2, 4 }
size(this.interpolatedState[]) one of { 2, 4 }
size(this.interpolatedDerivatives[]) one of { 2, 4 }
size(this.interpolatedPrimaryState[]) one of { 2, 4 }
size(this.interpolatedPrimaryDerivatives[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.doFinalize():::EXIT
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.interpolatedPrimaryState == orig(this.interpolatedPrimaryState)
this.interpolatedPrimaryState[] == orig(this.interpolatedPrimaryState[])
this.interpolatedPrimaryDerivatives == orig(this.interpolatedPrimaryDerivatives)
this.interpolatedPrimaryDerivatives[] == orig(this.interpolatedPrimaryDerivatives[])
this.interpolatedSecondaryState == orig(this.interpolatedSecondaryState)
this.interpolatedSecondaryState.getClass().getName() == orig(this.interpolatedSecondaryState.getClass().getName())
this.interpolatedSecondaryState[] == orig(this.interpolatedSecondaryState[])
this.interpolatedSecondaryDerivatives == orig(this.interpolatedSecondaryDerivatives)
this.interpolatedSecondaryDerivatives.getClass().getName() == orig(this.interpolatedSecondaryDerivatives.getClass().getName())
this.interpolatedSecondaryDerivatives[] == orig(this.interpolatedSecondaryDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.secondaryMappers == orig(this.secondaryMappers)
this.secondaryMappers.getClass().getName() == orig(this.secondaryMappers.getClass().getName())
this.secondaryMappers[] == orig(this.secondaryMappers[])
this.secondaryMappers[].firstIndex == orig(this.secondaryMappers[].firstIndex)
this.secondaryMappers[].dimension == orig(this.secondaryMappers[].dimension)
this.interpolatedState[] elements != 0
this.interpolatedDerivatives[] elements != 0
this.interpolatedPrimaryState[] elements != 0
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.interpolatedPrimaryDerivatives[] one of { [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.interpolatedSecondaryState[] == []
this.interpolatedSecondaryDerivatives[] == []
this.finalized == false
this.forward == true
this.primaryMapper.dimension one of { 2, 4 }
this.secondaryMappers[] == []
this.secondaryMappers[].getClass().getName() == []
this.secondaryMappers[].firstIndex == []
this.secondaryMappers[].dimension == []
size(this.currentState[]) one of { 2, 4 }
size(this.interpolatedState[]) one of { 2, 4 }
size(this.interpolatedDerivatives[]) one of { 2, 4 }
size(this.interpolatedPrimaryState[]) one of { 2, 4 }
size(this.interpolatedPrimaryDerivatives[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.evaluateCompleteInterpolatedState():::ENTER
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.interpolatedPrimaryState != null
this.interpolatedPrimaryDerivatives != null
this.interpolatedSecondaryState != null
this.interpolatedSecondaryDerivatives != null
this.primaryMapper != null
this.secondaryMappers != null
===========================================================================
org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.evaluateCompleteInterpolatedState():::EXIT
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedPrimaryState == orig(this.interpolatedPrimaryState)
this.interpolatedPrimaryState[] == orig(this.interpolatedPrimaryState[])
this.interpolatedPrimaryDerivatives == orig(this.interpolatedPrimaryDerivatives)
this.interpolatedPrimaryDerivatives[] == orig(this.interpolatedPrimaryDerivatives[])
this.interpolatedSecondaryState == orig(this.interpolatedSecondaryState)
this.interpolatedSecondaryState.getClass().getName() == orig(this.interpolatedSecondaryState.getClass().getName())
this.interpolatedSecondaryState[] == orig(this.interpolatedSecondaryState[])
this.interpolatedSecondaryDerivatives == orig(this.interpolatedSecondaryDerivatives)
this.interpolatedSecondaryDerivatives.getClass().getName() == orig(this.interpolatedSecondaryDerivatives.getClass().getName())
this.interpolatedSecondaryDerivatives[] == orig(this.interpolatedSecondaryDerivatives[])
this.globalCurrentTime == orig(this.globalCurrentTime)
this.softCurrentTime == orig(this.softCurrentTime)
this.forward == orig(this.forward)
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.secondaryMappers == orig(this.secondaryMappers)
this.secondaryMappers.getClass().getName() == orig(this.secondaryMappers.getClass().getName())
this.secondaryMappers[] == orig(this.secondaryMappers[])
this.secondaryMappers[].firstIndex == orig(this.secondaryMappers[].firstIndex)
this.secondaryMappers[].dimension == orig(this.secondaryMappers[].dimension)
size(this.interpolatedState[]) == orig(size(this.interpolatedState[]))
size(this.interpolatedDerivatives[]) == orig(size(this.interpolatedDerivatives[]))
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.interpolatedPrimaryState != null
this.interpolatedPrimaryDerivatives != null
this.interpolatedSecondaryState != null
this.interpolatedSecondaryDerivatives != null
this.dirtyState == false
this.primaryMapper != null
this.secondaryMappers != null
===========================================================================
org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.finalizeStep():::ENTER
this.interpolatedSecondaryState[] == []
this.interpolatedSecondaryDerivatives[] == []
this.secondaryMappers[] == []
this.secondaryMappers[].getClass().getName() == []
this.secondaryMappers[].firstIndex == []
this.secondaryMappers[].dimension == []
===========================================================================
org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.finalizeStep():::EXIT
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.interpolatedPrimaryState == orig(this.interpolatedPrimaryState)
this.interpolatedPrimaryState[] == orig(this.interpolatedPrimaryState[])
this.interpolatedPrimaryDerivatives == orig(this.interpolatedPrimaryDerivatives)
this.interpolatedPrimaryDerivatives[] == orig(this.interpolatedPrimaryDerivatives[])
this.interpolatedSecondaryState == orig(this.interpolatedSecondaryState)
this.interpolatedSecondaryState.getClass().getName() == orig(this.interpolatedSecondaryState.getClass().getName())
this.interpolatedSecondaryState[] == orig(this.interpolatedSecondaryState[])
this.interpolatedSecondaryDerivatives == orig(this.interpolatedSecondaryDerivatives)
this.interpolatedSecondaryDerivatives.getClass().getName() == orig(this.interpolatedSecondaryDerivatives.getClass().getName())
this.interpolatedSecondaryDerivatives[] == orig(this.interpolatedSecondaryDerivatives[])
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.secondaryMappers == orig(this.secondaryMappers)
this.secondaryMappers.getClass().getName() == orig(this.secondaryMappers.getClass().getName())
this.secondaryMappers[] == orig(this.secondaryMappers[])
this.secondaryMappers[].firstIndex == orig(this.secondaryMappers[].firstIndex)
this.secondaryMappers[].dimension == orig(this.secondaryMappers[].dimension)
this.interpolatedSecondaryState[] == []
this.interpolatedSecondaryDerivatives[] == []
this.finalized == true
this.secondaryMappers[] == []
this.secondaryMappers[].getClass().getName() == []
this.secondaryMappers[].firstIndex == []
this.secondaryMappers[].dimension == []
===========================================================================
org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.getCurrentTime():::ENTER
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.interpolatedPrimaryState != null
this.interpolatedPrimaryDerivatives != null
this.interpolatedSecondaryState != null
this.interpolatedSecondaryState[] == []
this.interpolatedSecondaryDerivatives != null
this.interpolatedSecondaryDerivatives[] == []
this.primaryMapper != null
this.secondaryMappers != null
this.secondaryMappers[] == []
this.secondaryMappers[].getClass().getName() == []
this.secondaryMappers[].firstIndex == []
this.secondaryMappers[].dimension == []
===========================================================================
org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.getCurrentTime():::EXIT
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.interpolatedPrimaryState == orig(this.interpolatedPrimaryState)
this.interpolatedPrimaryState[] == orig(this.interpolatedPrimaryState[])
this.interpolatedPrimaryDerivatives == orig(this.interpolatedPrimaryDerivatives)
this.interpolatedPrimaryDerivatives[] == orig(this.interpolatedPrimaryDerivatives[])
this.interpolatedSecondaryState == orig(this.interpolatedSecondaryState)
this.interpolatedSecondaryState.getClass().getName() == orig(this.interpolatedSecondaryState.getClass().getName())
this.interpolatedSecondaryState[] == orig(this.interpolatedSecondaryState[])
this.interpolatedSecondaryDerivatives == orig(this.interpolatedSecondaryDerivatives)
this.interpolatedSecondaryDerivatives.getClass().getName() == orig(this.interpolatedSecondaryDerivatives.getClass().getName())
this.interpolatedSecondaryDerivatives[] == orig(this.interpolatedSecondaryDerivatives[])
this.globalPreviousTime == orig(this.globalPreviousTime)
this.globalCurrentTime == orig(this.globalCurrentTime)
this.softPreviousTime == orig(this.softPreviousTime)
this.softCurrentTime == orig(this.softCurrentTime)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.secondaryMappers == orig(this.secondaryMappers)
this.secondaryMappers.getClass().getName() == orig(this.secondaryMappers.getClass().getName())
this.secondaryMappers[] == orig(this.secondaryMappers[])
this.secondaryMappers[].firstIndex == orig(this.secondaryMappers[].firstIndex)
this.secondaryMappers[].dimension == orig(this.secondaryMappers[].dimension)
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.interpolatedPrimaryState != null
this.interpolatedPrimaryDerivatives != null
this.interpolatedSecondaryState != null
this.interpolatedSecondaryState[] == []
this.interpolatedSecondaryDerivatives != null
this.interpolatedSecondaryDerivatives[] == []
this.primaryMapper != null
this.secondaryMappers != null
this.secondaryMappers[] == []
this.secondaryMappers[].getClass().getName() == []
this.secondaryMappers[].firstIndex == []
this.secondaryMappers[].dimension == []
===========================================================================
org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.getGlobalCurrentTime():::ENTER
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.interpolatedPrimaryState != null
this.interpolatedPrimaryDerivatives != null
this.interpolatedSecondaryState != null
this.interpolatedSecondaryDerivatives != null
this.finalized == false
this.dirtyState == true
this.primaryMapper != null
this.secondaryMappers != null
===========================================================================
org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.getGlobalCurrentTime():::EXIT
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.interpolatedPrimaryState == orig(this.interpolatedPrimaryState)
this.interpolatedPrimaryState[] == orig(this.interpolatedPrimaryState[])
this.interpolatedPrimaryDerivatives == orig(this.interpolatedPrimaryDerivatives)
this.interpolatedPrimaryDerivatives[] == orig(this.interpolatedPrimaryDerivatives[])
this.interpolatedSecondaryState == orig(this.interpolatedSecondaryState)
this.interpolatedSecondaryState.getClass().getName() == orig(this.interpolatedSecondaryState.getClass().getName())
this.interpolatedSecondaryState[] == orig(this.interpolatedSecondaryState[])
this.interpolatedSecondaryDerivatives == orig(this.interpolatedSecondaryDerivatives)
this.interpolatedSecondaryDerivatives.getClass().getName() == orig(this.interpolatedSecondaryDerivatives.getClass().getName())
this.interpolatedSecondaryDerivatives[] == orig(this.interpolatedSecondaryDerivatives[])
this.globalPreviousTime == orig(this.globalPreviousTime)
this.globalCurrentTime == orig(this.globalCurrentTime)
this.softPreviousTime == orig(this.softPreviousTime)
this.softCurrentTime == orig(this.softCurrentTime)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.secondaryMappers == orig(this.secondaryMappers)
this.secondaryMappers.getClass().getName() == orig(this.secondaryMappers.getClass().getName())
this.secondaryMappers[] == orig(this.secondaryMappers[])
this.secondaryMappers[].firstIndex == orig(this.secondaryMappers[].firstIndex)
this.secondaryMappers[].dimension == orig(this.secondaryMappers[].dimension)
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.interpolatedPrimaryState != null
this.interpolatedPrimaryDerivatives != null
this.interpolatedSecondaryState != null
this.interpolatedSecondaryDerivatives != null
this.finalized == false
this.dirtyState == true
this.primaryMapper != null
this.secondaryMappers != null
===========================================================================
org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.getGlobalPreviousTime():::ENTER
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.interpolatedPrimaryState != null
this.interpolatedPrimaryDerivatives != null
this.interpolatedSecondaryState != null
this.interpolatedSecondaryDerivatives != null
this.finalized == false
this.dirtyState == true
this.primaryMapper != null
this.secondaryMappers != null
===========================================================================
org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.getGlobalPreviousTime():::EXIT
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.interpolatedPrimaryState == orig(this.interpolatedPrimaryState)
this.interpolatedPrimaryState[] == orig(this.interpolatedPrimaryState[])
this.interpolatedPrimaryDerivatives == orig(this.interpolatedPrimaryDerivatives)
this.interpolatedPrimaryDerivatives[] == orig(this.interpolatedPrimaryDerivatives[])
this.interpolatedSecondaryState == orig(this.interpolatedSecondaryState)
this.interpolatedSecondaryState.getClass().getName() == orig(this.interpolatedSecondaryState.getClass().getName())
this.interpolatedSecondaryState[] == orig(this.interpolatedSecondaryState[])
this.interpolatedSecondaryDerivatives == orig(this.interpolatedSecondaryDerivatives)
this.interpolatedSecondaryDerivatives.getClass().getName() == orig(this.interpolatedSecondaryDerivatives.getClass().getName())
this.interpolatedSecondaryDerivatives[] == orig(this.interpolatedSecondaryDerivatives[])
this.globalPreviousTime == orig(this.globalPreviousTime)
this.globalCurrentTime == orig(this.globalCurrentTime)
this.softPreviousTime == orig(this.softPreviousTime)
this.softCurrentTime == orig(this.softCurrentTime)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.secondaryMappers == orig(this.secondaryMappers)
this.secondaryMappers.getClass().getName() == orig(this.secondaryMappers.getClass().getName())
this.secondaryMappers[] == orig(this.secondaryMappers[])
this.secondaryMappers[].firstIndex == orig(this.secondaryMappers[].firstIndex)
this.secondaryMappers[].dimension == orig(this.secondaryMappers[].dimension)
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.interpolatedPrimaryState != null
this.interpolatedPrimaryDerivatives != null
this.interpolatedSecondaryState != null
this.interpolatedSecondaryDerivatives != null
this.finalized == false
this.dirtyState == true
this.primaryMapper != null
this.secondaryMappers != null
===========================================================================
org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.getInterpolatedDerivatives():::ENTER
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.interpolatedPrimaryState != null
this.interpolatedPrimaryDerivatives != null
this.interpolatedSecondaryState != null
this.interpolatedSecondaryState[] == []
this.interpolatedSecondaryDerivatives != null
this.interpolatedSecondaryDerivatives[] == []
this.primaryMapper != null
this.primaryMapper.dimension one of { 1, 2, 4 }
this.secondaryMappers != null
this.secondaryMappers[] == []
this.secondaryMappers[].getClass().getName() == []
this.secondaryMappers[].firstIndex == []
this.secondaryMappers[].dimension == []
size(this.currentState[]) one of { 1, 2, 4 }
size(this.interpolatedState[]) one of { 1, 2, 4 }
size(this.interpolatedDerivatives[]) one of { 1, 2, 4 }
size(this.interpolatedPrimaryState[]) one of { 1, 2, 4 }
size(this.interpolatedPrimaryDerivatives[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.getInterpolatedDerivatives():::EXIT
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedPrimaryState == orig(this.interpolatedPrimaryState)
this.interpolatedPrimaryState[] == orig(this.interpolatedPrimaryState[])
this.interpolatedPrimaryDerivatives == orig(this.interpolatedPrimaryDerivatives)
this.interpolatedSecondaryState == orig(this.interpolatedSecondaryState)
this.interpolatedSecondaryState.getClass().getName() == orig(this.interpolatedSecondaryState.getClass().getName())
this.interpolatedSecondaryState[] == orig(this.interpolatedSecondaryState[])
this.interpolatedSecondaryDerivatives == orig(this.interpolatedSecondaryDerivatives)
this.interpolatedSecondaryDerivatives.getClass().getName() == orig(this.interpolatedSecondaryDerivatives.getClass().getName())
this.interpolatedSecondaryDerivatives[] == orig(this.interpolatedSecondaryDerivatives[])
this.globalPreviousTime == orig(this.globalPreviousTime)
this.globalCurrentTime == orig(this.globalCurrentTime)
this.softPreviousTime == orig(this.softPreviousTime)
this.softCurrentTime == orig(this.softCurrentTime)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.secondaryMappers == orig(this.secondaryMappers)
this.secondaryMappers.getClass().getName() == orig(this.secondaryMappers.getClass().getName())
this.secondaryMappers[] == orig(this.secondaryMappers[])
this.secondaryMappers[].firstIndex == orig(this.secondaryMappers[].firstIndex)
this.secondaryMappers[].dimension == orig(this.secondaryMappers[].dimension)
size(this.interpolatedState[]) == orig(size(this.interpolatedState[]))
size(this.interpolatedDerivatives[]) == orig(size(this.interpolatedDerivatives[]))
size(this.interpolatedPrimaryDerivatives[]) == orig(size(this.interpolatedPrimaryDerivatives[]))
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.interpolatedPrimaryState != null
this.interpolatedPrimaryDerivatives != null
this.interpolatedSecondaryState != null
this.interpolatedSecondaryState[] == []
this.interpolatedSecondaryDerivatives != null
this.interpolatedSecondaryDerivatives[] == []
this.dirtyState == false
this.primaryMapper != null
this.primaryMapper.dimension one of { 1, 2, 4 }
this.secondaryMappers != null
this.secondaryMappers[] == []
this.secondaryMappers[].getClass().getName() == []
this.secondaryMappers[].firstIndex == []
this.secondaryMappers[].dimension == []
return != null
size(this.currentState[]) one of { 1, 2, 4 }
size(this.interpolatedState[]) one of { 1, 2, 4 }
size(this.interpolatedDerivatives[]) one of { 1, 2, 4 }
size(this.interpolatedPrimaryState[]) one of { 1, 2, 4 }
size(this.interpolatedPrimaryDerivatives[]) one of { 1, 2, 4 }
size(return[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.getInterpolatedState():::ENTER
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.interpolatedPrimaryState != null
this.interpolatedPrimaryDerivatives != null
this.interpolatedSecondaryState != null
this.interpolatedSecondaryDerivatives != null
this.primaryMapper != null
this.secondaryMappers != null
===========================================================================
org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.getInterpolatedState():::EXIT
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedPrimaryState == orig(this.interpolatedPrimaryState)
this.interpolatedPrimaryDerivatives == orig(this.interpolatedPrimaryDerivatives)
this.interpolatedPrimaryDerivatives[] == orig(this.interpolatedPrimaryDerivatives[])
this.interpolatedSecondaryState == orig(this.interpolatedSecondaryState)
this.interpolatedSecondaryState.getClass().getName() == orig(this.interpolatedSecondaryState.getClass().getName())
this.interpolatedSecondaryState[] == orig(this.interpolatedSecondaryState[])
this.interpolatedSecondaryDerivatives == orig(this.interpolatedSecondaryDerivatives)
this.interpolatedSecondaryDerivatives.getClass().getName() == orig(this.interpolatedSecondaryDerivatives.getClass().getName())
this.interpolatedSecondaryDerivatives[] == orig(this.interpolatedSecondaryDerivatives[])
this.globalCurrentTime == orig(this.globalCurrentTime)
this.softCurrentTime == orig(this.softCurrentTime)
this.forward == orig(this.forward)
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.secondaryMappers == orig(this.secondaryMappers)
this.secondaryMappers.getClass().getName() == orig(this.secondaryMappers.getClass().getName())
this.secondaryMappers[] == orig(this.secondaryMappers[])
this.secondaryMappers[].firstIndex == orig(this.secondaryMappers[].firstIndex)
this.secondaryMappers[].dimension == orig(this.secondaryMappers[].dimension)
size(this.interpolatedState[]) == orig(size(this.interpolatedState[]))
size(this.interpolatedDerivatives[]) == orig(size(this.interpolatedDerivatives[]))
size(this.interpolatedPrimaryState[]) == orig(size(this.interpolatedPrimaryState[]))
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.interpolatedPrimaryState != null
this.interpolatedPrimaryDerivatives != null
this.interpolatedSecondaryState != null
this.interpolatedSecondaryDerivatives != null
this.dirtyState == false
this.primaryMapper != null
this.secondaryMappers != null
return != null
size(return[]) >= 1
===========================================================================
org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.getInterpolatedTime():::ENTER
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.interpolatedPrimaryState != null
this.interpolatedPrimaryDerivatives != null
this.interpolatedSecondaryState != null
this.interpolatedSecondaryState[] == []
this.interpolatedSecondaryDerivatives != null
this.interpolatedSecondaryDerivatives[] == []
this.primaryMapper != null
this.primaryMapper.dimension one of { 1, 2, 4 }
this.secondaryMappers != null
this.secondaryMappers[] == []
this.secondaryMappers[].getClass().getName() == []
this.secondaryMappers[].firstIndex == []
this.secondaryMappers[].dimension == []
size(this.currentState[]) one of { 1, 2, 4 }
size(this.interpolatedState[]) one of { 1, 2, 4 }
size(this.interpolatedDerivatives[]) one of { 1, 2, 4 }
size(this.interpolatedPrimaryState[]) one of { 1, 2, 4 }
size(this.interpolatedPrimaryDerivatives[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.getInterpolatedTime():::EXIT
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.interpolatedPrimaryState == orig(this.interpolatedPrimaryState)
this.interpolatedPrimaryState[] == orig(this.interpolatedPrimaryState[])
this.interpolatedPrimaryDerivatives == orig(this.interpolatedPrimaryDerivatives)
this.interpolatedPrimaryDerivatives[] == orig(this.interpolatedPrimaryDerivatives[])
this.interpolatedSecondaryState == orig(this.interpolatedSecondaryState)
this.interpolatedSecondaryState.getClass().getName() == orig(this.interpolatedSecondaryState.getClass().getName())
this.interpolatedSecondaryState[] == orig(this.interpolatedSecondaryState[])
this.interpolatedSecondaryDerivatives == orig(this.interpolatedSecondaryDerivatives)
this.interpolatedSecondaryDerivatives.getClass().getName() == orig(this.interpolatedSecondaryDerivatives.getClass().getName())
this.interpolatedSecondaryDerivatives[] == orig(this.interpolatedSecondaryDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.secondaryMappers == orig(this.secondaryMappers)
this.secondaryMappers.getClass().getName() == orig(this.secondaryMappers.getClass().getName())
this.secondaryMappers[] == orig(this.secondaryMappers[])
this.secondaryMappers[].firstIndex == orig(this.secondaryMappers[].firstIndex)
this.secondaryMappers[].dimension == orig(this.secondaryMappers[].dimension)
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.interpolatedPrimaryState != null
this.interpolatedPrimaryDerivatives != null
this.interpolatedSecondaryState != null
this.interpolatedSecondaryState[] == []
this.interpolatedSecondaryDerivatives != null
this.interpolatedSecondaryDerivatives[] == []
this.primaryMapper != null
this.primaryMapper.dimension one of { 1, 2, 4 }
this.secondaryMappers != null
this.secondaryMappers[] == []
this.secondaryMappers[].getClass().getName() == []
this.secondaryMappers[].firstIndex == []
this.secondaryMappers[].dimension == []
size(this.currentState[]) one of { 1, 2, 4 }
size(this.interpolatedState[]) one of { 1, 2, 4 }
size(this.interpolatedDerivatives[]) one of { 1, 2, 4 }
size(this.interpolatedPrimaryState[]) one of { 1, 2, 4 }
size(this.interpolatedPrimaryDerivatives[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.getPreviousTime():::ENTER
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.interpolatedPrimaryState != null
this.interpolatedPrimaryDerivatives != null
this.interpolatedSecondaryState != null
this.interpolatedSecondaryState[] == []
this.interpolatedSecondaryDerivatives != null
this.interpolatedSecondaryDerivatives[] == []
this.primaryMapper != null
this.secondaryMappers != null
this.secondaryMappers[] == []
this.secondaryMappers[].getClass().getName() == []
this.secondaryMappers[].firstIndex == []
this.secondaryMappers[].dimension == []
===========================================================================
org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.getPreviousTime():::EXIT
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.interpolatedPrimaryState == orig(this.interpolatedPrimaryState)
this.interpolatedPrimaryState[] == orig(this.interpolatedPrimaryState[])
this.interpolatedPrimaryDerivatives == orig(this.interpolatedPrimaryDerivatives)
this.interpolatedPrimaryDerivatives[] == orig(this.interpolatedPrimaryDerivatives[])
this.interpolatedSecondaryState == orig(this.interpolatedSecondaryState)
this.interpolatedSecondaryState.getClass().getName() == orig(this.interpolatedSecondaryState.getClass().getName())
this.interpolatedSecondaryState[] == orig(this.interpolatedSecondaryState[])
this.interpolatedSecondaryDerivatives == orig(this.interpolatedSecondaryDerivatives)
this.interpolatedSecondaryDerivatives.getClass().getName() == orig(this.interpolatedSecondaryDerivatives.getClass().getName())
this.interpolatedSecondaryDerivatives[] == orig(this.interpolatedSecondaryDerivatives[])
this.globalPreviousTime == orig(this.globalPreviousTime)
this.globalCurrentTime == orig(this.globalCurrentTime)
this.softPreviousTime == orig(this.softPreviousTime)
this.softCurrentTime == orig(this.softCurrentTime)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.secondaryMappers == orig(this.secondaryMappers)
this.secondaryMappers.getClass().getName() == orig(this.secondaryMappers.getClass().getName())
this.secondaryMappers[] == orig(this.secondaryMappers[])
this.secondaryMappers[].firstIndex == orig(this.secondaryMappers[].firstIndex)
this.secondaryMappers[].dimension == orig(this.secondaryMappers[].dimension)
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.interpolatedPrimaryState != null
this.interpolatedPrimaryDerivatives != null
this.interpolatedSecondaryState != null
this.interpolatedSecondaryState[] == []
this.interpolatedSecondaryDerivatives != null
this.interpolatedSecondaryDerivatives[] == []
this.primaryMapper != null
this.secondaryMappers != null
this.secondaryMappers[] == []
this.secondaryMappers[].getClass().getName() == []
this.secondaryMappers[].firstIndex == []
this.secondaryMappers[].dimension == []
===========================================================================
org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.isForward():::ENTER
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.interpolatedPrimaryState != null
this.interpolatedPrimaryDerivatives != null
this.interpolatedSecondaryState != null
this.interpolatedSecondaryDerivatives != null
this.primaryMapper != null
this.secondaryMappers != null
===========================================================================
org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.isForward():::EXIT
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.interpolatedPrimaryState == orig(this.interpolatedPrimaryState)
this.interpolatedPrimaryState[] == orig(this.interpolatedPrimaryState[])
this.interpolatedPrimaryDerivatives == orig(this.interpolatedPrimaryDerivatives)
this.interpolatedPrimaryDerivatives[] == orig(this.interpolatedPrimaryDerivatives[])
this.interpolatedSecondaryState == orig(this.interpolatedSecondaryState)
this.interpolatedSecondaryState.getClass().getName() == orig(this.interpolatedSecondaryState.getClass().getName())
this.interpolatedSecondaryState[] == orig(this.interpolatedSecondaryState[])
this.interpolatedSecondaryDerivatives == orig(this.interpolatedSecondaryDerivatives)
this.interpolatedSecondaryDerivatives.getClass().getName() == orig(this.interpolatedSecondaryDerivatives.getClass().getName())
this.interpolatedSecondaryDerivatives[] == orig(this.interpolatedSecondaryDerivatives[])
this.globalPreviousTime == orig(this.globalPreviousTime)
this.globalCurrentTime == orig(this.globalCurrentTime)
this.softPreviousTime == orig(this.softPreviousTime)
this.softCurrentTime == orig(this.softCurrentTime)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.secondaryMappers == orig(this.secondaryMappers)
this.secondaryMappers.getClass().getName() == orig(this.secondaryMappers.getClass().getName())
this.secondaryMappers[] == orig(this.secondaryMappers[])
this.secondaryMappers[].firstIndex == orig(this.secondaryMappers[].firstIndex)
this.secondaryMappers[].dimension == orig(this.secondaryMappers[].dimension)
(this.forward == false)  <==>  (return == false)
(this.forward == false)  ==>  (size(this.currentState[]) one of { 1, 2 })
(this.forward == false)  ==>  (size(this.interpolatedDerivatives[]) one of { 1, 2 })
(this.forward == false)  ==>  (size(this.interpolatedPrimaryDerivatives[]) one of { 1, 2 })
(this.forward == false)  ==>  (size(this.interpolatedPrimaryState[]) one of { 1, 2 })
(this.forward == false)  ==>  (size(this.interpolatedState[]) one of { 1, 2 })
(this.forward == false)  ==>  (this.interpolatedPrimaryDerivatives[] sorted by <=)
(this.forward == false)  ==>  (this.interpolatedSecondaryDerivatives[] == [])
(this.forward == false)  ==>  (this.interpolatedSecondaryState[] == [])
(this.forward == false)  ==>  (this.primaryMapper.dimension one of { 1, 2 })
(this.forward == false)  ==>  (this.secondaryMappers[] == [])
(this.forward == false)  ==>  (this.secondaryMappers[].dimension == [])
(this.forward == false)  ==>  (this.secondaryMappers[].firstIndex == [])
(this.forward == false)  ==>  (this.secondaryMappers[].getClass().getName() == [])
(this.forward == true)  <==>  (return == true)
(this.forward == true)  ==>  (size(this.interpolatedSecondaryDerivatives[]) one of { 0, 1 })
(this.forward == true)  ==>  (size(this.interpolatedSecondaryState[]) one of { 0, 1 })
(this.forward == true)  ==>  (size(this.secondaryMappers[]) one of { 0, 1 })
(this.forward == true)  ==>  (this.globalCurrentTime >= 1.0E-6)
(this.forward == true)  ==>  (this.globalPreviousTime >= 0.0)
(this.forward == true)  ==>  (this.interpolatedTime >= 0.0)
(this.forward == true)  ==>  (this.secondaryMappers[].dimension elements one of { 6, 10 })
(this.forward == true)  ==>  (this.secondaryMappers[].dimension one of { [], [6], [10] })
(this.forward == true)  ==>  (this.secondaryMappers[].firstIndex elements == 2)
(this.forward == true)  ==>  (this.secondaryMappers[].firstIndex one of { [], [2] })
(this.forward == true)  ==>  (this.secondaryMappers[].getClass().getName() elements == org.apache.commons.math3.ode.EquationsMapper.class)
(this.forward == true)  ==>  (this.secondaryMappers[].getClass().getName() one of { [], [org.apache.commons.math3.ode.EquationsMapper] })
(this.forward == true)  ==>  (this.softCurrentTime >= 1.0E-6)
(this.forward == true)  ==>  (this.softPreviousTime >= 0.0)
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.interpolatedPrimaryState != null
this.interpolatedPrimaryDerivatives != null
this.interpolatedSecondaryState != null
this.interpolatedSecondaryDerivatives != null
this.primaryMapper != null
this.secondaryMappers != null
===========================================================================
org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.isForward():::EXIT;condition="return == true"
this.interpolatedTime >= 0.0
this.globalPreviousTime >= 0.0
this.globalCurrentTime >= 1.0E-6
this.softPreviousTime >= 0.0
this.softCurrentTime >= 1.0E-6
this.forward == true
return == true
===========================================================================
org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.isForward():::EXIT;condition="not(return == true)"
this.interpolatedPrimaryDerivatives[] sorted by <=
this.interpolatedSecondaryState[] == []
this.interpolatedSecondaryDerivatives[] == []
this.forward == false
this.primaryMapper.dimension one of { 1, 2 }
this.secondaryMappers[] == []
this.secondaryMappers[].getClass().getName() == []
this.secondaryMappers[].firstIndex == []
this.secondaryMappers[].dimension == []
return == false
size(this.currentState[]) one of { 1, 2 }
size(this.interpolatedState[]) one of { 1, 2 }
size(this.interpolatedDerivatives[]) one of { 1, 2 }
size(this.interpolatedPrimaryState[]) one of { 1, 2 }
size(this.interpolatedPrimaryDerivatives[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.readBaseExternal(java.io.ObjectInput):::ENTER
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.interpolatedPrimaryState == null
this.interpolatedPrimaryDerivatives == null
this.interpolatedSecondaryState == null
this.interpolatedSecondaryDerivatives == null
this.globalPreviousTime == Double.NaN
this.globalCurrentTime == Double.NaN
this.softPreviousTime == Double.NaN
this.softCurrentTime == Double.NaN
this.finalized == false
this.forward == true
this.dirtyState == true
this.primaryMapper == null
this.secondaryMappers == null
in != null
in.getClass().getName() == java.io.ObjectInputStream.class
===========================================================================
org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.readBaseExternal(java.io.ObjectInput):::EXIT
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.currentState != null
this.interpolatedTime == Double.NaN
this.interpolatedState != null
this.interpolatedState[] elements == 0.0
this.interpolatedState[] one of { [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.interpolatedDerivatives != null
this.interpolatedDerivatives[] elements == 0.0
this.interpolatedDerivatives[] one of { [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.interpolatedPrimaryState != null
this.interpolatedPrimaryState[] elements == 0.0
this.interpolatedPrimaryState[] one of { [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.interpolatedPrimaryDerivatives != null
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.interpolatedPrimaryDerivatives[] one of { [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.interpolatedSecondaryState != null
this.interpolatedSecondaryState[] == []
this.interpolatedSecondaryDerivatives != null
this.interpolatedSecondaryDerivatives[] == []
this.finalized == true
this.forward == true
this.dirtyState == true
this.primaryMapper != null
this.primaryMapper.dimension one of { 2, 4 }
this.secondaryMappers != null
this.secondaryMappers[] == []
this.secondaryMappers[].getClass().getName() == []
this.secondaryMappers[].firstIndex == []
this.secondaryMappers[].dimension == []
size(this.currentState[]) one of { 2, 4 }
size(this.interpolatedState[]) one of { 2, 4 }
size(this.interpolatedDerivatives[]) one of { 2, 4 }
size(this.interpolatedPrimaryState[]) one of { 2, 4 }
size(this.interpolatedPrimaryDerivatives[]) one of { 2, 4 }
this.h != orig(this.h)
this.globalPreviousTime != orig(this.globalPreviousTime)
this.globalCurrentTime != orig(this.globalCurrentTime)
this.softPreviousTime != orig(this.softPreviousTime)
this.softCurrentTime != orig(this.softCurrentTime)
===========================================================================
org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.reinitialize(double[], boolean, org.apache.commons.math3.ode.EquationsMapper, org.apache.commons.math3.ode.EquationsMapper[]):::ENTER
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.interpolatedPrimaryState == null
this.interpolatedPrimaryDerivatives == null
this.interpolatedSecondaryState == null
this.interpolatedSecondaryDerivatives == null
this.globalPreviousTime == Double.NaN
this.globalCurrentTime == Double.NaN
this.softPreviousTime == Double.NaN
this.softCurrentTime == Double.NaN
this.forward == true
this.dirtyState == true
this.primaryMapper == null
this.secondaryMappers == null
y != null
primary != null
primary.firstIndex == 0
secondary != null
secondary.getClass().getName() == org.apache.commons.math3.ode.EquationsMapper[].class
secondary[] elements != null
secondary[].firstIndex elements == 2
secondary[].firstIndex one of { [], [2] }
secondary[].dimension elements one of { 6, 10 }
secondary[].dimension one of { [], [6], [10] }
size(secondary[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.reinitialize(double[], boolean, org.apache.commons.math3.ode.EquationsMapper, org.apache.commons.math3.ode.EquationsMapper[]):::EXIT
this.dirtyState == orig(this.dirtyState)
y[] == orig(y[])
primary.firstIndex == orig(primary.firstIndex)
primary.dimension == orig(primary.dimension)
secondary[] == orig(secondary[])
secondary[].firstIndex == orig(secondary[].firstIndex)
secondary[].dimension == orig(secondary[].dimension)
this.h == Double.NaN
this.currentState != null
this.interpolatedTime == Double.NaN
this.interpolatedState != null
this.interpolatedState[] elements == 0.0
this.interpolatedDerivatives != null
this.interpolatedDerivatives[] elements == 0.0
this.interpolatedPrimaryState != null
this.interpolatedPrimaryState[] elements == 0.0
this.interpolatedPrimaryDerivatives != null
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.interpolatedSecondaryState != null
this.interpolatedSecondaryDerivatives != null
this.globalPreviousTime == Double.NaN
this.globalCurrentTime == Double.NaN
this.softPreviousTime == Double.NaN
this.softCurrentTime == Double.NaN
this.finalized == false
this.dirtyState == true
this.primaryMapper != null
this.secondaryMappers != null
primary.firstIndex == 0
secondary[] elements != null
secondary[].firstIndex elements == 2
secondary[].firstIndex one of { [], [2] }
secondary[].dimension elements one of { 6, 10 }
secondary[].dimension one of { [], [6], [10] }
===========================================================================
org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.setInterpolatedTime(double):::ENTER
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.interpolatedPrimaryState != null
this.interpolatedPrimaryDerivatives != null
this.interpolatedSecondaryState != null
this.interpolatedSecondaryDerivatives != null
this.primaryMapper != null
this.secondaryMappers != null
===========================================================================
org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.setInterpolatedTime(double):::EXIT
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.interpolatedPrimaryState == orig(this.interpolatedPrimaryState)
this.interpolatedPrimaryState[] == orig(this.interpolatedPrimaryState[])
this.interpolatedPrimaryDerivatives == orig(this.interpolatedPrimaryDerivatives)
this.interpolatedPrimaryDerivatives[] == orig(this.interpolatedPrimaryDerivatives[])
this.interpolatedSecondaryState == orig(this.interpolatedSecondaryState)
this.interpolatedSecondaryState.getClass().getName() == orig(this.interpolatedSecondaryState.getClass().getName())
this.interpolatedSecondaryState[] == orig(this.interpolatedSecondaryState[])
this.interpolatedSecondaryDerivatives == orig(this.interpolatedSecondaryDerivatives)
this.interpolatedSecondaryDerivatives.getClass().getName() == orig(this.interpolatedSecondaryDerivatives.getClass().getName())
this.interpolatedSecondaryDerivatives[] == orig(this.interpolatedSecondaryDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.secondaryMappers == orig(this.secondaryMappers)
this.secondaryMappers.getClass().getName() == orig(this.secondaryMappers.getClass().getName())
this.secondaryMappers[] == orig(this.secondaryMappers[])
this.secondaryMappers[].firstIndex == orig(this.secondaryMappers[].firstIndex)
this.secondaryMappers[].dimension == orig(this.secondaryMappers[].dimension)
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.interpolatedPrimaryState != null
this.interpolatedPrimaryDerivatives != null
this.interpolatedSecondaryState != null
this.interpolatedSecondaryDerivatives != null
this.dirtyState == true
this.primaryMapper != null
this.secondaryMappers != null
===========================================================================
org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.setSoftCurrentTime(double):::ENTER
this.h >= 0.029296875
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.interpolatedPrimaryState != null
this.interpolatedPrimaryDerivatives != null
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.interpolatedPrimaryDerivatives[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0] }
this.interpolatedSecondaryState != null
this.interpolatedSecondaryState[] == []
this.interpolatedSecondaryDerivatives != null
this.interpolatedSecondaryDerivatives[] == []
this.forward == true
this.dirtyState == false
this.primaryMapper != null
this.primaryMapper.dimension one of { 1, 2, 3 }
this.secondaryMappers != null
this.secondaryMappers[] == []
this.secondaryMappers[].getClass().getName() == []
this.secondaryMappers[].firstIndex == []
this.secondaryMappers[].dimension == []
size(this.currentState[]) one of { 1, 2, 3 }
size(this.interpolatedState[]) one of { 1, 2, 3 }
size(this.interpolatedDerivatives[]) one of { 1, 2, 3 }
size(this.interpolatedPrimaryState[]) one of { 1, 2, 3 }
size(this.interpolatedPrimaryDerivatives[]) one of { 1, 2, 3 }
===========================================================================
org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.setSoftCurrentTime(double):::EXIT
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.interpolatedPrimaryState == orig(this.interpolatedPrimaryState)
this.interpolatedPrimaryState[] == orig(this.interpolatedPrimaryState[])
this.interpolatedPrimaryDerivatives == orig(this.interpolatedPrimaryDerivatives)
this.interpolatedPrimaryDerivatives[] == orig(this.interpolatedPrimaryDerivatives[])
this.interpolatedSecondaryState == orig(this.interpolatedSecondaryState)
this.interpolatedSecondaryState.getClass().getName() == orig(this.interpolatedSecondaryState.getClass().getName())
this.interpolatedSecondaryState[] == orig(this.interpolatedSecondaryState[])
this.interpolatedSecondaryDerivatives == orig(this.interpolatedSecondaryDerivatives)
this.interpolatedSecondaryDerivatives.getClass().getName() == orig(this.interpolatedSecondaryDerivatives.getClass().getName())
this.interpolatedSecondaryDerivatives[] == orig(this.interpolatedSecondaryDerivatives[])
this.globalPreviousTime == orig(this.globalPreviousTime)
this.globalCurrentTime == orig(this.globalCurrentTime)
this.softPreviousTime == orig(this.softPreviousTime)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.secondaryMappers == orig(this.secondaryMappers)
this.secondaryMappers.getClass().getName() == orig(this.secondaryMappers.getClass().getName())
this.secondaryMappers[] == orig(this.secondaryMappers[])
this.secondaryMappers[].firstIndex == orig(this.secondaryMappers[].firstIndex)
this.secondaryMappers[].dimension == orig(this.secondaryMappers[].dimension)
this.h >= 0.029296875
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.interpolatedPrimaryState != null
this.interpolatedPrimaryDerivatives != null
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.interpolatedPrimaryDerivatives[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0] }
this.interpolatedSecondaryState != null
this.interpolatedSecondaryState[] == []
this.interpolatedSecondaryDerivatives != null
this.interpolatedSecondaryDerivatives[] == []
this.forward == true
this.dirtyState == false
this.primaryMapper != null
this.primaryMapper.dimension one of { 1, 2, 3 }
this.secondaryMappers != null
this.secondaryMappers[] == []
this.secondaryMappers[].getClass().getName() == []
this.secondaryMappers[].firstIndex == []
this.secondaryMappers[].dimension == []
size(this.currentState[]) one of { 1, 2, 3 }
size(this.interpolatedState[]) one of { 1, 2, 3 }
size(this.interpolatedDerivatives[]) one of { 1, 2, 3 }
size(this.interpolatedPrimaryState[]) one of { 1, 2, 3 }
size(this.interpolatedPrimaryDerivatives[]) one of { 1, 2, 3 }
this.softCurrentTime <= orig(this.softCurrentTime)
===========================================================================
org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.setSoftPreviousTime(double):::ENTER
this.h >= 0.029296875
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.interpolatedPrimaryState != null
this.interpolatedPrimaryDerivatives != null
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.interpolatedPrimaryDerivatives[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0] }
this.interpolatedSecondaryState != null
this.interpolatedSecondaryState[] == []
this.interpolatedSecondaryDerivatives != null
this.interpolatedSecondaryDerivatives[] == []
this.forward == true
this.dirtyState == false
this.primaryMapper != null
this.primaryMapper.dimension one of { 1, 2, 3 }
this.secondaryMappers != null
this.secondaryMappers[] == []
this.secondaryMappers[].getClass().getName() == []
this.secondaryMappers[].firstIndex == []
this.secondaryMappers[].dimension == []
size(this.currentState[]) one of { 1, 2, 3 }
size(this.interpolatedState[]) one of { 1, 2, 3 }
size(this.interpolatedDerivatives[]) one of { 1, 2, 3 }
size(this.interpolatedPrimaryState[]) one of { 1, 2, 3 }
size(this.interpolatedPrimaryDerivatives[]) one of { 1, 2, 3 }
===========================================================================
org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.setSoftPreviousTime(double):::EXIT
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.interpolatedPrimaryState == orig(this.interpolatedPrimaryState)
this.interpolatedPrimaryState[] == orig(this.interpolatedPrimaryState[])
this.interpolatedPrimaryDerivatives == orig(this.interpolatedPrimaryDerivatives)
this.interpolatedPrimaryDerivatives[] == orig(this.interpolatedPrimaryDerivatives[])
this.interpolatedSecondaryState == orig(this.interpolatedSecondaryState)
this.interpolatedSecondaryState.getClass().getName() == orig(this.interpolatedSecondaryState.getClass().getName())
this.interpolatedSecondaryState[] == orig(this.interpolatedSecondaryState[])
this.interpolatedSecondaryDerivatives == orig(this.interpolatedSecondaryDerivatives)
this.interpolatedSecondaryDerivatives.getClass().getName() == orig(this.interpolatedSecondaryDerivatives.getClass().getName())
this.interpolatedSecondaryDerivatives[] == orig(this.interpolatedSecondaryDerivatives[])
this.globalPreviousTime == orig(this.globalPreviousTime)
this.globalCurrentTime == orig(this.globalCurrentTime)
this.softPreviousTime == orig(this.softPreviousTime)
this.softCurrentTime == orig(this.softCurrentTime)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.secondaryMappers == orig(this.secondaryMappers)
this.secondaryMappers.getClass().getName() == orig(this.secondaryMappers.getClass().getName())
this.secondaryMappers[] == orig(this.secondaryMappers[])
this.secondaryMappers[].firstIndex == orig(this.secondaryMappers[].firstIndex)
this.secondaryMappers[].dimension == orig(this.secondaryMappers[].dimension)
this.h >= 0.029296875
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.interpolatedPrimaryState != null
this.interpolatedPrimaryDerivatives != null
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.interpolatedPrimaryDerivatives[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0] }
this.interpolatedSecondaryState != null
this.interpolatedSecondaryState[] == []
this.interpolatedSecondaryDerivatives != null
this.interpolatedSecondaryDerivatives[] == []
this.forward == true
this.dirtyState == false
this.primaryMapper != null
this.primaryMapper.dimension one of { 1, 2, 3 }
this.secondaryMappers != null
this.secondaryMappers[] == []
this.secondaryMappers[].getClass().getName() == []
this.secondaryMappers[].firstIndex == []
this.secondaryMappers[].dimension == []
size(this.currentState[]) one of { 1, 2, 3 }
size(this.interpolatedState[]) one of { 1, 2, 3 }
size(this.interpolatedDerivatives[]) one of { 1, 2, 3 }
size(this.interpolatedPrimaryState[]) one of { 1, 2, 3 }
size(this.interpolatedPrimaryDerivatives[]) one of { 1, 2, 3 }
===========================================================================
org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.shift():::ENTER
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.interpolatedPrimaryState != null
this.interpolatedPrimaryDerivatives != null
this.interpolatedSecondaryState != null
this.interpolatedSecondaryDerivatives != null
this.finalized == false
this.dirtyState == true
this.primaryMapper != null
this.secondaryMappers != null
===========================================================================
org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.shift():::EXIT
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.interpolatedPrimaryState == orig(this.interpolatedPrimaryState)
this.interpolatedPrimaryState[] == orig(this.interpolatedPrimaryState[])
this.interpolatedPrimaryDerivatives == orig(this.interpolatedPrimaryDerivatives)
this.interpolatedPrimaryDerivatives[] == orig(this.interpolatedPrimaryDerivatives[])
this.interpolatedSecondaryState == orig(this.interpolatedSecondaryState)
this.interpolatedSecondaryState.getClass().getName() == orig(this.interpolatedSecondaryState.getClass().getName())
this.interpolatedSecondaryState[] == orig(this.interpolatedSecondaryState[])
this.interpolatedSecondaryDerivatives == orig(this.interpolatedSecondaryDerivatives)
this.interpolatedSecondaryDerivatives.getClass().getName() == orig(this.interpolatedSecondaryDerivatives.getClass().getName())
this.interpolatedSecondaryDerivatives[] == orig(this.interpolatedSecondaryDerivatives[])
this.globalCurrentTime == orig(this.globalCurrentTime)
this.softCurrentTime == orig(this.softCurrentTime)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.secondaryMappers == orig(this.secondaryMappers)
this.secondaryMappers.getClass().getName() == orig(this.secondaryMappers.getClass().getName())
this.secondaryMappers[] == orig(this.secondaryMappers[])
this.secondaryMappers[].firstIndex == orig(this.secondaryMappers[].firstIndex)
this.secondaryMappers[].dimension == orig(this.secondaryMappers[].dimension)
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.interpolatedPrimaryState != null
this.interpolatedPrimaryDerivatives != null
this.interpolatedSecondaryState != null
this.interpolatedSecondaryDerivatives != null
this.finalized == false
this.dirtyState == true
this.primaryMapper != null
this.secondaryMappers != null
===========================================================================
org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.storeTime(double):::ENTER
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.interpolatedPrimaryState != null
this.interpolatedPrimaryDerivatives != null
this.interpolatedSecondaryState != null
this.interpolatedSecondaryDerivatives != null
this.primaryMapper != null
this.secondaryMappers != null
===========================================================================
org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.storeTime(double):::EXIT
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.interpolatedPrimaryState == orig(this.interpolatedPrimaryState)
this.interpolatedPrimaryState[] == orig(this.interpolatedPrimaryState[])
this.interpolatedPrimaryDerivatives == orig(this.interpolatedPrimaryDerivatives)
this.interpolatedPrimaryDerivatives[] == orig(this.interpolatedPrimaryDerivatives[])
this.interpolatedSecondaryState == orig(this.interpolatedSecondaryState)
this.interpolatedSecondaryState.getClass().getName() == orig(this.interpolatedSecondaryState.getClass().getName())
this.interpolatedSecondaryState[] == orig(this.interpolatedSecondaryState[])
this.interpolatedSecondaryDerivatives == orig(this.interpolatedSecondaryDerivatives)
this.interpolatedSecondaryDerivatives.getClass().getName() == orig(this.interpolatedSecondaryDerivatives.getClass().getName())
this.interpolatedSecondaryDerivatives[] == orig(this.interpolatedSecondaryDerivatives[])
this.forward == orig(this.forward)
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.secondaryMappers == orig(this.secondaryMappers)
this.secondaryMappers.getClass().getName() == orig(this.secondaryMappers.getClass().getName())
this.secondaryMappers[] == orig(this.secondaryMappers[])
this.secondaryMappers[].firstIndex == orig(this.secondaryMappers[].firstIndex)
this.secondaryMappers[].dimension == orig(this.secondaryMappers[].dimension)
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.interpolatedPrimaryState != null
this.interpolatedPrimaryDerivatives != null
this.interpolatedSecondaryState != null
this.interpolatedSecondaryDerivatives != null
this.finalized == false
this.dirtyState == true
this.primaryMapper != null
this.secondaryMappers != null
===========================================================================
org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.writeBaseExternal(java.io.ObjectOutput):::ENTER
this.currentState != null
this.interpolatedState != null
this.interpolatedState[] elements != 0
this.interpolatedDerivatives != null
this.interpolatedDerivatives[] elements != 0
this.interpolatedPrimaryState != null
this.interpolatedPrimaryState[] elements != 0
this.interpolatedPrimaryDerivatives != null
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.interpolatedPrimaryDerivatives[] one of { [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.interpolatedSecondaryState != null
this.interpolatedSecondaryState[] == []
this.interpolatedSecondaryDerivatives != null
this.interpolatedSecondaryDerivatives[] == []
this.finalized == true
this.forward == true
this.dirtyState == false
this.primaryMapper != null
this.primaryMapper.dimension one of { 2, 4 }
this.secondaryMappers != null
this.secondaryMappers[] == []
this.secondaryMappers[].getClass().getName() == []
this.secondaryMappers[].firstIndex == []
this.secondaryMappers[].dimension == []
out != null
out.getClass().getName() == java.io.ObjectOutputStream.class
size(this.currentState[]) one of { 2, 4 }
size(this.interpolatedState[]) one of { 2, 4 }
size(this.interpolatedDerivatives[]) one of { 2, 4 }
size(this.interpolatedPrimaryState[]) one of { 2, 4 }
size(this.interpolatedPrimaryDerivatives[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math3.ode.sampling.AbstractStepInterpolator.writeBaseExternal(java.io.ObjectOutput):::EXIT
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.interpolatedPrimaryState == orig(this.interpolatedPrimaryState)
this.interpolatedPrimaryState[] == orig(this.interpolatedPrimaryState[])
this.interpolatedPrimaryDerivatives == orig(this.interpolatedPrimaryDerivatives)
this.interpolatedPrimaryDerivatives[] == orig(this.interpolatedPrimaryDerivatives[])
this.interpolatedSecondaryState == orig(this.interpolatedSecondaryState)
this.interpolatedSecondaryState.getClass().getName() == orig(this.interpolatedSecondaryState.getClass().getName())
this.interpolatedSecondaryState[] == orig(this.interpolatedSecondaryState[])
this.interpolatedSecondaryDerivatives == orig(this.interpolatedSecondaryDerivatives)
this.interpolatedSecondaryDerivatives.getClass().getName() == orig(this.interpolatedSecondaryDerivatives.getClass().getName())
this.interpolatedSecondaryDerivatives[] == orig(this.interpolatedSecondaryDerivatives[])
this.globalPreviousTime == orig(this.globalPreviousTime)
this.globalCurrentTime == orig(this.globalCurrentTime)
this.softPreviousTime == orig(this.softPreviousTime)
this.softCurrentTime == orig(this.softCurrentTime)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.secondaryMappers == orig(this.secondaryMappers)
this.secondaryMappers.getClass().getName() == orig(this.secondaryMappers.getClass().getName())
this.secondaryMappers[] == orig(this.secondaryMappers[])
this.secondaryMappers[].firstIndex == orig(this.secondaryMappers[].firstIndex)
this.secondaryMappers[].dimension == orig(this.secondaryMappers[].dimension)
this.currentState != null
this.interpolatedState != null
this.interpolatedState[] elements != 0
this.interpolatedDerivatives != null
this.interpolatedDerivatives[] elements != 0
this.interpolatedPrimaryState != null
this.interpolatedPrimaryState[] elements != 0
this.interpolatedPrimaryDerivatives != null
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.interpolatedPrimaryDerivatives[] one of { [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.interpolatedSecondaryState != null
this.interpolatedSecondaryState[] == []
this.interpolatedSecondaryDerivatives != null
this.interpolatedSecondaryDerivatives[] == []
this.finalized == true
this.forward == true
this.dirtyState == false
this.primaryMapper != null
this.primaryMapper.dimension one of { 2, 4 }
this.secondaryMappers != null
this.secondaryMappers[] == []
this.secondaryMappers[].getClass().getName() == []
this.secondaryMappers[].firstIndex == []
this.secondaryMappers[].dimension == []
size(this.currentState[]) one of { 2, 4 }
size(this.interpolatedState[]) one of { 2, 4 }
size(this.interpolatedDerivatives[]) one of { 2, 4 }
size(this.interpolatedPrimaryState[]) one of { 2, 4 }
size(this.interpolatedPrimaryDerivatives[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator:::CLASS
===========================================================================
org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator:::OBJECT
this.nordsieck.data.getClass().getName() == double[][].class
this.nordsieck.data[] elements != null
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == "{"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == "}"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == "{"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == "}"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == ","
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == ","
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == "{"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == "}"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == "{"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == "}"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == ","
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == ","
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == java.text.DecimalFormat.class
this.interpolatedSecondaryState.getClass().getName() == double[][].class
this.interpolatedSecondaryState[] == []
this.interpolatedSecondaryDerivatives.getClass().getName() == double[][].class
this.interpolatedSecondaryDerivatives[] == []
this.primaryMapper.firstIndex == 0
this.primaryMapper.dimension one of { 1, 2, 4 }
this.secondaryMappers.getClass().getName() == org.apache.commons.math3.ode.EquationsMapper[].class
this.secondaryMappers[] == []
this.secondaryMappers[].getClass().getName() == []
this.secondaryMappers[].firstIndex == []
this.secondaryMappers[].dimension == []
size(this.stateVariation[]) one of { 1, 2, 4 }
size(this.scaled[]) one of { 1, 2, 4 }
size(this.nordsieck.data[]) >= 2
size(this.currentState[]) one of { 1, 2, 4 }
size(this.interpolatedState[]) one of { 1, 2, 4 }
size(this.interpolatedDerivatives[]) one of { 1, 2, 4 }
size(this.interpolatedPrimaryState[]) one of { 1, 2, 4 }
size(this.interpolatedPrimaryDerivatives[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator.NordsieckStepInterpolator():::EXIT
this.stateVariation == null
this.scalingH == 0.0
this.referenceTime == 0.0
this.scaled == null
this.nordsieck == null
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.interpolatedPrimaryState == null
this.interpolatedPrimaryDerivatives == null
this.interpolatedSecondaryState == null
this.interpolatedSecondaryDerivatives == null
this.globalPreviousTime == Double.NaN
this.globalCurrentTime == Double.NaN
this.softPreviousTime == Double.NaN
this.softCurrentTime == Double.NaN
this.finalized == false
this.forward == true
this.dirtyState == true
this.primaryMapper == null
this.secondaryMappers == null
===========================================================================
org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator.NordsieckStepInterpolator(org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator):::ENTER
interpolator has only one value
interpolator.stateVariation has only one value
interpolator.stateVariation[] == [0.0, 0.0]
interpolator.stateVariation[] elements == 0.0
interpolator.scaled[] sorted by <
interpolator.nordsieck.data.getClass().getName() == double[][].class
interpolator.nordsieck.data[] elements != null
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT has only one value
interpolator.currentState has only one value
interpolator.currentState[] sorted by >
interpolator.interpolatedState has only one value
interpolator.interpolatedState[] sorted by >
interpolator.interpolatedDerivatives has only one value
interpolator.interpolatedDerivatives[] == [NaN, NaN]
interpolator.interpolatedDerivatives[] elements == Double.NaN
interpolator.interpolatedPrimaryState has only one value
interpolator.interpolatedPrimaryState[] sorted by >
interpolator.interpolatedPrimaryDerivatives has only one value
interpolator.interpolatedPrimaryDerivatives[] == [0.0, 0.0]
interpolator.interpolatedPrimaryDerivatives[] elements == 0.0
interpolator.interpolatedSecondaryState has only one value
interpolator.interpolatedSecondaryState.getClass().getName() == double[][].class
interpolator.interpolatedSecondaryState[] == []
interpolator.interpolatedSecondaryDerivatives has only one value
interpolator.interpolatedSecondaryDerivatives.getClass().getName() == double[][].class
interpolator.interpolatedSecondaryDerivatives[] == []
interpolator.finalized == true
interpolator.forward == true
interpolator.dirtyState == false
interpolator.primaryMapper has only one value
interpolator.primaryMapper.firstIndex == 0
interpolator.primaryMapper.dimension == 2
interpolator.secondaryMappers has only one value
interpolator.secondaryMappers.getClass().getName() == org.apache.commons.math3.ode.EquationsMapper[].class
interpolator.secondaryMappers[] == []
interpolator.secondaryMappers[].getClass().getName() == []
interpolator.secondaryMappers[].firstIndex == []
interpolator.secondaryMappers[].dimension == []
size(interpolator.stateVariation[]) == 2
size(interpolator.scaled[]) == 2
size(interpolator.nordsieck.data[]) == 4
size(interpolator.currentState[]) == 2
size(interpolator.interpolatedState[]) == 2
size(interpolator.interpolatedDerivatives[]) == 2
size(interpolator.interpolatedPrimaryState[]) == 2
size(interpolator.interpolatedPrimaryDerivatives[]) == 2
===========================================================================
org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator.NordsieckStepInterpolator(org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator):::EXIT
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
interpolator.stateVariation == orig(interpolator.stateVariation)
interpolator.stateVariation[] == orig(interpolator.stateVariation[])
interpolator.scalingH == orig(interpolator.scalingH)
interpolator.referenceTime == orig(interpolator.referenceTime)
interpolator.scaled == orig(interpolator.scaled)
interpolator.scaled[] == orig(interpolator.scaled[])
interpolator.nordsieck == orig(interpolator.nordsieck)
interpolator.nordsieck.data == orig(interpolator.nordsieck.data)
interpolator.nordsieck.data.getClass().getName() == orig(interpolator.nordsieck.data.getClass().getName())
interpolator.nordsieck.data[] == orig(interpolator.nordsieck.data[])
interpolator.h == orig(interpolator.h)
interpolator.currentState == orig(interpolator.currentState)
interpolator.currentState[] == orig(interpolator.currentState[])
interpolator.interpolatedTime == orig(interpolator.interpolatedTime)
interpolator.interpolatedState == orig(interpolator.interpolatedState)
interpolator.interpolatedState[] == orig(interpolator.interpolatedState[])
interpolator.interpolatedDerivatives == orig(interpolator.interpolatedDerivatives)
interpolator.interpolatedDerivatives[] == orig(interpolator.interpolatedDerivatives[])
interpolator.interpolatedPrimaryState == orig(interpolator.interpolatedPrimaryState)
interpolator.interpolatedPrimaryState[] == orig(interpolator.interpolatedPrimaryState[])
interpolator.interpolatedPrimaryDerivatives == orig(interpolator.interpolatedPrimaryDerivatives)
interpolator.interpolatedPrimaryDerivatives[] == orig(interpolator.interpolatedPrimaryDerivatives[])
interpolator.interpolatedSecondaryState == orig(interpolator.interpolatedSecondaryState)
interpolator.interpolatedSecondaryState.getClass().getName() == orig(interpolator.interpolatedSecondaryState.getClass().getName())
interpolator.interpolatedSecondaryState[] == orig(interpolator.interpolatedSecondaryState[])
interpolator.interpolatedSecondaryDerivatives == orig(interpolator.interpolatedSecondaryDerivatives)
interpolator.interpolatedSecondaryDerivatives.getClass().getName() == orig(interpolator.interpolatedSecondaryDerivatives.getClass().getName())
interpolator.interpolatedSecondaryDerivatives[] == orig(interpolator.interpolatedSecondaryDerivatives[])
interpolator.globalPreviousTime == orig(interpolator.globalPreviousTime)
interpolator.globalCurrentTime == orig(interpolator.globalCurrentTime)
interpolator.softPreviousTime == orig(interpolator.softPreviousTime)
interpolator.softCurrentTime == orig(interpolator.softCurrentTime)
interpolator.finalized == orig(interpolator.finalized)
interpolator.forward == orig(interpolator.forward)
interpolator.dirtyState == orig(interpolator.dirtyState)
interpolator.primaryMapper == orig(interpolator.primaryMapper)
interpolator.primaryMapper.firstIndex == orig(interpolator.primaryMapper.firstIndex)
interpolator.primaryMapper.dimension == orig(interpolator.primaryMapper.dimension)
interpolator.secondaryMappers == orig(interpolator.secondaryMappers)
interpolator.secondaryMappers.getClass().getName() == orig(interpolator.secondaryMappers.getClass().getName())
interpolator.secondaryMappers[] == orig(interpolator.secondaryMappers[])
interpolator.secondaryMappers[].firstIndex == orig(interpolator.secondaryMappers[].firstIndex)
interpolator.secondaryMappers[].dimension == orig(interpolator.secondaryMappers[].dimension)
this.stateVariation[] == [0.0, 0.0]
this.stateVariation[] elements == 0.0
this.scaled[] sorted by <
this.currentState[] sorted by >
this.interpolatedState[] sorted by >
this.interpolatedDerivatives[] == [NaN, NaN]
this.interpolatedDerivatives[] elements == Double.NaN
this.interpolatedPrimaryState[] sorted by >
this.interpolatedPrimaryDerivatives[] == [0.0, 0.0]
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.finalized == true
this.forward == true
this.dirtyState == false
this.primaryMapper has only one value
this.primaryMapper.dimension == 2
interpolator.stateVariation has only one value
interpolator.stateVariation[] == [0.0, 0.0]
interpolator.stateVariation[] elements == 0.0
interpolator.scaled[] sorted by <
interpolator.nordsieck.data.getClass().getName() == double[][].class
interpolator.nordsieck.data[] elements != null
interpolator.currentState has only one value
interpolator.currentState[] sorted by >
interpolator.interpolatedState has only one value
interpolator.interpolatedState[] sorted by >
interpolator.interpolatedDerivatives has only one value
interpolator.interpolatedDerivatives[] == [NaN, NaN]
interpolator.interpolatedDerivatives[] elements == Double.NaN
interpolator.interpolatedPrimaryState has only one value
interpolator.interpolatedPrimaryState[] sorted by >
interpolator.interpolatedPrimaryDerivatives has only one value
interpolator.interpolatedPrimaryDerivatives[] == [0.0, 0.0]
interpolator.interpolatedPrimaryDerivatives[] elements == 0.0
interpolator.interpolatedSecondaryState has only one value
interpolator.interpolatedSecondaryState.getClass().getName() == double[][].class
interpolator.interpolatedSecondaryState[] == []
interpolator.interpolatedSecondaryDerivatives has only one value
interpolator.interpolatedSecondaryDerivatives.getClass().getName() == double[][].class
interpolator.interpolatedSecondaryDerivatives[] == []
interpolator.finalized == true
interpolator.forward == true
interpolator.dirtyState == false
interpolator.primaryMapper has only one value
interpolator.primaryMapper.firstIndex == 0
interpolator.primaryMapper.dimension == 2
interpolator.secondaryMappers has only one value
interpolator.secondaryMappers.getClass().getName() == org.apache.commons.math3.ode.EquationsMapper[].class
interpolator.secondaryMappers[] == []
interpolator.secondaryMappers[].getClass().getName() == []
interpolator.secondaryMappers[].firstIndex == []
interpolator.secondaryMappers[].dimension == []
size(this.stateVariation[]) == 2
size(this.scaled[]) == 2
size(this.nordsieck.data[]) == 4
size(this.currentState[]) == 2
size(this.interpolatedState[]) == 2
size(this.interpolatedDerivatives[]) == 2
size(this.interpolatedPrimaryState[]) == 2
size(this.interpolatedPrimaryDerivatives[]) == 2
size(interpolator.stateVariation[]) == 2
size(interpolator.scaled[]) == 2
size(interpolator.nordsieck.data[]) == 4
size(interpolator.currentState[]) == 2
size(interpolator.interpolatedState[]) == 2
size(interpolator.interpolatedDerivatives[]) == 2
size(interpolator.interpolatedPrimaryState[]) == 2
size(interpolator.interpolatedPrimaryDerivatives[]) == 2
===========================================================================
org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::ENTER
this.dirtyState == true
theta >= 0.0
===========================================================================
org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::EXIT
this.stateVariation == orig(this.stateVariation)
this.scalingH == orig(this.scalingH)
this.referenceTime == orig(this.referenceTime)
this.scaled == orig(this.scaled)
this.scaled[] == orig(this.scaled[])
this.nordsieck == orig(this.nordsieck)
this.nordsieck.data == orig(this.nordsieck.data)
this.nordsieck.data.getClass().getName() == orig(this.nordsieck.data.getClass().getName())
this.nordsieck.data[] == orig(this.nordsieck.data[])
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedPrimaryState == orig(this.interpolatedPrimaryState)
this.interpolatedPrimaryState[] == orig(this.interpolatedPrimaryState[])
this.interpolatedPrimaryDerivatives == orig(this.interpolatedPrimaryDerivatives)
this.interpolatedPrimaryDerivatives[] == orig(this.interpolatedPrimaryDerivatives[])
this.interpolatedSecondaryState == orig(this.interpolatedSecondaryState)
this.interpolatedSecondaryState.getClass().getName() == orig(this.interpolatedSecondaryState.getClass().getName())
this.interpolatedSecondaryState[] == orig(this.interpolatedSecondaryState[])
this.interpolatedSecondaryDerivatives == orig(this.interpolatedSecondaryDerivatives)
this.interpolatedSecondaryDerivatives.getClass().getName() == orig(this.interpolatedSecondaryDerivatives.getClass().getName())
this.interpolatedSecondaryDerivatives[] == orig(this.interpolatedSecondaryDerivatives[])
this.globalCurrentTime == orig(this.globalCurrentTime)
this.softCurrentTime == orig(this.softCurrentTime)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.secondaryMappers == orig(this.secondaryMappers)
this.secondaryMappers.getClass().getName() == orig(this.secondaryMappers.getClass().getName())
this.secondaryMappers[] == orig(this.secondaryMappers[])
this.secondaryMappers[].firstIndex == orig(this.secondaryMappers[].firstIndex)
this.secondaryMappers[].dimension == orig(this.secondaryMappers[].dimension)
size(this.stateVariation[]) == orig(size(this.stateVariation[]))
size(this.interpolatedState[]) == orig(size(this.interpolatedState[]))
size(this.interpolatedDerivatives[]) == orig(size(this.interpolatedDerivatives[]))
this.interpolatedState[] elements != 0
this.interpolatedDerivatives[] elements != 0
this.dirtyState == true
===========================================================================
org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator.doCopy():::ENTER
this has only one value
this.stateVariation has only one value
this.stateVariation[] == [0.0, 0.0]
this.stateVariation[] elements == 0.0
this.scaled[] sorted by <
this.currentState has only one value
this.currentState[] sorted by >
this.interpolatedState has only one value
this.interpolatedState[] sorted by >
this.interpolatedDerivatives has only one value
this.interpolatedDerivatives[] == [NaN, NaN]
this.interpolatedDerivatives[] elements == Double.NaN
this.interpolatedPrimaryState has only one value
this.interpolatedPrimaryState[] sorted by >
this.interpolatedPrimaryDerivatives has only one value
this.interpolatedPrimaryDerivatives[] == [0.0, 0.0]
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.interpolatedSecondaryState has only one value
this.interpolatedSecondaryDerivatives has only one value
this.finalized == true
this.forward == true
this.dirtyState == false
this.primaryMapper has only one value
this.primaryMapper.dimension == 2
this.secondaryMappers has only one value
size(this.stateVariation[]) == 2
size(this.scaled[]) == 2
size(this.nordsieck.data[]) == 4
size(this.currentState[]) == 2
size(this.interpolatedState[]) == 2
size(this.interpolatedDerivatives[]) == 2
size(this.interpolatedPrimaryState[]) == 2
size(this.interpolatedPrimaryDerivatives[]) == 2
===========================================================================
org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator.doCopy():::EXIT
this.stateVariation == orig(this.stateVariation)
this.stateVariation[] == orig(this.stateVariation[])
this.scalingH == orig(this.scalingH)
this.referenceTime == orig(this.referenceTime)
this.scaled == orig(this.scaled)
this.scaled[] == orig(this.scaled[])
this.nordsieck == orig(this.nordsieck)
this.nordsieck.data == orig(this.nordsieck.data)
this.nordsieck.data.getClass().getName() == orig(this.nordsieck.data.getClass().getName())
this.nordsieck.data[] == orig(this.nordsieck.data[])
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.interpolatedPrimaryState == orig(this.interpolatedPrimaryState)
this.interpolatedPrimaryState[] == orig(this.interpolatedPrimaryState[])
this.interpolatedPrimaryDerivatives == orig(this.interpolatedPrimaryDerivatives)
this.interpolatedPrimaryDerivatives[] == orig(this.interpolatedPrimaryDerivatives[])
this.interpolatedSecondaryState == orig(this.interpolatedSecondaryState)
this.interpolatedSecondaryState.getClass().getName() == orig(this.interpolatedSecondaryState.getClass().getName())
this.interpolatedSecondaryState[] == orig(this.interpolatedSecondaryState[])
this.interpolatedSecondaryDerivatives == orig(this.interpolatedSecondaryDerivatives)
this.interpolatedSecondaryDerivatives.getClass().getName() == orig(this.interpolatedSecondaryDerivatives.getClass().getName())
this.interpolatedSecondaryDerivatives[] == orig(this.interpolatedSecondaryDerivatives[])
this.globalPreviousTime == orig(this.globalPreviousTime)
this.globalCurrentTime == orig(this.globalCurrentTime)
this.softPreviousTime == orig(this.softPreviousTime)
this.softCurrentTime == orig(this.softCurrentTime)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.secondaryMappers == orig(this.secondaryMappers)
this.secondaryMappers.getClass().getName() == orig(this.secondaryMappers.getClass().getName())
this.secondaryMappers[] == orig(this.secondaryMappers[])
this.secondaryMappers[].firstIndex == orig(this.secondaryMappers[].firstIndex)
this.secondaryMappers[].dimension == orig(this.secondaryMappers[].dimension)
this.stateVariation has only one value
this.stateVariation[] == [0.0, 0.0]
this.stateVariation[] elements == 0.0
this.scaled[] sorted by <
this.currentState has only one value
this.currentState[] sorted by >
this.interpolatedState has only one value
this.interpolatedState[] sorted by >
this.interpolatedDerivatives has only one value
this.interpolatedDerivatives[] == [NaN, NaN]
this.interpolatedDerivatives[] elements == Double.NaN
this.interpolatedPrimaryState has only one value
this.interpolatedPrimaryState[] sorted by >
this.interpolatedPrimaryDerivatives has only one value
this.interpolatedPrimaryDerivatives[] == [0.0, 0.0]
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.interpolatedSecondaryState has only one value
this.interpolatedSecondaryDerivatives has only one value
this.finalized == true
this.forward == true
this.dirtyState == false
this.primaryMapper has only one value
this.primaryMapper.dimension == 2
this.secondaryMappers has only one value
return.getClass().getName() == org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator.class
size(this.stateVariation[]) == 2
size(this.scaled[]) == 2
size(this.nordsieck.data[]) == 4
size(this.currentState[]) == 2
size(this.interpolatedState[]) == 2
size(this.interpolatedDerivatives[]) == 2
size(this.interpolatedPrimaryState[]) == 2
size(this.interpolatedPrimaryDerivatives[]) == 2
===========================================================================
org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator.readExternal(java.io.ObjectInput):::ENTER
this.stateVariation == null
this.scalingH == 0.0
this.referenceTime == 0.0
this.scaled == null
this.nordsieck == null
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.interpolatedPrimaryState == null
this.interpolatedPrimaryDerivatives == null
this.interpolatedSecondaryState == null
this.interpolatedSecondaryDerivatives == null
this.globalPreviousTime == Double.NaN
this.globalCurrentTime == Double.NaN
this.softPreviousTime == Double.NaN
this.softCurrentTime == Double.NaN
this.finalized == false
this.forward == true
this.dirtyState == true
this.primaryMapper == null
this.secondaryMappers == null
in has only one value
in.getClass().getName() == java.io.ObjectInputStream.class
===========================================================================
org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator.readExternal(java.io.ObjectInput):::EXIT
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.stateVariation[] == [0.0, 0.0]
this.stateVariation[] elements == 0.0
this.scaled[] sorted by <
this.currentState[] sorted by >
this.interpolatedState[] == [0.0, 0.0]
this.interpolatedState[] elements == 0.0
this.interpolatedDerivatives[] == [0.0, 0.0]
this.interpolatedDerivatives[] elements == 0.0
this.interpolatedPrimaryState[] == [0.0, 0.0]
this.interpolatedPrimaryState[] elements == 0.0
this.interpolatedPrimaryDerivatives[] == [0.0, 0.0]
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.finalized == true
this.forward == true
this.dirtyState == true
this.primaryMapper has only one value
this.primaryMapper.dimension == 2
size(this.stateVariation[]) == 2
size(this.scaled[]) == 2
size(this.nordsieck.data[]) == 4
size(this.currentState[]) == 2
size(this.interpolatedState[]) == 2
size(this.interpolatedDerivatives[]) == 2
size(this.interpolatedPrimaryState[]) == 2
size(this.interpolatedPrimaryDerivatives[]) == 2
orig(this.scalingH) % this.scalingH == 0
this.scalingH > orig(this.scalingH)
orig(this.referenceTime) % this.referenceTime == 0
this.referenceTime > orig(this.referenceTime)
this.h != orig(this.h)
this.interpolatedTime != orig(this.interpolatedTime)
this.globalPreviousTime != orig(this.globalPreviousTime)
this.globalCurrentTime != orig(this.globalCurrentTime)
this.softPreviousTime != orig(this.softPreviousTime)
this.softCurrentTime != orig(this.softCurrentTime)
===========================================================================
org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator.reinitialize(double, double, double[], org.apache.commons.math3.linear.Array2DRowRealMatrix):::ENTER
nordsieckVector.data.getClass().getName() == double[][].class
nordsieckVector.data[] elements != null
size(scaledDerivative[]) one of { 1, 2, 4 }
size(nordsieckVector.data[]) >= 2
===========================================================================
org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator.reinitialize(double, double, double[], org.apache.commons.math3.linear.Array2DRowRealMatrix):::EXIT
this.stateVariation == orig(this.stateVariation)
this.stateVariation[] == orig(this.stateVariation[])
this.nordsieck.data.getClass().getName() == orig(this.nordsieck.data.getClass().getName())
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.interpolatedPrimaryState == orig(this.interpolatedPrimaryState)
this.interpolatedPrimaryState[] == orig(this.interpolatedPrimaryState[])
this.interpolatedPrimaryDerivatives == orig(this.interpolatedPrimaryDerivatives)
this.interpolatedPrimaryDerivatives[] == orig(this.interpolatedPrimaryDerivatives[])
this.interpolatedSecondaryState == orig(this.interpolatedSecondaryState)
this.interpolatedSecondaryState.getClass().getName() == orig(this.interpolatedSecondaryState.getClass().getName())
this.interpolatedSecondaryState[] == orig(this.interpolatedSecondaryState[])
this.interpolatedSecondaryDerivatives == orig(this.interpolatedSecondaryDerivatives)
this.interpolatedSecondaryDerivatives.getClass().getName() == orig(this.interpolatedSecondaryDerivatives.getClass().getName())
this.interpolatedSecondaryDerivatives[] == orig(this.interpolatedSecondaryDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.secondaryMappers == orig(this.secondaryMappers)
this.secondaryMappers.getClass().getName() == orig(this.secondaryMappers.getClass().getName())
this.secondaryMappers[] == orig(this.secondaryMappers[])
this.secondaryMappers[].firstIndex == orig(this.secondaryMappers[].firstIndex)
this.secondaryMappers[].dimension == orig(this.secondaryMappers[].dimension)
scaledDerivative[] == orig(scaledDerivative[])
nordsieckVector.data == orig(nordsieckVector.data)
nordsieckVector.data.getClass().getName() == orig(nordsieckVector.data.getClass().getName())
nordsieckVector.data[] == orig(nordsieckVector.data[])
size(this.scaled[]) == orig(size(this.scaled[]))
size(this.nordsieck.data[]) == orig(size(this.nordsieck.data[]))
this.dirtyState == true
nordsieckVector.data.getClass().getName() == double[][].class
nordsieckVector.data[] elements != null
size(nordsieckVector.data[]) >= 2
orig(this.scalingH) % this.scalingH == 0
===========================================================================
org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator.reinitialize(double[], boolean, org.apache.commons.math3.ode.EquationsMapper, org.apache.commons.math3.ode.EquationsMapper[]):::ENTER
this.stateVariation == null
this.scalingH == 0.0
this.referenceTime == 0.0
this.scaled == null
this.nordsieck == null
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.interpolatedPrimaryState == null
this.interpolatedPrimaryDerivatives == null
this.interpolatedSecondaryState == null
this.interpolatedSecondaryDerivatives == null
this.globalPreviousTime == Double.NaN
this.globalCurrentTime == Double.NaN
this.softPreviousTime == Double.NaN
this.softCurrentTime == Double.NaN
this.finalized == false
this.forward == true
this.dirtyState == true
this.primaryMapper == null
this.secondaryMappers == null
y[] one of { [-360.0], [0.9, 0.0, 0.0, 1.1055415967851334], [1.0, 0.1] }
primaryMapper.firstIndex == 0
primaryMapper.dimension one of { 1, 2, 4 }
secondaryMappers.getClass().getName() == org.apache.commons.math3.ode.EquationsMapper[].class
secondaryMappers[] == []
secondaryMappers[].firstIndex == []
secondaryMappers[].dimension == []
size(y[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator.reinitialize(double[], boolean, org.apache.commons.math3.ode.EquationsMapper, org.apache.commons.math3.ode.EquationsMapper[]):::EXIT
this.scalingH == orig(this.scalingH)
this.referenceTime == orig(this.referenceTime)
this.scaled == orig(this.scaled)
this.nordsieck == orig(this.nordsieck)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
this.finalized == orig(this.finalized)
this.dirtyState == orig(this.dirtyState)
y[] == orig(y[])
primaryMapper.firstIndex == orig(primaryMapper.firstIndex)
primaryMapper.dimension == orig(primaryMapper.dimension)
secondaryMappers[] == orig(secondaryMappers[])
secondaryMappers[].firstIndex == orig(secondaryMappers[].firstIndex)
secondaryMappers[].dimension == orig(secondaryMappers[].dimension)
this.stateVariation[] elements == 0.0
this.stateVariation[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.scalingH == 0.0
this.referenceTime == 0.0
this.scaled == null
this.nordsieck == null
this.h == Double.NaN
this.currentState[] one of { [-360.0], [0.9, 0.0, 0.0, 1.1055415967851334], [1.0, 0.1] }
this.interpolatedTime == Double.NaN
this.interpolatedState[] elements == 0.0
this.interpolatedState[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.interpolatedDerivatives[] elements == 0.0
this.interpolatedDerivatives[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.interpolatedPrimaryState[] elements == 0.0
this.interpolatedPrimaryState[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.interpolatedPrimaryDerivatives[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.globalPreviousTime == Double.NaN
this.globalCurrentTime == Double.NaN
this.softPreviousTime == Double.NaN
this.softCurrentTime == Double.NaN
this.finalized == false
this.dirtyState == true
y[] one of { [-360.0], [0.9, 0.0, 0.0, 1.1055415967851334], [1.0, 0.1] }
primaryMapper.firstIndex == 0
primaryMapper.dimension one of { 1, 2, 4 }
secondaryMappers[] == []
secondaryMappers[].firstIndex == []
secondaryMappers[].dimension == []
===========================================================================
org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator.rescale(double):::ENTER
this.finalized == false
===========================================================================
org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator.rescale(double):::EXIT
this.stateVariation == orig(this.stateVariation)
this.stateVariation[] == orig(this.stateVariation[])
this.referenceTime == orig(this.referenceTime)
this.scaled == orig(this.scaled)
this.nordsieck == orig(this.nordsieck)
this.nordsieck.data == orig(this.nordsieck.data)
this.nordsieck.data.getClass().getName() == orig(this.nordsieck.data.getClass().getName())
this.nordsieck.data[] == orig(this.nordsieck.data[])
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.interpolatedPrimaryState == orig(this.interpolatedPrimaryState)
this.interpolatedPrimaryState[] == orig(this.interpolatedPrimaryState[])
this.interpolatedPrimaryDerivatives == orig(this.interpolatedPrimaryDerivatives)
this.interpolatedPrimaryDerivatives[] == orig(this.interpolatedPrimaryDerivatives[])
this.interpolatedSecondaryState == orig(this.interpolatedSecondaryState)
this.interpolatedSecondaryState.getClass().getName() == orig(this.interpolatedSecondaryState.getClass().getName())
this.interpolatedSecondaryState[] == orig(this.interpolatedSecondaryState[])
this.interpolatedSecondaryDerivatives == orig(this.interpolatedSecondaryDerivatives)
this.interpolatedSecondaryDerivatives.getClass().getName() == orig(this.interpolatedSecondaryDerivatives.getClass().getName())
this.interpolatedSecondaryDerivatives[] == orig(this.interpolatedSecondaryDerivatives[])
this.globalCurrentTime == orig(this.globalCurrentTime)
this.softCurrentTime == orig(this.softCurrentTime)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.secondaryMappers == orig(this.secondaryMappers)
this.secondaryMappers.getClass().getName() == orig(this.secondaryMappers.getClass().getName())
this.secondaryMappers[] == orig(this.secondaryMappers[])
this.secondaryMappers[].firstIndex == orig(this.secondaryMappers[].firstIndex)
this.secondaryMappers[].dimension == orig(this.secondaryMappers[].dimension)
size(this.scaled[]) == orig(size(this.scaled[]))
this.finalized == false
===========================================================================
org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator.writeExternal(java.io.ObjectOutput):::ENTER
this.stateVariation[] == [0.0, 0.0]
this.stateVariation[] elements == 0.0
this.scaled[] sorted by <
this.currentState[] sorted by >
this.interpolatedState[] sorted by >
this.interpolatedDerivatives[] == [NaN, NaN]
this.interpolatedDerivatives[] elements == Double.NaN
this.interpolatedPrimaryState[] sorted by >
this.interpolatedPrimaryDerivatives[] == [0.0, 0.0]
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.finalized == true
this.forward == true
this.dirtyState == false
this.primaryMapper has only one value
this.primaryMapper.dimension == 2
out has only one value
out.getClass().getName() == java.io.ObjectOutputStream.class
size(this.stateVariation[]) == 2
size(this.scaled[]) == 2
size(this.nordsieck.data[]) == 4
size(this.currentState[]) == 2
size(this.interpolatedState[]) == 2
size(this.interpolatedDerivatives[]) == 2
size(this.interpolatedPrimaryState[]) == 2
size(this.interpolatedPrimaryDerivatives[]) == 2
===========================================================================
org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator.writeExternal(java.io.ObjectOutput):::EXIT
this.stateVariation == orig(this.stateVariation)
this.stateVariation[] == orig(this.stateVariation[])
this.scalingH == orig(this.scalingH)
this.referenceTime == orig(this.referenceTime)
this.scaled == orig(this.scaled)
this.scaled[] == orig(this.scaled[])
this.nordsieck == orig(this.nordsieck)
this.nordsieck.data == orig(this.nordsieck.data)
this.nordsieck.data.getClass().getName() == orig(this.nordsieck.data.getClass().getName())
this.nordsieck.data[] == orig(this.nordsieck.data[])
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.interpolatedPrimaryState == orig(this.interpolatedPrimaryState)
this.interpolatedPrimaryState[] == orig(this.interpolatedPrimaryState[])
this.interpolatedPrimaryDerivatives == orig(this.interpolatedPrimaryDerivatives)
this.interpolatedPrimaryDerivatives[] == orig(this.interpolatedPrimaryDerivatives[])
this.interpolatedSecondaryState == orig(this.interpolatedSecondaryState)
this.interpolatedSecondaryState.getClass().getName() == orig(this.interpolatedSecondaryState.getClass().getName())
this.interpolatedSecondaryState[] == orig(this.interpolatedSecondaryState[])
this.interpolatedSecondaryDerivatives == orig(this.interpolatedSecondaryDerivatives)
this.interpolatedSecondaryDerivatives.getClass().getName() == orig(this.interpolatedSecondaryDerivatives.getClass().getName())
this.interpolatedSecondaryDerivatives[] == orig(this.interpolatedSecondaryDerivatives[])
this.globalPreviousTime == orig(this.globalPreviousTime)
this.globalCurrentTime == orig(this.globalCurrentTime)
this.softPreviousTime == orig(this.softPreviousTime)
this.softCurrentTime == orig(this.softCurrentTime)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.primaryMapper == orig(this.primaryMapper)
this.primaryMapper.firstIndex == orig(this.primaryMapper.firstIndex)
this.primaryMapper.dimension == orig(this.primaryMapper.dimension)
this.secondaryMappers == orig(this.secondaryMappers)
this.secondaryMappers.getClass().getName() == orig(this.secondaryMappers.getClass().getName())
this.secondaryMappers[] == orig(this.secondaryMappers[])
this.secondaryMappers[].firstIndex == orig(this.secondaryMappers[].firstIndex)
this.secondaryMappers[].dimension == orig(this.secondaryMappers[].dimension)
this.stateVariation[] == [0.0, 0.0]
this.stateVariation[] elements == 0.0
this.scaled[] sorted by <
this.currentState[] sorted by >
this.interpolatedState[] sorted by >
this.interpolatedDerivatives[] == [NaN, NaN]
this.interpolatedDerivatives[] elements == Double.NaN
this.interpolatedPrimaryState[] sorted by >
this.interpolatedPrimaryDerivatives[] == [0.0, 0.0]
this.interpolatedPrimaryDerivatives[] elements == 0.0
this.finalized == true
this.forward == true
this.dirtyState == false
this.primaryMapper has only one value
this.primaryMapper.dimension == 2
size(this.stateVariation[]) == 2
size(this.scaled[]) == 2
size(this.nordsieck.data[]) == 4
size(this.currentState[]) == 2
size(this.interpolatedState[]) == 2
size(this.interpolatedDerivatives[]) == 2
size(this.interpolatedPrimaryState[]) == 2
size(this.interpolatedPrimaryDerivatives[]) == 2
===========================================================================
org.apache.commons.math3.ode.sampling.NordsieckStepInterpolatorTest:::OBJECT
===========================================================================
org.apache.commons.math3.ode.sampling.NordsieckStepInterpolatorTest.NordsieckStepInterpolatorTest():::EXIT
===========================================================================
org.apache.commons.math3.ode.sampling.NordsieckStepInterpolatorTest.derivativesConsistency():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.sampling.NordsieckStepInterpolatorTest.derivativesConsistency():::EXIT
===========================================================================
org.apache.commons.math3.ode.sampling.NordsieckStepInterpolatorTest.serialization():::ENTER
this has only one value
===========================================================================
org.apache.commons.math3.ode.sampling.NordsieckStepInterpolatorTest.serialization():::EXIT
===========================================================================
org.apache.commons.math3.ode.sampling.StepInterpolatorTestUtils$1:::OBJECT
this.val$threshold >= 1.0E-10
===========================================================================
org.apache.commons.math3.ode.sampling.StepInterpolatorTestUtils$1.(double):::ENTER
===========================================================================
org.apache.commons.math3.ode.sampling.StepInterpolatorTestUtils$1.(double):::EXIT
===========================================================================
org.apache.commons.math3.ode.sampling.StepInterpolatorTestUtils$1.handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean):::ENTER
interpolator != null
===========================================================================
org.apache.commons.math3.ode.sampling.StepInterpolatorTestUtils$1.handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean):::EXIT45
this.val$threshold == 1.0E-10
orig(isLast) == true
===========================================================================
org.apache.commons.math3.ode.sampling.StepInterpolatorTestUtils$1.handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean):::EXIT76
===========================================================================
org.apache.commons.math3.ode.sampling.StepInterpolatorTestUtils$1.handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean):::EXIT
this.val$threshold == orig(this.val$threshold)
===========================================================================
org.apache.commons.math3.ode.sampling.StepInterpolatorTestUtils$1.init(double, double[], double):::ENTER
t0 == 0.0
y0[] one of { [0.09999999999999998, 0.0, 0.0, 4.358898943540674], [0.9, 0.0, 0.0, 1.1055415967851334] }
y0[] elements >= 0.0
t == 20.0
size(y0[]) == 4
===========================================================================
org.apache.commons.math3.ode.sampling.StepInterpolatorTestUtils$1.init(double, double[], double):::EXIT
this.val$threshold == orig(this.val$threshold)
y0[] == orig(y0[])
y0[] one of { [0.09999999999999998, 0.0, 0.0, 4.358898943540674], [0.9, 0.0, 0.0, 1.1055415967851334] }
y0[] elements >= 0.0
===========================================================================
org.apache.commons.math3.ode.sampling.StepInterpolatorTestUtils.checkDerivativesConsistency(org.apache.commons.math3.ode.FirstOrderIntegrator, org.apache.commons.math3.ode.TestProblemAbstract, double):::ENTER
problem.getClass().getName() == org.apache.commons.math3.ode.TestProblem3.class
problem.n == 4
problem.calls == 0
problem.t0 == 0.0
problem.y0[] one of { [0.09999999999999998, 0.0, 0.0, 4.358898943540674], [0.9, 0.0, 0.0, 1.1055415967851334] }
problem.y0[] elements >= 0.0
problem.t1 == 20.0
problem.errorScale[] == [1.0, 1.0, 1.0, 1.0]
problem.errorScale[] elements == 1.0
size(problem.y0[]) == 4
size(problem.errorScale[]) == 4
===========================================================================
org.apache.commons.math3.ode.sampling.StepInterpolatorTestUtils.checkDerivativesConsistency(org.apache.commons.math3.ode.FirstOrderIntegrator, org.apache.commons.math3.ode.TestProblemAbstract, double):::EXIT
problem.n == orig(problem.n)
problem.t0 == orig(problem.t0)
problem.y0 == orig(problem.y0)
problem.y0[] == orig(problem.y0[])
problem.t1 == orig(problem.t1)
problem.errorScale == orig(problem.errorScale)
problem.errorScale[] == orig(problem.errorScale[])
problem.n == 4
problem.t0 == 0.0
problem.y0[] one of { [0.09999999999999998, 0.0, 0.0, 4.358898943540674], [0.9, 0.0, 0.0, 1.1055415967851334] }
problem.y0[] elements >= 0.0
problem.t1 == 20.0
problem.errorScale[] == [1.0, 1.0, 1.0, 1.0]
problem.errorScale[] elements == 1.0
size(problem.y0[]) == 4
size(problem.errorScale[]) == 4
problem.calls > orig(problem.calls)
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizer:::OBJECT
this.h <= 2.0
this.h >= -0.5
this.firstTime >= 0.0
this.lastTime >= 0.0
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER.first == false
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER.last == false
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES.getClass().getName() == org.apache.commons.math3.ode.sampling.StepNormalizerBounds[].class
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[] contains no nulls and has only one value, of length 4
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[] elements != null
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[].getClass().getName() == [org.apache.commons.math3.ode.sampling.StepNormalizerBounds, org.apache.commons.math3.ode.sampling.StepNormalizerBounds, org.apache.commons.math3.ode.sampling.StepNormalizerBounds, org.apache.commons.math3.ode.sampling.StepNormalizerBounds]
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[].getClass().getName() elements == org.apache.commons.math3.ode.sampling.StepNormalizerBounds.class
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[].first == [0, 1, 0, 1]
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[].last == [0, 0, 1, 1]
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST.first == true
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST.last == false
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST.first == false
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST.last == true
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH.first == true
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH.last == true
org.apache.commons.math3.ode.sampling.StepNormalizerMode.INCREMENT has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerMode.MULTIPLES has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES.getClass().getName() == org.apache.commons.math3.ode.sampling.StepNormalizerMode[].class
org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES[] contains no nulls and has only one value, of length 2
org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES[] elements != null
org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES[].getClass().getName() == [org.apache.commons.math3.ode.sampling.StepNormalizerMode, org.apache.commons.math3.ode.sampling.StepNormalizerMode]
org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES[].getClass().getName() elements == org.apache.commons.math3.ode.sampling.StepNormalizerMode.class
size(this.lastState[]) one of { 1, 4 }
size(this.lastDerivatives[]) one of { 1, 4 }
size(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[]) == 4
size(org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES[]) == 2
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizer.StepNormalizer(double, org.apache.commons.math3.ode.sampling.FixedStepHandler):::ENTER
h one of { 1.9047619047619047, 2.0 }
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizer.StepNormalizer(double, org.apache.commons.math3.ode.sampling.FixedStepHandler):::EXIT
this.h one of { 1.9047619047619047, 2.0 }
this.firstTime == Double.NaN
this.lastTime == Double.NaN
this.lastState == null
this.lastDerivatives == null
this.forward == true
this.bounds has only one value
this.bounds.first == true
this.bounds.last == false
this.mode has only one value
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizer.StepNormalizer(double, org.apache.commons.math3.ode.sampling.FixedStepHandler, org.apache.commons.math3.ode.sampling.StepNormalizerMode, org.apache.commons.math3.ode.sampling.StepNormalizerBounds):::ENTER
h one of { 0.5, 1.9047619047619047, 2.0 }
org.apache.commons.math3.ode.sampling.StepNormalizerMode.INCREMENT has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerMode.MULTIPLES has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES.getClass().getName() == org.apache.commons.math3.ode.sampling.StepNormalizerMode[].class
org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES[] contains no nulls and has only one value, of length 2
org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES[] elements != null
org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES[].getClass().getName() == [org.apache.commons.math3.ode.sampling.StepNormalizerMode, org.apache.commons.math3.ode.sampling.StepNormalizerMode]
org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES[].getClass().getName() elements == org.apache.commons.math3.ode.sampling.StepNormalizerMode.class
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER.first == false
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER.last == false
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES.getClass().getName() == org.apache.commons.math3.ode.sampling.StepNormalizerBounds[].class
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[] contains no nulls and has only one value, of length 4
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[] elements != null
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[].getClass().getName() == [org.apache.commons.math3.ode.sampling.StepNormalizerBounds, org.apache.commons.math3.ode.sampling.StepNormalizerBounds, org.apache.commons.math3.ode.sampling.StepNormalizerBounds, org.apache.commons.math3.ode.sampling.StepNormalizerBounds]
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[].getClass().getName() elements == org.apache.commons.math3.ode.sampling.StepNormalizerBounds.class
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[].first == [0, 1, 0, 1]
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[].last == [0, 0, 1, 1]
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST.first == true
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST.last == false
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST.first == false
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST.last == true
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH.first == true
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH.last == true
size(org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES[]) == 2
size(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[]) == 4
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizer.StepNormalizer(double, org.apache.commons.math3.ode.sampling.FixedStepHandler, org.apache.commons.math3.ode.sampling.StepNormalizerMode, org.apache.commons.math3.ode.sampling.StepNormalizerBounds):::EXIT
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER.first == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER.first)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER.last == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER.last)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES.getClass().getName() == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES.getClass().getName())
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[] == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[])
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[].first == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[].first)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[].last == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[].last)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST.first == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST.first)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST.last == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST.last)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST.first == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST.first)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST.last == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST.last)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH.first == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH.first)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH.last == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH.last)
org.apache.commons.math3.ode.sampling.StepNormalizerMode.INCREMENT == orig(org.apache.commons.math3.ode.sampling.StepNormalizerMode.INCREMENT)
org.apache.commons.math3.ode.sampling.StepNormalizerMode.MULTIPLES == orig(org.apache.commons.math3.ode.sampling.StepNormalizerMode.MULTIPLES)
org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES == orig(org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES)
org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES.getClass().getName() == orig(org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES.getClass().getName())
org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES[] == orig(org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES[])
bounds.first == orig(bounds.first)
bounds.last == orig(bounds.last)
this.h one of { 0.5, 1.9047619047619047, 2.0 }
this.firstTime == Double.NaN
this.lastTime == Double.NaN
this.lastState == null
this.lastDerivatives == null
this.forward == true
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizer.doNormalizedStep(boolean):::ENTER
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizer.doNormalizedStep(boolean):::EXIT279
this.h one of { -0.5, 0.5 }
this.lastState[] == [0.0]
this.lastState[] elements == 0.0
this.lastDerivatives[] == [0.0]
this.lastDerivatives[] elements == 0.0
this.bounds.first == false
orig(isLast) == false
size(this.lastState[]) == 1
size(this.lastDerivatives[]) == 1
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizer.doNormalizedStep(boolean):::EXIT282
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizer.doNormalizedStep(boolean):::EXIT
this.h == orig(this.h)
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.firstTime == orig(this.firstTime)
this.lastTime == orig(this.lastTime)
this.lastState == orig(this.lastState)
this.lastState[] == orig(this.lastState[])
this.lastDerivatives == orig(this.lastDerivatives)
this.lastDerivatives[] == orig(this.lastDerivatives[])
this.forward == orig(this.forward)
this.bounds == orig(this.bounds)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER.first == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER.first)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER.last == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER.last)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES.getClass().getName() == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES.getClass().getName())
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[] == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[])
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[].first == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[].first)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[].last == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[].last)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST.first == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST.first)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST.last == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST.last)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST.first == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST.first)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST.last == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST.last)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH.first == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH.first)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH.last == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH.last)
this.bounds.first == orig(this.bounds.first)
this.bounds.last == orig(this.bounds.last)
this.mode == orig(this.mode)
org.apache.commons.math3.ode.sampling.StepNormalizerMode.INCREMENT == orig(org.apache.commons.math3.ode.sampling.StepNormalizerMode.INCREMENT)
org.apache.commons.math3.ode.sampling.StepNormalizerMode.MULTIPLES == orig(org.apache.commons.math3.ode.sampling.StepNormalizerMode.MULTIPLES)
org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES == orig(org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES)
org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES.getClass().getName() == orig(org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES.getClass().getName())
org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES[] == orig(org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES[])
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizer.handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean):::ENTER
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizer.handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean):::EXIT
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.bounds == orig(this.bounds)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER.first == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER.first)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER.last == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER.last)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES.getClass().getName() == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES.getClass().getName())
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[] == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[])
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[].first == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[].first)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[].last == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[].last)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST.first == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST.first)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST.last == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST.last)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST.first == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST.first)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST.last == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST.last)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH.first == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH.first)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH.last == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH.last)
this.bounds.first == orig(this.bounds.first)
this.bounds.last == orig(this.bounds.last)
this.mode == orig(this.mode)
org.apache.commons.math3.ode.sampling.StepNormalizerMode.INCREMENT == orig(org.apache.commons.math3.ode.sampling.StepNormalizerMode.INCREMENT)
org.apache.commons.math3.ode.sampling.StepNormalizerMode.MULTIPLES == orig(org.apache.commons.math3.ode.sampling.StepNormalizerMode.MULTIPLES)
org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES == orig(org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES)
org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES.getClass().getName() == orig(org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES.getClass().getName())
org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES[] == orig(org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES[])
size(this.lastState[]) == orig(size(this.lastState[]))
size(this.lastDerivatives[]) == orig(size(this.lastDerivatives[]))
orig(this.h) % this.h == 0
this.h % orig(this.h) == 0
this.h <= orig(this.h)
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizer.init(double, double[], double):::ENTER
this.h one of { 0.5, 1.9047619047619047, 2.0 }
this.firstTime == Double.NaN
this.lastTime == Double.NaN
this.lastState == null
this.lastDerivatives == null
this.forward == true
y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
y0[] one of { [0.0], [0.09999999999999998, 0.0, 0.0, 4.358898943540674] }
size(y0[]) one of { 1, 4 }
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizer.init(double, double[], double):::EXIT
this.h == orig(this.h)
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.lastState == orig(this.lastState)
this.lastDerivatives == orig(this.lastDerivatives)
this.forward == orig(this.forward)
this.bounds == orig(this.bounds)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER.first == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER.first)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER.last == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER.last)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES.getClass().getName() == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES.getClass().getName())
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[] == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[])
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[].first == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[].first)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[].last == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[].last)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST.first == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST.first)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST.last == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST.last)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST.first == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST.first)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST.last == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST.last)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH.first == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH.first)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH.last == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH.last)
this.bounds.first == orig(this.bounds.first)
this.bounds.last == orig(this.bounds.last)
this.mode == orig(this.mode)
org.apache.commons.math3.ode.sampling.StepNormalizerMode.INCREMENT == orig(org.apache.commons.math3.ode.sampling.StepNormalizerMode.INCREMENT)
org.apache.commons.math3.ode.sampling.StepNormalizerMode.MULTIPLES == orig(org.apache.commons.math3.ode.sampling.StepNormalizerMode.MULTIPLES)
org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES == orig(org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES)
org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES.getClass().getName() == orig(org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES.getClass().getName())
org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES[] == orig(org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES[])
y0[] == orig(y0[])
this.h one of { 0.5, 1.9047619047619047, 2.0 }
this.firstTime == Double.NaN
this.lastTime == Double.NaN
this.lastState == null
this.lastDerivatives == null
this.forward == true
y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
y0[] one of { [0.0], [0.09999999999999998, 0.0, 0.0, 4.358898943540674] }
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizer.isNextInStep(double, org.apache.commons.math3.ode.sampling.StepInterpolator):::ENTER
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizer.isNextInStep(double, org.apache.commons.math3.ode.sampling.StepInterpolator):::EXIT
this.h == orig(this.h)
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.firstTime == orig(this.firstTime)
this.lastTime == orig(this.lastTime)
this.lastState == orig(this.lastState)
this.lastState[] == orig(this.lastState[])
this.lastDerivatives == orig(this.lastDerivatives)
this.lastDerivatives[] == orig(this.lastDerivatives[])
this.forward == orig(this.forward)
this.bounds == orig(this.bounds)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER.first == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER.first)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER.last == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER.last)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES.getClass().getName() == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES.getClass().getName())
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[] == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[])
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[].first == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[].first)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[].last == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[].last)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST.first == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST.first)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST.last == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST.last)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST.first == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST.first)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST.last == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST.last)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH.first == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH.first)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH.last == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH.last)
this.bounds.first == orig(this.bounds.first)
this.bounds.last == orig(this.bounds.last)
this.mode == orig(this.mode)
org.apache.commons.math3.ode.sampling.StepNormalizerMode.INCREMENT == orig(org.apache.commons.math3.ode.sampling.StepNormalizerMode.INCREMENT)
org.apache.commons.math3.ode.sampling.StepNormalizerMode.MULTIPLES == orig(org.apache.commons.math3.ode.sampling.StepNormalizerMode.MULTIPLES)
org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES == orig(org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES)
org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES.getClass().getName() == orig(org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES.getClass().getName())
org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES[] == orig(org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES[])
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizer.isNextInStep(double, org.apache.commons.math3.ode.sampling.StepInterpolator):::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizer.isNextInStep(double, org.apache.commons.math3.ode.sampling.StepInterpolator):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizer.storeStep(org.apache.commons.math3.ode.sampling.StepInterpolator, double):::ENTER
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizer.storeStep(org.apache.commons.math3.ode.sampling.StepInterpolator, double):::EXIT
this.h == orig(this.h)
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.firstTime == orig(this.firstTime)
this.lastState == orig(this.lastState)
this.lastDerivatives == orig(this.lastDerivatives)
this.forward == orig(this.forward)
this.bounds == orig(this.bounds)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER.first == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER.first)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER.last == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER.last)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES.getClass().getName() == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES.getClass().getName())
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[] == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[])
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[].first == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[].first)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[].last == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[].last)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST.first == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST.first)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST.last == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST.last)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST.first == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST.first)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST.last == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST.last)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH.first == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH.first)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH.last == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH.last)
this.bounds.first == orig(this.bounds.first)
this.bounds.last == orig(this.bounds.last)
this.mode == orig(this.mode)
org.apache.commons.math3.ode.sampling.StepNormalizerMode.INCREMENT == orig(org.apache.commons.math3.ode.sampling.StepNormalizerMode.INCREMENT)
org.apache.commons.math3.ode.sampling.StepNormalizerMode.MULTIPLES == orig(org.apache.commons.math3.ode.sampling.StepNormalizerMode.MULTIPLES)
org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES == orig(org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES)
org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES.getClass().getName() == orig(org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES.getClass().getName())
org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES[] == orig(org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES[])
size(this.lastState[]) == orig(size(this.lastState[]))
size(this.lastDerivatives[]) == orig(size(this.lastDerivatives[]))
this.lastTime != orig(this.lastTime)
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerBounds:::CLASS
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER.first == false
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER.last == false
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES.getClass().getName() == org.apache.commons.math3.ode.sampling.StepNormalizerBounds[].class
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[] contains no nulls and has only one value, of length 4
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[] elements != null
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[].getClass().getName() == [org.apache.commons.math3.ode.sampling.StepNormalizerBounds, org.apache.commons.math3.ode.sampling.StepNormalizerBounds, org.apache.commons.math3.ode.sampling.StepNormalizerBounds, org.apache.commons.math3.ode.sampling.StepNormalizerBounds]
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[].getClass().getName() elements == org.apache.commons.math3.ode.sampling.StepNormalizerBounds.class
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[].first == [0, 1, 0, 1]
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[].last == [0, 0, 1, 1]
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST.first == true
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST.last == false
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST.first == false
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST.last == true
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH.first == true
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH.last == true
size(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[]) == 4
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerBounds:::OBJECT
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.StepNormalizerBounds(java.lang.String, int, boolean, boolean):::ENTER
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.StepNormalizerBounds(java.lang.String, int, boolean, boolean):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.firstIncluded():::ENTER
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.firstIncluded():::EXIT
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER.first == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER.first)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER.last == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER.last)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES.getClass().getName() == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES.getClass().getName())
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[] == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[])
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[].first == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[].first)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[].last == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[].last)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST.first == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST.first)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST.last == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST.last)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST.first == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST.first)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST.last == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST.last)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH.first == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH.first)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH.last == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH.last)
this.first == orig(this.first)
this.last == orig(this.last)
(this.first == false)  <==>  (return == false)
(this.first == true)  <==>  (return == true)
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.firstIncluded():::EXIT;condition="return == true"
this.first == true
return == true
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.firstIncluded():::EXIT;condition="not(return == true)"
this.first == false
return == false
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.lastIncluded():::ENTER
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.lastIncluded():::EXIT
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER.first == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER.first)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER.last == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER.last)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES.getClass().getName() == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES.getClass().getName())
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[] == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[])
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[].first == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[].first)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[].last == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[].last)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST.first == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST.first)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST.last == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST.last)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST.first == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST.first)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST.last == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST.last)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH.first == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH.first)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH.last == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH.last)
this.first == orig(this.first)
this.last == orig(this.last)
(this.last == false)  <==>  (return == false)
(this.last == true)  <==>  (return == true)
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.lastIncluded():::EXIT;condition="return == true"
this.last == true
return == true
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.lastIncluded():::EXIT;condition="not(return == true)"
this.last == false
return == false
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerMode:::OBJECT
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerMode.StepNormalizerMode(java.lang.String, int):::ENTER
$hidden$1.toString one of { "INCREMENT", "MULTIPLES" }
$hidden$2 one of { 0, 1 }
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerMode.StepNormalizerMode(java.lang.String, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
$hidden$1.toString one of { "INCREMENT", "MULTIPLES" }
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest:::OBJECT
this.output == null
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest.StepNormalizerOutputOverlapTest():::EXIT
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest.getEnd():::ENTER
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest.getEnd():::EXIT
this.output == orig(this.output)
return == 10.0
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest.getExpInc():::ENTER
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest.getExpInc():::EXIT
this.output == orig(this.output)
return[] == [0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0, 8.5, 9.0, 9.5, 10.0]
return[] elements >= 0.0
size(return[]) == 21
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest.getExpIncRev():::ENTER
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest.getExpIncRev():::EXIT
this.output == orig(this.output)
return[] == [10.0, 9.5, 9.0, 8.5, 8.0, 7.5, 7.0, 6.5, 6.0, 5.5, 5.0, 4.5, 4.0, 3.5, 3.0, 2.5, 2.0, 1.5, 1.0, 0.5, 0.0]
return[] elements >= 0.0
size(return[]) == 21
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest.getExpMul():::ENTER
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest.getExpMul():::EXIT
this.output == orig(this.output)
return[] == [0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0, 8.5, 9.0, 9.5, 10.0]
return[] elements >= 0.0
size(return[]) == 21
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest.getExpMulRev():::ENTER
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest.getExpMulRev():::EXIT
this.output == orig(this.output)
return[] == [10.0, 9.5, 9.0, 8.5, 8.0, 7.5, 7.0, 6.5, 6.0, 5.5, 5.0, 4.5, 4.0, 3.5, 3.0, 2.5, 2.0, 1.5, 1.0, 0.5, 0.0]
return[] elements >= 0.0
size(return[]) == 21
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest.getO():::ENTER
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest.getO():::EXIT
this.output == orig(this.output)
return.getClass().getName() == int[][].class
return[] elements != null
size(return[]) == 16
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest.getStart():::ENTER
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest.getStart():::EXIT
this.output == orig(this.output)
return == 0.0
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest:::OBJECT
this.output == null
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest.StepNormalizerOutputTest():::EXIT
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest.getEnd():::ENTER
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest.getEnd():::EXIT
this.output == orig(this.output)
return == 10.1
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest.getExpInc():::ENTER
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest.getExpInc():::EXIT
this.output == orig(this.output)
return[] == [0.3, 0.8, 1.3, 1.8, 2.3, 2.8, 3.3, 3.8, 4.3, 4.8, 5.3, 5.8, 6.3, 6.8, 7.3, 7.8, 8.3, 8.8, 9.3, 9.8, 10.1]
return[] elements >= 0.3
size(return[]) == 21
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest.getExpIncRev():::ENTER
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest.getExpIncRev():::EXIT
this.output == orig(this.output)
return[] == [10.1, 9.6, 9.1, 8.6, 8.1, 7.6, 7.1, 6.6, 6.1, 5.6, 5.1, 4.6, 4.1, 3.6, 3.1, 2.6, 2.1, 1.6, 1.1, 0.6, 0.3]
return[] elements >= 0.3
size(return[]) == 21
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest.getExpMul():::ENTER
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest.getExpMul():::EXIT
this.output == orig(this.output)
return[] == [0.3, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0, 8.5, 9.0, 9.5, 10.0, 10.1]
return[] elements >= 0.3
size(return[]) == 22
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest.getExpMulRev():::ENTER
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest.getExpMulRev():::EXIT
this.output == orig(this.output)
return[] == [10.1, 10.0, 9.5, 9.0, 8.5, 8.0, 7.5, 7.0, 6.5, 6.0, 5.5, 5.0, 4.5, 4.0, 3.5, 3.0, 2.5, 2.0, 1.5, 1.0, 0.5, 0.3]
return[] elements >= 0.3
size(return[]) == 22
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest.getO():::ENTER
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest.getO():::EXIT
this.output == orig(this.output)
return.getClass().getName() == int[][].class
return[] elements != null
size(return[]) == 16
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest.getStart():::ENTER
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest.getStart():::EXIT
this.output == orig(this.output)
return == 0.3
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTestBase:::OBJECT
this.output[] elements != null
this.output[].getClass().getName() elements == java.lang.Double.class
this.output.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTestBase.StepNormalizerOutputTestBase():::EXIT
this.output == null
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTestBase.computeDerivatives(double, double[], double[]):::ENTER
y[] == [0.0]
y[] elements == 0.0
yDot[] == [0.0]
yDot[] elements == 0.0
size(y[]) == 1
size(yDot[]) == 1
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTestBase.computeDerivatives(double, double[], double[]):::EXIT
this.output == orig(this.output)
this.output[] == orig(this.output[])
this.output.getClass().getName() == orig(this.output.getClass().getName())
y[] == orig(y[])
yDot[] == orig(yDot[])
y[] == [0.0]
y[] elements == 0.0
yDot[] == [0.0]
yDot[] elements == 0.0
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTestBase.doTest(org.apache.commons.math3.ode.sampling.StepNormalizerMode, org.apache.commons.math3.ode.sampling.StepNormalizerBounds, double[], boolean):::ENTER
this.output == null
org.apache.commons.math3.ode.sampling.StepNormalizerMode.INCREMENT has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerMode.MULTIPLES has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES.getClass().getName() == org.apache.commons.math3.ode.sampling.StepNormalizerMode[].class
org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES[] contains no nulls and has only one value, of length 2
org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES[] elements != null
org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES[].getClass().getName() == [org.apache.commons.math3.ode.sampling.StepNormalizerMode, org.apache.commons.math3.ode.sampling.StepNormalizerMode]
org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES[].getClass().getName() elements == org.apache.commons.math3.ode.sampling.StepNormalizerMode.class
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER.first == false
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER.last == false
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES.getClass().getName() == org.apache.commons.math3.ode.sampling.StepNormalizerBounds[].class
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[] contains no nulls and has only one value, of length 4
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[] elements != null
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[].getClass().getName() == [org.apache.commons.math3.ode.sampling.StepNormalizerBounds, org.apache.commons.math3.ode.sampling.StepNormalizerBounds, org.apache.commons.math3.ode.sampling.StepNormalizerBounds, org.apache.commons.math3.ode.sampling.StepNormalizerBounds]
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[].getClass().getName() elements == org.apache.commons.math3.ode.sampling.StepNormalizerBounds.class
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[].first == [0, 1, 0, 1]
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[].last == [0, 0, 1, 1]
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST.first == true
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST.last == false
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST.first == false
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST.last == true
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH.first == true
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH.last == true
size(org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES[]) == 2
size(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[]) == 4
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTestBase.doTest(org.apache.commons.math3.ode.sampling.StepNormalizerMode, org.apache.commons.math3.ode.sampling.StepNormalizerBounds, double[], boolean):::EXIT
org.apache.commons.math3.ode.sampling.StepNormalizerMode.INCREMENT == orig(org.apache.commons.math3.ode.sampling.StepNormalizerMode.INCREMENT)
org.apache.commons.math3.ode.sampling.StepNormalizerMode.MULTIPLES == orig(org.apache.commons.math3.ode.sampling.StepNormalizerMode.MULTIPLES)
org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES == orig(org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES)
org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES.getClass().getName() == orig(org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES.getClass().getName())
org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES[] == orig(org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES[])
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER.first == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER.first)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER.last == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER.last)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES.getClass().getName() == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES.getClass().getName())
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[] == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[])
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[].first == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[].first)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[].last == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[].last)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST.first == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST.first)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST.last == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST.last)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST.first == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST.first)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST.last == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST.last)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH.first == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH.first)
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH.last == orig(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH.last)
bounds.first == orig(bounds.first)
bounds.last == orig(bounds.last)
expected[] == orig(expected[])
org.apache.commons.math3.ode.sampling.StepNormalizerMode.INCREMENT has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerMode.MULTIPLES has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES.getClass().getName() == org.apache.commons.math3.ode.sampling.StepNormalizerMode[].class
org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES[] contains no nulls and has only one value, of length 2
org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES[] elements != null
org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES[].getClass().getName() == [org.apache.commons.math3.ode.sampling.StepNormalizerMode, org.apache.commons.math3.ode.sampling.StepNormalizerMode]
org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES[].getClass().getName() elements == org.apache.commons.math3.ode.sampling.StepNormalizerMode.class
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER.first == false
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.NEITHER.last == false
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES.getClass().getName() == org.apache.commons.math3.ode.sampling.StepNormalizerBounds[].class
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[] contains no nulls and has only one value, of length 4
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[] elements != null
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[].getClass().getName() == [org.apache.commons.math3.ode.sampling.StepNormalizerBounds, org.apache.commons.math3.ode.sampling.StepNormalizerBounds, org.apache.commons.math3.ode.sampling.StepNormalizerBounds, org.apache.commons.math3.ode.sampling.StepNormalizerBounds]
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[].getClass().getName() elements == org.apache.commons.math3.ode.sampling.StepNormalizerBounds.class
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[].first == [0, 1, 0, 1]
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[].last == [0, 0, 1, 1]
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST.first == true
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.FIRST.last == false
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST.first == false
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.LAST.last == true
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH.first == true
org.apache.commons.math3.ode.sampling.StepNormalizerBounds.BOTH.last == true
size(org.apache.commons.math3.ode.sampling.StepNormalizerMode.$VALUES[]) == 2
size(org.apache.commons.math3.ode.sampling.StepNormalizerBounds.$VALUES[]) == 4
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTestBase.getArray(double[], int, int):::ENTER
this.output == null
a[] elements >= 0.0
offsetL one of { 0, 1 }
offsetR one of { 0, 1 }
size(a[]) one of { 21, 22 }
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTestBase.getArray(double[], int, int):::EXIT
this.output == orig(this.output)
a[] == orig(a[])
this.output == null
a[] elements >= 0.0
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTestBase.getDimension():::ENTER
this.output[] == []
this.output[].getClass().getName() == []
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTestBase.getDimension():::EXIT
this.output == orig(this.output)
this.output[] == orig(this.output[])
this.output.getClass().getName() == orig(this.output.getClass().getName())
this.output[] == []
this.output[].getClass().getName() == []
return == 1
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTestBase.handleStep(double, double[], double[], boolean):::ENTER
y[] == [0.0]
y[] elements == 0.0
yDot[] == [0.0]
yDot[] elements == 0.0
size(y[]) == 1
size(yDot[]) == 1
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTestBase.handleStep(double, double[], double[], boolean):::EXIT
this.output == orig(this.output)
this.output.getClass().getName() == orig(this.output.getClass().getName())
y[] == orig(y[])
yDot[] == orig(yDot[])
size(this.output[])-1 == orig(size(this.output[]))
y[] == [0.0]
y[] elements == 0.0
yDot[] == [0.0]
yDot[] elements == 0.0
size(this.output[]) >= 1
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTestBase.init(double, double[], double):::ENTER
this.output[] == []
this.output[].getClass().getName() == []
y0[] == [0.0]
y0[] elements == 0.0
size(y0[]) == 1
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTestBase.init(double, double[], double):::EXIT
this.output == orig(this.output)
this.output[] == orig(this.output[])
this.output.getClass().getName() == orig(this.output.getClass().getName())
y0[] == orig(y0[])
this.output[] == []
this.output[].getClass().getName() == []
y0[] == [0.0]
y0[] elements == 0.0
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTestBase.testIncBoth():::ENTER
this.output == null
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTestBase.testIncBoth():::EXIT
this.output[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double]
size(this.output[]) == 21
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTestBase.testIncBothRev():::ENTER
this.output == null
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTestBase.testIncBothRev():::EXIT
this.output[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double]
size(this.output[]) == 21
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTestBase.testIncFirst():::ENTER
this.output == null
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTestBase.testIncFirst():::EXIT
this.output[].getClass().getName() one of { [java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double], [java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double] }
size(this.output[]) one of { 20, 21 }
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTestBase.testIncFirstRev():::ENTER
this.output == null
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTestBase.testIncFirstRev():::EXIT
this.output[].getClass().getName() one of { [java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double], [java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double] }
size(this.output[]) one of { 20, 21 }
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTestBase.testIncLast():::ENTER
this.output == null
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTestBase.testIncLast():::EXIT
this.output[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double]
size(this.output[]) == 20
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTestBase.testIncLastRev():::ENTER
this.output == null
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTestBase.testIncLastRev():::EXIT
this.output[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double]
size(this.output[]) == 20
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTestBase.testIncNeither():::ENTER
this.output == null
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTestBase.testIncNeither():::EXIT
this.output[].getClass().getName() one of { [java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double], [java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double] }
size(this.output[]) one of { 19, 20 }
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTestBase.testIncNeitherRev():::ENTER
this.output == null
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTestBase.testIncNeitherRev():::EXIT
this.output[].getClass().getName() one of { [java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double], [java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double] }
size(this.output[]) one of { 19, 20 }
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTestBase.testMulBoth():::ENTER
this.output == null
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTestBase.testMulBoth():::EXIT
this.output[].getClass().getName() one of { [java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double], [java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double] }
size(this.output[]) one of { 21, 22 }
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTestBase.testMulBothRev():::ENTER
this.output == null
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTestBase.testMulBothRev():::EXIT
this.output[].getClass().getName() one of { [java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double], [java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double] }
size(this.output[]) one of { 21, 22 }
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTestBase.testMulFirst():::ENTER
this.output == null
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTestBase.testMulFirst():::EXIT
this.output[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double]
size(this.output[]) == 21
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTestBase.testMulFirstRev():::ENTER
this.output == null
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTestBase.testMulFirstRev():::EXIT
this.output[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double]
size(this.output[]) == 21
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTestBase.testMulLast():::ENTER
this.output == null
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTestBase.testMulLast():::EXIT
this.output[].getClass().getName() one of { [java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double], [java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double] }
size(this.output[]) one of { 20, 21 }
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTestBase.testMulLastRev():::ENTER
this.output == null
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTestBase.testMulLastRev():::EXIT
this.output[].getClass().getName() one of { [java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double], [java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double] }
size(this.output[]) one of { 20, 21 }
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTestBase.testMulNeither():::ENTER
this.output == null
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTestBase.testMulNeither():::EXIT
this.output[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double]
size(this.output[]) == 20
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTestBase.testMulNeitherRev():::ENTER
this.output == null
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerOutputTestBase.testMulNeitherRev():::EXIT
this.output[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double]
size(this.output[]) == 20
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerTest$1:::OBJECT
this has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.e == 0.9
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y[] elements == 0.0
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.n == 4
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.calls >= 0
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.t0 == 0.0
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y0 has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.t1 == 20.0
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.errorScale has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.errorScale[] elements == 1.0
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.integ has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.integ.getClass().getName() == org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.class
size(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y[]) == 4
size(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y0[]) == 4
size(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerTest$1.(org.apache.commons.math3.ode.sampling.StepNormalizerTest):::ENTER
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.e == 0.9
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y[] elements == 0.0
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.n == 4
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.calls == 0
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.t0 == 0.0
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y0 has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.t1 == 20.0
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.errorScale has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.errorScale[] elements == 1.0
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.integ has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.integ.getClass().getName() == org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.class
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.lastSeen == false
size(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y[]) == 4
size(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y0[]) == 4
size(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerTest$1.(org.apache.commons.math3.ode.sampling.StepNormalizerTest):::EXIT
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.e == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.e)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y[] == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y[])
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.n == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.n)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.calls == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.calls)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.t0 == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.t0)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y0 == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y0)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y0[] == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y0[])
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.t1 == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.t1)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.errorScale == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.errorScale)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.errorScale[] == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.errorScale[])
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.integ == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.integ)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.integ.getClass().getName() == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.integ.getClass().getName())
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.lastSeen == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.lastSeen)
this.firstCall == true
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.calls == 0
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.lastSeen == false
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerTest$1.handleStep(double, double[], double[], boolean):::ENTER
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.lastSeen == false
y has only one value
yDot has only one value
size(y[]) == 4
size(yDot[]) == 4
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerTest$1.handleStep(double, double[], double[], boolean):::EXIT
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.e == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.e)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y[] == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y[])
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.n == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.n)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.calls == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.calls)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.t0 == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.t0)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y0 == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y0)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y0[] == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y0[])
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.t1 == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.t1)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.errorScale == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.errorScale)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.errorScale[] == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.errorScale[])
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.integ == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.integ)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.integ.getClass().getName() == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.integ.getClass().getName())
y[] == orig(y[])
yDot[] == orig(yDot[])
this.firstCall == false
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerTest$1.init(double, double[], double):::ENTER
this.firstCall == true
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.calls == 0
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.lastSeen == false
t0 == 0.0
y0 has only one value
y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
t == 20.0
size(y0[]) == 4
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerTest$1.init(double, double[], double):::EXIT
this.firstCall == orig(this.firstCall)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.e == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.e)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y[] == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y[])
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.n == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.n)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.calls == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.calls)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.t0 == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.t0)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y0 == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y0)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y0[] == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y0[])
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.t1 == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.t1)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.errorScale == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.errorScale)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.errorScale[] == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.errorScale[])
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.integ == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.integ)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.integ.getClass().getName() == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.integ.getClass().getName())
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.lastSeen == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.lastSeen)
y0[] == orig(y0[])
this.firstCall == true
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.calls == 0
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.lastSeen == false
y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerTest$2:::OBJECT
this has only one value
this.val$range == 20.0
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.e == 0.9
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y[] elements == 0.0
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.n == 4
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.calls >= 0
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.t0 == 0.0
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y0 has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.t1 == 20.0
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.errorScale has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.errorScale[] elements == 1.0
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.integ has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.integ.getClass().getName() == org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.class
size(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y[]) == 4
size(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y0[]) == 4
size(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerTest$2.(org.apache.commons.math3.ode.sampling.StepNormalizerTest, double):::ENTER
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.e == 0.9
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y[] elements == 0.0
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.n == 4
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.calls == 0
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.t0 == 0.0
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y0 has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.t1 == 20.0
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.errorScale has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.errorScale[] elements == 1.0
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.integ has only one value
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.integ.getClass().getName() == org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.class
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.lastSeen == false
$hidden$2 == 20.0
size(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y[]) == 4
size(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y0[]) == 4
size(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerTest$2.(org.apache.commons.math3.ode.sampling.StepNormalizerTest, double):::EXIT
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.e == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.e)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y[] == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y[])
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.n == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.n)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.calls == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.calls)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.t0 == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.t0)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y0 == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y0)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y0[] == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y0[])
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.t1 == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.t1)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.errorScale == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.errorScale)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.errorScale[] == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.errorScale[])
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.integ == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.integ)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.integ.getClass().getName() == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.integ.getClass().getName())
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.lastSeen == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.lastSeen)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.calls == 0
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.lastSeen == false
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerTest$2.handleStep(double, double[], double[], boolean):::ENTER
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.lastSeen == false
y has only one value
yDot has only one value
size(y[]) == 4
size(yDot[]) == 4
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerTest$2.handleStep(double, double[], double[], boolean):::EXIT
this.val$range == orig(this.val$range)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.e == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.e)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y[] == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y[])
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.n == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.n)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.calls == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.calls)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.t0 == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.t0)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y0 == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y0)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y0[] == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y0[])
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.t1 == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.t1)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.errorScale == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.errorScale)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.errorScale[] == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.errorScale[])
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.integ == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.integ)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.integ.getClass().getName() == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.integ.getClass().getName())
y[] == orig(y[])
yDot[] == orig(yDot[])
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerTest$2.init(double, double[], double):::ENTER
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.calls == 0
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.lastSeen == false
t0 == 0.0
y0 has only one value
y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
t == 20.0
size(y0[]) == 4
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerTest$2.init(double, double[], double):::EXIT
this.val$range == orig(this.val$range)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.e == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.e)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y[] == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y[])
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.n == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.n)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.calls == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.calls)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.t0 == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.t0)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y0 == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y0)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y0[] == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.y0[])
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.t1 == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.t1)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.errorScale == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.errorScale)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.errorScale[] == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.errorScale[])
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.integ == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.integ)
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.integ.getClass().getName() == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.integ.getClass().getName())
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.lastSeen == orig(org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.lastSeen)
y0[] == orig(y0[])
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.pb.calls == 0
org.apache.commons.math3.ode.sampling.StepNormalizerTest.this.lastSeen == false
y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerTest:::OBJECT
this.pb.e == 0.9
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.n == 4
this.pb.calls one of { 0, 242, 2198 }
this.pb.t0 == 0.0
this.pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
this.pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
this.pb.t1 == 20.0
this.pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
this.pb.errorScale[] elements == 1.0
this.integ.getClass().getName() == org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator.class
size(this.pb.y[]) == 4
size(this.pb.y0[]) == 4
size(this.pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerTest.StepNormalizerTest():::EXIT
this.pb == null
this.integ == null
this.lastSeen == false
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerTest.checkValue(double, double):::ENTER
this.pb.calls one of { 242, 2198 }
value one of { 0.0, 19.047619047619047, 20.0 }
reference one of { 0.0, 19.047619047619047, 20.0 }
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerTest.checkValue(double, double):::EXIT
this.pb == orig(this.pb)
this.pb.e == orig(this.pb.e)
this.pb.y == orig(this.pb.y)
this.pb.y[] == orig(this.pb.y[])
this.pb.n == orig(this.pb.n)
this.pb.calls == orig(this.pb.calls)
this.pb.t0 == orig(this.pb.t0)
this.pb.y0 == orig(this.pb.y0)
this.pb.y0[] == orig(this.pb.y0[])
this.pb.t1 == orig(this.pb.t1)
this.pb.errorScale == orig(this.pb.errorScale)
this.pb.errorScale[] == orig(this.pb.errorScale[])
this.integ == orig(this.integ)
this.integ.getClass().getName() == orig(this.integ.getClass().getName())
this.lastSeen == orig(this.lastSeen)
this.pb.calls one of { 242, 2198 }
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerTest.setLastSeen(boolean):::ENTER
this.pb.calls one of { 0, 2198 }
this.lastSeen == false
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerTest.setLastSeen(boolean):::EXIT
this.pb == orig(this.pb)
this.pb.e == orig(this.pb.e)
this.pb.y == orig(this.pb.y)
this.pb.y[] == orig(this.pb.y[])
this.pb.n == orig(this.pb.n)
this.pb.calls == orig(this.pb.calls)
this.pb.t0 == orig(this.pb.t0)
this.pb.y0 == orig(this.pb.y0)
this.pb.y0[] == orig(this.pb.y0[])
this.pb.t1 == orig(this.pb.t1)
this.pb.errorScale == orig(this.pb.errorScale)
this.pb.errorScale[] == orig(this.pb.errorScale[])
this.integ == orig(this.integ)
this.integ.getClass().getName() == orig(this.integ.getClass().getName())
this.pb.calls one of { 0, 2198 }
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerTest.setUp():::ENTER
this.pb == null
this.integ == null
this.lastSeen == false
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerTest.setUp():::EXIT
this.lastSeen == orig(this.lastSeen)
this.pb.calls == 0
this.lastSeen == false
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerTest.tearDown():::ENTER
this.pb.calls == 2198
this.lastSeen == true
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerTest.tearDown():::EXIT
this.lastSeen == orig(this.lastSeen)
this.pb == null
this.integ == null
this.lastSeen == true
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerTest.testBeforeEnd():::ENTER
this has only one value
this.pb has only one value
this.pb.y has only one value
this.pb.calls == 0
this.pb.y0 has only one value
this.pb.errorScale has only one value
this.integ has only one value
this.lastSeen == false
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerTest.testBeforeEnd():::EXIT
this.pb == orig(this.pb)
this.pb.e == orig(this.pb.e)
this.pb.y == orig(this.pb.y)
this.pb.y[] == orig(this.pb.y[])
this.pb.n == orig(this.pb.n)
this.pb.t0 == orig(this.pb.t0)
this.pb.y0 == orig(this.pb.y0)
this.pb.y0[] == orig(this.pb.y0[])
this.pb.t1 == orig(this.pb.t1)
this.pb.errorScale == orig(this.pb.errorScale)
this.pb.errorScale[] == orig(this.pb.errorScale[])
this.integ == orig(this.integ)
this.integ.getClass().getName() == orig(this.integ.getClass().getName())
this.pb has only one value
this.pb.y has only one value
this.pb.calls == 2198
this.pb.y0 has only one value
this.pb.errorScale has only one value
this.integ has only one value
this.lastSeen == true
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerTest.testBoundaries():::ENTER
this has only one value
this.pb has only one value
this.pb.y has only one value
this.pb.calls == 0
this.pb.y0 has only one value
this.pb.errorScale has only one value
this.integ has only one value
this.lastSeen == false
===========================================================================
org.apache.commons.math3.ode.sampling.StepNormalizerTest.testBoundaries():::EXIT
this.pb == orig(this.pb)
this.pb.e == orig(this.pb.e)
this.pb.y == orig(this.pb.y)
this.pb.y[] == orig(this.pb.y[])
this.pb.n == orig(this.pb.n)
this.pb.t0 == orig(this.pb.t0)
this.pb.y0 == orig(this.pb.y0)
this.pb.y0[] == orig(this.pb.y0[])
this.pb.t1 == orig(this.pb.t1)
this.pb.errorScale == orig(this.pb.errorScale)
this.pb.errorScale[] == orig(this.pb.errorScale[])
this.integ == orig(this.integ)
this.integ.getClass().getName() == orig(this.integ.getClass().getName())
this.pb has only one value
this.pb.y has only one value
this.pb.calls == 2198
this.pb.y0 has only one value
this.pb.errorScale has only one value
this.integ has only one value
this.lastSeen == true
===========================================================================
org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic:::OBJECT
this.storedData == null
===========================================================================
org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic.AbstractStorelessUnivariateStatistic():::EXIT
===========================================================================
org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic:::OBJECT
this.storedData == null
===========================================================================
org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic.AbstractUnivariateStatistic():::EXIT
===========================================================================
org.apache.commons.math3.stat.descriptive.SummaryStatistics:::CLASS
===========================================================================
org.apache.commons.math3.stat.descriptive.SummaryStatistics:::OBJECT
this.n >= 0
this.secondMoment.m2 >= 0.0
this.secondMoment.n >= 0
this.secondMoment.storedData == null
this.sum.n >= 0
this.sum.storedData == null
this.sumsq.n >= 0
this.sumsq.value >= 0.0
this.sumsq.storedData == null
this.min.n >= 0
this.min.storedData == null
this.max.n >= 0
this.max.storedData == null
this.sumLog.n >= 0
this.sumLog.storedData == null
this.geoMean.sumOfLogs.getClass().getName() == org.apache.commons.math3.stat.descriptive.summary.SumOfLogs.class
this.geoMean.storedData == null
this.mean.moment.n >= 0
this.mean.moment.storedData == null
this.mean.incMoment == false
this.mean.storedData == null
this.variance.moment.m2 >= 0.0
this.variance.moment.n >= 0
this.variance.moment.storedData == null
this.variance.incMoment == false
this.variance.isBiasCorrected == true
this.variance.storedData == null
this.sumImpl.getClass().getName() == org.apache.commons.math3.stat.descriptive.summary.Sum.class
this.sumsqImpl.getClass().getName() == org.apache.commons.math3.stat.descriptive.summary.SumOfSquares.class
this.minImpl.getClass().getName() == org.apache.commons.math3.stat.descriptive.rank.Min.class
this.maxImpl.getClass().getName() == org.apache.commons.math3.stat.descriptive.rank.Max.class
this.sumLogImpl.getClass().getName() == org.apache.commons.math3.stat.descriptive.summary.SumOfLogs.class
this.geoMeanImpl.getClass().getName() == org.apache.commons.math3.stat.descriptive.moment.GeometricMean.class
this.meanImpl.getClass().getName() == org.apache.commons.math3.stat.descriptive.moment.Mean.class
this.varianceImpl.getClass().getName() == org.apache.commons.math3.stat.descriptive.moment.Variance.class
===========================================================================
org.apache.commons.math3.stat.descriptive.SummaryStatistics.SummaryStatistics():::EXIT
this.n == 0
this.secondMoment.m2 == Double.NaN
this.secondMoment.n == 0
this.secondMoment.m1 == Double.NaN
this.secondMoment.dev == Double.NaN
this.secondMoment.nDev == Double.NaN
this.sum.n == 0
this.sum.value == 0.0
this.sumsq.n == 0
this.sumsq.value == 0.0
this.min.n == 0
this.min.value == Double.NaN
this.max.n == 0
this.max.value == Double.NaN
this.sumLog.n == 0
this.sumLog.value == 0.0
this.mean.moment.n == 0
this.mean.moment.m1 == Double.NaN
this.mean.moment.dev == Double.NaN
this.mean.moment.nDev == Double.NaN
this.variance.moment.m2 == Double.NaN
this.variance.moment.n == 0
this.variance.moment.m1 == Double.NaN
this.variance.moment.dev == Double.NaN
this.variance.moment.nDev == Double.NaN
===========================================================================
org.apache.commons.math3.stat.descriptive.SummaryStatistics.addValue(double):::ENTER
===========================================================================
org.apache.commons.math3.stat.descriptive.SummaryStatistics.addValue(double):::EXIT
this.secondMoment == orig(this.secondMoment)
this.secondMoment.storedData == orig(this.secondMoment.storedData)
this.sum == orig(this.sum)
this.sum.storedData == orig(this.sum.storedData)
this.sumsq == orig(this.sumsq)
this.sumsq.storedData == orig(this.sumsq.storedData)
this.min == orig(this.min)
this.min.storedData == orig(this.min.storedData)
this.max == orig(this.max)
this.max.storedData == orig(this.max.storedData)
this.sumLog == orig(this.sumLog)
this.sumLog.storedData == orig(this.sumLog.storedData)
this.geoMean == orig(this.geoMean)
this.geoMean.sumOfLogs == orig(this.geoMean.sumOfLogs)
this.geoMean.sumOfLogs.getClass().getName() == orig(this.geoMean.sumOfLogs.getClass().getName())
this.geoMean.storedData == orig(this.geoMean.storedData)
this.mean == orig(this.mean)
this.mean.moment == orig(this.mean.moment)
this.mean.moment.storedData == orig(this.mean.moment.storedData)
this.mean.incMoment == orig(this.mean.incMoment)
this.mean.storedData == orig(this.mean.storedData)
this.variance == orig(this.variance)
this.variance.moment == orig(this.variance.moment)
this.variance.moment.storedData == orig(this.variance.moment.storedData)
this.variance.incMoment == orig(this.variance.incMoment)
this.variance.isBiasCorrected == orig(this.variance.isBiasCorrected)
this.variance.storedData == orig(this.variance.storedData)
this.sumImpl == orig(this.sumImpl)
this.sumImpl.getClass().getName() == orig(this.sumImpl.getClass().getName())
this.sumsqImpl == orig(this.sumsqImpl)
this.sumsqImpl.getClass().getName() == orig(this.sumsqImpl.getClass().getName())
this.minImpl == orig(this.minImpl)
this.minImpl.getClass().getName() == orig(this.minImpl.getClass().getName())
this.maxImpl == orig(this.maxImpl)
this.maxImpl.getClass().getName() == orig(this.maxImpl.getClass().getName())
this.sumLogImpl == orig(this.sumLogImpl)
this.sumLogImpl.getClass().getName() == orig(this.sumLogImpl.getClass().getName())
this.geoMeanImpl == orig(this.geoMeanImpl)
this.geoMeanImpl.getClass().getName() == orig(this.geoMeanImpl.getClass().getName())
this.meanImpl == orig(this.meanImpl)
this.meanImpl.getClass().getName() == orig(this.meanImpl.getClass().getName())
this.varianceImpl == orig(this.varianceImpl)
this.varianceImpl.getClass().getName() == orig(this.varianceImpl.getClass().getName())
this.n >= 1
this.secondMoment.n >= 1
this.sum.n >= 1
this.sumsq.n >= 1
this.min.n >= 1
this.max.n >= 1
this.sumLog.n >= 1
this.mean.moment.n >= 1
this.variance.moment.n >= 1
this.n - orig(this.n) - 1 == 0
this.secondMoment.n - orig(this.secondMoment.n) - 1 == 0
this.secondMoment.nDev != orig(this.secondMoment.nDev)
this.sum.n - orig(this.sum.n) - 1 == 0
this.sumsq.n - orig(this.sumsq.n) - 1 == 0
this.sumsq.value >= orig(this.sumsq.value)
this.min.n - orig(this.min.n) - 1 == 0
this.max.n - orig(this.max.n) - 1 == 0
this.sumLog.n - orig(this.sumLog.n) - 1 == 0
this.sumLog.value != orig(this.sumLog.value)
this.mean.moment.n - orig(this.mean.moment.n) - 1 == 0
this.mean.moment.nDev != orig(this.mean.moment.nDev)
this.variance.moment.n - orig(this.variance.moment.n) - 1 == 0
this.variance.moment.nDev != orig(this.variance.moment.nDev)
===========================================================================
org.apache.commons.math3.stat.descriptive.SummaryStatistics.getMax():::ENTER
this.n == 201
this.secondMoment.n == 201
this.sum.n == 201
this.sumsq.n == 201
this.min.n == 201
this.max.n == 201
this.sumLog.n == 201
this.sumLog.value == Double.NaN
this.mean.moment.n == 201
this.variance.moment.n == 201
===========================================================================
org.apache.commons.math3.stat.descriptive.SummaryStatistics.getMax():::EXIT
this.n == orig(this.n)
this.secondMoment == orig(this.secondMoment)
this.secondMoment.m2 == orig(this.secondMoment.m2)
this.secondMoment.n == orig(this.secondMoment.n)
this.secondMoment.m1 == orig(this.secondMoment.m1)
this.secondMoment.dev == orig(this.secondMoment.dev)
this.secondMoment.nDev == orig(this.secondMoment.nDev)
this.secondMoment.storedData == orig(this.secondMoment.storedData)
this.sum == orig(this.sum)
this.sum.n == orig(this.sum.n)
this.sum.value == orig(this.sum.value)
this.sum.storedData == orig(this.sum.storedData)
this.sumsq == orig(this.sumsq)
this.sumsq.n == orig(this.sumsq.n)
this.sumsq.value == orig(this.sumsq.value)
this.sumsq.storedData == orig(this.sumsq.storedData)
this.min == orig(this.min)
this.min.n == orig(this.min.n)
this.min.value == orig(this.min.value)
this.min.storedData == orig(this.min.storedData)
this.max == orig(this.max)
this.max.n == orig(this.max.n)
this.max.value == orig(this.max.value)
this.max.storedData == orig(this.max.storedData)
this.sumLog == orig(this.sumLog)
this.sumLog.n == orig(this.sumLog.n)
this.sumLog.storedData == orig(this.sumLog.storedData)
this.geoMean == orig(this.geoMean)
this.geoMean.sumOfLogs == orig(this.geoMean.sumOfLogs)
this.geoMean.sumOfLogs.getClass().getName() == orig(this.geoMean.sumOfLogs.getClass().getName())
this.geoMean.storedData == orig(this.geoMean.storedData)
this.mean == orig(this.mean)
this.mean.moment == orig(this.mean.moment)
this.mean.moment.n == orig(this.mean.moment.n)
this.mean.moment.m1 == orig(this.mean.moment.m1)
this.mean.moment.dev == orig(this.mean.moment.dev)
this.mean.moment.nDev == orig(this.mean.moment.nDev)
this.mean.moment.storedData == orig(this.mean.moment.storedData)
this.mean.incMoment == orig(this.mean.incMoment)
this.mean.storedData == orig(this.mean.storedData)
this.variance == orig(this.variance)
this.variance.moment == orig(this.variance.moment)
this.variance.moment.m2 == orig(this.variance.moment.m2)
this.variance.moment.n == orig(this.variance.moment.n)
this.variance.moment.m1 == orig(this.variance.moment.m1)
this.variance.moment.dev == orig(this.variance.moment.dev)
this.variance.moment.nDev == orig(this.variance.moment.nDev)
this.variance.moment.storedData == orig(this.variance.moment.storedData)
this.variance.incMoment == orig(this.variance.incMoment)
this.variance.isBiasCorrected == orig(this.variance.isBiasCorrected)
this.variance.storedData == orig(this.variance.storedData)
this.sumImpl == orig(this.sumImpl)
this.sumImpl.getClass().getName() == orig(this.sumImpl.getClass().getName())
this.sumsqImpl == orig(this.sumsqImpl)
this.sumsqImpl.getClass().getName() == orig(this.sumsqImpl.getClass().getName())
this.minImpl == orig(this.minImpl)
this.minImpl.getClass().getName() == orig(this.minImpl.getClass().getName())
this.maxImpl == orig(this.maxImpl)
this.maxImpl.getClass().getName() == orig(this.maxImpl.getClass().getName())
this.sumLogImpl == orig(this.sumLogImpl)
this.sumLogImpl.getClass().getName() == orig(this.sumLogImpl.getClass().getName())
this.geoMeanImpl == orig(this.geoMeanImpl)
this.geoMeanImpl.getClass().getName() == orig(this.geoMeanImpl.getClass().getName())
this.meanImpl == orig(this.meanImpl)
this.meanImpl.getClass().getName() == orig(this.meanImpl.getClass().getName())
this.varianceImpl == orig(this.varianceImpl)
this.varianceImpl.getClass().getName() == orig(this.varianceImpl.getClass().getName())
this.n == 201
this.secondMoment.n == 201
this.sum.n == 201
this.sumsq.n == 201
this.min.n == 201
this.max.n == 201
this.sumLog.n == 201
this.sumLog.value == Double.NaN
this.mean.moment.n == 201
this.variance.moment.n == 201
===========================================================================
org.apache.commons.math3.stat.descriptive.SummaryStatistics.getMin():::ENTER
this.n == 201
this.secondMoment.n == 201
this.sum.n == 201
this.sumsq.n == 201
this.min.n == 201
this.max.n == 201
this.sumLog.n == 201
this.sumLog.value == Double.NaN
this.mean.moment.n == 201
this.variance.moment.n == 201
===========================================================================
org.apache.commons.math3.stat.descriptive.SummaryStatistics.getMin():::EXIT
this.n == orig(this.n)
this.secondMoment == orig(this.secondMoment)
this.secondMoment.m2 == orig(this.secondMoment.m2)
this.secondMoment.n == orig(this.secondMoment.n)
this.secondMoment.m1 == orig(this.secondMoment.m1)
this.secondMoment.dev == orig(this.secondMoment.dev)
this.secondMoment.nDev == orig(this.secondMoment.nDev)
this.secondMoment.storedData == orig(this.secondMoment.storedData)
this.sum == orig(this.sum)
this.sum.n == orig(this.sum.n)
this.sum.value == orig(this.sum.value)
this.sum.storedData == orig(this.sum.storedData)
this.sumsq == orig(this.sumsq)
this.sumsq.n == orig(this.sumsq.n)
this.sumsq.value == orig(this.sumsq.value)
this.sumsq.storedData == orig(this.sumsq.storedData)
this.min == orig(this.min)
this.min.n == orig(this.min.n)
this.min.value == orig(this.min.value)
this.min.storedData == orig(this.min.storedData)
this.max == orig(this.max)
this.max.n == orig(this.max.n)
this.max.value == orig(this.max.value)
this.max.storedData == orig(this.max.storedData)
this.sumLog == orig(this.sumLog)
this.sumLog.n == orig(this.sumLog.n)
this.sumLog.storedData == orig(this.sumLog.storedData)
this.geoMean == orig(this.geoMean)
this.geoMean.sumOfLogs == orig(this.geoMean.sumOfLogs)
this.geoMean.sumOfLogs.getClass().getName() == orig(this.geoMean.sumOfLogs.getClass().getName())
this.geoMean.storedData == orig(this.geoMean.storedData)
this.mean == orig(this.mean)
this.mean.moment == orig(this.mean.moment)
this.mean.moment.n == orig(this.mean.moment.n)
this.mean.moment.m1 == orig(this.mean.moment.m1)
this.mean.moment.dev == orig(this.mean.moment.dev)
this.mean.moment.nDev == orig(this.mean.moment.nDev)
this.mean.moment.storedData == orig(this.mean.moment.storedData)
this.mean.incMoment == orig(this.mean.incMoment)
this.mean.storedData == orig(this.mean.storedData)
this.variance == orig(this.variance)
this.variance.moment == orig(this.variance.moment)
this.variance.moment.m2 == orig(this.variance.moment.m2)
this.variance.moment.n == orig(this.variance.moment.n)
this.variance.moment.m1 == orig(this.variance.moment.m1)
this.variance.moment.dev == orig(this.variance.moment.dev)
this.variance.moment.nDev == orig(this.variance.moment.nDev)
this.variance.moment.storedData == orig(this.variance.moment.storedData)
this.variance.incMoment == orig(this.variance.incMoment)
this.variance.isBiasCorrected == orig(this.variance.isBiasCorrected)
this.variance.storedData == orig(this.variance.storedData)
this.sumImpl == orig(this.sumImpl)
this.sumImpl.getClass().getName() == orig(this.sumImpl.getClass().getName())
this.sumsqImpl == orig(this.sumsqImpl)
this.sumsqImpl.getClass().getName() == orig(this.sumsqImpl.getClass().getName())
this.minImpl == orig(this.minImpl)
this.minImpl.getClass().getName() == orig(this.minImpl.getClass().getName())
this.maxImpl == orig(this.maxImpl)
this.maxImpl.getClass().getName() == orig(this.maxImpl.getClass().getName())
this.sumLogImpl == orig(this.sumLogImpl)
this.sumLogImpl.getClass().getName() == orig(this.sumLogImpl.getClass().getName())
this.geoMeanImpl == orig(this.geoMeanImpl)
this.geoMeanImpl.getClass().getName() == orig(this.geoMeanImpl.getClass().getName())
this.meanImpl == orig(this.meanImpl)
this.meanImpl.getClass().getName() == orig(this.meanImpl.getClass().getName())
this.varianceImpl == orig(this.varianceImpl)
this.varianceImpl.getClass().getName() == orig(this.varianceImpl.getClass().getName())
this.n == 201
this.secondMoment.n == 201
this.sum.n == 201
this.sumsq.n == 201
this.min.n == 201
this.max.n == 201
this.sumLog.n == 201
this.sumLog.value == Double.NaN
this.mean.moment.n == 201
this.variance.moment.n == 201
===========================================================================
org.apache.commons.math3.stat.descriptive.SummaryStatistics.getN():::ENTER
this.n == 201
this.secondMoment.n == 201
this.sum.n == 201
this.sumsq.n == 201
this.min.n == 201
this.max.n == 201
this.sumLog.n == 201
this.sumLog.value == Double.NaN
this.mean.moment.n == 201
this.variance.moment.n == 201
===========================================================================
org.apache.commons.math3.stat.descriptive.SummaryStatistics.getN():::EXIT
this.n == orig(this.n)
this.secondMoment == orig(this.secondMoment)
this.secondMoment.m2 == orig(this.secondMoment.m2)
this.secondMoment.n == orig(this.secondMoment.n)
this.secondMoment.m1 == orig(this.secondMoment.m1)
this.secondMoment.dev == orig(this.secondMoment.dev)
this.secondMoment.nDev == orig(this.secondMoment.nDev)
this.secondMoment.storedData == orig(this.secondMoment.storedData)
this.sum == orig(this.sum)
this.sum.n == orig(this.sum.n)
this.sum.value == orig(this.sum.value)
this.sum.storedData == orig(this.sum.storedData)
this.sumsq == orig(this.sumsq)
this.sumsq.n == orig(this.sumsq.n)
this.sumsq.value == orig(this.sumsq.value)
this.sumsq.storedData == orig(this.sumsq.storedData)
this.min == orig(this.min)
this.min.n == orig(this.min.n)
this.min.value == orig(this.min.value)
this.min.storedData == orig(this.min.storedData)
this.max == orig(this.max)
this.max.n == orig(this.max.n)
this.max.value == orig(this.max.value)
this.max.storedData == orig(this.max.storedData)
this.sumLog == orig(this.sumLog)
this.sumLog.n == orig(this.sumLog.n)
this.sumLog.storedData == orig(this.sumLog.storedData)
this.geoMean == orig(this.geoMean)
this.geoMean.sumOfLogs == orig(this.geoMean.sumOfLogs)
this.geoMean.sumOfLogs.getClass().getName() == orig(this.geoMean.sumOfLogs.getClass().getName())
this.geoMean.storedData == orig(this.geoMean.storedData)
this.mean == orig(this.mean)
this.mean.moment == orig(this.mean.moment)
this.mean.moment.n == orig(this.mean.moment.n)
this.mean.moment.m1 == orig(this.mean.moment.m1)
this.mean.moment.dev == orig(this.mean.moment.dev)
this.mean.moment.nDev == orig(this.mean.moment.nDev)
this.mean.moment.storedData == orig(this.mean.moment.storedData)
this.mean.incMoment == orig(this.mean.incMoment)
this.mean.storedData == orig(this.mean.storedData)
this.variance == orig(this.variance)
this.variance.moment == orig(this.variance.moment)
this.variance.moment.m2 == orig(this.variance.moment.m2)
this.variance.moment.n == orig(this.variance.moment.n)
this.variance.moment.m1 == orig(this.variance.moment.m1)
this.variance.moment.dev == orig(this.variance.moment.dev)
this.variance.moment.nDev == orig(this.variance.moment.nDev)
this.variance.moment.storedData == orig(this.variance.moment.storedData)
this.variance.incMoment == orig(this.variance.incMoment)
this.variance.isBiasCorrected == orig(this.variance.isBiasCorrected)
this.variance.storedData == orig(this.variance.storedData)
this.sumImpl == orig(this.sumImpl)
this.sumImpl.getClass().getName() == orig(this.sumImpl.getClass().getName())
this.sumsqImpl == orig(this.sumsqImpl)
this.sumsqImpl.getClass().getName() == orig(this.sumsqImpl.getClass().getName())
this.minImpl == orig(this.minImpl)
this.minImpl.getClass().getName() == orig(this.minImpl.getClass().getName())
this.maxImpl == orig(this.maxImpl)
this.maxImpl.getClass().getName() == orig(this.maxImpl.getClass().getName())
this.sumLogImpl == orig(this.sumLogImpl)
this.sumLogImpl.getClass().getName() == orig(this.sumLogImpl.getClass().getName())
this.geoMeanImpl == orig(this.geoMeanImpl)
this.geoMeanImpl.getClass().getName() == orig(this.geoMeanImpl.getClass().getName())
this.meanImpl == orig(this.meanImpl)
this.meanImpl.getClass().getName() == orig(this.meanImpl.getClass().getName())
this.varianceImpl == orig(this.varianceImpl)
this.varianceImpl.getClass().getName() == orig(this.varianceImpl.getClass().getName())
this.n == 201
this.secondMoment.n == 201
this.sum.n == 201
this.sumsq.n == 201
this.min.n == 201
this.max.n == 201
this.sumLog.n == 201
this.sumLog.value == Double.NaN
this.mean.moment.n == 201
this.variance.moment.n == 201
return == 201
===========================================================================
org.apache.commons.math3.stat.descriptive.SummaryStatistics.getStandardDeviation():::ENTER
this.n == 201
this.secondMoment.n == 201
this.sum.n == 201
this.sumsq.n == 201
this.min.n == 201
this.max.n == 201
this.sumLog.n == 201
this.sumLog.value == Double.NaN
this.mean.moment.n == 201
this.variance.moment.n == 201
===========================================================================
org.apache.commons.math3.stat.descriptive.SummaryStatistics.getStandardDeviation():::EXIT
this.n == orig(this.n)
this.secondMoment == orig(this.secondMoment)
this.secondMoment.m2 == orig(this.secondMoment.m2)
this.secondMoment.n == orig(this.secondMoment.n)
this.secondMoment.m1 == orig(this.secondMoment.m1)
this.secondMoment.dev == orig(this.secondMoment.dev)
this.secondMoment.nDev == orig(this.secondMoment.nDev)
this.secondMoment.storedData == orig(this.secondMoment.storedData)
this.sum == orig(this.sum)
this.sum.n == orig(this.sum.n)
this.sum.value == orig(this.sum.value)
this.sum.storedData == orig(this.sum.storedData)
this.sumsq == orig(this.sumsq)
this.sumsq.n == orig(this.sumsq.n)
this.sumsq.value == orig(this.sumsq.value)
this.sumsq.storedData == orig(this.sumsq.storedData)
this.min == orig(this.min)
this.min.n == orig(this.min.n)
this.min.value == orig(this.min.value)
this.min.storedData == orig(this.min.storedData)
this.max == orig(this.max)
this.max.n == orig(this.max.n)
this.max.value == orig(this.max.value)
this.max.storedData == orig(this.max.storedData)
this.sumLog == orig(this.sumLog)
this.sumLog.n == orig(this.sumLog.n)
this.sumLog.storedData == orig(this.sumLog.storedData)
this.geoMean == orig(this.geoMean)
this.geoMean.sumOfLogs == orig(this.geoMean.sumOfLogs)
this.geoMean.sumOfLogs.getClass().getName() == orig(this.geoMean.sumOfLogs.getClass().getName())
this.geoMean.storedData == orig(this.geoMean.storedData)
this.mean == orig(this.mean)
this.mean.moment == orig(this.mean.moment)
this.mean.moment.n == orig(this.mean.moment.n)
this.mean.moment.m1 == orig(this.mean.moment.m1)
this.mean.moment.dev == orig(this.mean.moment.dev)
this.mean.moment.nDev == orig(this.mean.moment.nDev)
this.mean.moment.storedData == orig(this.mean.moment.storedData)
this.mean.incMoment == orig(this.mean.incMoment)
this.mean.storedData == orig(this.mean.storedData)
this.variance == orig(this.variance)
this.variance.moment == orig(this.variance.moment)
this.variance.moment.m2 == orig(this.variance.moment.m2)
this.variance.moment.n == orig(this.variance.moment.n)
this.variance.moment.m1 == orig(this.variance.moment.m1)
this.variance.moment.dev == orig(this.variance.moment.dev)
this.variance.moment.nDev == orig(this.variance.moment.nDev)
this.variance.moment.storedData == orig(this.variance.moment.storedData)
this.variance.incMoment == orig(this.variance.incMoment)
this.variance.isBiasCorrected == orig(this.variance.isBiasCorrected)
this.variance.storedData == orig(this.variance.storedData)
this.sumImpl == orig(this.sumImpl)
this.sumImpl.getClass().getName() == orig(this.sumImpl.getClass().getName())
this.sumsqImpl == orig(this.sumsqImpl)
this.sumsqImpl.getClass().getName() == orig(this.sumsqImpl.getClass().getName())
this.minImpl == orig(this.minImpl)
this.minImpl.getClass().getName() == orig(this.minImpl.getClass().getName())
this.maxImpl == orig(this.maxImpl)
this.maxImpl.getClass().getName() == orig(this.maxImpl.getClass().getName())
this.sumLogImpl == orig(this.sumLogImpl)
this.sumLogImpl.getClass().getName() == orig(this.sumLogImpl.getClass().getName())
this.geoMeanImpl == orig(this.geoMeanImpl)
this.geoMeanImpl.getClass().getName() == orig(this.geoMeanImpl.getClass().getName())
this.meanImpl == orig(this.meanImpl)
this.meanImpl.getClass().getName() == orig(this.meanImpl.getClass().getName())
this.varianceImpl == orig(this.varianceImpl)
this.varianceImpl.getClass().getName() == orig(this.varianceImpl.getClass().getName())
this.n == 201
this.secondMoment.n == 201
this.sum.n == 201
this.sumsq.n == 201
this.min.n == 201
this.max.n == 201
this.sumLog.n == 201
this.sumLog.value == Double.NaN
this.mean.moment.n == 201
this.variance.moment.n == 201
===========================================================================
org.apache.commons.math3.stat.descriptive.SummaryStatistics.getVariance():::ENTER
this.n == 201
this.secondMoment.n == 201
this.sum.n == 201
this.sumsq.n == 201
this.min.n == 201
this.max.n == 201
this.sumLog.n == 201
this.sumLog.value == Double.NaN
this.mean.moment.n == 201
this.variance.moment.n == 201
===========================================================================
org.apache.commons.math3.stat.descriptive.SummaryStatistics.getVariance():::EXIT
this.n == orig(this.n)
this.secondMoment == orig(this.secondMoment)
this.secondMoment.m2 == orig(this.secondMoment.m2)
this.secondMoment.n == orig(this.secondMoment.n)
this.secondMoment.m1 == orig(this.secondMoment.m1)
this.secondMoment.dev == orig(this.secondMoment.dev)
this.secondMoment.nDev == orig(this.secondMoment.nDev)
this.secondMoment.storedData == orig(this.secondMoment.storedData)
this.sum == orig(this.sum)
this.sum.n == orig(this.sum.n)
this.sum.value == orig(this.sum.value)
this.sum.storedData == orig(this.sum.storedData)
this.sumsq == orig(this.sumsq)
this.sumsq.n == orig(this.sumsq.n)
this.sumsq.value == orig(this.sumsq.value)
this.sumsq.storedData == orig(this.sumsq.storedData)
this.min == orig(this.min)
this.min.n == orig(this.min.n)
this.min.value == orig(this.min.value)
this.min.storedData == orig(this.min.storedData)
this.max == orig(this.max)
this.max.n == orig(this.max.n)
this.max.value == orig(this.max.value)
this.max.storedData == orig(this.max.storedData)
this.sumLog == orig(this.sumLog)
this.sumLog.n == orig(this.sumLog.n)
this.sumLog.storedData == orig(this.sumLog.storedData)
this.geoMean == orig(this.geoMean)
this.geoMean.sumOfLogs == orig(this.geoMean.sumOfLogs)
this.geoMean.sumOfLogs.getClass().getName() == orig(this.geoMean.sumOfLogs.getClass().getName())
this.geoMean.storedData == orig(this.geoMean.storedData)
this.mean == orig(this.mean)
this.mean.moment == orig(this.mean.moment)
this.mean.moment.n == orig(this.mean.moment.n)
this.mean.moment.m1 == orig(this.mean.moment.m1)
this.mean.moment.dev == orig(this.mean.moment.dev)
this.mean.moment.nDev == orig(this.mean.moment.nDev)
this.mean.moment.storedData == orig(this.mean.moment.storedData)
this.mean.incMoment == orig(this.mean.incMoment)
this.mean.storedData == orig(this.mean.storedData)
this.variance == orig(this.variance)
this.variance.moment == orig(this.variance.moment)
this.variance.moment.m2 == orig(this.variance.moment.m2)
this.variance.moment.n == orig(this.variance.moment.n)
this.variance.moment.m1 == orig(this.variance.moment.m1)
this.variance.moment.dev == orig(this.variance.moment.dev)
this.variance.moment.nDev == orig(this.variance.moment.nDev)
this.variance.moment.storedData == orig(this.variance.moment.storedData)
this.variance.incMoment == orig(this.variance.incMoment)
this.variance.isBiasCorrected == orig(this.variance.isBiasCorrected)
this.variance.storedData == orig(this.variance.storedData)
this.sumImpl == orig(this.sumImpl)
this.sumImpl.getClass().getName() == orig(this.sumImpl.getClass().getName())
this.sumsqImpl == orig(this.sumsqImpl)
this.sumsqImpl.getClass().getName() == orig(this.sumsqImpl.getClass().getName())
this.minImpl == orig(this.minImpl)
this.minImpl.getClass().getName() == orig(this.minImpl.getClass().getName())
this.maxImpl == orig(this.maxImpl)
this.maxImpl.getClass().getName() == orig(this.maxImpl.getClass().getName())
this.sumLogImpl == orig(this.sumLogImpl)
this.sumLogImpl.getClass().getName() == orig(this.sumLogImpl.getClass().getName())
this.geoMeanImpl == orig(this.geoMeanImpl)
this.geoMeanImpl.getClass().getName() == orig(this.geoMeanImpl.getClass().getName())
this.meanImpl == orig(this.meanImpl)
this.meanImpl.getClass().getName() == orig(this.meanImpl.getClass().getName())
this.varianceImpl == orig(this.varianceImpl)
this.varianceImpl.getClass().getName() == orig(this.varianceImpl.getClass().getName())
this.n == 201
this.secondMoment.n == 201
this.sum.n == 201
this.sumsq.n == 201
this.min.n == 201
this.max.n == 201
this.sumLog.n == 201
this.sumLog.value == Double.NaN
this.mean.moment.n == 201
this.variance.moment.n == 201
===========================================================================
org.apache.commons.math3.stat.descriptive.moment.FirstMoment:::CLASS
===========================================================================
org.apache.commons.math3.stat.descriptive.moment.FirstMoment:::OBJECT
this.n >= 0
this.storedData == null
===========================================================================
org.apache.commons.math3.stat.descriptive.moment.FirstMoment.FirstMoment():::EXIT
this.n == 0
this.m1 == Double.NaN
this.dev == Double.NaN
this.nDev == Double.NaN
===========================================================================
org.apache.commons.math3.stat.descriptive.moment.FirstMoment.increment(double):::ENTER
===========================================================================
org.apache.commons.math3.stat.descriptive.moment.FirstMoment.increment(double):::EXIT
this.storedData == orig(this.storedData)
this.n >= 1
this.n - orig(this.n) - 1 == 0
this.nDev != orig(this.nDev)
===========================================================================
org.apache.commons.math3.stat.descriptive.moment.GeometricMean:::CLASS
===========================================================================
org.apache.commons.math3.stat.descriptive.moment.GeometricMean:::OBJECT
this.sumOfLogs.getClass().getName() == org.apache.commons.math3.stat.descriptive.summary.SumOfLogs.class
this.storedData == null
===========================================================================
org.apache.commons.math3.stat.descriptive.moment.GeometricMean.GeometricMean(org.apache.commons.math3.stat.descriptive.summary.SumOfLogs):::ENTER
sumOfLogs.n == 0
sumOfLogs.value == 0.0
sumOfLogs.storedData == null
===========================================================================
org.apache.commons.math3.stat.descriptive.moment.GeometricMean.GeometricMean(org.apache.commons.math3.stat.descriptive.summary.SumOfLogs):::EXIT
sumOfLogs.n == orig(sumOfLogs.n)
sumOfLogs.value == orig(sumOfLogs.value)
sumOfLogs.storedData == orig(sumOfLogs.storedData)
sumOfLogs.n == 0
sumOfLogs.value == 0.0
sumOfLogs.storedData == null
===========================================================================
org.apache.commons.math3.stat.descriptive.moment.Mean:::CLASS
===========================================================================
org.apache.commons.math3.stat.descriptive.moment.Mean:::OBJECT
this.moment.n == 0
this.moment.m1 == Double.NaN
this.moment.dev == Double.NaN
this.moment.nDev == Double.NaN
this.moment.storedData == null
this.incMoment == false
this.storedData == null
===========================================================================
org.apache.commons.math3.stat.descriptive.moment.Mean.Mean(org.apache.commons.math3.stat.descriptive.moment.FirstMoment):::ENTER
m1.n == 0
m1.m1 == Double.NaN
m1.dev == Double.NaN
m1.nDev == Double.NaN
m1.storedData == null
===========================================================================
org.apache.commons.math3.stat.descriptive.moment.Mean.Mean(org.apache.commons.math3.stat.descriptive.moment.FirstMoment):::EXIT
m1.n == orig(m1.n)
m1.storedData == orig(m1.storedData)
m1.n == 0
m1.m1 == Double.NaN
m1.dev == Double.NaN
m1.nDev == Double.NaN
m1.storedData == null
===========================================================================
org.apache.commons.math3.stat.descriptive.moment.SecondMoment:::CLASS
===========================================================================
org.apache.commons.math3.stat.descriptive.moment.SecondMoment:::OBJECT
this.m2 >= 0.0
this.n >= 0
this.storedData == null
===========================================================================
org.apache.commons.math3.stat.descriptive.moment.SecondMoment.SecondMoment():::EXIT
this.m2 == Double.NaN
this.n == 0
this.m1 == Double.NaN
this.dev == Double.NaN
this.nDev == Double.NaN
===========================================================================
org.apache.commons.math3.stat.descriptive.moment.SecondMoment.increment(double):::ENTER
===========================================================================
org.apache.commons.math3.stat.descriptive.moment.SecondMoment.increment(double):::EXIT
this.storedData == orig(this.storedData)
this.n >= 1
this.n - orig(this.n) - 1 == 0
this.nDev != orig(this.nDev)
===========================================================================
org.apache.commons.math3.stat.descriptive.moment.Variance:::CLASS
===========================================================================
org.apache.commons.math3.stat.descriptive.moment.Variance:::OBJECT
this.moment.n one of { 0, 201 }
this.moment.storedData == null
this.incMoment == false
this.isBiasCorrected == true
this.storedData == null
===========================================================================
org.apache.commons.math3.stat.descriptive.moment.Variance.Variance(org.apache.commons.math3.stat.descriptive.moment.SecondMoment):::ENTER
m2.m2 == Double.NaN
m2.n == 0
m2.m1 == Double.NaN
m2.dev == Double.NaN
m2.nDev == Double.NaN
m2.storedData == null
===========================================================================
org.apache.commons.math3.stat.descriptive.moment.Variance.Variance(org.apache.commons.math3.stat.descriptive.moment.SecondMoment):::EXIT
m2.n == orig(m2.n)
m2.storedData == orig(m2.storedData)
this.moment.m2 == Double.NaN
this.moment.n == 0
this.moment.m1 == Double.NaN
this.moment.dev == Double.NaN
this.moment.nDev == Double.NaN
m2.m2 == Double.NaN
m2.n == 0
m2.m1 == Double.NaN
m2.dev == Double.NaN
m2.nDev == Double.NaN
m2.storedData == null
===========================================================================
org.apache.commons.math3.stat.descriptive.moment.Variance.getResult():::ENTER
this.moment.n == 201
===========================================================================
org.apache.commons.math3.stat.descriptive.moment.Variance.getResult():::EXIT187
===========================================================================
org.apache.commons.math3.stat.descriptive.moment.Variance.getResult():::EXIT
this.moment == orig(this.moment)
this.moment.m2 == orig(this.moment.m2)
this.moment.n == orig(this.moment.n)
this.moment.m1 == orig(this.moment.m1)
this.moment.dev == orig(this.moment.dev)
this.moment.nDev == orig(this.moment.nDev)
this.moment.storedData == orig(this.moment.storedData)
this.incMoment == orig(this.incMoment)
this.isBiasCorrected == orig(this.isBiasCorrected)
this.storedData == orig(this.storedData)
this.moment.n == 201
===========================================================================
org.apache.commons.math3.stat.descriptive.rank.Max:::CLASS
===========================================================================
org.apache.commons.math3.stat.descriptive.rank.Max:::OBJECT
this.n >= 0
this.storedData == null
===========================================================================
org.apache.commons.math3.stat.descriptive.rank.Max.Max():::EXIT
this.n == 0
this.value == Double.NaN
===========================================================================
org.apache.commons.math3.stat.descriptive.rank.Max.getResult():::ENTER
this.n == 201
===========================================================================
org.apache.commons.math3.stat.descriptive.rank.Max.getResult():::EXIT
this.n == orig(this.n)
this.value == orig(this.value)
this.storedData == orig(this.storedData)
this.n == 201
===========================================================================
org.apache.commons.math3.stat.descriptive.rank.Max.increment(double):::ENTER
===========================================================================
org.apache.commons.math3.stat.descriptive.rank.Max.increment(double):::EXIT
this.storedData == orig(this.storedData)
this.n >= 1
this.n - orig(this.n) - 1 == 0
===========================================================================
org.apache.commons.math3.stat.descriptive.rank.Min:::CLASS
===========================================================================
org.apache.commons.math3.stat.descriptive.rank.Min:::OBJECT
this.n >= 0
this.storedData == null
===========================================================================
org.apache.commons.math3.stat.descriptive.rank.Min.Min():::EXIT
this.n == 0
this.value == Double.NaN
===========================================================================
org.apache.commons.math3.stat.descriptive.rank.Min.getResult():::ENTER
this.n == 201
===========================================================================
org.apache.commons.math3.stat.descriptive.rank.Min.getResult():::EXIT
this.n == orig(this.n)
this.value == orig(this.value)
this.storedData == orig(this.storedData)
this.n == 201
===========================================================================
org.apache.commons.math3.stat.descriptive.rank.Min.increment(double):::ENTER
===========================================================================
org.apache.commons.math3.stat.descriptive.rank.Min.increment(double):::EXIT
this.storedData == orig(this.storedData)
this.n >= 1
this.n - orig(this.n) - 1 == 0
===========================================================================
org.apache.commons.math3.stat.descriptive.summary.Sum:::CLASS
===========================================================================
org.apache.commons.math3.stat.descriptive.summary.Sum:::OBJECT
this.n >= 0
this.storedData == null
===========================================================================
org.apache.commons.math3.stat.descriptive.summary.Sum.Sum():::EXIT
this.n == 0
this.value == 0.0
===========================================================================
org.apache.commons.math3.stat.descriptive.summary.Sum.increment(double):::ENTER
===========================================================================
org.apache.commons.math3.stat.descriptive.summary.Sum.increment(double):::EXIT
this.storedData == orig(this.storedData)
this.n >= 1
this.n - orig(this.n) - 1 == 0
===========================================================================
org.apache.commons.math3.stat.descriptive.summary.SumOfLogs:::CLASS
===========================================================================
org.apache.commons.math3.stat.descriptive.summary.SumOfLogs:::OBJECT
this.n >= 0
this.storedData == null
===========================================================================
org.apache.commons.math3.stat.descriptive.summary.SumOfLogs.SumOfLogs():::EXIT
this.n == 0
this.value == 0.0
===========================================================================
org.apache.commons.math3.stat.descriptive.summary.SumOfLogs.increment(double):::ENTER
===========================================================================
org.apache.commons.math3.stat.descriptive.summary.SumOfLogs.increment(double):::EXIT
this.storedData == orig(this.storedData)
this.n >= 1
this.n - orig(this.n) - 1 == 0
this.value != orig(this.value)
===========================================================================
org.apache.commons.math3.stat.descriptive.summary.SumOfSquares:::CLASS
===========================================================================
org.apache.commons.math3.stat.descriptive.summary.SumOfSquares:::OBJECT
this.n >= 0
this.value >= 0.0
this.storedData == null
===========================================================================
org.apache.commons.math3.stat.descriptive.summary.SumOfSquares.SumOfSquares():::EXIT
this.n == 0
this.value == 0.0
===========================================================================
org.apache.commons.math3.stat.descriptive.summary.SumOfSquares.increment(double):::ENTER
===========================================================================
org.apache.commons.math3.stat.descriptive.summary.SumOfSquares.increment(double):::EXIT
this.storedData == orig(this.storedData)
this.n >= 1
this.n - orig(this.n) - 1 == 0
this.value >= orig(this.value)
===========================================================================
org.apache.commons.math3.util.CompositeFormat.getDefaultNumberFormat():::EXIT
return has only one value
return.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math3.util.CompositeFormat.getDefaultNumberFormat(java.util.Locale):::ENTER
locale has only one value
===========================================================================
org.apache.commons.math3.util.CompositeFormat.getDefaultNumberFormat(java.util.Locale):::EXIT
return.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math3.util.FastMath$CodyWaite:::OBJECT
this.finalK >= 1
this.finalRemB <= 9.957992501029599E-17
this.finalRemB >= -1.0700184976624634E-16
===========================================================================
org.apache.commons.math3.util.FastMath$CodyWaite.CodyWaite(double):::ENTER
===========================================================================
org.apache.commons.math3.util.FastMath$CodyWaite.CodyWaite(double):::EXIT
===========================================================================
org.apache.commons.math3.util.FastMath$CodyWaite.getK():::ENTER
===========================================================================
org.apache.commons.math3.util.FastMath$CodyWaite.getK():::EXIT
this.finalK == orig(this.finalK)
this.finalRemA == orig(this.finalRemA)
this.finalRemB == orig(this.finalRemB)
return >= 1
===========================================================================
org.apache.commons.math3.util.FastMath$CodyWaite.getRemA():::ENTER
===========================================================================
org.apache.commons.math3.util.FastMath$CodyWaite.getRemA():::EXIT
this.finalK == orig(this.finalK)
this.finalRemA == orig(this.finalRemA)
this.finalRemB == orig(this.finalRemB)
===========================================================================
org.apache.commons.math3.util.FastMath$CodyWaite.getRemB():::ENTER
===========================================================================
org.apache.commons.math3.util.FastMath$CodyWaite.getRemB():::EXIT
this.finalK == orig(this.finalK)
this.finalRemA == orig(this.finalRemA)
this.finalRemB == orig(this.finalRemB)
return <= 9.957992501029599E-17
return >= -1.0700184976624634E-16
===========================================================================
org.apache.commons.math3.util.FastMath:::CLASS
===========================================================================
org.apache.commons.math3.util.FastMath.cosQ(double, double):::ENTER
xb == 0.0
===========================================================================
org.apache.commons.math3.util.FastMath.cosQ(double, double):::EXIT
===========================================================================
org.apache.commons.math3.util.FastMath.exp(double):::ENTER
===========================================================================
org.apache.commons.math3.util.FastMath.exp(double):::EXIT
===========================================================================
org.apache.commons.math3.util.FastMath.exp(double, double, double[]):::ENTER
hiPrec == null
===========================================================================
org.apache.commons.math3.util.FastMath.exp(double, double, double[]):::EXIT955
===========================================================================
org.apache.commons.math3.util.FastMath.exp(double, double, double[]):::EXIT
===========================================================================
org.apache.commons.math3.util.FastMath.log(double):::ENTER
x != 0
===========================================================================
org.apache.commons.math3.util.FastMath.log(double):::EXIT
return != 0
===========================================================================
org.apache.commons.math3.util.FastMath.log(double, double[]):::ENTER
x != 0
hiPrec[] == [0.0, 0.0]
hiPrec[] elements == 0.0
size(hiPrec[]) == 2
===========================================================================
org.apache.commons.math3.util.FastMath.log(double, double[]):::EXIT1142
return == Double.NaN
orig(hiPrec) == null
===========================================================================
org.apache.commons.math3.util.FastMath.log(double, double[]):::EXIT1352
orig(x) >= 3.2360990734852944E-21
===========================================================================
org.apache.commons.math3.util.FastMath.log(double, double[]):::EXIT
return != 0
===========================================================================
org.apache.commons.math3.util.FastMath.log10(double):::ENTER
===========================================================================
org.apache.commons.math3.util.FastMath.log10(double):::EXIT1412
===========================================================================
org.apache.commons.math3.util.FastMath.log10(double):::EXIT
===========================================================================
org.apache.commons.math3.util.FastMath.polyCosine(double):::ENTER
===========================================================================
org.apache.commons.math3.util.FastMath.polyCosine(double):::EXIT
===========================================================================
org.apache.commons.math3.util.FastMath.polySine(double):::ENTER
===========================================================================
org.apache.commons.math3.util.FastMath.polySine(double):::EXIT
===========================================================================
org.apache.commons.math3.util.FastMath.pow(double, double):::ENTER
x >= 0.0
y != 0
y >= -0.5
===========================================================================
org.apache.commons.math3.util.FastMath.pow(double, double):::EXIT1470
return == Infinity
orig(x) == 0.0
===========================================================================
org.apache.commons.math3.util.FastMath.pow(double, double):::EXIT1473
return == 0.0
orig(x) == 0.0
orig(y) one of { 0.2, 0.3333333333333333 }
===========================================================================
org.apache.commons.math3.util.FastMath.pow(double, double):::EXIT1599
orig(x) >= 3.2360990734852944E-21
===========================================================================
org.apache.commons.math3.util.FastMath.pow(double, double):::EXIT
return >= 0.0
===========================================================================
org.apache.commons.math3.util.FastMath.pow(double, int):::ENTER
===========================================================================
org.apache.commons.math3.util.FastMath.pow(double, int):::EXIT1614
return == 1.0
orig(d) >= 1.0
orig(e) == 0
===========================================================================
org.apache.commons.math3.util.FastMath.pow(double, int):::EXIT1666
orig(e) != 0
===========================================================================
org.apache.commons.math3.util.FastMath.pow(double, int):::EXIT
(orig(e) != 0)  <==>  (e != orig(e))
(orig(e) == 0)  <==>  (e == orig(e))
(orig(e) == 0)  ==>  (d == orig(d))
(orig(e) == 0)  ==>  (d >= 1.0)
(orig(e) == 0)  ==>  (orig(d) >= 1.0)
(orig(e) == 0)  ==>  (return == 1.0)
===========================================================================
org.apache.commons.math3.util.FastMath.sinQ(double, double):::ENTER
xb == 0.0
===========================================================================
org.apache.commons.math3.util.FastMath.sinQ(double, double):::EXIT
===========================================================================
org.apache.commons.math3.util.FastMath.sqrt(double):::ENTER
a >= 0.0
===========================================================================
org.apache.commons.math3.util.FastMath.sqrt(double):::EXIT
return >= 0.0
===========================================================================
org.apache.commons.math3.util.FastMathLiteralArrays:::CLASS
org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_A has only one value
org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_A[] == [0.0, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, 1.2167807682331913E-308, 3.3075532478807267E-308, 8.990862214387203E-308, 2.4439696075216986E-307, 6.64339758024534E-307, 1.8058628951432254E-306, 4.908843759498681E-306, 1.334362017065677E-305, 3.627172425759641E-305, 9.85967600992008E-305, 2.680137967689915E-304, 7.285370725133842E-304, 1.9803689272433392E-303, 5.3832011494782624E-303, 1.463305638201413E-302, 3.9776772027043775E-302, 1.0812448255518705E-301, 2.9391280956327795E-301, 7.989378677301346E-301, 2.1717383041010577E-300, 5.903396499766243E-300, 1.604709595901607E-299, 4.3620527352131126E-299, 1.1857289715706991E-298, 3.2231452986239366E-298, 8.761416875971053E-298, 2.381600167287677E-297, 6.473860152384321E-297, 1.7597776278732318E-296, 4.7835721669653157E-296, 1.3003096668152053E-295, 3.5346080979652066E-295, 9.608060944124859E-295, 2.6117415961302846E-294, 7.099449830809996E-294, 1.9298305829106006E-293, 5.245823134132673E-293, 1.4259627797225802E-292, 3.8761686729764145E-292, 1.0536518897078156E-291, 2.864122672853628E-291, 7.785491934690374E-291, 2.116316283183901E-290, 5.7527436249968E-290, 1.5637579898345352E-289, 4.250734424415339E-289, 1.1554696041977512E-288, 3.1408919441362495E-288, 8.537829238438662E-288, 2.320822576772103E-287, 6.308649765138419E-287, 1.7148689119310826E-286, 4.66149719271323E-286, 1.267126226441217E-285, 3.444406231880653E-285, 9.362866914115166E-285, 2.5450911557068313E-284, 6.918275021321188E-284, 1.880582039589629E-283, 5.111952261540649E-283, 1.3895726688907995E-282, 3.7772500667438066E-282, 1.026763015362553E-281, 2.791031173360063E-281, 7.586808748646825E-281, 2.0623086887184633E-280, 5.605936171588964E-280, 1.5238514098804918E-279, 4.1422578754033235E-279, 1.1259823210174452E-278, 3.060737220976933E-278, 8.319947089683576E-278, 2.2615958035357106E-277, 6.147655179898435E-277, 1.6711060014400145E-276, 4.542536646012133E-276, 1.2347896500246374E-275, 3.3565057475434694E-275, 9.123929070778758E-275, 2.4801413921885483E-274, 6.741722283079056E-274, 1.8325902719086093E-273, 4.981496462621207E-273, 1.3541112064618357E-272, 3.68085620656127E-272, 1.0005602916630382E-271, 2.719805132368625E-271, 7.393196131284108E-271, 2.0096791226867E-270, 5.462874707256208E-270, 1.4849631831943512E-269, 4.036548930895323E-269, 1.0972476870931676E-268, 2.9826282194717127E-268, 8.107624153838987E-268, 2.2038806519542315E-267, 5.990769236615968E-267, 1.628459873440512E-266, 4.4266130556431266E-266, 1.203278237867575E-265, 3.270849446965521E-265, 8.891090288030614E-265, 2.4168487931443637E-264, 6.569676185250389E-264, 1.7858231429575898E-263, 4.85437090269903E-263, 1.3195548295785448E-262, 3.5869215528816054E-262, 9.750264097807267E-262, 2.650396454019762E-261, 7.204525142098426E-261, 1.958392846081373E-260, 5.32346341339996E-260, 1.4470673509275515E-259, 3.9335373658569176E-259, 1.0692462289051038E-258, 2.9065128598079075E-258, 7.900720862969045E-258, 2.147638465376883E-257, 5.8378869339035456E-257, 1.5869022483809747E-256, 4.3136475849391444E-256, 1.1725710340687719E-255, 3.1873780814410126E-255, 8.66419234315257E-255, 2.35517168886351E-254, 6.402020300783889E-254, 1.740249660600677E-253, 4.7304887145310405E-253, 1.2858802448614707E-252, 3.495384792953975E-252, 9.501439740542955E-252, 2.582759362004277E-251, 7.020668578160457E-251, 1.908415302517694E-250, 5.1876107490791666E-250, 1.4101386971763257E-249, 3.8331545111676784E-249, 1.0419594359065132E-248, 2.8323395451363237E-248, 7.699097067385825E-248, 2.0928317096428755E-247, 5.688906371296133E-247, 1.5464049837965422E-246, 4.2035646586788297E-246, 1.1426473877336358E-245, 3.106037603716254E-245, 8.443084996839363E-245, 2.2950686306677644E-244, 6.238642390386363E-244, 1.695838923802857E-243, 4.6097680405580995E-243, 1.2530649392922358E-242, 3.4061835424180075E-242, 9.25896798127602E-242, 2.5168480541429286E-241, 6.841502859109196E-241, 1.8597132378953187E-240, 5.055224959032211E-240, 1.374152583940637E-239, 3.735333866258403E-239, 1.0153690688015855E-238, 2.7600590782738726E-238, 7.502618487550056E-238, 2.0394233446495043E-237, 5.543727690168612E-237, 1.5069412868172555E-236, 4.0962906236847E-236, 1.1134873918971586E-235, 3.026772467749944E-235, 8.227620163729258E-235, 2.2364990583200056E-234, 6.079434951446575E-234, 1.6525617499662284E-233, 4.4921289690525345E-233, 1.2210872189854344E-232, 3.3192593301633E-232, 9.02268127425393E-232, 2.4526190464373087E-231, 6.666909874218774E-231, 1.8122539547625083E-230, 4.926216840507529E-230, 1.3390847149416908E-229, 3.6400093808551196E-229, 9.894571625944288E-229, 2.689623698321582E-228, 7.31115423069187E-228, 1.9873779569310022E-227, 5.402252865260326E-227, 1.4684846983789053E-226, 3.991755413823315E-226, 1.0850715739509136E-225, 2.9495302004590423E-225, 8.017654713159388E-225, 2.179424521221378E-224, 5.924290380648597E-224, 1.6103890140790331E-223, 4.377491272857675E-223, 1.1899254154663847E-222, 3.2345523990372546E-222, 8.792425221770645E-222, 2.3900289095512176E-221, 6.496772856703278E-221, 1.7660059778220905E-220, 4.800501435803201E-220, 1.3049116216750674E-219, 3.5471180281159325E-219, 9.642065709892252E-219, 2.6209850274990846E-218, 7.124574366530717E-218, 1.9366601417010147E-217, 5.264388476949737E-217, 1.431009021985696E-216, 3.889885799962507E-216, 1.057380684430436E-215, 2.8742587656021775E-215, 7.813044552050569E-215, 2.1238058974550874E-214, 5.773102661099307E-214, 1.5692921723471877E-213, 4.2657777816050375E-213, 1.1595585743839232E-212, 3.1520070828798975E-212, 8.568043768122183E-212, 2.329035966595791E-211, 6.33097561889469E-211, 1.720937714565362E-210, 4.677993239821998E-210, 1.2716105485691878E-209, 3.456595573934475E-209, 9.396000024637834E-209, 2.55409795397022E-208, 6.942757623821567E-208, 1.887237361505784E-207, 5.13004286606108E-207, 1.3944901709366118E-206, 3.7906173667738715E-206, 1.0303966192973381E-205, 2.8009086220877197E-205, 7.613657850210907E-205, 2.0696069842597556E-204, 5.6257755605305175E-204, 1.5292444435954893E-203, 4.156916476922876E-203, 1.12996721591364E-202, 3.071569248856111E-202, 8.349390727162016E-202, 2.2695999828608633E-201, 6.1694117899971836E-201, 1.677020107827128E-200, 4.558612479525779E-200, 1.2391595516612638E-199, 3.3683846288580648E-199, 9.156218120779494E-199, 2.4889182184335247E-198, 6.765580431441772E-198, 1.839075686473352E-197, 4.999126524757713E-197, 1.3589033107846643E-196, 3.6938826366068014E-196, 1.0041012794280992E-195, 2.7294301888986675E-195, 7.419361045185406E-195, 2.016791373353671E-194, 5.482208065983983E-194, 1.490218341008089E-193, 4.050833763855709E-193, 1.101130773265179E-192, 2.993183789477209E-192, 8.136316299122392E-192, 2.2116799789922265E-191, 6.011969568315371E-191, 1.6342228966392253E-190, 4.4422779589171113E-190, 1.2075364784547675E-189, 3.282424571107068E-189, 8.92255448602772E-189, 2.425402115319395E-188, 6.592926904915355E-188, 1.79214305133496E-187, 4.871550528055661E-187, 1.3242245776666673E-186, 3.599615946028287E-186, 9.78476998200719E-186, 2.659776075359514E-185, 7.230020851688713E-185, 1.9653234116333892E-184, 5.34230278107224E-184, 1.4521887058451231E-183, 3.947457923821984E-183, 1.0730302255093144E-182, 2.9167986204137332E-182, 7.928680793406766E-182, 2.1552386987482013E-181, 5.858546779607288E-181, 1.5925182066949723E-180, 4.328913614497258E-180, 1.1767205227552116E-179, 3.198658219194836E-179, 8.694853785564504E-179, 2.363506255864984E-178, 6.42467573615509E-178, 1.746408207555959E-177, 4.747229597770176E-177, 1.2904307529671472E-176, 3.507754341050756E-176, 9.535066345267336E-176, 2.591899541396432E-175, 7.045512786902009E-175, 1.9151693415969248E-174, 5.205969622575851E-174, 1.4151292367806538E-173, 3.846720258072078E-173, 1.045647032279984E-172, 2.8423629805010285E-172, 7.726344058192276E-172, 2.1002377128928765E-171, 5.709039546124285E-171, 1.5518778128928824E-170, 4.218440703602533E-170, 1.1466910691560932E-169, 3.1170298734336303E-169, 8.472965161251656E-169, 2.303190374523956E-168, 6.260720440258473E-168, 1.701840523821621E-167, 4.62608152166211E-167, 1.2574995962791943E-166, 3.418237608335161E-166, 9.29173407843235E-166, 2.5257552661512635E-165, 6.865714679174435E-165, 1.866294830116931E-164, 5.073114566291778E-164, 1.3790154522394582E-163, 3.7485528226129495E-163, 1.0189624503698769E-162, 2.7698267293941856E-162, 7.529170882336924E-162, 2.0466404088178596E-161, 5.56334611651382E-161, 1.512274346576166E-160, 4.110787043867721E-160, 1.1174279267498045E-159, 3.0374839443564585E-159, 8.25673801176584E-159, 2.244414150254963E-158, 6.1009492034592176E-158, 1.6584100275603453E-157, 4.50802633729044E-157, 1.2254085656601853E-156, 3.3310057014599044E-156, 9.054612259832416E-156, 2.4612985502035675E-155, 6.690503835950083E-155, 1.8186679660152888E-154, 4.9436516047443576E-154, 1.3438240331106108E-153, 3.652892398145774E-153, 9.92958982547828E-153, 2.6991427376823027E-152, 7.3370297995122135E-152, 1.994411660450821E-151, 5.421372463189529E-151, 1.4736818914204564E-150, 4.005882964287806E-150, 1.088911919926534E-149, 2.9599693109692324E-149, 8.046030012041041E-149, 2.18713790898745E-148, 5.945256705384597E-148, 1.6160884846515524E-147, 4.392983574030969E-147, 1.1941366764543551E-146, 3.2460001983475855E-146, 8.8235440586675E-146, 2.3984878190403553E-145, 6.519765758635405E-145, 1.772256261139753E-144, 4.817491674217065E-144, 1.3095299991573769E-143, 3.559671483107555E-143, 9.676190774054103E-143, 2.630261301303634E-142, 7.149792225695347E-142, 1.943514969662872E-141, 5.283020542151163E-141, 1.4360739330834996E-140, 3.9036541111764032E-140, 1.0611230602364477E-139, 2.8844319473099593E-139, 7.84069876400596E-139, 2.1313228444765414E-138, 5.793536445518422E-138, 1.5748463788034308E-137, 4.2808762411845363E-137, 1.1636629220608724E-136, 3.163163464591171E-136, 8.598369704466743E-136, 2.337279322276433E-135, 6.353384093665193E-135, 1.7270287031459572E-134, 4.694550492773212E-134, 1.2761111606368036E-133, 3.4688299108856403E-133, 9.429257929713919E-133, 2.5631381141873417E-132, 6.967331001069377E-132, 1.8939170679975288E-131, 5.148199748336684E-131, 1.3994258162094293E-130, 3.804034213613942E-130, 1.0340436948077763E-129, 2.8108219632627907E-129, 7.640606938467665E-129, 2.0769322678328357E-128, 5.645687086879944E-128, 1.5346568127351796E-127, 4.171630237420918E-127, 1.1339665711932977E-126, 3.0824406750909563E-126, 8.37894218404787E-126, 2.2776327994966818E-125, 6.191247522703296E-125, 1.6829556040859853E-124, 4.5747479502862494E-124, 1.2435453481209945E-123, 3.3803067202247166E-123, 9.188625696750548E-123, 2.4977273040076145E-122, 6.789527378582775E-122, 1.845584943222965E-121, 5.016820182185716E-121, 1.3637129731022491E-120, 3.706956710275979E-120, 1.0076552294433743E-119, 2.739090595934893E-119, 7.445620503219039E-119, 2.023929422267303E-118, 5.501611507503037E-118, 1.4954928881576769E-117, 4.0651709187617596E-117, 1.1050280679513555E-116, 3.003777734030334E-116, 8.165114384910189E-116, 2.219508285637377E-115, 6.033249389304709E-115, 1.6400070480930697E-114, 4.458001565878111E-114, 1.2118105325725891E-113, 3.2940421731384895E-113, 8.954135150208654E-113, 2.433986351722258E-112, 6.616260705434716E-112, 1.7984863104885375E-111, 4.888792154132158E-111, 1.3289115531074511E-110, 3.612356038181234E-110, 9.819402293160495E-110, 2.6691899766673256E-109, 7.255611264437603E-109, 1.9722796756250217E-108, 5.361211684173837E-108, 1.4573285967670963E-107, 3.961429477016909E-107, 1.0768281419102595E-106, 2.9271223293841774E-106, 7.956744351476403E-106, 2.1628672925745152E-105, 5.879282834821692E-105, 1.5981547034872092E-104, 4.344234755347641E-104, 1.1808855501885005E-103, 3.2099795870407646E-103, 8.725629524586503E-103, 2.3718718327094683E-102, 6.44741641521183E-102, 1.7525895549820557E-101, 4.7640323331013947E-101, 1.2949980563724296E-100, 3.5201699899499525E-100, 9.56881327374431E-100, 2.6010732940533088E-99, 7.070450309820548E-99, 1.9219478787856753E-98, 5.2243955659975294E-98, 1.4201378353978042E-97, 3.8603349913851996E-97, 1.0493479260117497E-96, 2.8524232604238555E-96, 7.753690709912764E-96, 2.1076716069929933E-95, 5.72924572981599E-95, 1.5573703263204683E-94, 4.233371554108682E-94, 1.1507496472539512E-93, 3.1280620563875923E-93, 8.5029538631631E-93, 2.3113425190436427E-92, 6.28287989314225E-92, 1.7078641226055994E-91, 4.6424556110307644E-91, 1.261950308999819E-90, 3.430336362898836E-90, 9.324622137237299E-90, 2.5346947846365435E-89, 6.890014851450124E-89, 1.8729003560057785E-88, 5.091070300111434E-88, 1.3838964592430477E-87, 3.761820584522275E-87, 1.0225689628581036E-86, 2.7796303536272215E-86, 7.555818934379333E-86, 2.053884626293416E-85, 5.583037134407759E-85, 1.5176268538776042E-84, 4.125337057189083E-84, 1.121383042095528E-83, 3.0482348236054953E-83, 8.285962249116636E-83, 2.2523580600947705E-82, 6.122543452787843E-82, 1.664279766968299E-81, 4.523982262003404E-81, 1.2297456769063303E-80, 3.342795345742034E-80, 9.086660081726823E-80, 2.4700104681773258E-79, 6.714184569587689E-79, 1.8251046352720517E-78, 4.961148056969105E-78, 1.3485799924445315E-77, 3.665820371396835E-77, 9.964732578705785E-77, 2.708695208461993E-76, 7.362996533913695E-76, 2.0014700145557332E-75, 5.440559532453721E-75, 1.4788974793889734E-74, 4.020060558571273E-74, 1.092765612182012E-73, 2.970445258959489E-73, 8.074507236705857E-73, 2.1948784599535102E-72, 5.966298125808066E-72, 1.6218081151910012E-71, 4.408531734441582E-71, 1.198363039426718E-70, 3.257488853378793E-70, 8.854771398921902E-70, 2.406976727302894E-69, 6.542840888268955E-69, 1.778528517418201E-68, 4.834541417183388E-68, 1.3141647465063647E-67, 3.572270133517001E-67, 9.710435805122717E-67, 2.63957027915428E-66, 7.175096392165733E-66, 1.9503931430716318E-65, 5.3017188565638215E-65, 1.4411566290936352E-64, 3.9174693825966044E-64, 1.0648786018364265E-63, 2.8946401383311E-63, 7.868447965383903E-63, 2.1388659707647114E-62, 5.814040618670345E-62, 1.5804200403673568E-61, 4.296027044486766E-61, 1.1677812418806031E-60, 3.174358801839755E-60, 8.62880163941313E-60, 2.345551464945955E-59, 6.3758692300917355E-59, 1.733140900346534E-58, 4.711165925070571E-58, 1.2806275683797178E-57, 3.481106736845E-57, 9.462629520363307E-57, 2.5722094667974783E-56, 6.9919903587080315E-56, 1.9006201022568844E-55, 5.166420404109835E-55, 1.4043786616805493E-54, 3.8174968984748894E-54, 1.03770335512154E-53, 2.820769858672565E-53, 7.667647949477605E-53, 2.0842827711783212E-52, 5.6656680900216754E-52, 1.5400881501571645E-51, 4.1863938339341257E-51, 1.1379799629071911E-50, 3.093350150840571E-50, 8.408597060399334E-50, 2.2856938448387544E-49, 6.2131591878042886E-49, 1.688911928929718E-48, 4.5909386437919143E-48, 1.2479464696643861E-47, 3.3922703599272275E-47, 9.221146830884422E-47, 2.5065676066043174E-46, 6.8135571305481364E-46, 1.8521166948363666E-45, 5.0345752964740226E-45, 1.368539456379101E-44, 3.720075801577098E-44, 1.0112214979786464E-43, 2.7487849807248755E-43, 7.47197247068667E-43, 2.0310928323153876E-42, 5.521082422279256E-42, 1.5007857288519654E-41, 4.0795586181406803E-41, 1.108938997126179E-40, 3.0144088843073416E-40, 8.194012195477669E-40, 2.2273635587196807E-39, 6.054601485195952E-39, 1.6458113136245473E-38, 4.473779311490168E-38, 1.2160992719555806E-37, 3.3057007442449645E-37, 8.985825281444118E-37, 2.442600707513088E-36, 6.639677673630215E-36, 1.8048513285848406E-35, 4.906094420881007E-35, 1.3336148713971936E-34, 3.625141007634431E-34, 9.854154449263851E-34, 2.6786368134431636E-33, 7.28128971953363E-33, 1.9792597720953414E-32, 5.380185921962174E-32, 1.4624861244004054E-31, 3.975449484028966E-31, 1.080639291795678E-30, 2.9374821418009058E-30, 7.984904044796711E-30, 2.1705221445447534E-29, 5.900089995748943E-29, 1.6038109389511792E-28, 4.359610133382778E-28, 1.185064946717304E-27, 3.221340469489223E-27, 8.756510122348782E-27, 2.380266370880709E-26, 6.47023467943241E-26, 1.75879225876483E-25, 4.780892502168074E-25, 1.2995814853898995E-24, 3.5326287852455166E-24, 9.602680736954162E-24, 2.6102792042257208E-23, 7.095474414148981E-23, 1.9287497671359936E-22, 5.242885191553114E-22, 1.4251641388208515E-21, 3.873997809109103E-21, 1.0530616658562386E-20, 2.862518609581133E-20, 7.78113163345177E-20, 2.1151310700892382E-19, 5.74952254077566E-19, 1.5628822871880503E-18, 4.24835413113866E-18, 1.1548223864099742E-17, 3.139132557537509E-17, 8.533046968331264E-17, 2.3195229636950566E-16, 6.305116324200775E-16, 1.71390848833098E-15, 4.6588861918718874E-15, 1.2664165777252073E-14, 3.442477422913037E-14, 9.357622912219837E-14, 2.5436656904062604E-13, 6.914399608426436E-13, 1.879528650772233E-12, 5.1090893668503945E-12, 1.3887944613766301E-11, 3.775134371775124E-11, 1.0261880234452292E-10, 2.789468100949932E-10, 7.582560135332983E-10, 2.061153470123145E-9, 5.602796449011294E-9, 1.5229979055675358E-8, 4.139937459513021E-8, 1.1253517584464134E-7, 3.059023470086686E-7, 8.315287232107949E-7, 2.260329438286135E-6, 6.1442124206223525E-6, 1.670170240686275E-5, 4.539993096841499E-5, 1.2340981629677117E-4, 3.35462624207139E-4, 9.118819143623114E-4, 0.0024787522852420807, 0.006737947463989258, 0.018315639346837997, 0.049787066876888275, 0.1353352963924408, 0.3678794503211975, 1.0, 2.7182817459106445, 7.389056205749512, 20.08553695678711, 54.59815216064453, 148.41314697265625, 403.42877197265625, 1096.633056640625, 2980.9580078125, 8103.083984375, 22026.46484375, 59874.140625, 162754.78125, 442413.375, 1202604.25, 3269017.5, 8886110.0, 2.4154952E7, 6.5659968E7, 1.78482304E8, 4.85165184E8, 1.318815744E9, 3.584912896E9, 9.74480384E9, 2.6489122816E10, 7.200489472E10, 1.95729620992E11, 5.32048248832E11, 1.446257098752E12, 3.9313342464E12, 1.0686474223616E13, 2.904884772864E13, 7.8962956959744E13, 2.14643574308864E14, 5.83461777702912E14, 1.586013579247616E15, 4.31123180027904E15, 1.1719142537166848E16, 3.1855931348221952E16, 8.6593395455164416E16, 2.35385270340419584E17, 6.3984347447610573E17, 1.73927483790327808E18, 4.7278395262972723E18, 1.285159987981792E19, 3.493427277593156E19, 9.496119530068797E19, 2.581312717296228E20, 7.016736290557636E20, 1.907346499785443E21, 5.1847060206155E21, 1.4093490364499379E22, 3.831007739580998E22, 1.0413759887481643E23, 2.8307533984544136E23, 7.694785471490595E23, 2.0916595931561093E24, 5.685720022003016E24, 1.545539007875769E25, 4.201209991636407E25, 1.142007304008196E26, 3.104297782658242E26, 8.43835682327257E26, 2.2937832658080656E27, 6.23514943204966E27, 1.694889206675675E28, 4.607187019879158E28, 1.2523630909973607E29, 3.4042761729010895E29, 9.253781621373885E29, 2.5154385492401904E30, 6.837671137556327E30, 1.8586717056324128E31, 5.05239404378821E31, 1.3733830589835937E32, 3.733241849647479E32, 1.014800418749161E33, 2.758513549969986E33, 7.498416981578345E33, 2.0382811492597872E34, 5.540622484676759E34, 1.5060972626944096E35, 4.0939972479624634E35, 1.1128638067747114E36, 3.0250770246136387E36, 8.223012393018281E36, 2.2352467822017166E37, 6.076029840339376E37, 1.6516361647240826E38, 4.4896127778163155E38, 1.2204032949639917E39, 3.3174000012927697E39, 9.017628107716908E39, 2.451245443147225E40, 6.663175904917432E40, 1.8112388823726723E41, 4.923458004084836E41, 1.3383347029375378E42, 3.637970747803715E42, 9.889030935681123E42, 2.6881169167589747E43, 7.307059786371152E43, 1.986264756071962E44, 5.399227989109673E44, 1.467662348860426E45, 3.989519470441919E45, 1.0844638420493122E46, 2.9478781225754055E46, 8.013164089994031E46, 2.1782039447564253E47, 5.920972420778763E47, 1.609486943324346E48, 4.3750396394525074E48, 1.1892591576149107E49, 3.2327411123173475E49, 8.787501601904039E49, 2.3886908001521312E50, 6.493134033643613E50, 1.7650169203544438E51, 4.7978130078372714E51, 1.3041809768060802E52, 3.5451314095271004E52, 9.636666808527841E52, 2.6195174357581655E53, 7.120586694432509E53, 1.9355758655647052E54, 5.2614409704305464E54, 1.4302079642723736E55, 3.8877083524279136E55, 1.0567886837680406E56, 2.872649515690124E56, 7.808670894670738E56, 2.1226166967029073E57, 5.769871153180574E57, 1.568413405104933E58, 4.263390023436419E58, 1.1589095247718807E59, 3.150242850860434E59, 8.563247933339596E59, 2.3277319969498524E60, 6.327431953939798E60, 1.719974302355042E61, 4.675374788964851E61, 1.2708985520400816E62, 3.454660807101683E62, 9.390740355567705E62, 2.5526681615684215E63, 6.938871462941557E63, 1.8861808782043154E64, 5.1271712215233855E64, 1.3937096689052236E65, 3.7884955399150257E65, 1.0298199046367501E66, 2.799340708992666E66, 7.609396391563323E66, 2.0684484008569103E67, 5.622626080395226E67, 1.528388084444653E68, 4.1545899609113734E68, 1.1293346659459732E69, 3.069849599753188E69, 8.344717266683004E69, 2.268329019570017E70, 6.165958325782564E70, 1.676081191364984E71, 4.556060380835955E71, 1.2384658100355657E72, 3.3664990715562672E72, 9.15109220707761E72, 2.4875248571153216E73, 6.761793219649385E73, 1.8380461271305958E74, 4.996327312938759E74, 1.3581426848077408E75, 3.691814001080034E75, 1.0035391101975138E76, 2.7279024753382288E76, 7.415207287657125E76, 2.0156621983963848E77, 5.479138512760614E77, 1.4893842728520671E78, 4.048565732162643E78, 1.1005142643914475E79, 2.991508131437659E79, 8.131762373533769E79, 2.210442148596269E80, 6.008604166110734E80, 1.633308028614055E81, 4.439791652732591E81, 1.206860599814453E82, 3.280586734644871E82, 8.917559854082513E82, 2.4240442814945802E83, 6.589235682116406E83, 1.7911398904871E84, 4.86882298924053E84, 1.3234832005748183E85, 3.597600556519039E85, 9.77929222446451E85, 2.658286976862848E86, 7.225974166887662E86, 1.9642232209552433E87, 5.3393125705958075E87, 1.4513757076459615E88, 3.945247871835613E88, 1.0724295693252266E89, 2.915165904253785E89, 7.924242330665303E89, 2.1540322390343345E90, 5.855267177907345E90, 1.5916266807316476E91, 4.326489915443873E91, 1.1760619079592718E92, 3.1968677404735245E92, 8.689987517871135E92, 2.3621834216830225E93, 6.421080550439423E93, 1.7454306955949023E94, 4.744571892885607E94, 1.2897084285532175E95, 3.505791114318544E95, 9.529727908157224E95, 2.5904487437231458E96, 7.041568925985714E96, 1.9140971884979424E97, 5.203055142575272E97, 1.4143368931719686E98, 3.8445667684706366E98, 1.0450615121235744E99, 2.8407720200442806E99, 7.722018663521402E99, 2.0990624115923312E100, 5.705842978547001E100, 1.5510089388648915E101, 4.216079296087462E101, 1.1460491592124923E102, 3.1152847602082673E102, 8.468222063292654E102, 2.3019011105282883E103, 6.257216813084462E103, 1.7008878437355237E104, 4.62349260394851E104, 1.2567956334920216E105, 3.416324322370112E105, 9.286532888251822E105, 2.5243410574836706E106, 6.861870970598542E106, 1.8652499723625443E107, 5.070274654122399E107, 1.3782437251846782E108, 3.746454626411946E108, 1.0183920005400422E109, 2.768276122845335E109, 7.524954624697075E109, 2.0454950851007314E110, 5.56023190218245E110, 1.511427628805191E111, 4.1084862677372065E111, 1.1168024085164686E112, 3.0357834799588566E112, 8.252116273466952E112, 2.2431576057283144E113, 6.097534318207731E113, 1.65748157925005E114, 4.5055022172222453E114, 1.2247224482958058E115, 3.329140840363789E115, 9.049543313665034E115, 2.4599209935197392E116, 6.686758417135634E116, 1.817649308779104E117, 4.940883275207154E117, 1.3430713954289087E118, 3.6508464654683645E118, 9.924030156169606E118, 2.697631034485758E119, 7.332921137166064E119, 1.9932945470297703E120, 5.418336099279846E120, 1.472856595860236E121, 4.0036393271908754E121, 1.0883019300873278E122, 2.9583112936666607E122, 8.041523923017192E122, 2.1859129781586158E123, 5.941927186144745E123, 1.6151834292371802E124, 4.390523815859274E124, 1.1934680816813702E125, 3.2441826014060764E125, 8.81860282490643E125, 2.3971445233885962E126, 6.516115189736396E126, 1.7712635751001657E127, 4.814793918384117E127, 1.3087966177291396E128, 3.557678449715009E128, 9.670771210463886E128, 2.628788218289742E129, 7.145787619369324E129, 1.9424264981694277E130, 5.280062387569078E130, 1.4352697002457768E131, 3.901467289560222E131, 1.0605288965077546E132, 2.882816299252225E132, 7.836307815186044E132, 2.1301292155181736E133, 5.790291758828013E133, 1.573964437869041E134, 4.278478878300888E134, 1.1630112062985817E135, 3.1613917467297413E135, 8.593554223894477E135, 2.335970335559215E136, 6.349826172787151E136, 1.7260616357651607E137, 4.691921416188566E137, 1.2753966504932798E138, 3.466887271843006E138, 9.423976538577447E138, 2.561702766944378E139, 6.963429563637273E139, 1.892856346657855E140, 5.1453167686439515E140, 1.3986421289359558E141, 3.8019036618832785E141, 1.033464507572145E142, 2.809247950589945E142, 7.636326960498012E142, 2.075769060297565E143, 5.64252553828769E143, 1.5337974510118784E144, 4.169293918423203E144, 1.1333315586787883E145, 3.080714152600695E145, 8.374250298636991E145, 2.276357074042286E146, 6.187780443461367E146, 1.6820131331794073E147, 4.572185635487065E147, 1.2428488853188662E148, 3.378413594504258E148, 9.183480622172801E148, 2.4963286658278886E149, 6.785725312893433E149, 1.8445514681108982E150, 5.014010481958507E150, 1.3629491735708616E151, 3.7048805655699485E151, 1.0070909418550386E152, 2.7375567044077912E152, 7.441451374243517E152, 2.022795961737854E153, 5.4985298195094216E153, 1.494655405262451E154, 4.062894701808608E154, 1.1044092571980793E155, 3.002095574584687E155, 8.160542326793782E155, 2.218265110516721E156, 6.02987028472758E156, 1.6390888071605646E157, 4.455504920700703E157, 1.2111317421229415E158, 3.2921976772303727E158, 8.94912101169977E158, 2.432623425087251E159, 6.612555731556604E159, 1.7974788874847574E160, 4.8860545948985793E160, 1.328167263606087E161, 3.610333312791256E161, 9.813901863427107E161, 2.667695552814763E162, 7.251548346906463E162, 1.9711751621240536E163, 5.3582093498119173E163, 1.4565123573071036E164, 3.959211091077107E164, 1.0762251933089556E165, 2.9254832789181E165, 7.952287052787358E165, 2.161656025361765E166, 5.8759898326913254E166, 1.597259768214821E167, 4.3418021646459346E167, 1.1802241249113175E168, 3.2081817253680657E168, 8.720743087611513E168, 2.3705435424427623E169, 6.443805025317327E169, 1.7516078165936552E170, 4.7613641572445654E170, 1.2942728582966776E171, 3.518198614137319E171, 9.563454814394247E171, 2.5996166206245285E172, 7.066491077377918E172, 1.920871394985668E173, 5.221469250951617E173, 1.4193426880442385E174, 3.8581732071331E174, 1.0487601931965087E175, 2.850825930161946E175, 7.749348772180658E175, 2.1064911705560668E176, 5.726036941135634E176, 1.5564982816556894E177, 4.231000988846797E177, 1.1501053030837989E178, 3.1263099916916113E178, 8.498192212235393E178, 2.3100480183046895E179, 6.279361500971995E179, 1.7069074829463731E180, 4.63985600437427E180, 1.2612435745231905E181, 3.4284156709489884E181, 9.319400030019162E181, 2.5332752658571312E182, 6.88615578404537E182, 1.8718514371423056E183, 5.088219872370737E183, 1.3831214731781958E184, 3.759713966511158E184, 1.021996184153141E185, 2.778073442169904E185, 7.55158797540476E185, 2.0527342305586606E186, 5.579910641313343E186, 1.5167767828844167E187, 4.123026721295484E187, 1.1207549425651513E188, 3.0465278560980536E188, 8.281321669236493E188, 2.251096660331649E189, 6.119114404399683E189, 1.6633478556884994E190, 4.521448560089285E190, 1.2290570545894685E191, 3.340923580982338E191, 9.081571104550255E191, 2.468626868232408E192, 6.710424255583952E192, 1.8240823171621646E193, 4.958369974640573E193, 1.3478247120462365E194, 3.6637673548790206E194, 9.959152908532152E194, 2.707178052117959E195, 7.358873642076596E195, 2.0003490682463053E196, 5.4375131636754E196, 1.4780692924846082E197, 4.01780853635105E197, 1.0921536132159379E198, 2.968781250496917E198, 8.069984512111955E198, 2.193649279840519E199, 5.962956589227457E199, 1.620899738203635E200, 4.406062052965071E200, 1.1976919074588434E201, 3.2556641859513496E201, 8.849812639395597E201, 2.40562867677584E202, 6.539175932653188E202, 1.7775323307944624E203, 4.831833881898182E203, 1.3134287685114547E204, 3.5702693195009266E204, 9.704997606668411E204, 2.63809219778715E205, 7.171077244202293E205, 1.949300880034352E206, 5.298749302736127E206, 1.4403494631058154E207, 3.91527572177694E207, 1.0642823992403076E208, 2.8930193727937684E208, 7.8640411896421955E208, 2.1376680994038112E209, 5.8107841809216616E209, 1.5795351101531684E210, 4.293620869258453E210, 1.1671272667059652E211, 3.172580666390786E211, 8.623968972387222E211, 2.3442378838418366E212, 6.372298757235201E212, 1.7321703934464356E213, 4.708527306855985E213, 1.279910496643312E214, 3.479157135998568E214, 9.45732984079136E214, 2.5707689593428096E215, 6.988074107282322E215, 1.8995553996578656E216, 5.1635269305465607E216, 1.4035923083915864E217, 3.815359096108819E217, 1.0371220592190472E218, 2.819190456167585E218, 7.663353127378024E218, 2.083115484919861E219, 5.662495731848751E219, 1.5392257142577226E220, 4.184049381430498E220, 1.1373425785132867E221, 3.091617462831603E221, 8.403887374207366E221, 2.2844135610697528E222, 6.209679892802781E222, 1.6879660933816274E223, 4.588367423411997E223, 1.2472476068464461E224, 3.3903703993793316E224, 9.215982463319503E224, 2.5051637206758385E225, 6.809741127603255E225, 1.8510795864289367E226, 5.031755776868959E226, 1.3677729802316034E227, 3.7179924024793253E227, 1.0106552237522032E228, 2.7472456017809066E228, 7.467788172398272E228, 2.029955237703202E229, 5.517990469846618E229, 1.4999452522236406E230, 4.0772734783595525E230, 1.1083180046837618E231, 3.012720614547867E231, 8.18942426109357E231, 2.2261161215322043E232, 6.051211457626543E232, 1.6448897917725177E233, 4.471273900208441E233, 1.2154183152078517E234, 3.3038494682728794E234, 8.98079409878202E234, 2.4412328161430576E235, 6.63595840453991E235, 1.8038406914061554E236, 4.90334700062756E236, 1.3328680266667662E237, 3.623110695743118E237, 9.848636053777669E237, 2.677136737066629E238, 7.277212447141125E238, 1.978151484427976E239, 5.377173488599035E239, 1.4616672175682191E240, 3.973222981713661E240, 1.0800340064859439E241, 2.935837009891444E241, 7.980432566722885E241, 2.169306470354036E242, 5.896786161387733E242, 1.6029126916635028E243, 4.357168123448786E243, 1.1844011798406507E244, 3.2195361624179725E244, 8.751606149833694E244, 2.3789334438756013E245, 6.466611224443739E245, 1.7578073785142153E246, 4.7782149589194885E246, 1.2988535295611824E247, 3.5306502960727705E247, 9.597302512507479E247, 2.608817438130718E248, 7.091500562953208E248, 1.9276698418065647E249, 5.239949786641934E249, 1.42436589329759E250, 3.8718282216768776E250, 1.0524719896550007E251, 2.860915548426704E251, 7.77677492833005E251, 2.113946677051906E252, 5.7463023795153145E252, 1.56200679236425E253, 4.2459748085663055E253, 1.1541756557557508E254, 3.137374584307575E254, 8.528268445871411E254, 2.3182239583484444E255, 6.301585387776819E255, 1.7129486892266285E256, 4.6562769567905925E256, 1.26570724146049E257, 3.4405490416979487E257, 9.352382323649647E257, 2.54224113415832E258, 6.910528108396216E258, 1.8784760208391767E259, 5.106228040084293E259, 1.3880166914480165E260, 3.7730204737910044E260, 1.0256131352582533E261, 2.787906051540986E261, 7.578313650939932E261, 2.0599991793068063E262, 5.5996586041611455E262, 1.522145133131402E263, 4.137618951061827E263, 1.1247213964487372E264, 3.0573102223682595E264, 8.310629417537063E264, 2.2590636576955473E265, 6.1407711078356886E265, 1.6692346202615142E266, 4.5374504961394207E266, 1.2334070098307164E267, 3.3527476928456816E267, 9.113713162029408E267, 2.4773638527240193E268, 6.734172833429278E268, 1.8305382378470305E269, 4.9759187284770303E269, 1.352594940263854E270, 3.6767339705169146E270, 9.994400500679653E270, 2.716759624268743E271, 7.384918458508588E271, 2.007428933605617E272, 5.456757565532369E272, 1.4833003969415539E273, 4.0320284712983994E273, 1.096019026243815E274, 2.979288529962515E274, 8.098545495417704E274, 2.201412886580694E275, 5.984060832462728E275, 1.6266362950862408E276, 4.4216561713555547E276, 1.2019307065458128E277, 3.2671863888979078E277, 8.881133159512924E277, 2.4141423627760256E278, 6.562319473965767E278, 1.7838233889223407E279, 4.848934634563382E279, 1.3180771991576186E280, 3.5829049382293792E280, 9.739345931419228E280, 2.6474285478041252E281, 7.196457718729758E281, 1.956199868121249E282, 5.31750271790054E282, 1.4454470027638629E283, 3.929132560365955E283, 1.0680488848057261E284, 2.9032581477488686E284, 7.89187408872514E284, 2.1452336456259667E285, 5.831349876080173E285, 1.5851251724785243E286, 4.308816643345461E286, 1.1712579802975851E287, 3.1838092090922606E287, 8.654490685278886E287, 2.3525345191912968E288, 6.39485115791896E288, 1.7383009254496851E289, 4.725191397657393E289, 1.2844402232816276E290, 3.491470347090126E290, 9.490800658395667E290, 2.579867270991543E291, 7.012806239173502E291, 1.906278351789277E292, 5.181801397059486E292, 1.408559707497606E293, 3.8288623079292884E293, 1.0407926842436056E294, 2.829168201470791E294, 7.690475570840264E294, 2.0904882610105383E295, 5.68253547942899E295, 1.544673396032028E296, 4.1988574190754736E296, 1.1413677466646359E297, 3.102559332875688E297, 8.433630296371073E297, 2.292498520423419E298, 6.23165710486722E298, 1.6939399242810123E299, 4.604606371472047E299, 1.2516618713553432E300, 3.402369329874797E300, 9.248598815279678E300, 2.51402968559859E301, 6.833842035076675E301, 1.8576309291617257E302, 5.049564425991982E302, 1.3726137091534984E303, 3.7311513682845094E303, 1.0142320772726397E304, 2.7569686255975333E304, 7.494218049456063E304, 2.037139607241041E305, 5.5375196488302575E305, 1.5052539519895093E306, 4.091704288360009E306, 1.1122405335641184E307, 3.023383151402969E307, 8.218407798110846E307, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN]
org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_A[] elements >= 0.0
org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_B has only one value
org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_B[] == [0.0, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, -1.76097684E-316, -2.44242319E-315, -9.879317845E-315, -1.3811462167E-314, 2.1775261204E-314, -1.4379095864E-313, 1.4219324087E-313, 1.00605438061E-312, -1.287101187097E-312, 5.33839690397E-312, -9.35130825405E-313, -4.15218681073E-311, 4.546040329134E-311, -1.57333572310673E-310, 1.05387548454467E-309, 2.095732474644446E-309, -2.62524392470767E-310, 5.86440876259637E-309, -2.401816502004675E-309, -2.2711230715729753E-308, 2.0670460065057715E-307, 3.436860020483706E-308, 2.0862243734177337E-306, -4.637025318037353E-306, 9.222671009756424E-306, 6.704597874020559E-305, 4.351284159444109E-305, 4.232889602759328E-304, 1.2840977763293412E-303, -2.6993478083348727E-303, -1.053265874779237E-303, 1.207746682843556E-303, 5.21281096513035E-303, 1.6515377082609677E-301, 3.3951607353932444E-301, 5.609418227003629E-301, 4.238775357914848E-300, -9.441842771290538E-300, -2.1745347282493023E-299, -6.203839803215248E-299, -5.617718879466363E-299, 5.2869976233132615E-298, -1.4300075619643524E-298, 4.3198234936686506E-297, -2.6448316331572387E-297, 4.315655444002347E-296, -7.253671992213344E-296, -1.1288398461391523E-295, -4.83901764243093E-296, 1.7407497662694827E-295, 1.1969717029666017E-294, -7.752519943329177E-294, -4.019569741253664E-293, -2.4467928392518484E-293, -1.0269233640424235E-292, -3.2330960700986594E-292, -1.440995270758115E-291, -3.726946038150935E-291, -1.3424576100819801E-291, -3.128894928199484E-290, -5.989337506920005E-290, -9.438168176533759E-290, -1.9220613500411237E-289, 2.1186736024949195E-289, 6.3015208029537436E-288, -8.168129112703755E-288, -1.6040513288090055E-287, -1.0809972724404233E-287, -3.080380385962424E-286, 2.6399157174374624E-286, 1.3317127674213423E-285, -3.5821668044872306E-285, 1.978536584535392E-284, 1.3399392455370071E-284, -2.870168560029448E-284, 3.5311184272663063E-283, -7.204247881190918E-283, 3.2425604548983798E-282, 3.913063150326019E-282, -2.260957518848075E-281, 3.807242187736102E-281, -5.095591405025083E-281, 2.3400625068490396E-280, -1.1564717694090882E-280, -3.517594695450786E-279, 6.666544384808297E-279, -9.204784113858607E-279, 4.8677119923665573E-278, 7.942176091555472E-278, -2.5113270522478854E-277, 5.332900939354667E-277, -3.491241408725929E-276, -2.1141094074221325E-276, 1.722049095222509E-275, 4.0430160253378594E-275, 1.9888195459082551E-274, 3.230089643550739E-275, 5.077824728028163E-274, -3.526547961682877E-274, -6.4376298274983765E-273, -2.5338279333399964E-272, -3.614847626733713E-272, 2.510812179067931E-272, 3.953806005373127E-272, 7.112596406315374E-272, -2.850217520533226E-270, -8.571477929711754E-270, 1.2902019831221148E-269, -6.978783784755863E-270, 9.89845486618531E-269, -3.538563171970534E-268, 3.537475449241181E-268, 3.6924578046381256E-267, 1.3555502536444713E-266, -1.1279742372661484E-266, 5.475072932318336E-266, -1.1679889049814275E-265, -8.946297908979776E-266, 1.0565816011650582E-264, -3.2161237736296753E-265, -6.022045553485609E-264, -2.0332050860436034E-263, -1.0488538406930105E-262, 1.6793752843984384E-262, 3.2558720916543104E-263, -1.9546569053899882E-262, 5.082190670014963E-262, -1.0188117475357564E-260, 3.7920054509691455E-261, -8.330969967504819E-260, -1.1623181434592597E-259, 9.09665088462258E-259, -1.56400149127482E-259, -7.796557225750673E-258, 6.751460509863465E-258, 7.243157658226935E-258, 1.2574668958946027E-256, 2.2678858131411216E-256, 5.1079306249351287E-256, -5.672261759108003E-257, 3.476539491009769E-256, -1.3481093992496937E-254, -3.314051560952014E-254, 7.408112967339146E-255, -7.164884605413269E-254, -6.456588023278983E-253, -1.4881197370811587E-252, 1.7534012237555307E-252, -1.3070101381473173E-251, 6.081420141954215E-251, 6.591143677421159E-251, 2.6917461073773043E-250, 3.683043641790553E-251, 1.2195076420741757E-249, -8.220283439582378E-249, 1.637852737426943E-248, -8.332543237340988E-249, 2.9581193516975647E-248, -1.7790661150204172E-247, -1.7809679916043692E-247, 8.378574405736031E-247, -2.883847036065813E-246, 1.3223776943337897E-245, 3.098547586845664E-245, -1.1036542789147287E-244, -5.7187703271582225E-244, -1.8058492822440396E-244, 4.4373726292703545E-243, -3.4631935816990754E-243, -1.82770041073856E-243, 3.845535085273936E-242, 8.446532344375812E-242, 2.7751016140238277E-242, 1.3158882241538003E-241, -3.579433051074272E-240, -6.151751570213211E-240, -2.990535475079021E-239, 2.3396028616528764E-239, 7.233790684263346E-239, 1.0847913100494912E-238, 7.103148400942551E-238, 3.463600299750966E-237, -4.873121855093712E-237, 1.3407295326570417E-236, 9.390271617387205E-237, -2.4767709454727603E-235, 3.205923535388443E-235, -1.0074984709952582E-234, 2.4747880175747574E-234, -5.146939682310558E-234, -2.827581009333298E-233, -3.0307641004671077E-233, 5.92044714050651E-233, -2.0582596893119236E-232, -6.58066591313112E-232, -4.869955151949929E-231, -5.763495903609913E-231, -2.3580462372762525E-230, 1.8559980428862584E-230, 2.854978560542175E-229, 5.637945686485334E-229, 2.1454644909004582E-228, -1.1918070206953359E-228, -5.021851606912854E-228, 3.861525553653117E-227, 6.533561982617909E-227, -3.015709444206057E-226, -5.042005018212734E-227, 1.5959614205422845E-225, 2.0402105689098835E-224, 5.164902728917601E-224, 9.981031744879876E-224, 4.0281104210095145E-223, 1.1158160971176672E-222, 2.0736172194624895E-222, 4.983162653734032E-222, 2.1753390051977871E-221, 3.969413618002761E-221, 1.3961255018698695E-220, 2.1290855095314206E-220, 1.1927747883417406E-219, 3.7264401117998796E-219, 9.318532410862293E-219, 2.3414841777613345E-218, 4.3791842770430786E-218, 1.7173159016511951E-217, 3.5037536832675478E-217, 1.4300098613455884E-216, 2.4189403362149483E-216, 9.306541421999056E-216, 3.442100456607687E-215, 5.94407068841904E-215, 2.0483260435783403E-214, 3.8410992889527954E-214, 1.2038281262953917E-213, 3.865007795216205E-213, 9.754659138599756E-213, 2.7653605770745684E-212, 5.359568079675375E-212, 2.61726605666378E-211, 5.054202073556894E-211, 8.707092668016246E-211, 1.4080573899148006E-210, 1.288124387778789E-209, 1.8639901642011898E-209, 6.076014540574561E-209, 1.798489141298457E-208, 2.1525406805994896E-208, 1.1864056832305874E-207, 2.1077440662171152E-207, 1.3784853708457332E-206, 1.6965806532093783E-206, 7.241626420445137E-206, 2.575584299085016E-205, 6.151951078101721E-205, 2.40652042118887E-204, 4.022633486003565E-204, 5.8840879519086286E-204, 3.2820308007277566E-203, 4.31880454864738E-203, 2.427240455243201E-202, 7.326955749884755E-202, 1.4310184489676175E-201, 4.464279133463661E-201, 4.895131474682867E-201, 4.48614966943544E-200, 8.924048768324976E-200, 2.5035535029701945E-199, 6.627829836338812E-199, 2.6066826304502746E-198, 8.042275310036546E-198, 2.115062964308555E-197, 4.413745413236018E-197, 1.644449394585716E-196, 3.138217752973845E-196, 7.48533983136081E-196, 2.613626422028823E-195, 3.6741841454219095E-195, 5.906102862953403E-195, 4.4940857547850743E-194, 5.840064709376958E-194, 3.087661273836024E-193, 4.995552216100365E-193, 1.991444798915497E-192, 7.097454751809522E-192, 2.0510193986749737E-191, 5.759440286608551E-191, 1.7013941257113314E-190, 2.1383323934483528E-190, 8.280292810015406E-190, 3.138655772049104E-189, 7.961506427685701E-189, 2.0579001228504997E-188, 7.530840351477639E-188, 1.4582863136475673E-187, 3.149267215638608E-187, 5.443114553057336E-187, 3.4672966834277804E-186, 7.374944406615125E-186, 2.7318417252599104E-185, 7.913674211949961E-185, 2.5217716516462005E-184, 4.0866585874353075E-184, 1.2087698972768686E-183, 3.7072473866919033E-183, 1.1333588840402273E-182, 1.61949812578045E-182, 6.567779607147072E-182, 2.422974840736314E-181, 2.551170809294396E-181, 1.0905890688083124E-180, 3.221279639653057E-180, 7.068244813489027E-180, 1.3752309224575428E-179, 7.20154303462761E-179, 1.5391707185581056E-178, 7.708777608683431E-178, 5.597398155472547E-178, 1.8487854656676722E-177, 1.0577249492414076E-176, 2.8926683313922764E-176, 4.090184282164232E-176, 1.6142943398013813E-175, 7.873864351702525E-175, 2.242630017261011E-174, 3.4637009373878283E-174, 1.5907089565090164E-173, 1.6985075903314236E-173, 1.1552273904608563E-172, 2.237894048535414E-172, 5.321990399912051E-172, 1.4106062639738257E-171, 2.9850404523368767E-171, 1.5683802588004895E-170, 4.880146806045633E-170, 1.1489352403441815E-169, 1.6401586605693734E-169, 8.29169700697816E-169, 1.0380723705441457E-168, 7.126414081261746E-168, 1.253325949455206E-167, 2.595079206183114E-167, 1.537490712803659E-166, 2.6338455225993276E-166, 7.994936425058567E-166, 1.5716634677516025E-165, 3.669404761339415E-165, 1.9941628263579332E-164, 4.5012079983352374E-164, 7.283163019991001E-164, 2.398038505188316E-163, 7.868666894503849E-163, 2.1478649410390003E-162, 8.306111510463843E-162, 1.5453160659068463E-161, -4.590496588813841E-162, 3.5449293983801232E-161, -1.0440854056870505E-160, -2.321064927632431E-160, 5.707867001443433E-160, -2.238614484037969E-159, 2.482282821883242E-159, -1.1508772192025259E-158, 1.9903990578876104E-158, -1.2116165315442256E-158, -2.9084557554502667E-157, -1.1211083853006645E-156, -1.309893394818129E-156, 4.2269712317468864E-156, -7.678973146281339E-156, 3.2021376921211934E-155, -7.08313012515209E-155, 1.944398214330544E-154, 1.1860061363751161E-153, 1.5234465914578058E-153, -2.9020908354550263E-153, 4.980100072851796E-153, 2.3101551448625578E-152, -1.1959241322537072E-151, -9.27398924154364E-153, 5.999390491704392E-152, 1.3373196561281372E-150, -1.0271780540759147E-150, 2.575620466387945E-150, -6.56250013356227E-149, -1.1961357917482867E-148, 5.5807813570926636E-148, 9.252840189663807E-148, -1.830335419852293E-147, 9.350990339947455E-147, -1.6072409939877762E-146, -2.5309995887229526E-146, -1.6014373376410622E-146, -3.303297758377758E-145, 1.5640419864850202E-145, 9.544642884951585E-145, -8.64864445321803E-144, 7.580392204597681E-144, 2.678334184447568E-143, -3.7269289985326055E-143, -2.851965258161176E-142, 7.243267286265823E-142, 4.4510805312036926E-141, 9.008499734799015E-141, 1.130435759928337E-140, -3.096539751496479E-140, -1.497405487919762E-139, 3.51519845948652E-139, -4.713790209541894E-139, 4.740753295616865E-138, 9.517570994930463E-138, -1.8842098029339485E-137, -3.825558165008403E-137, 1.1817638600528107E-136, -3.514601201473235E-136, -6.344612631552417E-136, -1.6754164785291923E-136, 4.445372986583078E-135, -3.89604237755475E-134, -1.0155552195374609E-134, 2.1858142063550155E-134, 3.497714990137842E-133, -7.635830383612894E-133, 1.2050744860079718E-132, -7.683019590615251E-133, -3.344806129021162E-131, -1.6737914131474577E-131, -4.30610076666344E-131, 5.184023388254773E-130, 2.6290763595212492E-129, 7.90041744728452E-130, -3.204473056113754E-129, -2.552517201762272E-128, 7.130134251490065E-128, -3.2244113258340395E-127, -1.064920993515727E-127, 2.7466520735457463E-126, 4.368312797746065E-126, 1.8802599072446818E-125, -4.257625799463564E-125, 5.491672256552995E-125, 3.7298611779671127E-124, 5.724180836308973E-124, 1.3861841053630075E-123, 4.2303826056297614E-123, 3.5335436928899096E-123, -2.522906629540626E-122, 1.0147808005267102E-121, 6.734406065735473E-122, -4.948973160958133E-121, 2.4256181927024344E-120, 4.9056283164780554E-120, 6.846440394397547E-120, 3.512747689569002E-119, -9.020907406701404E-119, 2.5718749916003624E-118, 4.3724191002977524E-119, 1.001455050575191E-117, -2.4442443105031435E-117, 2.38873950760028E-116, -4.831068747037129E-118, -5.148989321866988E-116, 1.7875271881514469E-115, -1.1821586412088555E-114, 4.43247726423679E-115, 4.634817120492781E-114, 1.671311907037975E-113, -4.595250028278979E-113, -5.905511605694905E-113, -1.3657642265608213E-112, 2.881416869529271E-112, 2.1253302469985373E-111, -5.301386276260592E-111, 1.4198782892306878E-112, -3.395494928605007E-110, 9.284633292147283E-110, -6.054133004896379E-110, -8.324100783330331E-109, -2.193190669794277E-108, 1.3613655394659198E-107, 6.463452607647978E-108, 1.0187183636134904E-106, 1.0705673935006142E-106, 2.509050608571019E-106, -1.5096182622106617E-105, 1.7794190449526737E-106, 1.2261246749706581E-104, 2.1377905661197194E-104, -2.2015877944429946E-104, 7.873970951802825E-104, -1.7999197335480384E-103, 1.0487383011058756E-105, -2.9988278531841556E-102, 4.7976477743232285E-102, 3.452316818502442E-102, 5.89953246760617E-101, -4.0785601577267006E-101, 2.7214076662438963E-100, 5.237807655758373E-100, 6.180972117932364E-99, -1.3019742873005683E-98, 4.501188264957416E-99, -2.4075054705261798E-98, 1.6503086546628772E-97, -6.878666975101243E-97, 1.196718116616528E-96, 2.476190162339265E-96, -7.1844969234484515E-96, 5.088386759261555E-95, 6.749368983223726E-95, 1.965737856765605E-94, -5.574080023496771E-94, 1.2493696959436675E-93, 8.533262777516794E-94, -7.225259028588793E-93, -7.340587186324432E-93, -3.482412195764625E-92, 3.4742610108480497E-91, -7.177274244758699E-91, 1.2736636153072213E-90, -5.730160886217076E-90, -1.545495535488274E-89, 1.1304179460367007E-89, 1.249260560756154E-88, -4.7439719382414206E-88, 7.164663249266942E-88, 1.7617425105337704E-87, 2.4175248449172035E-87, -1.043079666926483E-86, -2.8137609614326677E-86, -1.2091497144395591E-85, 3.7944631664558904E-85, -2.8144926807308225E-85, 3.9782728352520784E-85, 4.313978872469646E-84, 5.82190887044604E-84, 5.883385169571802E-83, 1.134857098306787E-82, 3.468049324128309E-82, 2.625423995658143E-82, -3.42827917465521E-81, 5.119461911618321E-81, -2.134387988350615E-80, -4.4703076268400615E-80, 4.806078883451016E-80, 2.3820250362443495E-79, -7.258551497833573E-79, -4.0297835558876335E-78, 2.1424166787650852E-78, -3.2117127164185917E-77, 4.8459153070935316E-77, -1.766924303914492E-76, -2.6921749814579492E-76, -4.1291070428848755E-76, 2.2086994756104319E-75, -7.814146377574201E-75, -1.9589778310104216E-74, 6.52658129486538E-74, 1.7804909509998055E-74, -4.1900132227036916E-73, 1.5705861683841123E-72, -1.904714978998808E-72, -7.81295459930537E-72, 2.818537910881676E-71, 5.840507984320445E-71, 1.7331720051707087E-70, 1.936946987935961E-70, -5.86517231340979E-71, -1.3277440528416646E-69, 1.9906256185827793E-69, 8.668714514280051E-69, 6.643105496829061E-69, -2.5436254170647032E-67, -4.8279217213630774E-67, -1.2640304072937576E-66, 3.51187258511716E-66, 1.4199501303738373E-65, -1.2351697477129173E-65, 7.0542365522414836E-65, 1.030593104122615E-64, -5.452692909894593E-65, -9.415506349675128E-64, -3.6206211446779087E-63, -1.6699188275658641E-62, 2.287280262665656E-62, 7.076135457313529E-62, 2.9019628518165404E-61, -3.1305705497720186E-61, 2.2978757040142953E-60, 1.2424439441817321E-60, 7.140343013236265E-60, 8.633726388939636E-60, 1.3483035574114863E-58, 1.653701058949654E-58, -8.939932297357388E-58, -1.395320103272191E-57, 6.440430933947252E-58, -1.681200826841738E-56, 3.9904382022898837E-56, -4.870518577546228E-56, -1.6990896855901115E-55, -6.751434891261518E-56, -1.669012123121194E-54, -4.079585475491198E-54, -1.3070436427679952E-53, -3.090028378908628E-53, 7.468160889798606E-53, 6.229095980733463E-53, 1.4794751934479566E-52, 1.7444373785853918E-51, -5.3681978363391484E-52, 2.71853394036182E-51, -1.3334367969274016E-50, -1.6958057665854177E-49, -1.452507231312146E-49, 3.3855429446520427E-49, 4.903687986212687E-49, 2.2185957416622524E-48, -9.924196700842429E-48, 4.285128462851149E-47, 3.076063086193525E-48, 4.102052341676543E-46, 1.1745772638457318E-45, -5.309047216809048E-47, 2.72972449891179E-45, -1.1748423022293739E-44, 6.626052626622228E-44, 3.0227439688367925E-44, -4.740494808228372E-43, 5.926057457356852E-43, 3.09768273342776E-42, -5.589493227475577E-42, -8.84908716783327E-42, 2.3684740712822874E-41, 1.4836491430755657E-40, 4.5878801324451396E-40, 1.0585156316103144E-39, 2.3805896467049493E-39, 1.0285082556185196E-38, 2.5187968110874885E-38, -1.4088399542613178E-38, -3.00901028043488E-38, 2.0089026801414973E-37, -1.3324111396289096E-36, 5.458481186294964E-36, -4.8402541351522003E-36, -1.3331969720555312E-35, -8.248332290732976E-35, -1.8349670703969982E-34, 6.403477383195494E-34, 3.7813691654412385E-34, 2.4621305031382827E-33, -5.634051826192439E-33, 3.817173955083142E-32, -6.038239639506472E-32, -2.130447095555397E-31, -6.824454861992054E-31, -1.3455801602048414E-30, -2.518642767561659E-30, 8.082792416221215E-30, 4.718103502869148E-29, -5.607991635038776E-29, -1.8042191582018579E-28, 6.989914264479507E-28, -2.9031739430339586E-28, 6.076820259849921E-27, -3.24981577480893E-27, -2.7648210023059463E-26, -9.785306155980342E-26, 1.241529292737115E-25, 3.0891604448087654E-25, 2.3451052074796954E-24, 6.574128018028633E-24, -1.3345148716925826E-23, 4.3594621428644293E-23, -5.678896695157704E-23, -4.676849004137386E-23, -2.281578975407609E-22, -3.144430608076357E-21, 5.662033727488754E-22, -4.30293375386492E-21, 4.985137671479376E-20, 1.657668502165438E-19, -3.3878706977811337E-19, -7.488022803661722E-19, 1.725039737424264E-18, -6.0275040161173166E-18, -8.081007442213538E-19, 2.9257892371894816E-17, 1.5231541295722552E-16, -1.1474026049124666E-17, 6.890372706231206E-16, 2.592721454922832E-15, -1.1253822296423454E-15, -2.650684279637763E-14, -4.107226967119929E-15, -3.130508064738312E-14, -6.729414275200856E-14, -1.6166170913368169E-12, -1.2059301405584488E-12, -1.2210091619211167E-11, 3.695372823623631E-12, 5.119220484478292E-11, -1.0857572226543142E-10, -4.6490379071586397E-10, -4.5810381714280557E-10, 1.4909756678328582E-9, -1.3155828104004438E-8, -9.149755188170102E-9, 0.0, 8.254840070411029E-8, -1.0681886149151956E-7, -3.359944163407147E-8, -2.1275002921718894E-6, 1.2129920353421116E-5, 2.1520078872608393E-5, 1.0178783359926372E-4, -2.077077172525637E-5, -5.67996159922899E-5, 9.510567165169581E-4, 0.0010901978184553272, 0.010169003920808009, 0.017008920503326107, 0.03416477677774927, -0.1275278893606981, 0.5205078726367633, 0.7535752982147762, 1.1373305111387886, -3.036812739155085, 11.409790277969124, -9.516785302789955, -49.86840843831867, -393.7510973999651, -686.1565277058598, 4617.385872524165, -11563.161235730215, -8230.201383316231, -34460.52482632287, 50744.04207438878, 357908.46214699093, 1936607.425231087, 3222936.695160983, 5477052.0646243105, -3.517545711859706E7, -1.2693418527187027E8, -2.5316384477288628E8, -1.6436423669122624E8, 4.0889180422033095E8, 4.968829330953611E9, -3.503399598592085E9, 1.905394922122271E10, 1.0361722296739479E11, -5.806792575852521E10, 2.3454138776381036E11, -1.718446464587963E12, -1.0946634815588584E12, 1.6889383928999305E13, -3.784600043778247E13, 7.270965670658928E13, -4.9202842786896806E14, 4.597700093952774E14, 2.6113557852262235E15, -4.544525556171388E15, -9.517971970450354E15, -2.0634857819227416E16, -9.7143113104549808E16, -2.2667083759873216E16, -7.2285665164439578E17, 4.1215410760803866E18, 8.5807488300972206E18, 1.530436781375042E19, -1.5453111533064765E19, -1.0633845571643594E20, -3.512380426745336E20, 3.7734658676841284E20, -3.855478664503271E21, 7.984485303520287E21, -1.2296934902142301E22, 1.042139023692827E22, 1.2167897656061312E23, 9.22064170155394E22, 3.965171513035854E23, -4.135121057126514E24, -7.944341754299148E24, 1.4715152230577016E25, -3.0635272288480756E25, -9.54468158713835E25, 1.5411775738825048E25, -8.274711842374368E26, -1.0028324930788433E27, 5.189062091114782E27, -2.8583500869462184E28, -5.198295198128238E28, 2.9758750368256437E29, 3.216046320616945E29, -1.7846700158234043E30, 3.847174961282827E30, 9.026991921214922E30, 4.1358029739592175E30, -6.461509354879894E29, 9.704297297526684E31, 2.9731739067444943E32, 9.97728609663656E32, 3.1149346370027763E33, 2.0051635097366476E34, 2.819272221032373E34, 1.6266731695798413E34, 1.998050894021586E35, -6.1633417615076335E35, 2.2505716077585116E36, 1.9299691540987203E36, 8.006569251375383E36, -3.785295042408568E37, -1.1870498357197593E38, 1.0010529668998112E38, 1.3240710866573994E38, 2.6888010385137123E39, 1.7400655988987023E39, -6.402740469853475E39, -3.93114092562274E40, 1.2363717201084252E41, -1.9219116633978794E41, -1.347867098583136E42, 7.87675118338788E41, 3.3932984011177642E41, -1.9872713979884691E43, 2.220208491349658E43, -3.466267817480825E43, 3.19462030745197E44, -9.841244788104406E44, -2.2676593395522725E45, -1.1349246400274207E46, -1.1700910284427406E46, -3.6754317105801715E46, 1.7647101734915075E47, 2.122358392979746E47, 3.156243682143956E47, 5.356668151937413E47, 2.7668218233914262E48, 3.5127708120698784E48, 1.7884841356632925E49, 1.716531820904728E50, -2.9114757102866277E50, 1.0657703081219677E51, -7.512169809356372E50, 1.764200470879736E51, -1.0088898215431471E52, -3.1085734725176E52, 4.3529009584292495E52, -2.467842129213774E53, -3.9317379627195146E53, -4.332335454045836E52, 7.979013724931926E54, -1.5038413653121357E55, 9.310799925566843E55, -2.2042966348036592E55, -4.518315366841937E55, -6.971366338144781E56, -2.0461505570781806E57, -8.823884392655312E57, -1.1264032993918548E58, -7.692065092509875E58, -1.8472516879728875E59, 8.72220314694275E58, 1.6525336989036362E59, -3.343201925128334E60, 5.493352163155986E60, -2.548073509300398E61, -9.566541624209933E61, 4.0891054447206644E61, -7.724182294653349E62, 1.0143022354947225E63, -4.952031310451961E63, -7.877410133454722E63, 4.505432606253564E64, -7.330635250808021E64, -1.642361029990822E65, 5.982180242124184E65, 7.120242132370469E65, 5.908356249789671E66, -2.8477710945673134E65, 6.65688196961235E66, -9.233295580238604E67, 3.2850043261803593E68, 7.041681569694413E68, -1.5652761725518397E69, 1.5377053215489084E68, 1.282130763903269E70, -2.380286345847567E70, -7.207022875977515E70, 2.7641662602473095E71, 7.685235201534525E71, 4.3239378585884645E70, -1.6840562544109314E72, -5.04128025464686E71, 5.4557485189210095E73, 7.160277784358221E73, 7.636179075087608E73, -8.18804507680012E74, 2.807397988979441E75, 2.165163304600171E75, -1.3208450062862734E76, -5.1939252391404724E76, -6.985952908805853E76, -1.6259920998287064E77, 6.098975200926637E77, -5.63383579957466E77, -1.5876819186852907E78, 2.1487475413123092E79, -3.987619123706934E79, 9.772655251656639E79, -1.638756156057952E79, -7.83892088580041E80, 1.274413296252691E81, 2.51946651720982E81, -2.516866097506943E81, 1.053956282234684E82, 1.8279051206232177E83, 1.2250764591564252E82, -4.0353723442917463E83, -1.4121324224340735E84, -5.45287716696021E84, -1.7514953095665195E85, -5.0706081370522526E85, -4.35799392139009E85, -3.982538093450217E86, -1.4591838284752642E87, 2.5313735821872488E87, -3.718501227185903E86, -1.3907979640327008E88, -5.79002114093961E86, -1.2500675565781447E89, 4.8182788286170926E89, -1.7198866036687559E90, -4.690417668647599E88, 1.3020631859056421E91, -1.3850458263351744E91, 4.87301010703588E91, -1.695546877943826E92, -1.6353756659909833E92, -1.5483926773679628E93, -1.8921091400297595E93, -6.183525570536406E93, -4.987913342551977E93, 1.0186485886120274E93, -1.5343120819745468E95, -5.262123923229857E95, 1.618327917706804E96, -4.135185828158998E96, -8.016793741945299E96, -3.0399439534134115E97, -1.2319346292749103E98, 7.536337311795176E97, -3.577715974851322E98, 2.0521614818695524E99, 1.2627736197958951E98, -5.206910481915062E99, 3.0974593993948837E100, -9.522726334561169E100, -1.1909272509710985E100, -5.056512677995137E101, 2.0902045062932175E102, 6.243669516810509E102, -1.7375090618655787E103, -2.5445477450140954E103, 3.619891246849381E103, 8.90737333900943E103, -2.7897360297480367E104, 1.3725786770437066E105, -8.316530604593264E105, -6.054541568735673E105, 7.523374196797555E105, 1.1475955030427985E107, 1.5260756679495707E107, 7.370294848920685E107, 1.3608995799112174E108, 1.0700758858011432E108, -4.989318918773146E108, -1.6629755787634093E108, 7.635999584053557E109, 1.892621828736983E109, -6.793094743406533E110, -8.160628910742724E110, -7.724219106106896E111, -1.6059226011778748E112, -1.5277127454062126E112, 3.911086668967361E112, 3.529920406834134E113, -4.3991443996021166E113, -1.2631909085915044E114, 3.8656278695544835E114, 1.71845288713123E115, 3.7660598745907915E115, -4.048086182363988E115, 2.3093822298965837E116, -9.684925795536813E116, -3.137992585221854E117, -5.637415935329794E117, -1.5536658521931418E118, -6.336314643222911E118, 8.550658957115427E118, -5.591880480212007E119, 2.4137404318673354E119, -2.631656656397244E120, -7.653117429165879E119, -4.073965591445897E121, 3.634781057940233E121, 4.537273754534966E121, -2.5138919966097735E122, -1.0292817180691822E123, -1.4265564976097062E122, 6.000235114895513E123, 4.186590347846346E124, -1.8950538406321535E124, 7.716762345695022E124, -4.443798187035849E125, -2.268994961992292E125, -2.8169291774231604E126, -2.749127978087685E126, -2.2929764629585683E126, -7.369842361872221E127, 2.81312841469177E128, 2.7856896414497757E128, -3.096733638475319E128, -5.4199510725063615E129, -7.315860999413894E129, 3.6424644535156437E130, -7.886250961456327E130, 5.289988151341401E130, 2.7758613753516344E131, -2.738246981762776E132, -2.2667181460478093E132, -3.614672661225457E131, 2.325337720526947E133, 4.16603235883392E133, -6.50348962894948E133, 3.851445905038431E134, -5.46060534001412E134, 5.4679180659102885E135, -3.037477806841494E135, -3.0417051809209134E136, -6.995964550587914E136, -3.6897084415718804E137, -6.938000231893302E137, 2.403806217004454E138, -3.4552363953199905E138, 7.3409917428393E138, -1.7445917446236717E139, -6.680679913078676E139, -8.193572619487537E139, 5.337290292186291E139, -3.951314467739045E140, -4.4662073456574476E141, 6.249381778908997E141, -2.928362616578011E142, -1.6661676835672304E143, -1.974465323891493E143, 1.3083870531380308E144, -2.382825271750576E144, -5.4826958838142734E144, 1.5340733916570804E145, -3.1327120557842516E145, 1.5790297768522832E146, 1.1518771984292262E146, -4.789917000227385E145, -8.689594184775204E146, 3.0680417869552433E146, 4.877860620031438E147, -3.4650891244084597E148, 1.8702183451052442E149, -3.5727227900139915E148, -1.3457821696677932E150, 3.3212950284273017E149, 7.316033240396569E150, -7.187723217018267E150, -8.537194547485455E150, -1.4561530066010593E152, -7.548155147049997E151, 1.0047353208353007E153, -1.2489460589853119E153, 4.426120229279107E153, -2.5466223330961086E154, 8.831699889789037E154, -2.0258084311749475E155, -5.525009099476396E155, -1.0235056525096769E156, -4.117971654572494E154, -4.7559175309753334E156, -1.4656240137098836E157, -7.675790582869644E157, -1.0126616322947826E158, 7.084865265284368E158, -9.374695893307895E158, 2.05597910889115E159, -7.368602086210704E159, -1.6167825196198978E160, 2.3832096207000712E160, 1.3166970112139726E161, -6.432337568761393E161, 2.9279594746502846E161, 4.8926595743317624E162, 1.2704793774453618E163, -1.1345910784680524E163, 7.75933511025868E163, -1.1441115218462356E163, 5.162248481759758E164, 6.362563919556132E164, -2.8362173224732088E165, -4.342161053332263E165, 4.388125271425036E166, -7.049068240916723E166, 3.8520227881415595E166, 2.9274120974020826E167, -7.500936767542933E167, -6.540181860667302E168, 4.664436780622191E168, -1.436111169285268E169, -1.0407581736224179E170, -2.7670181051374297E170, -6.788169932297778E170, 1.6997387217850427E171, -1.0965324942770584E171, 9.841563119484623E171, 3.175748919314254E172, 2.9621181706527444E172, -3.30101656090905E173, -3.791840683760427E173, -2.841347842666459E174, -7.836327226971707E174, 9.650358667643114E174, 5.9994277301267294E175, -6.0490084078440215E175, -2.8964095485948707E176, 9.916187343252014E175, 2.7535627955313556E176, 3.886891475472745E177, 3.1962472803616787E178, -5.50599549115449E178, 5.672812341879918E178, -3.295268490032475E179, 9.761163062156018E179, 3.107837179570674E180, 3.3894811576571423E179, -5.235397688850367E180, -5.004237248003625E181, -1.7544995191195304E182, 2.645622651144787E182, -3.459885432869825E182, -4.0361435606199565E183, -1.8382923511801317E183, -1.7332235571505177E184, 2.847653455671381E184, 1.7991060813894693E185, -2.0937429891059164E185, 5.744446753652847E185, -2.1349396267483754E184, -1.2542332720182776E186, 3.3730714236579374E186, -5.923734606208998E187, 2.24669039465627E188, -1.2588742703536392E188, 1.474522484905093E189, -2.4006971787803736E189, -3.52597540499141E189, 2.6676722922838097E190, 5.27579825970359E190, 2.1360492104281465E191, 1.9442210982008953E191, -1.4691239161932232E190, 3.8218180377739526E192, 1.9722862688653467E192, 3.047601928063002E193, 1.6747356805175311E193, 7.710512446969693E192, 1.7780021277684035E194, -1.4015110811648513E195, 4.0447634595724164E195, 9.023639664212642E195, 1.976868146639626E196, -9.084495133765657E196, -1.2023077889892748E196, 5.7455368446308694E197, -1.7766273910482863E198, 3.5590470673352285E198, 1.1304970373249033E199, 1.6496143246803731E199, -2.394588390685223E199, -1.4677321100833294E199, -1.1843870433971731E201, -1.8853982316037226E201, 2.8829871423339434E201, 5.369687677705385E200, 1.8356062677502141E202, -1.5544655377217875E203, 2.955364187248884E203, -2.7651059253677425E203, 9.903174064539538E203, -3.284204788892967E204, -1.5843229740595697E205, 5.333371443528904E204, 1.2781631468016048E205, 3.2188292385399854E205, -6.619064395428225E206, 1.291561142865928E207, 1.3142988156905172E207, -1.3841980097978606E208, 6.380177790989479E207, 1.0386032577072378E209, 2.7681631086098026E209, -9.053874899534375E209, 1.2424707839848734E210, 1.045546633850141E211, -1.2448938139338362E211, 7.221902646057552E211, 6.651345415954053E211, -5.8180712702152444E212, 5.275183961165903E212, 5.092753117288608E212, -2.437796532151255E213, 1.3480763914637323E214, 5.619995933180841E214, 2.547000388735681E214, 4.817319356453926E214, -7.897146442236022E215, -7.93844120619577E215, -4.9489938500591624E216, -2.862720607805682E216, -2.9275804461593914E217, -3.411186219855533E217, -2.0110092718356274E218, -8.472642266772353E218, -4.357990742470246E217, 4.793444363780116E219, 1.6544084224626834E220, -6.017988576347111E220, -3.580397221598409E220, -4.7208848667217906E221, -7.724899660259369E221, -2.4459728627968634E222, 3.667348665023154E221, 4.544122762558404E223, -4.0573420909530794E223, -3.2552002992257195E223, -6.488296536838142E224, 1.7544839352461719E224, -4.0873400635183405E225, -8.833499967268279E225, -1.0953484767704112E226, -8.56825295972308E226, -1.8097633115378247E227, -6.171564449018882E227, -4.351843341274115E227, 2.8032429752543687E228, -1.0065901934522996E229, 9.863720960170636E228, -9.481088691357648E229, -1.6843492713373762E229, -1.3282890219894906E230, 6.883577595238845E230, -1.153577281189635E231, -8.009548754642203E231, -4.722612904888278E232, -4.768909872963015E232, 3.2542391242036633E233, 6.513425781583774E233, -1.8889614379831606E233, -2.227647301474917E234, -4.7971208532986115E234, 6.693500938105557E234, -6.587776621471115E234, 3.0099905634916516E236, -4.6694407626686244E235, 2.965546585110978E236, 5.771457643937893E237, -9.029878114318277E237, 8.169926810324408E237, -1.779945804977441E239, 4.1218749988429474E239, 7.201319954099161E239, -1.530845432304069E240, -3.861762510530086E240, -2.4090696463777446E241, -1.8196842273916379E241, -1.7959243076374794E242, -3.7257346819782323E242, 3.413310324247329E242, -2.0406580894051073E243, -1.5335923091350053E243, -1.056727406551016E244, -4.6753408714233723E244, -2.0697130057384643E245, -1.0356006160554071E245, 1.1339195187304043E246, 1.792783182582235E246, 9.599214853681978E245, 1.5367645598839362E247, 2.934570385464815E247, -1.6411525886171892E248, 2.2638862982382794E248, -1.2268014119628852E249, 4.737693450915584E247, 6.3818993714899675E249, 1.2639113706171572E250, -4.011320021817099E249, -5.2744376732859406E250, -3.732266217624991E251, 1.7591819833844019E252, -3.292458622014749E252, -9.161340309319204E252, -1.728610646009749E253, 1.1698424008604891E254, -1.8494343291160577E254, 2.0568656302182574E254, 1.0537591246531136E255, 1.803052068234866E254, -1.053036399720808E256, 2.1836166619192508E256, 1.0368403169781264E257, -2.0648015610276362E257, 8.426174035728768E257, -1.3577357192972777E258, 2.1313950901331177E258, 8.919141843592823E258, -1.1800039972549816E259, -1.1878772398311421E260, -1.538273497873993E260, -4.51305093266001E260, 1.1241179396053055E261, 6.154786508667658E261, -1.0626125049032536E262, -1.8908603201210102E262, -4.571195152299358E262, 1.526100002923062E263, -9.457084582570225E263, -1.5460500618825853E264, -5.598276199126451E264, -1.2074097381167957E265, -3.015972957475025E265, 1.4345106852061226E265, 8.28479585346867E265, -3.118741081244705E266, -1.2054747399765794E266, 3.4454766202661184E267, 1.1279135096919439E268, 1.2066382528772518E268, 1.1984128162292276E269, 3.685169705587367E268, 6.570047690198998E269, 1.8836492887460383E270, 7.4364594917181125E270, 1.2773080633674971E271, 1.8928981707279692E271, 4.039437286589528E271, 1.785277385538302E272, -6.017681359527226E272, 1.9716943051755635E273, -8.772048092842086E271, 1.5645672698520312E274, -3.7979660725865874E274, 5.324902289537048E274, -1.8806716685063293E274, 9.320900373401115E275, 1.4615985810260016E275, 8.321226457219046E276, -4.608112855795952E276, -3.476352191116455E277, 5.266381689434054E277, -9.622106063561645E277, 4.1719443712336026E278, 4.222411269063919E279, -6.714376022102489E279, -1.0732735585199074E280, -2.5866883048437488E280, -1.1306860837934988E281, 3.690690354793168E281, -5.5299180508885456E281, 2.7006726968568243E282, 4.135457669031131E282, 2.8401159516008676E283, 5.127265762024798E283, -3.4893601256685762E283, -1.145160459652136E283, 2.1742808735341656E284, 4.656972469326391E285, 7.672307991205681E285, 1.5781599575584034E286, 4.218682431618625E286, -2.4602260687026867E287, 2.7211316452521414E287, -1.8740018211089393E288, 2.6367639658206183E288, -3.102678910525039E288, 1.1992295328636466E289, 6.8190133180135345E289, 5.783203879030497E289, 5.171047077293295E290, 1.8396930096213817E290, 1.4977047507315718E290, 1.0672499803427623E292, 3.3310942289102464E291, -7.962256961838823E292, 1.7396889119023863E293, 3.8072183820435085E293, 2.2772059538865722E294, -2.0549866377878678E294, -1.2277120342804144E295, -3.609949022969024E295, 1.1479863663699871E296, -1.5314373779304356E296, -2.2537635160762597E296, -6.1370690793508674E296, -4.996854125490041E297, -6.883499809714189E297, -2.595456638706416E298, -1.1892631528580186E299, -1.4672600326020399E299, -3.200068509818696E299, -7.126913872617518E298, -3.3655587417265094E300, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN]
org.apache.commons.math3.util.FastMathLiteralArrays.EXP_FRAC_A has only one value
org.apache.commons.math3.util.FastMathLiteralArrays
org.apache.commons.math3.util.FastMathLiteralArrays.EXP_FRAC_A[] sorted by <
org.apache.commons.math3.util.FastMathLiteralArrays.EXP_FRAC_B has only one value
org.apache.commons.math3.util.FastMathLiteralArrays.EXP_FRAC_B[] == [0.0, 1.552583321178453E-10, 1.2423699995465188E-9, 4.194022929828008E-9, 9.94381632344361E-9, 1.9426261544163577E-8, 3.3576783010266685E-8, 5.3331719086630523E-8, 7.962832297769345E-8, 1.1340476362128895E-7, -8.281845251820919E-8, -3.126416414805498E-8, 3.058997113995161E-8, 1.0368579417304741E-7, -4.9452513107409435E-8, 4.8955889659397494E-8, -7.698155155722897E-8, 5.051784853384516E-8, -4.443661736519001E-8, 1.1593958457401774E-7, 5.575759739697068E-8, 1.4385227981629147E-8, -7.227368462584163E-9, -8.129108387083023E-9, 1.263202100290635E-8, 5.600896265625552E-8, -1.154629885168314E-7, -2.399186832888246E-8, 9.295948298604103E-8, -2.070841011504222E-9, -6.97066538508643E-8, -1.0898941254272996E-7, -1.1895963756343625E-7, -9.865691193993138E-8, -4.711988033385175E-8, 3.6613751875298095E-8, -8.491135959370133E-8, 6.610611940107793E-8, 1.3794148633283659E-8, -2.462631860370667E-9, 1.830278273495162E-8, 7.705834203598065E-8, -6.364563771711373E-8, 7.39978436695387E-8, 1.4122417557484554E-8, -3.881598887298574E-9, 2.0958481826069642E-8, 8.96162975425619E-8, -3.535214171178576E-8, -1.1455271549574576E-7, 9.140964977432485E-8, 1.0667524445105459E-7, -6.777752790396222E-8, 4.586785041291296E-8, -2.8245462428022094E-8, -5.071761314397018E-8, -2.0566368810068663E-8, 6.319146317890346E-8, -3.687854305539139E-8, -8.137269363160008E-8, -6.930491127388755E-8, 3.1184473002226595E-10, -1.0995299963140049E-7, 7.772668425499348E-8, 8.750367485925089E-8, -7.963112393823186E-8, 5.415131809829094E-8, 1.3006683896462346E-8, 3.634736373360733E-8, -1.132504393233074E-7, 4.2046187038837375E-8, 2.6396811618001066E-8, 7.92177143584738E-8, -3.691100820545433E-8, -8.257112559083188E-8, -5.676200971739166E-8, 4.151794514828518E-8, -2.5147255753587636E-8, -1.7335469415174996E-8, 6.595784859136531E-8, -1.2680354928109105E-8, -1.3824992526093461E-8, 6.353142754175797E-8, -1.8021197722549054E-8, -1.9054827792903468E-8, 6.144098503892116E-8, -1.3940903373095247E-8, -5.7694907599522404E-9, 8.696863522320578E-8, 2.6869297963554945E-8, 5.3366470162689076E-8, -7.094204160127543E-8, -1.0662027949814858E-7, -5.26498707801063E-8, 9.198855229106814E-8, 8.989677431456647E-8, -5.790384407322479E-8, -1.1197236522467887E-7, -7.12854317090566E-8, 6.51813137650059E-8, 6.003465022483798E-8, -8.569906238528267E-8, 1.0584469687624562E-7, -7.956144278281947E-8, 7.43676272093501E-8, 9.182512565315022E-8, -2.6157563728873715E-8, -4.012947040998503E-8, 5.094280572218447E-8, 9.675095351161728E-9, 7.552139802281006E-8, 1.1099566726533146E-8, 5.58656252899437E-8, -2.756054703800197E-8, 2.791018095971047E-10, -9.799351869734466E-8, -8.291832428736212E-8, 4.654720780112994E-8, 5.302803981406403E-8, -6.243126731995636E-8, -6.036655299348577E-8, 6.026878587378257E-8, 6.210379583313526E-8, -5.381287389094251E-8, -4.8012970400697E-8, 8.055420567281602E-8, 9.452180117175641E-8, -5.057430382371206E-9, 2.1288872215266507E-8, -6.380305844689076E-8, -2.0858800984600168E-8, -8.724006061713588E-8, -2.3470351753125604E-8, -6.690931338790221E-8, 2.192160831263035E-8, 5.6648446166177225E-9, -1.1461755745719884E-7, -9.944393412663547E-8, 5.2249837964645906E-8, 1.0311034276196487E-7, 5.4203784018566126E-8, -9.340259278913173E-8, -1.0022192034216903E-7, 3.481513333662908E-8, 7.436036590244714E-8, 1.9485199912395296E-8, 1.0968068384729757E-7, 1.0760175582979094E-7, 1.4322981952798675E-8, 6.933855730431659E-8, 3.530656968851287E-8, -8.669526204279467E-8, -5.7169586962345785E-8, -1.1345515834332824E-7, -1.605251622332555E-8, -2.298302779758532E-9, -7.110952399338234E-8, 1.70164513845372E-8, 2.4746155561368937E-8, -4.6834239957353325E-8, 4.1781076667923185E-8, 5.326182134294869E-8, -1.1302647617762544E-8, 8.759667154796094E-8, 1.126326877851684E-7, 6.48979555673987E-8, -5.451390316294111E-8, -6.0896188500539086E-9, -2.7152010585461855E-8, -1.1660424775832058E-7, -3.492984900939992E-8, -1.944841848873016E-8, -6.905990750285027E-8, 5.575538653428039E-8, 1.1768108384670781E-7, 1.178204606523101E-7, 5.727787111340131E-8, -6.284125161007433E-8, -3.0118152047565877E-9, -5.448044533034374E-10, -5.433154287341921E-8, 7.515630833946181E-8, -8.780756503572527E-8, -6.527407547535494E-8, -9.45487863616303E-8, 6.390098458668406E-8, -6.564672913105876E-8, -5.238488022920792E-9, 7.824500749252316E-9, -2.5339299158309795E-8, -1.036103313062145E-7, 1.2550633697348567E-8, 8.584676196065558E-8, 1.1740089468291563E-7, 1.0833697012353316E-7, 5.978002467397905E-8, -2.7143806069290897E-8, 8.711129287069315E-8, -7.316349947981893E-8, -3.00015852582934E-8, -2.0691000399732483E-8, -4.4100097152254264E-8, -9.909612209943178E-8, 5.38733640215475E-8, -6.0893829005035E-8, 3.457553391989844E-8, 1.0300006058273187E-7, -9.290053015365092E-8, -7.514966995961323E-8, -8.10254145615142E-8, -1.0938612624777085E-7, 7.932952721989251E-8, 9.428257290008738E-9, -7.952636967837795E-8, 5.203033137154554E-8, -7.159157201731446E-8, 2.7593424989059015E-8, 1.1231621190000476E-7, -5.469119869891027E-8, 4.560067256086347E-9, 5.280427179595944E-8, 9.119538242455128E-8, -1.1753008498403413E-7, -9.537874867759656E-8, -7.96118345325538E-8, -6.907085854395348E-8, -6.259620482221904E-8, -5.902712448725381E-8, -5.720173456146447E-8, -5.5957016861703E-8, -5.412881689012608E-8, -5.0551842723970724E-8, -4.405966390424518E-8, -3.348471032333413E-8, -1.7658271111516935E-8, 4.589506477601956E-9, 3.4429618182751655E-8, 7.303420385174346E-8, -1.168420305422519E-7, -5.718749537552229E-8, 1.4754809136835937E-8, 1.001616104682875E-7, -3.8207793300052055E-8, 7.766278405014509E-8, -2.7883635712109803E-8, -1.1524714043067699E-7, 5.517333625963128E-8, 7.724278756071081E-9, -1.7990934773848504E-8, -2.0786347668702902E-8, 5.251554594269693E-10, 4.7131849857076246E-8, -1.1819540733893871E-7, -1.742885956093543E-8, 1.1220467571570283E-7, 3.347954541376715E-8, -1.399157980498908E-8, -2.9013441705763093E-8, -1.0389614239253089E-8, 4.307749759934266E-8, -1.0583192018912101E-7, 2.0919226941745448E-8, -5.2305110482722706E-8, -8.588407110184028E-8, -7.861419797923639E-8, -2.929085835358592E-8, 6.329175751021792E-8, -3.807794163054899E-8, -9.377320954068088E-8, -1.0258469865953145E-7, -6.330187984612758E-8, 2.5286958775281306E-8, -7.40238661307607E-8, 1.1681688445204168E-7, -1.1623125976292733E-7, -5.6696107089038004E-8, 5.822140627806124E-8, -8.678466172071259E-9, -1.7757121899175995E-8, 3.220665454652531E-8, -9.598330731102836E-8, 7.573375369829243E-8, 7.174547784678893E-8, -1.0672213971363184E-7, 1.8395252217743006E-8, -2.8511112548600118E-8, -7.79306270997787E-9, 8.178019529487065E-8, 3.0220784595602374E-9, -4.4156343103298585E-9, 6.07014616741277E-8, -3.8809601937571554E-8, -6.329342805230603E-8, -1.1511990258493999E-8, 1.177739474561431E-7, 8.738625278484571E-8, -1.0143341551207646E-7, 2.9394972678456236E-8, 4.278345398213486E-9, 6.28805835150457E-8, -3.197037359731606E-8, -4.060821046423735E-8, 3.82160283750664E-8, -3.2666060441373307E-8, -1.3584500601329896E-8, 9.671332777035621E-8, 6.10626893063691E-8, 1.1913723189736356E-7, 3.3774671482641995E-8, 4.4651109654500895E-8, -8.539328154875224E-8, -1.166799420361101E-7, -4.794765976694151E-8, -1.1635256954820579E-7, -8.221241452580445E-8, 5.5737717715868425E-8, 6.034539636024073E-8, -6.712199323081945E-8, -8.697724830833087E-8, 2.0494942705297694E-9, -3.718924074653624E-8, 3.499747150995707E-8, -1.8535359161566028E-8, 4.1905679587096103E-8, -2.0821912536551675E-8, 3.297776915751238E-8, -3.3835280846270374E-8, 1.8437339356553904E-8, -4.734187609526424E-8, 8.527976799299225E-9, -5.1088103279787804E-8, 1.3513294656751725E-8, -3.480032127343472E-8, 4.367697180842916E-8, 1.1815196363705356E-8, 1.0932279207149782E-7, 9.907230065250944E-8, -1.764389559496152E-8, -1.1135725625095859E-9, -8.846040040259342E-8, -3.996962588736431E-8, -9.276238757878814E-8, -7.12139818505956E-9, -2.016525972830718E-8, 1.0782585410141121E-7, -9.868269632073771E-8, 7.686861750031585E-8, -7.947087669425045E-8, -8.955768055535647E-8, 4.791582240886607E-8, 9.583994718167641E-8, 5.5524866689108584E-8, -7.171796605211277E-8, -4.6157237582310713E-8, -1.0489751005162237E-7, -8.204903560604627E-9, 6.818588687884566E-9, -5.850916105103205E-8, 3.5549586192569994E-8, 5.1896700056778354E-8, -8.146080588190463E-9, 9.516285362051742E-8, -1.1368933260611668E-7, 8.187871486648885E-8, -3.206182925646474E-8, 2.265440168347286E-8, 8.938334752179552E-9, -7.187922490287331E-8, 1.9952407216533937E-8, 4.734805892507655E-8, 1.1642439930208906E-8, -8.582843599651953E-8, -5.3086706437795354E-9, 1.6121782610217253E-8, -2.0197142620980974E-8, -1.129242035557684E-7, -2.2298267863810133E-8, 1.4605950309628873E-8, -8.663710700190489E-10, -6.736873974532501E-8, 5.486523121881414E-8, -1.0965249168570443E-7, -8.27343074126263E-8, -1.0144703278439455E-7, 7.39809943048038E-8, -3.193297932837415E-8, 5.900393284617182E-8, 1.0973020465397083E-7, -1.1681436418514489E-7, 9.5985669644661E-8, 3.423560333632085E-8, -6.22836197265283E-8, 4.621027492345726E-8, -1.1575484316683829E-7, -6.997545435826076E-8, -5.3502441327259514E-8, -6.49667713553005E-8, -1.029980741248172E-7, 7.219393868923887E-8, -1.4854841678687828E-8, 1.1406713393562271E-7, -1.650155887561251E-8, 7.165331603232264E-8, -9.692697614257269E-8, -4.402550702194912E-8, -6.679737442193143E-9, 1.6492800268960003E-8, 2.68759245092879E-8, 2.5854805721793077E-8, 1.4815967715704613E-8, -4.852711011229633E-9, -3.176199594915881E-8, -6.452129525125173E-8, -1.01738658407525E-7, 9.639780418418697E-8, 5.4445606140746644E-8, 1.2219361033150988E-8, -2.8883532688356087E-8, -6.746431126005811E-8, -1.0212284427080097E-7, 1.0696094577483825E-7, 8.43527683868743E-8, 6.987544103716777E-8, 6.493457409236137E-8, 7.093715125593688E-8, 8.929153091001965E-8, -1.1701113164306871E-7, -6.972256643013266E-8, -5.848862070736576E-9, 7.602385197610123E-8, -6.110775144284437E-8, 6.101012058093429E-8, -3.304167134225169E-8, -1.0342514383702196E-7, 8.969907328603505E-8, 7.091600108064668E-8, 8.006778743052707E-8, 1.1857939200074815E-7, -5.0541412403312774E-8, 5.0970277930552287E-8, -5.229355472795119E-8, 1.1793478462381443E-7, 8.625007227318527E-8, 9.250422086873268E-8, -1.0028661472061573E-7, -1.384914052949463E-8, 1.1483560326413004E-7, 4.878798101459259E-8, 2.7866921183936055E-8, 5.3514180410849046E-8, -1.1124565511436785E-7, 1.186914813275767E-8, -5.253258132241335E-8, -6.458486486369316E-8, -2.2838888809969377E-8, 7.415557606805398E-8, -1.0568403170659571E-8, -3.7139182948393606E-8, -4.1022790876160215E-9, 8.999821367768787E-8, 8.201043988912348E-9, -9.616457442665051E-9, 3.8005886250603055E-8, -8.588890051473289E-8, 9.699937202692456E-8, 1.11298006674538E-7, -4.1527104733570825E-8, 1.1682852007826251E-7, 1.1099648061301941E-7, -5.755303038890997E-8, 8.948877445235827E-8, 7.675780395028194E-8, -9.427143563390596E-8, 5.471416081500162E-8, 4.8354824064383506E-8, -1.118706134478866E-7, 5.235528379688445E-8, 6.567708120053687E-8, -7.042204992948526E-8, -1.1603891006723397E-7, -6.968742825553785E-8, 7.01199184127881E-8, 6.645352711199266E-8, -7.919617109348822E-8, 1.1149986927391714E-7, -7.522074418324674E-8, 7.739252980388984E-8, 9.39987974788905E-8, -2.390421480210064E-8, -3.639873824357815E-8, 5.8015881615938497E-8, 2.2423186335040668E-8, 9.674534330665206E-8, 4.4068830785712375E-8, 1.0431875573076199E-7, 4.0584538834428926E-8, 9.279423236781974E-8, 2.404020521381534E-8, 7.425346071427343E-8, 6.529321706138789E-9, 6.080174837146273E-8, 1.6902327633329284E-10, 6.456806922371733E-8, 1.7100134295216033E-8, 9.770510970673519E-8, 6.94872148530716E-8, -6.602926393514549E-8, -6.889997193778161E-8, 6.240235720677117E-8, 9.098790295810902E-8, 1.8386917534879182E-8, 8.454972737414241E-8, 5.259099728747365E-8, -7.595453077213505E-8, -6.113203624663034E-8, 9.859622328905143E-8, -7.206766550807255E-8, -9.474579567171831E-8, 3.210408693366267E-8, 7.160716418525417E-8, 2.530870537724554E-8, -1.0524451040704701E-7, -8.008561371849434E-8, 1.0233519853128553E-7, -3.326791455362767E-8, -8.504961764629757E-9, -6.024017201863256E-8, 5.1500902632092514E-8, 8.98570720774568E-8, 5.638724693948384E-8, -4.734813904255994E-8, 1.8631451577542948E-8, 1.7470924137873214E-8, -4.926470933588261E-8, 5.84096713620797E-8, 1.0364355880696472E-7, 8.800655674349468E-8, 1.3069802481237792E-8, 1.1882454749452428E-7, -6.999215748398631E-8, -7.49674072510849E-8, 1.054760847603618E-7, -3.920012014371067E-9, 7.526183084319617E-8, 1.0618494853096868E-7, 9.043280094115832E-8, 2.9590395068826316E-8, -7.475571347653619E-8, 1.7401160143611842E-8, 6.923209420670962E-8, 8.232829924979753E-8, 5.82825404854514E-8, -1.3108606792380822E-9, -9.485602512220194E-8, 1.7663064617118723E-8, 9.942682855652123E-8, -8.638275100090915E-8, -6.132639063569726E-8, -6.221897889344726E-8, -8.745525834919404E-8, 1.029901759234897E-7, 3.3888561478632076E-8, -5.47315553588771E-8, 7.715994473741065E-8, -4.566098167230033E-8, 5.5257514455273825E-8, -9.530545662611411E-8, -1.889488909834863E-8, 4.769006625301079E-8, 1.0607041998938709E-7, -8.054981263802322E-8, -3.370929373457322E-8, 9.799164177397836E-9, 5.160291611526656E-8, 9.333090708652975E-8, -1.0180490545927503E-7, -5.533523366931846E-8, -4.044932340334176E-9, 5.370131904567218E-8, -1.1887814032213867E-7, -4.3307634616102625E-8, 4.363437558318513E-8, -9.482896784430338E-8, 1.9782818312325887E-8, -8.77224935488516E-8, 6.113879253864931E-8, -8.822335132515693E-9, -5.753754066078771E-8, -8.335545536862392E-8, -8.462309712606694E-8, -5.968586877433824E-8, -6.887556547891059E-9, 7.542967150507818E-8, -4.949331199790077E-8, 9.684172421525468E-8, 3.9260317944365246E-8, 1.784536881359796E-8, 3.426282345243592E-8, 9.018025618601154E-8, -5.1151708476133135E-8, 8.877492215808044E-8, 3.479545684576179E-8, 2.7002575714977818E-8, 6.707201545505014E-8, -8.173742908533777E-8, 5.909041310777802E-8, 1.439903710393587E-8, 2.4289317341982113E-8, 9.044519282818302E-8, -2.3866331257845713E-8, -7.853944465095286E-8, -7.188526769607005E-8, -2.2132706360079843E-9, -1.0624985110080394E-7, 9.453598391231829E-8, -1.134160131581847E-7, -1.315295870404327E-8, -7.981320644583728E-8, -7.327771300038971E-8, 8.155647334672472E-9, -7.222791579580787E-8, -7.430436987497092E-8, 3.633404807819848E-9, -7.512438321498593E-8, -7.044869765481105E-8, 1.9372589859580955E-8, -4.2365298585101096E-8, -1.552830824758035E-8, 1.0160071259930585E-7, 7.232201430620959E-8, -1.0164389431039905E-7, 5.826233477413577E-8, 7.6927415825689E-8, -4.392309439525734E-8, -6.414337408955734E-8, 1.799550702470095E-8, -3.4194410638967946E-8, 1.9437762419688045E-8, -5.7792549966531335E-8, -2.5731071572354522E-8, 1.173595905705643E-7, -1.0361863127101014E-7, 2.8330789837569332E-8, 3.81131861433539E-8, -7.252724942149532E-8, -6.342604067787756E-8, 6.716441526213986E-8, 8.257484966196574E-8, -1.5443717968117592E-8, 1.3280021798948244E-8, -6.79180673261558E-8, -1.8863249269709046E-8, -7.62162303263991E-8, 2.011589233663723E-10, -2.62683511147141E-8, 8.455684903712996E-8, 9.602293320384794E-8, 9.896378545255258E-9, 6.636396724067746E-8, 2.8777050870552646E-8, -1.0109271059094341E-7, -8.305334708631055E-8, 8.467026501338835E-8, -7.29821745001452E-8, -7.739491336852633E-8, 7.321238022013781E-8, -9.621538067089515E-8, -1.0705722541811197E-7, 4.247240125405735E-8, 1.1574222007764044E-7, 1.145412771487496E-7, 4.066036653218687E-8, -1.0410796803072171E-7, -7.955085231106037E-8, 1.1612776191572459E-7, 7.888519481107568E-9, 7.436813814737735E-8, 7.894935661289349E-8, 2.343525263620692E-8, -9.036933434595339E-8, -2.2239222395888823E-8, -8.784622656707742E-9, -4.819540032304379E-8, 9.975892708522332E-8, -3.9945124955316294E-8, 1.1345047468988893E-8, 1.702808472925844E-8, -2.10770182066344E-8, -1.0114948914089626E-7, 1.70518021921727E-8, 9.693260855961159E-8, -9.809953482725758E-8, -8.937957126662392E-8, -1.134963954323427E-7, 6.980004387880031E-8, -1.4494150014095534E-8, 1.122932337832262E-7, -2.483811732227808E-8, 5.278759515330048E-8, 1.0859222881334994E-7, -9.400056055939758E-8, -7.630957994128623E-8, -7.490757191850264E-8, -8.794689652049879E-8, -1.1357810855950775E-7, 8.846862323478745E-8, 4.32092015744956E-8, -9.082923009890997E-9, -6.655106680680314E-8, 1.1108184705020206E-7, 4.8838973948592766E-8, -1.2998975819628988E-8, -7.25680516883106E-8, -1.280024819379844E-7, -1.7743467191652895E-7, -2.1899520225809197E-7, 2.2602433110285232E-7, 2.0582268590356215E-7, 1.9911192455808124E-7, 2.0776878313278689E-7, 2.3367183133931002E-7, -1.9813568387704588E-7, -1.320972037315105E-7, -4.316580502355056E-8, 7.054443447243064E-8, 2.109212796025238E-7, -9.698281856949837E-8, 1.0239791185239086E-7, -1.4271754202157014E-7, 1.232402895636637E-7, -5.150590480969644E-8, -1.882201085012735E-7, 1.918355503889933E-7, 1.368893262241355E-7, 1.256828068633383E-7, 1.601222826656464E-7, -2.3472125169205568E-7, -1.032634625827871E-7, 7.957037517331382E-8, -1.6114314525832115E-7, 1.3018591370778052E-7, 1.8007284821359149E-9, -6.75421764491544E-8, -7.592155950645605E-8, -2.1414301981236817E-8, 9.79045937979623E-8, -1.9287515190177685E-7, 6.184953843236509E-8, -8.966500602352001E-8, -1.686490951669855E-7, -1.7316830893872364E-7, -1.0128633727463388E-7, 4.8935021740786486E-8, -1.9740129448026905E-7, 1.1532102163380318E-7, 3.5371542244169364E-8, 4.153321337726989E-8, 1.3575372396796738E-7, -1.5685449228299222E-7, 1.1933437776279623E-7, 1.2599421120614435E-8, 1.7331079674066365E-9, 8.869266069401045E-8, -2.013999442282902E-7, 8.709065843311144E-8, 2.453117120472083E-9, 2.3489472779602617E-8, 1.5216652792122652E-7, -8.638415150333099E-8, -2.1335475961524608E-7, -2.2677272333821516E-7, -1.246635423141374E-7, 9.494921297991565E-8, -4.27932550865546E-8, -5.907349480138712E-8, 4.809072216941908E-8, -1.9615359732789476E-7, 1.6385396676990034E-7, 1.7642714221524228E-7, -1.564440844355254E-7, 1.2090653407564583E-7, 5.679855838941285E-8, 1.3006497185242537E-7, -1.341336085949317E-7, 2.1987686050231372E-7, -2.3641341460419062E-7, -7.048932272279454E-8, -2.3401958604540354E-7, 2.2867766559333004E-7, -1.1089952719756529E-7, 1.7977178878541792E-7, 1.4903074102418675E-7, -2.011072593789072E-7, 8.504948422097802E-8, 5.5846006716348844E-8, 1.9014079059505456E-7, 1.3119976852347583E-8, 3.645999732952202E-9, 1.6374611405314333E-7, 1.8612397134087598E-8, 4.7113225346448296E-8, -2.2555535676499395E-7, 1.5631615647329739E-7, -2.3574653182047758E-7, 3.08072210937242E-8, 4.344259288116142E-9, 1.6374489573868447E-7, 3.42171232580676E-8, 9.46452492584643E-8, -1.297587351085525E-7, -1.601065201853145E-7, 5.6550495386976275E-9, -1.0725602261510391E-7, -1.9945408945084193E-8, -2.071910882200156E-7, -1.900947109027913E-7, 3.34069282059055E-8, -1.145810806477298E-8, 1.5421457732308477E-7, 5.5657084775121975E-8, 1.7177785285061278E-7, 2.7813027425289027E-8, 1.0267509648109748E-7, -7.839574072711142E-8, -3.648293887796095E-8, 2.3049492079013518E-7, -2.290530257391564E-7, 1.747018414872141E-8, 1.8477759656842807E-8, -2.2394073401050633E-7, -2.3085653185818848E-7, -1.7598351175286083E-10, -6.640551220774385E-9, 2.2868466674913266E-7, 2.3106230530437902E-7, 2.594209135294356E-9, 2.2221434720602702E-8, -1.847872222755186E-7, -1.3948659218254467E-7, 1.6023339607737848E-7, -2.3718944120137026E-7, 1.0087056692827474E-7, 2.228553660510707E-7, 1.3088328582956644E-7, -1.7292527438195104E-7, -2.0961068531216087E-7, 2.2951597845188004E-8, 5.005103745740068E-8, -1.2618366811281002E-7, -2.6784582477238417E-8, -1.2645600379949252E-7, 5.3774170051560117E-8, 3.9205810725333715E-8, -1.6802196396307013E-7, -8.893078799284047E-8, -1.9821451970481713E-7, -1.689060694498032E-8, -1.9648717830943396E-8, -2.0433926409457167E-7, -9.1973399031975E-8, -1.5723449006087263E-7, 7.887051614592191E-8, 1.4166246290402286E-7, 3.330146018487787E-8, 2.3278688667580978E-7, -2.1139124097042925E-7, 1.334449995534113E-7, -1.6104730195920897E-7, -1.3902314592614197E-7, 2.0169027167169864E-7, -9.040643863751471E-8, -5.946190852360168E-8, -1.8013411720005014E-7, 2.6595401669835947E-8, 8.607292924069425E-8, 4.84038176769263E-10, -2.2798356346688802E-7, -1.203028719549339E-7, -1.5111906039270745E-7, 1.5859915617670956E-7, -1.426262681506497E-7, -9.892260062323546E-8, -1.8492643515928268E-7, 7.840210076743552E-8, 2.1643071541578027E-7, 2.313664294893465E-7, 1.2541842003811723E-7, -9.920197743470107E-8, 3.655589133934081E-8, 5.807052689551411E-8, -3.244024724169575E-8, -2.327564406466327E-7, -6.38187356721971E-8, -2.3995994000400915E-10, -3.9793609609721186E-8, -1.802510054588344E-7, 5.745586744591196E-8, 1.987228872666507E-7, -2.3105188606976847E-7, 2.0088042407239129E-7, 6.624793114025702E-8, -1.5587043044056635E-7, 1.3606464059428694E-8, 1.0008761540741556E-7, 1.058213771597129E-7, 3.3058299602856804E-8, -1.1594886810010702E-7, 1.378919824418909E-7, -1.5683631181406778E-7, -4.4200075770425176E-8, 1.2250985436706623E-9, -1.8297013058336644E-8, -1.005004229646318E-7, 2.337202285991116E-7, 3.296104292035678E-8, -2.23668185816307E-7, -5.7055442971184756E-8, 5.82391923137467E-8, 1.244950238958056E-7, 1.4399358260219398E-7, 1.1901862840583523E-7, 5.1856152603337505E-8, -5.520562000491495E-8, -1.9987622893254038E-7, 9.697418238031897E-8, -1.1603376405901542E-7, 1.170714288147407E-7, -1.550851303094034E-7, 2.3472546699189522E-8, 1.78211222185955E-7, -1.6540009048230807E-7, -5.137865010872577E-8, 4.57490653163866E-8, 1.2829599363166098E-7, 1.985773325073412E-7, -2.1792661654989742E-7, -1.652218131743459E-7, -1.178234251477505E-7, -7.34071933723896E-8, -2.9646587857612632E-8, 1.5787194498912167E-8, 6.52252321321176E-8, 1.2100088103262734E-7, 1.8544977697201776E-7, -2.159273204728711E-7, -1.2711589287782304E-7, -2.2610609958205195E-8, 9.993330547750349E-8, -2.33974236642384E-7, -6.830955860192377E-8, 1.2244183812423448E-7, -1.3620325027706252E-7, 1.1178574689680927E-7, -8.490693031052439E-8, 2.2975389535985893E-7, 1.0445707500867073E-7, 1.8405243253979117E-8, -2.6033812325397097E-8, -2.6489990728664908E-8, 1.9409124727247465E-8, 1.1403826867020365E-7, -2.1706266226554237E-7, -1.7839974359909697E-8, 2.3725087624341041E-7, 7.37567604176979E-8, -2.9098805266958403E-8, -6.892713087722722E-8, -4.333719263537725E-8, 5.006436936098099E-8, 2.1367325342138113E-7, -2.6949659655907758E-8, -1.9256682968755803E-7, 1.960616287777496E-7, 1.876664741413704E-7, -2.1534486893602122E-7, -5.688830723853217E-8, 1.8861113228746644E-7, 4.6730779443102234E-8, -3.275360514112964E-9, 4.1011920825226876E-8, 1.820141955326842E-7, -5.468175655175594E-8, -1.8981247089866317E-7, -2.209492705846306E-7, -1.4566110577298295E-7, 3.848544860465368E-8, -1.429109630340783E-7, -2.105749999899302E-7, -1.6206609756618993E-7, 5.058693461947143E-9, -1.8359244902596882E-7, 2.2810251664891242E-7, -1.8791776732592608E-7, 1.3106843166204263E-9, -1.5543153797220025E-7, -1.7884997059081524E-7, -6.648490725635754E-8, 1.8412576154421806E-7, 9.860939269906055E-8, 1.5627006743114285E-7, -1.17260039161597E-7, 2.3416513526430908E-7, -2.1749172296989992E-7, -3.9242560971295217E-8, -1.822826971477839E-7, -1.6729355321895212E-7, 8.208715337901827E-9, -1.301267783434537E-7, -1.029741755377153E-7, 9.215765583599035E-8, -1.907487641016455E-8, 4.2661388254716074E-8, -1.9697226735187428E-7, 2.1819935527247946E-7, -1.398318929248588E-7, 1.6195123407015624E-7, 1.723826394935661E-7, -1.0602700638269148E-7, -1.9392742205954563E-7, -8.880302882034106E-8, 2.1186420987133E-7, 2.3375763256988976E-7, -2.0599801342241997E-8, -7.184550924856607E-8, 8.254840070367875E-8]
org.apache.commons.math3.util.FastMathLiteralArrays.LN_MANT has only one value
org.apache.commons.math3.util.FastMathLiteralArrays.LN_MANT.getClass().getName() == double[][].class
org.apache.commons.math3.util.FastMathLiteralArrays.LN_MANT[] contains no nulls and has only one value, of length 1024
size(org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_A[]) == 1500
size(org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_B[]) == 1500
size(org.apache.commons.math3.util.FastMathLiteralArrays.EXP_FRAC_A[]) == 1025
size(org.apache.commons.math3.util.FastMathLiteralArrays.EXP_FRAC_B[]) == 1025
size(org.apache.commons.math3.util.FastMathLiteralArrays.LN_MANT[]) == 1024
===========================================================================
org.apache.commons.math3.util.FastMathLiteralArrays.loadExpFracA():::ENTER
===========================================================================
org.apache.commons.math3.util.FastMathLiteralArrays.loadExpFracA():::EXIT
org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_A == orig(org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_A)
org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_A[] == orig(org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_A[])
org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_B == orig(org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_B)
org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_B[] == orig(org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_B[])
org.apache.commons.math3.util.FastMathLiteralArrays.EXP_FRAC_A == orig(org.apache.commons.math3.util.FastMathLiteralArrays.EXP_FRAC_A)
org.apache.commons.math3.util.FastMathLiteralArrays.EXP_FRAC_A[] == orig(org.apache.commons.math3.util.FastMathLiteralArrays.EXP_FRAC_A[])
org.apache.commons.math3.util.FastMathLiteralArrays.EXP_FRAC_B == orig(org.apache.commons.math3.util.FastMathLiteralArrays.EXP_FRAC_B)
org.apache.commons.math3.util.FastMathLiteralArrays.EXP_FRAC_B[] == orig(org.apache.commons.math3.util.FastMathLiteralArrays.EXP_FRAC_B[])
org.apache.commons.math3.util.FastMathLiteralArrays.LN_MANT == orig(org.apache.commons.math3.util.FastMathLiteralArrays.LN_MANT)
org.apache.commons.math3.util.FastMathLiteralArrays.LN_MANT.getClass().getName() == orig(org.apache.commons.math3.util.FastMathLiteralArrays.LN_MANT.getClass().getName())
org.apache.commons.math3.util.FastMathLiteralArrays.LN_MANT[] == orig(org.apache.commons.math3.util.FastMathLiteralArrays.LN_MANT[])
return has only one value
return[] == [1.0, 1.0009770393371582, 1.0019550323486328, 1.0029339790344238, 1.0039138793945312, 1.004894733428955, 1.0058765411376953, 1.006859302520752, 1.007843017578125, 1.0088276863098145, 1.0098135471343994, 1.0108001232147217, 1.0117876529693604, 1.0127761363983154, 1.013765811920166, 1.014756202697754, 1.0157477855682373, 1.016740083694458, 1.0177335739135742, 1.0187277793884277, 1.0197231769561768, 1.0207195281982422, 1.021716833114624, 1.0227150917053223, 1.023714303970337, 1.024714469909668, 1.0257158279418945, 1.0267179012298584, 1.0277209281921387, 1.0287251472473145, 1.0297303199768066, 1.0307364463806152, 1.0317435264587402, 1.0327515602111816, 1.0337605476379395, 1.0347704887390137, 1.0357816219329834, 1.0367934703826904, 1.037806510925293, 1.038820505142212, 1.0398354530334473, 1.040851354598999, 1.0418684482574463, 1.0428862571716309, 1.043905258178711, 1.0449252128601074, 1.0459461212158203, 1.0469679832458496, 1.0479910373687744, 1.0490150451660156, 1.0500397682189941, 1.0510656833648682, 1.0520927906036377, 1.0531206130981445, 1.0541496276855469, 1.0551795959472656, 1.0562105178833008, 1.0572423934936523, 1.0582754611968994, 1.059309482574463, 1.0603444576263428, 1.061380386352539, 1.0624175071716309, 1.06345534324646, 1.0644943714141846, 1.0655345916748047, 1.066575527191162, 1.067617654800415, 1.0686607360839844, 1.0697050094604492, 1.0707499980926514, 1.071796178817749, 1.072843313217163, 1.0738916397094727, 1.0749409198760986, 1.075991153717041, 1.0770423412322998, 1.078094720840454, 1.0791480541229248, 1.080202341079712, 1.0812578201293945, 1.0823142528533936, 1.083371639251709, 1.08443021774292, 1.0854897499084473, 1.086550235748291, 1.0876119136810303, 1.088674545288086, 1.089738130569458, 1.0908029079437256, 1.0918686389923096, 1.092935562133789, 1.094003438949585, 1.0950722694396973, 1.096142053604126, 1.0972130298614502, 1.09828519821167, 1.099358320236206, 1.1004323959350586, 1.1015074253082275, 1.102583646774292, 1.103661060333252, 1.1047391891479492, 1.105818748474121, 1.1068990230560303, 1.107980489730835, 1.1090631484985352, 1.1101467609405518, 1.1112313270568848, 1.1123170852661133, 1.1134037971496582, 1.1144917011260986, 1.1155805587768555, 1.1166706085205078, 1.1177616119384766, 1.1188538074493408, 1.1199469566345215, 1.1210410594940186, 1.1221363544464111, 1.1232328414916992, 1.1243302822113037, 1.1254286766052246, 1.126528263092041, 1.127629041671753, 1.1287307739257812, 1.129833459854126, 1.1309373378753662, 1.132042407989502, 1.133148431777954, 1.1342556476593018, 1.1353638172149658, 1.1364731788635254, 1.1375834941864014, 1.1386950016021729, 1.1398074626922607, 1.1409211158752441, 1.142035961151123, 1.1431517601013184, 1.14426851272583, 1.1453864574432373, 1.14650559425354, 1.1476259231567383, 1.148747205734253, 1.149869441986084, 1.1509928703308105, 1.1521174907684326, 1.153243064880371, 1.154369831085205, 1.1554977893829346, 1.1566267013549805, 1.1577568054199219, 1.1588881015777588, 1.160020351409912, 1.161153793334961, 1.1622881889343262, 1.163423776626587, 1.1645605564117432, 1.1656982898712158, 1.166837215423584, 1.1679773330688477, 1.1691184043884277, 1.1702606678009033, 1.1714041233062744, 1.172548532485962, 1.173694133758545, 1.1748409271240234, 1.1759889125823975, 1.177137851715088, 1.1782879829406738, 1.1794393062591553, 1.1805915832519531, 1.1817450523376465, 1.1828997135162354, 1.1840553283691406, 1.1852121353149414, 1.1863701343536377, 1.1875293254852295, 1.1886897087097168, 1.1898510456085205, 1.1910135746002197, 1.1921772956848145, 1.1933419704437256, 1.1945080757141113, 1.1956751346588135, 1.1968433856964111, 1.1980125904083252, 1.1991832256317139, 1.200354814529419, 1.2015275955200195, 1.2027015686035156, 1.2038767337799072, 1.2050528526306152, 1.2062301635742188, 1.2074086666107178, 1.2085883617401123, 1.2097692489624023, 1.210951328277588, 1.2121343612670898, 1.2133188247680664, 1.2145042419433594, 1.2156908512115479, 1.2168786525726318, 1.2180676460266113, 1.2192575931549072, 1.2204489707946777, 1.2216413021087646, 1.222834825515747, 1.224029779434204, 1.2252256870269775, 1.2264227867126465, 1.227621078491211, 1.2288203239440918, 1.2300209999084473, 1.2312228679656982, 1.2324256896972656, 1.2336299419403076, 1.234835147857666, 1.23604154586792, 1.2372493743896484, 1.2384581565856934, 1.2396681308746338, 1.2408792972564697, 1.2420918941497803, 1.2433054447174072, 1.2445201873779297, 1.2457361221313477, 1.2469532489776611, 1.2481715679168701, 1.2493910789489746, 1.2506117820739746, 1.2518336772918701, 1.2530567646026611, 1.2542810440063477, 1.2555065155029297, 1.2567331790924072, 1.2579610347747803, 1.2591900825500488, 1.260420322418213, 1.2616519927978516, 1.2628846168518066, 1.2641184329986572, 1.2653534412384033, 1.266589879989624, 1.2678272724151611, 1.2690660953521729, 1.27030611038208, 1.2715470790863037, 1.272789478302002, 1.2740330696105957, 1.275277853012085, 1.2765238285064697, 1.27777099609375, 1.2790195941925049, 1.2802691459655762, 1.281519889831543, 1.2827720642089844, 1.2840254306793213, 1.2852799892425537, 1.2865357398986816, 1.287792682647705, 1.2890510559082031, 1.2903103828430176, 1.2915711402893066, 1.2928330898284912, 1.2940962314605713, 1.2953605651855469, 1.296626091003418, 1.2978930473327637, 1.2991611957550049, 1.3004305362701416, 1.3017010688781738, 1.3029727935791016, 1.304245948791504, 1.3055200576782227, 1.3067958354949951, 1.308072566986084, 1.3093504905700684, 1.3106298446655273, 1.3119103908538818, 1.3131921291351318, 1.3144752979278564, 1.3157594203948975, 1.317044973373413, 1.3183319568634033, 1.31961989402771, 1.3209092617034912, 1.322199821472168, 1.3234915733337402, 1.324784755706787, 1.3260791301727295, 1.3273746967315674, 1.3286716938018799, 1.329969882965088, 1.3312692642211914, 1.3325698375701904, 1.333871841430664, 1.3351752758026123, 1.336479663848877, 1.3377854824066162, 1.339092493057251, 1.3404009342193604, 1.3417105674743652, 1.3430213928222656, 1.3443336486816406, 1.3456470966339111, 1.3469617366790771, 1.3482778072357178, 1.349595069885254, 1.3509137630462646, 1.352233648300171, 1.3535549640655518, 1.3548774719238281, 1.356201171875, 1.3575263023376465, 1.3588526248931885, 1.360180139541626, 1.361509084701538, 1.3628394603729248, 1.364171028137207, 1.3655037879943848, 1.366837978363037, 1.368173360824585, 1.3695101737976074, 1.3708481788635254, 1.372187614440918, 1.373528242111206, 1.3748703002929688, 1.376213550567627, 1.3775582313537598, 1.378904104232788, 1.380251407623291, 1.3815999031066895, 1.3829498291015625, 1.384300947189331, 1.3856534957885742, 1.387007236480713, 1.3883624076843262, 1.389719009399414, 1.3910768032073975, 1.3924360275268555, 1.393796443939209, 1.395158290863037, 1.3965213298797607, 1.397885799407959, 1.3992514610290527, 1.4006187915802002, 1.401987075805664, 1.4033570289611816, 1.4047281742095947, 1.4061005115509033, 1.4074742794036865, 1.4088494777679443, 1.4102261066436768, 1.4116039276123047, 1.4129831790924072, 1.4143636226654053, 1.415745496749878, 1.4171288013458252, 1.418513298034668, 1.4198992252349854, 1.4212865829467773, 1.4226751327514648, 1.424065351486206, 1.4254565238952637, 1.426849365234375, 1.4282433986663818, 1.4296388626098633, 1.4310357570648193, 1.432433843612671, 1.433833360671997, 1.4352343082427979, 1.4366366863250732, 1.4380402565002441, 1.4394452571868896, 1.4408516883850098, 1.4422595500946045, 1.4436686038970947, 1.4450790882110596, 1.446491003036499, 1.447904348373413, 1.4493188858032227, 1.450735092163086, 1.4521524906158447, 1.4535713195800781, 1.454991340637207, 1.4564130306243896, 1.4578359127044678, 1.4592602252960205, 1.460686206817627, 1.4621131420135498, 1.4635417461395264, 1.4649717807769775, 1.4664030075073242, 1.4678359031677246, 1.4692699909210205, 1.470705509185791, 1.4721424579620361, 1.4735808372497559, 1.475020408630371, 1.47646164894104, 1.4779040813446045, 1.4793481826782227, 1.4807934761047363, 1.4822404384613037, 1.4836885929107666, 1.485138177871704, 1.4865891933441162, 1.488041639328003, 1.4894955158233643, 1.4909508228302002, 1.4924075603485107, 1.493865728378296, 1.4953253269195557, 1.49678635597229, 1.49824857711792, 1.4997124671936035, 1.5011777877807617, 1.5026445388793945, 1.504112720489502, 1.505582332611084, 1.5070531368255615, 1.5085256099700928, 1.5099995136260986, 1.511474847793579, 1.5129516124725342, 1.5144298076629639, 1.5159096717834473, 1.5173907279968262, 1.5188732147216797, 1.5203571319580078, 1.5218427181243896, 1.523329496383667, 1.524817943572998, 1.5263078212738037, 1.5277988910675049, 1.5292916297912598, 1.5307857990264893, 1.5322813987731934, 1.5337786674499512, 1.5352771282196045, 1.5367772579193115, 1.538278579711914, 1.5397815704345703, 1.5412859916687012, 1.5427920818328857, 1.5442993640899658, 1.5458080768585205, 1.547318458557129, 1.548830270767212, 1.5503435134887695, 1.5518584251403809, 1.5533745288848877, 1.5548923015594482, 1.5564115047454834, 1.5579321384429932, 1.5594542026519775, 1.5609779357910156, 1.5625030994415283, 1.5640296936035156, 1.5655577182769775, 1.5670874118804932, 1.5686185359954834, 1.5701510906219482, 1.5716853141784668, 1.5732207298278809, 1.5747578144073486, 1.5762965679168701, 1.577836513519287, 1.5793781280517578, 1.5809214115142822, 1.5824658870697021, 1.5840120315551758, 1.5855598449707031, 1.587108850479126, 1.5886595249176025, 1.5902118682861328, 1.5917654037475586, 1.593320608139038, 1.5948774814605713, 1.596435785293579, 1.5979955196380615, 1.5995566844940186, 1.6011195182800293, 1.6026840209960938, 1.6042497158050537, 1.6058173179626465, 1.6073861122131348, 1.6089565753936768, 1.6105287075042725, 1.6121022701263428, 1.6136772632598877, 1.6152539253234863, 1.6168320178985596, 1.6184117794036865, 1.619992971420288, 1.6215758323669434, 1.6231601238250732, 1.6247460842132568, 1.626333475112915, 1.627922534942627, 1.6295130252838135, 1.6311051845550537, 1.6326987743377686, 1.634294033050537, 1.6358907222747803, 1.6374890804290771, 1.6390891075134277, 1.640690565109253, 1.6422934532165527, 1.6438980102539062, 1.6455042362213135, 1.6471118927001953, 1.6487212181091309, 1.6503322124481201, 1.651944637298584, 1.6535584926605225, 1.6551742553710938, 1.6567914485931396, 1.6584100723266602, 1.6600303649902344, 1.6616523265838623, 1.663275957107544, 1.6649010181427002, 1.666527509689331, 1.6681559085845947, 1.669785737991333, 1.671417236328125, 1.6730501651763916, 1.674684762954712, 1.676321029663086, 1.6779589653015137, 1.679598331451416, 1.681239366531372, 1.6828820705413818, 1.6845262050628662, 1.6861720085144043, 1.687819480895996, 1.6894686222076416, 1.6911191940307617, 1.6927716732025146, 1.6944255828857422, 1.6960809230804443, 1.6977381706237793, 1.6993968486785889, 1.7010571956634521, 1.7027192115783691, 1.7043828964233398, 1.7060482501983643, 1.7077150344848633, 1.709383487701416, 1.7110536098480225, 1.7127254009246826, 1.7143988609313965, 1.716073989868164, 1.7177505493164062, 1.7194287776947021, 1.7211089134216309, 1.7227904796600342, 1.7244737148284912, 1.726158618927002, 1.7278449535369873, 1.7295331954956055, 1.7312231063842773, 1.7329144477844238, 1.7346076965332031, 1.736302375793457, 1.7379989624023438, 1.739696979522705, 1.7413966655731201, 1.7430980205535889, 1.7448012828826904, 1.7465059757232666, 1.7482123374938965, 1.74992036819458, 1.7516300678253174, 1.7533416748046875, 1.7550547122955322, 1.7567694187164307, 1.7584857940673828, 1.7602040767669678, 1.7619237899780273, 1.7636451721191406, 1.7653684616088867, 1.7670931816101074, 1.768819808959961, 1.770547866821289, 1.77227783203125, 1.7740094661712646, 1.775742769241333, 1.777477741241455, 1.7792143821716309, 1.7809526920318604, 1.7826926708221436, 1.7844345569610596, 1.7861778736114502, 1.7879230976104736, 1.7896699905395508, 1.7914185523986816, 1.7931687831878662, 1.7949209213256836, 1.7966744899749756, 1.7984299659729004, 1.800187110900879, 1.8019459247589111, 1.8037066459655762, 1.8054687976837158, 1.8072328567504883, 1.8089985847473145, 1.8107659816741943, 1.812535285949707, 1.8143062591552734, 1.8160789012908936, 1.8178532123565674, 1.819629430770874, 1.8214070796966553, 1.8231868743896484, 1.8249680995941162, 1.8267512321472168, 1.828536033630371, 1.830322504043579, 1.83211088180542, 1.8339009284973145, 1.8356926441192627, 1.8374862670898438, 1.8392815589904785, 1.841078519821167, 1.8428773880004883, 1.8446779251098633, 1.846480131149292, 1.8482842445373535, 1.8500902652740479, 1.8518977165222168, 1.8537070751190186, 1.8555183410644531, 1.8573312759399414, 1.8591458797454834, 1.8609623908996582, 1.8627805709838867, 1.864600658416748, 1.866422414779663, 1.8682458400726318, 1.8700714111328125, 1.8718984127044678, 1.8737273216247559, 1.8755581378936768, 1.8773906230926514, 1.8792247772216797, 1.8810608386993408, 1.8828988075256348, 1.8847384452819824, 1.886579990386963, 1.888423204421997, 1.890268325805664, 1.8921151161193848, 1.8939638137817383, 1.8958141803741455, 1.8976664543151855, 1.8995206356048584, 1.901376485824585, 1.9032342433929443, 1.9050939083099365, 1.9069552421569824, 1.908818244934082, 1.9106833934783936, 1.9125502109527588, 1.9144186973571777, 1.9162893295288086, 1.9181616306304932, 1.9200356006622314, 1.9219114780426025, 1.9237892627716064, 1.9256689548492432, 1.9275505542755127, 1.929433822631836, 1.931318759918213, 1.9332058429718018, 1.9350945949554443, 1.9369852542877197, 1.938877820968628, 1.940772294998169, 1.9426684379577637, 1.9445664882659912, 1.9464664459228516, 1.9483680725097656, 1.9502718448638916, 1.9521772861480713, 1.9540846347808838, 1.955993890762329, 1.9579050540924072, 1.959817886352539, 1.9617326259613037, 1.9636495113372803, 1.9655680656433105, 1.9674885272979736, 1.9694106578826904, 1.9713349342346191, 1.9732608795166016, 1.975188970565796, 1.977118730545044, 1.9790503978729248, 1.9809842109680176, 1.982919692993164, 1.9848570823669434, 1.9867963790893555, 1.9887375831604004, 1.990680456161499, 1.9926254749298096, 1.994572401046753, 1.996521234512329, 1.998471736907959, 2.000424385070801, 2.0023789405822754, 2.004335403442383, 2.006293773651123, 2.008254051208496, 2.010216236114502, 2.0121798515319824, 2.014145851135254, 2.016113758087158, 2.0180835723876953, 2.0200552940368652, 2.022029399871826, 2.0240049362182617, 2.02598237991333, 2.0279617309570312, 2.0299429893493652, 2.0319266319274902, 2.03391170501709, 2.0358991622924805, 2.0378880500793457, 2.039879322052002, 2.041872501373291, 2.0438671112060547, 2.0458641052246094, 2.047863006591797, 2.049863815307617, 2.0518670082092285, 2.0538716316223145, 2.055878162384033, 2.057887077331543, 2.0598974227905273, 2.0619101524353027, 2.063924789428711, 2.065941333770752, 2.067959785461426, 2.0699801445007324, 2.07200288772583, 2.0740270614624023, 2.0760536193847656, 2.0780820846557617, 2.0801124572753906, 2.0821447372436523, 2.084178924560547, 2.0862154960632324, 2.0882534980773926, 2.0902938842773438, 2.0923361778259277, 2.0943803787231445, 2.0964269638061523, 2.0984749794006348, 2.100525379180908, 2.1025776863098145, 2.1046319007873535, 2.1066884994506836, 2.1087465286254883, 2.110806941986084, 2.1128692626953125, 2.114933490753174, 2.117000102996826, 2.1190686225891113, 2.1211390495300293, 2.12321138381958, 2.1252856254577637, 2.1273622512817383, 2.1294407844543457, 2.131521224975586, 2.133604049682617, 2.135688304901123, 2.13777494430542, 2.139863967895508, 2.1419544219970703, 2.144047260284424, 2.14614200592041, 2.1482391357421875, 2.1503376960754395, 2.1524391174316406, 2.1545419692993164, 2.156647205352783, 2.1587538719177246, 2.1608633995056152, 2.1629743576049805, 2.1650876998901367, 2.167203426361084, 2.169320583343506, 2.1714401245117188, 2.1735615730285645, 2.175685405731201, 2.1778111457824707, 2.179938793182373, 2.1820688247680664, 2.1842007637023926, 2.1863350868225098, 2.1884708404541016, 2.1906094551086426, 2.192749500274658, 2.194891929626465, 2.1970362663269043, 2.1991829872131348, 2.201331615447998, 2.2034826278686523, 2.2056355476379395, 2.2077903747558594, 2.2099475860595703, 2.212106704711914, 2.214268207550049, 2.2164316177368164, 2.218596935272217, 2.220764636993408, 2.2229342460632324, 2.2251062393188477, 2.2272801399230957, 2.2294564247131348, 2.2316346168518066, 2.2338151931762695, 2.2359976768493652, 2.2381820678710938, 2.2403693199157715, 2.242558002471924, 2.244749069213867, 2.2469425201416016, 2.2491378784179688, 2.2513351440429688, 2.2535347938537598, 2.2557363510131836, 2.2579402923583984, 2.2601466178894043, 2.262354850769043, 2.2645654678344727, 2.266777992248535, 2.2689924240112305, 2.271209716796875, 2.273428440093994, 2.2756495475769043, 2.2778730392456055, 2.2800989151000977, 2.2823266983032227, 2.2845563888549805, 2.2867884635925293, 2.289022922515869, 2.291259288787842, 2.2934980392456055, 2.295738697052002, 2.2979817390441895, 2.300227165222168, 2.3024744987487793, 2.3047242164611816, 2.306975841522217, 2.309229850769043, 2.31148624420166, 2.31374454498291, 2.316005229949951, 2.318267822265625, 2.32053279876709, 2.3228001594543457, 2.3250694274902344, 2.3273415565490723, 2.3296151161193848, 2.3318915367126465, 2.334169864654541, 2.3364500999450684, 2.338733196258545, 2.3410181999206543, 2.3433055877685547, 2.345594882965088, 2.347886562347412, 2.3501806259155273, 2.3524770736694336, 2.3547754287719727, 2.3570761680603027, 2.3593788146972656, 2.3616843223571777, 2.3639917373657227, 2.3663015365600586, 2.3686132431030273, 2.370927333831787, 2.373243808746338, 2.3755626678466797, 2.3778839111328125, 2.380207061767578, 2.3825325965881348, 2.3848605155944824, 2.387190818786621, 2.3895230293273926, 2.391857624053955, 2.3941946029663086, 2.396533966064453, 2.3988752365112305, 2.401218891143799, 2.4035654067993164, 2.4059133529663086, 2.40826416015625, 2.4106173515319824, 2.4129724502563477, 2.415329933166504, 2.417689800262451, 2.4200520515441895, 2.4224166870117188, 2.424783229827881, 2.427152633666992, 2.4295239448547363, 2.4318976402282715, 2.4342737197875977, 2.436652183532715, 2.439032554626465, 2.441415786743164, 2.4438014030456543, 2.4461889266967773, 2.4485788345336914, 2.4509711265563965, 2.4533658027648926, 2.4557628631591797, 2.458162307739258, 2.460564136505127, 2.462968349456787, 2.46537446975708, 2.4677834510803223, 2.4701943397521973, 2.4726080894470215, 2.4750237464904785, 2.4774417877197266, 2.479862689971924, 2.482285499572754, 2.484710693359375, 2.487138271331787, 2.4895682334899902, 2.4920010566711426, 2.4944357872009277, 2.496872901916504, 2.499312400817871, 2.5017542839050293, 2.5041985511779785, 2.5066452026367188, 2.50909423828125, 2.5115456581115723, 2.5139999389648438, 2.516456127166748, 2.5189146995544434, 2.5213756561279297, 2.5238394737243652, 2.5263051986694336, 2.528773307800293, 2.5312442779541016, 2.533717155456543, 2.5361928939819336, 2.538670539855957, 2.5411510467529297, 2.5436339378356934, 2.546119213104248, 2.5486068725585938, 2.5510969161987305, 2.553589344024658, 2.556084632873535, 2.558581829071045, 2.5610814094543457, 2.5635838508605957, 2.5660886764526367, 2.5685958862304688, 2.571105480194092, 2.573617458343506, 2.576131820678711, 2.5786490440368652, 2.5811686515808105, 2.5836901664733887, 2.586214542388916, 2.5887417793273926, 2.591270923614502, 2.5938024520874023, 2.596336841583252, 2.5988736152648926, 2.601412773132324, 2.603954315185547, 2.6064987182617188, 2.6090455055236816, 2.6115946769714355, 2.6141462326049805, 2.6167001724243164, 2.6192569732666016, 2.6218161582946777, 2.624377727508545, 2.626941680908203, 2.6295084953308105, 2.632077217102051, 2.6346492767333984, 2.637223243713379, 2.6398000717163086, 2.6423792839050293, 2.644960880279541, 2.6475448608398438, 2.6501317024230957, 2.6527209281921387, 2.655313014984131, 2.657907009124756, 2.6605043411254883, 2.6631035804748535, 2.665705680847168, 2.6683101654052734, 2.67091703414917, 2.6735267639160156, 2.6761388778686523, 2.67875337600708, 2.681370735168457, 2.683990478515625, 2.686613082885742, 2.689237594604492, 2.6918654441833496, 2.69449520111084, 2.6971278190612793, 2.699763298034668, 2.7024011611938477, 2.7050414085388184, 2.70768404006958, 2.710329532623291, 2.712977886199951, 2.7156286239624023, 2.7182817459106445]
size(return[]) == 1025
===========================================================================
org.apache.commons.math3.util.FastMathLiteralArrays.loadExpFracB():::ENTER
===========================================================================
org.apache.commons.math3.util.FastMathLiteralArrays.loadExpFracB():::EXIT
org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_A == orig(org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_A)
org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_A[] == orig(org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_A[])
org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_B == orig(org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_B)
org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_B[] == orig(org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_B[])
org.apache.commons.math3.util.FastMathLiteralArrays.EXP_FRAC_A == orig(org.apache.commons.math3.util.FastMathLiteralArrays.EXP_FRAC_A)
org.apache.commons.math3.util.FastMathLiteralArrays.EXP_FRAC_A[] == orig(org.apache.commons.math3.util.FastMathLiteralArrays.EXP_FRAC_A[])
org.apache.commons.math3.util.FastMathLiteralArrays.EXP_FRAC_B == orig(org.apache.commons.math3.util.FastMathLiteralArrays.EXP_FRAC_B)
org.apache.commons.math3.util.FastMathLiteralArrays.EXP_FRAC_B[] == orig(org.apache.commons.math3.util.FastMathLiteralArrays.EXP_FRAC_B[])
org.apache.commons.math3.util.FastMathLiteralArrays.LN_MANT == orig(org.apache.commons.math3.util.FastMathLiteralArrays.LN_MANT)
org.apache.commons.math3.util.FastMathLiteralArrays.LN_MANT.getClass().getName() == orig(org.apache.commons.math3.util.FastMathLiteralArrays.LN_MANT.getClass().getName())
org.apache.commons.math3.util.FastMathLiteralArrays.LN_MANT[] == orig(org.apache.commons.math3.util.FastMathLiteralArrays.LN_MANT[])
return has only one value
return[] == [0.0, 1.552583321178453E-10, 1.2423699995465188E-9, 4.194022929828008E-9, 9.94381632344361E-9, 1.9426261544163577E-8, 3.3576783010266685E-8, 5.3331719086630523E-8, 7.962832297769345E-8, 1.1340476362128895E-7, -8.281845251820919E-8, -3.126416414805498E-8, 3.058997113995161E-8, 1.0368579417304741E-7, -4.9452513107409435E-8, 4.8955889659397494E-8, -7.698155155722897E-8, 5.051784853384516E-8, -4.443661736519001E-8, 1.1593958457401774E-7, 5.575759739697068E-8, 1.4385227981629147E-8, -7.227368462584163E-9, -8.129108387083023E-9, 1.263202100290635E-8, 5.600896265625552E-8, -1.154629885168314E-7, -2.399186832888246E-8, 9.295948298604103E-8, -2.070841011504222E-9, -6.97066538508643E-8, -1.0898941254272996E-7, -1.1895963756343625E-7, -9.865691193993138E-8, -4.711988033385175E-8, 3.6613751875298095E-8, -8.491135959370133E-8, 6.610611940107793E-8, 1.3794148633283659E-8, -2.462631860370667E-9, 1.830278273495162E-8, 7.705834203598065E-8, -6.364563771711373E-8, 7.39978436695387E-8, 1.4122417557484554E-8, -3.881598887298574E-9, 2.0958481826069642E-8, 8.96162975425619E-8, -3.535214171178576E-8, -1.1455271549574576E-7, 9.140964977432485E-8, 1.0667524445105459E-7, -6.777752790396222E-8, 4.586785041291296E-8, -2.8245462428022094E-8, -5.071761314397018E-8, -2.0566368810068663E-8, 6.319146317890346E-8, -3.687854305539139E-8, -8.137269363160008E-8, -6.930491127388755E-8, 3.1184473002226595E-10, -1.0995299963140049E-7, 7.772668425499348E-8, 8.750367485925089E-8, -7.963112393823186E-8, 5.415131809829094E-8, 1.3006683896462346E-8, 3.634736373360733E-8, -1.132504393233074E-7, 4.2046187038837375E-8, 2.6396811618001066E-8, 7.92177143584738E-8, -3.691100820545433E-8, -8.257112559083188E-8, -5.676200971739166E-8, 4.151794514828518E-8, -2.5147255753587636E-8, -1.7335469415174996E-8, 6.595784859136531E-8, -1.2680354928109105E-8, -1.3824992526093461E-8, 6.353142754175797E-8, -1.8021197722549054E-8, -1.9054827792903468E-8, 6.144098503892116E-8, -1.3940903373095247E-8, -5.7694907599522404E-9, 8.696863522320578E-8, 2.6869297963554945E-8, 5.3366470162689076E-8, -7.094204160127543E-8, -1.0662027949814858E-7, -5.26498707801063E-8, 9.198855229106814E-8, 8.989677431456647E-8, -5.790384407322479E-8, -1.1197236522467887E-7, -7.12854317090566E-8, 6.51813137650059E-8, 6.003465022483798E-8, -8.569906238528267E-8, 1.0584469687624562E-7, -7.956144278281947E-8, 7.43676272093501E-8, 9.182512565315022E-8, -2.6157563728873715E-8, -4.012947040998503E-8, 5.094280572218447E-8, 9.675095351161728E-9, 7.552139802281006E-8, 1.1099566726533146E-8, 5.58656252899437E-8, -2.756054703800197E-8, 2.791018095971047E-10, -9.799351869734466E-8, -8.291832428736212E-8, 4.654720780112994E-8, 5.302803981406403E-8, -6.243126731995636E-8, -6.036655299348577E-8, 6.026878587378257E-8, 6.210379583313526E-8, -5.381287389094251E-8, -4.8012970400697E-8, 8.055420567281602E-8, 9.452180117175641E-8, -5.057430382371206E-9, 2.1288872215266507E-8, -6.380305844689076E-8, -2.0858800984600168E-8, -8.724006061713588E-8, -2.3470351753125604E-8, -6.690931338790221E-8, 2.192160831263035E-8, 5.6648446166177225E-9, -1.1461755745719884E-7, -9.944393412663547E-8, 5.2249837964645906E-8, 1.0311034276196487E-7, 5.4203784018566126E-8, -9.340259278913173E-8, -1.0022192034216903E-7, 3.481513333662908E-8, 7.436036590244714E-8, 1.9485199912395296E-8, 1.0968068384729757E-7, 1.0760175582979094E-7, 1.4322981952798675E-8, 6.933855730431659E-8, 3.530656968851287E-8, -8.669526204279467E-8, -5.7169586962345785E-8, -1.1345515834332824E-7, -1.605251622332555E-8, -2.298302779758532E-9, -7.110952399338234E-8, 1.70164513845372E-8, 2.4746155561368937E-8, -4.6834239957353325E-8, 4.1781076667923185E-8, 5.326182134294869E-8, -1.1302647617762544E-8, 8.759667154796094E-8, 1.126326877851684E-7, 6.48979555673987E-8, -5.451390316294111E-8, -6.0896188500539086E-9, -2.7152010585461855E-8, -1.1660424775832058E-7, -3.492984900939992E-8, -1.944841848873016E-8, -6.905990750285027E-8, 5.575538653428039E-8, 1.1768108384670781E-7, 1.178204606523101E-7, 5.727787111340131E-8, -6.284125161007433E-8, -3.0118152047565877E-9, -5.448044533034374E-10, -5.433154287341921E-8, 7.515630833946181E-8, -8.780756503572527E-8, -6.527407547535494E-8, -9.45487863616303E-8, 6.390098458668406E-8, -6.564672913105876E-8, -5.238488022920792E-9, 7.824500749252316E-9, -2.5339299158309795E-8, -1.036103313062145E-7, 1.2550633697348567E-8, 8.584676196065558E-8, 1.1740089468291563E-7, 1.0833697012353316E-7, 5.978002467397905E-8, -2.7143806069290897E-8, 8.711129287069315E-8, -7.316349947981893E-8, -3.00015852582934E-8, -2.0691000399732483E-8, -4.4100097152254264E-8, -9.909612209943178E-8, 5.38733640215475E-8, -6.0893829005035E-8, 3.457553391989844E-8, 1.0300006058273187E-7, -9.290053015365092E-8, -7.514966995961323E-8, -8.10254145615142E-8, -1.0938612624777085E-7, 7.932952721989251E-8, 9.428257290008738E-9, -7.952636967837795E-8, 5.203033137154554E-8, -7.159157201731446E-8, 2.7593424989059015E-8, 1.1231621190000476E-7, -5.469119869891027E-8, 4.560067256086347E-9, 5.280427179595944E-8, 9.119538242455128E-8, -1.1753008498403413E-7, -9.537874867759656E-8, -7.96118345325538E-8, -6.907085854395348E-8, -6.259620482221904E-8, -5.902712448725381E-8, -5.720173456146447E-8, -5.5957016861703E-8, -5.412881689012608E-8, -5.0551842723970724E-8, -4.405966390424518E-8, -3.348471032333413E-8, -1.7658271111516935E-8, 4.589506477601956E-9, 3.4429618182751655E-8, 7.303420385174346E-8, -1.168420305422519E-7, -5.718749537552229E-8, 1.4754809136835937E-8, 1.001616104682875E-7, -3.8207793300052055E-8, 7.766278405014509E-8, -2.7883635712109803E-8, -1.1524714043067699E-7, 5.517333625963128E-8, 7.724278756071081E-9, -1.7990934773848504E-8, -2.0786347668702902E-8, 5.251554594269693E-10, 4.7131849857076246E-8, -1.1819540733893871E-7, -1.742885956093543E-8, 1.1220467571570283E-7, 3.347954541376715E-8, -1.399157980498908E-8, -2.9013441705763093E-8, -1.0389614239253089E-8, 4.307749759934266E-8, -1.0583192018912101E-7, 2.0919226941745448E-8, -5.2305110482722706E-8, -8.588407110184028E-8, -7.861419797923639E-8, -2.929085835358592E-8, 6.329175751021792E-8, -3.807794163054899E-8, -9.377320954068088E-8, -1.0258469865953145E-7, -6.330187984612758E-8, 2.5286958775281306E-8, -7.40238661307607E-8, 1.1681688445204168E-7, -1.1623125976292733E-7, -5.6696107089038004E-8, 5.822140627806124E-8, -8.678466172071259E-9, -1.7757121899175995E-8, 3.220665454652531E-8, -9.598330731102836E-8, 7.573375369829243E-8, 7.174547784678893E-8, -1.0672213971363184E-7, 1.8395252217743006E-8, -2.8511112548600118E-8, -7.79306270997787E-9, 8.178019529487065E-8, 3.0220784595602374E-9, -4.4156343103298585E-9, 6.07014616741277E-8, -3.8809601937571554E-8, -6.329342805230603E-8, -1.1511990258493999E-8, 1.177739474561431E-7, 8.738625278484571E-8, -1.0143341551207646E-7, 2.9394972678456236E-8, 4.278345398213486E-9, 6.28805835150457E-8, -3.197037359731606E-8, -4.060821046423735E-8, 3.82160283750664E-8, -3.2666060441373307E-8, -1.3584500601329896E-8, 9.671332777035621E-8, 6.10626893063691E-8, 1.1913723189736356E-7, 3.3774671482641995E-8, 4.4651109654500895E-8, -8.539328154875224E-8, -1.166799420361101E-7, -4.794765976694151E-8, -1.1635256954820579E-7, -8.221241452580445E-8, 5.5737717715868425E-8, 6.034539636024073E-8, -6.712199323081945E-8, -8.697724830833087E-8, 2.0494942705297694E-9, -3.718924074653624E-8, 3.499747150995707E-8, -1.8535359161566028E-8, 4.1905679587096103E-8, -2.0821912536551675E-8, 3.297776915751238E-8, -3.3835280846270374E-8, 1.8437339356553904E-8, -4.734187609526424E-8, 8.527976799299225E-9, -5.1088103279787804E-8, 1.3513294656751725E-8, -3.480032127343472E-8, 4.367697180842916E-8, 1.1815196363705356E-8, 1.0932279207149782E-7, 9.907230065250944E-8, -1.764389559496152E-8, -1.1135725625095859E-9, -8.846040040259342E-8, -3.996962588736431E-8, -9.276238757878814E-8, -7.12139818505956E-9, -2.016525972830718E-8, 1.0782585410141121E-7, -9.868269632073771E-8, 7.686861750031585E-8, -7.947087669425045E-8, -8.955768055535647E-8, 4.791582240886607E-8, 9.583994718167641E-8, 5.5524866689108584E-8, -7.171796605211277E-8, -4.6157237582310713E-8, -1.0489751005162237E-7, -8.204903560604627E-9, 6.818588687884566E-9, -5.850916105103205E-8, 3.5549586192569994E-8, 5.1896700056778354E-8, -8.146080588190463E-9, 9.516285362051742E-8, -1.1368933260611668E-7, 8.187871486648885E-8, -3.206182925646474E-8, 2.265440168347286E-8, 8.938334752179552E-9, -7.187922490287331E-8, 1.9952407216533937E-8, 4.734805892507655E-8, 1.1642439930208906E-8, -8.582843599651953E-8, -5.3086706437795354E-9, 1.6121782610217253E-8, -2.0197142620980974E-8, -1.129242035557684E-7, -2.2298267863810133E-8, 1.4605950309628873E-8, -8.663710700190489E-10, -6.736873974532501E-8, 5.486523121881414E-8, -1.0965249168570443E-7, -8.27343074126263E-8, -1.0144703278439455E-7, 7.39809943048038E-8, -3.193297932837415E-8, 5.900393284617182E-8, 1.0973020465397083E-7, -1.1681436418514489E-7, 9.5985669644661E-8, 3.423560333632085E-8, -6.22836197265283E-8, 4.621027492345726E-8, -1.1575484316683829E-7, -6.997545435826076E-8, -5.3502441327259514E-8, -6.49667713553005E-8, -1.029980741248172E-7, 7.219393868923887E-8, -1.4854841678687828E-8, 1.1406713393562271E-7, -1.650155887561251E-8, 7.165331603232264E-8, -9.692697614257269E-8, -4.402550702194912E-8, -6.679737442193143E-9, 1.6492800268960003E-8, 2.68759245092879E-8, 2.5854805721793077E-8, 1.4815967715704613E-8, -4.852711011229633E-9, -3.176199594915881E-8, -6.452129525125173E-8, -1.01738658407525E-7, 9.639780418418697E-8, 5.4445606140746644E-8, 1.2219361033150988E-8, -2.8883532688356087E-8, -6.746431126005811E-8, -1.0212284427080097E-7, 1.0696094577483825E-7, 8.43527683868743E-8, 6.987544103716777E-8, 6.493457409236137E-8, 7.093715125593688E-8, 8.929153091001965E-8, -1.1701113164306871E-7, -6.972256643013266E-8, -5.848862070736576E-9, 7.602385197610123E-8, -6.110775144284437E-8, 6.101012058093429E-8, -3.304167134225169E-8, -1.0342514383702196E-7, 8.969907328603505E-8, 7.091600108064668E-8, 8.006778743052707E-8, 1.1857939200074815E-7, -5.0541412403312774E-8, 5.0970277930552287E-8, -5.229355472795119E-8, 1.1793478462381443E-7, 8.625007227318527E-8, 9.250422086873268E-8, -1.0028661472061573E-7, -1.384914052949463E-8, 1.1483560326413004E-7, 4.878798101459259E-8, 2.7866921183936055E-8, 5.3514180410849046E-8, -1.1124565511436785E-7, 1.186914813275767E-8, -5.253258132241335E-8, -6.458486486369316E-8, -2.2838888809969377E-8, 7.415557606805398E-8, -1.0568403170659571E-8, -3.7139182948393606E-8, -4.1022790876160215E-9, 8.999821367768787E-8, 8.201043988912348E-9, -9.616457442665051E-9, 3.8005886250603055E-8, -8.588890051473289E-8, 9.699937202692456E-8, 1.11298006674538E-7, -4.1527104733570825E-8, 1.1682852007826251E-7, 1.1099648061301941E-7, -5.755303038890997E-8, 8.948877445235827E-8, 7.675780395028194E-8, -9.427143563390596E-8, 5.471416081500162E-8, 4.8354824064383506E-8, -1.118706134478866E-7, 5.235528379688445E-8, 6.567708120053687E-8, -7.042204992948526E-8, -1.1603891006723397E-7, -6.968742825553785E-8, 7.01199184127881E-8, 6.645352711199266E-8, -7.919617109348822E-8, 1.1149986927391714E-7, -7.522074418324674E-8, 7.739252980388984E-8, 9.39987974788905E-8, -2.390421480210064E-8, -3.639873824357815E-8, 5.8015881615938497E-8, 2.2423186335040668E-8, 9.674534330665206E-8, 4.4068830785712375E-8, 1.0431875573076199E-7, 4.0584538834428926E-8, 9.279423236781974E-8, 2.404020521381534E-8, 7.425346071427343E-8, 6.529321706138789E-9, 6.080174837146273E-8, 1.6902327633329284E-10, 6.456806922371733E-8, 1.7100134295216033E-8, 9.770510970673519E-8, 6.94872148530716E-8, -6.602926393514549E-8, -6.889997193778161E-8, 6.240235720677117E-8, 9.098790295810902E-8, 1.8386917534879182E-8, 8.454972737414241E-8, 5.259099728747365E-8, -7.595453077213505E-8, -6.113203624663034E-8, 9.859622328905143E-8, -7.206766550807255E-8, -9.474579567171831E-8, 3.210408693366267E-8, 7.160716418525417E-8, 2.530870537724554E-8, -1.0524451040704701E-7, -8.008561371849434E-8, 1.0233519853128553E-7, -3.326791455362767E-8, -8.504961764629757E-9, -6.024017201863256E-8, 5.1500902632092514E-8, 8.98570720774568E-8, 5.638724693948384E-8, -4.734813904255994E-8, 1.8631451577542948E-8, 1.7470924137873214E-8, -4.926470933588261E-8, 5.84096713620797E-8, 1.0364355880696472E-7, 8.800655674349468E-8, 1.3069802481237792E-8, 1.1882454749452428E-7, -6.999215748398631E-8, -7.49674072510849E-8, 1.054760847603618E-7, -3.920012014371067E-9, 7.526183084319617E-8, 1.0618494853096868E-7, 9.043280094115832E-8, 2.9590395068826316E-8, -7.475571347653619E-8, 1.7401160143611842E-8, 6.923209420670962E-8, 8.232829924979753E-8, 5.82825404854514E-8, -1.3108606792380822E-9, -9.485602512220194E-8, 1.7663064617118723E-8, 9.942682855652123E-8, -8.638275100090915E-8, -6.132639063569726E-8, -6.221897889344726E-8, -8.745525834919404E-8, 1.029901759234897E-7, 3.3888561478632076E-8, -5.47315553588771E-8, 7.715994473741065E-8, -4.566098167230033E-8, 5.5257514455273825E-8, -9.530545662611411E-8, -1.889488909834863E-8, 4.769006625301079E-8, 1.0607041998938709E-7, -8.054981263802322E-8, -3.370929373457322E-8, 9.799164177397836E-9, 5.160291611526656E-8, 9.333090708652975E-8, -1.0180490545927503E-7, -5.533523366931846E-8, -4.044932340334176E-9, 5.370131904567218E-8, -1.1887814032213867E-7, -4.3307634616102625E-8, 4.363437558318513E-8, -9.482896784430338E-8, 1.9782818312325887E-8, -8.77224935488516E-8, 6.113879253864931E-8, -8.822335132515693E-9, -5.753754066078771E-8, -8.335545536862392E-8, -8.462309712606694E-8, -5.968586877433824E-8, -6.887556547891059E-9, 7.542967150507818E-8, -4.949331199790077E-8, 9.684172421525468E-8, 3.9260317944365246E-8, 1.784536881359796E-8, 3.426282345243592E-8, 9.018025618601154E-8, -5.1151708476133135E-8, 8.877492215808044E-8, 3.479545684576179E-8, 2.7002575714977818E-8, 6.707201545505014E-8, -8.173742908533777E-8, 5.909041310777802E-8, 1.439903710393587E-8, 2.4289317341982113E-8, 9.044519282818302E-8, -2.3866331257845713E-8, -7.853944465095286E-8, -7.188526769607005E-8, -2.2132706360079843E-9, -1.0624985110080394E-7, 9.453598391231829E-8, -1.134160131581847E-7, -1.315295870404327E-8, -7.981320644583728E-8, -7.327771300038971E-8, 8.155647334672472E-9, -7.222791579580787E-8, -7.430436987497092E-8, 3.633404807819848E-9, -7.512438321498593E-8, -7.044869765481105E-8, 1.9372589859580955E-8, -4.2365298585101096E-8, -1.552830824758035E-8, 1.0160071259930585E-7, 7.232201430620959E-8, -1.0164389431039905E-7, 5.826233477413577E-8, 7.6927415825689E-8, -4.392309439525734E-8, -6.414337408955734E-8, 1.799550702470095E-8, -3.4194410638967946E-8, 1.9437762419688045E-8, -5.7792549966531335E-8, -2.5731071572354522E-8, 1.173595905705643E-7, -1.0361863127101014E-7, 2.8330789837569332E-8, 3.81131861433539E-8, -7.252724942149532E-8, -6.342604067787756E-8, 6.716441526213986E-8, 8.257484966196574E-8, -1.5443717968117592E-8, 1.3280021798948244E-8, -6.79180673261558E-8, -1.8863249269709046E-8, -7.62162303263991E-8, 2.011589233663723E-10, -2.62683511147141E-8, 8.455684903712996E-8, 9.602293320384794E-8, 9.896378545255258E-9, 6.636396724067746E-8, 2.8777050870552646E-8, -1.0109271059094341E-7, -8.305334708631055E-8, 8.467026501338835E-8, -7.29821745001452E-8, -7.739491336852633E-8, 7.321238022013781E-8, -9.621538067089515E-8, -1.0705722541811197E-7, 4.247240125405735E-8, 1.1574222007764044E-7, 1.145412771487496E-7, 4.066036653218687E-8, -1.0410796803072171E-7, -7.955085231106037E-8, 1.1612776191572459E-7, 7.888519481107568E-9, 7.436813814737735E-8, 7.894935661289349E-8, 2.343525263620692E-8, -9.036933434595339E-8, -2.2239222395888823E-8, -8.784622656707742E-9, -4.819540032304379E-8, 9.975892708522332E-8, -3.9945124955316294E-8, 1.1345047468988893E-8, 1.702808472925844E-8, -2.10770182066344E-8, -1.0114948914089626E-7, 1.70518021921727E-8, 9.693260855961159E-8, -9.809953482725758E-8, -8.937957126662392E-8, -1.134963954323427E-7, 6.980004387880031E-8, -1.4494150014095534E-8, 1.122932337832262E-7, -2.483811732227808E-8, 5.278759515330048E-8, 1.0859222881334994E-7, -9.400056055939758E-8, -7.630957994128623E-8, -7.490757191850264E-8, -8.794689652049879E-8, -1.1357810855950775E-7, 8.846862323478745E-8, 4.32092015744956E-8, -9.082923009890997E-9, -6.655106680680314E-8, 1.1108184705020206E-7, 4.8838973948592766E-8, -1.2998975819628988E-8, -7.25680516883106E-8, -1.280024819379844E-7, -1.7743467191652895E-7, -2.1899520225809197E-7, 2.2602433110285232E-7, 2.0582268590356215E-7, 1.9911192455808124E-7, 2.0776878313278689E-7, 2.3367183133931002E-7, -1.9813568387704588E-7, -1.320972037315105E-7, -4.316580502355056E-8, 7.054443447243064E-8, 2.109212796025238E-7, -9.698281856949837E-8, 1.0239791185239086E-7, -1.4271754202157014E-7, 1.232402895636637E-7, -5.150590480969644E-8, -1.882201085012735E-7, 1.918355503889933E-7, 1.368893262241355E-7, 1.256828068633383E-7, 1.601222826656464E-7, -2.3472125169205568E-7, -1.032634625827871E-7, 7.957037517331382E-8, -1.6114314525832115E-7, 1.3018591370778052E-7, 1.8007284821359149E-9, -6.75421764491544E-8, -7.592155950645605E-8, -2.1414301981236817E-8, 9.79045937979623E-8, -1.9287515190177685E-7, 6.184953843236509E-8, -8.966500602352001E-8, -1.686490951669855E-7, -1.7316830893872364E-7, -1.0128633727463388E-7, 4.8935021740786486E-8, -1.9740129448026905E-7, 1.1532102163380318E-7, 3.5371542244169364E-8, 4.153321337726989E-8, 1.3575372396796738E-7, -1.5685449228299222E-7, 1.1933437776279623E-7, 1.2599421120614435E-8, 1.7331079674066365E-9, 8.869266069401045E-8, -2.013999442282902E-7, 8.709065843311144E-8, 2.453117120472083E-9, 2.3489472779602617E-8, 1.5216652792122652E-7, -8.638415150333099E-8, -2.1335475961524608E-7, -2.2677272333821516E-7, -1.246635423141374E-7, 9.494921297991565E-8, -4.27932550865546E-8, -5.907349480138712E-8, 4.809072216941908E-8, -1.9615359732789476E-7, 1.6385396676990034E-7, 1.7642714221524228E-7, -1.564440844355254E-7, 1.2090653407564583E-7, 5.679855838941285E-8, 1.3006497185242537E-7, -1.341336085949317E-7, 2.1987686050231372E-7, -2.3641341460419062E-7, -7.048932272279454E-8, -2.3401958604540354E-7, 2.2867766559333004E-7, -1.1089952719756529E-7, 1.7977178878541792E-7, 1.4903074102418675E-7, -2.011072593789072E-7, 8.504948422097802E-8, 5.5846006716348844E-8, 1.9014079059505456E-7, 1.3119976852347583E-8, 3.645999732952202E-9, 1.6374611405314333E-7, 1.8612397134087598E-8, 4.7113225346448296E-8, -2.2555535676499395E-7, 1.5631615647329739E-7, -2.3574653182047758E-7, 3.08072210937242E-8, 4.344259288116142E-9, 1.6374489573868447E-7, 3.42171232580676E-8, 9.46452492584643E-8, -1.297587351085525E-7, -1.601065201853145E-7, 5.6550495386976275E-9, -1.0725602261510391E-7, -1.9945408945084193E-8, -2.071910882200156E-7, -1.900947109027913E-7, 3.34069282059055E-8, -1.145810806477298E-8, 1.5421457732308477E-7, 5.5657084775121975E-8, 1.7177785285061278E-7, 2.7813027425289027E-8, 1.0267509648109748E-7, -7.839574072711142E-8, -3.648293887796095E-8, 2.3049492079013518E-7, -2.290530257391564E-7, 1.747018414872141E-8, 1.8477759656842807E-8, -2.2394073401050633E-7, -2.3085653185818848E-7, -1.7598351175286083E-10, -6.640551220774385E-9, 2.2868466674913266E-7, 2.3106230530437902E-7, 2.594209135294356E-9, 2.2221434720602702E-8, -1.847872222755186E-7, -1.3948659218254467E-7, 1.6023339607737848E-7, -2.3718944120137026E-7, 1.0087056692827474E-7, 2.228553660510707E-7, 1.3088328582956644E-7, -1.7292527438195104E-7, -2.0961068531216087E-7, 2.2951597845188004E-8, 5.005103745740068E-8, -1.2618366811281002E-7, -2.6784582477238417E-8, -1.2645600379949252E-7, 5.3774170051560117E-8, 3.9205810725333715E-8, -1.6802196396307013E-7, -8.893078799284047E-8, -1.9821451970481713E-7, -1.689060694498032E-8, -1.9648717830943396E-8, -2.0433926409457167E-7, -9.1973399031975E-8, -1.5723449006087263E-7, 7.887051614592191E-8, 1.4166246290402286E-7, 3.330146018487787E-8, 2.3278688667580978E-7, -2.1139124097042925E-7, 1.334449995534113E-7, -1.6104730195920897E-7, -1.3902314592614197E-7, 2.0169027167169864E-7, -9.040643863751471E-8, -5.946190852360168E-8, -1.8013411720005014E-7, 2.6595401669835947E-8, 8.607292924069425E-8, 4.84038176769263E-10, -2.2798356346688802E-7, -1.203028719549339E-7, -1.5111906039270745E-7, 1.5859915617670956E-7, -1.426262681506497E-7, -9.892260062323546E-8, -1.8492643515928268E-7, 7.840210076743552E-8, 2.1643071541578027E-7, 2.313664294893465E-7, 1.2541842003811723E-7, -9.920197743470107E-8, 3.655589133934081E-8, 5.807052689551411E-8, -3.244024724169575E-8, -2.327564406466327E-7, -6.38187356721971E-8, -2.3995994000400915E-10, -3.9793609609721186E-8, -1.802510054588344E-7, 5.745586744591196E-8, 1.987228872666507E-7, -2.3105188606976847E-7, 2.0088042407239129E-7, 6.624793114025702E-8, -1.5587043044056635E-7, 1.3606464059428694E-8, 1.0008761540741556E-7, 1.058213771597129E-7, 3.3058299602856804E-8, -1.1594886810010702E-7, 1.378919824418909E-7, -1.5683631181406778E-7, -4.4200075770425176E-8, 1.2250985436706623E-9, -1.8297013058336644E-8, -1.005004229646318E-7, 2.337202285991116E-7, 3.296104292035678E-8, -2.23668185816307E-7, -5.7055442971184756E-8, 5.82391923137467E-8, 1.244950238958056E-7, 1.4399358260219398E-7, 1.1901862840583523E-7, 5.1856152603337505E-8, -5.520562000491495E-8, -1.9987622893254038E-7, 9.697418238031897E-8, -1.1603376405901542E-7, 1.170714288147407E-7, -1.550851303094034E-7, 2.3472546699189522E-8, 1.78211222185955E-7, -1.6540009048230807E-7, -5.137865010872577E-8, 4.57490653163866E-8, 1.2829599363166098E-7, 1.985773325073412E-7, -2.1792661654989742E-7, -1.652218131743459E-7, -1.178234251477505E-7, -7.34071933723896E-8, -2.9646587857612632E-8, 1.5787194498912167E-8, 6.52252321321176E-8, 1.2100088103262734E-7, 1.8544977697201776E-7, -2.159273204728711E-7, -1.2711589287782304E-7, -2.2610609958205195E-8, 9.993330547750349E-8, -2.33974236642384E-7, -6.830955860192377E-8, 1.2244183812423448E-7, -1.3620325027706252E-7, 1.1178574689680927E-7, -8.490693031052439E-8, 2.2975389535985893E-7, 1.0445707500867073E-7, 1.8405243253979117E-8, -2.6033812325397097E-8, -2.6489990728664908E-8, 1.9409124727247465E-8, 1.1403826867020365E-7, -2.1706266226554237E-7, -1.7839974359909697E-8, 2.3725087624341041E-7, 7.37567604176979E-8, -2.9098805266958403E-8, -6.892713087722722E-8, -4.333719263537725E-8, 5.006436936098099E-8, 2.1367325342138113E-7, -2.6949659655907758E-8, -1.9256682968755803E-7, 1.960616287777496E-7, 1.876664741413704E-7, -2.1534486893602122E-7, -5.688830723853217E-8, 1.8861113228746644E-7, 4.6730779443102234E-8, -3.275360514112964E-9, 4.1011920825226876E-8, 1.820141955326842E-7, -5.468175655175594E-8, -1.8981247089866317E-7, -2.209492705846306E-7, -1.4566110577298295E-7, 3.848544860465368E-8, -1.429109630340783E-7, -2.105749999899302E-7, -1.6206609756618993E-7, 5.058693461947143E-9, -1.8359244902596882E-7, 2.2810251664891242E-7, -1.8791776732592608E-7, 1.3106843166204263E-9, -1.5543153797220025E-7, -1.7884997059081524E-7, -6.648490725635754E-8, 1.8412576154421806E-7, 9.860939269906055E-8, 1.5627006743114285E-7, -1.17260039161597E-7, 2.3416513526430908E-7, -2.1749172296989992E-7, -3.9242560971295217E-8, -1.822826971477839E-7, -1.6729355321895212E-7, 8.208715337901827E-9, -1.301267783434537E-7, -1.029741755377153E-7, 9.215765583599035E-8, -1.907487641016455E-8, 4.2661388254716074E-8, -1.9697226735187428E-7, 2.1819935527247946E-7, -1.398318929248588E-7, 1.6195123407015624E-7, 1.723826394935661E-7, -1.0602700638269148E-7, -1.9392742205954563E-7, -8.880302882034106E-8, 2.1186420987133E-7, 2.3375763256988976E-7, -2.0599801342241997E-8, -7.184550924856607E-8, 8.254840070367875E-8]
size(return[]) == 1025
===========================================================================
org.apache.commons.math3.util.FastMathLiteralArrays.loadExpIntA():::ENTER
===========================================================================
org.apache.commons.math3.util.FastMathLiteralArrays.loadExpIntA():::EXIT
org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_A == orig(org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_A)
org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_A[] == orig(org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_A[])
org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_B == orig(org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_B)
org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_B[] == orig(org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_B[])
org.apache.commons.math3.util.FastMathLiteralArrays.EXP_FRAC_A == orig(org.apache.commons.math3.util.FastMathLiteralArrays.EXP_FRAC_A)
org.apache.commons.math3.util.FastMathLiteralArrays.EXP_FRAC_A[] == orig(org.apache.commons.math3.util.FastMathLiteralArrays.EXP_FRAC_A[])
org.apache.commons.math3.util.FastMathLiteralArrays.EXP_FRAC_B == orig(org.apache.commons.math3.util.FastMathLiteralArrays.EXP_FRAC_B)
org.apache.commons.math3.util.FastMathLiteralArrays.EXP_FRAC_B[] == orig(org.apache.commons.math3.util.FastMathLiteralArrays.EXP_FRAC_B[])
org.apache.commons.math3.util.FastMathLiteralArrays.LN_MANT == orig(org.apache.commons.math3.util.FastMathLiteralArrays.LN_MANT)
org.apache.commons.math3.util.FastMathLiteralArrays.LN_MANT.getClass().getName() == orig(org.apache.commons.math3.util.FastMathLiteralArrays.LN_MANT.getClass().getName())
org.apache.commons.math3.util.FastMathLiteralArrays.LN_MANT[] == orig(org.apache.commons.math3.util.FastMathLiteralArrays.LN_MANT[])
return has only one value
return[] == [0.0, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, 1.2167807682331913E-308, 3.3075532478807267E-308, 8.990862214387203E-308, 2.4439696075216986E-307, 6.64339758024534E-307, 1.8058628951432254E-306, 4.908843759498681E-306, 1.334362017065677E-305, 3.627172425759641E-305, 9.85967600992008E-305, 2.680137967689915E-304, 7.285370725133842E-304, 1.9803689272433392E-303, 5.3832011494782624E-303, 1.463305638201413E-302, 3.9776772027043775E-302, 1.0812448255518705E-301, 2.9391280956327795E-301, 7.989378677301346E-301, 2.1717383041010577E-300, 5.903396499766243E-300, 1.604709595901607E-299, 4.3620527352131126E-299, 1.1857289715706991E-298, 3.2231452986239366E-298, 8.761416875971053E-298, 2.381600167287677E-297, 6.473860152384321E-297, 1.7597776278732318E-296, 4.7835721669653157E-296, 1.3003096668152053E-295, 3.5346080979652066E-295, 9.608060944124859E-295, 2.6117415961302846E-294, 7.099449830809996E-294, 1.9298305829106006E-293, 5.245823134132673E-293, 1.4259627797225802E-292, 3.8761686729764145E-292, 1.0536518897078156E-291, 2.864122672853628E-291, 7.785491934690374E-291, 2.116316283183901E-290, 5.7527436249968E-290, 1.5637579898345352E-289, 4.250734424415339E-289, 1.1554696041977512E-288, 3.1408919441362495E-288, 8.537829238438662E-288, 2.320822576772103E-287, 6.308649765138419E-287, 1.7148689119310826E-286, 4.66149719271323E-286, 1.267126226441217E-285, 3.444406231880653E-285, 9.362866914115166E-285, 2.5450911557068313E-284, 6.918275021321188E-284, 1.880582039589629E-283, 5.111952261540649E-283, 1.3895726688907995E-282, 3.7772500667438066E-282, 1.026763015362553E-281, 2.791031173360063E-281, 7.586808748646825E-281, 2.0623086887184633E-280, 5.605936171588964E-280, 1.5238514098804918E-279, 4.1422578754033235E-279, 1.1259823210174452E-278, 3.060737220976933E-278, 8.319947089683576E-278, 2.2615958035357106E-277, 6.147655179898435E-277, 1.6711060014400145E-276, 4.542536646012133E-276, 1.2347896500246374E-275, 3.3565057475434694E-275, 9.123929070778758E-275, 2.4801413921885483E-274, 6.741722283079056E-274, 1.8325902719086093E-273, 4.981496462621207E-273, 1.3541112064618357E-272, 3.68085620656127E-272, 1.0005602916630382E-271, 2.719805132368625E-271, 7.393196131284108E-271, 2.0096791226867E-270, 5.462874707256208E-270, 1.4849631831943512E-269, 4.036548930895323E-269, 1.0972476870931676E-268, 2.9826282194717127E-268, 8.107624153838987E-268, 2.2038806519542315E-267, 5.990769236615968E-267, 1.628459873440512E-266, 4.4266130556431266E-266, 1.203278237867575E-265, 3.270849446965521E-265, 8.891090288030614E-265, 2.4168487931443637E-264, 6.569676185250389E-264, 1.7858231429575898E-263, 4.85437090269903E-263, 1.3195548295785448E-262, 3.5869215528816054E-262, 9.750264097807267E-262, 2.650396454019762E-261, 7.204525142098426E-261, 1.958392846081373E-260, 5.32346341339996E-260, 1.4470673509275515E-259, 3.9335373658569176E-259, 1.0692462289051038E-258, 2.9065128598079075E-258, 7.900720862969045E-258, 2.147638465376883E-257, 5.8378869339035456E-257, 1.5869022483809747E-256, 4.3136475849391444E-256, 1.1725710340687719E-255, 3.1873780814410126E-255, 8.66419234315257E-255, 2.35517168886351E-254, 6.402020300783889E-254, 1.740249660600677E-253, 4.7304887145310405E-253, 1.2858802448614707E-252, 3.495384792953975E-252, 9.501439740542955E-252, 2.582759362004277E-251, 7.020668578160457E-251, 1.908415302517694E-250, 5.1876107490791666E-250, 1.4101386971763257E-249, 3.8331545111676784E-249, 1.0419594359065132E-248, 2.8323395451363237E-248, 7.699097067385825E-248, 2.0928317096428755E-247, 5.688906371296133E-247, 1.5464049837965422E-246, 4.2035646586788297E-246, 1.1426473877336358E-245, 3.106037603716254E-245, 8.443084996839363E-245, 2.2950686306677644E-244, 6.238642390386363E-244, 1.695838923802857E-243, 4.6097680405580995E-243, 1.2530649392922358E-242, 3.4061835424180075E-242, 9.25896798127602E-242, 2.5168480541429286E-241, 6.841502859109196E-241, 1.8597132378953187E-240, 5.055224959032211E-240, 1.374152583940637E-239, 3.735333866258403E-239, 1.0153690688015855E-238, 2.7600590782738726E-238, 7.502618487550056E-238, 2.0394233446495043E-237, 5.543727690168612E-237, 1.5069412868172555E-236, 4.0962906236847E-236, 1.1134873918971586E-235, 3.026772467749944E-235, 8.227620163729258E-235, 2.2364990583200056E-234, 6.079434951446575E-234, 1.6525617499662284E-233, 4.4921289690525345E-233, 1.2210872189854344E-232, 3.3192593301633E-232, 9.02268127425393E-232, 2.4526190464373087E-231, 6.666909874218774E-231, 1.8122539547625083E-230, 4.926216840507529E-230, 1.3390847149416908E-229, 3.6400093808551196E-229, 9.894571625944288E-229, 2.689623698321582E-228, 7.31115423069187E-228, 1.9873779569310022E-227, 5.402252865260326E-227, 1.4684846983789053E-226, 3.991755413823315E-226, 1.0850715739509136E-225, 2.9495302004590423E-225, 8.017654713159388E-225, 2.179424521221378E-224, 5.924290380648597E-224, 1.6103890140790331E-223, 4.377491272857675E-223, 1.1899254154663847E-222, 3.2345523990372546E-222, 8.792425221770645E-222, 2.3900289095512176E-221, 6.496772856703278E-221, 1.7660059778220905E-220, 4.800501435803201E-220, 1.3049116216750674E-219, 3.5471180281159325E-219, 9.642065709892252E-219, 2.6209850274990846E-218, 7.124574366530717E-218, 1.9366601417010147E-217, 5.264388476949737E-217, 1.431009021985696E-216, 3.889885799962507E-216, 1.057380684430436E-215, 2.8742587656021775E-215, 7.813044552050569E-215, 2.1238058974550874E-214, 5.773102661099307E-214, 1.5692921723471877E-213, 4.2657777816050375E-213, 1.1595585743839232E-212, 3.1520070828798975E-212, 8.568043768122183E-212, 2.329035966595791E-211, 6.33097561889469E-211, 1.720937714565362E-210, 4.677993239821998E-210, 1.2716105485691878E-209, 3.456595573934475E-209, 9.396000024637834E-209, 2.55409795397022E-208, 6.942757623821567E-208, 1.887237361505784E-207, 5.13004286606108E-207, 1.3944901709366118E-206, 3.7906173667738715E-206, 1.0303966192973381E-205, 2.8009086220877197E-205, 7.613657850210907E-205, 2.0696069842597556E-204, 5.6257755605305175E-204, 1.5292444435954893E-203, 4.156916476922876E-203, 1.12996721591364E-202, 3.071569248856111E-202, 8.349390727162016E-202, 2.2695999828608633E-201, 6.1694117899971836E-201, 1.677020107827128E-200, 4.558612479525779E-200, 1.2391595516612638E-199, 3.3683846288580648E-199, 9.156218120779494E-199, 2.4889182184335247E-198, 6.765580431441772E-198, 1.839075686473352E-197, 4.999126524757713E-197, 1.3589033107846643E-196, 3.6938826366068014E-196, 1.0041012794280992E-195, 2.7294301888986675E-195, 7.419361045185406E-195, 2.016791373353671E-194, 5.482208065983983E-194, 1.490218341008089E-193, 4.050833763855709E-193, 1.101130773265179E-192, 2.993183789477209E-192, 8.136316299122392E-192, 2.2116799789922265E-191, 6.011969568315371E-191, 1.6342228966392253E-190, 4.4422779589171113E-190, 1.2075364784547675E-189, 3.282424571107068E-189, 8.92255448602772E-189, 2.425402115319395E-188, 6.592926904915355E-188, 1.79214305133496E-187, 4.871550528055661E-187, 1.3242245776666673E-186, 3.599615946028287E-186, 9.78476998200719E-186, 2.659776075359514E-185, 7.230020851688713E-185, 1.9653234116333892E-184, 5.34230278107224E-184, 1.4521887058451231E-183, 3.947457923821984E-183, 1.0730302255093144E-182, 2.9167986204137332E-182, 7.928680793406766E-182, 2.1552386987482013E-181, 5.858546779607288E-181, 1.5925182066949723E-180, 4.328913614497258E-180, 1.1767205227552116E-179, 3.198658219194836E-179, 8.694853785564504E-179, 2.363506255864984E-178, 6.42467573615509E-178, 1.746408207555959E-177, 4.747229597770176E-177, 1.2904307529671472E-176, 3.507754341050756E-176, 9.535066345267336E-176, 2.591899541396432E-175, 7.045512786902009E-175, 1.9151693415969248E-174, 5.205969622575851E-174, 1.4151292367806538E-173, 3.846720258072078E-173, 1.045647032279984E-172, 2.8423629805010285E-172, 7.726344058192276E-172, 2.1002377128928765E-171, 5.709039546124285E-171, 1.5518778128928824E-170, 4.218440703602533E-170, 1.1466910691560932E-169, 3.1170298734336303E-169, 8.472965161251656E-169, 2.303190374523956E-168, 6.260720440258473E-168, 1.701840523821621E-167, 4.62608152166211E-167, 1.2574995962791943E-166, 3.418237608335161E-166, 9.29173407843235E-166, 2.5257552661512635E-165, 6.865714679174435E-165, 1.866294830116931E-164, 5.073114566291778E-164, 1.3790154522394582E-163, 3.7485528226129495E-163, 1.0189624503698769E-162, 2.7698267293941856E-162, 7.529170882336924E-162, 2.0466404088178596E-161, 5.56334611651382E-161, 1.512274346576166E-160, 4.110787043867721E-160, 1.1174279267498045E-159, 3.0374839443564585E-159, 8.25673801176584E-159, 2.244414150254963E-158, 6.1009492034592176E-158, 1.6584100275603453E-157, 4.50802633729044E-157, 1.2254085656601853E-156, 3.3310057014599044E-156, 9.054612259832416E-156, 2.4612985502035675E-155, 6.690503835950083E-155, 1.8186679660152888E-154, 4.9436516047443576E-154, 1.3438240331106108E-153, 3.652892398145774E-153, 9.92958982547828E-153, 2.6991427376823027E-152, 7.3370297995122135E-152, 1.994411660450821E-151, 5.421372463189529E-151, 1.4736818914204564E-150, 4.005882964287806E-150, 1.088911919926534E-149, 2.9599693109692324E-149, 8.046030012041041E-149, 2.18713790898745E-148, 5.945256705384597E-148, 1.6160884846515524E-147, 4.392983574030969E-147, 1.1941366764543551E-146, 3.2460001983475855E-146, 8.8235440586675E-146, 2.3984878190403553E-145, 6.519765758635405E-145, 1.772256261139753E-144, 4.817491674217065E-144, 1.3095299991573769E-143, 3.559671483107555E-143, 9.676190774054103E-143, 2.630261301303634E-142, 7.149792225695347E-142, 1.943514969662872E-141, 5.283020542151163E-141, 1.4360739330834996E-140, 3.9036541111764032E-140, 1.0611230602364477E-139, 2.8844319473099593E-139, 7.84069876400596E-139, 2.1313228444765414E-138, 5.793536445518422E-138, 1.5748463788034308E-137, 4.2808762411845363E-137, 1.1636629220608724E-136, 3.163163464591171E-136, 8.598369704466743E-136, 2.337279322276433E-135, 6.353384093665193E-135, 1.7270287031459572E-134, 4.694550492773212E-134, 1.2761111606368036E-133, 3.4688299108856403E-133, 9.429257929713919E-133, 2.5631381141873417E-132, 6.967331001069377E-132, 1.8939170679975288E-131, 5.148199748336684E-131, 1.3994258162094293E-130, 3.804034213613942E-130, 1.0340436948077763E-129, 2.8108219632627907E-129, 7.640606938467665E-129, 2.0769322678328357E-128, 5.645687086879944E-128, 1.5346568127351796E-127, 4.171630237420918E-127, 1.1339665711932977E-126, 3.0824406750909563E-126, 8.37894218404787E-126, 2.2776327994966818E-125, 6.191247522703296E-125, 1.6829556040859853E-124, 4.5747479502862494E-124, 1.2435453481209945E-123, 3.3803067202247166E-123, 9.188625696750548E-123, 2.4977273040076145E-122, 6.789527378582775E-122, 1.845584943222965E-121, 5.016820182185716E-121, 1.3637129731022491E-120, 3.706956710275979E-120, 1.0076552294433743E-119, 2.739090595934893E-119, 7.445620503219039E-119, 2.023929422267303E-118, 5.501611507503037E-118, 1.4954928881576769E-117, 4.0651709187617596E-117, 1.1050280679513555E-116, 3.003777734030334E-116, 8.165114384910189E-116, 2.219508285637377E-115, 6.033249389304709E-115, 1.6400070480930697E-114, 4.458001565878111E-114, 1.2118105325725891E-113, 3.2940421731384895E-113, 8.954135150208654E-113, 2.433986351722258E-112, 6.616260705434716E-112, 1.7984863104885375E-111, 4.888792154132158E-111, 1.3289115531074511E-110, 3.612356038181234E-110, 9.819402293160495E-110, 2.6691899766673256E-109, 7.255611264437603E-109, 1.9722796756250217E-108, 5.361211684173837E-108, 1.4573285967670963E-107, 3.961429477016909E-107, 1.0768281419102595E-106, 2.9271223293841774E-106, 7.956744351476403E-106, 2.1628672925745152E-105, 5.879282834821692E-105, 1.5981547034872092E-104, 4.344234755347641E-104, 1.1808855501885005E-103, 3.2099795870407646E-103, 8.725629524586503E-103, 2.3718718327094683E-102, 6.44741641521183E-102, 1.7525895549820557E-101, 4.7640323331013947E-101, 1.2949980563724296E-100, 3.5201699899499525E-100, 9.56881327374431E-100, 2.6010732940533088E-99, 7.070450309820548E-99, 1.9219478787856753E-98, 5.2243955659975294E-98, 1.4201378353978042E-97, 3.8603349913851996E-97, 1.0493479260117497E-96, 2.8524232604238555E-96, 7.753690709912764E-96, 2.1076716069929933E-95, 5.72924572981599E-95, 1.5573703263204683E-94, 4.233371554108682E-94, 1.1507496472539512E-93, 3.1280620563875923E-93, 8.5029538631631E-93, 2.3113425190436427E-92, 6.28287989314225E-92, 1.7078641226055994E-91, 4.6424556110307644E-91, 1.261950308999819E-90, 3.430336362898836E-90, 9.324622137237299E-90, 2.5346947846365435E-89, 6.890014851450124E-89, 1.8729003560057785E-88, 5.091070300111434E-88, 1.3838964592430477E-87, 3.761820584522275E-87, 1.0225689628581036E-86, 2.7796303536272215E-86, 7.555818934379333E-86, 2.053884626293416E-85, 5.583037134407759E-85, 1.5176268538776042E-84, 4.125337057189083E-84, 1.121383042095528E-83, 3.0482348236054953E-83, 8.285962249116636E-83, 2.2523580600947705E-82, 6.122543452787843E-82, 1.664279766968299E-81, 4.523982262003404E-81, 1.2297456769063303E-80, 3.342795345742034E-80, 9.086660081726823E-80, 2.4700104681773258E-79, 6.714184569587689E-79, 1.8251046352720517E-78, 4.961148056969105E-78, 1.3485799924445315E-77, 3.665820371396835E-77, 9.964732578705785E-77, 2.708695208461993E-76, 7.362996533913695E-76, 2.0014700145557332E-75, 5.440559532453721E-75, 1.4788974793889734E-74, 4.020060558571273E-74, 1.092765612182012E-73, 2.970445258959489E-73, 8.074507236705857E-73, 2.1948784599535102E-72, 5.966298125808066E-72, 1.6218081151910012E-71, 4.408531734441582E-71, 1.198363039426718E-70, 3.257488853378793E-70, 8.854771398921902E-70, 2.406976727302894E-69, 6.542840888268955E-69, 1.778528517418201E-68, 4.834541417183388E-68, 1.3141647465063647E-67, 3.572270133517001E-67, 9.710435805122717E-67, 2.63957027915428E-66, 7.175096392165733E-66, 1.9503931430716318E-65, 5.3017188565638215E-65, 1.4411566290936352E-64, 3.9174693825966044E-64, 1.0648786018364265E-63, 2.8946401383311E-63, 7.868447965383903E-63, 2.1388659707647114E-62, 5.814040618670345E-62, 1.5804200403673568E-61, 4.296027044486766E-61, 1.1677812418806031E-60, 3.174358801839755E-60, 8.62880163941313E-60, 2.345551464945955E-59, 6.3758692300917355E-59, 1.733140900346534E-58, 4.711165925070571E-58, 1.2806275683797178E-57, 3.481106736845E-57, 9.462629520363307E-57, 2.5722094667974783E-56, 6.9919903587080315E-56, 1.9006201022568844E-55, 5.166420404109835E-55, 1.4043786616805493E-54, 3.8174968984748894E-54, 1.03770335512154E-53, 2.820769858672565E-53, 7.667647949477605E-53, 2.0842827711783212E-52, 5.6656680900216754E-52, 1.5400881501571645E-51, 4.1863938339341257E-51, 1.1379799629071911E-50, 3.093350150840571E-50, 8.408597060399334E-50, 2.2856938448387544E-49, 6.2131591878042886E-49, 1.688911928929718E-48, 4.5909386437919143E-48, 1.2479464696643861E-47, 3.3922703599272275E-47, 9.221146830884422E-47, 2.5065676066043174E-46, 6.8135571305481364E-46, 1.8521166948363666E-45, 5.0345752964740226E-45, 1.368539456379101E-44, 3.720075801577098E-44, 1.0112214979786464E-43, 2.7487849807248755E-43, 7.47197247068667E-43, 2.0310928323153876E-42, 5.521082422279256E-42, 1.5007857288519654E-41, 4.0795586181406803E-41, 1.108938997126179E-40, 3.0144088843073416E-40, 8.194012195477669E-40, 2.2273635587196807E-39, 6.054601485195952E-39, 1.6458113136245473E-38, 4.473779311490168E-38, 1.2160992719555806E-37, 3.3057007442449645E-37, 8.985825281444118E-37, 2.442600707513088E-36, 6.639677673630215E-36, 1.8048513285848406E-35, 4.906094420881007E-35, 1.3336148713971936E-34, 3.625141007634431E-34, 9.854154449263851E-34, 2.6786368134431636E-33, 7.28128971953363E-33, 1.9792597720953414E-32, 5.380185921962174E-32, 1.4624861244004054E-31, 3.975449484028966E-31, 1.080639291795678E-30, 2.9374821418009058E-30, 7.984904044796711E-30, 2.1705221445447534E-29, 5.900089995748943E-29, 1.6038109389511792E-28, 4.359610133382778E-28, 1.185064946717304E-27, 3.221340469489223E-27, 8.756510122348782E-27, 2.380266370880709E-26, 6.47023467943241E-26, 1.75879225876483E-25, 4.780892502168074E-25, 1.2995814853898995E-24, 3.5326287852455166E-24, 9.602680736954162E-24, 2.6102792042257208E-23, 7.095474414148981E-23, 1.9287497671359936E-22, 5.242885191553114E-22, 1.4251641388208515E-21, 3.873997809109103E-21, 1.0530616658562386E-20, 2.862518609581133E-20, 7.78113163345177E-20, 2.1151310700892382E-19, 5.74952254077566E-19, 1.5628822871880503E-18, 4.24835413113866E-18, 1.1548223864099742E-17, 3.139132557537509E-17, 8.533046968331264E-17, 2.3195229636950566E-16, 6.305116324200775E-16, 1.71390848833098E-15, 4.6588861918718874E-15, 1.2664165777252073E-14, 3.442477422913037E-14, 9.357622912219837E-14, 2.5436656904062604E-13, 6.914399608426436E-13, 1.879528650772233E-12, 5.1090893668503945E-12, 1.3887944613766301E-11, 3.775134371775124E-11, 1.0261880234452292E-10, 2.789468100949932E-10, 7.582560135332983E-10, 2.061153470123145E-9, 5.602796449011294E-9, 1.5229979055675358E-8, 4.139937459513021E-8, 1.1253517584464134E-7, 3.059023470086686E-7, 8.315287232107949E-7, 2.260329438286135E-6, 6.1442124206223525E-6, 1.670170240686275E-5, 4.539993096841499E-5, 1.2340981629677117E-4, 3.35462624207139E-4, 9.118819143623114E-4, 0.0024787522852420807, 0.006737947463989258, 0.018315639346837997, 0.049787066876888275, 0.1353352963924408, 0.3678794503211975, 1.0, 2.7182817459106445, 7.389056205749512, 20.08553695678711, 54.59815216064453, 148.41314697265625, 403.42877197265625, 1096.633056640625, 2980.9580078125, 8103.083984375, 22026.46484375, 59874.140625, 162754.78125, 442413.375, 1202604.25, 3269017.5, 8886110.0, 2.4154952E7, 6.5659968E7, 1.78482304E8, 4.85165184E8, 1.318815744E9, 3.584912896E9, 9.74480384E9, 2.6489122816E10, 7.200489472E10, 1.95729620992E11, 5.32048248832E11, 1.446257098752E12, 3.9313342464E12, 1.0686474223616E13, 2.904884772864E13, 7.8962956959744E13, 2.14643574308864E14, 5.83461777702912E14, 1.586013579247616E15, 4.31123180027904E15, 1.1719142537166848E16, 3.1855931348221952E16, 8.6593395455164416E16, 2.35385270340419584E17, 6.3984347447610573E17, 1.73927483790327808E18, 4.7278395262972723E18, 1.285159987981792E19, 3.493427277593156E19, 9.496119530068797E19, 2.581312717296228E20, 7.016736290557636E20, 1.907346499785443E21, 5.1847060206155E21, 1.4093490364499379E22, 3.831007739580998E22, 1.0413759887481643E23, 2.8307533984544136E23, 7.694785471490595E23, 2.0916595931561093E24, 5.685720022003016E24, 1.545539007875769E25, 4.201209991636407E25, 1.142007304008196E26, 3.104297782658242E26, 8.43835682327257E26, 2.2937832658080656E27, 6.23514943204966E27, 1.694889206675675E28, 4.607187019879158E28, 1.2523630909973607E29, 3.4042761729010895E29, 9.253781621373885E29, 2.5154385492401904E30, 6.837671137556327E30, 1.8586717056324128E31, 5.05239404378821E31, 1.3733830589835937E32, 3.733241849647479E32, 1.014800418749161E33, 2.758513549969986E33, 7.498416981578345E33, 2.0382811492597872E34, 5.540622484676759E34, 1.5060972626944096E35, 4.0939972479624634E35, 1.1128638067747114E36, 3.0250770246136387E36, 8.223012393018281E36, 2.2352467822017166E37, 6.076029840339376E37, 1.6516361647240826E38, 4.4896127778163155E38, 1.2204032949639917E39, 3.3174000012927697E39, 9.017628107716908E39, 2.451245443147225E40, 6.663175904917432E40, 1.8112388823726723E41, 4.923458004084836E41, 1.3383347029375378E42, 3.637970747803715E42, 9.889030935681123E42, 2.6881169167589747E43, 7.307059786371152E43, 1.986264756071962E44, 5.399227989109673E44, 1.467662348860426E45, 3.989519470441919E45, 1.0844638420493122E46, 2.9478781225754055E46, 8.013164089994031E46, 2.1782039447564253E47, 5.920972420778763E47, 1.609486943324346E48, 4.3750396394525074E48, 1.1892591576149107E49, 3.2327411123173475E49, 8.787501601904039E49, 2.3886908001521312E50, 6.493134033643613E50, 1.7650169203544438E51, 4.7978130078372714E51, 1.3041809768060802E52, 3.5451314095271004E52, 9.636666808527841E52, 2.6195174357581655E53, 7.120586694432509E53, 1.9355758655647052E54, 5.2614409704305464E54, 1.4302079642723736E55, 3.8877083524279136E55, 1.0567886837680406E56, 2.872649515690124E56, 7.808670894670738E56, 2.1226166967029073E57, 5.769871153180574E57, 1.568413405104933E58, 4.263390023436419E58, 1.1589095247718807E59, 3.150242850860434E59, 8.563247933339596E59, 2.3277319969498524E60, 6.327431953939798E60, 1.719974302355042E61, 4.675374788964851E61, 1.2708985520400816E62, 3.454660807101683E62, 9.390740355567705E62, 2.5526681615684215E63, 6.938871462941557E63, 1.8861808782043154E64, 5.1271712215233855E64, 1.3937096689052236E65, 3.7884955399150257E65, 1.0298199046367501E66, 2.799340708992666E66, 7.609396391563323E66, 2.0684484008569103E67, 5.622626080395226E67, 1.528388084444653E68, 4.1545899609113734E68, 1.1293346659459732E69, 3.069849599753188E69, 8.344717266683004E69, 2.268329019570017E70, 6.165958325782564E70, 1.676081191364984E71, 4.556060380835955E71, 1.2384658100355657E72, 3.3664990715562672E72, 9.15109220707761E72, 2.4875248571153216E73, 6.761793219649385E73, 1.8380461271305958E74, 4.996327312938759E74, 1.3581426848077408E75, 3.691814001080034E75, 1.0035391101975138E76, 2.7279024753382288E76, 7.415207287657125E76, 2.0156621983963848E77, 5.479138512760614E77, 1.4893842728520671E78, 4.048565732162643E78, 1.1005142643914475E79, 2.991508131437659E79, 8.131762373533769E79, 2.210442148596269E80, 6.008604166110734E80, 1.633308028614055E81, 4.439791652732591E81, 1.206860599814453E82, 3.280586734644871E82, 8.917559854082513E82, 2.4240442814945802E83, 6.589235682116406E83, 1.7911398904871E84, 4.86882298924053E84, 1.3234832005748183E85, 3.597600556519039E85, 9.77929222446451E85, 2.658286976862848E86, 7.225974166887662E86, 1.9642232209552433E87, 5.3393125705958075E87, 1.4513757076459615E88, 3.945247871835613E88, 1.0724295693252266E89, 2.915165904253785E89, 7.924242330665303E89, 2.1540322390343345E90, 5.855267177907345E90, 1.5916266807316476E91, 4.326489915443873E91, 1.1760619079592718E92, 3.1968677404735245E92, 8.689987517871135E92, 2.3621834216830225E93, 6.421080550439423E93, 1.7454306955949023E94, 4.744571892885607E94, 1.2897084285532175E95, 3.505791114318544E95, 9.529727908157224E95, 2.5904487437231458E96, 7.041568925985714E96, 1.9140971884979424E97, 5.203055142575272E97, 1.4143368931719686E98, 3.8445667684706366E98, 1.0450615121235744E99, 2.8407720200442806E99, 7.722018663521402E99, 2.0990624115923312E100, 5.705842978547001E100, 1.5510089388648915E101, 4.216079296087462E101, 1.1460491592124923E102, 3.1152847602082673E102, 8.468222063292654E102, 2.3019011105282883E103, 6.257216813084462E103, 1.7008878437355237E104, 4.62349260394851E104, 1.2567956334920216E105, 3.416324322370112E105, 9.286532888251822E105, 2.5243410574836706E106, 6.861870970598542E106, 1.8652499723625443E107, 5.070274654122399E107, 1.3782437251846782E108, 3.746454626411946E108, 1.0183920005400422E109, 2.768276122845335E109, 7.524954624697075E109, 2.0454950851007314E110, 5.56023190218245E110, 1.511427628805191E111, 4.1084862677372065E111, 1.1168024085164686E112, 3.0357834799588566E112, 8.252116273466952E112, 2.2431576057283144E113, 6.097534318207731E113, 1.65748157925005E114, 4.5055022172222453E114, 1.2247224482958058E115, 3.329140840363789E115, 9.049543313665034E115, 2.4599209935197392E116, 6.686758417135634E116, 1.817649308779104E117, 4.940883275207154E117, 1.3430713954289087E118, 3.6508464654683645E118, 9.924030156169606E118, 2.697631034485758E119, 7.332921137166064E119, 1.9932945470297703E120, 5.418336099279846E120, 1.472856595860236E121, 4.0036393271908754E121, 1.0883019300873278E122, 2.9583112936666607E122, 8.041523923017192E122, 2.1859129781586158E123, 5.941927186144745E123, 1.6151834292371802E124, 4.390523815859274E124, 1.1934680816813702E125, 3.2441826014060764E125, 8.81860282490643E125, 2.3971445233885962E126, 6.516115189736396E126, 1.7712635751001657E127, 4.814793918384117E127, 1.3087966177291396E128, 3.557678449715009E128, 9.670771210463886E128, 2.628788218289742E129, 7.145787619369324E129, 1.9424264981694277E130, 5.280062387569078E130, 1.4352697002457768E131, 3.901467289560222E131, 1.0605288965077546E132, 2.882816299252225E132, 7.836307815186044E132, 2.1301292155181736E133, 5.790291758828013E133, 1.573964437869041E134, 4.278478878300888E134, 1.1630112062985817E135, 3.1613917467297413E135, 8.593554223894477E135, 2.335970335559215E136, 6.349826172787151E136, 1.7260616357651607E137, 4.691921416188566E137, 1.2753966504932798E138, 3.466887271843006E138, 9.423976538577447E138, 2.561702766944378E139, 6.963429563637273E139, 1.892856346657855E140, 5.1453167686439515E140, 1.3986421289359558E141, 3.8019036618832785E141, 1.033464507572145E142, 2.809247950589945E142, 7.636326960498012E142, 2.075769060297565E143, 5.64252553828769E143, 1.5337974510118784E144, 4.169293918423203E144, 1.1333315586787883E145, 3.080714152600695E145, 8.374250298636991E145, 2.276357074042286E146, 6.187780443461367E146, 1.6820131331794073E147, 4.572185635487065E147, 1.2428488853188662E148, 3.378413594504258E148, 9.183480622172801E148, 2.4963286658278886E149, 6.785725312893433E149, 1.8445514681108982E150, 5.014010481958507E150, 1.3629491735708616E151, 3.7048805655699485E151, 1.0070909418550386E152, 2.7375567044077912E152, 7.441451374243517E152, 2.022795961737854E153, 5.4985298195094216E153, 1.494655405262451E154, 4.062894701808608E154, 1.1044092571980793E155, 3.002095574584687E155, 8.160542326793782E155, 2.218265110516721E156, 6.02987028472758E156, 1.6390888071605646E157, 4.455504920700703E157, 1.2111317421229415E158, 3.2921976772303727E158, 8.94912101169977E158, 2.432623425087251E159, 6.612555731556604E159, 1.7974788874847574E160, 4.8860545948985793E160, 1.328167263606087E161, 3.610333312791256E161, 9.813901863427107E161, 2.667695552814763E162, 7.251548346906463E162, 1.9711751621240536E163, 5.3582093498119173E163, 1.4565123573071036E164, 3.959211091077107E164, 1.0762251933089556E165, 2.9254832789181E165, 7.952287052787358E165, 2.161656025361765E166, 5.8759898326913254E166, 1.597259768214821E167, 4.3418021646459346E167, 1.1802241249113175E168, 3.2081817253680657E168, 8.720743087611513E168, 2.3705435424427623E169, 6.443805025317327E169, 1.7516078165936552E170, 4.7613641572445654E170, 1.2942728582966776E171, 3.518198614137319E171, 9.563454814394247E171, 2.5996166206245285E172, 7.066491077377918E172, 1.920871394985668E173, 5.221469250951617E173, 1.4193426880442385E174, 3.8581732071331E174, 1.0487601931965087E175, 2.850825930161946E175, 7.749348772180658E175, 2.1064911705560668E176, 5.726036941135634E176, 1.5564982816556894E177, 4.231000988846797E177, 1.1501053030837989E178, 3.1263099916916113E178, 8.498192212235393E178, 2.3100480183046895E179, 6.279361500971995E179, 1.7069074829463731E180, 4.63985600437427E180, 1.2612435745231905E181, 3.4284156709489884E181, 9.319400030019162E181, 2.5332752658571312E182, 6.88615578404537E182, 1.8718514371423056E183, 5.088219872370737E183, 1.3831214731781958E184, 3.759713966511158E184, 1.021996184153141E185, 2.778073442169904E185, 7.55158797540476E185, 2.0527342305586606E186, 5.579910641313343E186, 1.5167767828844167E187, 4.123026721295484E187, 1.1207549425651513E188, 3.0465278560980536E188, 8.281321669236493E188, 2.251096660331649E189, 6.119114404399683E189, 1.6633478556884994E190, 4.521448560089285E190, 1.2290570545894685E191, 3.340923580982338E191, 9.081571104550255E191, 2.468626868232408E192, 6.710424255583952E192, 1.8240823171621646E193, 4.958369974640573E193, 1.3478247120462365E194, 3.6637673548790206E194, 9.959152908532152E194, 2.707178052117959E195, 7.358873642076596E195, 2.0003490682463053E196, 5.4375131636754E196, 1.4780692924846082E197, 4.01780853635105E197, 1.0921536132159379E198, 2.968781250496917E198, 8.069984512111955E198, 2.193649279840519E199, 5.962956589227457E199, 1.620899738203635E200, 4.406062052965071E200, 1.1976919074588434E201, 3.2556641859513496E201, 8.849812639395597E201, 2.40562867677584E202, 6.539175932653188E202, 1.7775323307944624E203, 4.831833881898182E203, 1.3134287685114547E204, 3.5702693195009266E204, 9.704997606668411E204, 2.63809219778715E205, 7.171077244202293E205, 1.949300880034352E206, 5.298749302736127E206, 1.4403494631058154E207, 3.91527572177694E207, 1.0642823992403076E208, 2.8930193727937684E208, 7.8640411896421955E208, 2.1376680994038112E209, 5.8107841809216616E209, 1.5795351101531684E210, 4.293620869258453E210, 1.1671272667059652E211, 3.172580666390786E211, 8.623968972387222E211, 2.3442378838418366E212, 6.372298757235201E212, 1.7321703934464356E213, 4.708527306855985E213, 1.279910496643312E214, 3.479157135998568E214, 9.45732984079136E214, 2.5707689593428096E215, 6.988074107282322E215, 1.8995553996578656E216, 5.1635269305465607E216, 1.4035923083915864E217, 3.815359096108819E217, 1.0371220592190472E218, 2.819190456167585E218, 7.663353127378024E218, 2.083115484919861E219, 5.662495731848751E219, 1.5392257142577226E220, 4.184049381430498E220, 1.1373425785132867E221, 3.091617462831603E221, 8.403887374207366E221, 2.2844135610697528E222, 6.209679892802781E222, 1.6879660933816274E223, 4.588367423411997E223, 1.2472476068464461E224, 3.3903703993793316E224, 9.215982463319503E224, 2.5051637206758385E225, 6.809741127603255E225, 1.8510795864289367E226, 5.031755776868959E226, 1.3677729802316034E227, 3.7179924024793253E227, 1.0106552237522032E228, 2.7472456017809066E228, 7.467788172398272E228, 2.029955237703202E229, 5.517990469846618E229, 1.4999452522236406E230, 4.0772734783595525E230, 1.1083180046837618E231, 3.012720614547867E231, 8.18942426109357E231, 2.2261161215322043E232, 6.051211457626543E232, 1.6448897917725177E233, 4.471273900208441E233, 1.2154183152078517E234, 3.3038494682728794E234, 8.98079409878202E234, 2.4412328161430576E235, 6.63595840453991E235, 1.8038406914061554E236, 4.90334700062756E236, 1.3328680266667662E237, 3.623110695743118E237, 9.848636053777669E237, 2.677136737066629E238, 7.277212447141125E238, 1.978151484427976E239, 5.377173488599035E239, 1.4616672175682191E240, 3.973222981713661E240, 1.0800340064859439E241, 2.935837009891444E241, 7.980432566722885E241, 2.169306470354036E242, 5.896786161387733E242, 1.6029126916635028E243, 4.357168123448786E243, 1.1844011798406507E244, 3.2195361624179725E244, 8.751606149833694E244, 2.3789334438756013E245, 6.466611224443739E245, 1.7578073785142153E246, 4.7782149589194885E246, 1.2988535295611824E247, 3.5306502960727705E247, 9.597302512507479E247, 2.608817438130718E248, 7.091500562953208E248, 1.9276698418065647E249, 5.239949786641934E249, 1.42436589329759E250, 3.8718282216768776E250, 1.0524719896550007E251, 2.860915548426704E251, 7.77677492833005E251, 2.113946677051906E252, 5.7463023795153145E252, 1.56200679236425E253, 4.2459748085663055E253, 1.1541756557557508E254, 3.137374584307575E254, 8.528268445871411E254, 2.3182239583484444E255, 6.301585387776819E255, 1.7129486892266285E256, 4.6562769567905925E256, 1.26570724146049E257, 3.4405490416979487E257, 9.352382323649647E257, 2.54224113415832E258, 6.910528108396216E258, 1.8784760208391767E259, 5.106228040084293E259, 1.3880166914480165E260, 3.7730204737910044E260, 1.0256131352582533E261, 2.787906051540986E261, 7.578313650939932E261, 2.0599991793068063E262, 5.5996586041611455E262, 1.522145133131402E263, 4.137618951061827E263, 1.1247213964487372E264, 3.0573102223682595E264, 8.310629417537063E264, 2.2590636576955473E265, 6.1407711078356886E265, 1.6692346202615142E266, 4.5374504961394207E266, 1.2334070098307164E267, 3.3527476928456816E267, 9.113713162029408E267, 2.4773638527240193E268, 6.734172833429278E268, 1.8305382378470305E269, 4.9759187284770303E269, 1.352594940263854E270, 3.6767339705169146E270, 9.994400500679653E270, 2.716759624268743E271, 7.384918458508588E271, 2.007428933605617E272, 5.456757565532369E272, 1.4833003969415539E273, 4.0320284712983994E273, 1.096019026243815E274, 2.979288529962515E274, 8.098545495417704E274, 2.201412886580694E275, 5.984060832462728E275, 1.6266362950862408E276, 4.4216561713555547E276, 1.2019307065458128E277, 3.2671863888979078E277, 8.881133159512924E277, 2.4141423627760256E278, 6.562319473965767E278, 1.7838233889223407E279, 4.848934634563382E279, 1.3180771991576186E280, 3.5829049382293792E280, 9.739345931419228E280, 2.6474285478041252E281, 7.196457718729758E281, 1.956199868121249E282, 5.31750271790054E282, 1.4454470027638629E283, 3.929132560365955E283, 1.0680488848057261E284, 2.9032581477488686E284, 7.89187408872514E284, 2.1452336456259667E285, 5.831349876080173E285, 1.5851251724785243E286, 4.308816643345461E286, 1.1712579802975851E287, 3.1838092090922606E287, 8.654490685278886E287, 2.3525345191912968E288, 6.39485115791896E288, 1.7383009254496851E289, 4.725191397657393E289, 1.2844402232816276E290, 3.491470347090126E290, 9.490800658395667E290, 2.579867270991543E291, 7.012806239173502E291, 1.906278351789277E292, 5.181801397059486E292, 1.408559707497606E293, 3.8288623079292884E293, 1.0407926842436056E294, 2.829168201470791E294, 7.690475570840264E294, 2.0904882610105383E295, 5.68253547942899E295, 1.544673396032028E296, 4.1988574190754736E296, 1.1413677466646359E297, 3.102559332875688E297, 8.433630296371073E297, 2.292498520423419E298, 6.23165710486722E298, 1.6939399242810123E299, 4.604606371472047E299, 1.2516618713553432E300, 3.402369329874797E300, 9.248598815279678E300, 2.51402968559859E301, 6.833842035076675E301, 1.8576309291617257E302, 5.049564425991982E302, 1.3726137091534984E303, 3.7311513682845094E303, 1.0142320772726397E304, 2.7569686255975333E304, 7.494218049456063E304, 2.037139607241041E305, 5.5375196488302575E305, 1.5052539519895093E306, 4.091704288360009E306, 1.1122405335641184E307, 3.023383151402969E307, 8.218407798110846E307, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN]
size(return[]) == 1500
===========================================================================
org.apache.commons.math3.util.FastMathLiteralArrays.loadExpIntB():::ENTER
===========================================================================
org.apache.commons.math3.util.FastMathLiteralArrays.loadExpIntB():::EXIT
org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_A == orig(org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_A)
org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_A[] == orig(org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_A[])
org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_B == orig(org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_B)
org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_B[] == orig(org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_B[])
org.apache.commons.math3.util.FastMathLiteralArrays.EXP_FRAC_A == orig(org.apache.commons.math3.util.FastMathLiteralArrays.EXP_FRAC_A)
org.apache.commons.math3.util.FastMathLiteralArrays.EXP_FRAC_A[] == orig(org.apache.commons.math3.util.FastMathLiteralArrays.EXP_FRAC_A[])
org.apache.commons.math3.util.FastMathLiteralArrays.EXP_FRAC_B == orig(org.apache.commons.math3.util.FastMathLiteralArrays.EXP_FRAC_B)
org.apache.commons.math3.util.FastMathLiteralArrays.EXP_FRAC_B[] == orig(org.apache.commons.math3.util.FastMathLiteralArrays.EXP_FRAC_B[])
org.apache.commons.math3.util.FastMathLiteralArrays.LN_MANT == orig(org.apache.commons.math3.util.FastMathLiteralArrays.LN_MANT)
org.apache.commons.math3.util.FastMathLiteralArrays.LN_MANT.getClass().getName() == orig(org.apache.commons.math3.util.FastMathLiteralArrays.LN_MANT.getClass().getName())
org.apache.commons.math3.util.FastMathLiteralArrays.LN_MANT[] == orig(org.apache.commons.math3.util.FastMathLiteralArrays.LN_MANT[])
return has only one value
return[] == [0.0, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, -1.76097684E-316, -2.44242319E-315, -9.879317845E-315, -1.3811462167E-314, 2.1775261204E-314, -1.4379095864E-313, 1.4219324087E-313, 1.00605438061E-312, -1.287101187097E-312, 5.33839690397E-312, -9.35130825405E-313, -4.15218681073E-311, 4.546040329134E-311, -1.57333572310673E-310, 1.05387548454467E-309, 2.095732474644446E-309, -2.62524392470767E-310, 5.86440876259637E-309, -2.401816502004675E-309, -2.2711230715729753E-308, 2.0670460065057715E-307, 3.436860020483706E-308, 2.0862243734177337E-306, -4.637025318037353E-306, 9.222671009756424E-306, 6.704597874020559E-305, 4.351284159444109E-305, 4.232889602759328E-304, 1.2840977763293412E-303, -2.6993478083348727E-303, -1.053265874779237E-303, 1.207746682843556E-303, 5.21281096513035E-303, 1.6515377082609677E-301, 3.3951607353932444E-301, 5.609418227003629E-301, 4.238775357914848E-300, -9.441842771290538E-300, -2.1745347282493023E-299, -6.203839803215248E-299, -5.617718879466363E-299, 5.2869976233132615E-298, -1.4300075619643524E-298, 4.3198234936686506E-297, -2.6448316331572387E-297, 4.315655444002347E-296, -7.253671992213344E-296, -1.1288398461391523E-295, -4.83901764243093E-296, 1.7407497662694827E-295, 1.1969717029666017E-294, -7.752519943329177E-294, -4.019569741253664E-293, -2.4467928392518484E-293, -1.0269233640424235E-292, -3.2330960700986594E-292, -1.440995270758115E-291, -3.726946038150935E-291, -1.3424576100819801E-291, -3.128894928199484E-290, -5.989337506920005E-290, -9.438168176533759E-290, -1.9220613500411237E-289, 2.1186736024949195E-289, 6.3015208029537436E-288, -8.168129112703755E-288, -1.6040513288090055E-287, -1.0809972724404233E-287, -3.080380385962424E-286, 2.6399157174374624E-286, 1.3317127674213423E-285, -3.5821668044872306E-285, 1.978536584535392E-284, 1.3399392455370071E-284, -2.870168560029448E-284, 3.5311184272663063E-283, -7.204247881190918E-283, 3.2425604548983798E-282, 3.913063150326019E-282, -2.260957518848075E-281, 3.807242187736102E-281, -5.095591405025083E-281, 2.3400625068490396E-280, -1.1564717694090882E-280, -3.517594695450786E-279, 6.666544384808297E-279, -9.204784113858607E-279, 4.8677119923665573E-278, 7.942176091555472E-278, -2.5113270522478854E-277, 5.332900939354667E-277, -3.491241408725929E-276, -2.1141094074221325E-276, 1.722049095222509E-275, 4.0430160253378594E-275, 1.9888195459082551E-274, 3.230089643550739E-275, 5.077824728028163E-274, -3.526547961682877E-274, -6.4376298274983765E-273, -2.5338279333399964E-272, -3.614847626733713E-272, 2.510812179067931E-272, 3.953806005373127E-272, 7.112596406315374E-272, -2.850217520533226E-270, -8.571477929711754E-270, 1.2902019831221148E-269, -6.978783784755863E-270, 9.89845486618531E-269, -3.538563171970534E-268, 3.537475449241181E-268, 3.6924578046381256E-267, 1.3555502536444713E-266, -1.1279742372661484E-266, 5.475072932318336E-266, -1.1679889049814275E-265, -8.946297908979776E-266, 1.0565816011650582E-264, -3.2161237736296753E-265, -6.022045553485609E-264, -2.0332050860436034E-263, -1.0488538406930105E-262, 1.6793752843984384E-262, 3.2558720916543104E-263, -1.9546569053899882E-262, 5.082190670014963E-262, -1.0188117475357564E-260, 3.7920054509691455E-261, -8.330969967504819E-260, -1.1623181434592597E-259, 9.09665088462258E-259, -1.56400149127482E-259, -7.796557225750673E-258, 6.751460509863465E-258, 7.243157658226935E-258, 1.2574668958946027E-256, 2.2678858131411216E-256, 5.1079306249351287E-256, -5.672261759108003E-257, 3.476539491009769E-256, -1.3481093992496937E-254, -3.314051560952014E-254, 7.408112967339146E-255, -7.164884605413269E-254, -6.456588023278983E-253, -1.4881197370811587E-252, 1.7534012237555307E-252, -1.3070101381473173E-251, 6.081420141954215E-251, 6.591143677421159E-251, 2.6917461073773043E-250, 3.683043641790553E-251, 1.2195076420741757E-249, -8.220283439582378E-249, 1.637852737426943E-248, -8.332543237340988E-249, 2.9581193516975647E-248, -1.7790661150204172E-247, -1.7809679916043692E-247, 8.378574405736031E-247, -2.883847036065813E-246, 1.3223776943337897E-245, 3.098547586845664E-245, -1.1036542789147287E-244, -5.7187703271582225E-244, -1.8058492822440396E-244, 4.4373726292703545E-243, -3.4631935816990754E-243, -1.82770041073856E-243, 3.845535085273936E-242, 8.446532344375812E-242, 2.7751016140238277E-242, 1.3158882241538003E-241, -3.579433051074272E-240, -6.151751570213211E-240, -2.990535475079021E-239, 2.3396028616528764E-239, 7.233790684263346E-239, 1.0847913100494912E-238, 7.103148400942551E-238, 3.463600299750966E-237, -4.873121855093712E-237, 1.3407295326570417E-236, 9.390271617387205E-237, -2.4767709454727603E-235, 3.205923535388443E-235, -1.0074984709952582E-234, 2.4747880175747574E-234, -5.146939682310558E-234, -2.827581009333298E-233, -3.0307641004671077E-233, 5.92044714050651E-233, -2.0582596893119236E-232, -6.58066591313112E-232, -4.869955151949929E-231, -5.763495903609913E-231, -2.3580462372762525E-230, 1.8559980428862584E-230, 2.854978560542175E-229, 5.637945686485334E-229, 2.1454644909004582E-228, -1.1918070206953359E-228, -5.021851606912854E-228, 3.861525553653117E-227, 6.533561982617909E-227, -3.015709444206057E-226, -5.042005018212734E-227, 1.5959614205422845E-225, 2.0402105689098835E-224, 5.164902728917601E-224, 9.981031744879876E-224, 4.0281104210095145E-223, 1.1158160971176672E-222, 2.0736172194624895E-222, 4.983162653734032E-222, 2.1753390051977871E-221, 3.969413618002761E-221, 1.3961255018698695E-220, 2.1290855095314206E-220, 1.1927747883417406E-219, 3.7264401117998796E-219, 9.318532410862293E-219, 2.3414841777613345E-218, 4.3791842770430786E-218, 1.7173159016511951E-217, 3.5037536832675478E-217, 1.4300098613455884E-216, 2.4189403362149483E-216, 9.306541421999056E-216, 3.442100456607687E-215, 5.94407068841904E-215, 2.0483260435783403E-214, 3.8410992889527954E-214, 1.2038281262953917E-213, 3.865007795216205E-213, 9.754659138599756E-213, 2.7653605770745684E-212, 5.359568079675375E-212, 2.61726605666378E-211, 5.054202073556894E-211, 8.707092668016246E-211, 1.4080573899148006E-210, 1.288124387778789E-209, 1.8639901642011898E-209, 6.076014540574561E-209, 1.798489141298457E-208, 2.1525406805994896E-208, 1.1864056832305874E-207, 2.1077440662171152E-207, 1.3784853708457332E-206, 1.6965806532093783E-206, 7.241626420445137E-206, 2.575584299085016E-205, 6.151951078101721E-205, 2.40652042118887E-204, 4.022633486003565E-204, 5.8840879519086286E-204, 3.2820308007277566E-203, 4.31880454864738E-203, 2.427240455243201E-202, 7.326955749884755E-202, 1.4310184489676175E-201, 4.464279133463661E-201, 4.895131474682867E-201, 4.48614966943544E-200, 8.924048768324976E-200, 2.5035535029701945E-199, 6.627829836338812E-199, 2.6066826304502746E-198, 8.042275310036546E-198, 2.115062964308555E-197, 4.413745413236018E-197, 1.644449394585716E-196, 3.138217752973845E-196, 7.48533983136081E-196, 2.613626422028823E-195, 3.6741841454219095E-195, 5.906102862953403E-195, 4.4940857547850743E-194, 5.840064709376958E-194, 3.087661273836024E-193, 4.995552216100365E-193, 1.991444798915497E-192, 7.097454751809522E-192, 2.0510193986749737E-191, 5.759440286608551E-191, 1.7013941257113314E-190, 2.1383323934483528E-190, 8.280292810015406E-190, 3.138655772049104E-189, 7.961506427685701E-189, 2.0579001228504997E-188, 7.530840351477639E-188, 1.4582863136475673E-187, 3.149267215638608E-187, 5.443114553057336E-187, 3.4672966834277804E-186, 7.374944406615125E-186, 2.7318417252599104E-185, 7.913674211949961E-185, 2.5217716516462005E-184, 4.0866585874353075E-184, 1.2087698972768686E-183, 3.7072473866919033E-183, 1.1333588840402273E-182, 1.61949812578045E-182, 6.567779607147072E-182, 2.422974840736314E-181, 2.551170809294396E-181, 1.0905890688083124E-180, 3.221279639653057E-180, 7.068244813489027E-180, 1.3752309224575428E-179, 7.20154303462761E-179, 1.5391707185581056E-178, 7.708777608683431E-178, 5.597398155472547E-178, 1.8487854656676722E-177, 1.0577249492414076E-176, 2.8926683313922764E-176, 4.090184282164232E-176, 1.6142943398013813E-175, 7.873864351702525E-175, 2.242630017261011E-174, 3.4637009373878283E-174, 1.5907089565090164E-173, 1.6985075903314236E-173, 1.1552273904608563E-172, 2.237894048535414E-172, 5.321990399912051E-172, 1.4106062639738257E-171, 2.9850404523368767E-171, 1.5683802588004895E-170, 4.880146806045633E-170, 1.1489352403441815E-169, 1.6401586605693734E-169, 8.29169700697816E-169, 1.0380723705441457E-168, 7.126414081261746E-168, 1.253325949455206E-167, 2.595079206183114E-167, 1.537490712803659E-166, 2.6338455225993276E-166, 7.994936425058567E-166, 1.5716634677516025E-165, 3.669404761339415E-165, 1.9941628263579332E-164, 4.5012079983352374E-164, 7.283163019991001E-164, 2.398038505188316E-163, 7.868666894503849E-163, 2.1478649410390003E-162, 8.306111510463843E-162, 1.5453160659068463E-161, -4.590496588813841E-162, 3.5449293983801232E-161, -1.0440854056870505E-160, -2.321064927632431E-160, 5.707867001443433E-160, -2.238614484037969E-159, 2.482282821883242E-159, -1.1508772192025259E-158, 1.9903990578876104E-158, -1.2116165315442256E-158, -2.9084557554502667E-157, -1.1211083853006645E-156, -1.309893394818129E-156, 4.2269712317468864E-156, -7.678973146281339E-156, 3.2021376921211934E-155, -7.08313012515209E-155, 1.944398214330544E-154, 1.1860061363751161E-153, 1.5234465914578058E-153, -2.9020908354550263E-153, 4.980100072851796E-153, 2.3101551448625578E-152, -1.1959241322537072E-151, -9.27398924154364E-153, 5.999390491704392E-152, 1.3373196561281372E-150, -1.0271780540759147E-150, 2.575620466387945E-150, -6.56250013356227E-149, -1.1961357917482867E-148, 5.5807813570926636E-148, 9.252840189663807E-148, -1.830335419852293E-147, 9.350990339947455E-147, -1.6072409939877762E-146, -2.5309995887229526E-146, -1.6014373376410622E-146, -3.303297758377758E-145, 1.5640419864850202E-145, 9.544642884951585E-145, -8.64864445321803E-144, 7.580392204597681E-144, 2.678334184447568E-143, -3.7269289985326055E-143, -2.851965258161176E-142, 7.243267286265823E-142, 4.4510805312036926E-141, 9.008499734799015E-141, 1.130435759928337E-140, -3.096539751496479E-140, -1.497405487919762E-139, 3.51519845948652E-139, -4.713790209541894E-139, 4.740753295616865E-138, 9.517570994930463E-138, -1.8842098029339485E-137, -3.825558165008403E-137, 1.1817638600528107E-136, -3.514601201473235E-136, -6.344612631552417E-136, -1.6754164785291923E-136, 4.445372986583078E-135, -3.89604237755475E-134, -1.0155552195374609E-134, 2.1858142063550155E-134, 3.497714990137842E-133, -7.635830383612894E-133, 1.2050744860079718E-132, -7.683019590615251E-133, -3.344806129021162E-131, -1.6737914131474577E-131, -4.30610076666344E-131, 5.184023388254773E-130, 2.6290763595212492E-129, 7.90041744728452E-130, -3.204473056113754E-129, -2.552517201762272E-128, 7.130134251490065E-128, -3.2244113258340395E-127, -1.064920993515727E-127, 2.7466520735457463E-126, 4.368312797746065E-126, 1.8802599072446818E-125, -4.257625799463564E-125, 5.491672256552995E-125, 3.7298611779671127E-124, 5.724180836308973E-124, 1.3861841053630075E-123, 4.2303826056297614E-123, 3.5335436928899096E-123, -2.522906629540626E-122, 1.0147808005267102E-121, 6.734406065735473E-122, -4.948973160958133E-121, 2.4256181927024344E-120, 4.9056283164780554E-120, 6.846440394397547E-120, 3.512747689569002E-119, -9.020907406701404E-119, 2.5718749916003624E-118, 4.3724191002977524E-119, 1.001455050575191E-117, -2.4442443105031435E-117, 2.38873950760028E-116, -4.831068747037129E-118, -5.148989321866988E-116, 1.7875271881514469E-115, -1.1821586412088555E-114, 4.43247726423679E-115, 4.634817120492781E-114, 1.671311907037975E-113, -4.595250028278979E-113, -5.905511605694905E-113, -1.3657642265608213E-112, 2.881416869529271E-112, 2.1253302469985373E-111, -5.301386276260592E-111, 1.4198782892306878E-112, -3.395494928605007E-110, 9.284633292147283E-110, -6.054133004896379E-110, -8.324100783330331E-109, -2.193190669794277E-108, 1.3613655394659198E-107, 6.463452607647978E-108, 1.0187183636134904E-106, 1.0705673935006142E-106, 2.509050608571019E-106, -1.5096182622106617E-105, 1.7794190449526737E-106, 1.2261246749706581E-104, 2.1377905661197194E-104, -2.2015877944429946E-104, 7.873970951802825E-104, -1.7999197335480384E-103, 1.0487383011058756E-105, -2.9988278531841556E-102, 4.7976477743232285E-102, 3.452316818502442E-102, 5.89953246760617E-101, -4.0785601577267006E-101, 2.7214076662438963E-100, 5.237807655758373E-100, 6.180972117932364E-99, -1.3019742873005683E-98, 4.501188264957416E-99, -2.4075054705261798E-98, 1.6503086546628772E-97, -6.878666975101243E-97, 1.196718116616528E-96, 2.476190162339265E-96, -7.1844969234484515E-96, 5.088386759261555E-95, 6.749368983223726E-95, 1.965737856765605E-94, -5.574080023496771E-94, 1.2493696959436675E-93, 8.533262777516794E-94, -7.225259028588793E-93, -7.340587186324432E-93, -3.482412195764625E-92, 3.4742610108480497E-91, -7.177274244758699E-91, 1.2736636153072213E-90, -5.730160886217076E-90, -1.545495535488274E-89, 1.1304179460367007E-89, 1.249260560756154E-88, -4.7439719382414206E-88, 7.164663249266942E-88, 1.7617425105337704E-87, 2.4175248449172035E-87, -1.043079666926483E-86, -2.8137609614326677E-86, -1.2091497144395591E-85, 3.7944631664558904E-85, -2.8144926807308225E-85, 3.9782728352520784E-85, 4.313978872469646E-84, 5.82190887044604E-84, 5.883385169571802E-83, 1.134857098306787E-82, 3.468049324128309E-82, 2.625423995658143E-82, -3.42827917465521E-81, 5.119461911618321E-81, -2.134387988350615E-80, -4.4703076268400615E-80, 4.806078883451016E-80, 2.3820250362443495E-79, -7.258551497833573E-79, -4.0297835558876335E-78, 2.1424166787650852E-78, -3.2117127164185917E-77, 4.8459153070935316E-77, -1.766924303914492E-76, -2.6921749814579492E-76, -4.1291070428848755E-76, 2.2086994756104319E-75, -7.814146377574201E-75, -1.9589778310104216E-74, 6.52658129486538E-74, 1.7804909509998055E-74, -4.1900132227036916E-73, 1.5705861683841123E-72, -1.904714978998808E-72, -7.81295459930537E-72, 2.818537910881676E-71, 5.840507984320445E-71, 1.7331720051707087E-70, 1.936946987935961E-70, -5.86517231340979E-71, -1.3277440528416646E-69, 1.9906256185827793E-69, 8.668714514280051E-69, 6.643105496829061E-69, -2.5436254170647032E-67, -4.8279217213630774E-67, -1.2640304072937576E-66, 3.51187258511716E-66, 1.4199501303738373E-65, -1.2351697477129173E-65, 7.0542365522414836E-65, 1.030593104122615E-64, -5.452692909894593E-65, -9.415506349675128E-64, -3.6206211446779087E-63, -1.6699188275658641E-62, 2.287280262665656E-62, 7.076135457313529E-62, 2.9019628518165404E-61, -3.1305705497720186E-61, 2.2978757040142953E-60, 1.2424439441817321E-60, 7.140343013236265E-60, 8.633726388939636E-60, 1.3483035574114863E-58, 1.653701058949654E-58, -8.939932297357388E-58, -1.395320103272191E-57, 6.440430933947252E-58, -1.681200826841738E-56, 3.9904382022898837E-56, -4.870518577546228E-56, -1.6990896855901115E-55, -6.751434891261518E-56, -1.669012123121194E-54, -4.079585475491198E-54, -1.3070436427679952E-53, -3.090028378908628E-53, 7.468160889798606E-53, 6.229095980733463E-53, 1.4794751934479566E-52, 1.7444373785853918E-51, -5.3681978363391484E-52, 2.71853394036182E-51, -1.3334367969274016E-50, -1.6958057665854177E-49, -1.452507231312146E-49, 3.3855429446520427E-49, 4.903687986212687E-49, 2.2185957416622524E-48, -9.924196700842429E-48, 4.285128462851149E-47, 3.076063086193525E-48, 4.102052341676543E-46, 1.1745772638457318E-45, -5.309047216809048E-47, 2.72972449891179E-45, -1.1748423022293739E-44, 6.626052626622228E-44, 3.0227439688367925E-44, -4.740494808228372E-43, 5.926057457356852E-43, 3.09768273342776E-42, -5.589493227475577E-42, -8.84908716783327E-42, 2.3684740712822874E-41, 1.4836491430755657E-40, 4.5878801324451396E-40, 1.0585156316103144E-39, 2.3805896467049493E-39, 1.0285082556185196E-38, 2.5187968110874885E-38, -1.4088399542613178E-38, -3.00901028043488E-38, 2.0089026801414973E-37, -1.3324111396289096E-36, 5.458481186294964E-36, -4.8402541351522003E-36, -1.3331969720555312E-35, -8.248332290732976E-35, -1.8349670703969982E-34, 6.403477383195494E-34, 3.7813691654412385E-34, 2.4621305031382827E-33, -5.634051826192439E-33, 3.817173955083142E-32, -6.038239639506472E-32, -2.130447095555397E-31, -6.824454861992054E-31, -1.3455801602048414E-30, -2.518642767561659E-30, 8.082792416221215E-30, 4.718103502869148E-29, -5.607991635038776E-29, -1.8042191582018579E-28, 6.989914264479507E-28, -2.9031739430339586E-28, 6.076820259849921E-27, -3.24981577480893E-27, -2.7648210023059463E-26, -9.785306155980342E-26, 1.241529292737115E-25, 3.0891604448087654E-25, 2.3451052074796954E-24, 6.574128018028633E-24, -1.3345148716925826E-23, 4.3594621428644293E-23, -5.678896695157704E-23, -4.676849004137386E-23, -2.281578975407609E-22, -3.144430608076357E-21, 5.662033727488754E-22, -4.30293375386492E-21, 4.985137671479376E-20, 1.657668502165438E-19, -3.3878706977811337E-19, -7.488022803661722E-19, 1.725039737424264E-18, -6.0275040161173166E-18, -8.081007442213538E-19, 2.9257892371894816E-17, 1.5231541295722552E-16, -1.1474026049124666E-17, 6.890372706231206E-16, 2.592721454922832E-15, -1.1253822296423454E-15, -2.650684279637763E-14, -4.107226967119929E-15, -3.130508064738312E-14, -6.729414275200856E-14, -1.6166170913368169E-12, -1.2059301405584488E-12, -1.2210091619211167E-11, 3.695372823623631E-12, 5.119220484478292E-11, -1.0857572226543142E-10, -4.6490379071586397E-10, -4.5810381714280557E-10, 1.4909756678328582E-9, -1.3155828104004438E-8, -9.149755188170102E-9, 0.0, 8.254840070411029E-8, -1.0681886149151956E-7, -3.359944163407147E-8, -2.1275002921718894E-6, 1.2129920353421116E-5, 2.1520078872608393E-5, 1.0178783359926372E-4, -2.077077172525637E-5, -5.67996159922899E-5, 9.510567165169581E-4, 0.0010901978184553272, 0.010169003920808009, 0.017008920503326107, 0.03416477677774927, -0.1275278893606981, 0.5205078726367633, 0.7535752982147762, 1.1373305111387886, -3.036812739155085, 11.409790277969124, -9.516785302789955, -49.86840843831867, -393.7510973999651, -686.1565277058598, 4617.385872524165, -11563.161235730215, -8230.201383316231, -34460.52482632287, 50744.04207438878, 357908.46214699093, 1936607.425231087, 3222936.695160983, 5477052.0646243105, -3.517545711859706E7, -1.2693418527187027E8, -2.5316384477288628E8, -1.6436423669122624E8, 4.0889180422033095E8, 4.968829330953611E9, -3.503399598592085E9, 1.905394922122271E10, 1.0361722296739479E11, -5.806792575852521E10, 2.3454138776381036E11, -1.718446464587963E12, -1.0946634815588584E12, 1.6889383928999305E13, -3.784600043778247E13, 7.270965670658928E13, -4.9202842786896806E14, 4.597700093952774E14, 2.6113557852262235E15, -4.544525556171388E15, -9.517971970450354E15, -2.0634857819227416E16, -9.7143113104549808E16, -2.2667083759873216E16, -7.2285665164439578E17, 4.1215410760803866E18, 8.5807488300972206E18, 1.530436781375042E19, -1.5453111533064765E19, -1.0633845571643594E20, -3.512380426745336E20, 3.7734658676841284E20, -3.855478664503271E21, 7.984485303520287E21, -1.2296934902142301E22, 1.042139023692827E22, 1.2167897656061312E23, 9.22064170155394E22, 3.965171513035854E23, -4.135121057126514E24, -7.944341754299148E24, 1.4715152230577016E25, -3.0635272288480756E25, -9.54468158713835E25, 1.5411775738825048E25, -8.274711842374368E26, -1.0028324930788433E27, 5.189062091114782E27, -2.8583500869462184E28, -5.198295198128238E28, 2.9758750368256437E29, 3.216046320616945E29, -1.7846700158234043E30, 3.847174961282827E30, 9.026991921214922E30, 4.1358029739592175E30, -6.461509354879894E29, 9.704297297526684E31, 2.9731739067444943E32, 9.97728609663656E32, 3.1149346370027763E33, 2.0051635097366476E34, 2.819272221032373E34, 1.6266731695798413E34, 1.998050894021586E35, -6.1633417615076335E35, 2.2505716077585116E36, 1.9299691540987203E36, 8.006569251375383E36, -3.785295042408568E37, -1.1870498357197593E38, 1.0010529668998112E38, 1.3240710866573994E38, 2.6888010385137123E39, 1.7400655988987023E39, -6.402740469853475E39, -3.93114092562274E40, 1.2363717201084252E41, -1.9219116633978794E41, -1.347867098583136E42, 7.87675118338788E41, 3.3932984011177642E41, -1.9872713979884691E43, 2.220208491349658E43, -3.466267817480825E43, 3.19462030745197E44, -9.841244788104406E44, -2.2676593395522725E45, -1.1349246400274207E46, -1.1700910284427406E46, -3.6754317105801715E46, 1.7647101734915075E47, 2.122358392979746E47, 3.156243682143956E47, 5.356668151937413E47, 2.7668218233914262E48, 3.5127708120698784E48, 1.7884841356632925E49, 1.716531820904728E50, -2.9114757102866277E50, 1.0657703081219677E51, -7.512169809356372E50, 1.764200470879736E51, -1.0088898215431471E52, -3.1085734725176E52, 4.3529009584292495E52, -2.467842129213774E53, -3.9317379627195146E53, -4.332335454045836E52, 7.979013724931926E54, -1.5038413653121357E55, 9.310799925566843E55, -2.2042966348036592E55, -4.518315366841937E55, -6.971366338144781E56, -2.0461505570781806E57, -8.823884392655312E57, -1.1264032993918548E58, -7.692065092509875E58, -1.8472516879728875E59, 8.72220314694275E58, 1.6525336989036362E59, -3.343201925128334E60, 5.493352163155986E60, -2.548073509300398E61, -9.566541624209933E61, 4.0891054447206644E61, -7.724182294653349E62, 1.0143022354947225E63, -4.952031310451961E63, -7.877410133454722E63, 4.505432606253564E64, -7.330635250808021E64, -1.642361029990822E65, 5.982180242124184E65, 7.120242132370469E65, 5.908356249789671E66, -2.8477710945673134E65, 6.65688196961235E66, -9.233295580238604E67, 3.2850043261803593E68, 7.041681569694413E68, -1.5652761725518397E69, 1.5377053215489084E68, 1.282130763903269E70, -2.380286345847567E70, -7.207022875977515E70, 2.7641662602473095E71, 7.685235201534525E71, 4.3239378585884645E70, -1.6840562544109314E72, -5.04128025464686E71, 5.4557485189210095E73, 7.160277784358221E73, 7.636179075087608E73, -8.18804507680012E74, 2.807397988979441E75, 2.165163304600171E75, -1.3208450062862734E76, -5.1939252391404724E76, -6.985952908805853E76, -1.6259920998287064E77, 6.098975200926637E77, -5.63383579957466E77, -1.5876819186852907E78, 2.1487475413123092E79, -3.987619123706934E79, 9.772655251656639E79, -1.638756156057952E79, -7.83892088580041E80, 1.274413296252691E81, 2.51946651720982E81, -2.516866097506943E81, 1.053956282234684E82, 1.8279051206232177E83, 1.2250764591564252E82, -4.0353723442917463E83, -1.4121324224340735E84, -5.45287716696021E84, -1.7514953095665195E85, -5.0706081370522526E85, -4.35799392139009E85, -3.982538093450217E86, -1.4591838284752642E87, 2.5313735821872488E87, -3.718501227185903E86, -1.3907979640327008E88, -5.79002114093961E86, -1.2500675565781447E89, 4.8182788286170926E89, -1.7198866036687559E90, -4.690417668647599E88, 1.3020631859056421E91, -1.3850458263351744E91, 4.87301010703588E91, -1.695546877943826E92, -1.6353756659909833E92, -1.5483926773679628E93, -1.8921091400297595E93, -6.183525570536406E93, -4.987913342551977E93, 1.0186485886120274E93, -1.5343120819745468E95, -5.262123923229857E95, 1.618327917706804E96, -4.135185828158998E96, -8.016793741945299E96, -3.0399439534134115E97, -1.2319346292749103E98, 7.536337311795176E97, -3.577715974851322E98, 2.0521614818695524E99, 1.2627736197958951E98, -5.206910481915062E99, 3.0974593993948837E100, -9.522726334561169E100, -1.1909272509710985E100, -5.056512677995137E101, 2.0902045062932175E102, 6.243669516810509E102, -1.7375090618655787E103, -2.5445477450140954E103, 3.619891246849381E103, 8.90737333900943E103, -2.7897360297480367E104, 1.3725786770437066E105, -8.316530604593264E105, -6.054541568735673E105, 7.523374196797555E105, 1.1475955030427985E107, 1.5260756679495707E107, 7.370294848920685E107, 1.3608995799112174E108, 1.0700758858011432E108, -4.989318918773146E108, -1.6629755787634093E108, 7.635999584053557E109, 1.892621828736983E109, -6.793094743406533E110, -8.160628910742724E110, -7.724219106106896E111, -1.6059226011778748E112, -1.5277127454062126E112, 3.911086668967361E112, 3.529920406834134E113, -4.3991443996021166E113, -1.2631909085915044E114, 3.8656278695544835E114, 1.71845288713123E115, 3.7660598745907915E115, -4.048086182363988E115, 2.3093822298965837E116, -9.684925795536813E116, -3.137992585221854E117, -5.637415935329794E117, -1.5536658521931418E118, -6.336314643222911E118, 8.550658957115427E118, -5.591880480212007E119, 2.4137404318673354E119, -2.631656656397244E120, -7.653117429165879E119, -4.073965591445897E121, 3.634781057940233E121, 4.537273754534966E121, -2.5138919966097735E122, -1.0292817180691822E123, -1.4265564976097062E122, 6.000235114895513E123, 4.186590347846346E124, -1.8950538406321535E124, 7.716762345695022E124, -4.443798187035849E125, -2.268994961992292E125, -2.8169291774231604E126, -2.749127978087685E126, -2.2929764629585683E126, -7.369842361872221E127, 2.81312841469177E128, 2.7856896414497757E128, -3.096733638475319E128, -5.4199510725063615E129, -7.315860999413894E129, 3.6424644535156437E130, -7.886250961456327E130, 5.289988151341401E130, 2.7758613753516344E131, -2.738246981762776E132, -2.2667181460478093E132, -3.614672661225457E131, 2.325337720526947E133, 4.16603235883392E133, -6.50348962894948E133, 3.851445905038431E134, -5.46060534001412E134, 5.4679180659102885E135, -3.037477806841494E135, -3.0417051809209134E136, -6.995964550587914E136, -3.6897084415718804E137, -6.938000231893302E137, 2.403806217004454E138, -3.4552363953199905E138, 7.3409917428393E138, -1.7445917446236717E139, -6.680679913078676E139, -8.193572619487537E139, 5.337290292186291E139, -3.951314467739045E140, -4.4662073456574476E141, 6.249381778908997E141, -2.928362616578011E142, -1.6661676835672304E143, -1.974465323891493E143, 1.3083870531380308E144, -2.382825271750576E144, -5.4826958838142734E144, 1.5340733916570804E145, -3.1327120557842516E145, 1.5790297768522832E146, 1.1518771984292262E146, -4.789917000227385E145, -8.689594184775204E146, 3.0680417869552433E146, 4.877860620031438E147, -3.4650891244084597E148, 1.8702183451052442E149, -3.5727227900139915E148, -1.3457821696677932E150, 3.3212950284273017E149, 7.316033240396569E150, -7.187723217018267E150, -8.537194547485455E150, -1.4561530066010593E152, -7.548155147049997E151, 1.0047353208353007E153, -1.2489460589853119E153, 4.426120229279107E153, -2.5466223330961086E154, 8.831699889789037E154, -2.0258084311749475E155, -5.525009099476396E155, -1.0235056525096769E156, -4.117971654572494E154, -4.7559175309753334E156, -1.4656240137098836E157, -7.675790582869644E157, -1.0126616322947826E158, 7.084865265284368E158, -9.374695893307895E158, 2.05597910889115E159, -7.368602086210704E159, -1.6167825196198978E160, 2.3832096207000712E160, 1.3166970112139726E161, -6.432337568761393E161, 2.9279594746502846E161, 4.8926595743317624E162, 1.2704793774453618E163, -1.1345910784680524E163, 7.75933511025868E163, -1.1441115218462356E163, 5.162248481759758E164, 6.362563919556132E164, -2.8362173224732088E165, -4.342161053332263E165, 4.388125271425036E166, -7.049068240916723E166, 3.8520227881415595E166, 2.9274120974020826E167, -7.500936767542933E167, -6.540181860667302E168, 4.664436780622191E168, -1.436111169285268E169, -1.0407581736224179E170, -2.7670181051374297E170, -6.788169932297778E170, 1.6997387217850427E171, -1.0965324942770584E171, 9.841563119484623E171, 3.175748919314254E172, 2.9621181706527444E172, -3.30101656090905E173, -3.791840683760427E173, -2.841347842666459E174, -7.836327226971707E174, 9.650358667643114E174, 5.9994277301267294E175, -6.0490084078440215E175, -2.8964095485948707E176, 9.916187343252014E175, 2.7535627955313556E176, 3.886891475472745E177, 3.1962472803616787E178, -5.50599549115449E178, 5.672812341879918E178, -3.295268490032475E179, 9.761163062156018E179, 3.107837179570674E180, 3.3894811576571423E179, -5.235397688850367E180, -5.004237248003625E181, -1.7544995191195304E182, 2.645622651144787E182, -3.459885432869825E182, -4.0361435606199565E183, -1.8382923511801317E183, -1.7332235571505177E184, 2.847653455671381E184, 1.7991060813894693E185, -2.0937429891059164E185, 5.744446753652847E185, -2.1349396267483754E184, -1.2542332720182776E186, 3.3730714236579374E186, -5.923734606208998E187, 2.24669039465627E188, -1.2588742703536392E188, 1.474522484905093E189, -2.4006971787803736E189, -3.52597540499141E189, 2.6676722922838097E190, 5.27579825970359E190, 2.1360492104281465E191, 1.9442210982008953E191, -1.4691239161932232E190, 3.8218180377739526E192, 1.9722862688653467E192, 3.047601928063002E193, 1.6747356805175311E193, 7.710512446969693E192, 1.7780021277684035E194, -1.4015110811648513E195, 4.0447634595724164E195, 9.023639664212642E195, 1.976868146639626E196, -9.084495133765657E196, -1.2023077889892748E196, 5.7455368446308694E197, -1.7766273910482863E198, 3.5590470673352285E198, 1.1304970373249033E199, 1.6496143246803731E199, -2.394588390685223E199, -1.4677321100833294E199, -1.1843870433971731E201, -1.8853982316037226E201, 2.8829871423339434E201, 5.369687677705385E200, 1.8356062677502141E202, -1.5544655377217875E203, 2.955364187248884E203, -2.7651059253677425E203, 9.903174064539538E203, -3.284204788892967E204, -1.5843229740595697E205, 5.333371443528904E204, 1.2781631468016048E205, 3.2188292385399854E205, -6.619064395428225E206, 1.291561142865928E207, 1.3142988156905172E207, -1.3841980097978606E208, 6.380177790989479E207, 1.0386032577072378E209, 2.7681631086098026E209, -9.053874899534375E209, 1.2424707839848734E210, 1.045546633850141E211, -1.2448938139338362E211, 7.221902646057552E211, 6.651345415954053E211, -5.8180712702152444E212, 5.275183961165903E212, 5.092753117288608E212, -2.437796532151255E213, 1.3480763914637323E214, 5.619995933180841E214, 2.547000388735681E214, 4.817319356453926E214, -7.897146442236022E215, -7.93844120619577E215, -4.9489938500591624E216, -2.862720607805682E216, -2.9275804461593914E217, -3.411186219855533E217, -2.0110092718356274E218, -8.472642266772353E218, -4.357990742470246E217, 4.793444363780116E219, 1.6544084224626834E220, -6.017988576347111E220, -3.580397221598409E220, -4.7208848667217906E221, -7.724899660259369E221, -2.4459728627968634E222, 3.667348665023154E221, 4.544122762558404E223, -4.0573420909530794E223, -3.2552002992257195E223, -6.488296536838142E224, 1.7544839352461719E224, -4.0873400635183405E225, -8.833499967268279E225, -1.0953484767704112E226, -8.56825295972308E226, -1.8097633115378247E227, -6.171564449018882E227, -4.351843341274115E227, 2.8032429752543687E228, -1.0065901934522996E229, 9.863720960170636E228, -9.481088691357648E229, -1.6843492713373762E229, -1.3282890219894906E230, 6.883577595238845E230, -1.153577281189635E231, -8.009548754642203E231, -4.722612904888278E232, -4.768909872963015E232, 3.2542391242036633E233, 6.513425781583774E233, -1.8889614379831606E233, -2.227647301474917E234, -4.7971208532986115E234, 6.693500938105557E234, -6.587776621471115E234, 3.0099905634916516E236, -4.6694407626686244E235, 2.965546585110978E236, 5.771457643937893E237, -9.029878114318277E237, 8.169926810324408E237, -1.779945804977441E239, 4.1218749988429474E239, 7.201319954099161E239, -1.530845432304069E240, -3.861762510530086E240, -2.4090696463777446E241, -1.8196842273916379E241, -1.7959243076374794E242, -3.7257346819782323E242, 3.413310324247329E242, -2.0406580894051073E243, -1.5335923091350053E243, -1.056727406551016E244, -4.6753408714233723E244, -2.0697130057384643E245, -1.0356006160554071E245, 1.1339195187304043E246, 1.792783182582235E246, 9.599214853681978E245, 1.5367645598839362E247, 2.934570385464815E247, -1.6411525886171892E248, 2.2638862982382794E248, -1.2268014119628852E249, 4.737693450915584E247, 6.3818993714899675E249, 1.2639113706171572E250, -4.011320021817099E249, -5.2744376732859406E250, -3.732266217624991E251, 1.7591819833844019E252, -3.292458622014749E252, -9.161340309319204E252, -1.728610646009749E253, 1.1698424008604891E254, -1.8494343291160577E254, 2.0568656302182574E254, 1.0537591246531136E255, 1.803052068234866E254, -1.053036399720808E256, 2.1836166619192508E256, 1.0368403169781264E257, -2.0648015610276362E257, 8.426174035728768E257, -1.3577357192972777E258, 2.1313950901331177E258, 8.919141843592823E258, -1.1800039972549816E259, -1.1878772398311421E260, -1.538273497873993E260, -4.51305093266001E260, 1.1241179396053055E261, 6.154786508667658E261, -1.0626125049032536E262, -1.8908603201210102E262, -4.571195152299358E262, 1.526100002923062E263, -9.457084582570225E263, -1.5460500618825853E264, -5.598276199126451E264, -1.2074097381167957E265, -3.015972957475025E265, 1.4345106852061226E265, 8.28479585346867E265, -3.118741081244705E266, -1.2054747399765794E266, 3.4454766202661184E267, 1.1279135096919439E268, 1.2066382528772518E268, 1.1984128162292276E269, 3.685169705587367E268, 6.570047690198998E269, 1.8836492887460383E270, 7.4364594917181125E270, 1.2773080633674971E271, 1.8928981707279692E271, 4.039437286589528E271, 1.785277385538302E272, -6.017681359527226E272, 1.9716943051755635E273, -8.772048092842086E271, 1.5645672698520312E274, -3.7979660725865874E274, 5.324902289537048E274, -1.8806716685063293E274, 9.320900373401115E275, 1.4615985810260016E275, 8.321226457219046E276, -4.608112855795952E276, -3.476352191116455E277, 5.266381689434054E277, -9.622106063561645E277, 4.1719443712336026E278, 4.222411269063919E279, -6.714376022102489E279, -1.0732735585199074E280, -2.5866883048437488E280, -1.1306860837934988E281, 3.690690354793168E281, -5.5299180508885456E281, 2.7006726968568243E282, 4.135457669031131E282, 2.8401159516008676E283, 5.127265762024798E283, -3.4893601256685762E283, -1.145160459652136E283, 2.1742808735341656E284, 4.656972469326391E285, 7.672307991205681E285, 1.5781599575584034E286, 4.218682431618625E286, -2.4602260687026867E287, 2.7211316452521414E287, -1.8740018211089393E288, 2.6367639658206183E288, -3.102678910525039E288, 1.1992295328636466E289, 6.8190133180135345E289, 5.783203879030497E289, 5.171047077293295E290, 1.8396930096213817E290, 1.4977047507315718E290, 1.0672499803427623E292, 3.3310942289102464E291, -7.962256961838823E292, 1.7396889119023863E293, 3.8072183820435085E293, 2.2772059538865722E294, -2.0549866377878678E294, -1.2277120342804144E295, -3.609949022969024E295, 1.1479863663699871E296, -1.5314373779304356E296, -2.2537635160762597E296, -6.1370690793508674E296, -4.996854125490041E297, -6.883499809714189E297, -2.595456638706416E298, -1.1892631528580186E299, -1.4672600326020399E299, -3.200068509818696E299, -7.126913872617518E298, -3.3655587417265094E300, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN]
size(return[]) == 1500
===========================================================================
org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant():::ENTER
===========================================================================
org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant():::EXIT
org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_A == orig(org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_A)
org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_A[] == orig(org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_A[])
org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_B == orig(org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_B)
org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_B[] == orig(org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_B[])
org.apache.commons.math3.util.FastMathLiteralArrays.EXP_FRAC_A == orig(org.apache.commons.math3.util.FastMathLiteralArrays.EXP_FRAC_A)
org.apache.commons.math3.util.FastMathLiteralArrays.EXP_FRAC_A[] == orig(org.apache.commons.math3.util.FastMathLiteralArrays.EXP_FRAC_A[])
org.apache.commons.math3.util.FastMathLiteralArrays.EXP_FRAC_B == orig(org.apache.commons.math3.util.FastMathLiteralArrays.EXP_FRAC_B)
org.apache.commons.math3.util.FastMathLiteralArrays.EXP_FRAC_B[] == orig(org.apache.commons.math3.util.FastMathLiteralArrays.EXP_FRAC_B[])
org.apache.commons.math3.util.FastMathLiteralArrays.LN_MANT == orig(org.apache.commons.math3.util.FastMathLiteralArrays.LN_MANT)
org.apache.commons.math3.util.FastMathLiteralArrays.LN_MANT.getClass().getName() == orig(org.apache.commons.math3.util.FastMathLiteralArrays.LN_MANT.getClass().getName())
org.apache.commons.math3.util.FastMathLiteralArrays.LN_MANT[] == orig(org.apache.commons.math3.util.FastMathLiteralArrays.LN_MANT[])
return has only one value
return.getClass().getName() == double[][].class
return[] contains no nulls and has only one value, of length 1024
size(return[]) == 1024
===========================================================================
org.apache.commons.math3.util.Incrementor$1:::OBJECT
===========================================================================
org.apache.commons.math3.util.Incrementor$1.():::EXIT
===========================================================================
org.apache.commons.math3.util.Incrementor:::OBJECT
this.maximalCount >= 0
this.count >= 0
this.maxCountCallback != null
this.maxCountCallback.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
===========================================================================
org.apache.commons.math3.util.Incrementor.Incrementor():::EXIT
this.maximalCount == 0
this.count == 0
===========================================================================
org.apache.commons.math3.util.Incrementor.Incrementor(int):::ENTER
max == 0
===========================================================================
org.apache.commons.math3.util.Incrementor.Incrementor(int):::EXIT
this.maximalCount == 0
this.count == 0
===========================================================================
org.apache.commons.math3.util.Incrementor.Incrementor(int, org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback):::ENTER
max == 0
cb != null
cb.getClass().getName() == org.apache.commons.math3.util.Incrementor$1.class
===========================================================================
org.apache.commons.math3.util.Incrementor.Incrementor(int, org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback):::EXIT
this.maximalCount == 0
this.count == 0
===========================================================================
org.apache.commons.math3.util.Incrementor.getCount():::ENTER
this.maximalCount == 2147483647
===========================================================================
org.apache.commons.math3.util.Incrementor.getCount():::EXIT
this.maximalCount == orig(this.maximalCount)
this.count == orig(this.count)
this.maxCountCallback == orig(this.maxCountCallback)
this.maxCountCallback.getClass().getName() == orig(this.maxCountCallback.getClass().getName())
this.maximalCount == 2147483647
===========================================================================
org.apache.commons.math3.util.Incrementor.incrementCount():::ENTER
===========================================================================
org.apache.commons.math3.util.Incrementor.incrementCount():::EXIT
this.maximalCount == orig(this.maximalCount)
this.maxCountCallback == orig(this.maxCountCallback)
this.maxCountCallback.getClass().getName() == orig(this.maxCountCallback.getClass().getName())
this.count >= 1
this.count - orig(this.count) - 1 == 0
===========================================================================
org.apache.commons.math3.util.Incrementor.resetCount():::ENTER
===========================================================================
org.apache.commons.math3.util.Incrementor.resetCount():::EXIT
this.maximalCount == orig(this.maximalCount)
this.maxCountCallback == orig(this.maxCountCallback)
this.maxCountCallback.getClass().getName() == orig(this.maxCountCallback.getClass().getName())
this.count == 0
this.count <= orig(this.count)
===========================================================================
org.apache.commons.math3.util.Incrementor.setMaximalCount(int):::ENTER
===========================================================================
org.apache.commons.math3.util.Incrementor.setMaximalCount(int):::EXIT
this.count == orig(this.count)
this.maxCountCallback == orig(this.maxCountCallback)
this.maxCountCallback.getClass().getName() == orig(this.maxCountCallback.getClass().getName())
===========================================================================
org.apache.commons.math3.util.MathUtils:::CLASS
===========================================================================
org.apache.commons.math3.util.MathUtils.checkNotNull(java.lang.Object):::ENTER
===========================================================================
org.apache.commons.math3.util.MathUtils.checkNotNull(java.lang.Object):::EXIT
===========================================================================
org.apache.commons.math3.util.MathUtils.checkNotNull(java.lang.Object, org.apache.commons.math3.exception.util.Localizable, java.lang.Object[]):::ENTER
o.getClass().getName() == java.math.BigInteger.class
pattern.getClass().getName() == org.apache.commons.math3.exception.util.LocalizedFormats.class
args.getClass().getName() == java.lang.Object[].class
args[] == []
===========================================================================
org.apache.commons.math3.util.MathUtils.checkNotNull(java.lang.Object, org.apache.commons.math3.exception.util.Localizable, java.lang.Object[]):::EXIT
args[] == orig(args[])
args[] == []
===========================================================================
org.apache.commons.math3.util.Precision:::CLASS
===========================================================================
org.apache.commons.math3.util.Precision.equals(double, double, int):::ENTER
maxUlps == 1
===========================================================================
org.apache.commons.math3.util.Precision.equals(double, double, int):::EXIT
===========================================================================
org.apache.commons.math3.util.Precision.equals(double, double, int):::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.math3.util.Precision.equals(double, double, int):::EXIT;condition="not(return == true)"
return == false
