===========================================================================
org.apache.commons.math.ConvergingAlgorithmImpl:::OBJECT
this has only one value
this.getClass().getName() == org.apache.commons.math.analysis.solvers.BrentSolver.class
this.absoluteAccuracy == 1.0E-6
this.relativeAccuracy == 1.0E-14
this.maximalIterationCount == 100
this.defaultAbsoluteAccuracy == 1.0E-6
this.defaultRelativeAccuracy == 1.0E-14
this.defaultMaximalIterationCount == 100
this.iterationCount >= 0
===========================================================================
org.apache.commons.math.ConvergingAlgorithmImpl.ConvergingAlgorithmImpl(int, double):::ENTER
defaultMaximalIterationCount == 100
defaultAbsoluteAccuracy == 1.0E-6
===========================================================================
org.apache.commons.math.ConvergingAlgorithmImpl.ConvergingAlgorithmImpl(int, double):::EXIT
this.iterationCount == 0
===========================================================================
org.apache.commons.math.ConvergingAlgorithmImpl.getAbsoluteAccuracy():::ENTER
===========================================================================
org.apache.commons.math.ConvergingAlgorithmImpl.getAbsoluteAccuracy():::EXIT
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.maximalIterationCount == orig(this.maximalIterationCount)
this.defaultAbsoluteAccuracy == orig(this.defaultAbsoluteAccuracy)
this.defaultRelativeAccuracy == orig(this.defaultRelativeAccuracy)
this.defaultMaximalIterationCount == orig(this.defaultMaximalIterationCount)
this.iterationCount == orig(this.iterationCount)
return == 1.0E-6
===========================================================================
org.apache.commons.math.ConvergingAlgorithmImpl.getIterationCount():::ENTER
this.iterationCount == 0
===========================================================================
org.apache.commons.math.ConvergingAlgorithmImpl.getIterationCount():::EXIT
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.maximalIterationCount == orig(this.maximalIterationCount)
this.defaultAbsoluteAccuracy == orig(this.defaultAbsoluteAccuracy)
this.defaultRelativeAccuracy == orig(this.defaultRelativeAccuracy)
this.defaultMaximalIterationCount == orig(this.defaultMaximalIterationCount)
this.iterationCount == orig(this.iterationCount)
this.iterationCount == 0
return == 0
===========================================================================
org.apache.commons.math.MathRuntimeException$4:::CLASS
===========================================================================
org.apache.commons.math.MathRuntimeException$4:::OBJECT
this has only one value
this.val$pattern has only one value
this.val$pattern.toString == "invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}"
this.val$arguments has only one value
this.val$arguments.getClass().getName() == java.lang.Object[].class
this.val$arguments[] contains no nulls and has only one value, of length 3
this.val$arguments[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
this.val$arguments[].getClass().getName() elements == java.lang.Double.class
size(this.val$arguments[]) == 3
===========================================================================
org.apache.commons.math.MathRuntimeException$4.(java.lang.String, java.lang.Object[]):::ENTER
$hidden$1 has only one value
$hidden$1.toString == "invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}"
$hidden$2 has only one value
$hidden$2.getClass().getName() == java.lang.Object[].class
$hidden$2[] contains no nulls and has only one value, of length 3
size($hidden$2[]) == 3
===========================================================================
org.apache.commons.math.MathRuntimeException$4.(java.lang.String, java.lang.Object[]):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
$hidden$2[] == orig($hidden$2[])
$hidden$1.toString == "invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}"
$hidden$2[] contains no nulls and has only one value, of length 3
===========================================================================
org.apache.commons.math.MathRuntimeException:::CLASS
===========================================================================
org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(java.lang.String, java.lang.Object[]):::ENTER
pattern has only one value
pattern.toString == "invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}"
arguments has only one value
arguments.getClass().getName() == java.lang.Object[].class
arguments[] contains no nulls and has only one value, of length 3
size(arguments[]) == 3
===========================================================================
org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(java.lang.String, java.lang.Object[]):::EXIT
pattern.toString == orig(pattern.toString)
arguments[] == orig(arguments[])
pattern.toString == "invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}"
arguments[] contains no nulls and has only one value, of length 3
return has only one value
===========================================================================
org.apache.commons.math.analysis.MonitoredFunction:::OBJECT
this has only one value
this.callsCount >= 0
this.f has only one value
this.f != null
this.f.getClass().getName() == org.apache.commons.math.analysis.QuinticFunction.class
===========================================================================
org.apache.commons.math.analysis.MonitoredFunction.MonitoredFunction(org.apache.commons.math.analysis.UnivariateRealFunction):::ENTER
f has only one value
f.getClass().getName() == org.apache.commons.math.analysis.QuinticFunction.class
===========================================================================
org.apache.commons.math.analysis.MonitoredFunction.MonitoredFunction(org.apache.commons.math.analysis.UnivariateRealFunction):::EXIT
this.callsCount == 0
===========================================================================
org.apache.commons.math.analysis.MonitoredFunction.getCallsCount():::ENTER
===========================================================================
org.apache.commons.math.analysis.MonitoredFunction.getCallsCount():::EXIT
this.callsCount == orig(this.callsCount)
this.f == orig(this.f)
this.f.getClass().getName() == orig(this.f.getClass().getName())
===========================================================================
org.apache.commons.math.analysis.MonitoredFunction.setCallsCount(int):::ENTER
this.callsCount one of { 5, 15, 17 }
callsCount == 0
===========================================================================
org.apache.commons.math.analysis.MonitoredFunction.setCallsCount(int):::EXIT
this.f == orig(this.f)
this.f.getClass().getName() == orig(this.f.getClass().getName())
this.callsCount == 0
===========================================================================
org.apache.commons.math.analysis.MonitoredFunction.value(double):::ENTER
===========================================================================
org.apache.commons.math.analysis.MonitoredFunction.value(double):::EXIT
this.f == orig(this.f)
this.f.getClass().getName() == orig(this.f.getClass().getName())
this.callsCount >= 1
this.callsCount - orig(this.callsCount) - 1 == 0
===========================================================================
org.apache.commons.math.analysis.QuinticFunction:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math.analysis.QuinticFunction.QuinticFunction():::EXIT
===========================================================================
org.apache.commons.math.analysis.QuinticFunction.value(double):::ENTER
===========================================================================
org.apache.commons.math.analysis.QuinticFunction.value(double):::EXIT
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver:::CLASS
org.apache.commons.math.analysis.solvers.BrentSolver.NON_BRACKETING_MESSAGE has only one value
org.apache.commons.math.analysis.solvers.BrentSolver.NON_BRACKETING_MESSAGE != null
org.apache.commons.math.analysis.solvers.BrentSolver.NON_BRACKETING_MESSAGE.toString == "function values at endpoints do not have different signs.  Endpoints: [{0}, {1}], Values: [{2}, {3}]"
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver:::OBJECT
this has only one value
this.functionValueAccuracy == 1.0E-15
this.defaultFunctionValueAccuracy == 1.0E-15
this.result one of { 0.0, 1.0000001028217766 }
this.functionValue == 0.0
this.f == null
this.absoluteAccuracy == 1.0E-6
this.relativeAccuracy == 1.0E-14
this.maximalIterationCount == 100
this.defaultAbsoluteAccuracy == 1.0E-6
this.defaultRelativeAccuracy == 1.0E-14
this.defaultMaximalIterationCount == 100
this.iterationCount >= 0
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver.BrentSolver():::EXIT
this.resultComputed == false
this.result == 0.0
this.iterationCount == 0
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver.solve(org.apache.commons.math.analysis.UnivariateRealFunction, double, double):::ENTER
this.resultComputed == false
this.result == 0.0
this.iterationCount == 0
f has only one value
f.getClass().getName() == org.apache.commons.math.analysis.MonitoredFunction.class
min == 0.6
max == 7.0
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver.solve(org.apache.commons.math.analysis.UnivariateRealFunction, double, double):::EXIT
org.apache.commons.math.analysis.solvers.BrentSolver.NON_BRACKETING_MESSAGE == orig(org.apache.commons.math.analysis.solvers.BrentSolver.NON_BRACKETING_MESSAGE)
org.apache.commons.math.analysis.solvers.BrentSolver.NON_BRACKETING_MESSAGE.toString == orig(org.apache.commons.math.analysis.solvers.BrentSolver.NON_BRACKETING_MESSAGE.toString)
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.defaultFunctionValueAccuracy == orig(this.defaultFunctionValueAccuracy)
this.functionValue == orig(this.functionValue)
this.f == orig(this.f)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.maximalIterationCount == orig(this.maximalIterationCount)
this.defaultAbsoluteAccuracy == orig(this.defaultAbsoluteAccuracy)
this.defaultRelativeAccuracy == orig(this.defaultRelativeAccuracy)
this.defaultMaximalIterationCount == orig(this.defaultMaximalIterationCount)
this.resultComputed == true
this.result == 1.0000001028217766
this.iterationCount == 13
return == 1.0000001028217766
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver.solve(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double):::ENTER
this.result == 0.9999999999999999
this.iterationCount one of { 0, 2, 14 }
f has only one value
f.getClass().getName() == org.apache.commons.math.analysis.MonitoredFunction.class
min == 0.6
max == 7.0
initial one of { 0.61, 1.0 }
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver.solve(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double):::EXIT109
this.resultComputed == orig(this.resultComputed)
this.iterationCount == 0
orig(this.iterationCount) == 2
orig(initial) == 1.0
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver.solve(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double):::EXIT133
this.iterationCount one of { 2, 14 }
orig(this.iterationCount) one of { 0, 14 }
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver.solve(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double):::EXIT
org.apache.commons.math.analysis.solvers.BrentSolver.NON_BRACKETING_MESSAGE == orig(org.apache.commons.math.analysis.solvers.BrentSolver.NON_BRACKETING_MESSAGE)
org.apache.commons.math.analysis.solvers.BrentSolver.NON_BRACKETING_MESSAGE.toString == orig(org.apache.commons.math.analysis.solvers.BrentSolver.NON_BRACKETING_MESSAGE.toString)
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.defaultFunctionValueAccuracy == orig(this.defaultFunctionValueAccuracy)
this.result == orig(this.result)
this.functionValue == orig(this.functionValue)
this.f == orig(this.f)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.maximalIterationCount == orig(this.maximalIterationCount)
this.defaultAbsoluteAccuracy == orig(this.defaultAbsoluteAccuracy)
this.defaultRelativeAccuracy == orig(this.defaultRelativeAccuracy)
this.defaultMaximalIterationCount == orig(this.defaultMaximalIterationCount)
this.resultComputed == true
this.result == 1.0
this.iterationCount one of { 0, 2, 14 }
return == 1.0
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver.solve(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double, double, double, double):::ENTER
this.resultComputed == false
this.iterationCount == 0
f has only one value
f.getClass().getName() == org.apache.commons.math.analysis.MonitoredFunction.class
x0 one of { 0.6, 0.61, 0.999999 }
y0 one of { -0.04676661989999998, -0.04224, -1.4999937500518831E-6 }
x1 == 7.0
y1 == 16380.0
x2 one of { 0.6, 0.61, 0.999999 }
y2 one of { -0.04676661989999998, -0.04224, -1.4999937500518831E-6 }
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver.solve(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double, double, double, double):::EXIT244
this.result == orig(this.result)
this.iterationCount == 2
orig(this.result) == 0.9999999736360261
orig(x0) == 0.999999
orig(y0) == -1.4999937500518831E-6
orig(x2) == 0.999999
orig(y2) == -1.4999937500518831E-6
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver.solve(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double, double, double, double):::EXIT251
this.iterationCount one of { 13, 14 }
orig(x0) one of { 0.6, 0.61 }
orig(y0) one of { -0.04676661989999998, -0.04224 }
orig(x2) one of { 0.6, 0.61 }
orig(y2) one of { -0.04676661989999998, -0.04224 }
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver.solve(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double, double, double, double):::EXIT
org.apache.commons.math.analysis.solvers.BrentSolver.NON_BRACKETING_MESSAGE == orig(org.apache.commons.math.analysis.solvers.BrentSolver.NON_BRACKETING_MESSAGE)
org.apache.commons.math.analysis.solvers.BrentSolver.NON_BRACKETING_MESSAGE.toString == orig(org.apache.commons.math.analysis.solvers.BrentSolver.NON_BRACKETING_MESSAGE.toString)
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.defaultFunctionValueAccuracy == orig(this.defaultFunctionValueAccuracy)
this.functionValue == orig(this.functionValue)
this.f == orig(this.f)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.maximalIterationCount == orig(this.maximalIterationCount)
this.defaultAbsoluteAccuracy == orig(this.defaultAbsoluteAccuracy)
this.defaultRelativeAccuracy == orig(this.defaultRelativeAccuracy)
this.defaultMaximalIterationCount == orig(this.defaultMaximalIterationCount)
(this.iterationCount == 2)  <==>  (orig(x0) == 0.999999)
(this.iterationCount == 2)  <==>  (orig(x2) == 0.999999)
(this.iterationCount == 2)  <==>  (orig(y0) == -1.4999937500518831E-6)
(this.iterationCount == 2)  <==>  (orig(y2) == -1.4999937500518831E-6)
(this.iterationCount == 2)  <==>  (x0 == orig(x0))
(this.iterationCount == 2)  <==>  (x2 == 7.0)
(this.iterationCount == 2)  <==>  (y0 == -7.499984376059268E-7)
(this.iterationCount == 2)  <==>  (y1 == -1.6653345369377343E-16)
(this.iterationCount == 2)  <==>  (y2 == 16380.0)
(this.iterationCount == 2)  ==>  (orig(this.result) == 0.9999999736360261)
(this.iterationCount == 2)  ==>  (this.result == orig(this.result))
(this.result == 1.0000001028217766)  <==>  (orig(x0) one of { 0.6, 0.61 })
(this.result == 1.0000001028217766)  <==>  (orig(x2) one of { 0.6, 0.61 })
(this.result == 1.0000001028217766)  <==>  (orig(y0) one of { -0.04676661989999998, -0.04224 })
(this.result == 1.0000001028217766)  <==>  (orig(y2) one of { -0.04676661989999998, -0.04224 })
(this.result == 1.0000001028217766)  <==>  (this.iterationCount one of { 13, 14 })
(this.result == 1.0000001028217766)  <==>  (x2 == 0.9999996028217767)
(this.result == 1.0000001028217766)  <==>  (y0 one of { -5.957663490251357E-7, 7.104554413357197E-7 })
(this.result == 1.0000001028217766)  <==>  (y1 one of { -3.954595649520737E-8, 1.5423273104982643E-7 })
(this.result == 1.0000001028217766)  <==>  (y2 one of { -5.957663490251357E-7, 7.104554413357197E-7 })
(this.result == 1.0000001028217766)  ==>  (orig(this.result) one of { 0.0, 1.0000001028217766 })
this.resultComputed == true
this.result == 0.9999999999999999
this.iterationCount one of { 2, 13, 14 }
return == 0.9999999999999999
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolverTest:::OBJECT
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolverTest.BrentSolverTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolverTest.BrentSolverTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolverTest.testInitialGuess():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolverTest.testInitialGuess():::EXIT
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl:::OBJECT
this has only one value
this.getClass().getName() == org.apache.commons.math.analysis.solvers.BrentSolver.class
this.functionValueAccuracy == 1.0E-15
this.defaultFunctionValueAccuracy == 1.0E-15
this.result one of { 0.0, 1.0000001028217766 }
this.functionValue == 0.0
this.f == null
this.absoluteAccuracy == 1.0E-6
this.relativeAccuracy == 1.0E-14
this.maximalIterationCount == 100
this.defaultAbsoluteAccuracy == 1.0E-6
this.defaultRelativeAccuracy == 1.0E-14
this.defaultMaximalIterationCount == 100
this.iterationCount >= 0
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.UnivariateRealSolverImpl(int, double):::ENTER
defaultMaximalIterationCount == 100
defaultAbsoluteAccuracy == 1.0E-6
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.UnivariateRealSolverImpl(int, double):::EXIT
this.resultComputed == false
this.result == 0.0
this.iterationCount == 0
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.clearResult():::ENTER
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.clearResult():::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.defaultFunctionValueAccuracy == orig(this.defaultFunctionValueAccuracy)
this.result == orig(this.result)
this.functionValue == orig(this.functionValue)
this.f == orig(this.f)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.maximalIterationCount == orig(this.maximalIterationCount)
this.defaultAbsoluteAccuracy == orig(this.defaultAbsoluteAccuracy)
this.defaultRelativeAccuracy == orig(this.defaultRelativeAccuracy)
this.defaultMaximalIterationCount == orig(this.defaultMaximalIterationCount)
this.resultComputed == false
this.iterationCount == 0
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.setResult(double, int):::ENTER
this.resultComputed == false
this.iterationCount == 0
newResult == 1.0000001028217766
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.setResult(double, int):::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.defaultFunctionValueAccuracy == orig(this.defaultFunctionValueAccuracy)
this.functionValue == orig(this.functionValue)
this.f == orig(this.f)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.maximalIterationCount == orig(this.maximalIterationCount)
this.defaultAbsoluteAccuracy == orig(this.defaultAbsoluteAccuracy)
this.defaultRelativeAccuracy == orig(this.defaultRelativeAccuracy)
this.defaultMaximalIterationCount == orig(this.defaultMaximalIterationCount)
this.resultComputed == true
this.result == 1.0000001028217766
4.503600090438611E15 * this.result + 581800898 * orig(this.result) - 4.503600553506774E15 == 0
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.verifyInterval(double, double):::ENTER
this.resultComputed == false
this.result == 0.0
this.iterationCount == 0
lower == 0.6
upper == 7.0
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.verifyInterval(double, double):::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.defaultFunctionValueAccuracy == orig(this.defaultFunctionValueAccuracy)
this.resultComputed == orig(this.resultComputed)
this.result == orig(this.result)
this.functionValue == orig(this.functionValue)
this.f == orig(this.f)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.maximalIterationCount == orig(this.maximalIterationCount)
this.defaultAbsoluteAccuracy == orig(this.defaultAbsoluteAccuracy)
this.defaultRelativeAccuracy == orig(this.defaultRelativeAccuracy)
this.defaultMaximalIterationCount == orig(this.defaultMaximalIterationCount)
this.iterationCount == orig(this.iterationCount)
this.resultComputed == false
this.result == 0.0
this.iterationCount == 0
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.verifySequence(double, double, double):::ENTER
this.resultComputed == false
this.result == 1.0000001028217766
this.iterationCount == 0
lower == 0.6
initial one of { 0.61, 0.999999 }
upper == 7.0
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.verifySequence(double, double, double):::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.defaultFunctionValueAccuracy == orig(this.defaultFunctionValueAccuracy)
this.resultComputed == orig(this.resultComputed)
this.result == orig(this.result)
this.functionValue == orig(this.functionValue)
this.f == orig(this.f)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.maximalIterationCount == orig(this.maximalIterationCount)
this.defaultAbsoluteAccuracy == orig(this.defaultAbsoluteAccuracy)
this.defaultRelativeAccuracy == orig(this.defaultRelativeAccuracy)
this.defaultMaximalIterationCount == orig(this.defaultMaximalIterationCount)
this.iterationCount == orig(this.iterationCount)
this.resultComputed == false
this.result == 1.0000001028217766
this.iterationCount == 0
