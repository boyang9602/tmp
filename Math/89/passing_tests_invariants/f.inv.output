===========================================================================
org.apache.commons.math.stat.Frequency$NaturalComparator:::CLASS
===========================================================================
org.apache.commons.math.stat.Frequency$NaturalComparator:::OBJECT
===========================================================================
org.apache.commons.math.stat.Frequency$NaturalComparator.NaturalComparator():::EXIT
===========================================================================
org.apache.commons.math.stat.Frequency$NaturalComparator.compare(java.lang.Object, java.lang.Object):::ENTER
o1 has only one value
o1.getClass().getName() == java.lang.Long.class
o2.getClass().getName() == java.lang.Long.class
===========================================================================
org.apache.commons.math.stat.Frequency$NaturalComparator.compare(java.lang.Object, java.lang.Object):::EXIT
return one of { -1, 0 }
===========================================================================
org.apache.commons.math.stat.Frequency:::CLASS
===========================================================================
org.apache.commons.math.stat.Frequency:::OBJECT
this has only one value
this.freqTable has only one value
this.freqTable != null
===========================================================================
org.apache.commons.math.stat.Frequency.Frequency():::EXIT
===========================================================================
org.apache.commons.math.stat.Frequency.addValue(int):::ENTER
v == 2
===========================================================================
org.apache.commons.math.stat.Frequency.addValue(int):::EXIT
this.freqTable == orig(this.freqTable)
===========================================================================
org.apache.commons.math.stat.Frequency.addValue(java.lang.Comparable):::ENTER
===========================================================================
org.apache.commons.math.stat.Frequency.addValue(java.lang.Comparable):::EXIT
this.freqTable == orig(this.freqTable)
===========================================================================
org.apache.commons.math.stat.Frequency.addValue(java.lang.Integer):::ENTER
v has only one value
===========================================================================
org.apache.commons.math.stat.Frequency.addValue(java.lang.Integer):::EXIT
this.freqTable == orig(this.freqTable)
===========================================================================
org.apache.commons.math.stat.Frequency.addValue(java.lang.Object):::ENTER
v has only one value
v.getClass().getName() == java.lang.Integer.class
===========================================================================
org.apache.commons.math.stat.Frequency.addValue(java.lang.Object):::EXIT
this.freqTable == orig(this.freqTable)
===========================================================================
org.apache.commons.math.stat.Frequency.getCount(int):::ENTER
v == 1
===========================================================================
org.apache.commons.math.stat.Frequency.getCount(int):::EXIT
this.freqTable == orig(this.freqTable)
return == 2
===========================================================================
org.apache.commons.math.stat.Frequency.getCount(java.lang.Object):::ENTER
===========================================================================
org.apache.commons.math.stat.Frequency.getCount(java.lang.Object):::EXIT224
orig(v) has only one value
orig(v.getClass().getName()) == java.lang.Integer.class
===========================================================================
org.apache.commons.math.stat.Frequency.getCount(java.lang.Object):::EXIT235
orig(v) has only one value
orig(v.getClass().getName()) == java.lang.Long.class
===========================================================================
org.apache.commons.math.stat.Frequency.getCount(java.lang.Object):::EXIT
this.freqTable == orig(this.freqTable)
return == 2
===========================================================================
org.apache.commons.math.stat.Frequency.getCount(long):::ENTER
v == 1
===========================================================================
org.apache.commons.math.stat.Frequency.getCount(long):::EXIT
this.freqTable == orig(this.freqTable)
return == 2
===========================================================================
org.apache.commons.math.stat.Frequency.getCumFreq(java.lang.Object):::ENTER
===========================================================================
org.apache.commons.math.stat.Frequency.getCumFreq(java.lang.Object):::EXIT335
orig(v) has only one value
orig(v.getClass().getName()) == java.lang.Integer.class
===========================================================================
org.apache.commons.math.stat.Frequency.getCumFreq(java.lang.Object):::EXIT366
orig(v) has only one value
orig(v.getClass().getName()) == java.lang.Long.class
===========================================================================
org.apache.commons.math.stat.Frequency.getCumFreq(java.lang.Object):::EXIT
this.freqTable == orig(this.freqTable)
return == 2
===========================================================================
org.apache.commons.math.stat.Frequency.getCumFreq(long):::ENTER
v == 1
===========================================================================
org.apache.commons.math.stat.Frequency.getCumFreq(long):::EXIT
this.freqTable == orig(this.freqTable)
return == 2
===========================================================================
org.apache.commons.math.stat.Frequency.getCumPct(int):::ENTER
v == 1
===========================================================================
org.apache.commons.math.stat.Frequency.getCumPct(int):::EXIT
this.freqTable == orig(this.freqTable)
return == 0.5
===========================================================================
org.apache.commons.math.stat.Frequency.getCumPct(java.lang.Object):::ENTER
===========================================================================
org.apache.commons.math.stat.Frequency.getCumPct(java.lang.Object):::EXIT426
===========================================================================
org.apache.commons.math.stat.Frequency.getCumPct(java.lang.Object):::EXIT
this.freqTable == orig(this.freqTable)
return == 0.5
===========================================================================
org.apache.commons.math.stat.Frequency.getSumFreq():::ENTER
===========================================================================
org.apache.commons.math.stat.Frequency.getSumFreq():::EXIT
this.freqTable == orig(this.freqTable)
return == 4
===========================================================================
org.apache.commons.math.stat.Frequency.valuesIterator():::ENTER
===========================================================================
org.apache.commons.math.stat.Frequency.valuesIterator():::EXIT
this.freqTable == orig(this.freqTable)
return.getClass().getName() == java.util.TreeMap$KeyIterator.class
===========================================================================
org.apache.commons.math.stat.FrequencyTest:::OBJECT
this.oneL == 1
this.twoL == 2
this.threeL == 3
this.oneI == 1
this.twoI == 2
this.threeI == 3
this.tolerance == 1.0E-14
this.f.freqTable has only one value
===========================================================================
org.apache.commons.math.stat.FrequencyTest.FrequencyTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.stat.FrequencyTest.FrequencyTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
this.f == null
===========================================================================
org.apache.commons.math.stat.FrequencyTest.setUp():::ENTER
this has only one value
this.f == null
===========================================================================
org.apache.commons.math.stat.FrequencyTest.setUp():::EXIT
this.oneL == orig(this.oneL)
this.twoL == orig(this.twoL)
this.threeL == orig(this.threeL)
this.oneI == orig(this.oneI)
this.twoI == orig(this.twoI)
this.threeI == orig(this.threeI)
this.tolerance == orig(this.tolerance)
this.f has only one value
===========================================================================
org.apache.commons.math.stat.FrequencyTest.suite():::EXIT
return has only one value
return.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.apache.commons.math.stat.FrequencyTest.testIntegerValues():::ENTER
this has only one value
this.f has only one value
===========================================================================
org.apache.commons.math.stat.FrequencyTest.testIntegerValues():::EXIT
this.oneL == orig(this.oneL)
this.twoL == orig(this.twoL)
this.threeL == orig(this.threeL)
this.oneI == orig(this.oneI)
this.twoI == orig(this.twoI)
this.threeI == orig(this.threeI)
this.tolerance == orig(this.tolerance)
this.f == orig(this.f)
this.f.freqTable == orig(this.f.freqTable)
this.f has only one value
