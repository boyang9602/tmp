===========================================================================
org.apache.commons.math.util.MathUtils:::CLASS
===========================================================================
org.apache.commons.math.util.MathUtils.gcd(int, int):::ENTER
===========================================================================
org.apache.commons.math.util.MathUtils.gcd(int, int):::EXIT543
orig(q) one of { -50, 0, 50 }
===========================================================================
org.apache.commons.math.util.MathUtils.gcd(int, int):::EXIT591
return >= 1
===========================================================================
org.apache.commons.math.util.MathUtils.gcd(int, int):::EXIT
===========================================================================
org.apache.commons.math.util.MathUtils.lcm(int, int):::ENTER
===========================================================================
org.apache.commons.math.util.MathUtils.lcm(int, int):::EXIT711
return == 0
orig(a) one of { 0, 30 }
orig(b) one of { 0, 50 }
===========================================================================
org.apache.commons.math.util.MathUtils.lcm(int, int):::EXIT714
===========================================================================
org.apache.commons.math.util.MathUtils.lcm(int, int):::EXIT
(return == 0)  ==>  (orig(a) one of { 0, 30 })
(return == 0)  ==>  (orig(b) one of { 0, 50 })
===========================================================================
org.apache.commons.math.util.MathUtils.mulAndCheck(int, int):::ENTER
===========================================================================
org.apache.commons.math.util.MathUtils.mulAndCheck(int, int):::EXIT
===========================================================================
org.apache.commons.math.util.MathUtilsTest:::CLASS
org.apache.commons.math.util.MathUtilsTest.binomialCache has only one value
org.apache.commons.math.util.MathUtilsTest.binomialCache != null
org.apache.commons.math.util.MathUtilsTest.binomialCache[] == []
org.apache.commons.math.util.MathUtilsTest.binomialCache[].getClass().getName() == []
org.apache.commons.math.util.MathUtilsTest.binomialCache.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.apache.commons.math.util.MathUtilsTest:::OBJECT
===========================================================================
org.apache.commons.math.util.MathUtilsTest.MathUtilsTest(java.lang.String):::ENTER
name != null
===========================================================================
org.apache.commons.math.util.MathUtilsTest.MathUtilsTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.math.util.MathUtilsTest.suite():::ENTER
===========================================================================
org.apache.commons.math.util.MathUtilsTest.suite():::EXIT
org.apache.commons.math.util.MathUtilsTest.binomialCache == orig(org.apache.commons.math.util.MathUtilsTest.binomialCache)
org.apache.commons.math.util.MathUtilsTest.binomialCache[] == orig(org.apache.commons.math.util.MathUtilsTest.binomialCache[])
org.apache.commons.math.util.MathUtilsTest.binomialCache.getClass().getName() == orig(org.apache.commons.math.util.MathUtilsTest.binomialCache.getClass().getName())
return.getClass().getName() == junit.framework.TestSuite.class
