===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution:::CLASS
===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution:::OBJECT
this.getClass().getName() == org.apache.commons.math.distribution.NormalDistributionImpl.class
this.randomData.rand == null
this.randomData.secRand == null
this.solverAbsoluteAccuracy == 1.0E-6
===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution.AbstractContinuousDistribution():::EXIT
===========================================================================
org.apache.commons.math.distribution.AbstractDistribution:::CLASS
===========================================================================
org.apache.commons.math.distribution.AbstractDistribution:::OBJECT
===========================================================================
org.apache.commons.math.distribution.AbstractDistribution.AbstractDistribution():::EXIT
===========================================================================
org.apache.commons.math.distribution.AbstractIntegerDistribution:::CLASS
===========================================================================
org.apache.commons.math.distribution.AbstractIntegerDistribution:::OBJECT
this.getClass().getName() == org.apache.commons.math.distribution.PoissonDistributionImpl.class
this.randomData.rand == null
this.randomData.secRand == null
===========================================================================
org.apache.commons.math.distribution.AbstractIntegerDistribution.AbstractIntegerDistribution():::EXIT
===========================================================================
org.apache.commons.math.distribution.IntegerDistributionAbstractTest:::OBJECT
this.getClass().getName() == org.apache.commons.math.distribution.PoissonDistributionTest.class
this.distribution.getClass().getName() == org.apache.commons.math.distribution.PoissonDistributionImpl.class
this.tolerance one of { 1.0E-12, 1.0E-4 }
this.densityTestPoints[] == [-1, 0, 1, 2, 3, 4, 5, 10, 20]
this.densityTestValues[] == [0.0, 0.0183156388887, 0.073262555555, 0.14652511111, 0.195366814813, 0.195366814813, 0.156293451851, 0.00529247667642, 8.27746364655E-9]
this.cumulativeTestPoints[] == [-1, 0, 1, 2, 3, 4, 5, 10, 20]
this.cumulativeTestValues[] == [0.0, 0.0183156388887, 0.0915781944437, 0.238103305554, 0.433470120367, 0.62883693518, 0.78513038703, 0.99716023388, 0.999999998077]
this.inverseCumulativeTestPoints[] == [0.0, 0.018315638889, 0.0915781944437, 0.238103305554, 0.433470120367, 0.62883693518, 0.78513038704, 0.99716023388, 0.999999998077]
this.inverseCumulativeTestValues[] == [-1, 0, 1, 2, 3, 4, 5, 10, 20]
size(this.densityTestPoints[]) == 9
size(this.densityTestValues[]) == 9
size(this.cumulativeTestPoints[]) == 9
size(this.cumulativeTestValues[]) == 9
size(this.inverseCumulativeTestPoints[]) == 9
size(this.inverseCumulativeTestValues[]) == 9
===========================================================================
org.apache.commons.math.distribution.IntegerDistributionAbstractTest.IntegerDistributionAbstractTest(java.lang.String):::ENTER
name != null
===========================================================================
org.apache.commons.math.distribution.IntegerDistributionAbstractTest.IntegerDistributionAbstractTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
this.distribution == null
this.tolerance == 1.0E-4
this.densityTestPoints == null
this.densityTestValues == null
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setTolerance(double):::ENTER
this.distribution == null
this.tolerance == 1.0E-4
this.densityTestPoints == null
this.densityTestValues == null
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
tolerance == 1.0E-12
===========================================================================
org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setTolerance(double):::EXIT
this.distribution == orig(this.distribution)
this.densityTestPoints == orig(this.densityTestPoints)
this.densityTestValues == orig(this.densityTestValues)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.distribution == null
this.tolerance == 1.0E-12
this.densityTestPoints == null
this.densityTestValues == null
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setUp():::ENTER
this has only one value
this.distribution == null
this.tolerance == 1.0E-12
this.densityTestPoints == null
this.densityTestValues == null
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setUp():::EXIT
this.tolerance == orig(this.tolerance)
this.distribution has only one value
this.tolerance == 1.0E-12
this.densityTestPoints has only one value
this.densityTestValues has only one value
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
===========================================================================
org.apache.commons.math.distribution.IntegerDistributionAbstractTest.tearDown():::ENTER
this has only one value
this.distribution has only one value
this.tolerance == 1.0E-12
this.densityTestPoints has only one value
this.densityTestValues has only one value
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
===========================================================================
org.apache.commons.math.distribution.IntegerDistributionAbstractTest.tearDown():::EXIT
this.tolerance == orig(this.tolerance)
this.distribution == null
this.tolerance == 1.0E-12
this.densityTestPoints == null
this.densityTestValues == null
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl:::CLASS
org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI == 2.5066282746310002
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl:::OBJECT
this.mean one of { 0.0, 4.0, 10.0 }
this.standardDeviation one of { 1.0, 2.0, 3.1622776601683795 }
this.solverAbsoluteAccuracy == 1.0E-9
this.randomData != null
this.randomData.rand == null
this.randomData.secRand == null
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double, double):::ENTER
mean one of { 4.0, 10.0 }
sd one of { 2.0, 3.1622776601683795 }
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double, double):::EXIT
this.mean == orig(mean)
this.standardDeviation == orig(sd)
this.mean one of { 4.0, 10.0 }
this.standardDeviation one of { 2.0, 3.1622776601683795 }
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double, double, double):::ENTER
mean one of { 4.0, 10.0 }
sd one of { 2.0, 3.1622776601683795 }
inverseCumAccuracy == 1.0E-9
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double, double, double):::EXIT
this.mean == orig(mean)
this.standardDeviation == orig(sd)
this.solverAbsoluteAccuracy == orig(inverseCumAccuracy)
this.mean one of { 4.0, 10.0 }
this.standardDeviation one of { 2.0, 3.1622776601683795 }
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.setMeanInternal(double):::ENTER
this.mean == 0.0
this.standardDeviation == 1.0
newMean one of { 4.0, 10.0 }
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.setMeanInternal(double):::EXIT
org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI == orig(org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI)
this.mean == orig(newMean)
this.standardDeviation == orig(this.standardDeviation)
this.solverAbsoluteAccuracy == orig(this.solverAbsoluteAccuracy)
this.randomData == orig(this.randomData)
this.randomData.rand == orig(this.randomData.rand)
this.randomData.secRand == orig(this.randomData.secRand)
this.mean one of { 4.0, 10.0 }
this.standardDeviation == 1.0
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.setStandardDeviationInternal(double):::ENTER
this.mean one of { 4.0, 10.0 }
this.standardDeviation == 1.0
sd one of { 2.0, 3.1622776601683795 }
===========================================================================
org.apache.commons.math.distribution.NormalDistributionImpl.setStandardDeviationInternal(double):::EXIT
org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI == orig(org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI)
this.mean == orig(this.mean)
this.standardDeviation == orig(sd)
this.solverAbsoluteAccuracy == orig(this.solverAbsoluteAccuracy)
this.randomData == orig(this.randomData)
this.randomData.rand == orig(this.randomData.rand)
this.randomData.secRand == orig(this.randomData.secRand)
this.mean one of { 4.0, 10.0 }
this.standardDeviation one of { 2.0, 3.1622776601683795 }
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionImpl:::CLASS
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionImpl:::OBJECT
this.normal.getClass().getName() == org.apache.commons.math.distribution.NormalDistributionImpl.class
this.mean one of { 4.0, 10.0 }
this.maxIterations == 10000000
this.epsilon == 1.0E-12
this.randomData.rand == null
this.randomData.secRand == null
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionImpl.PoissonDistributionImpl(double):::ENTER
p one of { 4.0, 10.0 }
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionImpl.PoissonDistributionImpl(double):::EXIT
this.mean == orig(p)
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionImpl.PoissonDistributionImpl(double, double, int):::ENTER
p one of { 4.0, 10.0 }
epsilon == 1.0E-12
maxIterations == 10000000
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionImpl.PoissonDistributionImpl(double, double, int):::EXIT
this.mean == orig(p)
this.maxIterations == orig(maxIterations)
this.epsilon == orig(epsilon)
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionImpl.getMean():::ENTER
this has only one value
this.normal has only one value
this.mean == 10.0
this.randomData has only one value
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionImpl.getMean():::EXIT
this.normal == orig(this.normal)
this.normal.getClass().getName() == orig(this.normal.getClass().getName())
this.mean == orig(this.mean)
this.maxIterations == orig(this.maxIterations)
this.epsilon == orig(this.epsilon)
this.randomData == orig(this.randomData)
this.randomData.rand == orig(this.randomData.rand)
this.randomData.secRand == orig(this.randomData.secRand)
this.normal has only one value
this.mean == 10.0
this.randomData has only one value
return == 10.0
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest:::CLASS
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest:::OBJECT
this.distribution.getClass().getName() == org.apache.commons.math.distribution.PoissonDistributionImpl.class
this.tolerance == 1.0E-12
this.densityTestPoints[] == [-1, 0, 1, 2, 3, 4, 5, 10, 20]
this.densityTestPoints[] elements >= -1
this.densityTestPoints[] sorted by <
this.densityTestValues[] == [0.0, 0.0183156388887, 0.073262555555, 0.14652511111, 0.195366814813, 0.195366814813, 0.156293451851, 0.00529247667642, 8.27746364655E-9]
this.cumulativeTestPoints[] == [-1, 0, 1, 2, 3, 4, 5, 10, 20]
this.cumulativeTestPoints[] elements >= -1
this.cumulativeTestPoints[] sorted by <
this.cumulativeTestValues[] == [0.0, 0.0183156388887, 0.0915781944437, 0.238103305554, 0.433470120367, 0.62883693518, 0.78513038703, 0.99716023388, 0.999999998077]
this.inverseCumulativeTestPoints[] == [0.0, 0.018315638889, 0.0915781944437, 0.238103305554, 0.433470120367, 0.62883693518, 0.78513038704, 0.99716023388, 0.999999998077]
this.inverseCumulativeTestValues[] == [-1, 0, 1, 2, 3, 4, 5, 10, 20]
size(this.densityTestPoints[]) == 9
size(this.densityTestValues[]) == 9
size(this.cumulativeTestPoints[]) == 9
size(this.cumulativeTestValues[]) == 9
size(this.inverseCumulativeTestPoints[]) == 9
size(this.inverseCumulativeTestValues[]) == 9
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.PoissonDistributionTest(java.lang.String):::ENTER
name != null
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.PoissonDistributionTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
this.distribution == null
this.densityTestPoints == null
this.densityTestValues == null
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.makeCumulativeTestPoints():::ENTER
this has only one value
this.distribution has only one value
this.densityTestPoints has only one value
this.densityTestValues has only one value
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.makeCumulativeTestPoints():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.densityTestPoints == orig(this.densityTestPoints)
this.densityTestPoints[] == orig(this.densityTestPoints[])
this.densityTestValues == orig(this.densityTestValues)
this.densityTestValues[] == orig(this.densityTestValues[])
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.distribution has only one value
this.densityTestPoints has only one value
this.densityTestValues has only one value
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
return has only one value
return[] == [-1, 0, 1, 2, 3, 4, 5, 10, 20]
size(return[]) == 9
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.makeCumulativeTestValues():::ENTER
this has only one value
this.distribution has only one value
this.densityTestPoints has only one value
this.densityTestValues has only one value
this.cumulativeTestPoints has only one value
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.makeCumulativeTestValues():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.densityTestPoints == orig(this.densityTestPoints)
this.densityTestPoints[] == orig(this.densityTestPoints[])
this.densityTestValues == orig(this.densityTestValues)
this.densityTestValues[] == orig(this.densityTestValues[])
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.distribution has only one value
this.densityTestPoints has only one value
this.densityTestValues has only one value
this.cumulativeTestPoints has only one value
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
return has only one value
return[] == [0.0, 0.0183156388887, 0.0915781944437, 0.238103305554, 0.433470120367, 0.62883693518, 0.78513038703, 0.99716023388, 0.999999998077]
size(return[]) == 9
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.makeDensityTestPoints():::ENTER
this has only one value
this.distribution has only one value
this.densityTestPoints == null
this.densityTestValues == null
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.makeDensityTestPoints():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.densityTestPoints == orig(this.densityTestPoints)
this.densityTestValues == orig(this.densityTestValues)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.distribution has only one value
this.densityTestPoints == null
this.densityTestValues == null
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
return has only one value
return[] == [-1, 0, 1, 2, 3, 4, 5, 10, 20]
size(return[]) == 9
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.makeDensityTestValues():::ENTER
this has only one value
this.distribution has only one value
this.densityTestPoints has only one value
this.densityTestValues == null
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.makeDensityTestValues():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.densityTestPoints == orig(this.densityTestPoints)
this.densityTestPoints[] == orig(this.densityTestPoints[])
this.densityTestValues == orig(this.densityTestValues)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.distribution has only one value
this.densityTestPoints has only one value
this.densityTestValues == null
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
return has only one value
return[] == [0.0, 0.0183156388887, 0.073262555555, 0.14652511111, 0.195366814813, 0.195366814813, 0.156293451851, 0.00529247667642, 8.27746364655E-9]
size(return[]) == 9
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.makeDistribution():::ENTER
this has only one value
this.distribution == null
this.densityTestPoints == null
this.densityTestValues == null
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.makeDistribution():::EXIT
this.distribution == orig(this.distribution)
this.tolerance == orig(this.tolerance)
this.densityTestPoints == orig(this.densityTestPoints)
this.densityTestValues == orig(this.densityTestValues)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.distribution == null
this.densityTestPoints == null
this.densityTestValues == null
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
return has only one value
return.getClass().getName() == org.apache.commons.math.distribution.PoissonDistributionImpl.class
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.makeInverseCumulativeTestPoints():::ENTER
this has only one value
this.distribution has only one value
this.densityTestPoints has only one value
this.densityTestValues has only one value
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.makeInverseCumulativeTestPoints():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.densityTestPoints == orig(this.densityTestPoints)
this.densityTestPoints[] == orig(this.densityTestPoints[])
this.densityTestValues == orig(this.densityTestValues)
this.densityTestValues[] == orig(this.densityTestValues[])
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.distribution has only one value
this.densityTestPoints has only one value
this.densityTestValues has only one value
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
return has only one value
return[] == [0.0, 0.018315638889, 0.0915781944437, 0.238103305554, 0.433470120367, 0.62883693518, 0.78513038704, 0.99716023388, 0.999999998077]
size(return[]) == 9
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.makeInverseCumulativeTestValues():::ENTER
this has only one value
this.distribution has only one value
this.densityTestPoints has only one value
this.densityTestValues has only one value
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.makeInverseCumulativeTestValues():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.densityTestPoints == orig(this.densityTestPoints)
this.densityTestPoints[] == orig(this.densityTestPoints[])
this.densityTestValues == orig(this.densityTestValues)
this.densityTestValues[] == orig(this.densityTestValues[])
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.distribution has only one value
this.densityTestPoints has only one value
this.densityTestValues has only one value
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues == null
return has only one value
return[] == [-1, 0, 1, 2, 3, 4, 5, 10, 20]
size(return[]) == 9
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.testMean():::ENTER
this has only one value
this.distribution has only one value
this.densityTestPoints has only one value
this.densityTestValues has only one value
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
===========================================================================
org.apache.commons.math.distribution.PoissonDistributionTest.testMean():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.densityTestPoints == orig(this.densityTestPoints)
this.densityTestPoints[] == orig(this.densityTestPoints[])
this.densityTestValues == orig(this.densityTestValues)
this.densityTestValues[] == orig(this.densityTestValues[])
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
this.distribution has only one value
this.densityTestPoints has only one value
this.densityTestValues has only one value
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
===========================================================================
org.apache.commons.math.exception.MathIllegalArgumentException:::CLASS
===========================================================================
org.apache.commons.math.exception.MathIllegalArgumentException:::OBJECT
this has only one value
this.specific == null
this.general has only one value
this.general.getClass().getName() == org.apache.commons.math.exception.util.LocalizedFormats.class
this.arguments has only one value
this.arguments.getClass().getName() == java.lang.Object[].class
this.arguments[] has only one value, of length 2
this.arguments[].getClass().getName() == [null, java.lang.Integer]
size(this.arguments[]) == 2
===========================================================================
org.apache.commons.math.exception.MathIllegalArgumentException.MathIllegalArgumentException(org.apache.commons.math.exception.util.Localizable, org.apache.commons.math.exception.util.Localizable, java.lang.Object[]):::ENTER
specific == null
general has only one value
general.getClass().getName() == org.apache.commons.math.exception.util.LocalizedFormats.class
args has only one value
args.getClass().getName() == java.lang.Object[].class
args[] has only one value, of length 2
size(args[]) == 2
===========================================================================
org.apache.commons.math.exception.MathIllegalArgumentException.MathIllegalArgumentException(org.apache.commons.math.exception.util.Localizable, org.apache.commons.math.exception.util.Localizable, java.lang.Object[]):::EXIT
args[] == orig(args[])
args[] has only one value, of length 2
===========================================================================
org.apache.commons.math.exception.MathIllegalNumberException:::CLASS
===========================================================================
org.apache.commons.math.exception.MathIllegalNumberException:::OBJECT
this has only one value
this.argument == null
this.specific == null
this.general has only one value
this.general.getClass().getName() == org.apache.commons.math.exception.util.LocalizedFormats.class
this.arguments has only one value
this.arguments.getClass().getName() == java.lang.Object[].class
this.arguments[] has only one value, of length 2
this.arguments[].getClass().getName() == [null, java.lang.Integer]
size(this.arguments[]) == 2
===========================================================================
org.apache.commons.math.exception.MathIllegalNumberException.MathIllegalNumberException(org.apache.commons.math.exception.util.Localizable, org.apache.commons.math.exception.util.Localizable, java.lang.Number, java.lang.Object[]):::ENTER
specific == null
general has only one value
general.getClass().getName() == org.apache.commons.math.exception.util.LocalizedFormats.class
wrong == null
arguments has only one value
arguments.getClass().getName() == java.lang.Object[].class
arguments[] contains no nulls and has only one value, of length 1
arguments[] elements has only one value
size(arguments[]) == 1
===========================================================================
org.apache.commons.math.exception.MathIllegalNumberException.MathIllegalNumberException(org.apache.commons.math.exception.util.Localizable, org.apache.commons.math.exception.util.Localizable, java.lang.Number, java.lang.Object[]):::EXIT
arguments[] == orig(arguments[])
arguments[] contains no nulls and has only one value, of length 1
arguments[] elements has only one value
===========================================================================
org.apache.commons.math.exception.NotStrictlyPositiveException:::CLASS
===========================================================================
org.apache.commons.math.exception.NotStrictlyPositiveException:::OBJECT
this has only one value
this.min has only one value
this.min.getClass().getName() == java.lang.Integer.class
this.boundIsAllowed == false
this.argument == null
this.specific == null
this.general has only one value
this.general.getClass().getName() == org.apache.commons.math.exception.util.LocalizedFormats.class
this.arguments has only one value
this.arguments.getClass().getName() == java.lang.Object[].class
this.arguments[] has only one value, of length 2
this.arguments[].getClass().getName() == [null, java.lang.Integer]
size(this.arguments[]) == 2
===========================================================================
org.apache.commons.math.exception.NotStrictlyPositiveException.NotStrictlyPositiveException(java.lang.Number):::ENTER
value == null
===========================================================================
org.apache.commons.math.exception.NotStrictlyPositiveException.NotStrictlyPositiveException(java.lang.Number):::EXIT
===========================================================================
org.apache.commons.math.exception.NumberIsTooSmallException:::CLASS
===========================================================================
org.apache.commons.math.exception.NumberIsTooSmallException:::OBJECT
this has only one value
this.min has only one value
this.min.getClass().getName() == java.lang.Integer.class
this.boundIsAllowed == false
this.argument == null
this.specific == null
this.general has only one value
this.general.getClass().getName() == org.apache.commons.math.exception.util.LocalizedFormats.class
this.arguments has only one value
this.arguments.getClass().getName() == java.lang.Object[].class
this.arguments[] has only one value, of length 2
this.arguments[].getClass().getName() == [null, java.lang.Integer]
size(this.arguments[]) == 2
===========================================================================
org.apache.commons.math.exception.NumberIsTooSmallException.NumberIsTooSmallException(java.lang.Number, java.lang.Number, boolean):::ENTER
wrong == null
min has only one value
min.getClass().getName() == java.lang.Integer.class
boundIsAllowed == false
===========================================================================
org.apache.commons.math.exception.NumberIsTooSmallException.NumberIsTooSmallException(java.lang.Number, java.lang.Number, boolean):::EXIT
===========================================================================
org.apache.commons.math.exception.NumberIsTooSmallException.NumberIsTooSmallException(org.apache.commons.math.exception.util.Localizable, java.lang.Number, java.lang.Number, boolean):::ENTER
specific == null
wrong == null
min has only one value
min.getClass().getName() == java.lang.Integer.class
boundIsAllowed == false
===========================================================================
org.apache.commons.math.exception.NumberIsTooSmallException.NumberIsTooSmallException(org.apache.commons.math.exception.util.Localizable, java.lang.Number, java.lang.Number, boolean):::EXIT
===========================================================================
org.apache.commons.math.exception.util.ArgUtils.flatten(java.lang.Object[]):::ENTER
array.getClass().getName() == java.lang.Object[].class
size(array[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.exception.util.ArgUtils.flatten(java.lang.Object[]):::EXIT
array[] == orig(array[])
return.getClass().getName() == java.lang.Object[].class
size(return[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.exception.util.LocalizedFormats:::OBJECT
this.sourceFormat != null
===========================================================================
org.apache.commons.math.exception.util.LocalizedFormats.LocalizedFormats(java.lang.String, int, java.lang.String):::ENTER
$hidden$1 != null
sourceFormat != null
===========================================================================
org.apache.commons.math.exception.util.LocalizedFormats.LocalizedFormats(java.lang.String, int, java.lang.String):::EXIT
this.sourceFormat == orig(sourceFormat)
$hidden$1.toString == orig($hidden$1.toString)
sourceFormat.toString == orig(sourceFormat.toString)
===========================================================================
org.apache.commons.math.random.RandomDataImpl:::CLASS
===========================================================================
org.apache.commons.math.random.RandomDataImpl:::OBJECT
this.rand == null
this.secRand == null
===========================================================================
org.apache.commons.math.random.RandomDataImpl.RandomDataImpl():::EXIT
===========================================================================
org.apache.commons.math.util.FastMath:::CLASS
===========================================================================
org.apache.commons.math.util.FastMath.buildSinCosTables():::ENTER
===========================================================================
org.apache.commons.math.util.FastMath.buildSinCosTables():::EXIT
===========================================================================
org.apache.commons.math.util.FastMath.expint(int, double[]):::ENTER
result has only one value
result != null
size(result[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.expint(int, double[]):::EXIT
===========================================================================
org.apache.commons.math.util.FastMath.quadMult(double[], double[], double[]):::ENTER
a != null
a[] sorted by >
b != null
b[] sorted by >
result != null
size(a[]) == 2
size(b[]) == 2
size(result[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.quadMult(double[], double[], double[]):::EXIT
a[] == orig(a[])
b[] == orig(b[])
a[] sorted by >
b[] sorted by >
===========================================================================
org.apache.commons.math.util.FastMath.resplit(double[]):::ENTER
a != null
size(a[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.resplit(double[]):::EXIT
===========================================================================
org.apache.commons.math.util.FastMath.slowCos(double, double[]):::ENTER
result has only one value
result[] sorted by >=
size(result[]) == 2
result[] elements <= x
===========================================================================
org.apache.commons.math.util.FastMath.slowCos(double, double[]):::EXIT
result[] sorted by >
result[] elements <= return
return in result[]
result[] > orig(result[]) (lexically)
result[] >= orig(result[]) (lexically)
return != orig(x)
orig(result[]) elements < return
===========================================================================
org.apache.commons.math.util.FastMath.slowLog(double):::ENTER
===========================================================================
org.apache.commons.math.util.FastMath.slowLog(double):::EXIT
return != null
return[] sorted by >=
size(return[]) == 2
return[] elements < orig(xi)
===========================================================================
org.apache.commons.math.util.FastMath.slowSin(double, double[]):::ENTER
result has only one value
result[] sorted by >=
size(result[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.slowSin(double, double[]):::EXIT
result[] sorted by >=
result[] elements <= return
return in result[]
result[] elements <= orig(x)
result[] <= orig(result[]) (lexically)
return <= orig(x)
===========================================================================
org.apache.commons.math.util.FastMath.slowexp(double, double[]):::ENTER
result has only one value
result != null
size(result[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.slowexp(double, double[]):::EXIT
result[] sorted by >
result[] elements <= return
return in result[]
return > orig(x)
===========================================================================
org.apache.commons.math.util.FastMath.split(double, double[]):::ENTER
split != null
size(split[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.split(double, double[]):::EXIT
orig(d) in split[]
===========================================================================
org.apache.commons.math.util.FastMath.splitAdd(double[], double[], double[]):::ENTER
a != null
b != null
b[] elements <= 2.0
ans != null
ans[] sorted by >=
size(a[]) == 2
size(b[]) == 2
size(ans[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.splitAdd(double[], double[], double[]):::EXIT
b[] == orig(b[])
b[] elements <= 2.0
===========================================================================
org.apache.commons.math.util.FastMath.splitMult(double[], double[], double[]):::ENTER
a != null
b != null
ans != null
size(a[]) == 2
size(b[]) == 2
size(ans[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.splitMult(double[], double[], double[]):::EXIT
a[] == orig(a[])
b[] == orig(b[])
===========================================================================
org.apache.commons.math.util.FastMath.splitReciprocal(double[], double[]):::ENTER
in != null
result != null
result[] elements <= 1.0
size(in[]) == 2
size(result[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.splitReciprocal(double[], double[]):::EXIT
in[] == orig(in[])
===========================================================================
org.apache.commons.math.util.FastMath.sqrt(double):::ENTER
a one of { 4.0, 6.283185307179586, 10.0 }
===========================================================================
org.apache.commons.math.util.FastMath.sqrt(double):::EXIT
return one of { 2.0, 2.5066282746310002, 3.1622776601683795 }
