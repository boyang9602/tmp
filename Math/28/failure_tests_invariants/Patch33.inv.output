===========================================================================
org.apache.commons.math3.linear.AbstractRealMatrix:::CLASS
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT != null
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX != null
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == "{"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX != null
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == "}"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX != null
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == "{"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX != null
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == "}"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR != null
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == ","
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR != null
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == ","
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix != null
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == "{"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix != null
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == "}"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix != null
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == "{"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix != null
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == "}"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator != null
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == ","
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator != null
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == ","
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format != null
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math3.linear.AbstractRealMatrix:::OBJECT
this.getClass().getName() == org.apache.commons.math3.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math3.linear.AbstractRealMatrix.AbstractRealMatrix():::EXIT
===========================================================================
org.apache.commons.math3.linear.AbstractRealMatrix.AbstractRealMatrix(int, int):::ENTER
rowDimension == 9
columnDimension == 48
===========================================================================
org.apache.commons.math3.linear.AbstractRealMatrix.AbstractRealMatrix(int, int):::EXIT
===========================================================================
org.apache.commons.math3.linear.AbstractRealMatrix.getRow(int):::ENTER
this has only one value
row >= 0
===========================================================================
org.apache.commons.math3.linear.AbstractRealMatrix.getRow(int):::EXIT
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
return != null
size(return[]) == 48
===========================================================================
org.apache.commons.math3.linear.AbstractRealMatrix.getRowVector(int):::ENTER
this has only one value
row >= 0
===========================================================================
org.apache.commons.math3.linear.AbstractRealMatrix.getRowVector(int):::EXIT
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
return != null
return.getClass().getName() == org.apache.commons.math3.linear.ArrayRealVector.class
===========================================================================
org.apache.commons.math3.linear.AbstractRealMatrix.setRowVector(int, org.apache.commons.math3.linear.RealVector):::ENTER
this has only one value
row == 0
vector.getClass().getName() == org.apache.commons.math3.linear.ArrayRealVector.class
===========================================================================
org.apache.commons.math3.linear.AbstractRealMatrix.setRowVector(int, org.apache.commons.math3.linear.RealVector):::EXIT
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
===========================================================================
org.apache.commons.math3.linear.Array2DRowRealMatrix:::CLASS
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT != null
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX != null
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == "{"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX != null
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == "}"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX != null
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == "{"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX != null
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == "}"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR != null
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == ","
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR != null
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == ","
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix != null
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == "{"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix != null
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == "}"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix != null
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == "{"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix != null
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == "}"
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator != null
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == ","
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator != null
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == ","
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format has only one value
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format != null
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math3.linear.Array2DRowRealMatrix:::OBJECT
this.data.getClass().getName() == double[][].class
this.data[] elements != null
size(this.data[]) one of { 8, 9 }
===========================================================================
org.apache.commons.math3.linear.Array2DRowRealMatrix.Array2DRowRealMatrix(double[][]):::ENTER
d has only one value
d.getClass().getName() == double[][].class
d[] contains no nulls and has only one value, of length 8
size(d[]) == 8
===========================================================================
org.apache.commons.math3.linear.Array2DRowRealMatrix.Array2DRowRealMatrix(double[][]):::EXIT
d[] == orig(d[])
this.data has only one value
this.data[] contains no nulls and has only one value, of length 8
d[] contains no nulls and has only one value, of length 8
size(this.data[]) == 8
===========================================================================
org.apache.commons.math3.linear.Array2DRowRealMatrix.Array2DRowRealMatrix(int, int):::ENTER
rowDimension == 9
columnDimension == 48
===========================================================================
org.apache.commons.math3.linear.Array2DRowRealMatrix.Array2DRowRealMatrix(int, int):::EXIT
this.data has only one value
this.data[] contains no nulls and has only one value, of length 9
size(this.data[]) == 9
===========================================================================
org.apache.commons.math3.linear.Array2DRowRealMatrix.copyIn(double[][]):::ENTER
this has only one value
this.data == null
in has only one value
in.getClass().getName() == double[][].class
in[] contains no nulls and has only one value, of length 8
size(in[]) == 8
===========================================================================
org.apache.commons.math3.linear.Array2DRowRealMatrix.copyIn(double[][]):::EXIT
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
in[] == orig(in[])
this.data has only one value
this.data[] contains no nulls and has only one value, of length 8
in[] contains no nulls and has only one value, of length 8
size(this.data[]) == 8
===========================================================================
org.apache.commons.math3.linear.Array2DRowRealMatrix.getColumnDimension():::ENTER
this.data != null
===========================================================================
org.apache.commons.math3.linear.Array2DRowRealMatrix.getColumnDimension():::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
this.data != null
return one of { 40, 48 }
===========================================================================
org.apache.commons.math3.linear.Array2DRowRealMatrix.getDataRef():::ENTER
this has only one value
this.data has only one value
this.data[] contains no nulls and has only one value, of length 9
size(this.data[]) == 9
===========================================================================
org.apache.commons.math3.linear.Array2DRowRealMatrix.getDataRef():::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
this.data has only one value
this.data[] contains no nulls and has only one value, of length 9
return has only one value
return.getClass().getName() == double[][].class
return[] contains no nulls and has only one value, of length 9
size(this.data[]) == 9
size(return[]) == 9
===========================================================================
org.apache.commons.math3.linear.Array2DRowRealMatrix.getEntry(int, int):::ENTER
this.data != null
row >= 0
column >= 0
===========================================================================
org.apache.commons.math3.linear.Array2DRowRealMatrix.getEntry(int, int):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
this.data != null
===========================================================================
org.apache.commons.math3.linear.Array2DRowRealMatrix.getRowDimension():::ENTER
this.data != null
===========================================================================
org.apache.commons.math3.linear.Array2DRowRealMatrix.getRowDimension():::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
this.data != null
return one of { 8, 9 }
===========================================================================
org.apache.commons.math3.linear.Array2DRowRealMatrix.setEntry(int, int, double):::ENTER
this.data != null
row >= 0
column >= 0
===========================================================================
org.apache.commons.math3.linear.Array2DRowRealMatrix.setEntry(int, int, double):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
this.data != null
===========================================================================
org.apache.commons.math3.linear.Array2DRowRealMatrix.setSubMatrix(double[][], int, int):::ENTER
this has only one value
this.data == null
subMatrix has only one value
subMatrix.getClass().getName() == double[][].class
subMatrix[] contains no nulls and has only one value, of length 8
row == 0
column == 0
size(subMatrix[]) == 8
===========================================================================
org.apache.commons.math3.linear.Array2DRowRealMatrix.setSubMatrix(double[][], int, int):::EXIT
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.AbstractRealMatrix.DEFAULT_FORMAT.format.getClass().getName())
subMatrix[] == orig(subMatrix[])
this.data has only one value
this.data[] contains no nulls and has only one value, of length 8
subMatrix[] contains no nulls and has only one value, of length 8
size(this.data[]) == 8
===========================================================================
org.apache.commons.math3.linear.ArrayRealVector:::CLASS
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT has only one value
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT != null
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_PREFIX has only one value
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_PREFIX != null
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_PREFIX.toString == "{"
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SUFFIX has only one value
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SUFFIX != null
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == "}"
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SEPARATOR has only one value
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SEPARATOR != null
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == "; "
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.prefix has only one value
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.prefix != null
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == "{"
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.suffix has only one value
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.suffix != null
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == "}"
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.separator has only one value
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.separator != null
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == "; "
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix has only one value
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix != null
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == "{"
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix has only one value
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix != null
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == "}"
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator has only one value
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator != null
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == ";"
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.format has only one value
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.format != null
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math3.linear.ArrayRealVector:::OBJECT
this.data != null
size(this.data[]) one of { 31, 48 }
===========================================================================
org.apache.commons.math3.linear.ArrayRealVector.ArrayRealVector(double[]):::ENTER
size(d[]) == 31
===========================================================================
org.apache.commons.math3.linear.ArrayRealVector.ArrayRealVector(double[]):::EXIT
d[] == orig(d[])
size(this.data[]) == 31
===========================================================================
org.apache.commons.math3.linear.ArrayRealVector.ArrayRealVector(double[], boolean):::ENTER
d != null
copyArray == false
size(d[]) one of { 31, 48 }
===========================================================================
org.apache.commons.math3.linear.ArrayRealVector.ArrayRealVector(double[], boolean):::EXIT
d[] == orig(d[])
===========================================================================
org.apache.commons.math3.linear.ArrayRealVector.ArrayRealVector(int):::ENTER
size == 48
===========================================================================
org.apache.commons.math3.linear.ArrayRealVector.ArrayRealVector(int):::EXIT
this.data[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.data[] elements == 0.0
size(this.data[]) == 48
===========================================================================
org.apache.commons.math3.linear.ArrayRealVector.checkVectorDimensions(int):::ENTER
n one of { 31, 48 }
===========================================================================
org.apache.commons.math3.linear.ArrayRealVector.checkVectorDimensions(int):::EXIT
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
===========================================================================
org.apache.commons.math3.linear.ArrayRealVector.dotProduct(org.apache.commons.math3.linear.RealVector):::ENTER
this has only one value
this.data has only one value
this.data[] == [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.data[] elements one of { 0.0, 1.0 }
v has only one value
v.getClass().getName() == org.apache.commons.math3.linear.ArrayRealVector.class
size(this.data[]) == 31
===========================================================================
org.apache.commons.math3.linear.ArrayRealVector.dotProduct(org.apache.commons.math3.linear.RealVector):::EXIT456
===========================================================================
org.apache.commons.math3.linear.ArrayRealVector.dotProduct(org.apache.commons.math3.linear.RealVector):::EXIT
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
this.data has only one value
this.data[] == [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.data[] elements one of { 0.0, 1.0 }
return == 1.0
size(this.data[]) == 31
===========================================================================
org.apache.commons.math3.linear.ArrayRealVector.getDimension():::ENTER
===========================================================================
org.apache.commons.math3.linear.ArrayRealVector.getDimension():::EXIT
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
return one of { 31, 48 }
===========================================================================
org.apache.commons.math3.linear.ArrayRealVector.getEntry(int):::ENTER
index >= 0
size(this.data[]) == 48
===========================================================================
org.apache.commons.math3.linear.ArrayRealVector.getEntry(int):::EXIT
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
size(this.data[]) == 48
===========================================================================
org.apache.commons.math3.linear.ArrayRealVector.subtract(org.apache.commons.math3.linear.RealVector):::ENTER
v.getClass().getName() == org.apache.commons.math3.linear.ArrayRealVector.class
size(this.data[]) == 48
===========================================================================
org.apache.commons.math3.linear.ArrayRealVector.subtract(org.apache.commons.math3.linear.RealVector):::EXIT326
===========================================================================
org.apache.commons.math3.linear.ArrayRealVector.subtract(org.apache.commons.math3.linear.RealVector):::EXIT
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
size(this.data[]) == 48
size(return.data[]) == 48
===========================================================================
org.apache.commons.math3.linear.ArrayRealVector.toArray():::ENTER
size(this.data[]) == 31
===========================================================================
org.apache.commons.math3.linear.ArrayRealVector.toArray():::EXIT
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.separator == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
this.data == orig(this.data)
this.data[] == orig(this.data[])
return != null
size(this.data[]) == 31
size(return[]) == 31
===========================================================================
org.apache.commons.math3.linear.MatrixUtils:::CLASS
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == "{"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == "}"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == "{"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == "}"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == ","
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == ","
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.prefix has only one value
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.prefix.toString == "{"
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.suffix has only one value
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.suffix.toString == "}"
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowPrefix has only one value
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowPrefix.toString == "{"
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSuffix has only one value
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSuffix.toString == "}"
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSeparator has only one value
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSeparator.toString == ","
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.columnSeparator has only one value
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.columnSeparator.toString == ","
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.format has only one value
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.format.getClass().getName() == java.text.DecimalFormat.class
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT has only one value
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.prefix has only one value
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.prefix.toString == "["
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.suffix has only one value
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.suffix.toString == "]"
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowPrefix has only one value
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowPrefix.toString == ""
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSuffix has only one value
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSuffix.toString == ""
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSeparator has only one value
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSeparator.toString == "; "
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.columnSeparator has only one value
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.columnSeparator.toString == ", "
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.format has only one value
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math3.linear.MatrixUtils.checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix, int):::ENTER
m.getClass().getName() == org.apache.commons.math3.linear.Array2DRowRealMatrix.class
column >= 0
===========================================================================
org.apache.commons.math3.linear.MatrixUtils.checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix, int):::EXIT
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.format.getClass().getName())
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.prefix == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.prefix)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.prefix.toString)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.suffix == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.suffix)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.suffix.toString)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowPrefix)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSuffix)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSeparator)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.columnSeparator)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.format == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.format)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.format.getClass().getName())
===========================================================================
org.apache.commons.math3.linear.MatrixUtils.checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix, int, int):::ENTER
m.getClass().getName() == org.apache.commons.math3.linear.Array2DRowRealMatrix.class
row >= 0
column >= 0
===========================================================================
org.apache.commons.math3.linear.MatrixUtils.checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix, int, int):::EXIT
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.format.getClass().getName())
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.prefix == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.prefix)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.prefix.toString)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.suffix == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.suffix)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.suffix.toString)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowPrefix)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSuffix)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSeparator)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.columnSeparator)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.format == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.format)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.format.getClass().getName())
===========================================================================
org.apache.commons.math3.linear.MatrixUtils.checkRowIndex(org.apache.commons.math3.linear.AnyMatrix, int):::ENTER
m.getClass().getName() == org.apache.commons.math3.linear.Array2DRowRealMatrix.class
row >= 0
===========================================================================
org.apache.commons.math3.linear.MatrixUtils.checkRowIndex(org.apache.commons.math3.linear.AnyMatrix, int):::EXIT
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.prefix == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.prefix)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.suffix == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.suffix)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowPrefix)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSuffix)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSeparator)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.columnSeparator)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.format == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.format)
org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.MatrixUtils.DEFAULT_FORMAT.format.getClass().getName())
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.prefix == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.prefix)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.prefix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.prefix.toString)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.suffix == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.suffix)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.suffix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.suffix.toString)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowPrefix == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowPrefix)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowPrefix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowPrefix.toString)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSuffix == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSuffix)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSuffix.toString == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSuffix.toString)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSeparator == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSeparator)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSeparator.toString == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.rowSeparator.toString)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.columnSeparator == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.columnSeparator)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.columnSeparator.toString == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.columnSeparator.toString)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.format == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.format)
org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.format.getClass().getName() == orig(org.apache.commons.math3.linear.MatrixUtils.OCTAVE_FORMAT.format.getClass().getName())
===========================================================================
org.apache.commons.math3.linear.RealLinearOperator:::OBJECT
this.getClass().getName() == org.apache.commons.math3.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math3.linear.RealLinearOperator.RealLinearOperator():::EXIT
===========================================================================
org.apache.commons.math3.linear.RealMatrixFormat:::CLASS
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == "{"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == "}"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == "{"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == "}"
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == ","
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR has only one value
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == ","
===========================================================================
org.apache.commons.math3.linear.RealMatrixFormat:::OBJECT
this.prefix.toString one of { "[", "{" }
this.suffix.toString one of { "]", "}" }
this.rowPrefix.toString one of { "", "{" }
this.rowSuffix.toString one of { "", "}" }
this.rowSeparator.toString one of { ",", "; " }
this.columnSeparator.toString one of { ",", ", " }
this.format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math3.linear.RealMatrixFormat.RealMatrixFormat(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String):::ENTER
prefix has only one value
prefix.toString == "["
suffix has only one value
suffix.toString == "]"
rowPrefix has only one value
rowPrefix.toString == ""
rowSuffix has only one value
rowSuffix.toString == ""
rowSeparator has only one value
rowSeparator.toString == "; "
columnSeparator has only one value
columnSeparator.toString == ", "
===========================================================================
org.apache.commons.math3.linear.RealMatrixFormat.RealMatrixFormat(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String):::EXIT
prefix.toString == orig(prefix.toString)
suffix.toString == orig(suffix.toString)
rowPrefix.toString == orig(rowPrefix.toString)
rowSuffix.toString == orig(rowSuffix.toString)
rowSeparator.toString == orig(rowSeparator.toString)
columnSeparator.toString == orig(columnSeparator.toString)
this.prefix has only one value
this.prefix.toString == "["
this.suffix has only one value
this.suffix.toString == "]"
this.rowPrefix has only one value
this.rowPrefix.toString == ""
this.rowSuffix has only one value
this.rowSuffix.toString == ""
this.rowSeparator has only one value
this.rowSeparator.toString == "; "
this.columnSeparator has only one value
this.columnSeparator.toString == ", "
this.format has only one value
prefix.toString == "["
suffix.toString == "]"
rowPrefix.toString == ""
rowSuffix.toString == ""
rowSeparator.toString == "; "
columnSeparator.toString == ", "
===========================================================================
org.apache.commons.math3.linear.RealMatrixFormat.RealMatrixFormat(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.text.NumberFormat):::ENTER
prefix.toString one of { "[", "{" }
suffix.toString one of { "]", "}" }
rowPrefix.toString one of { "", "{" }
rowSuffix.toString one of { "", "}" }
rowSeparator.toString one of { ",", "; " }
columnSeparator.toString one of { ",", ", " }
format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math3.linear.RealMatrixFormat.RealMatrixFormat(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.text.NumberFormat):::EXIT
prefix.toString == orig(prefix.toString)
suffix.toString == orig(suffix.toString)
rowPrefix.toString == orig(rowPrefix.toString)
rowSuffix.toString == orig(rowSuffix.toString)
rowSeparator.toString == orig(rowSeparator.toString)
columnSeparator.toString == orig(columnSeparator.toString)
prefix.toString one of { "[", "{" }
suffix.toString one of { "]", "}" }
rowPrefix.toString one of { "", "{" }
rowSuffix.toString one of { "", "}" }
rowSeparator.toString one of { ",", "; " }
columnSeparator.toString one of { ",", ", " }
===========================================================================
org.apache.commons.math3.linear.RealMatrixFormat.RealMatrixFormat(java.text.NumberFormat):::ENTER
format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math3.linear.RealMatrixFormat.RealMatrixFormat(java.text.NumberFormat):::EXIT
this.prefix has only one value
this.prefix.toString == "{"
this.suffix has only one value
this.suffix.toString == "}"
this.rowPrefix has only one value
this.rowPrefix.toString == "{"
this.rowSuffix has only one value
this.rowSuffix.toString == "}"
this.rowSeparator has only one value
this.rowSeparator.toString == ","
this.columnSeparator has only one value
this.columnSeparator.toString == ","
===========================================================================
org.apache.commons.math3.linear.RealMatrixFormat.getFormat():::ENTER
this has only one value
this.prefix has only one value
this.prefix.toString == "{"
this.suffix has only one value
this.suffix.toString == "}"
this.rowPrefix has only one value
this.rowPrefix.toString == "{"
this.rowSuffix has only one value
this.rowSuffix.toString == "}"
this.rowSeparator has only one value
this.rowSeparator.toString == ","
this.columnSeparator has only one value
this.columnSeparator.toString == ","
this.format has only one value
===========================================================================
org.apache.commons.math3.linear.RealMatrixFormat.getFormat():::EXIT
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
this.prefix == orig(this.prefix)
this.prefix.toString == orig(this.prefix.toString)
this.suffix == orig(this.suffix)
this.suffix.toString == orig(this.suffix.toString)
this.rowPrefix == orig(this.rowPrefix)
this.rowPrefix.toString == orig(this.rowPrefix.toString)
this.rowSuffix == orig(this.rowSuffix)
this.rowSuffix.toString == orig(this.rowSuffix.toString)
this.rowSeparator == orig(this.rowSeparator)
this.rowSeparator.toString == orig(this.rowSeparator.toString)
this.columnSeparator == orig(this.columnSeparator)
this.columnSeparator.toString == orig(this.columnSeparator.toString)
this.format == orig(this.format)
this.format.getClass().getName() == orig(this.format.getClass().getName())
this.prefix has only one value
this.prefix.toString == "{"
this.suffix has only one value
this.suffix.toString == "}"
this.rowPrefix has only one value
this.rowPrefix.toString == "{"
this.rowSuffix has only one value
this.rowSuffix.toString == "}"
this.rowSeparator has only one value
this.rowSeparator.toString == ","
this.columnSeparator has only one value
this.columnSeparator.toString == ","
this.format has only one value
return has only one value
return.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math3.linear.RealMatrixFormat.getInstance():::ENTER
===========================================================================
org.apache.commons.math3.linear.RealMatrixFormat.getInstance():::EXIT
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
return.prefix has only one value
return.prefix.toString == "{"
return.suffix has only one value
return.suffix.toString == "}"
return.rowPrefix has only one value
return.rowPrefix.toString == "{"
return.rowSuffix has only one value
return.rowSuffix.toString == "}"
return.rowSeparator has only one value
return.rowSeparator.toString == ","
return.columnSeparator has only one value
return.columnSeparator.toString == ","
return.format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math3.linear.RealMatrixFormat.getInstance(java.util.Locale):::ENTER
locale has only one value
===========================================================================
org.apache.commons.math3.linear.RealMatrixFormat.getInstance(java.util.Locale):::EXIT
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_PREFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SUFFIX.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_ROW_SEPARATOR.toString)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR)
org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealMatrixFormat.DEFAULT_COLUMN_SEPARATOR.toString)
return.prefix has only one value
return.prefix.toString == "{"
return.suffix has only one value
return.suffix.toString == "}"
return.rowPrefix has only one value
return.rowPrefix.toString == "{"
return.rowSuffix has only one value
return.rowSuffix.toString == "}"
return.rowSeparator has only one value
return.rowSeparator.toString == ","
return.columnSeparator has only one value
return.columnSeparator.toString == ","
return.format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math3.linear.RealVector:::OBJECT
this.getClass().getName() == org.apache.commons.math3.linear.ArrayRealVector.class
===========================================================================
org.apache.commons.math3.linear.RealVector.RealVector():::EXIT
===========================================================================
org.apache.commons.math3.linear.RealVectorFormat:::CLASS
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_PREFIX has only one value
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_PREFIX.toString == "{"
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SUFFIX has only one value
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == "}"
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SEPARATOR has only one value
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == "; "
===========================================================================
org.apache.commons.math3.linear.RealVectorFormat:::OBJECT
this has only one value
this.prefix has only one value
this.prefix.toString == "{"
this.suffix has only one value
this.suffix.toString == "}"
this.separator has only one value
this.separator.toString == "; "
this.trimmedPrefix has only one value
this.trimmedPrefix.toString == "{"
this.trimmedSuffix has only one value
this.trimmedSuffix.toString == "}"
this.trimmedSeparator has only one value
this.trimmedSeparator.toString == ";"
this.format has only one value
this.format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math3.linear.RealVectorFormat.RealVectorFormat(java.lang.String, java.lang.String, java.lang.String, java.text.NumberFormat):::ENTER
prefix has only one value
prefix.toString == "{"
suffix has only one value
suffix.toString == "}"
separator has only one value
separator.toString == "; "
format has only one value
format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math3.linear.RealVectorFormat.RealVectorFormat(java.lang.String, java.lang.String, java.lang.String, java.text.NumberFormat):::EXIT
prefix.toString == orig(prefix.toString)
suffix.toString == orig(suffix.toString)
separator.toString == orig(separator.toString)
prefix.toString == "{"
suffix.toString == "}"
separator.toString == "; "
===========================================================================
org.apache.commons.math3.linear.RealVectorFormat.RealVectorFormat(java.text.NumberFormat):::ENTER
format has only one value
format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math3.linear.RealVectorFormat.RealVectorFormat(java.text.NumberFormat):::EXIT
===========================================================================
org.apache.commons.math3.linear.RealVectorFormat.getInstance():::ENTER
===========================================================================
org.apache.commons.math3.linear.RealVectorFormat.getInstance():::EXIT
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
return has only one value
return.prefix has only one value
return.prefix.toString == "{"
return.suffix has only one value
return.suffix.toString == "}"
return.separator has only one value
return.separator.toString == "; "
return.trimmedPrefix has only one value
return.trimmedPrefix.toString == "{"
return.trimmedSuffix has only one value
return.trimmedSuffix.toString == "}"
return.trimmedSeparator has only one value
return.trimmedSeparator.toString == ";"
return.format has only one value
return.format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math3.linear.RealVectorFormat.getInstance(java.util.Locale):::ENTER
locale has only one value
===========================================================================
org.apache.commons.math3.linear.RealVectorFormat.getInstance(java.util.Locale):::EXIT
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math3.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
return has only one value
return.prefix has only one value
return.prefix.toString == "{"
return.suffix has only one value
return.suffix.toString == "}"
return.separator has only one value
return.separator.toString == "; "
return.trimmedPrefix has only one value
return.trimmedPrefix.toString == "{"
return.trimmedSuffix has only one value
return.trimmedSuffix.toString == "}"
return.trimmedSeparator has only one value
return.trimmedSeparator.toString == ";"
return.format has only one value
return.format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math3.optimization.GoalType:::OBJECT
===========================================================================
org.apache.commons.math3.optimization.GoalType.GoalType(java.lang.String, int):::ENTER
$hidden$1.toString one of { "MAXIMIZE", "MINIMIZE" }
$hidden$2 one of { 0, 1 }
===========================================================================
org.apache.commons.math3.optimization.GoalType.GoalType(java.lang.String, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
$hidden$1.toString one of { "MAXIMIZE", "MINIMIZE" }
===========================================================================
org.apache.commons.math3.optimization.PointValuePair:::CLASS
===========================================================================
org.apache.commons.math3.optimization.PointValuePair:::OBJECT
this has only one value
this.key has only one value
this.key.getClass().getName() == double[].class
this.value has only one value
this.value.getClass().getName() == java.lang.Double.class
===========================================================================
org.apache.commons.math3.optimization.PointValuePair.PointValuePair(double[], double):::ENTER
point has only one value
point[] == [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
point[] elements one of { 0.0, 1.0 }
value == 1.0
size(point[]) == 31
===========================================================================
org.apache.commons.math3.optimization.PointValuePair.PointValuePair(double[], double):::EXIT
point[] == orig(point[])
point[] == [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
point[] elements one of { 0.0, 1.0 }
===========================================================================
org.apache.commons.math3.optimization.PointValuePair.PointValuePair(double[], double, boolean):::ENTER
point has only one value
point[] == [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
point[] elements one of { 0.0, 1.0 }
value == 1.0
copyArray == true
size(point[]) == 31
===========================================================================
org.apache.commons.math3.optimization.PointValuePair.PointValuePair(double[], double, boolean):::EXIT
point[] == orig(point[])
point[] == [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
point[] elements one of { 0.0, 1.0 }
===========================================================================
org.apache.commons.math3.optimization.PointValuePair.getPoint():::ENTER
===========================================================================
org.apache.commons.math3.optimization.PointValuePair.getPoint():::EXIT
this.key == orig(this.key)
this.key.getClass().getName() == orig(this.key.getClass().getName())
this.value == orig(this.value)
this.value.getClass().getName() == orig(this.value.getClass().getName())
return has only one value
return[] == [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
return[] elements one of { 0.0, 1.0 }
size(return[]) == 31
===========================================================================
org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer:::CLASS
===========================================================================
org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer:::OBJECT
this has only one value
this.getClass().getName() == org.apache.commons.math3.optimization.linear.SimplexSolver.class
this.function.coefficients has only one value
this.function.coefficients.getClass().getName() == org.apache.commons.math3.linear.ArrayRealVector.class
this.function.constantTerm == 0.0
this.linearConstraints.getClass().getName() == java.util.ArrayList.class
org.apache.commons.math3.optimization.GoalType.MAXIMIZE has only one value
org.apache.commons.math3.optimization.GoalType.MINIMIZE has only one value
org.apache.commons.math3.optimization.GoalType.$VALUES has only one value
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == org.apache.commons.math3.optimization.GoalType[].class
org.apache.commons.math3.optimization.GoalType.$VALUES[] contains no nulls and has only one value, of length 2
org.apache.commons.math3.optimization.GoalType.$VALUES[] elements != null
org.apache.commons.math3.optimization.GoalType.$VALUES[].getClass().getName() == [org.apache.commons.math3.optimization.GoalType, org.apache.commons.math3.optimization.GoalType]
org.apache.commons.math3.optimization.GoalType.$VALUES[].getClass().getName() elements == org.apache.commons.math3.optimization.GoalType.class
this.maxIterations one of { 0, 100 }
this.iterations >= 0
size(org.apache.commons.math3.optimization.GoalType.$VALUES[]) == 2
===========================================================================
org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer.AbstractLinearOptimizer():::EXIT
this.function == null
this.linearConstraints == null
this.goal == null
this.nonNegative == false
this.maxIterations == 100
this.iterations == 0
===========================================================================
org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer.getConstraints():::ENTER
this.function has only one value
this.linearConstraints has only one value
this.goal has only one value
this.nonNegative == true
this.maxIterations == 100
this.iterations == 0
===========================================================================
org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer.getConstraints():::EXIT
this.function == orig(this.function)
this.function.coefficients == orig(this.function.coefficients)
this.function.coefficients.getClass().getName() == orig(this.function.coefficients.getClass().getName())
this.function.constantTerm == orig(this.function.constantTerm)
this.linearConstraints == orig(this.linearConstraints)
this.linearConstraints.getClass().getName() == orig(this.linearConstraints.getClass().getName())
this.goal == orig(this.goal)
org.apache.commons.math3.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)
org.apache.commons.math3.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MINIMIZE)
org.apache.commons.math3.optimization.GoalType.$VALUES == orig(org.apache.commons.math3.optimization.GoalType.$VALUES)
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math3.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math3.optimization.GoalType.$VALUES[])
this.nonNegative == orig(this.nonNegative)
this.maxIterations == orig(this.maxIterations)
this.iterations == orig(this.iterations)
this.function has only one value
this.linearConstraints has only one value
this.goal has only one value
this.nonNegative == true
this.maxIterations == 100
this.iterations == 0
return has only one value
return.getClass().getName() == java.util.Collections$UnmodifiableCollection.class
===========================================================================
org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer.getFunction():::ENTER
this.function has only one value
this.linearConstraints has only one value
this.goal has only one value
this.nonNegative == true
this.maxIterations == 100
this.iterations == 0
===========================================================================
org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer.getFunction():::EXIT
this.function == orig(this.function)
this.function.coefficients == orig(this.function.coefficients)
this.function.coefficients.getClass().getName() == orig(this.function.coefficients.getClass().getName())
this.function.constantTerm == orig(this.function.constantTerm)
this.linearConstraints == orig(this.linearConstraints)
this.linearConstraints.getClass().getName() == orig(this.linearConstraints.getClass().getName())
this.goal == orig(this.goal)
org.apache.commons.math3.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)
org.apache.commons.math3.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MINIMIZE)
org.apache.commons.math3.optimization.GoalType.$VALUES == orig(org.apache.commons.math3.optimization.GoalType.$VALUES)
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math3.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math3.optimization.GoalType.$VALUES[])
this.nonNegative == orig(this.nonNegative)
this.maxIterations == orig(this.maxIterations)
this.iterations == orig(this.iterations)
this.function has only one value
this.linearConstraints has only one value
this.goal has only one value
this.nonNegative == true
this.maxIterations == 100
this.iterations == 0
return has only one value
return.coefficients has only one value
return.coefficients.getClass().getName() == org.apache.commons.math3.linear.ArrayRealVector.class
return.constantTerm == 0.0
===========================================================================
org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer.getGoalType():::ENTER
this.function has only one value
this.linearConstraints has only one value
this.goal has only one value
this.nonNegative == true
this.maxIterations == 100
this.iterations == 0
===========================================================================
org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer.getGoalType():::EXIT
this.function == orig(this.function)
this.function.coefficients == orig(this.function.coefficients)
this.function.coefficients.getClass().getName() == orig(this.function.coefficients.getClass().getName())
this.function.constantTerm == orig(this.function.constantTerm)
this.linearConstraints == orig(this.linearConstraints)
this.linearConstraints.getClass().getName() == orig(this.linearConstraints.getClass().getName())
this.goal == orig(this.goal)
org.apache.commons.math3.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)
org.apache.commons.math3.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MINIMIZE)
org.apache.commons.math3.optimization.GoalType.$VALUES == orig(org.apache.commons.math3.optimization.GoalType.$VALUES)
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math3.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math3.optimization.GoalType.$VALUES[])
this.nonNegative == orig(this.nonNegative)
this.maxIterations == orig(this.maxIterations)
this.iterations == orig(this.iterations)
this.function has only one value
this.linearConstraints has only one value
this.goal has only one value
this.nonNegative == true
this.maxIterations == 100
this.iterations == 0
return has only one value
===========================================================================
org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer.incrementIterationsCounter():::ENTER
this.function has only one value
this.linearConstraints has only one value
this.goal has only one value
this.nonNegative == true
this.maxIterations == 100
===========================================================================
org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer.incrementIterationsCounter():::EXIT
this.function == orig(this.function)
this.function.coefficients == orig(this.function.coefficients)
this.function.coefficients.getClass().getName() == orig(this.function.coefficients.getClass().getName())
this.function.constantTerm == orig(this.function.constantTerm)
this.linearConstraints == orig(this.linearConstraints)
this.linearConstraints.getClass().getName() == orig(this.linearConstraints.getClass().getName())
this.goal == orig(this.goal)
org.apache.commons.math3.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)
org.apache.commons.math3.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MINIMIZE)
org.apache.commons.math3.optimization.GoalType.$VALUES == orig(org.apache.commons.math3.optimization.GoalType.$VALUES)
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math3.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math3.optimization.GoalType.$VALUES[])
this.nonNegative == orig(this.nonNegative)
this.maxIterations == orig(this.maxIterations)
this.function has only one value
this.linearConstraints has only one value
this.goal has only one value
this.nonNegative == true
this.maxIterations == 100
this.iterations - orig(this.iterations) - 1 == 0
===========================================================================
org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer.optimize(org.apache.commons.math3.optimization.linear.LinearObjectiveFunction, java.util.Collection, org.apache.commons.math3.optimization.GoalType, boolean):::ENTER
this.function == null
this.linearConstraints == null
this.goal == null
this.nonNegative == false
this.maxIterations == 100
this.iterations == 0
f has only one value
f.coefficients has only one value
f.coefficients.getClass().getName() == org.apache.commons.math3.linear.ArrayRealVector.class
f.constantTerm == 0.0
constraints has only one value
constraints.getClass().getName() == java.util.ArrayList.class
goalType has only one value
restrictToNonNegative == true
===========================================================================
org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer.optimize(org.apache.commons.math3.optimization.linear.LinearObjectiveFunction, java.util.Collection, org.apache.commons.math3.optimization.GoalType, boolean):::EXIT
org.apache.commons.math3.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)
org.apache.commons.math3.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MINIMIZE)
org.apache.commons.math3.optimization.GoalType.$VALUES == orig(org.apache.commons.math3.optimization.GoalType.$VALUES)
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math3.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math3.optimization.GoalType.$VALUES[])
this.maxIterations == orig(this.maxIterations)
f.coefficients == orig(f.coefficients)
f.coefficients.getClass().getName() == orig(f.coefficients.getClass().getName())
f.constantTerm == orig(f.constantTerm)
this.function has only one value
this.linearConstraints has only one value
this.goal has only one value
this.nonNegative == true
this.maxIterations == 100
this.iterations == 14
f.coefficients has only one value
f.coefficients.getClass().getName() == org.apache.commons.math3.linear.ArrayRealVector.class
f.constantTerm == 0.0
return has only one value
return.key has only one value
return.key.getClass().getName() == double[].class
return.value has only one value
return.value.getClass().getName() == java.lang.Double.class
===========================================================================
org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer.restrictToNonNegative():::ENTER
this.function has only one value
this.linearConstraints has only one value
this.goal has only one value
this.nonNegative == true
this.maxIterations == 100
this.iterations == 0
===========================================================================
org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer.restrictToNonNegative():::EXIT
this.function == orig(this.function)
this.function.coefficients == orig(this.function.coefficients)
this.function.coefficients.getClass().getName() == orig(this.function.coefficients.getClass().getName())
this.function.constantTerm == orig(this.function.constantTerm)
this.linearConstraints == orig(this.linearConstraints)
this.linearConstraints.getClass().getName() == orig(this.linearConstraints.getClass().getName())
this.goal == orig(this.goal)
org.apache.commons.math3.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)
org.apache.commons.math3.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MINIMIZE)
org.apache.commons.math3.optimization.GoalType.$VALUES == orig(org.apache.commons.math3.optimization.GoalType.$VALUES)
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math3.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math3.optimization.GoalType.$VALUES[])
this.nonNegative == orig(this.nonNegative)
this.maxIterations == orig(this.maxIterations)
this.iterations == orig(this.iterations)
this.function has only one value
this.linearConstraints has only one value
this.goal has only one value
this.nonNegative == true
this.maxIterations == 100
this.iterations == 0
return == true
===========================================================================
org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer.restrictToNonNegative():::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer.setMaxIterations(int):::ENTER
this.function == null
this.linearConstraints == null
this.goal == null
this.nonNegative == false
this.maxIterations == 0
this.iterations == 0
maxIterations == 100
===========================================================================
org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer.setMaxIterations(int):::EXIT
this.function == orig(this.function)
this.linearConstraints == orig(this.linearConstraints)
this.goal == orig(this.goal)
this.nonNegative == orig(this.nonNegative)
this.iterations == orig(this.iterations)
this.function == null
this.linearConstraints == null
this.goal == null
this.nonNegative == false
this.maxIterations == 100
this.iterations == 0
===========================================================================
org.apache.commons.math3.optimization.linear.LinearConstraint:::CLASS
===========================================================================
org.apache.commons.math3.optimization.linear.LinearConstraint:::OBJECT
this.coefficients != null
this.coefficients.getClass().getName() == org.apache.commons.math3.linear.ArrayRealVector.class
this.relationship has only one value
this.relationship != null
this.relationship.stringValue has only one value
this.relationship.stringValue != null
this.relationship.stringValue.toString == ">="
this.value >= 0.0
===========================================================================
org.apache.commons.math3.optimization.linear.LinearConstraint.LinearConstraint(double[], org.apache.commons.math3.optimization.linear.Relationship, double):::ENTER
relationship has only one value
relationship.stringValue has only one value
relationship.stringValue.toString == ">="
value >= 0.0
size(coefficients[]) == 31
===========================================================================
org.apache.commons.math3.optimization.linear.LinearConstraint.LinearConstraint(double[], org.apache.commons.math3.optimization.linear.Relationship, double):::EXIT
coefficients[] == orig(coefficients[])
relationship.stringValue == orig(relationship.stringValue)
relationship.stringValue.toString == orig(relationship.stringValue.toString)
relationship.stringValue has only one value
relationship.stringValue.toString == ">="
===========================================================================
org.apache.commons.math3.optimization.linear.LinearConstraint.LinearConstraint(org.apache.commons.math3.linear.RealVector, org.apache.commons.math3.optimization.linear.Relationship, double):::ENTER
coefficients != null
coefficients.getClass().getName() == org.apache.commons.math3.linear.ArrayRealVector.class
relationship has only one value
relationship != null
relationship.stringValue has only one value
relationship.stringValue != null
relationship.stringValue.toString == ">="
value >= 0.0
===========================================================================
org.apache.commons.math3.optimization.linear.LinearConstraint.LinearConstraint(org.apache.commons.math3.linear.RealVector, org.apache.commons.math3.optimization.linear.Relationship, double):::EXIT
relationship.stringValue == orig(relationship.stringValue)
relationship.stringValue.toString == orig(relationship.stringValue.toString)
relationship.stringValue has only one value
relationship.stringValue != null
relationship.stringValue.toString == ">="
===========================================================================
org.apache.commons.math3.optimization.linear.LinearConstraint.getCoefficients():::ENTER
===========================================================================
org.apache.commons.math3.optimization.linear.LinearConstraint.getCoefficients():::EXIT
this.coefficients == orig(this.coefficients)
this.coefficients.getClass().getName() == orig(this.coefficients.getClass().getName())
this.relationship == orig(this.relationship)
this.relationship.stringValue == orig(this.relationship.stringValue)
this.relationship.stringValue.toString == orig(this.relationship.stringValue.toString)
this.value == orig(this.value)
return != null
return.getClass().getName() == org.apache.commons.math3.linear.ArrayRealVector.class
===========================================================================
org.apache.commons.math3.optimization.linear.LinearConstraint.getRelationship():::ENTER
===========================================================================
org.apache.commons.math3.optimization.linear.LinearConstraint.getRelationship():::EXIT
this.coefficients == orig(this.coefficients)
this.coefficients.getClass().getName() == orig(this.coefficients.getClass().getName())
this.relationship == orig(this.relationship)
this.relationship.stringValue == orig(this.relationship.stringValue)
this.relationship.stringValue.toString == orig(this.relationship.stringValue.toString)
this.value == orig(this.value)
return has only one value
return != null
return.stringValue has only one value
return.stringValue != null
return.stringValue.toString == ">="
===========================================================================
org.apache.commons.math3.optimization.linear.LinearConstraint.getValue():::ENTER
===========================================================================
org.apache.commons.math3.optimization.linear.LinearConstraint.getValue():::EXIT
this.coefficients == orig(this.coefficients)
this.coefficients.getClass().getName() == orig(this.coefficients.getClass().getName())
this.relationship == orig(this.relationship)
this.relationship.stringValue == orig(this.relationship.stringValue)
this.relationship.stringValue.toString == orig(this.relationship.stringValue.toString)
this.value == orig(this.value)
return >= 0.0
===========================================================================
org.apache.commons.math3.optimization.linear.LinearObjectiveFunction:::CLASS
===========================================================================
org.apache.commons.math3.optimization.linear.LinearObjectiveFunction:::OBJECT
this has only one value
this.coefficients has only one value
this.coefficients.getClass().getName() == org.apache.commons.math3.linear.ArrayRealVector.class
this.constantTerm == 0.0
===========================================================================
org.apache.commons.math3.optimization.linear.LinearObjectiveFunction.LinearObjectiveFunction(double[], double):::ENTER
coefficients has only one value
coefficients[] == [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
coefficients[] elements one of { 0.0, 1.0 }
constantTerm == 0.0
size(coefficients[]) == 31
===========================================================================
org.apache.commons.math3.optimization.linear.LinearObjectiveFunction.LinearObjectiveFunction(double[], double):::EXIT
coefficients[] == orig(coefficients[])
coefficients[] == [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
coefficients[] elements one of { 0.0, 1.0 }
===========================================================================
org.apache.commons.math3.optimization.linear.LinearObjectiveFunction.LinearObjectiveFunction(org.apache.commons.math3.linear.RealVector, double):::ENTER
coefficients has only one value
coefficients.getClass().getName() == org.apache.commons.math3.linear.ArrayRealVector.class
constantTerm == 0.0
===========================================================================
org.apache.commons.math3.optimization.linear.LinearObjectiveFunction.LinearObjectiveFunction(org.apache.commons.math3.linear.RealVector, double):::EXIT
===========================================================================
org.apache.commons.math3.optimization.linear.LinearObjectiveFunction.getCoefficients():::ENTER
===========================================================================
org.apache.commons.math3.optimization.linear.LinearObjectiveFunction.getCoefficients():::EXIT
this.coefficients == orig(this.coefficients)
this.coefficients.getClass().getName() == orig(this.coefficients.getClass().getName())
this.constantTerm == orig(this.constantTerm)
return has only one value
return.getClass().getName() == org.apache.commons.math3.linear.ArrayRealVector.class
===========================================================================
org.apache.commons.math3.optimization.linear.LinearObjectiveFunction.getConstantTerm():::ENTER
===========================================================================
org.apache.commons.math3.optimization.linear.LinearObjectiveFunction.getConstantTerm():::EXIT
this.coefficients == orig(this.coefficients)
this.coefficients.getClass().getName() == orig(this.coefficients.getClass().getName())
this.constantTerm == orig(this.constantTerm)
return == 0.0
===========================================================================
org.apache.commons.math3.optimization.linear.LinearObjectiveFunction.getValue(double[]):::ENTER
point has only one value
point[] == [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
point[] elements one of { 0.0, 1.0 }
size(point[]) == 31
===========================================================================
org.apache.commons.math3.optimization.linear.LinearObjectiveFunction.getValue(double[]):::EXIT
this.coefficients == orig(this.coefficients)
this.coefficients.getClass().getName() == orig(this.coefficients.getClass().getName())
this.constantTerm == orig(this.constantTerm)
point[] == orig(point[])
point[] == [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
point[] elements one of { 0.0, 1.0 }
return == 1.0
===========================================================================
org.apache.commons.math3.optimization.linear.Relationship:::OBJECT
this.stringValue.toString one of { "<=", "=", ">=" }
===========================================================================
org.apache.commons.math3.optimization.linear.Relationship.Relationship(java.lang.String, int, java.lang.String):::ENTER
$hidden$1.toString one of { "EQ", "GEQ", "LEQ" }
$hidden$2 one of { 0, 1, 2 }
stringValue.toString one of { "<=", "=", ">=" }
===========================================================================
org.apache.commons.math3.optimization.linear.Relationship.Relationship(java.lang.String, int, java.lang.String):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
stringValue.toString == orig(stringValue.toString)
$hidden$1.toString one of { "EQ", "GEQ", "LEQ" }
stringValue.toString one of { "<=", "=", ">=" }
===========================================================================
org.apache.commons.math3.optimization.linear.Relationship.values():::EXIT
return has only one value
return.getClass().getName() == org.apache.commons.math3.optimization.linear.Relationship[].class
return[] contains no nulls and has only one value, of length 3
return[].stringValue contains no nulls and has only one value, of length 3
return[].stringValue.toString == [=, <=, >=]
return[].stringValue.toString elements one of { "<=", "=", ">=" }
size(return[]) == 3
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexSolver:::CLASS
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexSolver:::OBJECT
this has only one value
this.epsilon == 1.0E-6
this.maxUlps == 10
this.function.coefficients has only one value
this.function.coefficients.getClass().getName() == org.apache.commons.math3.linear.ArrayRealVector.class
this.function.constantTerm == 0.0
this.linearConstraints.getClass().getName() == java.util.ArrayList.class
org.apache.commons.math3.optimization.GoalType.MAXIMIZE has only one value
org.apache.commons.math3.optimization.GoalType.MINIMIZE has only one value
org.apache.commons.math3.optimization.GoalType.$VALUES has only one value
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == org.apache.commons.math3.optimization.GoalType[].class
org.apache.commons.math3.optimization.GoalType.$VALUES[] contains no nulls and has only one value, of length 2
org.apache.commons.math3.optimization.GoalType.$VALUES[] elements != null
org.apache.commons.math3.optimization.GoalType.$VALUES[].getClass().getName() == [org.apache.commons.math3.optimization.GoalType, org.apache.commons.math3.optimization.GoalType]
org.apache.commons.math3.optimization.GoalType.$VALUES[].getClass().getName() elements == org.apache.commons.math3.optimization.GoalType.class
this.maxIterations == 100
this.iterations >= 0
size(org.apache.commons.math3.optimization.GoalType.$VALUES[]) == 2
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexSolver.SimplexSolver():::EXIT
this.function == null
this.linearConstraints == null
this.goal == null
this.nonNegative == false
this.iterations == 0
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexSolver.SimplexSolver(double, int):::ENTER
epsilon == 1.0E-6
maxUlps == 10
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexSolver.SimplexSolver(double, int):::EXIT
this.function == null
this.linearConstraints == null
this.goal == null
this.nonNegative == false
this.iterations == 0
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexSolver.doIteration(org.apache.commons.math3.optimization.linear.SimplexTableau):::ENTER
this.function has only one value
this.linearConstraints has only one value
this.goal has only one value
this.nonNegative == true
tableau has only one value
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL has only one value
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString == "x-"
tableau.f has only one value
tableau.f.coefficients has only one value
tableau.f.coefficients.getClass().getName() == org.apache.commons.math3.linear.ArrayRealVector.class
tableau.f.constantTerm == 0.0
tableau.constraints has only one value
tableau.constraints[] contains no nulls and has only one value, of length 7
tableau.constraints[] elements != null
tableau.constraints[].getClass().getName() == [org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint]
tableau.constraints[].getClass().getName() elements == org.apache.commons.math3.optimization.linear.LinearConstraint.class
tableau.constraints.getClass().getName() == java.util.ArrayList.class
tableau.restrictToNonNegative == true
tableau.columnLabels has only one value
tableau.columnLabels[] elements != null
tableau.columnLabels[].getClass().getName() elements == java.lang.String.class
tableau.columnLabels[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
tableau.columnLabels.getClass().getName() == java.util.ArrayList.class
tableau.tableau.getClass().getName() == org.apache.commons.math3.linear.Array2DRowRealMatrix.class
tableau.numDecisionVariables == 31
tableau.numSlackVariables == 7
tableau.numArtificialVariables one of { 0, 7 }
tableau.epsilon == 1.0E-6
tableau.maxUlps == 10
size(tableau.constraints[]) == 7
size(tableau.columnLabels[]) one of { 40, 48 }
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexSolver.doIteration(org.apache.commons.math3.optimization.linear.SimplexTableau):::EXIT
this.epsilon == orig(this.epsilon)
this.maxUlps == orig(this.maxUlps)
this.function == orig(this.function)
this.function.coefficients == orig(this.function.coefficients)
this.function.coefficients.getClass().getName() == orig(this.function.coefficients.getClass().getName())
this.function.constantTerm == orig(this.function.constantTerm)
this.linearConstraints == orig(this.linearConstraints)
this.linearConstraints.getClass().getName() == orig(this.linearConstraints.getClass().getName())
this.goal == orig(this.goal)
org.apache.commons.math3.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)
org.apache.commons.math3.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MINIMIZE)
org.apache.commons.math3.optimization.GoalType.$VALUES == orig(org.apache.commons.math3.optimization.GoalType.$VALUES)
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math3.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math3.optimization.GoalType.$VALUES[])
this.nonNegative == orig(this.nonNegative)
this.maxIterations == orig(this.maxIterations)
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL == orig(org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL)
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString == orig(org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString)
tableau.f == orig(tableau.f)
tableau.f.coefficients == orig(tableau.f.coefficients)
tableau.f.coefficients.getClass().getName() == orig(tableau.f.coefficients.getClass().getName())
tableau.f.constantTerm == orig(tableau.f.constantTerm)
tableau.constraints == orig(tableau.constraints)
tableau.constraints[] == orig(tableau.constraints[])
tableau.constraints.getClass().getName() == orig(tableau.constraints.getClass().getName())
tableau.restrictToNonNegative == orig(tableau.restrictToNonNegative)
tableau.columnLabels == orig(tableau.columnLabels)
tableau.columnLabels[] == orig(tableau.columnLabels[])
tableau.columnLabels.getClass().getName() == orig(tableau.columnLabels.getClass().getName())
tableau.tableau == orig(tableau.tableau)
tableau.tableau.getClass().getName() == orig(tableau.tableau.getClass().getName())
tableau.numDecisionVariables == orig(tableau.numDecisionVariables)
tableau.numSlackVariables == orig(tableau.numSlackVariables)
tableau.numArtificialVariables == orig(tableau.numArtificialVariables)
tableau.epsilon == orig(tableau.epsilon)
tableau.maxUlps == orig(tableau.maxUlps)
this.function has only one value
this.linearConstraints has only one value
this.goal has only one value
this.nonNegative == true
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL has only one value
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString == "x-"
tableau.f has only one value
tableau.f.coefficients has only one value
tableau.f.coefficients.getClass().getName() == org.apache.commons.math3.linear.ArrayRealVector.class
tableau.f.constantTerm == 0.0
tableau.constraints has only one value
tableau.constraints[] contains no nulls and has only one value, of length 7
tableau.constraints[] elements != null
tableau.constraints[].getClass().getName() == [org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint]
tableau.constraints[].getClass().getName() elements == org.apache.commons.math3.optimization.linear.LinearConstraint.class
tableau.constraints.getClass().getName() == java.util.ArrayList.class
tableau.restrictToNonNegative == true
tableau.columnLabels has only one value
tableau.columnLabels[] elements != null
tableau.columnLabels[].getClass().getName() elements == java.lang.String.class
tableau.columnLabels[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
tableau.columnLabels.getClass().getName() == java.util.ArrayList.class
tableau.tableau.getClass().getName() == org.apache.commons.math3.linear.Array2DRowRealMatrix.class
tableau.numDecisionVariables == 31
tableau.numSlackVariables == 7
tableau.numArtificialVariables one of { 0, 7 }
tableau.epsilon == 1.0E-6
tableau.maxUlps == 10
size(tableau.constraints[]) == 7
size(tableau.columnLabels[]) one of { 40, 48 }
this.iterations - orig(this.iterations) - 1 == 0
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexSolver.doOptimize():::ENTER
this.function has only one value
this.linearConstraints has only one value
this.goal has only one value
this.nonNegative == true
this.iterations == 0
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexSolver.doOptimize():::EXIT
this.epsilon == orig(this.epsilon)
this.maxUlps == orig(this.maxUlps)
this.function == orig(this.function)
this.function.coefficients == orig(this.function.coefficients)
this.function.coefficients.getClass().getName() == orig(this.function.coefficients.getClass().getName())
this.function.constantTerm == orig(this.function.constantTerm)
this.linearConstraints == orig(this.linearConstraints)
this.linearConstraints.getClass().getName() == orig(this.linearConstraints.getClass().getName())
this.goal == orig(this.goal)
org.apache.commons.math3.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)
org.apache.commons.math3.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MINIMIZE)
org.apache.commons.math3.optimization.GoalType.$VALUES == orig(org.apache.commons.math3.optimization.GoalType.$VALUES)
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math3.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math3.optimization.GoalType.$VALUES[])
this.nonNegative == orig(this.nonNegative)
this.maxIterations == orig(this.maxIterations)
this.function has only one value
this.linearConstraints has only one value
this.goal has only one value
this.nonNegative == true
this.iterations == 14
return has only one value
return.key has only one value
return.key.getClass().getName() == double[].class
return.value has only one value
return.value.getClass().getName() == java.lang.Double.class
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexSolver.getPivotColumn(org.apache.commons.math3.optimization.linear.SimplexTableau):::ENTER
this.function has only one value
this.linearConstraints has only one value
this.goal has only one value
this.nonNegative == true
tableau has only one value
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL has only one value
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString == "x-"
tableau.f has only one value
tableau.f.coefficients has only one value
tableau.f.coefficients.getClass().getName() == org.apache.commons.math3.linear.ArrayRealVector.class
tableau.f.constantTerm == 0.0
tableau.constraints has only one value
tableau.constraints[] contains no nulls and has only one value, of length 7
tableau.constraints[] elements != null
tableau.constraints[].getClass().getName() == [org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint]
tableau.constraints[].getClass().getName() elements == org.apache.commons.math3.optimization.linear.LinearConstraint.class
tableau.constraints.getClass().getName() == java.util.ArrayList.class
tableau.restrictToNonNegative == true
tableau.columnLabels has only one value
tableau.columnLabels[] elements != null
tableau.columnLabels[].getClass().getName() elements == java.lang.String.class
tableau.columnLabels[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
tableau.columnLabels.getClass().getName() == java.util.ArrayList.class
tableau.tableau.getClass().getName() == org.apache.commons.math3.linear.Array2DRowRealMatrix.class
tableau.numDecisionVariables == 31
tableau.numSlackVariables == 7
tableau.numArtificialVariables one of { 0, 7 }
tableau.epsilon == 1.0E-6
tableau.maxUlps == 10
size(tableau.constraints[]) == 7
size(tableau.columnLabels[]) one of { 40, 48 }
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexSolver.getPivotColumn(org.apache.commons.math3.optimization.linear.SimplexTableau):::EXIT
this.epsilon == orig(this.epsilon)
this.maxUlps == orig(this.maxUlps)
this.function == orig(this.function)
this.function.coefficients == orig(this.function.coefficients)
this.function.coefficients.getClass().getName() == orig(this.function.coefficients.getClass().getName())
this.function.constantTerm == orig(this.function.constantTerm)
this.linearConstraints == orig(this.linearConstraints)
this.linearConstraints.getClass().getName() == orig(this.linearConstraints.getClass().getName())
this.goal == orig(this.goal)
org.apache.commons.math3.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)
org.apache.commons.math3.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MINIMIZE)
org.apache.commons.math3.optimization.GoalType.$VALUES == orig(org.apache.commons.math3.optimization.GoalType.$VALUES)
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math3.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math3.optimization.GoalType.$VALUES[])
this.nonNegative == orig(this.nonNegative)
this.maxIterations == orig(this.maxIterations)
this.iterations == orig(this.iterations)
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL == orig(org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL)
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString == orig(org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString)
tableau.f == orig(tableau.f)
tableau.f.coefficients == orig(tableau.f.coefficients)
tableau.f.coefficients.getClass().getName() == orig(tableau.f.coefficients.getClass().getName())
tableau.f.constantTerm == orig(tableau.f.constantTerm)
tableau.constraints == orig(tableau.constraints)
tableau.constraints[] == orig(tableau.constraints[])
tableau.constraints.getClass().getName() == orig(tableau.constraints.getClass().getName())
tableau.restrictToNonNegative == orig(tableau.restrictToNonNegative)
tableau.columnLabels == orig(tableau.columnLabels)
tableau.columnLabels[] == orig(tableau.columnLabels[])
tableau.columnLabels.getClass().getName() == orig(tableau.columnLabels.getClass().getName())
tableau.tableau == orig(tableau.tableau)
tableau.tableau.getClass().getName() == orig(tableau.tableau.getClass().getName())
tableau.numDecisionVariables == orig(tableau.numDecisionVariables)
tableau.numSlackVariables == orig(tableau.numSlackVariables)
tableau.numArtificialVariables == orig(tableau.numArtificialVariables)
tableau.epsilon == orig(tableau.epsilon)
tableau.maxUlps == orig(tableau.maxUlps)
this.function has only one value
this.linearConstraints has only one value
this.goal has only one value
this.nonNegative == true
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL has only one value
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString == "x-"
tableau.f has only one value
tableau.f.coefficients has only one value
tableau.f.coefficients.getClass().getName() == org.apache.commons.math3.linear.ArrayRealVector.class
tableau.f.constantTerm == 0.0
tableau.constraints has only one value
tableau.constraints[] contains no nulls and has only one value, of length 7
tableau.constraints[] elements != null
tableau.constraints[].getClass().getName() == [org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint]
tableau.constraints[].getClass().getName() elements == org.apache.commons.math3.optimization.linear.LinearConstraint.class
tableau.constraints.getClass().getName() == java.util.ArrayList.class
tableau.restrictToNonNegative == true
tableau.columnLabels has only one value
tableau.columnLabels[] elements != null
tableau.columnLabels[].getClass().getName() elements == java.lang.String.class
tableau.columnLabels[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
tableau.columnLabels.getClass().getName() == java.util.ArrayList.class
tableau.tableau.getClass().getName() == org.apache.commons.math3.linear.Array2DRowRealMatrix.class
tableau.numDecisionVariables == 31
tableau.numSlackVariables == 7
tableau.numArtificialVariables one of { 0, 7 }
tableau.epsilon == 1.0E-6
tableau.maxUlps == 10
size(tableau.constraints[]) == 7
size(tableau.columnLabels[]) one of { 40, 48 }
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexSolver.getPivotRow(org.apache.commons.math3.optimization.linear.SimplexTableau, int):::ENTER
this.function has only one value
this.linearConstraints has only one value
this.goal has only one value
this.nonNegative == true
tableau has only one value
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL has only one value
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString == "x-"
tableau.f has only one value
tableau.f.coefficients has only one value
tableau.f.coefficients.getClass().getName() == org.apache.commons.math3.linear.ArrayRealVector.class
tableau.f.constantTerm == 0.0
tableau.constraints has only one value
tableau.constraints[] contains no nulls and has only one value, of length 7
tableau.constraints[] elements != null
tableau.constraints[].getClass().getName() == [org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint]
tableau.constraints[].getClass().getName() elements == org.apache.commons.math3.optimization.linear.LinearConstraint.class
tableau.constraints.getClass().getName() == java.util.ArrayList.class
tableau.restrictToNonNegative == true
tableau.columnLabels has only one value
tableau.columnLabels[] elements != null
tableau.columnLabels[].getClass().getName() elements == java.lang.String.class
tableau.columnLabels[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
tableau.columnLabels.getClass().getName() == java.util.ArrayList.class
tableau.tableau.getClass().getName() == org.apache.commons.math3.linear.Array2DRowRealMatrix.class
tableau.numDecisionVariables == 31
tableau.numSlackVariables == 7
tableau.numArtificialVariables one of { 0, 7 }
tableau.epsilon == 1.0E-6
tableau.maxUlps == 10
size(tableau.constraints[]) == 7
size(tableau.columnLabels[]) one of { 40, 48 }
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexSolver.getPivotRow(org.apache.commons.math3.optimization.linear.SimplexTableau, int):::EXIT124
tableau.columnLabels[] contains no nulls and has only one value, of length 48
tableau.columnLabels[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
tableau.tableau has only one value
tableau.numArtificialVariables == 7
size(tableau.columnLabels[]) == 48
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexSolver.getPivotRow(org.apache.commons.math3.optimization.linear.SimplexTableau, int):::EXIT151
tableau.columnLabels[] contains no nulls and has only one value, of length 40
tableau.columnLabels[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
tableau.tableau has only one value
tableau.numArtificialVariables == 0
size(tableau.columnLabels[]) == 40
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexSolver.getPivotRow(org.apache.commons.math3.optimization.linear.SimplexTableau, int):::EXIT153
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexSolver.getPivotRow(org.apache.commons.math3.optimization.linear.SimplexTableau, int):::EXIT
this.epsilon == orig(this.epsilon)
this.maxUlps == orig(this.maxUlps)
this.function == orig(this.function)
this.function.coefficients == orig(this.function.coefficients)
this.function.coefficients.getClass().getName() == orig(this.function.coefficients.getClass().getName())
this.function.constantTerm == orig(this.function.constantTerm)
this.linearConstraints == orig(this.linearConstraints)
this.linearConstraints.getClass().getName() == orig(this.linearConstraints.getClass().getName())
this.goal == orig(this.goal)
org.apache.commons.math3.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)
org.apache.commons.math3.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MINIMIZE)
org.apache.commons.math3.optimization.GoalType.$VALUES == orig(org.apache.commons.math3.optimization.GoalType.$VALUES)
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math3.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math3.optimization.GoalType.$VALUES[])
this.nonNegative == orig(this.nonNegative)
this.maxIterations == orig(this.maxIterations)
this.iterations == orig(this.iterations)
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL == orig(org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL)
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString == orig(org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString)
tableau.f == orig(tableau.f)
tableau.f.coefficients == orig(tableau.f.coefficients)
tableau.f.coefficients.getClass().getName() == orig(tableau.f.coefficients.getClass().getName())
tableau.f.constantTerm == orig(tableau.f.constantTerm)
tableau.constraints == orig(tableau.constraints)
tableau.constraints[] == orig(tableau.constraints[])
tableau.constraints.getClass().getName() == orig(tableau.constraints.getClass().getName())
tableau.restrictToNonNegative == orig(tableau.restrictToNonNegative)
tableau.columnLabels == orig(tableau.columnLabels)
tableau.columnLabels[] == orig(tableau.columnLabels[])
tableau.columnLabels.getClass().getName() == orig(tableau.columnLabels.getClass().getName())
tableau.tableau == orig(tableau.tableau)
tableau.tableau.getClass().getName() == orig(tableau.tableau.getClass().getName())
tableau.numDecisionVariables == orig(tableau.numDecisionVariables)
tableau.numSlackVariables == orig(tableau.numSlackVariables)
tableau.numArtificialVariables == orig(tableau.numArtificialVariables)
tableau.epsilon == orig(tableau.epsilon)
tableau.maxUlps == orig(tableau.maxUlps)
this.function has only one value
this.linearConstraints has only one value
this.goal has only one value
this.nonNegative == true
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL has only one value
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString == "x-"
tableau.f has only one value
tableau.f.coefficients has only one value
tableau.f.coefficients.getClass().getName() == org.apache.commons.math3.linear.ArrayRealVector.class
tableau.f.constantTerm == 0.0
tableau.constraints has only one value
tableau.constraints[] contains no nulls and has only one value, of length 7
tableau.constraints[] elements != null
tableau.constraints[].getClass().getName() == [org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint]
tableau.constraints[].getClass().getName() elements == org.apache.commons.math3.optimization.linear.LinearConstraint.class
tableau.constraints.getClass().getName() == java.util.ArrayList.class
tableau.restrictToNonNegative == true
tableau.columnLabels has only one value
tableau.columnLabels[] elements != null
tableau.columnLabels[].getClass().getName() elements == java.lang.String.class
tableau.columnLabels[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
tableau.columnLabels.getClass().getName() == java.util.ArrayList.class
tableau.tableau.getClass().getName() == org.apache.commons.math3.linear.Array2DRowRealMatrix.class
tableau.numDecisionVariables == 31
tableau.numSlackVariables == 7
tableau.numArtificialVariables one of { 0, 7 }
tableau.epsilon == 1.0E-6
tableau.maxUlps == 10
size(tableau.constraints[]) == 7
size(tableau.columnLabels[]) one of { 40, 48 }
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexSolver.solvePhase1(org.apache.commons.math3.optimization.linear.SimplexTableau):::ENTER
this.function has only one value
this.linearConstraints has only one value
this.goal has only one value
this.nonNegative == true
this.iterations == 0
tableau has only one value
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL has only one value
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString == "x-"
tableau.f has only one value
tableau.f.coefficients has only one value
tableau.f.coefficients.getClass().getName() == org.apache.commons.math3.linear.ArrayRealVector.class
tableau.f.constantTerm == 0.0
tableau.constraints has only one value
tableau.constraints[] contains no nulls and has only one value, of length 7
tableau.constraints[].getClass().getName() == [org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint]
tableau.constraints[].getClass().getName() elements == org.apache.commons.math3.optimization.linear.LinearConstraint.class
tableau.constraints.getClass().getName() == java.util.ArrayList.class
tableau.restrictToNonNegative == true
tableau.columnLabels has only one value
tableau.columnLabels[] contains no nulls and has only one value, of length 48
tableau.columnLabels[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
tableau.columnLabels[].getClass().getName() elements == java.lang.String.class
tableau.columnLabels.getClass().getName() == java.util.ArrayList.class
tableau.tableau has only one value
tableau.tableau.getClass().getName() == org.apache.commons.math3.linear.Array2DRowRealMatrix.class
tableau.numDecisionVariables == 31
tableau.numSlackVariables == 7
tableau.numArtificialVariables == 7
tableau.epsilon == 1.0E-6
tableau.maxUlps == 10
size(tableau.constraints[]) == 7
size(tableau.columnLabels[]) == 48
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexSolver.solvePhase1(org.apache.commons.math3.optimization.linear.SimplexTableau):::EXIT209
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexSolver.solvePhase1(org.apache.commons.math3.optimization.linear.SimplexTableau):::EXIT
this.epsilon == orig(this.epsilon)
this.maxUlps == orig(this.maxUlps)
this.function == orig(this.function)
this.function.coefficients == orig(this.function.coefficients)
this.function.coefficients.getClass().getName() == orig(this.function.coefficients.getClass().getName())
this.function.constantTerm == orig(this.function.constantTerm)
this.linearConstraints == orig(this.linearConstraints)
this.linearConstraints.getClass().getName() == orig(this.linearConstraints.getClass().getName())
this.goal == orig(this.goal)
org.apache.commons.math3.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)
org.apache.commons.math3.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MINIMIZE)
org.apache.commons.math3.optimization.GoalType.$VALUES == orig(org.apache.commons.math3.optimization.GoalType.$VALUES)
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math3.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math3.optimization.GoalType.$VALUES[])
this.nonNegative == orig(this.nonNegative)
this.maxIterations == orig(this.maxIterations)
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL == orig(org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL)
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString == orig(org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString)
tableau.f == orig(tableau.f)
tableau.f.coefficients == orig(tableau.f.coefficients)
tableau.f.coefficients.getClass().getName() == orig(tableau.f.coefficients.getClass().getName())
tableau.f.constantTerm == orig(tableau.f.constantTerm)
tableau.constraints == orig(tableau.constraints)
tableau.constraints[] == orig(tableau.constraints[])
tableau.constraints.getClass().getName() == orig(tableau.constraints.getClass().getName())
tableau.restrictToNonNegative == orig(tableau.restrictToNonNegative)
tableau.columnLabels == orig(tableau.columnLabels)
tableau.columnLabels[] == orig(tableau.columnLabels[])
tableau.columnLabels.getClass().getName() == orig(tableau.columnLabels.getClass().getName())
tableau.tableau == orig(tableau.tableau)
tableau.tableau.getClass().getName() == orig(tableau.tableau.getClass().getName())
tableau.numDecisionVariables == orig(tableau.numDecisionVariables)
tableau.numSlackVariables == orig(tableau.numSlackVariables)
tableau.numArtificialVariables == orig(tableau.numArtificialVariables)
tableau.epsilon == orig(tableau.epsilon)
tableau.maxUlps == orig(tableau.maxUlps)
this.function has only one value
this.linearConstraints has only one value
this.goal has only one value
this.nonNegative == true
this.iterations == 7
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL has only one value
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString == "x-"
tableau.f has only one value
tableau.f.coefficients has only one value
tableau.f.coefficients.getClass().getName() == org.apache.commons.math3.linear.ArrayRealVector.class
tableau.f.constantTerm == 0.0
tableau.constraints has only one value
tableau.constraints[] contains no nulls and has only one value, of length 7
tableau.constraints[].getClass().getName() == [org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint]
tableau.constraints[].getClass().getName() elements == org.apache.commons.math3.optimization.linear.LinearConstraint.class
tableau.constraints.getClass().getName() == java.util.ArrayList.class
tableau.restrictToNonNegative == true
tableau.columnLabels has only one value
tableau.columnLabels[] contains no nulls and has only one value, of length 48
tableau.columnLabels[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
tableau.columnLabels[].getClass().getName() elements == java.lang.String.class
tableau.columnLabels.getClass().getName() == java.util.ArrayList.class
tableau.tableau has only one value
tableau.tableau.getClass().getName() == org.apache.commons.math3.linear.Array2DRowRealMatrix.class
tableau.numDecisionVariables == 31
tableau.numSlackVariables == 7
tableau.numArtificialVariables == 7
tableau.epsilon == 1.0E-6
tableau.maxUlps == 10
size(tableau.constraints[]) == 7
size(tableau.columnLabels[]) == 48
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexSolverTest:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexSolverTest.SimplexSolverTest():::EXIT
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexSolverTest.testMath828Cycle():::ENTER
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexSolverTest.testMath828Cycle():::EXIT
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexSolverTest.validSolution(org.apache.commons.math3.optimization.PointValuePair, java.util.List, double):::ENTER
solution has only one value
solution.key has only one value
solution.key.getClass().getName() == double[].class
solution.value has only one value
solution.value.getClass().getName() == java.lang.Double.class
constraints has only one value
constraints[] contains no nulls and has only one value, of length 7
constraints[].getClass().getName() == [org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint]
constraints[].getClass().getName() elements == org.apache.commons.math3.optimization.linear.LinearConstraint.class
constraints.getClass().getName() == java.util.ArrayList.class
epsilon == 1.0E-6
size(constraints[]) == 7
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexSolverTest.validSolution(org.apache.commons.math3.optimization.PointValuePair, java.util.List, double):::EXIT636
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexSolverTest.validSolution(org.apache.commons.math3.optimization.PointValuePair, java.util.List, double):::EXIT636;condition="return == true"
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexSolverTest.validSolution(org.apache.commons.math3.optimization.PointValuePair, java.util.List, double):::EXIT
solution.key == orig(solution.key)
solution.key.getClass().getName() == orig(solution.key.getClass().getName())
solution.value == orig(solution.value)
solution.value.getClass().getName() == orig(solution.value.getClass().getName())
constraints[] == orig(constraints[])
solution.key has only one value
solution.key.getClass().getName() == double[].class
solution.value has only one value
solution.value.getClass().getName() == java.lang.Double.class
constraints[] contains no nulls and has only one value, of length 7
constraints[].getClass().getName() == [org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint]
constraints[].getClass().getName() elements == org.apache.commons.math3.optimization.linear.LinearConstraint.class
return == true
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexSolverTest.validSolution(org.apache.commons.math3.optimization.PointValuePair, java.util.List, double):::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau:::CLASS
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL has only one value
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString == "x-"
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau:::OBJECT
this has only one value
this.f has only one value
this.f.coefficients has only one value
this.f.coefficients.getClass().getName() == org.apache.commons.math3.linear.ArrayRealVector.class
this.f.constantTerm == 0.0
this.constraints[] contains no nulls and has only one value, of length 7
this.constraints[] elements != null
this.constraints[].getClass().getName() == [org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint]
this.constraints[].getClass().getName() elements == org.apache.commons.math3.optimization.linear.LinearConstraint.class
this.constraints.getClass().getName() == java.util.ArrayList.class
this.columnLabels has only one value
this.columnLabels[] elements != null
this.columnLabels[].getClass().getName() elements == java.lang.String.class
this.columnLabels.getClass().getName() == java.util.ArrayList.class
this.tableau.getClass().getName() == org.apache.commons.math3.linear.Array2DRowRealMatrix.class
this.numDecisionVariables one of { 0, 31 }
this.numSlackVariables one of { 0, 7 }
this.numArtificialVariables one of { 0, 7 }
this.epsilon one of { 0.0, 1.0E-6 }
this.maxUlps one of { 0, 10 }
size(this.constraints[]) == 7
size(this.columnLabels[])-1 != 0
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau.SimplexTableau(org.apache.commons.math3.optimization.linear.LinearObjectiveFunction, java.util.Collection, org.apache.commons.math3.optimization.GoalType, boolean, double, int):::ENTER
f has only one value
f.coefficients has only one value
f.coefficients.getClass().getName() == org.apache.commons.math3.linear.ArrayRealVector.class
f.constantTerm == 0.0
constraints has only one value
constraints.getClass().getName() == java.util.Collections$UnmodifiableCollection.class
goalType has only one value
org.apache.commons.math3.optimization.GoalType.MAXIMIZE has only one value
org.apache.commons.math3.optimization.GoalType.MINIMIZE has only one value
org.apache.commons.math3.optimization.GoalType.$VALUES has only one value
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == org.apache.commons.math3.optimization.GoalType[].class
org.apache.commons.math3.optimization.GoalType.$VALUES[] contains no nulls and has only one value, of length 2
org.apache.commons.math3.optimization.GoalType.$VALUES[].getClass().getName() == [org.apache.commons.math3.optimization.GoalType, org.apache.commons.math3.optimization.GoalType]
org.apache.commons.math3.optimization.GoalType.$VALUES[].getClass().getName() elements == org.apache.commons.math3.optimization.GoalType.class
restrictToNonNegative == true
epsilon == 1.0E-6
maxUlps == 10
size(org.apache.commons.math3.optimization.GoalType.$VALUES[]) == 2
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau.SimplexTableau(org.apache.commons.math3.optimization.linear.LinearObjectiveFunction, java.util.Collection, org.apache.commons.math3.optimization.GoalType, boolean, double, int):::EXIT
f.coefficients == orig(f.coefficients)
f.coefficients.getClass().getName() == orig(f.coefficients.getClass().getName())
f.constantTerm == orig(f.constantTerm)
org.apache.commons.math3.optimization.GoalType.MAXIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MAXIMIZE)
org.apache.commons.math3.optimization.GoalType.MINIMIZE == orig(org.apache.commons.math3.optimization.GoalType.MINIMIZE)
org.apache.commons.math3.optimization.GoalType.$VALUES == orig(org.apache.commons.math3.optimization.GoalType.$VALUES)
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == orig(org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName())
org.apache.commons.math3.optimization.GoalType.$VALUES[] == orig(org.apache.commons.math3.optimization.GoalType.$VALUES[])
this.constraints has only one value
this.restrictToNonNegative == true
this.columnLabels[] contains no nulls and has only one value, of length 48
this.columnLabels[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.tableau has only one value
this.numDecisionVariables == 31
this.numSlackVariables == 7
this.numArtificialVariables == 7
this.epsilon == 1.0E-6
this.maxUlps == 10
f.coefficients has only one value
f.coefficients.getClass().getName() == org.apache.commons.math3.linear.ArrayRealVector.class
f.constantTerm == 0.0
org.apache.commons.math3.optimization.GoalType.MAXIMIZE has only one value
org.apache.commons.math3.optimization.GoalType.MINIMIZE has only one value
org.apache.commons.math3.optimization.GoalType.$VALUES has only one value
org.apache.commons.math3.optimization.GoalType.$VALUES.getClass().getName() == org.apache.commons.math3.optimization.GoalType[].class
org.apache.commons.math3.optimization.GoalType.$VALUES[] contains no nulls and has only one value, of length 2
org.apache.commons.math3.optimization.GoalType.$VALUES[].getClass().getName() == [org.apache.commons.math3.optimization.GoalType, org.apache.commons.math3.optimization.GoalType]
org.apache.commons.math3.optimization.GoalType.$VALUES[].getClass().getName() elements == org.apache.commons.math3.optimization.GoalType.class
size(this.columnLabels[]) == 48
size(org.apache.commons.math3.optimization.GoalType.$VALUES[]) == 2
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau.copyArray(double[], double[]):::ENTER
this.constraints has only one value
this.restrictToNonNegative == true
this.columnLabels[] == []
this.columnLabels[].getClass().getName() == []
this.tableau == null
this.numDecisionVariables == 31
this.numSlackVariables == 7
this.numArtificialVariables == 7
this.epsilon == 1.0E-6
this.maxUlps == 10
dest[] elements one of { -1.0, 0.0 }
dest[] one of { [0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
size(src[]) == 31
size(dest[]) == 48
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau.copyArray(double[], double[]):::EXIT
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL == orig(org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL)
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString == orig(org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString)
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.columnLabels == orig(this.columnLabels)
this.columnLabels[] == orig(this.columnLabels[])
this.columnLabels.getClass().getName() == orig(this.columnLabels.getClass().getName())
this.tableau == orig(this.tableau)
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.maxUlps == orig(this.maxUlps)
src[] == orig(src[])
this.constraints has only one value
this.restrictToNonNegative == true
this.columnLabels[] == []
this.columnLabels[].getClass().getName() == []
this.tableau == null
this.numDecisionVariables == 31
this.numSlackVariables == 7
this.numArtificialVariables == 7
this.epsilon == 1.0E-6
this.maxUlps == 10
dest[] > orig(dest[]) (lexically)
dest[] >= orig(dest[]) (lexically)
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau.createTableau(boolean):::ENTER
this.constraints has only one value
this.restrictToNonNegative == true
this.columnLabels[] == []
this.columnLabels[].getClass().getName() == []
this.tableau == null
this.numDecisionVariables == 31
this.numSlackVariables == 7
this.numArtificialVariables == 7
this.epsilon == 1.0E-6
this.maxUlps == 10
maximize == false
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau.createTableau(boolean):::EXIT
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL == orig(org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL)
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString == orig(org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString)
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.columnLabels == orig(this.columnLabels)
this.columnLabels[] == orig(this.columnLabels[])
this.columnLabels.getClass().getName() == orig(this.columnLabels.getClass().getName())
this.tableau == orig(this.tableau)
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.maxUlps == orig(this.maxUlps)
this.constraints has only one value
this.restrictToNonNegative == true
this.columnLabels[] == []
this.columnLabels[].getClass().getName() == []
this.tableau == null
this.numDecisionVariables == 31
this.numSlackVariables == 7
this.numArtificialVariables == 7
this.epsilon == 1.0E-6
this.maxUlps == 10
return has only one value
return.getClass().getName() == org.apache.commons.math3.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau.divideRow(int, double):::ENTER
this.constraints has only one value
this.restrictToNonNegative == true
this.columnLabels[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
this.numDecisionVariables == 31
this.numSlackVariables == 7
this.epsilon == 1.0E-6
this.maxUlps == 10
size(this.columnLabels[]) one of { 40, 48 }
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau.divideRow(int, double):::EXIT
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL == orig(org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL)
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString == orig(org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString)
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.columnLabels == orig(this.columnLabels)
this.columnLabels[] == orig(this.columnLabels[])
this.columnLabels.getClass().getName() == orig(this.columnLabels.getClass().getName())
this.tableau == orig(this.tableau)
this.tableau.getClass().getName() == orig(this.tableau.getClass().getName())
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.maxUlps == orig(this.maxUlps)
this.constraints has only one value
this.restrictToNonNegative == true
this.columnLabels[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
this.numDecisionVariables == 31
this.numSlackVariables == 7
this.epsilon == 1.0E-6
this.maxUlps == 10
size(this.columnLabels[]) one of { 40, 48 }
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau.dropPhase1Objective():::ENTER
this.constraints has only one value
this.restrictToNonNegative == true
this.columnLabels[] contains no nulls and has only one value, of length 48
this.columnLabels[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.tableau has only one value
this.numDecisionVariables == 31
this.numSlackVariables == 7
this.numArtificialVariables == 7
this.epsilon == 1.0E-6
this.maxUlps == 10
size(this.columnLabels[]) == 48
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau.dropPhase1Objective():::EXIT374
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau.dropPhase1Objective():::EXIT
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL == orig(org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL)
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString == orig(org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString)
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.columnLabels == orig(this.columnLabels)
this.columnLabels.getClass().getName() == orig(this.columnLabels.getClass().getName())
this.tableau.getClass().getName() == orig(this.tableau.getClass().getName())
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.epsilon == orig(this.epsilon)
this.maxUlps == orig(this.maxUlps)
this.constraints has only one value
this.restrictToNonNegative == true
this.columnLabels[] contains no nulls and has only one value, of length 40
this.columnLabels[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.tableau has only one value
this.numDecisionVariables == 31
this.numSlackVariables == 7
this.numArtificialVariables == 0
this.epsilon == 1.0E-6
this.maxUlps == 10
size(this.columnLabels[]) == 40
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau.getArtificialVariableOffset():::ENTER
this.constraints has only one value
this.restrictToNonNegative == true
this.columnLabels[].getClass().getName() one of { [], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
this.numDecisionVariables == 31
this.numSlackVariables == 7
this.numArtificialVariables == 7
this.epsilon == 1.0E-6
this.maxUlps == 10
size(this.columnLabels[]) one of { 0, 48 }
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau.getArtificialVariableOffset():::EXIT
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL == orig(org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL)
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString == orig(org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString)
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.columnLabels == orig(this.columnLabels)
this.columnLabels[] == orig(this.columnLabels[])
this.columnLabels.getClass().getName() == orig(this.columnLabels.getClass().getName())
this.tableau == orig(this.tableau)
this.tableau.getClass().getName() == orig(this.tableau.getClass().getName())
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.maxUlps == orig(this.maxUlps)
this.constraints has only one value
this.restrictToNonNegative == true
this.columnLabels[].getClass().getName() one of { [], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
this.numDecisionVariables == 31
this.numSlackVariables == 7
this.numArtificialVariables == 7
this.epsilon == 1.0E-6
this.maxUlps == 10
return == 40
size(this.columnLabels[]) one of { 0, 48 }
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau.getBasicRow(int):::ENTER
this.constraints has only one value
this.restrictToNonNegative == true
this.columnLabels[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
this.numDecisionVariables == 31
this.numSlackVariables == 7
this.epsilon == 1.0E-6
this.maxUlps == 10
size(this.columnLabels[]) one of { 40, 48 }
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau.getBasicRow(int):::EXIT322
return == null
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau.getBasicRow(int):::EXIT325
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau.getBasicRow(int):::EXIT
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL == orig(org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL)
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString == orig(org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString)
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.columnLabels == orig(this.columnLabels)
this.columnLabels[] == orig(this.columnLabels[])
this.columnLabels.getClass().getName() == orig(this.columnLabels.getClass().getName())
this.tableau == orig(this.tableau)
this.tableau.getClass().getName() == orig(this.tableau.getClass().getName())
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.maxUlps == orig(this.maxUlps)
this.constraints has only one value
this.restrictToNonNegative == true
this.columnLabels[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
this.numDecisionVariables == 31
this.numSlackVariables == 7
this.epsilon == 1.0E-6
this.maxUlps == 10
size(this.columnLabels[]) one of { 40, 48 }
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau.getConstraintTypeCounts(org.apache.commons.math3.optimization.linear.Relationship):::ENTER
this.constraints has only one value
this.restrictToNonNegative == true
this.columnLabels[] == []
this.columnLabels[].getClass().getName() == []
this.tableau == null
this.numDecisionVariables == 31
this.numArtificialVariables == 0
this.epsilon == 1.0E-6
this.maxUlps == 10
relationship.stringValue.toString one of { "<=", "=", ">=" }
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau.getConstraintTypeCounts(org.apache.commons.math3.optimization.linear.Relationship):::EXIT
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL == orig(org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL)
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString == orig(org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString)
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.columnLabels == orig(this.columnLabels)
this.columnLabels[] == orig(this.columnLabels[])
this.columnLabels.getClass().getName() == orig(this.columnLabels.getClass().getName())
this.tableau == orig(this.tableau)
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.maxUlps == orig(this.maxUlps)
relationship.stringValue == orig(relationship.stringValue)
relationship.stringValue.toString == orig(relationship.stringValue.toString)
this.constraints has only one value
this.restrictToNonNegative == true
this.columnLabels[] == []
this.columnLabels[].getClass().getName() == []
this.tableau == null
this.numDecisionVariables == 31
this.numArtificialVariables == 0
this.epsilon == 1.0E-6
this.maxUlps == 10
relationship.stringValue.toString one of { "<=", "=", ">=" }
return one of { 0, 7 }
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau.getEntry(int, int):::ENTER
this.constraints has only one value
this.restrictToNonNegative == true
this.columnLabels[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
this.numDecisionVariables == 31
this.numSlackVariables == 7
this.epsilon == 1.0E-6
this.maxUlps == 10
row >= 0
column >= 1
size(this.columnLabels[]) one of { 40, 48 }
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau.getEntry(int, int):::EXIT
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL == orig(org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL)
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString == orig(org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString)
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.columnLabels == orig(this.columnLabels)
this.columnLabels[] == orig(this.columnLabels[])
this.columnLabels.getClass().getName() == orig(this.columnLabels.getClass().getName())
this.tableau == orig(this.tableau)
this.tableau.getClass().getName() == orig(this.tableau.getClass().getName())
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.maxUlps == orig(this.maxUlps)
this.constraints has only one value
this.restrictToNonNegative == true
this.columnLabels[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
this.numDecisionVariables == 31
this.numSlackVariables == 7
this.epsilon == 1.0E-6
this.maxUlps == 10
size(this.columnLabels[]) one of { 40, 48 }
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau.getHeight():::ENTER
this.constraints has only one value
this.restrictToNonNegative == true
this.columnLabels[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
this.numDecisionVariables == 31
this.numSlackVariables == 7
this.epsilon == 1.0E-6
this.maxUlps == 10
size(this.columnLabels[]) one of { 40, 48 }
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau.getHeight():::EXIT
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL == orig(org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL)
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString == orig(org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString)
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.columnLabels == orig(this.columnLabels)
this.columnLabels[] == orig(this.columnLabels[])
this.columnLabels.getClass().getName() == orig(this.columnLabels.getClass().getName())
this.tableau == orig(this.tableau)
this.tableau.getClass().getName() == orig(this.tableau.getClass().getName())
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.maxUlps == orig(this.maxUlps)
this.constraints has only one value
this.restrictToNonNegative == true
this.columnLabels[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
this.numDecisionVariables == 31
this.numSlackVariables == 7
this.epsilon == 1.0E-6
this.maxUlps == 10
return one of { 8, 9 }
size(this.columnLabels[]) one of { 40, 48 }
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau.getNumArtificialVariables():::ENTER
this.constraints has only one value
this.restrictToNonNegative == true
this.numDecisionVariables == 31
this.numSlackVariables == 7
this.epsilon == 1.0E-6
this.maxUlps == 10
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau.getNumArtificialVariables():::EXIT
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL == orig(org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL)
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString == orig(org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString)
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.columnLabels == orig(this.columnLabels)
this.columnLabels[] == orig(this.columnLabels[])
this.columnLabels.getClass().getName() == orig(this.columnLabels.getClass().getName())
this.tableau == orig(this.tableau)
this.tableau.getClass().getName() == orig(this.tableau.getClass().getName())
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.maxUlps == orig(this.maxUlps)
this.constraints has only one value
this.restrictToNonNegative == true
this.numDecisionVariables == 31
this.numSlackVariables == 7
this.epsilon == 1.0E-6
this.maxUlps == 10
return one of { 0, 7 }
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau.getNumObjectiveFunctions():::ENTER
this.constraints has only one value
this.restrictToNonNegative == true
this.numDecisionVariables == 31
this.numSlackVariables == 7
this.epsilon == 1.0E-6
this.maxUlps == 10
size(this.columnLabels[]) one of { 0, 40, 48 }
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau.getNumObjectiveFunctions():::EXIT
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL == orig(org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL)
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString == orig(org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString)
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.columnLabels == orig(this.columnLabels)
this.columnLabels[] == orig(this.columnLabels[])
this.columnLabels.getClass().getName() == orig(this.columnLabels.getClass().getName())
this.tableau == orig(this.tableau)
this.tableau.getClass().getName() == orig(this.tableau.getClass().getName())
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.maxUlps == orig(this.maxUlps)
this.constraints has only one value
this.restrictToNonNegative == true
this.numDecisionVariables == 31
this.numSlackVariables == 7
this.epsilon == 1.0E-6
this.maxUlps == 10
return one of { 1, 2 }
size(this.columnLabels[]) one of { 0, 40, 48 }
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau.getNumSlackVariables():::ENTER
this.constraints has only one value
this.restrictToNonNegative == true
this.tableau has only one value
this.numDecisionVariables == 31
this.numSlackVariables == 7
this.numArtificialVariables == 7
this.epsilon == 1.0E-6
this.maxUlps == 10
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau.getNumSlackVariables():::EXIT
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL == orig(org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL)
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString == orig(org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString)
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.columnLabels == orig(this.columnLabels)
this.columnLabels[] == orig(this.columnLabels[])
this.columnLabels.getClass().getName() == orig(this.columnLabels.getClass().getName())
this.tableau == orig(this.tableau)
this.tableau.getClass().getName() == orig(this.tableau.getClass().getName())
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.maxUlps == orig(this.maxUlps)
this.constraints has only one value
this.restrictToNonNegative == true
this.tableau has only one value
this.numDecisionVariables == 31
this.numSlackVariables == 7
this.numArtificialVariables == 7
this.epsilon == 1.0E-6
this.maxUlps == 10
return == 7
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau.getOriginalNumDecisionVariables():::ENTER
this.constraints has only one value
this.restrictToNonNegative == true
this.numDecisionVariables == 31
this.numSlackVariables == 7
this.epsilon == 1.0E-6
this.maxUlps == 10
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau.getOriginalNumDecisionVariables():::EXIT
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL == orig(org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL)
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString == orig(org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString)
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.columnLabels == orig(this.columnLabels)
this.columnLabels[] == orig(this.columnLabels[])
this.columnLabels.getClass().getName() == orig(this.columnLabels.getClass().getName())
this.tableau == orig(this.tableau)
this.tableau.getClass().getName() == orig(this.tableau.getClass().getName())
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.maxUlps == orig(this.maxUlps)
this.constraints has only one value
this.restrictToNonNegative == true
this.numDecisionVariables == 31
this.numSlackVariables == 7
this.epsilon == 1.0E-6
this.maxUlps == 10
return == 31
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau.getRhsOffset():::ENTER
this.constraints has only one value
this.restrictToNonNegative == true
this.columnLabels[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
this.numDecisionVariables == 31
this.numSlackVariables == 7
this.epsilon == 1.0E-6
this.maxUlps == 10
size(this.columnLabels[]) one of { 40, 48 }
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau.getRhsOffset():::EXIT
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL == orig(org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL)
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString == orig(org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString)
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.columnLabels == orig(this.columnLabels)
this.columnLabels[] == orig(this.columnLabels[])
this.columnLabels.getClass().getName() == orig(this.columnLabels.getClass().getName())
this.tableau == orig(this.tableau)
this.tableau.getClass().getName() == orig(this.tableau.getClass().getName())
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.maxUlps == orig(this.maxUlps)
this.constraints has only one value
this.restrictToNonNegative == true
this.columnLabels[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
this.numDecisionVariables == 31
this.numSlackVariables == 7
this.epsilon == 1.0E-6
this.maxUlps == 10
return one of { 39, 47 }
size(this.columnLabels[]) one of { 40, 48 }
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau.getSlackVariableOffset():::ENTER
this.constraints has only one value
this.restrictToNonNegative == true
this.columnLabels[] == []
this.columnLabels[].getClass().getName() == []
this.tableau == null
this.numDecisionVariables == 31
this.numSlackVariables == 7
this.numArtificialVariables == 7
this.epsilon == 1.0E-6
this.maxUlps == 10
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau.getSlackVariableOffset():::EXIT
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL == orig(org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL)
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString == orig(org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString)
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.columnLabels == orig(this.columnLabels)
this.columnLabels[] == orig(this.columnLabels[])
this.columnLabels.getClass().getName() == orig(this.columnLabels.getClass().getName())
this.tableau == orig(this.tableau)
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.maxUlps == orig(this.maxUlps)
this.constraints has only one value
this.restrictToNonNegative == true
this.columnLabels[] == []
this.columnLabels[].getClass().getName() == []
this.tableau == null
this.numDecisionVariables == 31
this.numSlackVariables == 7
this.numArtificialVariables == 7
this.epsilon == 1.0E-6
this.maxUlps == 10
return == 33
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau.getSolution():::ENTER
this.constraints has only one value
this.restrictToNonNegative == true
this.columnLabels[] contains no nulls and has only one value, of length 40
this.columnLabels[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.tableau has only one value
this.numDecisionVariables == 31
this.numSlackVariables == 7
this.numArtificialVariables == 0
this.epsilon == 1.0E-6
this.maxUlps == 10
size(this.columnLabels[]) == 40
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau.getSolution():::EXIT
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL == orig(org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL)
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString == orig(org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString)
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.columnLabels == orig(this.columnLabels)
this.columnLabels[] == orig(this.columnLabels[])
this.columnLabels.getClass().getName() == orig(this.columnLabels.getClass().getName())
this.tableau == orig(this.tableau)
this.tableau.getClass().getName() == orig(this.tableau.getClass().getName())
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.maxUlps == orig(this.maxUlps)
this.constraints has only one value
this.restrictToNonNegative == true
this.columnLabels[] contains no nulls and has only one value, of length 40
this.columnLabels[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.tableau has only one value
this.numDecisionVariables == 31
this.numSlackVariables == 7
this.numArtificialVariables == 0
this.epsilon == 1.0E-6
this.maxUlps == 10
return has only one value
return.key has only one value
return.key.getClass().getName() == double[].class
return.value has only one value
return.value.getClass().getName() == java.lang.Double.class
size(this.columnLabels[]) == 40
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau.getWidth():::ENTER
this.constraints has only one value
this.restrictToNonNegative == true
this.columnLabels[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
this.numDecisionVariables == 31
this.numSlackVariables == 7
this.epsilon == 1.0E-6
this.maxUlps == 10
size(this.columnLabels[]) one of { 40, 48 }
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau.getWidth():::EXIT
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL == orig(org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL)
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString == orig(org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString)
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.columnLabels == orig(this.columnLabels)
this.columnLabels[] == orig(this.columnLabels[])
this.columnLabels.getClass().getName() == orig(this.columnLabels.getClass().getName())
this.tableau == orig(this.tableau)
this.tableau.getClass().getName() == orig(this.tableau.getClass().getName())
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.maxUlps == orig(this.maxUlps)
this.constraints has only one value
this.restrictToNonNegative == true
this.columnLabels[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
this.numDecisionVariables == 31
this.numSlackVariables == 7
this.epsilon == 1.0E-6
this.maxUlps == 10
return one of { 40, 48 }
size(this.columnLabels[]) one of { 40, 48 }
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau.initializeColumnLabels():::ENTER
this.constraints has only one value
this.restrictToNonNegative == true
this.columnLabels[] == []
this.columnLabels[].getClass().getName() == []
this.tableau has only one value
this.numDecisionVariables == 31
this.numSlackVariables == 7
this.numArtificialVariables == 7
this.epsilon == 1.0E-6
this.maxUlps == 10
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau.initializeColumnLabels():::EXIT
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL == orig(org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL)
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString == orig(org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString)
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.columnLabels == orig(this.columnLabels)
this.columnLabels.getClass().getName() == orig(this.columnLabels.getClass().getName())
this.tableau == orig(this.tableau)
this.tableau.getClass().getName() == orig(this.tableau.getClass().getName())
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.maxUlps == orig(this.maxUlps)
this.constraints has only one value
this.restrictToNonNegative == true
this.columnLabels[] contains no nulls and has only one value, of length 48
this.columnLabels[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.tableau has only one value
this.numDecisionVariables == 31
this.numSlackVariables == 7
this.numArtificialVariables == 7
this.epsilon == 1.0E-6
this.maxUlps == 10
size(this.columnLabels[]) == 48
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau.isOptimal():::ENTER
this.constraints has only one value
this.restrictToNonNegative == true
this.columnLabels[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
this.numDecisionVariables == 31
this.numSlackVariables == 7
this.epsilon == 1.0E-6
this.maxUlps == 10
size(this.columnLabels[]) one of { 40, 48 }
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau.isOptimal():::EXIT392
return == false
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau.isOptimal():::EXIT392;condition="not(return == true)"
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau.isOptimal():::EXIT395
return == true
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau.isOptimal():::EXIT395;condition="return == true"
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau.isOptimal():::EXIT
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL == orig(org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL)
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString == orig(org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString)
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.columnLabels == orig(this.columnLabels)
this.columnLabels[] == orig(this.columnLabels[])
this.columnLabels.getClass().getName() == orig(this.columnLabels.getClass().getName())
this.tableau == orig(this.tableau)
this.tableau.getClass().getName() == orig(this.tableau.getClass().getName())
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.maxUlps == orig(this.maxUlps)
this.constraints has only one value
this.restrictToNonNegative == true
this.columnLabels[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
this.numDecisionVariables == 31
this.numSlackVariables == 7
this.epsilon == 1.0E-6
this.maxUlps == 10
size(this.columnLabels[]) one of { 40, 48 }
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau.isOptimal():::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau.isOptimal():::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau.normalize(org.apache.commons.math3.optimization.linear.LinearConstraint):::ENTER
this.constraints == null
this.restrictToNonNegative == false
this.columnLabels[] == []
this.columnLabels[].getClass().getName() == []
this.tableau == null
this.numDecisionVariables == 0
this.numSlackVariables == 0
this.numArtificialVariables == 0
this.epsilon == 0.0
this.maxUlps == 0
constraint.coefficients.getClass().getName() == org.apache.commons.math3.linear.ArrayRealVector.class
constraint.relationship has only one value
constraint.relationship.stringValue has only one value
constraint.relationship.stringValue.toString == ">="
constraint.value >= 0.0
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau.normalize(org.apache.commons.math3.optimization.linear.LinearConstraint):::EXIT270
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau.normalize(org.apache.commons.math3.optimization.linear.LinearConstraint):::EXIT
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL == orig(org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL)
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString == orig(org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString)
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.columnLabels == orig(this.columnLabels)
this.columnLabels[] == orig(this.columnLabels[])
this.columnLabels.getClass().getName() == orig(this.columnLabels.getClass().getName())
this.tableau == orig(this.tableau)
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.maxUlps == orig(this.maxUlps)
constraint.coefficients == orig(constraint.coefficients)
constraint.coefficients.getClass().getName() == orig(constraint.coefficients.getClass().getName())
constraint.relationship == orig(constraint.relationship)
constraint.relationship.stringValue == orig(constraint.relationship.stringValue)
constraint.relationship.stringValue.toString == orig(constraint.relationship.stringValue.toString)
constraint.value == orig(constraint.value)
this.constraints == null
this.restrictToNonNegative == false
this.columnLabels[] == []
this.columnLabels[].getClass().getName() == []
this.tableau == null
this.numDecisionVariables == 0
this.numSlackVariables == 0
this.numArtificialVariables == 0
this.epsilon == 0.0
this.maxUlps == 0
constraint.coefficients.getClass().getName() == org.apache.commons.math3.linear.ArrayRealVector.class
constraint.relationship has only one value
constraint.relationship.stringValue has only one value
constraint.relationship.stringValue.toString == ">="
constraint.value >= 0.0
return.coefficients.getClass().getName() == org.apache.commons.math3.linear.ArrayRealVector.class
return.relationship has only one value
return.relationship.stringValue has only one value
return.relationship.stringValue.toString == ">="
return.value >= 0.0
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau.normalizeConstraints(java.util.Collection):::ENTER
this.constraints == null
this.restrictToNonNegative == false
this.columnLabels[] == []
this.columnLabels[].getClass().getName() == []
this.tableau == null
this.numDecisionVariables == 0
this.numSlackVariables == 0
this.numArtificialVariables == 0
this.epsilon == 0.0
this.maxUlps == 0
originalConstraints has only one value
originalConstraints.getClass().getName() == java.util.Collections$UnmodifiableCollection.class
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau.normalizeConstraints(java.util.Collection):::EXIT
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL == orig(org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL)
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString == orig(org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString)
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.columnLabels == orig(this.columnLabels)
this.columnLabels[] == orig(this.columnLabels[])
this.columnLabels.getClass().getName() == orig(this.columnLabels.getClass().getName())
this.tableau == orig(this.tableau)
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.maxUlps == orig(this.maxUlps)
this.constraints == null
this.restrictToNonNegative == false
this.columnLabels[] == []
this.columnLabels[].getClass().getName() == []
this.tableau == null
this.numDecisionVariables == 0
this.numSlackVariables == 0
this.numArtificialVariables == 0
this.epsilon == 0.0
this.maxUlps == 0
return has only one value
return[] contains no nulls and has only one value, of length 7
return[].getClass().getName() == [org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint, org.apache.commons.math3.optimization.linear.LinearConstraint]
return[].getClass().getName() elements == org.apache.commons.math3.optimization.linear.LinearConstraint.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 7
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau.subtractRow(int, int, double):::ENTER
this.constraints has only one value
this.restrictToNonNegative == true
this.columnLabels[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
this.numDecisionVariables == 31
this.numSlackVariables == 7
this.epsilon == 1.0E-6
this.maxUlps == 10
minuendRow >= 0
subtrahendRow >= 2
size(this.columnLabels[]) one of { 40, 48 }
===========================================================================
org.apache.commons.math3.optimization.linear.SimplexTableau.subtractRow(int, int, double):::EXIT
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL == orig(org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL)
org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString == orig(org.apache.commons.math3.optimization.linear.SimplexTableau.NEGATIVE_VAR_COLUMN_LABEL.toString)
this.f == orig(this.f)
this.f.coefficients == orig(this.f.coefficients)
this.f.coefficients.getClass().getName() == orig(this.f.coefficients.getClass().getName())
this.f.constantTerm == orig(this.f.constantTerm)
this.constraints == orig(this.constraints)
this.constraints[] == orig(this.constraints[])
this.constraints.getClass().getName() == orig(this.constraints.getClass().getName())
this.restrictToNonNegative == orig(this.restrictToNonNegative)
this.columnLabels == orig(this.columnLabels)
this.columnLabels[] == orig(this.columnLabels[])
this.columnLabels.getClass().getName() == orig(this.columnLabels.getClass().getName())
this.tableau == orig(this.tableau)
this.tableau.getClass().getName() == orig(this.tableau.getClass().getName())
this.numDecisionVariables == orig(this.numDecisionVariables)
this.numSlackVariables == orig(this.numSlackVariables)
this.numArtificialVariables == orig(this.numArtificialVariables)
this.epsilon == orig(this.epsilon)
this.maxUlps == orig(this.maxUlps)
this.constraints has only one value
this.restrictToNonNegative == true
this.columnLabels[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
this.numDecisionVariables == 31
this.numSlackVariables == 7
this.epsilon == 1.0E-6
this.maxUlps == 10
size(this.columnLabels[]) one of { 40, 48 }
===========================================================================
org.apache.commons.math3.util.CompositeFormat.getDefaultNumberFormat():::EXIT
return has only one value
return.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math3.util.CompositeFormat.getDefaultNumberFormat(java.util.Locale):::ENTER
locale has only one value
===========================================================================
org.apache.commons.math3.util.CompositeFormat.getDefaultNumberFormat(java.util.Locale):::EXIT
return.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math3.util.MathUtils:::CLASS
===========================================================================
org.apache.commons.math3.util.MathUtils.checkNotNull(java.lang.Object):::ENTER
o has only one value
o.getClass().getName() == double[][].class
===========================================================================
org.apache.commons.math3.util.MathUtils.checkNotNull(java.lang.Object):::EXIT
===========================================================================
org.apache.commons.math3.util.Pair:::OBJECT
this has only one value
this.key has only one value
this.key.getClass().getName() == double[].class
this.value has only one value
this.value.getClass().getName() == java.lang.Double.class
===========================================================================
org.apache.commons.math3.util.Pair.Pair(java.lang.Object, java.lang.Object):::ENTER
k has only one value
k.getClass().getName() == double[].class
v has only one value
v.getClass().getName() == java.lang.Double.class
===========================================================================
org.apache.commons.math3.util.Pair.Pair(java.lang.Object, java.lang.Object):::EXIT
===========================================================================
org.apache.commons.math3.util.Pair.getKey():::ENTER
===========================================================================
org.apache.commons.math3.util.Pair.getKey():::EXIT
this.key == orig(this.key)
this.key.getClass().getName() == orig(this.key.getClass().getName())
this.value == orig(this.value)
this.value.getClass().getName() == orig(this.value.getClass().getName())
return has only one value
return.getClass().getName() == double[].class
===========================================================================
org.apache.commons.math3.util.Pair.getValue():::ENTER
===========================================================================
org.apache.commons.math3.util.Pair.getValue():::EXIT
this.key == orig(this.key)
this.key.getClass().getName() == orig(this.key.getClass().getName())
this.value == orig(this.value)
this.value.getClass().getName() == orig(this.value.getClass().getName())
return has only one value
return.getClass().getName() == java.lang.Double.class
===========================================================================
org.apache.commons.math3.util.Precision:::CLASS
===========================================================================
org.apache.commons.math3.util.Precision.compareTo(double, double, double):::ENTER
y >= 0.0
eps == 1.0E-6
===========================================================================
org.apache.commons.math3.util.Precision.compareTo(double, double, double):::EXIT89
return == 0
orig(x) >= 0.0
===========================================================================
org.apache.commons.math3.util.Precision.compareTo(double, double, double):::EXIT91
return == -1
orig(y) == 0.0
===========================================================================
org.apache.commons.math3.util.Precision.compareTo(double, double, double):::EXIT93
return == 1
orig(y) == 0.0
===========================================================================
org.apache.commons.math3.util.Precision.compareTo(double, double, double):::EXIT
return one of { -1, 0, 1 }
===========================================================================
org.apache.commons.math3.util.Precision.compareTo(double, double, int):::ENTER
y == 0.0
maxUlps == 10
===========================================================================
org.apache.commons.math3.util.Precision.compareTo(double, double, int):::EXIT115
return == 0
orig(x) == 0.0
===========================================================================
org.apache.commons.math3.util.Precision.compareTo(double, double, int):::EXIT117
return == -1
===========================================================================
org.apache.commons.math3.util.Precision.compareTo(double, double, int):::EXIT119
return == 1
===========================================================================
org.apache.commons.math3.util.Precision.compareTo(double, double, int):::EXIT
return one of { -1, 0, 1 }
===========================================================================
org.apache.commons.math3.util.Precision.equals(double, double, double):::ENTER
y >= 0.0
eps == 1.0E-6
===========================================================================
org.apache.commons.math3.util.Precision.equals(double, double, double):::EXIT
(return == false)  ==>  (orig(y) == 0.0)
(return == true)  ==>  (orig(x) >= 0.0)
===========================================================================
org.apache.commons.math3.util.Precision.equals(double, double, double):::EXIT;condition="return == true"
return == true
orig(x) >= 0.0
===========================================================================
org.apache.commons.math3.util.Precision.equals(double, double, double):::EXIT;condition="not(return == true)"
return == false
orig(y) == 0.0
===========================================================================
org.apache.commons.math3.util.Precision.equals(double, double, int):::ENTER
y >= 0.0
maxUlps one of { 1, 10 }
===========================================================================
org.apache.commons.math3.util.Precision.equals(double, double, int):::EXIT
(return == false)  ==>  (orig(y) one of { 0.0, 1.0 })
(return == true)  ==>  (orig(x) >= 0.0)
===========================================================================
org.apache.commons.math3.util.Precision.equals(double, double, int):::EXIT;condition="return == true"
return == true
orig(x) >= 0.0
===========================================================================
org.apache.commons.math3.util.Precision.equals(double, double, int):::EXIT;condition="not(return == true)"
return == false
orig(y) one of { 0.0, 1.0 }
