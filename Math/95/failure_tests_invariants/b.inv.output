===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution$1:::OBJECT
this has only one value
this.val$p == 0.4959706533253018
org.apache.commons.math.distribution.AbstractContinuousDistribution.this has only one value
org.apache.commons.math.distribution.AbstractContinuousDistribution.this.getClass().getName() == org.apache.commons.math.distribution.FDistributionImpl.class
===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution$1.(org.apache.commons.math.distribution.AbstractContinuousDistribution, double):::ENTER
org.apache.commons.math.distribution.AbstractContinuousDistribution.this has only one value
org.apache.commons.math.distribution.AbstractContinuousDistribution.this.getClass().getName() == org.apache.commons.math.distribution.FDistributionImpl.class
$hidden$2 == 0.4959706533253018
===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution$1.(org.apache.commons.math.distribution.AbstractContinuousDistribution, double):::EXIT
org.apache.commons.math.distribution.AbstractContinuousDistribution.this == orig(org.apache.commons.math.distribution.AbstractContinuousDistribution.this)
org.apache.commons.math.distribution.AbstractContinuousDistribution.this.getClass().getName() == orig(org.apache.commons.math.distribution.AbstractContinuousDistribution.this.getClass().getName())
===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution:::CLASS
===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution:::OBJECT
this.getClass().getName() == org.apache.commons.math.distribution.FDistributionImpl.class
===========================================================================
org.apache.commons.math.distribution.AbstractContinuousDistribution.AbstractContinuousDistribution():::EXIT
===========================================================================
org.apache.commons.math.distribution.AbstractDistribution:::CLASS
===========================================================================
org.apache.commons.math.distribution.AbstractDistribution:::OBJECT
this.getClass().getName() == org.apache.commons.math.distribution.FDistributionImpl.class
===========================================================================
org.apache.commons.math.distribution.AbstractDistribution.AbstractDistribution():::EXIT
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:::OBJECT
this.getClass().getName() == org.apache.commons.math.distribution.FDistributionTest.class
this.distribution.getClass().getName() == org.apache.commons.math.distribution.FDistributionImpl.class
this.tolerance one of { 4.0E-6, 1.0E-4 }
this.cumulativeTestPoints[] == [0.03468084, 0.09370091, 0.1433137, 0.2020084, 0.2937283, 20.80266, 8.745895, 5.987565, 4.387374, 3.107512]
this.cumulativeTestPoints[] elements >= 0.03468084
this.cumulativeTestValues[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestPoints[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestValues[] == [0.03468084, 0.09370091, 0.1433137, 0.2020084, 0.2937283, 20.80266, 8.745895, 5.987565, 4.387374, 3.107512]
this.inverseCumulativeTestValues[] elements >= 0.03468084
size(this.cumulativeTestPoints[]) == 10
size(this.cumulativeTestValues[]) == 10
size(this.inverseCumulativeTestPoints[]) == 10
size(this.inverseCumulativeTestValues[]) == 10
this.getClass().getName() != this.distribution.getClass().getName()
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.ContinuousDistributionAbstractTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.ContinuousDistributionAbstractTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
this.distribution == null
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.makeInverseCumulativeTestPoints():::ENTER
this has only one value
this.distribution has only one value
this.tolerance == 1.0E-4
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.makeInverseCumulativeTestPoints():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.distribution has only one value
this.tolerance == 1.0E-4
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
return has only one value
return[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
size(return[]) == 10
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.makeInverseCumulativeTestValues():::ENTER
this has only one value
this.distribution has only one value
this.tolerance == 1.0E-4
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.makeInverseCumulativeTestValues():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.distribution has only one value
this.tolerance == 1.0E-4
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues == null
return has only one value
return[] == [0.03468084, 0.09370091, 0.1433137, 0.2020084, 0.2937283, 20.80266, 8.745895, 5.987565, 4.387374, 3.107512]
size(return[]) == 10
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setTolerance(double):::ENTER
this has only one value
this.distribution has only one value
this.tolerance == 1.0E-4
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
tolerance == 4.0E-6
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setTolerance(double):::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.inverseCumulativeTestValues[] == orig(this.inverseCumulativeTestValues[])
this.distribution has only one value
this.tolerance == 4.0E-6
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setUp():::ENTER
this has only one value
this.distribution == null
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setUp():::EXIT
this.tolerance == orig(this.tolerance)
this.distribution has only one value
this.tolerance == 1.0E-4
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.tearDown():::ENTER
this has only one value
this.distribution has only one value
this.tolerance == 4.0E-6
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
===========================================================================
org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.tearDown():::EXIT
this.tolerance == orig(this.tolerance)
this.distribution == null
this.tolerance == 4.0E-6
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl:::CLASS
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl:::OBJECT
this.numeratorDegreesOfFreedom one of { 0.0, 1.0, 5.0 }
this.denominatorDegreesOfFreedom one of { 0.0, 1.0, 6.0 }
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.FDistributionImpl(double, double):::ENTER
numeratorDegreesOfFreedom one of { 1.0, 5.0 }
denominatorDegreesOfFreedom one of { 1.0, 6.0 }
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.FDistributionImpl(double, double):::EXIT
this.numeratorDegreesOfFreedom == orig(numeratorDegreesOfFreedom)
this.denominatorDegreesOfFreedom == orig(denominatorDegreesOfFreedom)
this.numeratorDegreesOfFreedom one of { 1.0, 5.0 }
this.denominatorDegreesOfFreedom one of { 1.0, 6.0 }
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.cumulativeProbability(double):::ENTER
this has only one value
this.numeratorDegreesOfFreedom == 1.0
this.denominatorDegreesOfFreedom == 1.0
x == 0.975
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.cumulativeProbability(double):::EXIT
this.numeratorDegreesOfFreedom == orig(this.numeratorDegreesOfFreedom)
this.denominatorDegreesOfFreedom == orig(this.denominatorDegreesOfFreedom)
this.numeratorDegreesOfFreedom == 1.0
this.denominatorDegreesOfFreedom == 1.0
return == 0.4959706533253018
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.getDenominatorDegreesOfFreedom():::ENTER
this has only one value
this.numeratorDegreesOfFreedom == 1.0
this.denominatorDegreesOfFreedom == 1.0
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.getDenominatorDegreesOfFreedom():::EXIT
this.numeratorDegreesOfFreedom == orig(this.numeratorDegreesOfFreedom)
this.denominatorDegreesOfFreedom == orig(this.denominatorDegreesOfFreedom)
this.numeratorDegreesOfFreedom == 1.0
this.denominatorDegreesOfFreedom == 1.0
return == 1.0
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.getDomainLowerBound(double):::ENTER
this has only one value
this.numeratorDegreesOfFreedom == 1.0
this.denominatorDegreesOfFreedom == 1.0
p == 0.4959706533253018
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.getDomainLowerBound(double):::EXIT
this.numeratorDegreesOfFreedom == orig(this.numeratorDegreesOfFreedom)
this.denominatorDegreesOfFreedom == orig(this.denominatorDegreesOfFreedom)
this.numeratorDegreesOfFreedom == 1.0
this.denominatorDegreesOfFreedom == 1.0
return == 0.0
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.getDomainUpperBound(double):::ENTER
this has only one value
this.numeratorDegreesOfFreedom == 1.0
this.denominatorDegreesOfFreedom == 1.0
p == 0.4959706533253018
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.getDomainUpperBound(double):::EXIT
this.numeratorDegreesOfFreedom == orig(this.numeratorDegreesOfFreedom)
this.denominatorDegreesOfFreedom == orig(this.denominatorDegreesOfFreedom)
this.numeratorDegreesOfFreedom == 1.0
this.denominatorDegreesOfFreedom == 1.0
return == 1.7976931348623157E308
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.getInitialDomain(double):::ENTER
this has only one value
this.numeratorDegreesOfFreedom == 1.0
this.denominatorDegreesOfFreedom == 1.0
p == 0.4959706533253018
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.getInitialDomain(double):::EXIT
this.numeratorDegreesOfFreedom == orig(this.numeratorDegreesOfFreedom)
this.denominatorDegreesOfFreedom == orig(this.denominatorDegreesOfFreedom)
this.numeratorDegreesOfFreedom == 1.0
this.denominatorDegreesOfFreedom == 1.0
return == -1.0
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.getNumeratorDegreesOfFreedom():::ENTER
this has only one value
this.numeratorDegreesOfFreedom == 1.0
this.denominatorDegreesOfFreedom == 1.0
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.getNumeratorDegreesOfFreedom():::EXIT
this.numeratorDegreesOfFreedom == orig(this.numeratorDegreesOfFreedom)
this.denominatorDegreesOfFreedom == orig(this.denominatorDegreesOfFreedom)
this.numeratorDegreesOfFreedom == 1.0
this.denominatorDegreesOfFreedom == 1.0
return == 1.0
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.setDenominatorDegreesOfFreedom(double):::ENTER
this.numeratorDegreesOfFreedom one of { 1.0, 5.0 }
this.denominatorDegreesOfFreedom == 0.0
degreesOfFreedom one of { 1.0, 6.0 }
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.setDenominatorDegreesOfFreedom(double):::EXIT
this.numeratorDegreesOfFreedom == orig(this.numeratorDegreesOfFreedom)
this.denominatorDegreesOfFreedom == orig(degreesOfFreedom)
this.numeratorDegreesOfFreedom one of { 1.0, 5.0 }
this.denominatorDegreesOfFreedom one of { 1.0, 6.0 }
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.setNumeratorDegreesOfFreedom(double):::ENTER
this.numeratorDegreesOfFreedom == 0.0
this.denominatorDegreesOfFreedom == 0.0
degreesOfFreedom one of { 1.0, 5.0 }
===========================================================================
org.apache.commons.math.distribution.FDistributionImpl.setNumeratorDegreesOfFreedom(double):::EXIT
this.numeratorDegreesOfFreedom == orig(degreesOfFreedom)
this.denominatorDegreesOfFreedom == orig(this.denominatorDegreesOfFreedom)
this.numeratorDegreesOfFreedom one of { 1.0, 5.0 }
this.denominatorDegreesOfFreedom == 0.0
===========================================================================
org.apache.commons.math.distribution.FDistributionTest:::OBJECT
this.distribution.getClass().getName() == org.apache.commons.math.distribution.FDistributionImpl.class
this.tolerance one of { 4.0E-6, 1.0E-4 }
this.cumulativeTestPoints[] == [0.03468084, 0.09370091, 0.1433137, 0.2020084, 0.2937283, 20.80266, 8.745895, 5.987565, 4.387374, 3.107512]
this.cumulativeTestPoints[] elements >= 0.03468084
this.cumulativeTestValues[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestPoints[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
this.inverseCumulativeTestValues[] == [0.03468084, 0.09370091, 0.1433137, 0.2020084, 0.2937283, 20.80266, 8.745895, 5.987565, 4.387374, 3.107512]
size(this.cumulativeTestPoints[]) == 10
size(this.cumulativeTestValues[]) == 10
size(this.inverseCumulativeTestPoints[]) == 10
size(this.inverseCumulativeTestValues[]) == 10
===========================================================================
org.apache.commons.math.distribution.FDistributionTest.FDistributionTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.distribution.FDistributionTest.FDistributionTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
this.distribution == null
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.FDistributionTest.makeCumulativeTestPoints():::ENTER
this has only one value
this.distribution has only one value
this.tolerance == 1.0E-4
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.FDistributionTest.makeCumulativeTestPoints():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestPoints[] == orig(this.inverseCumulativeTestPoints[])
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.distribution has only one value
this.tolerance == 1.0E-4
this.inverseCumulativeTestValues == null
return[] == [0.03468084, 0.09370091, 0.1433137, 0.2020084, 0.2937283, 20.80266, 8.745895, 5.987565, 4.387374, 3.107512]
size(return[]) == 10
===========================================================================
org.apache.commons.math.distribution.FDistributionTest.makeCumulativeTestValues():::ENTER
this has only one value
this.distribution has only one value
this.tolerance == 1.0E-4
this.cumulativeTestPoints has only one value
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.FDistributionTest.makeCumulativeTestValues():::EXIT
this.distribution == orig(this.distribution)
this.distribution.getClass().getName() == orig(this.distribution.getClass().getName())
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestPoints[] == orig(this.cumulativeTestPoints[])
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.cumulativeTestValues[] == orig(this.cumulativeTestValues[])
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.distribution has only one value
this.tolerance == 1.0E-4
this.cumulativeTestPoints has only one value
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
return[] == [0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.99, 0.975, 0.95, 0.9]
size(return[]) == 10
===========================================================================
org.apache.commons.math.distribution.FDistributionTest.makeDistribution():::ENTER
this has only one value
this.distribution == null
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.FDistributionTest.makeDistribution():::EXIT
this.distribution == orig(this.distribution)
this.tolerance == orig(this.tolerance)
this.cumulativeTestPoints == orig(this.cumulativeTestPoints)
this.cumulativeTestValues == orig(this.cumulativeTestValues)
this.inverseCumulativeTestPoints == orig(this.inverseCumulativeTestPoints)
this.inverseCumulativeTestValues == orig(this.inverseCumulativeTestValues)
this.distribution == null
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
return has only one value
return.getClass().getName() == org.apache.commons.math.distribution.FDistributionImpl.class
===========================================================================
org.apache.commons.math.distribution.FDistributionTest.setUp():::ENTER
this has only one value
this.distribution == null
this.tolerance == 1.0E-4
this.cumulativeTestPoints == null
this.cumulativeTestValues == null
this.inverseCumulativeTestPoints == null
this.inverseCumulativeTestValues == null
===========================================================================
org.apache.commons.math.distribution.FDistributionTest.setUp():::EXIT
this.distribution has only one value
this.tolerance == 4.0E-6
this.cumulativeTestPoints has only one value
this.cumulativeTestValues has only one value
this.inverseCumulativeTestPoints has only one value
this.inverseCumulativeTestValues has only one value
===========================================================================
org.apache.commons.math.special.Beta$1:::CLASS
===========================================================================
org.apache.commons.math.special.Beta$1:::OBJECT
this has only one value
this.val$b == 0.5
this.val$a == 0.5
===========================================================================
org.apache.commons.math.special.Beta$1.(double, double):::ENTER
$hidden$1 == 0.5
$hidden$3 == 0.5
===========================================================================
org.apache.commons.math.special.Beta$1.(double, double):::EXIT
===========================================================================
org.apache.commons.math.special.Beta$1.getA(int, double):::ENTER
x == 0.49367088607594933
===========================================================================
org.apache.commons.math.special.Beta$1.getA(int, double):::EXIT
this.val$b == orig(this.val$b)
this.val$a == orig(this.val$a)
return == 1.0
===========================================================================
org.apache.commons.math.special.Beta$1.getB(int, double):::ENTER
x == 0.49367088607594933
===========================================================================
org.apache.commons.math.special.Beta$1.getB(int, double):::EXIT
this.val$b == orig(this.val$b)
this.val$a == orig(this.val$a)
===========================================================================
org.apache.commons.math.special.Beta:::CLASS
===========================================================================
org.apache.commons.math.special.Beta.logBeta(double, double, double, int):::ENTER
a == 0.5
b == 0.5
epsilon == 1.0E-14
maxIterations == 2147483647
===========================================================================
org.apache.commons.math.special.Beta.logBeta(double, double, double, int):::EXIT
return == 1.1447298858494004
===========================================================================
org.apache.commons.math.special.Beta.regularizedBeta(double, double, double):::ENTER
x == 0.49367088607594933
a == 0.5
b == 0.5
===========================================================================
org.apache.commons.math.special.Beta.regularizedBeta(double, double, double):::EXIT
return == 0.4959706533253018
===========================================================================
org.apache.commons.math.special.Beta.regularizedBeta(double, double, double, double, int):::ENTER
x == 0.49367088607594933
a == 0.5
b == 0.5
epsilon == 1.0E-14
maxIterations == 2147483647
===========================================================================
org.apache.commons.math.special.Beta.regularizedBeta(double, double, double, double, int):::EXIT
return == 0.4959706533253018
===========================================================================
org.apache.commons.math.special.Gamma:::CLASS
org.apache.commons.math.special.Gamma.lanczos has only one value
org.apache.commons.math.special.Gamma.lanczos[] == [0.9999999999999971, 57.15623566586292, -59.59796035547549, 14.136097974741746, -0.4919138160976202, 3.399464998481189E-5, 4.652362892704858E-5, -9.837447530487956E-5, 1.580887032249125E-4, -2.1026444172410488E-4, 2.1743961811521265E-4, -1.643181065367639E-4, 8.441822398385275E-5, -2.6190838401581408E-5, 3.6899182659531625E-6]
org.apache.commons.math.special.Gamma.HALF_LOG_2_PI == 0.9189385332046727
size(org.apache.commons.math.special.Gamma.lanczos[]) == 15
===========================================================================
org.apache.commons.math.special.Gamma.logGamma(double):::ENTER
x one of { 0.5, 1.0 }
===========================================================================
org.apache.commons.math.special.Gamma.logGamma(double):::EXIT
org.apache.commons.math.special.Gamma.lanczos == orig(org.apache.commons.math.special.Gamma.lanczos)
org.apache.commons.math.special.Gamma.lanczos[] == orig(org.apache.commons.math.special.Gamma.lanczos[])
org.apache.commons.math.special.Gamma.HALF_LOG_2_PI == orig(org.apache.commons.math.special.Gamma.HALF_LOG_2_PI)
return one of { -4.440892098500626E-16, 0.5723649429247 }
===========================================================================
org.apache.commons.math.util.ContinuedFraction:::CLASS
===========================================================================
org.apache.commons.math.util.ContinuedFraction:::OBJECT
this has only one value
this.getClass().getName() == org.apache.commons.math.special.Beta$1.class
===========================================================================
org.apache.commons.math.util.ContinuedFraction.ContinuedFraction():::EXIT
===========================================================================
org.apache.commons.math.util.ContinuedFraction.evaluate(double, double, int):::ENTER
x == 0.49367088607594933
epsilon == 1.0E-14
maxIterations == 2147483647
===========================================================================
org.apache.commons.math.util.ContinuedFraction.evaluate(double, double, int):::EXIT
return == 0.6417403560374456
