===========================================================================
org.apache.commons.math.ConvergenceException:::CLASS
===========================================================================
org.apache.commons.math.ConvergenceException:::OBJECT
this.pattern.toString one of { "Maximal number of evaluations ({0}) exceeded", "Maximal number of iterations ({0}) exceeded" }
this.arguments.getClass().getName() == java.lang.Object[].class
this.arguments[].getClass().getName() == [java.lang.Integer]
this.arguments[].getClass().getName() elements == java.lang.Integer.class
size(this.arguments[]) == 1
===========================================================================
org.apache.commons.math.ConvergenceException.ConvergenceException(java.lang.String, java.lang.Object[]):::ENTER
pattern.toString one of { "Maximal number of evaluations ({0}) exceeded", "Maximal number of iterations ({0}) exceeded" }
arguments.getClass().getName() == java.lang.Object[].class
size(arguments[]) == 1
===========================================================================
org.apache.commons.math.ConvergenceException.ConvergenceException(java.lang.String, java.lang.Object[]):::EXIT
pattern.toString == orig(pattern.toString)
arguments[] == orig(arguments[])
pattern.toString one of { "Maximal number of evaluations ({0}) exceeded", "Maximal number of iterations ({0}) exceeded" }
===========================================================================
org.apache.commons.math.ConvergingAlgorithmImpl:::OBJECT
this.getClass().getName() == org.apache.commons.math.analysis.solvers.BrentSolver.class
this.absoluteAccuracy <= 1.0E-6
this.relativeAccuracy == 1.0E-14
this.maximalIterationCount one of { 3, 100, 1000 }
this.defaultAbsoluteAccuracy == 1.0E-6
this.defaultRelativeAccuracy == 1.0E-14
this.defaultMaximalIterationCount == 100
this.iterationCount == 0
===========================================================================
org.apache.commons.math.ConvergingAlgorithmImpl.ConvergingAlgorithmImpl(int, double):::ENTER
defaultMaximalIterationCount == 100
defaultAbsoluteAccuracy == 1.0E-6
===========================================================================
org.apache.commons.math.ConvergingAlgorithmImpl.ConvergingAlgorithmImpl(int, double):::EXIT
this.absoluteAccuracy == 1.0E-6
this.maximalIterationCount == 100
===========================================================================
org.apache.commons.math.ConvergingAlgorithmImpl.setAbsoluteAccuracy(double):::ENTER
this.absoluteAccuracy == 1.0E-6
this.maximalIterationCount == 100
===========================================================================
org.apache.commons.math.ConvergingAlgorithmImpl.setAbsoluteAccuracy(double):::EXIT
this.relativeAccuracy == orig(this.relativeAccuracy)
this.maximalIterationCount == orig(this.maximalIterationCount)
this.defaultAbsoluteAccuracy == orig(this.defaultAbsoluteAccuracy)
this.defaultRelativeAccuracy == orig(this.defaultRelativeAccuracy)
this.defaultMaximalIterationCount == orig(this.defaultMaximalIterationCount)
this.iterationCount == orig(this.iterationCount)
this.maximalIterationCount == 100
this.absoluteAccuracy < orig(this.absoluteAccuracy)
===========================================================================
org.apache.commons.math.ConvergingAlgorithmImpl.setMaximalIterationCount(int):::ENTER
this.maximalIterationCount == 100
count one of { 3, 100, 1000 }
===========================================================================
org.apache.commons.math.ConvergingAlgorithmImpl.setMaximalIterationCount(int):::EXIT
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.defaultAbsoluteAccuracy == orig(this.defaultAbsoluteAccuracy)
this.defaultRelativeAccuracy == orig(this.defaultRelativeAccuracy)
this.defaultMaximalIterationCount == orig(this.defaultMaximalIterationCount)
this.iterationCount == orig(this.iterationCount)
===========================================================================
org.apache.commons.math.MathException:::CLASS
===========================================================================
org.apache.commons.math.MathException:::OBJECT
this.arguments.getClass().getName() == java.lang.Object[].class
this.arguments[] elements != null
size(this.arguments[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math.MathException.MathException(java.lang.String, java.lang.Object[]):::ENTER
pattern.toString one of { "Evaluation failed for argument = {0}", "Maximal number of evaluations ({0}) exceeded", "Maximal number of iterations ({0}) exceeded" }
arguments.getClass().getName() == java.lang.Object[].class
size(arguments[]) == 1
===========================================================================
org.apache.commons.math.MathException.MathException(java.lang.String, java.lang.Object[]):::EXIT
pattern.toString == orig(pattern.toString)
arguments[] == orig(arguments[])
this.pattern.toString one of { "Evaluation failed for argument = {0}", "Maximal number of evaluations ({0}) exceeded", "Maximal number of iterations ({0}) exceeded" }
this.arguments[].getClass().getName() one of { [java.lang.Double], [java.lang.Integer] }
pattern.toString one of { "Evaluation failed for argument = {0}", "Maximal number of evaluations ({0}) exceeded", "Maximal number of iterations ({0}) exceeded" }
size(this.arguments[]) == 1
===========================================================================
org.apache.commons.math.MathException.MathException(java.lang.Throwable):::ENTER
===========================================================================
org.apache.commons.math.MathException.MathException(java.lang.Throwable):::EXIT
this.pattern has only one value
this.pattern != null
this.pattern.toString == ""
this.arguments != null
this.arguments[] == []
this.arguments[].getClass().getName() == []
===========================================================================
org.apache.commons.math.MathException.getLocalizedMessage():::ENTER
this.pattern.toString one of { "Evaluation failed for argument = {0}", "Maximal number of evaluations ({0}) exceeded", "Maximal number of iterations ({0}) exceeded" }
this.arguments[].getClass().getName() one of { [java.lang.Double], [java.lang.Integer] }
size(this.arguments[]) == 1
===========================================================================
org.apache.commons.math.MathException.getLocalizedMessage():::EXIT
this.pattern == orig(this.pattern)
this.pattern.toString == orig(this.pattern.toString)
this.arguments == orig(this.arguments)
this.arguments.getClass().getName() == orig(this.arguments.getClass().getName())
this.arguments[] == orig(this.arguments[])
this.pattern.toString one of { "Evaluation failed for argument = {0}", "Maximal number of evaluations ({0}) exceeded", "Maximal number of iterations ({0}) exceeded" }
this.arguments[].getClass().getName() one of { [java.lang.Double], [java.lang.Integer] }
return.toString one of { "Evaluation failed for argument = 2.127", "Maximal number of evaluations (650) exceeded", "Maximal number of iterations (3) exceeded" }
size(this.arguments[]) == 1
===========================================================================
org.apache.commons.math.MathException.getMessage():::ENTER
this.pattern == null
this.arguments == null
===========================================================================
org.apache.commons.math.MathException.getMessage():::EXIT
this.pattern == orig(this.pattern)
this.arguments == orig(this.arguments)
this.pattern == null
this.arguments == null
return has only one value
return != null
return.toString == ""
===========================================================================
org.apache.commons.math.MathException.getMessage(java.util.Locale):::ENTER
this.pattern.toString one of { "Evaluation failed for argument = {0}", "Maximal number of evaluations ({0}) exceeded", "Maximal number of iterations ({0}) exceeded" }
this.arguments[].getClass().getName() one of { [java.lang.Double], [java.lang.Integer] }
locale has only one value
locale != null
size(this.arguments[]) == 1
===========================================================================
org.apache.commons.math.MathException.getMessage(java.util.Locale):::EXIT
this.pattern == orig(this.pattern)
this.pattern.toString == orig(this.pattern.toString)
this.arguments == orig(this.arguments)
this.arguments.getClass().getName() == orig(this.arguments.getClass().getName())
this.arguments[] == orig(this.arguments[])
this.pattern.toString one of { "Evaluation failed for argument = {0}", "Maximal number of evaluations ({0}) exceeded", "Maximal number of iterations ({0}) exceeded" }
this.arguments[].getClass().getName() one of { [java.lang.Double], [java.lang.Integer] }
return != null
size(this.arguments[]) == 1
===========================================================================
org.apache.commons.math.MathException.translate(java.lang.String, java.util.Locale):::ENTER
s.toString one of { "Evaluation failed for argument = {0}", "Maximal number of evaluations ({0}) exceeded", "Maximal number of iterations ({0}) exceeded" }
locale has only one value
===========================================================================
org.apache.commons.math.MathException.translate(java.lang.String, java.util.Locale):::EXIT123
===========================================================================
org.apache.commons.math.MathException.translate(java.lang.String, java.util.Locale):::EXIT
s.toString == orig(s.toString)
s.toString one of { "Evaluation failed for argument = {0}", "Maximal number of evaluations ({0}) exceeded", "Maximal number of iterations ({0}) exceeded" }
return.toString one of { "Evaluation failed for argument = {0}", "Maximal number of evaluations ({0}) exceeded", "Maximal number of iterations ({0}) exceeded" }
===========================================================================
org.apache.commons.math.MathRuntimeException$4:::CLASS
===========================================================================
org.apache.commons.math.MathRuntimeException$4:::OBJECT
this.val$pattern has only one value
this.val$pattern.toString == "function values at endpoints do not have different signs.  Endpoints: [{0}, {1}], Values: [{2}, {3}]"
this.val$arguments.getClass().getName() == java.lang.Object[].class
this.val$arguments[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double]
this.val$arguments[].getClass().getName() elements == java.lang.Double.class
size(this.val$arguments[]) == 4
===========================================================================
org.apache.commons.math.MathRuntimeException$4.(java.lang.String, java.lang.Object[]):::ENTER
$hidden$1 has only one value
$hidden$1.toString == "function values at endpoints do not have different signs.  Endpoints: [{0}, {1}], Values: [{2}, {3}]"
$hidden$2.getClass().getName() == java.lang.Object[].class
size($hidden$2[]) == 4
===========================================================================
org.apache.commons.math.MathRuntimeException$4.(java.lang.String, java.lang.Object[]):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
$hidden$2[] == orig($hidden$2[])
$hidden$1.toString == "function values at endpoints do not have different signs.  Endpoints: [{0}, {1}], Values: [{2}, {3}]"
===========================================================================
org.apache.commons.math.MathRuntimeException:::CLASS
===========================================================================
org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(java.lang.String, java.lang.Object[]):::ENTER
pattern has only one value
pattern.toString == "function values at endpoints do not have different signs.  Endpoints: [{0}, {1}], Values: [{2}, {3}]"
arguments.getClass().getName() == java.lang.Object[].class
size(arguments[]) == 4
===========================================================================
org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(java.lang.String, java.lang.Object[]):::EXIT
pattern.toString == orig(pattern.toString)
arguments[] == orig(arguments[])
pattern.toString == "function values at endpoints do not have different signs.  Endpoints: [{0}, {1}], Values: [{2}, {3}]"
===========================================================================
org.apache.commons.math.MaxEvaluationsExceededException:::CLASS
===========================================================================
org.apache.commons.math.MaxEvaluationsExceededException:::OBJECT
this.maxEvaluations == 650
this.pattern has only one value
this.pattern.toString == "Maximal number of evaluations ({0}) exceeded"
this.arguments.getClass().getName() == java.lang.Object[].class
this.arguments[].getClass().getName() == [java.lang.Integer]
this.arguments[].getClass().getName() elements == java.lang.Integer.class
size(this.arguments[]) == 1
===========================================================================
org.apache.commons.math.MaxEvaluationsExceededException.MaxEvaluationsExceededException(int):::ENTER
maxEvaluations == 650
===========================================================================
org.apache.commons.math.MaxEvaluationsExceededException.MaxEvaluationsExceededException(int):::EXIT
===========================================================================
org.apache.commons.math.MaxIterationsExceededException:::CLASS
===========================================================================
org.apache.commons.math.MaxIterationsExceededException:::OBJECT
this has only one value
this.maxIterations == 3
this.pattern has only one value
this.pattern.toString == "Maximal number of iterations ({0}) exceeded"
this.arguments has only one value
this.arguments.getClass().getName() == java.lang.Object[].class
this.arguments[] contains no nulls and has only one value, of length 1
this.arguments[] elements has only one value
this.arguments[].getClass().getName() == [java.lang.Integer]
this.arguments[].getClass().getName() elements == java.lang.Integer.class
size(this.arguments[]) == 1
===========================================================================
org.apache.commons.math.MaxIterationsExceededException.MaxIterationsExceededException(int):::ENTER
maxIterations == 3
===========================================================================
org.apache.commons.math.MaxIterationsExceededException.MaxIterationsExceededException(int):::EXIT
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver:::CLASS
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver:::OBJECT
this.functionValueAccuracy == 1.0E-15
this.defaultFunctionValueAccuracy == 1.0E-15
this.functionValue == 0.0
this.f == null
this.absoluteAccuracy <= 1.0E-6
this.relativeAccuracy == 1.0E-14
this.maximalIterationCount one of { 100, 1000 }
this.defaultAbsoluteAccuracy == 1.0E-6
this.defaultRelativeAccuracy == 1.0E-14
this.defaultMaximalIterationCount == 100
this.iterationCount >= 0
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver.BrentSolver():::EXIT
this.resultComputed == false
this.result == 0.0
this.absoluteAccuracy == 1.0E-6
this.maximalIterationCount == 100
this.iterationCount == 0
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver.solve(org.apache.commons.math.analysis.UnivariateRealFunction, double, double):::ENTER
this.resultComputed == false
this.result == 0.0
this.iterationCount == 0
f.getClass().getName() == org.apache.commons.math.ode.events.EventState$1.class
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver.solve(org.apache.commons.math.analysis.UnivariateRealFunction, double, double):::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.defaultFunctionValueAccuracy == orig(this.defaultFunctionValueAccuracy)
this.functionValue == orig(this.functionValue)
this.f == orig(this.f)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.maximalIterationCount == orig(this.maximalIterationCount)
this.defaultAbsoluteAccuracy == orig(this.defaultAbsoluteAccuracy)
this.defaultRelativeAccuracy == orig(this.defaultRelativeAccuracy)
this.defaultMaximalIterationCount == orig(this.defaultMaximalIterationCount)
this.resultComputed == true
orig(this.result) % this.result == 0
this.iterationCount >= orig(this.iterationCount)
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver.solve(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double, double, double, double):::ENTER
this.resultComputed == false
this.result == 0.0
this.iterationCount == 0
f.getClass().getName() == org.apache.commons.math.ode.events.EventState$1.class
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver.solve(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double, double, double, double):::EXIT240
this.iterationCount one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver.solve(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double, double, double, double):::EXIT247
orig(x0) one of { -4.0000000000000036, 0.0 }
orig(x2) one of { -4.0000000000000036, 0.0 }
this.result != orig(this.result)
orig(this.iterationCount) % this.iterationCount == 0
this.iterationCount > orig(this.iterationCount)
===========================================================================
org.apache.commons.math.analysis.solvers.BrentSolver.solve(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double, double, double, double):::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.defaultFunctionValueAccuracy == orig(this.defaultFunctionValueAccuracy)
this.functionValue == orig(this.functionValue)
this.f == orig(this.f)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.maximalIterationCount == orig(this.maximalIterationCount)
this.defaultAbsoluteAccuracy == orig(this.defaultAbsoluteAccuracy)
this.defaultRelativeAccuracy == orig(this.defaultRelativeAccuracy)
this.defaultMaximalIterationCount == orig(this.defaultMaximalIterationCount)
this.resultComputed == true
orig(this.result) % this.result == 0
this.iterationCount >= orig(this.iterationCount)
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl:::OBJECT
this.getClass().getName() == org.apache.commons.math.analysis.solvers.BrentSolver.class
this.functionValueAccuracy == 1.0E-15
this.defaultFunctionValueAccuracy == 1.0E-15
this.functionValue == 0.0
this.f == null
this.absoluteAccuracy <= 1.0E-6
this.absoluteAccuracy >= 2.220446049250313E-16
this.relativeAccuracy == 1.0E-14
this.maximalIterationCount one of { 3, 100, 1000 }
this.defaultAbsoluteAccuracy == 1.0E-6
this.defaultRelativeAccuracy == 1.0E-14
this.defaultMaximalIterationCount == 100
this.iterationCount >= 0
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.UnivariateRealSolverImpl(int, double):::ENTER
defaultMaximalIterationCount == 100
defaultAbsoluteAccuracy == 1.0E-6
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.UnivariateRealSolverImpl(int, double):::EXIT
this.resultComputed == false
this.result == 0.0
this.absoluteAccuracy == 1.0E-6
this.maximalIterationCount == 100
this.iterationCount == 0
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.clearResult():::ENTER
this.resultComputed == false
this.result == 0.0
this.iterationCount == 0
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.clearResult():::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.defaultFunctionValueAccuracy == orig(this.defaultFunctionValueAccuracy)
this.resultComputed == orig(this.resultComputed)
this.result == orig(this.result)
this.functionValue == orig(this.functionValue)
this.f == orig(this.f)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.maximalIterationCount == orig(this.maximalIterationCount)
this.defaultAbsoluteAccuracy == orig(this.defaultAbsoluteAccuracy)
this.defaultRelativeAccuracy == orig(this.defaultRelativeAccuracy)
this.defaultMaximalIterationCount == orig(this.defaultMaximalIterationCount)
this.iterationCount == orig(this.iterationCount)
this.resultComputed == false
this.result == 0.0
this.iterationCount == 0
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.setResult(double, int):::ENTER
this.resultComputed == false
this.result == 0.0
this.maximalIterationCount one of { 100, 1000 }
this.iterationCount == 0
iterationCount >= 0
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.setResult(double, int):::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.defaultFunctionValueAccuracy == orig(this.defaultFunctionValueAccuracy)
this.functionValue == orig(this.functionValue)
this.f == orig(this.f)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.maximalIterationCount == orig(this.maximalIterationCount)
this.defaultAbsoluteAccuracy == orig(this.defaultAbsoluteAccuracy)
this.defaultRelativeAccuracy == orig(this.defaultRelativeAccuracy)
this.defaultMaximalIterationCount == orig(this.defaultMaximalIterationCount)
this.resultComputed == true
this.maximalIterationCount one of { 100, 1000 }
orig(this.result) % this.result == 0
this.iterationCount >= orig(this.iterationCount)
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.verifyInterval(double, double):::ENTER
this.resultComputed == false
this.result == 0.0
this.iterationCount == 0
===========================================================================
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl.verifyInterval(double, double):::EXIT
this.functionValueAccuracy == orig(this.functionValueAccuracy)
this.defaultFunctionValueAccuracy == orig(this.defaultFunctionValueAccuracy)
this.resultComputed == orig(this.resultComputed)
this.result == orig(this.result)
this.functionValue == orig(this.functionValue)
this.f == orig(this.f)
this.absoluteAccuracy == orig(this.absoluteAccuracy)
this.relativeAccuracy == orig(this.relativeAccuracy)
this.maximalIterationCount == orig(this.maximalIterationCount)
this.defaultAbsoluteAccuracy == orig(this.defaultAbsoluteAccuracy)
this.defaultRelativeAccuracy == orig(this.defaultRelativeAccuracy)
this.defaultMaximalIterationCount == orig(this.defaultMaximalIterationCount)
this.iterationCount == orig(this.iterationCount)
this.resultComputed == false
this.result == 0.0
this.iterationCount == 0
===========================================================================
org.apache.commons.math.fraction.BigFraction:::CLASS
org.apache.commons.math.fraction.BigFraction.TWO has only one value
org.apache.commons.math.fraction.BigFraction.ONE has only one value
org.apache.commons.math.fraction.BigFraction.ZERO has only one value
org.apache.commons.math.fraction.BigFraction.MINUS_ONE has only one value
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS has only one value
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH has only one value
org.apache.commons.math.fraction.BigFraction.ONE_HALF has only one value
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER has only one value
org.apache.commons.math.fraction.BigFraction.ONE_THIRD has only one value
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS has only one value
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS has only one value
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS has only one value
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS has only one value
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS has only one value
org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR has only one value
org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR.toString == "denominator must be different from 0"
org.apache.commons.math.fraction.BigFraction.ONE_HUNDRED_DOUBLE has only one value
org.apache.commons.math.fraction.BigFraction.TWO.numerator has only one value
org.apache.commons.math.fraction.BigFraction.TWO.denominator has only one value
org.apache.commons.math.fraction.BigFraction.ONE.numerator has only one value
org.apache.commons.math.fraction.BigFraction.ONE.denominator has only one value
org.apache.commons.math.fraction.BigFraction.ZERO.numerator has only one value
org.apache.commons.math.fraction.BigFraction.ZERO.denominator has only one value
org.apache.commons.math.fraction.BigFraction.MINUS_ONE.numerator has only one value
org.apache.commons.math.fraction.BigFraction.MINUS_ONE.denominator has only one value
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.numerator has only one value
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.denominator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.numerator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.denominator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_HALF.numerator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_HALF.denominator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.numerator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.denominator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_THIRD.numerator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_THIRD.denominator has only one value
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.numerator has only one value
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.denominator has only one value
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.numerator has only one value
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.denominator has only one value
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.numerator has only one value
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.denominator has only one value
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.numerator has only one value
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.denominator has only one value
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.numerator has only one value
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.denominator has only one value
===========================================================================
org.apache.commons.math.fraction.BigFraction:::OBJECT
===========================================================================
org.apache.commons.math.fraction.BigFraction.BigFraction(int):::ENTER
===========================================================================
org.apache.commons.math.fraction.BigFraction.BigFraction(int):::EXIT
this.denominator has only one value
===========================================================================
org.apache.commons.math.fraction.BigFraction.BigFraction(int, int):::ENTER
num >= 1
===========================================================================
org.apache.commons.math.fraction.BigFraction.BigFraction(int, int):::EXIT
===========================================================================
org.apache.commons.math.fraction.BigFraction.BigFraction(java.math.BigInteger, java.math.BigInteger):::ENTER
===========================================================================
org.apache.commons.math.fraction.BigFraction.BigFraction(java.math.BigInteger, java.math.BigInteger):::EXIT
===========================================================================
org.apache.commons.math.fraction.BigFraction.divide(org.apache.commons.math.fraction.BigFraction):::ENTER
fraction.denominator has only one value
===========================================================================
org.apache.commons.math.fraction.BigFraction.divide(org.apache.commons.math.fraction.BigFraction):::EXIT
org.apache.commons.math.fraction.BigFraction.TWO == orig(org.apache.commons.math.fraction.BigFraction.TWO)
org.apache.commons.math.fraction.BigFraction.ONE == orig(org.apache.commons.math.fraction.BigFraction.ONE)
org.apache.commons.math.fraction.BigFraction.ZERO == orig(org.apache.commons.math.fraction.BigFraction.ZERO)
org.apache.commons.math.fraction.BigFraction.MINUS_ONE == orig(org.apache.commons.math.fraction.BigFraction.MINUS_ONE)
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS == orig(org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS)
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH == orig(org.apache.commons.math.fraction.BigFraction.ONE_FIFTH)
org.apache.commons.math.fraction.BigFraction.ONE_HALF == orig(org.apache.commons.math.fraction.BigFraction.ONE_HALF)
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER == orig(org.apache.commons.math.fraction.BigFraction.ONE_QUARTER)
org.apache.commons.math.fraction.BigFraction.ONE_THIRD == orig(org.apache.commons.math.fraction.BigFraction.ONE_THIRD)
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS == orig(org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS)
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS == orig(org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS)
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS == orig(org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS)
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS == orig(org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS)
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS == orig(org.apache.commons.math.fraction.BigFraction.TWO_THIRDS)
org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR == orig(org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR)
org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR.toString == orig(org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR.toString)
org.apache.commons.math.fraction.BigFraction.ONE_HUNDRED_DOUBLE == orig(org.apache.commons.math.fraction.BigFraction.ONE_HUNDRED_DOUBLE)
org.apache.commons.math.fraction.BigFraction.TWO.numerator == orig(org.apache.commons.math.fraction.BigFraction.TWO.numerator)
org.apache.commons.math.fraction.BigFraction.TWO.denominator == orig(org.apache.commons.math.fraction.BigFraction.TWO.denominator)
org.apache.commons.math.fraction.BigFraction.ONE.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE.numerator)
org.apache.commons.math.fraction.BigFraction.ONE.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE.denominator)
org.apache.commons.math.fraction.BigFraction.ZERO.numerator == orig(org.apache.commons.math.fraction.BigFraction.ZERO.numerator)
org.apache.commons.math.fraction.BigFraction.ZERO.denominator == orig(org.apache.commons.math.fraction.BigFraction.ZERO.denominator)
org.apache.commons.math.fraction.BigFraction.MINUS_ONE.numerator == orig(org.apache.commons.math.fraction.BigFraction.MINUS_ONE.numerator)
org.apache.commons.math.fraction.BigFraction.MINUS_ONE.denominator == orig(org.apache.commons.math.fraction.BigFraction.MINUS_ONE.denominator)
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.numerator == orig(org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.numerator)
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.denominator == orig(org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.denominator)
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.numerator)
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.denominator)
org.apache.commons.math.fraction.BigFraction.ONE_HALF.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE_HALF.numerator)
org.apache.commons.math.fraction.BigFraction.ONE_HALF.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE_HALF.denominator)
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.numerator)
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.denominator)
org.apache.commons.math.fraction.BigFraction.ONE_THIRD.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE_THIRD.numerator)
org.apache.commons.math.fraction.BigFraction.ONE_THIRD.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE_THIRD.denominator)
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.numerator == orig(org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.numerator)
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.denominator == orig(org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.denominator)
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.numerator == orig(org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.numerator)
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.denominator == orig(org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.denominator)
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.numerator == orig(org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.numerator)
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.denominator == orig(org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.denominator)
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.numerator == orig(org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.numerator)
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.denominator == orig(org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.denominator)
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.numerator == orig(org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.numerator)
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.denominator == orig(org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.denominator)
this.numerator == orig(this.numerator)
this.denominator == orig(this.denominator)
fraction.numerator == orig(fraction.numerator)
fraction.denominator == orig(fraction.denominator)
fraction.denominator has only one value
===========================================================================
org.apache.commons.math.fraction.BigFraction.doubleValue():::ENTER
===========================================================================
org.apache.commons.math.fraction.BigFraction.doubleValue():::EXIT
org.apache.commons.math.fraction.BigFraction.TWO == orig(org.apache.commons.math.fraction.BigFraction.TWO)
org.apache.commons.math.fraction.BigFraction.ONE == orig(org.apache.commons.math.fraction.BigFraction.ONE)
org.apache.commons.math.fraction.BigFraction.ZERO == orig(org.apache.commons.math.fraction.BigFraction.ZERO)
org.apache.commons.math.fraction.BigFraction.MINUS_ONE == orig(org.apache.commons.math.fraction.BigFraction.MINUS_ONE)
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS == orig(org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS)
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH == orig(org.apache.commons.math.fraction.BigFraction.ONE_FIFTH)
org.apache.commons.math.fraction.BigFraction.ONE_HALF == orig(org.apache.commons.math.fraction.BigFraction.ONE_HALF)
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER == orig(org.apache.commons.math.fraction.BigFraction.ONE_QUARTER)
org.apache.commons.math.fraction.BigFraction.ONE_THIRD == orig(org.apache.commons.math.fraction.BigFraction.ONE_THIRD)
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS == orig(org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS)
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS == orig(org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS)
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS == orig(org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS)
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS == orig(org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS)
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS == orig(org.apache.commons.math.fraction.BigFraction.TWO_THIRDS)
org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR == orig(org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR)
org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR.toString == orig(org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR.toString)
org.apache.commons.math.fraction.BigFraction.ONE_HUNDRED_DOUBLE == orig(org.apache.commons.math.fraction.BigFraction.ONE_HUNDRED_DOUBLE)
org.apache.commons.math.fraction.BigFraction.TWO.numerator == orig(org.apache.commons.math.fraction.BigFraction.TWO.numerator)
org.apache.commons.math.fraction.BigFraction.TWO.denominator == orig(org.apache.commons.math.fraction.BigFraction.TWO.denominator)
org.apache.commons.math.fraction.BigFraction.ONE.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE.numerator)
org.apache.commons.math.fraction.BigFraction.ONE.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE.denominator)
org.apache.commons.math.fraction.BigFraction.ZERO.numerator == orig(org.apache.commons.math.fraction.BigFraction.ZERO.numerator)
org.apache.commons.math.fraction.BigFraction.ZERO.denominator == orig(org.apache.commons.math.fraction.BigFraction.ZERO.denominator)
org.apache.commons.math.fraction.BigFraction.MINUS_ONE.numerator == orig(org.apache.commons.math.fraction.BigFraction.MINUS_ONE.numerator)
org.apache.commons.math.fraction.BigFraction.MINUS_ONE.denominator == orig(org.apache.commons.math.fraction.BigFraction.MINUS_ONE.denominator)
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.numerator == orig(org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.numerator)
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.denominator == orig(org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.denominator)
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.numerator)
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.denominator)
org.apache.commons.math.fraction.BigFraction.ONE_HALF.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE_HALF.numerator)
org.apache.commons.math.fraction.BigFraction.ONE_HALF.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE_HALF.denominator)
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.numerator)
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.denominator)
org.apache.commons.math.fraction.BigFraction.ONE_THIRD.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE_THIRD.numerator)
org.apache.commons.math.fraction.BigFraction.ONE_THIRD.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE_THIRD.denominator)
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.numerator == orig(org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.numerator)
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.denominator == orig(org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.denominator)
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.numerator == orig(org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.numerator)
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.denominator == orig(org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.denominator)
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.numerator == orig(org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.numerator)
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.denominator == orig(org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.denominator)
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.numerator == orig(org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.numerator)
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.denominator == orig(org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.denominator)
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.numerator == orig(org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.numerator)
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.denominator == orig(org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.denominator)
this.numerator == orig(this.numerator)
this.denominator == orig(this.denominator)
===========================================================================
org.apache.commons.math.fraction.BigFraction.equals(java.lang.Object):::ENTER
this.denominator has only one value
other.getClass().getName() == org.apache.commons.math.fraction.BigFraction.class
===========================================================================
org.apache.commons.math.fraction.BigFraction.equals(java.lang.Object):::EXIT
org.apache.commons.math.fraction.BigFraction.TWO == orig(org.apache.commons.math.fraction.BigFraction.TWO)
org.apache.commons.math.fraction.BigFraction.ONE == orig(org.apache.commons.math.fraction.BigFraction.ONE)
org.apache.commons.math.fraction.BigFraction.ZERO == orig(org.apache.commons.math.fraction.BigFraction.ZERO)
org.apache.commons.math.fraction.BigFraction.MINUS_ONE == orig(org.apache.commons.math.fraction.BigFraction.MINUS_ONE)
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS == orig(org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS)
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH == orig(org.apache.commons.math.fraction.BigFraction.ONE_FIFTH)
org.apache.commons.math.fraction.BigFraction.ONE_HALF == orig(org.apache.commons.math.fraction.BigFraction.ONE_HALF)
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER == orig(org.apache.commons.math.fraction.BigFraction.ONE_QUARTER)
org.apache.commons.math.fraction.BigFraction.ONE_THIRD == orig(org.apache.commons.math.fraction.BigFraction.ONE_THIRD)
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS == orig(org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS)
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS == orig(org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS)
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS == orig(org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS)
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS == orig(org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS)
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS == orig(org.apache.commons.math.fraction.BigFraction.TWO_THIRDS)
org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR == orig(org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR)
org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR.toString == orig(org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR.toString)
org.apache.commons.math.fraction.BigFraction.ONE_HUNDRED_DOUBLE == orig(org.apache.commons.math.fraction.BigFraction.ONE_HUNDRED_DOUBLE)
org.apache.commons.math.fraction.BigFraction.TWO.numerator == orig(org.apache.commons.math.fraction.BigFraction.TWO.numerator)
org.apache.commons.math.fraction.BigFraction.TWO.denominator == orig(org.apache.commons.math.fraction.BigFraction.TWO.denominator)
org.apache.commons.math.fraction.BigFraction.ONE.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE.numerator)
org.apache.commons.math.fraction.BigFraction.ONE.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE.denominator)
org.apache.commons.math.fraction.BigFraction.ZERO.numerator == orig(org.apache.commons.math.fraction.BigFraction.ZERO.numerator)
org.apache.commons.math.fraction.BigFraction.ZERO.denominator == orig(org.apache.commons.math.fraction.BigFraction.ZERO.denominator)
org.apache.commons.math.fraction.BigFraction.MINUS_ONE.numerator == orig(org.apache.commons.math.fraction.BigFraction.MINUS_ONE.numerator)
org.apache.commons.math.fraction.BigFraction.MINUS_ONE.denominator == orig(org.apache.commons.math.fraction.BigFraction.MINUS_ONE.denominator)
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.numerator == orig(org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.numerator)
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.denominator == orig(org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.denominator)
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.numerator)
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.denominator)
org.apache.commons.math.fraction.BigFraction.ONE_HALF.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE_HALF.numerator)
org.apache.commons.math.fraction.BigFraction.ONE_HALF.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE_HALF.denominator)
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.numerator)
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.denominator)
org.apache.commons.math.fraction.BigFraction.ONE_THIRD.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE_THIRD.numerator)
org.apache.commons.math.fraction.BigFraction.ONE_THIRD.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE_THIRD.denominator)
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.numerator == orig(org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.numerator)
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.denominator == orig(org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.denominator)
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.numerator == orig(org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.numerator)
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.denominator == orig(org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.denominator)
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.numerator == orig(org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.numerator)
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.denominator == orig(org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.denominator)
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.numerator == orig(org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.numerator)
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.denominator == orig(org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.denominator)
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.numerator == orig(org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.numerator)
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.denominator == orig(org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.denominator)
this.numerator == orig(this.numerator)
this.denominator == orig(this.denominator)
(return == true)  ==>  (orig(other) has only one value)
(return == true)  ==>  (orig(this) has only one value)
(return == true)  ==>  (this.numerator has only one value)
this.denominator has only one value
===========================================================================
org.apache.commons.math.fraction.BigFraction.equals(java.lang.Object):::EXIT;condition="return == true"
this.numerator has only one value
return == true
orig(this) has only one value
orig(other) has only one value
===========================================================================
org.apache.commons.math.fraction.BigFraction.equals(java.lang.Object):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.math.fraction.BigFraction.getField():::ENTER
===========================================================================
org.apache.commons.math.fraction.BigFraction.getField():::EXIT
org.apache.commons.math.fraction.BigFraction.TWO == orig(org.apache.commons.math.fraction.BigFraction.TWO)
org.apache.commons.math.fraction.BigFraction.ONE == orig(org.apache.commons.math.fraction.BigFraction.ONE)
org.apache.commons.math.fraction.BigFraction.ZERO == orig(org.apache.commons.math.fraction.BigFraction.ZERO)
org.apache.commons.math.fraction.BigFraction.MINUS_ONE == orig(org.apache.commons.math.fraction.BigFraction.MINUS_ONE)
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS == orig(org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS)
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH == orig(org.apache.commons.math.fraction.BigFraction.ONE_FIFTH)
org.apache.commons.math.fraction.BigFraction.ONE_HALF == orig(org.apache.commons.math.fraction.BigFraction.ONE_HALF)
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER == orig(org.apache.commons.math.fraction.BigFraction.ONE_QUARTER)
org.apache.commons.math.fraction.BigFraction.ONE_THIRD == orig(org.apache.commons.math.fraction.BigFraction.ONE_THIRD)
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS == orig(org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS)
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS == orig(org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS)
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS == orig(org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS)
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS == orig(org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS)
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS == orig(org.apache.commons.math.fraction.BigFraction.TWO_THIRDS)
org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR == orig(org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR)
org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR.toString == orig(org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR.toString)
org.apache.commons.math.fraction.BigFraction.ONE_HUNDRED_DOUBLE == orig(org.apache.commons.math.fraction.BigFraction.ONE_HUNDRED_DOUBLE)
org.apache.commons.math.fraction.BigFraction.TWO.numerator == orig(org.apache.commons.math.fraction.BigFraction.TWO.numerator)
org.apache.commons.math.fraction.BigFraction.TWO.denominator == orig(org.apache.commons.math.fraction.BigFraction.TWO.denominator)
org.apache.commons.math.fraction.BigFraction.ONE.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE.numerator)
org.apache.commons.math.fraction.BigFraction.ONE.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE.denominator)
org.apache.commons.math.fraction.BigFraction.ZERO.numerator == orig(org.apache.commons.math.fraction.BigFraction.ZERO.numerator)
org.apache.commons.math.fraction.BigFraction.ZERO.denominator == orig(org.apache.commons.math.fraction.BigFraction.ZERO.denominator)
org.apache.commons.math.fraction.BigFraction.MINUS_ONE.numerator == orig(org.apache.commons.math.fraction.BigFraction.MINUS_ONE.numerator)
org.apache.commons.math.fraction.BigFraction.MINUS_ONE.denominator == orig(org.apache.commons.math.fraction.BigFraction.MINUS_ONE.denominator)
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.numerator == orig(org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.numerator)
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.denominator == orig(org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.denominator)
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.numerator)
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.denominator)
org.apache.commons.math.fraction.BigFraction.ONE_HALF.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE_HALF.numerator)
org.apache.commons.math.fraction.BigFraction.ONE_HALF.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE_HALF.denominator)
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.numerator)
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.denominator)
org.apache.commons.math.fraction.BigFraction.ONE_THIRD.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE_THIRD.numerator)
org.apache.commons.math.fraction.BigFraction.ONE_THIRD.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE_THIRD.denominator)
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.numerator == orig(org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.numerator)
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.denominator == orig(org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.denominator)
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.numerator == orig(org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.numerator)
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.denominator == orig(org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.denominator)
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.numerator == orig(org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.numerator)
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.denominator == orig(org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.denominator)
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.numerator == orig(org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.numerator)
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.denominator == orig(org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.denominator)
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.numerator == orig(org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.numerator)
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.denominator == orig(org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.denominator)
this.numerator == orig(this.numerator)
this.denominator == orig(this.denominator)
return has only one value
===========================================================================
org.apache.commons.math.fraction.BigFraction.getNumeratorAsInt():::ENTER
===========================================================================
org.apache.commons.math.fraction.BigFraction.getNumeratorAsInt():::EXIT
org.apache.commons.math.fraction.BigFraction.TWO == orig(org.apache.commons.math.fraction.BigFraction.TWO)
org.apache.commons.math.fraction.BigFraction.ONE == orig(org.apache.commons.math.fraction.BigFraction.ONE)
org.apache.commons.math.fraction.BigFraction.ZERO == orig(org.apache.commons.math.fraction.BigFraction.ZERO)
org.apache.commons.math.fraction.BigFraction.MINUS_ONE == orig(org.apache.commons.math.fraction.BigFraction.MINUS_ONE)
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS == orig(org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS)
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH == orig(org.apache.commons.math.fraction.BigFraction.ONE_FIFTH)
org.apache.commons.math.fraction.BigFraction.ONE_HALF == orig(org.apache.commons.math.fraction.BigFraction.ONE_HALF)
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER == orig(org.apache.commons.math.fraction.BigFraction.ONE_QUARTER)
org.apache.commons.math.fraction.BigFraction.ONE_THIRD == orig(org.apache.commons.math.fraction.BigFraction.ONE_THIRD)
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS == orig(org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS)
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS == orig(org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS)
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS == orig(org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS)
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS == orig(org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS)
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS == orig(org.apache.commons.math.fraction.BigFraction.TWO_THIRDS)
org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR == orig(org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR)
org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR.toString == orig(org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR.toString)
org.apache.commons.math.fraction.BigFraction.ONE_HUNDRED_DOUBLE == orig(org.apache.commons.math.fraction.BigFraction.ONE_HUNDRED_DOUBLE)
org.apache.commons.math.fraction.BigFraction.TWO.numerator == orig(org.apache.commons.math.fraction.BigFraction.TWO.numerator)
org.apache.commons.math.fraction.BigFraction.TWO.denominator == orig(org.apache.commons.math.fraction.BigFraction.TWO.denominator)
org.apache.commons.math.fraction.BigFraction.ONE.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE.numerator)
org.apache.commons.math.fraction.BigFraction.ONE.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE.denominator)
org.apache.commons.math.fraction.BigFraction.ZERO.numerator == orig(org.apache.commons.math.fraction.BigFraction.ZERO.numerator)
org.apache.commons.math.fraction.BigFraction.ZERO.denominator == orig(org.apache.commons.math.fraction.BigFraction.ZERO.denominator)
org.apache.commons.math.fraction.BigFraction.MINUS_ONE.numerator == orig(org.apache.commons.math.fraction.BigFraction.MINUS_ONE.numerator)
org.apache.commons.math.fraction.BigFraction.MINUS_ONE.denominator == orig(org.apache.commons.math.fraction.BigFraction.MINUS_ONE.denominator)
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.numerator == orig(org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.numerator)
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.denominator == orig(org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.denominator)
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.numerator)
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.denominator)
org.apache.commons.math.fraction.BigFraction.ONE_HALF.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE_HALF.numerator)
org.apache.commons.math.fraction.BigFraction.ONE_HALF.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE_HALF.denominator)
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.numerator)
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.denominator)
org.apache.commons.math.fraction.BigFraction.ONE_THIRD.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE_THIRD.numerator)
org.apache.commons.math.fraction.BigFraction.ONE_THIRD.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE_THIRD.denominator)
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.numerator == orig(org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.numerator)
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.denominator == orig(org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.denominator)
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.numerator == orig(org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.numerator)
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.denominator == orig(org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.denominator)
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.numerator == orig(org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.numerator)
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.denominator == orig(org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.denominator)
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.numerator == orig(org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.numerator)
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.denominator == orig(org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.denominator)
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.numerator == orig(org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.numerator)
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.denominator == orig(org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.denominator)
this.numerator == orig(this.numerator)
this.denominator == orig(this.denominator)
===========================================================================
org.apache.commons.math.fraction.BigFraction.multiply(org.apache.commons.math.fraction.BigFraction):::ENTER
===========================================================================
org.apache.commons.math.fraction.BigFraction.multiply(org.apache.commons.math.fraction.BigFraction):::EXIT
org.apache.commons.math.fraction.BigFraction.TWO == orig(org.apache.commons.math.fraction.BigFraction.TWO)
org.apache.commons.math.fraction.BigFraction.ONE == orig(org.apache.commons.math.fraction.BigFraction.ONE)
org.apache.commons.math.fraction.BigFraction.ZERO == orig(org.apache.commons.math.fraction.BigFraction.ZERO)
org.apache.commons.math.fraction.BigFraction.MINUS_ONE == orig(org.apache.commons.math.fraction.BigFraction.MINUS_ONE)
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS == orig(org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS)
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH == orig(org.apache.commons.math.fraction.BigFraction.ONE_FIFTH)
org.apache.commons.math.fraction.BigFraction.ONE_HALF == orig(org.apache.commons.math.fraction.BigFraction.ONE_HALF)
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER == orig(org.apache.commons.math.fraction.BigFraction.ONE_QUARTER)
org.apache.commons.math.fraction.BigFraction.ONE_THIRD == orig(org.apache.commons.math.fraction.BigFraction.ONE_THIRD)
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS == orig(org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS)
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS == orig(org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS)
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS == orig(org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS)
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS == orig(org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS)
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS == orig(org.apache.commons.math.fraction.BigFraction.TWO_THIRDS)
org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR == orig(org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR)
org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR.toString == orig(org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR.toString)
org.apache.commons.math.fraction.BigFraction.ONE_HUNDRED_DOUBLE == orig(org.apache.commons.math.fraction.BigFraction.ONE_HUNDRED_DOUBLE)
org.apache.commons.math.fraction.BigFraction.TWO.numerator == orig(org.apache.commons.math.fraction.BigFraction.TWO.numerator)
org.apache.commons.math.fraction.BigFraction.TWO.denominator == orig(org.apache.commons.math.fraction.BigFraction.TWO.denominator)
org.apache.commons.math.fraction.BigFraction.ONE.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE.numerator)
org.apache.commons.math.fraction.BigFraction.ONE.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE.denominator)
org.apache.commons.math.fraction.BigFraction.ZERO.numerator == orig(org.apache.commons.math.fraction.BigFraction.ZERO.numerator)
org.apache.commons.math.fraction.BigFraction.ZERO.denominator == orig(org.apache.commons.math.fraction.BigFraction.ZERO.denominator)
org.apache.commons.math.fraction.BigFraction.MINUS_ONE.numerator == orig(org.apache.commons.math.fraction.BigFraction.MINUS_ONE.numerator)
org.apache.commons.math.fraction.BigFraction.MINUS_ONE.denominator == orig(org.apache.commons.math.fraction.BigFraction.MINUS_ONE.denominator)
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.numerator == orig(org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.numerator)
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.denominator == orig(org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.denominator)
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.numerator)
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.denominator)
org.apache.commons.math.fraction.BigFraction.ONE_HALF.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE_HALF.numerator)
org.apache.commons.math.fraction.BigFraction.ONE_HALF.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE_HALF.denominator)
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.numerator)
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.denominator)
org.apache.commons.math.fraction.BigFraction.ONE_THIRD.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE_THIRD.numerator)
org.apache.commons.math.fraction.BigFraction.ONE_THIRD.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE_THIRD.denominator)
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.numerator == orig(org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.numerator)
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.denominator == orig(org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.denominator)
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.numerator == orig(org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.numerator)
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.denominator == orig(org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.denominator)
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.numerator == orig(org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.numerator)
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.denominator == orig(org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.denominator)
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.numerator == orig(org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.numerator)
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.denominator == orig(org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.denominator)
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.numerator == orig(org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.numerator)
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.denominator == orig(org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.denominator)
this.numerator == orig(this.numerator)
this.denominator == orig(this.denominator)
fraction.numerator == orig(fraction.numerator)
fraction.denominator == orig(fraction.denominator)
===========================================================================
org.apache.commons.math.fraction.BigFraction.negate():::ENTER
this.denominator has only one value
===========================================================================
org.apache.commons.math.fraction.BigFraction.negate():::EXIT
org.apache.commons.math.fraction.BigFraction.TWO == orig(org.apache.commons.math.fraction.BigFraction.TWO)
org.apache.commons.math.fraction.BigFraction.ONE == orig(org.apache.commons.math.fraction.BigFraction.ONE)
org.apache.commons.math.fraction.BigFraction.ZERO == orig(org.apache.commons.math.fraction.BigFraction.ZERO)
org.apache.commons.math.fraction.BigFraction.MINUS_ONE == orig(org.apache.commons.math.fraction.BigFraction.MINUS_ONE)
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS == orig(org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS)
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH == orig(org.apache.commons.math.fraction.BigFraction.ONE_FIFTH)
org.apache.commons.math.fraction.BigFraction.ONE_HALF == orig(org.apache.commons.math.fraction.BigFraction.ONE_HALF)
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER == orig(org.apache.commons.math.fraction.BigFraction.ONE_QUARTER)
org.apache.commons.math.fraction.BigFraction.ONE_THIRD == orig(org.apache.commons.math.fraction.BigFraction.ONE_THIRD)
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS == orig(org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS)
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS == orig(org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS)
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS == orig(org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS)
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS == orig(org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS)
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS == orig(org.apache.commons.math.fraction.BigFraction.TWO_THIRDS)
org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR == orig(org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR)
org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR.toString == orig(org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR.toString)
org.apache.commons.math.fraction.BigFraction.ONE_HUNDRED_DOUBLE == orig(org.apache.commons.math.fraction.BigFraction.ONE_HUNDRED_DOUBLE)
org.apache.commons.math.fraction.BigFraction.TWO.numerator == orig(org.apache.commons.math.fraction.BigFraction.TWO.numerator)
org.apache.commons.math.fraction.BigFraction.TWO.denominator == orig(org.apache.commons.math.fraction.BigFraction.TWO.denominator)
org.apache.commons.math.fraction.BigFraction.ONE.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE.numerator)
org.apache.commons.math.fraction.BigFraction.ONE.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE.denominator)
org.apache.commons.math.fraction.BigFraction.ZERO.numerator == orig(org.apache.commons.math.fraction.BigFraction.ZERO.numerator)
org.apache.commons.math.fraction.BigFraction.ZERO.denominator == orig(org.apache.commons.math.fraction.BigFraction.ZERO.denominator)
org.apache.commons.math.fraction.BigFraction.MINUS_ONE.numerator == orig(org.apache.commons.math.fraction.BigFraction.MINUS_ONE.numerator)
org.apache.commons.math.fraction.BigFraction.MINUS_ONE.denominator == orig(org.apache.commons.math.fraction.BigFraction.MINUS_ONE.denominator)
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.numerator == orig(org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.numerator)
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.denominator == orig(org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.denominator)
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.numerator)
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.denominator)
org.apache.commons.math.fraction.BigFraction.ONE_HALF.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE_HALF.numerator)
org.apache.commons.math.fraction.BigFraction.ONE_HALF.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE_HALF.denominator)
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.numerator)
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.denominator)
org.apache.commons.math.fraction.BigFraction.ONE_THIRD.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE_THIRD.numerator)
org.apache.commons.math.fraction.BigFraction.ONE_THIRD.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE_THIRD.denominator)
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.numerator == orig(org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.numerator)
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.denominator == orig(org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.denominator)
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.numerator == orig(org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.numerator)
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.denominator == orig(org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.denominator)
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.numerator == orig(org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.numerator)
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.denominator == orig(org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.denominator)
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.numerator == orig(org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.numerator)
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.denominator == orig(org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.denominator)
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.numerator == orig(org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.numerator)
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.denominator == orig(org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.denominator)
this.numerator == orig(this.numerator)
this.denominator == orig(this.denominator)
this.denominator has only one value
return.denominator has only one value
===========================================================================
org.apache.commons.math.fraction.BigFraction.reciprocal():::ENTER
this.denominator has only one value
===========================================================================
org.apache.commons.math.fraction.BigFraction.reciprocal():::EXIT
org.apache.commons.math.fraction.BigFraction.TWO == orig(org.apache.commons.math.fraction.BigFraction.TWO)
org.apache.commons.math.fraction.BigFraction.ONE == orig(org.apache.commons.math.fraction.BigFraction.ONE)
org.apache.commons.math.fraction.BigFraction.ZERO == orig(org.apache.commons.math.fraction.BigFraction.ZERO)
org.apache.commons.math.fraction.BigFraction.MINUS_ONE == orig(org.apache.commons.math.fraction.BigFraction.MINUS_ONE)
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS == orig(org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS)
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH == orig(org.apache.commons.math.fraction.BigFraction.ONE_FIFTH)
org.apache.commons.math.fraction.BigFraction.ONE_HALF == orig(org.apache.commons.math.fraction.BigFraction.ONE_HALF)
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER == orig(org.apache.commons.math.fraction.BigFraction.ONE_QUARTER)
org.apache.commons.math.fraction.BigFraction.ONE_THIRD == orig(org.apache.commons.math.fraction.BigFraction.ONE_THIRD)
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS == orig(org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS)
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS == orig(org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS)
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS == orig(org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS)
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS == orig(org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS)
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS == orig(org.apache.commons.math.fraction.BigFraction.TWO_THIRDS)
org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR == orig(org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR)
org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR.toString == orig(org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR.toString)
org.apache.commons.math.fraction.BigFraction.ONE_HUNDRED_DOUBLE == orig(org.apache.commons.math.fraction.BigFraction.ONE_HUNDRED_DOUBLE)
org.apache.commons.math.fraction.BigFraction.TWO.numerator == orig(org.apache.commons.math.fraction.BigFraction.TWO.numerator)
org.apache.commons.math.fraction.BigFraction.TWO.denominator == orig(org.apache.commons.math.fraction.BigFraction.TWO.denominator)
org.apache.commons.math.fraction.BigFraction.ONE.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE.numerator)
org.apache.commons.math.fraction.BigFraction.ONE.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE.denominator)
org.apache.commons.math.fraction.BigFraction.ZERO.numerator == orig(org.apache.commons.math.fraction.BigFraction.ZERO.numerator)
org.apache.commons.math.fraction.BigFraction.ZERO.denominator == orig(org.apache.commons.math.fraction.BigFraction.ZERO.denominator)
org.apache.commons.math.fraction.BigFraction.MINUS_ONE.numerator == orig(org.apache.commons.math.fraction.BigFraction.MINUS_ONE.numerator)
org.apache.commons.math.fraction.BigFraction.MINUS_ONE.denominator == orig(org.apache.commons.math.fraction.BigFraction.MINUS_ONE.denominator)
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.numerator == orig(org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.numerator)
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.denominator == orig(org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.denominator)
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.numerator)
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.denominator)
org.apache.commons.math.fraction.BigFraction.ONE_HALF.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE_HALF.numerator)
org.apache.commons.math.fraction.BigFraction.ONE_HALF.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE_HALF.denominator)
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.numerator)
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.denominator)
org.apache.commons.math.fraction.BigFraction.ONE_THIRD.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE_THIRD.numerator)
org.apache.commons.math.fraction.BigFraction.ONE_THIRD.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE_THIRD.denominator)
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.numerator == orig(org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.numerator)
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.denominator == orig(org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.denominator)
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.numerator == orig(org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.numerator)
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.denominator == orig(org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.denominator)
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.numerator == orig(org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.numerator)
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.denominator == orig(org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.denominator)
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.numerator == orig(org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.numerator)
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.denominator == orig(org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.denominator)
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.numerator == orig(org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.numerator)
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.denominator == orig(org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.denominator)
this.numerator == orig(this.numerator)
this.denominator == orig(this.denominator)
this.denominator has only one value
===========================================================================
org.apache.commons.math.fraction.BigFraction.reduce():::ENTER
===========================================================================
org.apache.commons.math.fraction.BigFraction.reduce():::EXIT
org.apache.commons.math.fraction.BigFraction.TWO == orig(org.apache.commons.math.fraction.BigFraction.TWO)
org.apache.commons.math.fraction.BigFraction.ONE == orig(org.apache.commons.math.fraction.BigFraction.ONE)
org.apache.commons.math.fraction.BigFraction.ZERO == orig(org.apache.commons.math.fraction.BigFraction.ZERO)
org.apache.commons.math.fraction.BigFraction.MINUS_ONE == orig(org.apache.commons.math.fraction.BigFraction.MINUS_ONE)
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS == orig(org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS)
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH == orig(org.apache.commons.math.fraction.BigFraction.ONE_FIFTH)
org.apache.commons.math.fraction.BigFraction.ONE_HALF == orig(org.apache.commons.math.fraction.BigFraction.ONE_HALF)
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER == orig(org.apache.commons.math.fraction.BigFraction.ONE_QUARTER)
org.apache.commons.math.fraction.BigFraction.ONE_THIRD == orig(org.apache.commons.math.fraction.BigFraction.ONE_THIRD)
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS == orig(org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS)
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS == orig(org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS)
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS == orig(org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS)
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS == orig(org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS)
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS == orig(org.apache.commons.math.fraction.BigFraction.TWO_THIRDS)
org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR == orig(org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR)
org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR.toString == orig(org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR.toString)
org.apache.commons.math.fraction.BigFraction.ONE_HUNDRED_DOUBLE == orig(org.apache.commons.math.fraction.BigFraction.ONE_HUNDRED_DOUBLE)
org.apache.commons.math.fraction.BigFraction.TWO.numerator == orig(org.apache.commons.math.fraction.BigFraction.TWO.numerator)
org.apache.commons.math.fraction.BigFraction.TWO.denominator == orig(org.apache.commons.math.fraction.BigFraction.TWO.denominator)
org.apache.commons.math.fraction.BigFraction.ONE.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE.numerator)
org.apache.commons.math.fraction.BigFraction.ONE.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE.denominator)
org.apache.commons.math.fraction.BigFraction.ZERO.numerator == orig(org.apache.commons.math.fraction.BigFraction.ZERO.numerator)
org.apache.commons.math.fraction.BigFraction.ZERO.denominator == orig(org.apache.commons.math.fraction.BigFraction.ZERO.denominator)
org.apache.commons.math.fraction.BigFraction.MINUS_ONE.numerator == orig(org.apache.commons.math.fraction.BigFraction.MINUS_ONE.numerator)
org.apache.commons.math.fraction.BigFraction.MINUS_ONE.denominator == orig(org.apache.commons.math.fraction.BigFraction.MINUS_ONE.denominator)
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.numerator == orig(org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.numerator)
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.denominator == orig(org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.denominator)
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.numerator)
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.denominator)
org.apache.commons.math.fraction.BigFraction.ONE_HALF.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE_HALF.numerator)
org.apache.commons.math.fraction.BigFraction.ONE_HALF.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE_HALF.denominator)
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.numerator)
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.denominator)
org.apache.commons.math.fraction.BigFraction.ONE_THIRD.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE_THIRD.numerator)
org.apache.commons.math.fraction.BigFraction.ONE_THIRD.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE_THIRD.denominator)
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.numerator == orig(org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.numerator)
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.denominator == orig(org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.denominator)
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.numerator == orig(org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.numerator)
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.denominator == orig(org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.denominator)
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.numerator == orig(org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.numerator)
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.denominator == orig(org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.denominator)
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.numerator == orig(org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.numerator)
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.denominator == orig(org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.denominator)
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.numerator == orig(org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.numerator)
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.denominator == orig(org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.denominator)
this.numerator == orig(this.numerator)
this.denominator == orig(this.denominator)
===========================================================================
org.apache.commons.math.fraction.BigFraction.subtract(org.apache.commons.math.fraction.BigFraction):::ENTER
===========================================================================
org.apache.commons.math.fraction.BigFraction.subtract(org.apache.commons.math.fraction.BigFraction):::EXIT1093
fraction.numerator has only one value
fraction.denominator has only one value
orig(fraction) has only one value
===========================================================================
org.apache.commons.math.fraction.BigFraction.subtract(org.apache.commons.math.fraction.BigFraction):::EXIT1105
===========================================================================
org.apache.commons.math.fraction.BigFraction.subtract(org.apache.commons.math.fraction.BigFraction):::EXIT
org.apache.commons.math.fraction.BigFraction.TWO == orig(org.apache.commons.math.fraction.BigFraction.TWO)
org.apache.commons.math.fraction.BigFraction.ONE == orig(org.apache.commons.math.fraction.BigFraction.ONE)
org.apache.commons.math.fraction.BigFraction.ZERO == orig(org.apache.commons.math.fraction.BigFraction.ZERO)
org.apache.commons.math.fraction.BigFraction.MINUS_ONE == orig(org.apache.commons.math.fraction.BigFraction.MINUS_ONE)
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS == orig(org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS)
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH == orig(org.apache.commons.math.fraction.BigFraction.ONE_FIFTH)
org.apache.commons.math.fraction.BigFraction.ONE_HALF == orig(org.apache.commons.math.fraction.BigFraction.ONE_HALF)
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER == orig(org.apache.commons.math.fraction.BigFraction.ONE_QUARTER)
org.apache.commons.math.fraction.BigFraction.ONE_THIRD == orig(org.apache.commons.math.fraction.BigFraction.ONE_THIRD)
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS == orig(org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS)
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS == orig(org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS)
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS == orig(org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS)
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS == orig(org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS)
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS == orig(org.apache.commons.math.fraction.BigFraction.TWO_THIRDS)
org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR == orig(org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR)
org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR.toString == orig(org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR.toString)
org.apache.commons.math.fraction.BigFraction.ONE_HUNDRED_DOUBLE == orig(org.apache.commons.math.fraction.BigFraction.ONE_HUNDRED_DOUBLE)
org.apache.commons.math.fraction.BigFraction.TWO.numerator == orig(org.apache.commons.math.fraction.BigFraction.TWO.numerator)
org.apache.commons.math.fraction.BigFraction.TWO.denominator == orig(org.apache.commons.math.fraction.BigFraction.TWO.denominator)
org.apache.commons.math.fraction.BigFraction.ONE.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE.numerator)
org.apache.commons.math.fraction.BigFraction.ONE.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE.denominator)
org.apache.commons.math.fraction.BigFraction.ZERO.numerator == orig(org.apache.commons.math.fraction.BigFraction.ZERO.numerator)
org.apache.commons.math.fraction.BigFraction.ZERO.denominator == orig(org.apache.commons.math.fraction.BigFraction.ZERO.denominator)
org.apache.commons.math.fraction.BigFraction.MINUS_ONE.numerator == orig(org.apache.commons.math.fraction.BigFraction.MINUS_ONE.numerator)
org.apache.commons.math.fraction.BigFraction.MINUS_ONE.denominator == orig(org.apache.commons.math.fraction.BigFraction.MINUS_ONE.denominator)
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.numerator == orig(org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.numerator)
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.denominator == orig(org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.denominator)
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.numerator)
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.denominator)
org.apache.commons.math.fraction.BigFraction.ONE_HALF.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE_HALF.numerator)
org.apache.commons.math.fraction.BigFraction.ONE_HALF.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE_HALF.denominator)
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.numerator)
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.denominator)
org.apache.commons.math.fraction.BigFraction.ONE_THIRD.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE_THIRD.numerator)
org.apache.commons.math.fraction.BigFraction.ONE_THIRD.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE_THIRD.denominator)
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.numerator == orig(org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.numerator)
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.denominator == orig(org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.denominator)
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.numerator == orig(org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.numerator)
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.denominator == orig(org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.denominator)
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.numerator == orig(org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.numerator)
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.denominator == orig(org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.denominator)
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.numerator == orig(org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.numerator)
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.denominator == orig(org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.denominator)
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.numerator == orig(org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.numerator)
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.denominator == orig(org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.denominator)
this.numerator == orig(this.numerator)
this.denominator == orig(this.denominator)
fraction.numerator == orig(fraction.numerator)
fraction.denominator == orig(fraction.denominator)
===========================================================================
org.apache.commons.math.fraction.BigFractionField:::CLASS
===========================================================================
org.apache.commons.math.fraction.BigFractionField:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math.fraction.BigFractionField.BigFractionField():::EXIT
===========================================================================
org.apache.commons.math.fraction.BigFractionField.getInstance():::ENTER
===========================================================================
org.apache.commons.math.fraction.BigFractionField.getInstance():::EXIT
return has only one value
===========================================================================
org.apache.commons.math.fraction.BigFractionField.getOne():::ENTER
===========================================================================
org.apache.commons.math.fraction.BigFractionField.getOne():::EXIT
return has only one value
org.apache.commons.math.fraction.BigFraction.TWO has only one value
org.apache.commons.math.fraction.BigFraction.ONE has only one value
org.apache.commons.math.fraction.BigFraction.ZERO has only one value
org.apache.commons.math.fraction.BigFraction.MINUS_ONE has only one value
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS has only one value
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH has only one value
org.apache.commons.math.fraction.BigFraction.ONE_HALF has only one value
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER has only one value
org.apache.commons.math.fraction.BigFraction.ONE_THIRD has only one value
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS has only one value
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS has only one value
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS has only one value
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS has only one value
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS has only one value
org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR has only one value
org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR.toString == "denominator must be different from 0"
org.apache.commons.math.fraction.BigFraction.ONE_HUNDRED_DOUBLE has only one value
org.apache.commons.math.fraction.BigFraction.TWO.numerator has only one value
org.apache.commons.math.fraction.BigFraction.TWO.denominator has only one value
org.apache.commons.math.fraction.BigFraction.ONE.numerator has only one value
org.apache.commons.math.fraction.BigFraction.ONE.denominator has only one value
org.apache.commons.math.fraction.BigFraction.ZERO.numerator has only one value
org.apache.commons.math.fraction.BigFraction.ZERO.denominator has only one value
org.apache.commons.math.fraction.BigFraction.MINUS_ONE.numerator has only one value
org.apache.commons.math.fraction.BigFraction.MINUS_ONE.denominator has only one value
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.numerator has only one value
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.denominator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.numerator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.denominator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_HALF.numerator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_HALF.denominator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.numerator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.denominator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_THIRD.numerator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_THIRD.denominator has only one value
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.numerator has only one value
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.denominator has only one value
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.numerator has only one value
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.denominator has only one value
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.numerator has only one value
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.denominator has only one value
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.numerator has only one value
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.denominator has only one value
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.numerator has only one value
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.denominator has only one value
return.numerator has only one value
return.denominator has only one value
===========================================================================
org.apache.commons.math.fraction.BigFractionField.getZero():::ENTER
===========================================================================
org.apache.commons.math.fraction.BigFractionField.getZero():::EXIT
return has only one value
org.apache.commons.math.fraction.BigFraction.TWO has only one value
org.apache.commons.math.fraction.BigFraction.ONE has only one value
org.apache.commons.math.fraction.BigFraction.ZERO has only one value
org.apache.commons.math.fraction.BigFraction.MINUS_ONE has only one value
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS has only one value
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH has only one value
org.apache.commons.math.fraction.BigFraction.ONE_HALF has only one value
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER has only one value
org.apache.commons.math.fraction.BigFraction.ONE_THIRD has only one value
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS has only one value
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS has only one value
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS has only one value
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS has only one value
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS has only one value
org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR has only one value
org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR.toString == "denominator must be different from 0"
org.apache.commons.math.fraction.BigFraction.ONE_HUNDRED_DOUBLE has only one value
org.apache.commons.math.fraction.BigFraction.TWO.numerator has only one value
org.apache.commons.math.fraction.BigFraction.TWO.denominator has only one value
org.apache.commons.math.fraction.BigFraction.ONE.numerator has only one value
org.apache.commons.math.fraction.BigFraction.ONE.denominator has only one value
org.apache.commons.math.fraction.BigFraction.ZERO.numerator has only one value
org.apache.commons.math.fraction.BigFraction.ZERO.denominator has only one value
org.apache.commons.math.fraction.BigFraction.MINUS_ONE.numerator has only one value
org.apache.commons.math.fraction.BigFraction.MINUS_ONE.denominator has only one value
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.numerator has only one value
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.denominator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.numerator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.denominator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_HALF.numerator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_HALF.denominator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.numerator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.denominator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_THIRD.numerator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_THIRD.denominator has only one value
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.numerator has only one value
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.denominator has only one value
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.numerator has only one value
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.denominator has only one value
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.numerator has only one value
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.denominator has only one value
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.numerator has only one value
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.denominator has only one value
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.numerator has only one value
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.denominator has only one value
return.numerator has only one value
return.denominator has only one value
===========================================================================
org.apache.commons.math.linear.AbstractFieldMatrix:::OBJECT
this.getClass().getName() == org.apache.commons.math.linear.Array2DRowFieldMatrix.class
this.field has only one value
this.field.getClass().getName() == org.apache.commons.math.fraction.BigFractionField.class
===========================================================================
org.apache.commons.math.linear.AbstractFieldMatrix.AbstractFieldMatrix(org.apache.commons.math.Field):::ENTER
field has only one value
field.getClass().getName() == org.apache.commons.math.fraction.BigFractionField.class
===========================================================================
org.apache.commons.math.linear.AbstractFieldMatrix.AbstractFieldMatrix(org.apache.commons.math.Field):::EXIT
===========================================================================
org.apache.commons.math.linear.AbstractFieldMatrix.AbstractFieldMatrix(org.apache.commons.math.Field, int, int):::ENTER
field has only one value
field.getClass().getName() == org.apache.commons.math.fraction.BigFractionField.class
===========================================================================
org.apache.commons.math.linear.AbstractFieldMatrix.AbstractFieldMatrix(org.apache.commons.math.Field, int, int):::EXIT
===========================================================================
org.apache.commons.math.linear.AbstractFieldMatrix.buildArray(org.apache.commons.math.Field, int, int):::ENTER
field has only one value
field.getClass().getName() == org.apache.commons.math.fraction.BigFractionField.class
rows >= 1
columns >= 1
===========================================================================
org.apache.commons.math.linear.AbstractFieldMatrix.buildArray(org.apache.commons.math.Field, int, int):::EXIT137
===========================================================================
org.apache.commons.math.linear.AbstractFieldMatrix.buildArray(org.apache.commons.math.Field, int, int):::EXIT
return.getClass().getName() == org.apache.commons.math.fraction.BigFraction[][].class
return[] elements != null
size(return[]) >= 1
===========================================================================
org.apache.commons.math.linear.AbstractFieldMatrix.extractField(org.apache.commons.math.FieldElement[][]):::ENTER
d.getClass().getName() == org.apache.commons.math.fraction.BigFraction[][].class
d[] elements != null
size(d[]) >= 1
===========================================================================
org.apache.commons.math.linear.AbstractFieldMatrix.extractField(org.apache.commons.math.FieldElement[][]):::EXIT
d[] == orig(d[])
d[] elements != null
return has only one value
return.getClass().getName() == org.apache.commons.math.fraction.BigFractionField.class
===========================================================================
org.apache.commons.math.linear.AbstractFieldMatrix.getField():::ENTER
===========================================================================
org.apache.commons.math.linear.AbstractFieldMatrix.getField():::EXIT
this.field == orig(this.field)
this.field.getClass().getName() == orig(this.field.getClass().getName())
return has only one value
return.getClass().getName() == org.apache.commons.math.fraction.BigFractionField.class
===========================================================================
org.apache.commons.math.linear.AbstractFieldMatrix.isSquare():::ENTER
===========================================================================
org.apache.commons.math.linear.AbstractFieldMatrix.isSquare():::EXIT
this.field == orig(this.field)
this.field.getClass().getName() == orig(this.field.getClass().getName())
return == true
===========================================================================
org.apache.commons.math.linear.AbstractFieldMatrix.isSquare():::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math.linear.AbstractFieldMatrix.walkInOptimizedOrder(org.apache.commons.math.linear.FieldMatrixChangingVisitor):::ENTER
visitor.getClass().getName() == org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer$1.class
===========================================================================
org.apache.commons.math.linear.AbstractFieldMatrix.walkInOptimizedOrder(org.apache.commons.math.linear.FieldMatrixChangingVisitor):::EXIT
this.field == orig(this.field)
this.field.getClass().getName() == orig(this.field.getClass().getName())
return has only one value
return.getClass().getName() == org.apache.commons.math.fraction.BigFraction.class
===========================================================================
org.apache.commons.math.linear.AbstractFieldMatrix.walkInOptimizedOrder(org.apache.commons.math.linear.FieldMatrixPreservingVisitor):::ENTER
visitor.getClass().getName() == org.apache.commons.math.linear.MatrixUtils$BigFractionMatrixConverter.class
===========================================================================
org.apache.commons.math.linear.AbstractFieldMatrix.walkInOptimizedOrder(org.apache.commons.math.linear.FieldMatrixPreservingVisitor):::EXIT
this.field == orig(this.field)
this.field.getClass().getName() == orig(this.field.getClass().getName())
return has only one value
return.getClass().getName() == org.apache.commons.math.fraction.BigFraction.class
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix:::OBJECT
this.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
this.lu == null
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.AbstractRealMatrix():::EXIT
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor):::ENTER
visitor.getClass().getName() == org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector.class
===========================================================================
org.apache.commons.math.linear.AbstractRealMatrix.walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor):::EXIT
this.lu == orig(this.lu)
return >= 0.0
===========================================================================
org.apache.commons.math.linear.Array2DRowFieldMatrix:::CLASS
org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_ROW_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == "matrix must have at least one row"
org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_COLUMN_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == "matrix must have at least one column"
org.apache.commons.math.linear.Array2DRowFieldMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowFieldMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == "some rows have length {0} while others have length {1}"
org.apache.commons.math.linear.Array2DRowFieldMatrix.NO_ENTRY_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowFieldMatrix.NO_ENTRY_MESSAGE.toString == "no entry at indices ({0}, {1}) in a {2}x{3} matrix"
org.apache.commons.math.linear.Array2DRowFieldMatrix.VECTOR_LENGTHS_MISMATCH has only one value
org.apache.commons.math.linear.Array2DRowFieldMatrix.VECTOR_LENGTHS_MISMATCH.toString == "vector length mismatch: got {0} but expected {1}"
===========================================================================
org.apache.commons.math.linear.Array2DRowFieldMatrix:::OBJECT
this.data.getClass().getName() == org.apache.commons.math.fraction.BigFraction[][].class
this.data[] elements != null
this.field has only one value
this.field.getClass().getName() == org.apache.commons.math.fraction.BigFractionField.class
size(this.data[]) >= 1
===========================================================================
org.apache.commons.math.linear.Array2DRowFieldMatrix.Array2DRowFieldMatrix(org.apache.commons.math.Field, int, int):::ENTER
field has only one value
field.getClass().getName() == org.apache.commons.math.fraction.BigFractionField.class
===========================================================================
org.apache.commons.math.linear.Array2DRowFieldMatrix.Array2DRowFieldMatrix(org.apache.commons.math.Field, int, int):::EXIT
===========================================================================
org.apache.commons.math.linear.Array2DRowFieldMatrix.Array2DRowFieldMatrix(org.apache.commons.math.FieldElement[][], boolean):::ENTER
d.getClass().getName() == org.apache.commons.math.fraction.BigFraction[][].class
d[] elements != null
copyArray == false
size(d[]) >= 1
===========================================================================
org.apache.commons.math.linear.Array2DRowFieldMatrix.Array2DRowFieldMatrix(org.apache.commons.math.FieldElement[][], boolean):::EXIT
d[] == orig(d[])
d[] elements != null
===========================================================================
org.apache.commons.math.linear.Array2DRowFieldMatrix.copyOut():::ENTER
===========================================================================
org.apache.commons.math.linear.Array2DRowFieldMatrix.copyOut():::EXIT
org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_ROW_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_ROW_MESSAGE)
org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_COLUMN_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_COLUMN_MESSAGE)
org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowFieldMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE)
org.apache.commons.math.linear.Array2DRowFieldMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowFieldMatrix.NO_ENTRY_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.NO_ENTRY_MESSAGE)
org.apache.commons.math.linear.Array2DRowFieldMatrix.NO_ENTRY_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.NO_ENTRY_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowFieldMatrix.VECTOR_LENGTHS_MISMATCH == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.VECTOR_LENGTHS_MISMATCH)
org.apache.commons.math.linear.Array2DRowFieldMatrix.VECTOR_LENGTHS_MISMATCH.toString == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.VECTOR_LENGTHS_MISMATCH.toString)
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.field == orig(this.field)
this.field.getClass().getName() == orig(this.field.getClass().getName())
return.getClass().getName() == org.apache.commons.math.fraction.BigFraction[][].class
return[] elements != null
size(return[]) >= 1
===========================================================================
org.apache.commons.math.linear.Array2DRowFieldMatrix.getColumnDimension():::ENTER
===========================================================================
org.apache.commons.math.linear.Array2DRowFieldMatrix.getColumnDimension():::EXIT
org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_ROW_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_ROW_MESSAGE)
org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_COLUMN_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_COLUMN_MESSAGE)
org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowFieldMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE)
org.apache.commons.math.linear.Array2DRowFieldMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowFieldMatrix.NO_ENTRY_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.NO_ENTRY_MESSAGE)
org.apache.commons.math.linear.Array2DRowFieldMatrix.NO_ENTRY_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.NO_ENTRY_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowFieldMatrix.VECTOR_LENGTHS_MISMATCH == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.VECTOR_LENGTHS_MISMATCH)
org.apache.commons.math.linear.Array2DRowFieldMatrix.VECTOR_LENGTHS_MISMATCH.toString == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.VECTOR_LENGTHS_MISMATCH.toString)
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.field == orig(this.field)
this.field.getClass().getName() == orig(this.field.getClass().getName())
return >= 1
===========================================================================
org.apache.commons.math.linear.Array2DRowFieldMatrix.getData():::ENTER
===========================================================================
org.apache.commons.math.linear.Array2DRowFieldMatrix.getData():::EXIT
org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_ROW_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_ROW_MESSAGE)
org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_COLUMN_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_COLUMN_MESSAGE)
org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowFieldMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE)
org.apache.commons.math.linear.Array2DRowFieldMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowFieldMatrix.NO_ENTRY_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.NO_ENTRY_MESSAGE)
org.apache.commons.math.linear.Array2DRowFieldMatrix.NO_ENTRY_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.NO_ENTRY_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowFieldMatrix.VECTOR_LENGTHS_MISMATCH == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.VECTOR_LENGTHS_MISMATCH)
org.apache.commons.math.linear.Array2DRowFieldMatrix.VECTOR_LENGTHS_MISMATCH.toString == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.VECTOR_LENGTHS_MISMATCH.toString)
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.field == orig(this.field)
this.field.getClass().getName() == orig(this.field.getClass().getName())
return.getClass().getName() == org.apache.commons.math.fraction.BigFraction[][].class
return[] elements != null
size(return[]) >= 1
===========================================================================
org.apache.commons.math.linear.Array2DRowFieldMatrix.getEntry(int, int):::ENTER
row >= 0
column >= 0
===========================================================================
org.apache.commons.math.linear.Array2DRowFieldMatrix.getEntry(int, int):::EXIT
org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_ROW_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_ROW_MESSAGE)
org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_COLUMN_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_COLUMN_MESSAGE)
org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowFieldMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE)
org.apache.commons.math.linear.Array2DRowFieldMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowFieldMatrix.NO_ENTRY_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.NO_ENTRY_MESSAGE)
org.apache.commons.math.linear.Array2DRowFieldMatrix.NO_ENTRY_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.NO_ENTRY_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowFieldMatrix.VECTOR_LENGTHS_MISMATCH == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.VECTOR_LENGTHS_MISMATCH)
org.apache.commons.math.linear.Array2DRowFieldMatrix.VECTOR_LENGTHS_MISMATCH.toString == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.VECTOR_LENGTHS_MISMATCH.toString)
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.field == orig(this.field)
this.field.getClass().getName() == orig(this.field.getClass().getName())
return.getClass().getName() == org.apache.commons.math.fraction.BigFraction.class
===========================================================================
org.apache.commons.math.linear.Array2DRowFieldMatrix.getRowDimension():::ENTER
===========================================================================
org.apache.commons.math.linear.Array2DRowFieldMatrix.getRowDimension():::EXIT
org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_ROW_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_ROW_MESSAGE)
org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_COLUMN_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_COLUMN_MESSAGE)
org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowFieldMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE)
org.apache.commons.math.linear.Array2DRowFieldMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowFieldMatrix.NO_ENTRY_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.NO_ENTRY_MESSAGE)
org.apache.commons.math.linear.Array2DRowFieldMatrix.NO_ENTRY_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.NO_ENTRY_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowFieldMatrix.VECTOR_LENGTHS_MISMATCH == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.VECTOR_LENGTHS_MISMATCH)
org.apache.commons.math.linear.Array2DRowFieldMatrix.VECTOR_LENGTHS_MISMATCH.toString == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.VECTOR_LENGTHS_MISMATCH.toString)
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.field == orig(this.field)
this.field.getClass().getName() == orig(this.field.getClass().getName())
return >= 1
===========================================================================
org.apache.commons.math.linear.Array2DRowFieldMatrix.setEntry(int, int, org.apache.commons.math.FieldElement):::ENTER
row >= 0
column >= 0
value has only one value
value.getClass().getName() == org.apache.commons.math.fraction.BigFraction.class
===========================================================================
org.apache.commons.math.linear.Array2DRowFieldMatrix.setEntry(int, int, org.apache.commons.math.FieldElement):::EXIT
org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_ROW_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_ROW_MESSAGE)
org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_COLUMN_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_COLUMN_MESSAGE)
org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowFieldMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE)
org.apache.commons.math.linear.Array2DRowFieldMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowFieldMatrix.NO_ENTRY_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.NO_ENTRY_MESSAGE)
org.apache.commons.math.linear.Array2DRowFieldMatrix.NO_ENTRY_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.NO_ENTRY_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowFieldMatrix.VECTOR_LENGTHS_MISMATCH == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.VECTOR_LENGTHS_MISMATCH)
org.apache.commons.math.linear.Array2DRowFieldMatrix.VECTOR_LENGTHS_MISMATCH.toString == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.VECTOR_LENGTHS_MISMATCH.toString)
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.field == orig(this.field)
this.field.getClass().getName() == orig(this.field.getClass().getName())
===========================================================================
org.apache.commons.math.linear.Array2DRowFieldMatrix.walkInRowOrder(org.apache.commons.math.linear.FieldMatrixChangingVisitor):::ENTER
visitor.getClass().getName() == org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer$1.class
===========================================================================
org.apache.commons.math.linear.Array2DRowFieldMatrix.walkInRowOrder(org.apache.commons.math.linear.FieldMatrixChangingVisitor):::EXIT
org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_ROW_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_ROW_MESSAGE)
org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_COLUMN_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_COLUMN_MESSAGE)
org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowFieldMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE)
org.apache.commons.math.linear.Array2DRowFieldMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowFieldMatrix.NO_ENTRY_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.NO_ENTRY_MESSAGE)
org.apache.commons.math.linear.Array2DRowFieldMatrix.NO_ENTRY_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.NO_ENTRY_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowFieldMatrix.VECTOR_LENGTHS_MISMATCH == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.VECTOR_LENGTHS_MISMATCH)
org.apache.commons.math.linear.Array2DRowFieldMatrix.VECTOR_LENGTHS_MISMATCH.toString == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.VECTOR_LENGTHS_MISMATCH.toString)
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.field == orig(this.field)
this.field.getClass().getName() == orig(this.field.getClass().getName())
return has only one value
return.getClass().getName() == org.apache.commons.math.fraction.BigFraction.class
===========================================================================
org.apache.commons.math.linear.Array2DRowFieldMatrix.walkInRowOrder(org.apache.commons.math.linear.FieldMatrixPreservingVisitor):::ENTER
visitor.getClass().getName() == org.apache.commons.math.linear.MatrixUtils$BigFractionMatrixConverter.class
===========================================================================
org.apache.commons.math.linear.Array2DRowFieldMatrix.walkInRowOrder(org.apache.commons.math.linear.FieldMatrixPreservingVisitor):::EXIT
org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_ROW_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_ROW_MESSAGE)
org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_COLUMN_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_COLUMN_MESSAGE)
org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowFieldMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE)
org.apache.commons.math.linear.Array2DRowFieldMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowFieldMatrix.NO_ENTRY_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.NO_ENTRY_MESSAGE)
org.apache.commons.math.linear.Array2DRowFieldMatrix.NO_ENTRY_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.NO_ENTRY_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowFieldMatrix.VECTOR_LENGTHS_MISMATCH == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.VECTOR_LENGTHS_MISMATCH)
org.apache.commons.math.linear.Array2DRowFieldMatrix.VECTOR_LENGTHS_MISMATCH.toString == orig(org.apache.commons.math.linear.Array2DRowFieldMatrix.VECTOR_LENGTHS_MISMATCH.toString)
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.field == orig(this.field)
this.field.getClass().getName() == orig(this.field.getClass().getName())
return has only one value
return.getClass().getName() == org.apache.commons.math.fraction.BigFraction.class
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix:::CLASS
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == "matrix must have at least one row"
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == "matrix must have at least one column"
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == "some rows have length {0} while others have length {1}"
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == "no entry at indices ({0}, {1}) in a {2}x{3} matrix"
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == "vector length mismatch: got {0} but expected {1}"
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix:::OBJECT
this.data.getClass().getName() == double[][].class
this.data[] elements != null
this.lu == null
size(this.data[]) >= 1
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.Array2DRowRealMatrix(double[][], boolean):::ENTER
d.getClass().getName() == double[][].class
d[] elements != null
size(d[]) >= 1
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.Array2DRowRealMatrix(double[][], boolean):::EXIT
d[] == orig(d[])
d[] elements != null
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.copyIn(double[][]):::ENTER
this.data == null
in.getClass().getName() == double[][].class
in[] elements != null
size(in[]) == 4
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.copyIn(double[][]):::EXIT
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString)
this.lu == orig(this.lu)
in[] == orig(in[])
in[] elements != null
size(this.data[]) == 4
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.getColumnDimension():::ENTER
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.getColumnDimension():::EXIT
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString)
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
return >= 1
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.getDataRef():::ENTER
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.getDataRef():::EXIT
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString)
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
return.getClass().getName() == double[][].class
return[] elements != null
size(return[]) >= 1
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.getEntry(int, int):::ENTER
row >= 0
column >= 0
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.getEntry(int, int):::EXIT
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString)
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.getRowDimension():::ENTER
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.getRowDimension():::EXIT
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString)
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
return >= 1
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.multiply(org.apache.commons.math.linear.Array2DRowRealMatrix):::ENTER
m.data.getClass().getName() == double[][].class
m.data[] elements != null
m.lu == null
size(m.data[]) >= 1
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.multiply(org.apache.commons.math.linear.Array2DRowRealMatrix):::EXIT
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString)
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
m.data == orig(m.data)
m.data.getClass().getName() == orig(m.data.getClass().getName())
m.data[] == orig(m.data[])
m.lu == orig(m.lu)
m.data.getClass().getName() == double[][].class
m.data[] elements != null
m.lu == null
return.data.getClass().getName() == double[][].class
return.data[] elements != null
return.lu == null
size(m.data[]) >= 1
size(return.data[]) >= 1
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.setSubMatrix(double[][], int, int):::ENTER
this.data == null
subMatrix.getClass().getName() == double[][].class
subMatrix[] elements != null
row == 0
column == 0
size(subMatrix[]) == 4
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.setSubMatrix(double[][], int, int):::EXIT
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString)
this.lu == orig(this.lu)
subMatrix[] == orig(subMatrix[])
subMatrix[] elements != null
size(this.data[]) == 4
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor):::ENTER
visitor.getClass().getName() == org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector.class
===========================================================================
org.apache.commons.math.linear.Array2DRowRealMatrix.walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor):::EXIT
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString)
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.lu == orig(this.lu)
return >= 0.0
===========================================================================
org.apache.commons.math.linear.DefaultFieldMatrixChangingVisitor:::OBJECT
this.zero has only one value
this.zero.getClass().getName() == org.apache.commons.math.fraction.BigFraction.class
===========================================================================
org.apache.commons.math.linear.DefaultFieldMatrixChangingVisitor.DefaultFieldMatrixChangingVisitor(org.apache.commons.math.FieldElement):::ENTER
zero has only one value
zero.getClass().getName() == org.apache.commons.math.fraction.BigFraction.class
===========================================================================
org.apache.commons.math.linear.DefaultFieldMatrixChangingVisitor.DefaultFieldMatrixChangingVisitor(org.apache.commons.math.FieldElement):::EXIT
===========================================================================
org.apache.commons.math.linear.DefaultFieldMatrixChangingVisitor.end():::ENTER
===========================================================================
org.apache.commons.math.linear.DefaultFieldMatrixChangingVisitor.end():::EXIT
this.zero == orig(this.zero)
this.zero.getClass().getName() == orig(this.zero.getClass().getName())
return has only one value
return.getClass().getName() == org.apache.commons.math.fraction.BigFraction.class
===========================================================================
org.apache.commons.math.linear.DefaultFieldMatrixChangingVisitor.start(int, int, int, int, int, int):::ENTER
startRow == 0
startColumn == 0
===========================================================================
org.apache.commons.math.linear.DefaultFieldMatrixChangingVisitor.start(int, int, int, int, int, int):::EXIT
this.zero == orig(this.zero)
this.zero.getClass().getName() == orig(this.zero.getClass().getName())
===========================================================================
org.apache.commons.math.linear.DefaultFieldMatrixPreservingVisitor:::OBJECT
this.zero has only one value
this.zero.getClass().getName() == org.apache.commons.math.fraction.BigFraction.class
===========================================================================
org.apache.commons.math.linear.DefaultFieldMatrixPreservingVisitor.DefaultFieldMatrixPreservingVisitor(org.apache.commons.math.FieldElement):::ENTER
zero has only one value
zero.getClass().getName() == org.apache.commons.math.fraction.BigFraction.class
===========================================================================
org.apache.commons.math.linear.DefaultFieldMatrixPreservingVisitor.DefaultFieldMatrixPreservingVisitor(org.apache.commons.math.FieldElement):::EXIT
===========================================================================
org.apache.commons.math.linear.DefaultFieldMatrixPreservingVisitor.end():::ENTER
===========================================================================
org.apache.commons.math.linear.DefaultFieldMatrixPreservingVisitor.end():::EXIT
this.zero == orig(this.zero)
this.zero.getClass().getName() == orig(this.zero.getClass().getName())
return has only one value
return.getClass().getName() == org.apache.commons.math.fraction.BigFraction.class
===========================================================================
org.apache.commons.math.linear.FieldLUDecompositionImpl$Solver:::CLASS
===========================================================================
org.apache.commons.math.linear.FieldLUDecompositionImpl$Solver:::OBJECT
this.field has only one value
this.field.getClass().getName() == org.apache.commons.math.fraction.BigFractionField.class
this.lu.getClass().getName() == org.apache.commons.math.fraction.BigFraction[][].class
this.lu[] elements != null
this.pivot[] elements >= 0
this.pivot[] sorted by <
this.singular == false
size(this.lu[]) >= 1
size(this.pivot[]) >= 1
===========================================================================
org.apache.commons.math.linear.FieldLUDecompositionImpl$Solver.Solver(org.apache.commons.math.Field, org.apache.commons.math.FieldElement[][], int[], boolean):::ENTER
field has only one value
field.getClass().getName() == org.apache.commons.math.fraction.BigFractionField.class
lu.getClass().getName() == org.apache.commons.math.fraction.BigFraction[][].class
lu[] elements != null
pivot[] elements >= 0
pivot[] sorted by <
singular == false
===========================================================================
org.apache.commons.math.linear.FieldLUDecompositionImpl$Solver.Solver(org.apache.commons.math.Field, org.apache.commons.math.FieldElement[][], int[], boolean):::EXIT
lu[] == orig(lu[])
pivot[] == orig(pivot[])
lu[] elements != null
pivot[] elements >= 0
pivot[] sorted by <
===========================================================================
org.apache.commons.math.linear.FieldLUDecompositionImpl$Solver.getInverse():::ENTER
===========================================================================
org.apache.commons.math.linear.FieldLUDecompositionImpl$Solver.getInverse():::EXIT
this.field == orig(this.field)
this.field.getClass().getName() == orig(this.field.getClass().getName())
this.lu == orig(this.lu)
this.lu.getClass().getName() == orig(this.lu.getClass().getName())
this.lu[] == orig(this.lu[])
this.pivot == orig(this.pivot)
this.pivot[] == orig(this.pivot[])
this.singular == orig(this.singular)
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowFieldMatrix.class
===========================================================================
org.apache.commons.math.linear.FieldLUDecompositionImpl$Solver.solve(org.apache.commons.math.FieldElement[]):::ENTER
b.getClass().getName() == org.apache.commons.math.fraction.BigFraction[].class
b[] elements has only one value
===========================================================================
org.apache.commons.math.linear.FieldLUDecompositionImpl$Solver.solve(org.apache.commons.math.FieldElement[]):::EXIT
this.field == orig(this.field)
this.field.getClass().getName() == orig(this.field.getClass().getName())
this.lu == orig(this.lu)
this.lu.getClass().getName() == orig(this.lu.getClass().getName())
this.lu[] == orig(this.lu[])
this.pivot == orig(this.pivot)
this.pivot[] == orig(this.pivot[])
this.singular == orig(this.singular)
b[] == orig(b[])
b[] elements has only one value
return.getClass().getName() == org.apache.commons.math.fraction.BigFraction[].class
===========================================================================
org.apache.commons.math.linear.FieldLUDecompositionImpl$Solver.solve(org.apache.commons.math.linear.FieldMatrix):::ENTER
b.getClass().getName() == org.apache.commons.math.linear.Array2DRowFieldMatrix.class
===========================================================================
org.apache.commons.math.linear.FieldLUDecompositionImpl$Solver.solve(org.apache.commons.math.linear.FieldMatrix):::EXIT
this.field == orig(this.field)
this.field.getClass().getName() == orig(this.field.getClass().getName())
this.lu == orig(this.lu)
this.lu.getClass().getName() == orig(this.lu.getClass().getName())
this.lu[] == orig(this.lu[])
this.pivot == orig(this.pivot)
this.pivot[] == orig(this.pivot[])
this.singular == orig(this.singular)
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowFieldMatrix.class
===========================================================================
org.apache.commons.math.linear.FieldLUDecompositionImpl:::OBJECT
this.field has only one value
this.field.getClass().getName() == org.apache.commons.math.fraction.BigFractionField.class
this.lu.getClass().getName() == org.apache.commons.math.fraction.BigFraction[][].class
this.lu[] elements != null
this.pivot[] elements >= 0
this.pivot[] sorted by <
this.even == true
this.singular == false
this.cachedL == null
this.cachedU == null
this.cachedP == null
size(this.lu[]) >= 1
size(this.pivot[]) >= 1
===========================================================================
org.apache.commons.math.linear.FieldLUDecompositionImpl.FieldLUDecompositionImpl(org.apache.commons.math.linear.FieldMatrix):::ENTER
matrix.getClass().getName() == org.apache.commons.math.linear.Array2DRowFieldMatrix.class
===========================================================================
org.apache.commons.math.linear.FieldLUDecompositionImpl.FieldLUDecompositionImpl(org.apache.commons.math.linear.FieldMatrix):::EXIT152
===========================================================================
org.apache.commons.math.linear.FieldLUDecompositionImpl.FieldLUDecompositionImpl(org.apache.commons.math.linear.FieldMatrix):::EXIT
===========================================================================
org.apache.commons.math.linear.FieldLUDecompositionImpl.getSolver():::ENTER
===========================================================================
org.apache.commons.math.linear.FieldLUDecompositionImpl.getSolver():::EXIT
this.field == orig(this.field)
this.field.getClass().getName() == orig(this.field.getClass().getName())
this.lu == orig(this.lu)
this.lu.getClass().getName() == orig(this.lu.getClass().getName())
this.lu[] == orig(this.lu[])
this.pivot == orig(this.pivot)
this.pivot[] == orig(this.pivot[])
this.even == orig(this.even)
this.singular == orig(this.singular)
this.cachedL == orig(this.cachedL)
this.cachedU == orig(this.cachedU)
this.cachedP == orig(this.cachedP)
return.getClass().getName() == org.apache.commons.math.linear.FieldLUDecompositionImpl$Solver.class
===========================================================================
org.apache.commons.math.linear.MatrixUtils$BigFractionMatrixConverter:::OBJECT
this.data.getClass().getName() == double[][].class
this.data[] elements != null
this.zero has only one value
this.zero.getClass().getName() == org.apache.commons.math.fraction.BigFraction.class
===========================================================================
org.apache.commons.math.linear.MatrixUtils$BigFractionMatrixConverter.BigFractionMatrixConverter():::EXIT
this.data == null
===========================================================================
org.apache.commons.math.linear.MatrixUtils$BigFractionMatrixConverter.getConvertedMatrix():::ENTER
===========================================================================
org.apache.commons.math.linear.MatrixUtils$BigFractionMatrixConverter.getConvertedMatrix():::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.zero == orig(this.zero)
this.zero.getClass().getName() == orig(this.zero.getClass().getName())
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == "matrix must have at least one row"
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == "matrix must have at least one column"
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == "some rows have length {0} while others have length {1}"
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == "no entry at indices ({0}, {1}) in a {2}x{3} matrix"
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == "vector length mismatch: got {0} but expected {1}"
return.data.getClass().getName() == double[][].class
return.data[] elements != null
return.lu == null
===========================================================================
org.apache.commons.math.linear.MatrixUtils$BigFractionMatrixConverter.start(int, int, int, int, int, int):::ENTER
this.data == null
startRow == 0
startColumn == 0
===========================================================================
org.apache.commons.math.linear.MatrixUtils$BigFractionMatrixConverter.start(int, int, int, int, int, int):::EXIT
this.zero == orig(this.zero)
this.zero.getClass().getName() == orig(this.zero.getClass().getName())
===========================================================================
org.apache.commons.math.linear.MatrixUtils$BigFractionMatrixConverter.visit(int, int, org.apache.commons.math.fraction.BigFraction):::ENTER
row >= 0
column >= 0
org.apache.commons.math.fraction.BigFraction.TWO has only one value
org.apache.commons.math.fraction.BigFraction.ONE has only one value
org.apache.commons.math.fraction.BigFraction.ZERO has only one value
org.apache.commons.math.fraction.BigFraction.MINUS_ONE has only one value
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS has only one value
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH has only one value
org.apache.commons.math.fraction.BigFraction.ONE_HALF has only one value
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER has only one value
org.apache.commons.math.fraction.BigFraction.ONE_THIRD has only one value
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS has only one value
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS has only one value
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS has only one value
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS has only one value
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS has only one value
org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR has only one value
org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR.toString == "denominator must be different from 0"
org.apache.commons.math.fraction.BigFraction.ONE_HUNDRED_DOUBLE has only one value
org.apache.commons.math.fraction.BigFraction.TWO.numerator has only one value
org.apache.commons.math.fraction.BigFraction.TWO.denominator has only one value
org.apache.commons.math.fraction.BigFraction.ONE.numerator has only one value
org.apache.commons.math.fraction.BigFraction.ONE.denominator has only one value
org.apache.commons.math.fraction.BigFraction.ZERO.numerator has only one value
org.apache.commons.math.fraction.BigFraction.ZERO.denominator has only one value
org.apache.commons.math.fraction.BigFraction.MINUS_ONE.numerator has only one value
org.apache.commons.math.fraction.BigFraction.MINUS_ONE.denominator has only one value
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.numerator has only one value
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.denominator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.numerator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.denominator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_HALF.numerator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_HALF.denominator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.numerator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.denominator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_THIRD.numerator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_THIRD.denominator has only one value
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.numerator has only one value
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.denominator has only one value
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.numerator has only one value
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.denominator has only one value
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.numerator has only one value
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.denominator has only one value
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.numerator has only one value
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.denominator has only one value
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.numerator has only one value
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.denominator has only one value
===========================================================================
org.apache.commons.math.linear.MatrixUtils$BigFractionMatrixConverter.visit(int, int, org.apache.commons.math.fraction.BigFraction):::EXIT
this.data == orig(this.data)
this.data.getClass().getName() == orig(this.data.getClass().getName())
this.data[] == orig(this.data[])
this.zero == orig(this.zero)
this.zero.getClass().getName() == orig(this.zero.getClass().getName())
org.apache.commons.math.fraction.BigFraction.TWO == orig(org.apache.commons.math.fraction.BigFraction.TWO)
org.apache.commons.math.fraction.BigFraction.ONE == orig(org.apache.commons.math.fraction.BigFraction.ONE)
org.apache.commons.math.fraction.BigFraction.ZERO == orig(org.apache.commons.math.fraction.BigFraction.ZERO)
org.apache.commons.math.fraction.BigFraction.MINUS_ONE == orig(org.apache.commons.math.fraction.BigFraction.MINUS_ONE)
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS == orig(org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS)
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH == orig(org.apache.commons.math.fraction.BigFraction.ONE_FIFTH)
org.apache.commons.math.fraction.BigFraction.ONE_HALF == orig(org.apache.commons.math.fraction.BigFraction.ONE_HALF)
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER == orig(org.apache.commons.math.fraction.BigFraction.ONE_QUARTER)
org.apache.commons.math.fraction.BigFraction.ONE_THIRD == orig(org.apache.commons.math.fraction.BigFraction.ONE_THIRD)
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS == orig(org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS)
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS == orig(org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS)
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS == orig(org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS)
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS == orig(org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS)
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS == orig(org.apache.commons.math.fraction.BigFraction.TWO_THIRDS)
org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR == orig(org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR)
org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR.toString == orig(org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR.toString)
org.apache.commons.math.fraction.BigFraction.ONE_HUNDRED_DOUBLE == orig(org.apache.commons.math.fraction.BigFraction.ONE_HUNDRED_DOUBLE)
org.apache.commons.math.fraction.BigFraction.TWO.numerator == orig(org.apache.commons.math.fraction.BigFraction.TWO.numerator)
org.apache.commons.math.fraction.BigFraction.TWO.denominator == orig(org.apache.commons.math.fraction.BigFraction.TWO.denominator)
org.apache.commons.math.fraction.BigFraction.ONE.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE.numerator)
org.apache.commons.math.fraction.BigFraction.ONE.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE.denominator)
org.apache.commons.math.fraction.BigFraction.ZERO.numerator == orig(org.apache.commons.math.fraction.BigFraction.ZERO.numerator)
org.apache.commons.math.fraction.BigFraction.ZERO.denominator == orig(org.apache.commons.math.fraction.BigFraction.ZERO.denominator)
org.apache.commons.math.fraction.BigFraction.MINUS_ONE.numerator == orig(org.apache.commons.math.fraction.BigFraction.MINUS_ONE.numerator)
org.apache.commons.math.fraction.BigFraction.MINUS_ONE.denominator == orig(org.apache.commons.math.fraction.BigFraction.MINUS_ONE.denominator)
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.numerator == orig(org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.numerator)
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.denominator == orig(org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.denominator)
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.numerator)
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.denominator)
org.apache.commons.math.fraction.BigFraction.ONE_HALF.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE_HALF.numerator)
org.apache.commons.math.fraction.BigFraction.ONE_HALF.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE_HALF.denominator)
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.numerator)
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.denominator)
org.apache.commons.math.fraction.BigFraction.ONE_THIRD.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE_THIRD.numerator)
org.apache.commons.math.fraction.BigFraction.ONE_THIRD.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE_THIRD.denominator)
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.numerator == orig(org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.numerator)
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.denominator == orig(org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.denominator)
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.numerator == orig(org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.numerator)
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.denominator == orig(org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.denominator)
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.numerator == orig(org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.numerator)
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.denominator == orig(org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.denominator)
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.numerator == orig(org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.numerator)
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.denominator == orig(org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.denominator)
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.numerator == orig(org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.numerator)
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.denominator == orig(org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.denominator)
value.numerator == orig(value.numerator)
value.denominator == orig(value.denominator)
org.apache.commons.math.fraction.BigFraction.TWO has only one value
org.apache.commons.math.fraction.BigFraction.ONE has only one value
org.apache.commons.math.fraction.BigFraction.ZERO has only one value
org.apache.commons.math.fraction.BigFraction.MINUS_ONE has only one value
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS has only one value
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH has only one value
org.apache.commons.math.fraction.BigFraction.ONE_HALF has only one value
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER has only one value
org.apache.commons.math.fraction.BigFraction.ONE_THIRD has only one value
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS has only one value
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS has only one value
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS has only one value
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS has only one value
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS has only one value
org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR has only one value
org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR.toString == "denominator must be different from 0"
org.apache.commons.math.fraction.BigFraction.ONE_HUNDRED_DOUBLE has only one value
org.apache.commons.math.fraction.BigFraction.TWO.numerator has only one value
org.apache.commons.math.fraction.BigFraction.TWO.denominator has only one value
org.apache.commons.math.fraction.BigFraction.ONE.numerator has only one value
org.apache.commons.math.fraction.BigFraction.ONE.denominator has only one value
org.apache.commons.math.fraction.BigFraction.ZERO.numerator has only one value
org.apache.commons.math.fraction.BigFraction.ZERO.denominator has only one value
org.apache.commons.math.fraction.BigFraction.MINUS_ONE.numerator has only one value
org.apache.commons.math.fraction.BigFraction.MINUS_ONE.denominator has only one value
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.numerator has only one value
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.denominator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.numerator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.denominator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_HALF.numerator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_HALF.denominator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.numerator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.denominator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_THIRD.numerator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_THIRD.denominator has only one value
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.numerator has only one value
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.denominator has only one value
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.numerator has only one value
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.denominator has only one value
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.numerator has only one value
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.denominator has only one value
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.numerator has only one value
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.denominator has only one value
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.numerator has only one value
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.denominator has only one value
===========================================================================
org.apache.commons.math.linear.MatrixUtils.bigFractionMatrixToRealMatrix(org.apache.commons.math.linear.FieldMatrix):::ENTER
m.getClass().getName() == org.apache.commons.math.linear.Array2DRowFieldMatrix.class
===========================================================================
org.apache.commons.math.linear.MatrixUtils.bigFractionMatrixToRealMatrix(org.apache.commons.math.linear.FieldMatrix):::EXIT
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == "matrix must have at least one row"
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == "matrix must have at least one column"
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == "some rows have length {0} while others have length {1}"
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == "no entry at indices ({0}, {1}) in a {2}x{3} matrix"
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == "vector length mismatch: got {0} but expected {1}"
return.data.getClass().getName() == double[][].class
return.data[] elements != null
return.lu == null
===========================================================================
org.apache.commons.math.linear.MatrixUtils.checkMultiplicationCompatible(org.apache.commons.math.linear.AnyMatrix, org.apache.commons.math.linear.AnyMatrix):::ENTER
left.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
right.getClass().getName() == org.apache.commons.math.linear.Array2DRowRealMatrix.class
===========================================================================
org.apache.commons.math.linear.MatrixUtils.checkMultiplicationCompatible(org.apache.commons.math.linear.AnyMatrix, org.apache.commons.math.linear.AnyMatrix):::EXIT
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator$EndTimeChecker:::OBJECT
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator$EndTimeChecker.EndTimeChecker(double):::ENTER
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator$EndTimeChecker.EndTimeChecker(double):::EXIT
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator$EndTimeChecker.eventOccurred(double, double[], boolean):::ENTER
y != null
increasing == true
size(y[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator$EndTimeChecker.eventOccurred(double, double[], boolean):::EXIT
this.endTime == orig(this.endTime)
y[] == orig(y[])
return == 0
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator$EndTimeChecker.g(double, double[]):::ENTER
y != null
size(y[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator$EndTimeChecker.g(double, double[]):::EXIT
this.endTime == orig(this.endTime)
y[] == orig(y[])
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator:::OBJECT
this.stepHandlers != null
this.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.eventsHandlersManager != null
this.eventsHandlersManager.states != null
this.eventsHandlersManager.states[] elements != null
this.eventsHandlersManager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
this.eventsHandlersManager.states.getClass().getName() == java.util.ArrayList.class
this.eventsHandlersManager.first.handler != null
this.eventsHandlersManager.first.maxCheckInterval one of { 1.0, Infinity }
this.eventsHandlersManager.first.convergence one of { 1.0E-12, 1.5E-7 }
this.eventsHandlersManager.first.maxIterationCount == 1000
this.eventsHandlersManager.first.t0 == 0.0
this.eventsHandlersManager.first.g0 one of { -1.122260016953696, 0.3325666164775135 }
this.eventsHandlersManager.first.g0 != 0
this.eventsHandlersManager.first.pendingEvent == true
this.eventsHandlersManager.first.pendingEventTime one of { 1.9415926557285343, 2.0 }
this.eventsHandlersManager.first.previousEventTime == Double.NaN
this.eventsHandlersManager.first.forward == true
this.eventsHandlersManager.first.nextAction == 3
this.name != null
this.maxEvaluations one of { 0, 650, 2147483647 }
this.evaluations >= 0
size(this.eventsHandlersManager.states[]) one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.AbstractIntegrator(java.lang.String):::ENTER
name != null
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.AbstractIntegrator(java.lang.String):::EXIT
name.toString == orig(name.toString)
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.maxEvaluations == 2147483647
this.evaluations == 0
this.equations == null
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.addEndTimeChecker(double, double, org.apache.commons.math.ode.events.CombinedEventsManager):::ENTER
this.stepStart >= 0.0
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.maxEvaluations one of { 650, 2147483647 }
this.evaluations == 0
this.equations != null
startTime one of { 0.0, 3.141592653589793, 6.283185307179586 }
manager != null
manager.states != null
manager.states[] elements != null
manager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
manager.states.getClass().getName() == java.util.ArrayList.class
manager.first == null
manager.initialized == false
size(manager.states[]) one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.addEndTimeChecker(double, double, org.apache.commons.math.ode.events.CombinedEventsManager):::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
manager.states == orig(manager.states)
manager.states[] == orig(manager.states[])
manager.states.getClass().getName() == orig(manager.states.getClass().getName())
manager.first == orig(manager.first)
manager.initialized == orig(manager.initialized)
this.stepStart >= 0.0
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.maxEvaluations one of { 650, 2147483647 }
this.evaluations == 0
this.equations != null
manager.states != null
manager.states[] elements != null
manager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
manager.states.getClass().getName() == java.util.ArrayList.class
manager.first == null
manager.initialized == false
return != null
return.states != null
return.states[] elements != null
return.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
return.states.getClass().getName() == java.util.ArrayList.class
return.first == null
return.initialized == false
size(manager.states[]) one of { 0, 1, 2 }
size(return.states[]) one of { 1, 2, 3 }
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.addEventHandler(org.apache.commons.math.ode.events.EventHandler, double, double, int):::ENTER
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 1.0, Double.NaN }
this.eventsHandlersManager.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState] }
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.maxEvaluations == 2147483647
this.evaluations == 0
this.equations == null
function != null
maxCheckInterval one of { 1.0, Infinity }
maxIterationCount one of { 3, 1000 }
size(this.eventsHandlersManager.states[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.addEventHandler(org.apache.commons.math.ode.events.EventHandler, double, double, int):::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
size(this.eventsHandlersManager.states[])-1 == orig(size(this.eventsHandlersManager.states[]))
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 1.0, Double.NaN }
this.eventsHandlersManager.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.maxEvaluations == 2147483647
this.evaluations == 0
this.equations == null
size(this.eventsHandlersManager.states[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.addStepHandler(org.apache.commons.math.ode.sampling.StepHandler):::ENTER
this.stepStart == Double.NaN
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.maxEvaluations == 2147483647
this.evaluations one of { 0, 50 }
this.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem1.class
handler != null
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.addStepHandler(org.apache.commons.math.ode.sampling.StepHandler):::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.stepStart == Double.NaN
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.maxEvaluations == 2147483647
this.evaluations one of { 0, 50 }
this.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem1.class
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.clearEventHandlers():::ENTER
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 3.1622776601683794E-4, Double.NaN }
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.name.toString one of { "Dormand-Prince 8 (5, 3)", "classical Runge-Kutta" }
this.maxEvaluations == 2147483647
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.clearEventHandlers():::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 3.1622776601683794E-4, Double.NaN }
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.name.toString one of { "Dormand-Prince 8 (5, 3)", "classical Runge-Kutta" }
this.maxEvaluations == 2147483647
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.clearStepHandlers():::ENTER
this.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.class
this.stepStart one of { 0.0, Double.NaN }
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.name has only one value
this.name.toString == "Dormand-Prince 8 (5, 3)"
this.maxEvaluations == 2147483647
this.evaluations one of { 0, 20 }
this.equations.getClass().getName() == org.apache.commons.math.ode.MultistepIntegrator$CountingDifferentialEquations.class
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.clearStepHandlers():::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.stepStart one of { 0.0, Double.NaN }
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.name has only one value
this.name.toString == "Dormand-Prince 8 (5, 3)"
this.maxEvaluations == 2147483647
this.evaluations one of { 0, 20 }
this.equations.getClass().getName() == org.apache.commons.math.ode.MultistepIntegrator$CountingDifferentialEquations.class
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.computeDerivatives(double, double[], double[]):::ENTER
this.maxEvaluations one of { 650, 2147483647 }
this.equations != null
y != null
yDot != null
size(y[]) one of { 1, 2, 4 }
size(yDot[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.computeDerivatives(double, double[], double[]):::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.first.handler == orig(this.eventsHandlersManager.first.handler)
this.eventsHandlersManager.first.handler.getClass().getName() == orig(this.eventsHandlersManager.first.handler.getClass().getName())
this.eventsHandlersManager.first.maxCheckInterval == orig(this.eventsHandlersManager.first.maxCheckInterval)
this.eventsHandlersManager.first.convergence == orig(this.eventsHandlersManager.first.convergence)
this.eventsHandlersManager.first.maxIterationCount == orig(this.eventsHandlersManager.first.maxIterationCount)
this.eventsHandlersManager.first.t0 == orig(this.eventsHandlersManager.first.t0)
this.eventsHandlersManager.first.g0 == orig(this.eventsHandlersManager.first.g0)
this.eventsHandlersManager.first.g0Positive == orig(this.eventsHandlersManager.first.g0Positive)
this.eventsHandlersManager.first.pendingEvent == orig(this.eventsHandlersManager.first.pendingEvent)
this.eventsHandlersManager.first.pendingEventTime == orig(this.eventsHandlersManager.first.pendingEventTime)
this.eventsHandlersManager.first.forward == orig(this.eventsHandlersManager.first.forward)
this.eventsHandlersManager.first.increasing == orig(this.eventsHandlersManager.first.increasing)
this.eventsHandlersManager.first.nextAction == orig(this.eventsHandlersManager.first.nextAction)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
y[] == orig(y[])
this.maxEvaluations one of { 650, 2147483647 }
this.evaluations >= 1
this.equations != null
this.evaluations - orig(this.evaluations) - 1 == 0
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.getCurrentSignedStepsize():::ENTER
this.stepSize != 0
this.eventsHandlersManager.first == null
this.maxEvaluations one of { 650, 2147483647 }
this.evaluations >= 1
this.equations != null
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.getCurrentSignedStepsize():::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.stepSize != 0
this.eventsHandlersManager.first == null
this.maxEvaluations one of { 650, 2147483647 }
this.evaluations >= 1
this.equations != null
return != 0
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.getCurrentStepStart():::ENTER
this.stepSize != 0
this.eventsHandlersManager.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.maxEvaluations == 2147483647
this.evaluations >= 1
this.equations != null
size(this.eventsHandlersManager.states[]) one of { 0, 2 }
size(this.eventsHandlersManager.states[])-1 != 0
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.getCurrentStepStart():::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.stepSize != 0
this.eventsHandlersManager.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.maxEvaluations == 2147483647
this.evaluations >= 1
this.equations != null
size(this.eventsHandlersManager.states[]) one of { 0, 2 }
size(this.eventsHandlersManager.states[])-1 != 0
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.getEvaluations():::ENTER
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 1.2649110640673518, Double.NaN }
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.maxEvaluations == 2147483647
this.equations != null
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.getEvaluations():::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 1.2649110640673518, Double.NaN }
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.maxEvaluations == 2147483647
this.equations != null
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.getEventHandlers():::ENTER
this.stepStart == Double.NaN
this.stepSize one of { 0.0, Double.NaN }
this.eventsHandlersManager.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.maxEvaluations == 2147483647
size(this.eventsHandlersManager.states[]) one of { 0, 2 }
size(this.eventsHandlersManager.states[])-1 != 0
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.getEventHandlers():::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.stepStart == Double.NaN
this.stepSize one of { 0.0, Double.NaN }
this.eventsHandlersManager.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.maxEvaluations == 2147483647
return != null
return.getClass().getName() == java.util.Collections$UnmodifiableCollection.class
size(this.eventsHandlersManager.states[]) one of { 0, 2 }
size(this.eventsHandlersManager.states[])-1 != 0
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.getName():::ENTER
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 2.23606797749979, Double.NaN }
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.maxEvaluations == 2147483647
this.equations != null
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.getName():::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 2.23606797749979, Double.NaN }
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.maxEvaluations == 2147483647
this.equations != null
return != null
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.getStepHandlers():::ENTER
this.stepStart == Double.NaN
this.stepSize one of { 0.0, Double.NaN }
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.maxEvaluations == 2147483647
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.getStepHandlers():::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.stepStart == Double.NaN
this.stepSize one of { 0.0, Double.NaN }
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.maxEvaluations == 2147483647
return.getClass().getName() == java.util.Collections$UnmodifiableCollection.class
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.requiresDenseOutput():::ENTER
this.stepStart == Double.NaN
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.maxEvaluations == 2147483647
this.evaluations == 0
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.requiresDenseOutput():::EXIT125
return == true
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.requiresDenseOutput():::EXIT125;condition="return == true"
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.requiresDenseOutput():::EXIT128
this.eventsHandlersManager.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState] }
return == false
size(this.eventsHandlersManager.states[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.requiresDenseOutput():::EXIT128;condition="not(return == true)"
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.requiresDenseOutput():::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.stepStart == Double.NaN
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.maxEvaluations == 2147483647
this.evaluations == 0
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.requiresDenseOutput():::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.requiresDenseOutput():::EXIT;condition="not(return == true)"
this.eventsHandlersManager.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState] }
return == false
size(this.eventsHandlersManager.states[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.resetEvaluations():::ENTER
this.stepStart == Double.NaN
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.maxEvaluations one of { 650, 2147483647 }
this.evaluations one of { 0, 50 }
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.resetEvaluations():::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.stepStart == Double.NaN
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.maxEvaluations one of { 650, 2147483647 }
this.evaluations == 0
this.evaluations <= orig(this.evaluations)
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.sanityChecks(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double, double[], double, double[]):::ENTER
this.stepStart == Double.NaN
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.maxEvaluations one of { 650, 2147483647 }
this.evaluations one of { 0, 50 }
this.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem1.class
ode != null
t0 one of { 0.0, 3.141592653589793, 6.283185307179586 }
y0 != null
y != null
y[] elements one of { 0.0, Double.NaN }
y[] sorted by ==
size(y0[]) one of { 1, 2, 4 }
size(y[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.sanityChecks(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double, double[], double, double[]):::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
y0[] == orig(y0[])
y[] == orig(y[])
this.stepStart == Double.NaN
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.maxEvaluations one of { 650, 2147483647 }
this.evaluations one of { 0, 50 }
this.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem1.class
y[] elements one of { 0.0, Double.NaN }
y[] sorted by ==
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.setEquations(org.apache.commons.math.ode.FirstOrderDifferentialEquations):::ENTER
this.stepStart == Double.NaN
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.maxEvaluations one of { 650, 2147483647 }
this.evaluations one of { 0, 50 }
this.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem1.class
equations != null
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.setEquations(org.apache.commons.math.ode.FirstOrderDifferentialEquations):::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.stepStart == Double.NaN
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.maxEvaluations one of { 650, 2147483647 }
this.evaluations one of { 0, 50 }
this.equations != null
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.setMaxEvaluations(int):::ENTER
this.stepStart == Double.NaN
this.stepSize one of { 0.0, Double.NaN }
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.maxEvaluations one of { 0, 2147483647 }
this.evaluations == 0
this.equations == null
maxEvaluations one of { -1, 650 }
maxEvaluations != 0
===========================================================================
org.apache.commons.math.ode.AbstractIntegrator.setMaxEvaluations(int):::EXIT
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.stepStart == Double.NaN
this.stepSize one of { 0.0, Double.NaN }
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.maxEvaluations one of { 650, 2147483647 }
this.evaluations == 0
this.equations == null
this.maxEvaluations != orig(this.maxEvaluations)
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel:::CLASS
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel:::OBJECT
this.initialTime >= 0.0
this.finalTime >= 0.0
this.index >= 0
this.steps[] elements != null
this.steps.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel.ContinuousOutputModel():::EXIT
this.initialTime == Double.NaN
this.finalTime == Double.NaN
this.forward == true
this.index == 0
this.steps[] == []
this.steps[].getClass().getName() == []
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel.append(org.apache.commons.math.ode.ContinuousOutputModel):::ENTER
this has only one value
this.initialTime one of { 6.283185307179586, Double.NaN }
this.finalTime one of { 3.141592653589793, Double.NaN }
this.index one of { 0, 32 }
this.steps has only one value
this.steps[].getClass().getName() elements == org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.class
this.steps[].getClass().getName() one of { [], [org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator] }
model.initialTime one of { 3.141592653589793, 6.283185307179586, Double.NaN }
model.finalTime one of { 0.0, 3.141592653589793, Double.NaN }
model.index one of { 0, 5, 32 }
model.steps[].getClass().getName() elements == org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.class
model.steps.getClass().getName() == java.util.ArrayList.class
size(this.steps[]) one of { 0, 33 }
size(model.steps[]) one of { 0, 6, 33 }
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel.append(org.apache.commons.math.ode.ContinuousOutputModel):::EXIT127
this.initialTime == orig(this.initialTime)
this.finalTime == orig(this.finalTime)
this.forward == orig(this.forward)
this.index == orig(this.index)
this.steps[] == orig(this.steps[])
this.finalTime == 3.141592653589793
this.index == 32
this.steps[] contains no nulls and has only one value, of length 33
this.steps[].getClass().getName() == [org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator]
model.initialTime == Double.NaN
model.finalTime == Double.NaN
model.forward == true
model.index == 0
model.steps has only one value
model.steps[] == []
model.steps[].getClass().getName() == []
orig(model) has only one value
orig(model.initialTime) == Double.NaN
orig(model.finalTime) == Double.NaN
size(this.steps[]) == 33
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel.append(org.apache.commons.math.ode.ContinuousOutputModel):::EXIT165
model.initialTime == orig(model.initialTime)
model.finalTime == orig(model.finalTime)
model.initialTime one of { 3.141592653589793, 6.283185307179586 }
model.finalTime one of { 0.0, 3.141592653589793 }
model.forward == false
model.index one of { 5, 32 }
model.steps[].getClass().getName() one of { [org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator], [org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator] }
size(model.steps[]) one of { 6, 33 }
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel.append(org.apache.commons.math.ode.ContinuousOutputModel):::EXIT
this.steps == orig(this.steps)
this.steps.getClass().getName() == orig(this.steps.getClass().getName())
model.forward == orig(model.forward)
model.index == orig(model.index)
model.steps == orig(model.steps)
model.steps[] == orig(model.steps[])
model.steps.getClass().getName() == orig(model.steps.getClass().getName())
(model.initialTime == Double.NaN)  <==>  (model.finalTime == Double.NaN)
(model.initialTime == Double.NaN)  <==>  (model.forward == true)
(model.initialTime == Double.NaN)  <==>  (model.index == 0)
(model.initialTime == Double.NaN)  <==>  (model.steps[].getClass().getName() == [])
(model.initialTime == Double.NaN)  <==>  (orig(model.finalTime) == Double.NaN)
(model.initialTime == Double.NaN)  <==>  (orig(model.initialTime) == Double.NaN)
(model.initialTime == Double.NaN)  <==>  (this.finalTime == orig(this.finalTime))
(model.initialTime == Double.NaN)  <==>  (this.index == orig(this.index))
(model.initialTime == Double.NaN)  ==>  (model.steps has only one value)
(model.initialTime == Double.NaN)  ==>  (model.steps[] == [])
(model.initialTime == Double.NaN)  ==>  (orig(model) has only one value)
(model.initialTime == Double.NaN)  ==>  (orig(size(this.steps[])) == 33)
(model.initialTime == Double.NaN)  ==>  (orig(this.finalTime) == 3.141592653589793)
(model.initialTime == Double.NaN)  ==>  (orig(this.forward) == false)
(model.initialTime == Double.NaN)  ==>  (orig(this.index) == 32)
(model.initialTime == Double.NaN)  ==>  (orig(this.initialTime) == 6.283185307179586)
(model.initialTime == Double.NaN)  ==>  (orig(this.steps[]) contains no nulls and has only one value, of length 33)
(model.initialTime == Double.NaN)  ==>  (orig(this.steps[].getClass().getName()) == [org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator])
(model.initialTime == Double.NaN)  ==>  (size(this.steps[]) == 33)
(model.initialTime == Double.NaN)  ==>  (this.finalTime == 3.141592653589793)
(model.initialTime == Double.NaN)  ==>  (this.forward == orig(this.forward))
(model.initialTime == Double.NaN)  ==>  (this.index == 32)
(model.initialTime == Double.NaN)  ==>  (this.initialTime == orig(this.initialTime))
(model.initialTime == Double.NaN)  ==>  (this.steps[] contains no nulls and has only one value, of length 33)
(model.initialTime == Double.NaN)  ==>  (this.steps[].getClass().getName() == [org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator])
(model.initialTime one of { 3.141592653589793, 6.283185307179586 })  <==>  (model.finalTime == orig(model.finalTime))
(model.initialTime one of { 3.141592653589793, 6.283185307179586 })  <==>  (model.finalTime one of { 0.0, 3.141592653589793 })
(model.initialTime one of { 3.141592653589793, 6.283185307179586 })  <==>  (model.forward == false)
(model.initialTime one of { 3.141592653589793, 6.283185307179586 })  <==>  (model.index one of { 5, 32 })
(model.initialTime one of { 3.141592653589793, 6.283185307179586 })  <==>  (model.initialTime == orig(model.initialTime))
(model.initialTime one of { 3.141592653589793, 6.283185307179586 })  <==>  (model.steps[].getClass().getName() one of { [org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator], [org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator] })
(model.initialTime one of { 3.141592653589793, 6.283185307179586 })  <==>  (orig(model.finalTime) one of { 0.0, 3.141592653589793 })
(model.initialTime one of { 3.141592653589793, 6.283185307179586 })  <==>  (orig(model.initialTime) one of { 3.141592653589793, 6.283185307179586 })
(model.initialTime one of { 3.141592653589793, 6.283185307179586 })  <==>  (size(model.steps[]) one of { 6, 33 })
(model.initialTime one of { 3.141592653589793, 6.283185307179586 })  ==>  (model.steps[].getClass().getName() elements == org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.class)
(model.initialTime one of { 3.141592653589793, 6.283185307179586 })  ==>  (orig(size(this.steps[])) one of { 0, 33 })
(model.initialTime one of { 3.141592653589793, 6.283185307179586 })  ==>  (orig(this.finalTime) one of { 3.141592653589793, Double.NaN })
(model.initialTime one of { 3.141592653589793, 6.283185307179586 })  ==>  (orig(this.index) one of { 0, 32 })
(model.initialTime one of { 3.141592653589793, 6.283185307179586 })  ==>  (orig(this.initialTime) one of { 6.283185307179586, Double.NaN })
(model.initialTime one of { 3.141592653589793, 6.283185307179586 })  ==>  (orig(this.steps[].getClass().getName()) one of { [], [org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator] })
(model.initialTime one of { 3.141592653589793, 6.283185307179586 })  ==>  (size(this.steps[]) one of { 33, 39 })
(model.initialTime one of { 3.141592653589793, 6.283185307179586 })  ==>  (this.finalTime one of { 0.0, 3.141592653589793 })
(model.initialTime one of { 3.141592653589793, 6.283185307179586 })  ==>  (this.index one of { 32, 38 })
(model.initialTime one of { 3.141592653589793, 6.283185307179586 })  ==>  (this.steps[].getClass().getName() one of { [org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator], [org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator] })
this.initialTime == 6.283185307179586
this.finalTime one of { 0.0, 3.141592653589793 }
this.forward == false
this.index one of { 32, 38 }
this.steps has only one value
this.steps[].getClass().getName() elements == org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.class
this.steps[].getClass().getName() one of { [org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator], [org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator] }
model.initialTime one of { 3.141592653589793, 6.283185307179586, Double.NaN }
model.finalTime one of { 0.0, 3.141592653589793, Double.NaN }
model.index one of { 0, 5, 32 }
model.steps[].getClass().getName() elements == org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.class
model.steps.getClass().getName() == java.util.ArrayList.class
size(this.steps[]) one of { 33, 39 }
size(model.steps[]) one of { 0, 6, 33 }
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel.getFinalTime():::ENTER
this has only one value
this.initialTime == 6.283185307179586
this.finalTime == 0.0
this.forward == false
this.index == 38
this.steps has only one value
this.steps[] contains no nulls and has only one value, of length 39
this.steps[].getClass().getName() == [org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator]
this.steps[].getClass().getName() elements == org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.class
size(this.steps[]) == 39
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel.getFinalTime():::EXIT
this.initialTime == orig(this.initialTime)
this.finalTime == orig(this.finalTime)
this.forward == orig(this.forward)
this.index == orig(this.index)
this.steps == orig(this.steps)
this.steps[] == orig(this.steps[])
this.steps.getClass().getName() == orig(this.steps.getClass().getName())
this.initialTime == 6.283185307179586
this.finalTime == 0.0
this.forward == false
this.index == 38
this.steps has only one value
this.steps[] contains no nulls and has only one value, of length 39
this.steps[].getClass().getName() == [org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator]
this.steps[].getClass().getName() elements == org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.class
return == 0.0
size(this.steps[]) == 39
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel.getInitialTime():::ENTER
this.initialTime one of { 3.141592653589793, 6.283185307179586 }
this.finalTime == 0.0
this.forward == false
this.index one of { 5, 38 }
this.steps[].getClass().getName() elements == org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.class
this.steps[].getClass().getName() one of { [org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator], [org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator] }
size(this.steps[]) one of { 6, 39 }
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel.getInitialTime():::EXIT
this.initialTime == orig(this.initialTime)
this.finalTime == orig(this.finalTime)
this.forward == orig(this.forward)
this.index == orig(this.index)
this.steps == orig(this.steps)
this.steps[] == orig(this.steps[])
this.steps.getClass().getName() == orig(this.steps.getClass().getName())
this.initialTime one of { 3.141592653589793, 6.283185307179586 }
this.finalTime == 0.0
this.forward == false
this.index one of { 5, 38 }
this.steps[].getClass().getName() elements == org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.class
this.steps[].getClass().getName() one of { [org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator], [org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator] }
return one of { 3.141592653589793, 6.283185307179586 }
size(this.steps[]) one of { 6, 39 }
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel.getInterpolatedState():::ENTER
this.initialTime one of { 0.0, 3.141592653589793, 6.283185307179586 }
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel.getInterpolatedState():::EXIT
this.initialTime == orig(this.initialTime)
this.finalTime == orig(this.finalTime)
this.forward == orig(this.forward)
this.index == orig(this.index)
this.steps == orig(this.steps)
this.steps[] == orig(this.steps[])
this.steps.getClass().getName() == orig(this.steps.getClass().getName())
this.initialTime one of { 0.0, 3.141592653589793, 6.283185307179586 }
size(return[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel.getInterpolatedTime():::ENTER
this has only one value
this.initialTime == 6.283185307179586
this.finalTime == 0.0
this.forward == false
this.index == 38
this.steps has only one value
this.steps[] contains no nulls and has only one value, of length 39
this.steps[].getClass().getName() == [org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator]
this.steps[].getClass().getName() elements == org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.class
size(this.steps[]) == 39
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel.getInterpolatedTime():::EXIT
this.initialTime == orig(this.initialTime)
this.finalTime == orig(this.finalTime)
this.forward == orig(this.forward)
this.index == orig(this.index)
this.steps == orig(this.steps)
this.steps[] == orig(this.steps[])
this.steps.getClass().getName() == orig(this.steps.getClass().getName())
this.initialTime == 6.283185307179586
this.finalTime == 0.0
this.forward == false
this.index == 38
this.steps has only one value
this.steps[] contains no nulls and has only one value, of length 39
this.steps[].getClass().getName() == [org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator]
this.steps[].getClass().getName() elements == org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.class
return == 0.0
size(this.steps[]) == 39
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::ENTER
this.finalTime == Double.NaN
this.index == 0
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::EXIT
this.steps == orig(this.steps)
this.steps.getClass().getName() == orig(this.steps.getClass().getName())
size(this.steps[])-1 == orig(size(this.steps[]))
this.initialTime one of { 0.0, 3.141592653589793, 6.283185307179586 }
size(this.steps[]) >= 1
this.finalTime != orig(this.finalTime)
this.index >= orig(this.index)
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel.locatePoint(double, org.apache.commons.math.ode.sampling.StepInterpolator):::ENTER
this.initialTime one of { 0.0, 6.283185307179586 }
this.finalTime one of { 0.0, 4.0000000000000036, 20.0 }
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel.locatePoint(double, org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT360
this.initialTime == 0.0
this.finalTime one of { 4.0000000000000036, 20.0 }
this.forward == true
return == -1
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel.locatePoint(double, org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT362
this.initialTime == 0.0
this.finalTime one of { 4.0000000000000036, 20.0 }
this.forward == true
return == 1
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel.locatePoint(double, org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT364
this.initialTime == 0.0
this.finalTime one of { 4.0000000000000036, 20.0 }
this.forward == true
return == 0
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel.locatePoint(double, org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT368
this.initialTime == 6.283185307179586
this.finalTime == 0.0
this.forward == false
this.steps has only one value
this.steps[] contains no nulls and has only one value, of length 39
this.steps[].getClass().getName() == [org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator]
this.steps[].getClass().getName() elements == org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.class
return == -1
orig(this) has only one value
orig(interval.getClass().getName()) == org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.class
size(this.steps[]) == 39
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel.locatePoint(double, org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT370
this.initialTime == 6.283185307179586
this.finalTime == 0.0
this.forward == false
this.steps has only one value
this.steps[] contains no nulls and has only one value, of length 39
this.steps[].getClass().getName() == [org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator]
this.steps[].getClass().getName() elements == org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.class
return == 1
orig(this) has only one value
orig(interval.getClass().getName()) == org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.class
size(this.steps[]) == 39
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel.locatePoint(double, org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT372
this.initialTime == 6.283185307179586
this.finalTime == 0.0
this.forward == false
this.steps has only one value
this.steps[] contains no nulls and has only one value, of length 39
this.steps[].getClass().getName() == [org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator]
this.steps[].getClass().getName() elements == org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.class
return == 0
orig(this) has only one value
orig(interval.getClass().getName()) == org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.class
size(this.steps[]) == 39
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel.locatePoint(double, org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT
this.initialTime == orig(this.initialTime)
this.finalTime == orig(this.finalTime)
this.forward == orig(this.forward)
this.index == orig(this.index)
this.steps == orig(this.steps)
this.steps[] == orig(this.steps[])
this.steps.getClass().getName() == orig(this.steps.getClass().getName())
this.initialTime one of { 0.0, 6.283185307179586 }
this.finalTime one of { 0.0, 4.0000000000000036, 20.0 }
return one of { -1, 0, 1 }
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel.requiresDenseOutput():::ENTER
this.initialTime == Double.NaN
this.finalTime == Double.NaN
this.forward == true
this.index == 0
this.steps[] == []
this.steps[].getClass().getName() == []
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel.requiresDenseOutput():::EXIT
this.forward == orig(this.forward)
this.index == orig(this.index)
this.steps == orig(this.steps)
this.steps[] == orig(this.steps[])
this.steps.getClass().getName() == orig(this.steps.getClass().getName())
this.initialTime == Double.NaN
this.finalTime == Double.NaN
this.forward == true
this.index == 0
this.steps[] == []
this.steps[].getClass().getName() == []
return == true
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel.requiresDenseOutput():::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel.reset():::ENTER
this.initialTime one of { 0.0, Double.NaN }
this.finalTime one of { 0.0, Double.NaN }
this.index == 0
this.steps[] == []
this.steps[].getClass().getName() == []
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel.reset():::EXIT
this.index == orig(this.index)
this.steps == orig(this.steps)
this.steps[] == orig(this.steps[])
this.steps.getClass().getName() == orig(this.steps.getClass().getName())
this.initialTime == Double.NaN
this.finalTime == Double.NaN
this.forward == true
this.index == 0
this.steps[] == []
this.steps[].getClass().getName() == []
this.initialTime != orig(this.initialTime)
this.finalTime != orig(this.finalTime)
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel.setInterpolatedTime(double):::ENTER
this.initialTime one of { 0.0, 6.283185307179586 }
this.finalTime one of { 0.0, 4.0000000000000036, 20.0 }
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel.setInterpolatedTime(double):::EXIT268
this.initialTime == 0.0
this.finalTime == 20.0
this.forward == true
this.index == 0
this.steps has only one value
this.steps[] contains no nulls and has only one value, of length 387
this.steps[].getClass().getName() == [org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator]
this.steps[].getClass().getName() elements == org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator.class
orig(this) has only one value
orig(this.index) == 386
orig(time) == -20.0
size(this.steps[]) == 387
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel.setInterpolatedTime(double):::EXIT273
this.index >= orig(this.index)
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel.setInterpolatedTime(double):::EXIT291
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel.setInterpolatedTime(double):::EXIT338
this.index != orig(this.index)
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModel.setInterpolatedTime(double):::EXIT
this.initialTime == orig(this.initialTime)
this.finalTime == orig(this.finalTime)
this.forward == orig(this.forward)
this.steps == orig(this.steps)
this.steps[] == orig(this.steps[])
this.steps.getClass().getName() == orig(this.steps.getClass().getName())
this.initialTime one of { 0.0, 6.283185307179586 }
this.finalTime one of { 0.0, 4.0000000000000036, 20.0 }
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModelTest$1:::CLASS
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModelTest$1:::OBJECT
this has only one value
org.apache.commons.math.ode.ContinuousOutputModelTest.this has only one value
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb has only one value
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.e == 0.9
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.y has only one value
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.y[] elements == 0.0
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.n == 4
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.calls == 0
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.t0 == 0.0
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.y0 has only one value
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.t1 == 20.0
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.errorScale has only one value
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.errorScale[] elements == 1.0
org.apache.commons.math.ode.ContinuousOutputModelTest.this.integ has only one value
org.apache.commons.math.ode.ContinuousOutputModelTest.this.integ.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.class
size(org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.y[]) == 4
size(org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.y0[]) == 4
size(org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModelTest$1.(org.apache.commons.math.ode.ContinuousOutputModelTest):::ENTER
org.apache.commons.math.ode.ContinuousOutputModelTest.this has only one value
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb has only one value
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.e == 0.9
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.y has only one value
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.y[] elements == 0.0
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.n == 4
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.calls == 0
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.t0 == 0.0
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.y0 has only one value
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.t1 == 20.0
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.errorScale has only one value
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.errorScale[] elements == 1.0
org.apache.commons.math.ode.ContinuousOutputModelTest.this.integ has only one value
org.apache.commons.math.ode.ContinuousOutputModelTest.this.integ.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.class
size(org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.y[]) == 4
size(org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.y0[]) == 4
size(org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModelTest$1.(org.apache.commons.math.ode.ContinuousOutputModelTest):::EXIT
org.apache.commons.math.ode.ContinuousOutputModelTest.this == orig(org.apache.commons.math.ode.ContinuousOutputModelTest.this)
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb == orig(org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb)
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.e == orig(org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.e)
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.y == orig(org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.y)
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.y[] == orig(org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.y[])
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.n == orig(org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.n)
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.calls == orig(org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.calls)
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.t0 == orig(org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.t0)
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.y0 == orig(org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.y0)
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.y0[] == orig(org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.y0[])
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.t1 == orig(org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.t1)
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.errorScale == orig(org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.errorScale)
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.errorScale[] == orig(org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.errorScale[])
org.apache.commons.math.ode.ContinuousOutputModelTest.this.integ == orig(org.apache.commons.math.ode.ContinuousOutputModelTest.this.integ)
org.apache.commons.math.ode.ContinuousOutputModelTest.this.integ.getClass().getName() == orig(org.apache.commons.math.ode.ContinuousOutputModelTest.this.integ.getClass().getName())
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModelTest$1.computeDerivatives(double, double[], double[]):::ENTER
size(y[]) == 2
size(dot[]) == 2
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModelTest$1.computeDerivatives(double, double[], double[]):::EXIT
org.apache.commons.math.ode.ContinuousOutputModelTest.this == orig(org.apache.commons.math.ode.ContinuousOutputModelTest.this)
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb == orig(org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb)
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.e == orig(org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.e)
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.y == orig(org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.y)
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.y[] == orig(org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.y[])
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.n == orig(org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.n)
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.calls == orig(org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.calls)
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.t0 == orig(org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.t0)
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.y0 == orig(org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.y0)
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.y0[] == orig(org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.y0[])
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.t1 == orig(org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.t1)
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.errorScale == orig(org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.errorScale)
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.errorScale[] == orig(org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.errorScale[])
org.apache.commons.math.ode.ContinuousOutputModelTest.this.integ == orig(org.apache.commons.math.ode.ContinuousOutputModelTest.this.integ)
org.apache.commons.math.ode.ContinuousOutputModelTest.this.integ.getClass().getName() == orig(org.apache.commons.math.ode.ContinuousOutputModelTest.this.integ.getClass().getName())
y[] == orig(y[])
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModelTest$1.getDimension():::ENTER
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModelTest$1.getDimension():::EXIT
org.apache.commons.math.ode.ContinuousOutputModelTest.this == orig(org.apache.commons.math.ode.ContinuousOutputModelTest.this)
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb == orig(org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb)
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.e == orig(org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.e)
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.y == orig(org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.y)
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.y[] == orig(org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.y[])
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.n == orig(org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.n)
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.calls == orig(org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.calls)
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.t0 == orig(org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.t0)
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.y0 == orig(org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.y0)
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.y0[] == orig(org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.y0[])
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.t1 == orig(org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.t1)
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.errorScale == orig(org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.errorScale)
org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.errorScale[] == orig(org.apache.commons.math.ode.ContinuousOutputModelTest.this.pb.errorScale[])
org.apache.commons.math.ode.ContinuousOutputModelTest.this.integ == orig(org.apache.commons.math.ode.ContinuousOutputModelTest.this.integ)
org.apache.commons.math.ode.ContinuousOutputModelTest.this.integ.getClass().getName() == orig(org.apache.commons.math.ode.ContinuousOutputModelTest.this.integ.getClass().getName())
return == 2
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModelTest:::OBJECT
this.pb.n == size(this.pb.y[])
size(this.pb.y[]) == size(this.pb.y0[])
this.pb.e == 0.9
this.pb.y[] one of { [-1.8298368664672038, -0.1603952815207037, 0.20032739482773365, -0.22065263459462622], [0.0, 0.0, 0.0, 0.0] }
this.pb.n == 4
this.pb.calls one of { 0, 2774 }
this.pb.t0 == 0.0
this.pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
this.pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
this.pb.t1 == 20.0
this.pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
this.pb.errorScale[] elements == 1.0
this.integ.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.class
size(this.pb.y[]) == 4
size(this.pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModelTest.ContinuousOutputModelTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModelTest.ContinuousOutputModelTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
this.pb == null
this.integ == null
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModelTest.setUp():::ENTER
this.pb == null
this.integ == null
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModelTest.setUp():::EXIT
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModelTest.suite():::EXIT
return.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModelTest.tearDown():::ENTER
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModelTest.tearDown():::EXIT
this.pb == null
this.integ == null
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModelTest.testBoundaries():::ENTER
this has only one value
this.pb has only one value
this.pb.y has only one value
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
this.pb.y0 has only one value
this.pb.errorScale has only one value
this.integ has only one value
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModelTest.testBoundaries():::EXIT
this.pb == orig(this.pb)
this.pb.e == orig(this.pb.e)
this.pb.y == orig(this.pb.y)
this.pb.y[] == orig(this.pb.y[])
this.pb.n == orig(this.pb.n)
this.pb.t0 == orig(this.pb.t0)
this.pb.y0 == orig(this.pb.y0)
this.pb.y0[] == orig(this.pb.y0[])
this.pb.t1 == orig(this.pb.t1)
this.pb.errorScale == orig(this.pb.errorScale)
this.pb.errorScale[] == orig(this.pb.errorScale[])
this.integ == orig(this.integ)
this.integ.getClass().getName() == orig(this.integ.getClass().getName())
size(this.pb.y[]) == orig(size(this.pb.y0[]))
this.pb has only one value
this.pb.y has only one value
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 2774
this.pb.y0 has only one value
this.pb.errorScale has only one value
this.integ has only one value
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModelTest.testModelsMerging():::ENTER
this has only one value
this.pb has only one value
this.pb.y has only one value
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
this.pb.y0 has only one value
this.pb.errorScale has only one value
this.integ has only one value
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModelTest.testModelsMerging():::EXIT
this.pb == orig(this.pb)
this.pb.e == orig(this.pb.e)
this.pb.y == orig(this.pb.y)
this.pb.y[] == orig(this.pb.y[])
this.pb.n == orig(this.pb.n)
this.pb.calls == orig(this.pb.calls)
this.pb.t0 == orig(this.pb.t0)
this.pb.y0 == orig(this.pb.y0)
this.pb.y0[] == orig(this.pb.y0[])
this.pb.t1 == orig(this.pb.t1)
this.pb.errorScale == orig(this.pb.errorScale)
this.pb.errorScale[] == orig(this.pb.errorScale[])
this.integ == orig(this.integ)
this.integ.getClass().getName() == orig(this.integ.getClass().getName())
size(this.pb.y[]) == orig(size(this.pb.y0[]))
this.pb has only one value
this.pb.y has only one value
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
this.pb.y0 has only one value
this.pb.errorScale has only one value
this.integ has only one value
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModelTest.testRandomAccess():::ENTER
this has only one value
this.pb has only one value
this.pb.y has only one value
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
this.pb.y0 has only one value
this.pb.errorScale has only one value
this.integ has only one value
===========================================================================
org.apache.commons.math.ode.ContinuousOutputModelTest.testRandomAccess():::EXIT
this.pb == orig(this.pb)
this.pb.e == orig(this.pb.e)
this.pb.y == orig(this.pb.y)
this.pb.n == orig(this.pb.n)
this.pb.t0 == orig(this.pb.t0)
this.pb.y0 == orig(this.pb.y0)
this.pb.y0[] == orig(this.pb.y0[])
this.pb.t1 == orig(this.pb.t1)
this.pb.errorScale == orig(this.pb.errorScale)
this.pb.errorScale[] == orig(this.pb.errorScale[])
this.integ == orig(this.integ)
this.integ.getClass().getName() == orig(this.integ.getClass().getName())
size(this.pb.y[]) == orig(size(this.pb.y[]))
size(this.pb.y[]) == orig(size(this.pb.y0[]))
this.pb has only one value
this.pb.y has only one value
this.pb.y[] == [-1.8298368664672038, -0.1603952815207037, 0.20032739482773365, -0.22065263459462622]
this.pb.calls == 2774
this.pb.y0 has only one value
this.pb.errorScale has only one value
this.integ has only one value
===========================================================================
org.apache.commons.math.ode.DerivativeException:::CLASS
===========================================================================
org.apache.commons.math.ode.DerivativeException:::OBJECT
this.pattern has only one value
this.pattern != null
this.pattern.toString == ""
this.arguments != null
this.arguments.getClass().getName() == java.lang.Object[].class
this.arguments[] == []
this.arguments[].getClass().getName() == []
===========================================================================
org.apache.commons.math.ode.DerivativeException.DerivativeException(java.lang.Throwable):::ENTER
===========================================================================
org.apache.commons.math.ode.DerivativeException.DerivativeException(java.lang.Throwable):::EXIT
===========================================================================
org.apache.commons.math.ode.FirstOrderConverter:::OBJECT
this.equations.getClass().getName() == org.apache.commons.math.ode.FirstOrderConverterTest$Equations.class
this.dimension == 1
size(this.z[]) == 1
size(this.zDot[]) == 1
size(this.zDDot[]) == 1
===========================================================================
org.apache.commons.math.ode.FirstOrderConverter.FirstOrderConverter(org.apache.commons.math.ode.SecondOrderDifferentialEquations):::ENTER
equations.getClass().getName() == org.apache.commons.math.ode.FirstOrderConverterTest$Equations.class
===========================================================================
org.apache.commons.math.ode.FirstOrderConverter.FirstOrderConverter(org.apache.commons.math.ode.SecondOrderDifferentialEquations):::EXIT
this.z[] == [0.0]
this.z[] elements == 0.0
this.zDot[] == [0.0]
this.zDot[] elements == 0.0
this.zDDot[] == [0.0]
this.zDDot[] elements == 0.0
===========================================================================
org.apache.commons.math.ode.FirstOrderConverter.computeDerivatives(double, double[], double[]):::ENTER
size(y[]) == 2
size(yDot[]) == 2
===========================================================================
org.apache.commons.math.ode.FirstOrderConverter.computeDerivatives(double, double[], double[]):::EXIT
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.dimension == orig(this.dimension)
this.z == orig(this.z)
this.zDot == orig(this.zDot)
this.zDDot == orig(this.zDDot)
y[] == orig(y[])
size(this.z[]) == orig(size(this.z[]))
size(this.zDot[]) == orig(size(this.zDot[]))
size(this.zDDot[]) == orig(size(this.zDDot[]))
===========================================================================
org.apache.commons.math.ode.FirstOrderConverter.getDimension():::ENTER
this.z[] == [0.0]
this.z[] elements == 0.0
this.zDot[] == [0.0]
this.zDot[] elements == 0.0
this.zDDot[] == [0.0]
this.zDDot[] elements == 0.0
===========================================================================
org.apache.commons.math.ode.FirstOrderConverter.getDimension():::EXIT
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.dimension == orig(this.dimension)
this.z == orig(this.z)
this.z[] == orig(this.z[])
this.zDot == orig(this.zDot)
this.zDot[] == orig(this.zDot[])
this.zDDot == orig(this.zDDot)
this.zDDot[] == orig(this.zDDot[])
this.z[] == [0.0]
this.z[] elements == 0.0
this.zDot[] == [0.0]
this.zDot[] elements == 0.0
this.zDDot[] == [0.0]
this.zDDot[] elements == 0.0
return == 2
===========================================================================
org.apache.commons.math.ode.FirstOrderConverterTest$Equations:::OBJECT
this.n == 1
this.omega2 == 16.0
===========================================================================
org.apache.commons.math.ode.FirstOrderConverterTest$Equations.Equations(int, double):::ENTER
n == 1
omega == 4.0
===========================================================================
org.apache.commons.math.ode.FirstOrderConverterTest$Equations.Equations(int, double):::EXIT
===========================================================================
org.apache.commons.math.ode.FirstOrderConverterTest$Equations.computeSecondDerivatives(double, double[], double[], double[]):::ENTER
size(y[]) == 1
size(yDot[]) == 1
size(yDDot[]) == 1
===========================================================================
org.apache.commons.math.ode.FirstOrderConverterTest$Equations.computeSecondDerivatives(double, double[], double[], double[]):::EXIT
this.n == orig(this.n)
this.omega2 == orig(this.omega2)
y[] == orig(y[])
yDot[] == orig(yDot[])
===========================================================================
org.apache.commons.math.ode.FirstOrderConverterTest$Equations.getDimension():::ENTER
===========================================================================
org.apache.commons.math.ode.FirstOrderConverterTest$Equations.getDimension():::EXIT
this.n == orig(this.n)
this.omega2 == orig(this.omega2)
return == 1
===========================================================================
org.apache.commons.math.ode.FirstOrderConverterTest:::OBJECT
===========================================================================
org.apache.commons.math.ode.FirstOrderConverterTest.FirstOrderConverterTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.ode.FirstOrderConverterTest.FirstOrderConverterTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.math.ode.FirstOrderConverterTest.integrateWithSpecifiedStep(double, double, double, double):::ENTER
omega == 4.0
t0 == 0.0
t == 1.0
===========================================================================
org.apache.commons.math.ode.FirstOrderConverterTest.integrateWithSpecifiedStep(double, double, double, double):::EXIT
===========================================================================
org.apache.commons.math.ode.FirstOrderConverterTest.suite():::EXIT
return.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.apache.commons.math.ode.FirstOrderConverterTest.testBigStep():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.FirstOrderConverterTest.testBigStep():::EXIT
===========================================================================
org.apache.commons.math.ode.FirstOrderConverterTest.testDecreasingSteps():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.FirstOrderConverterTest.testDecreasingSteps():::EXIT
===========================================================================
org.apache.commons.math.ode.FirstOrderConverterTest.testSmallStep():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.FirstOrderConverterTest.testSmallStep():::EXIT
===========================================================================
org.apache.commons.math.ode.IntegratorException:::CLASS
===========================================================================
org.apache.commons.math.ode.IntegratorException:::OBJECT
this.pattern has only one value
this.pattern.toString == ""
this.arguments.getClass().getName() == java.lang.Object[].class
this.arguments[] == []
this.arguments[].getClass().getName() == []
===========================================================================
org.apache.commons.math.ode.IntegratorException.IntegratorException(java.lang.Throwable):::ENTER
===========================================================================
org.apache.commons.math.ode.IntegratorException.IntegratorException(java.lang.Throwable):::EXIT
===========================================================================
org.apache.commons.math.ode.MultistepIntegrator$CountingDifferentialEquations:::OBJECT
this.dimension one of { 1, 2, 4 }
org.apache.commons.math.ode.MultistepIntegrator.this.scaled == null
org.apache.commons.math.ode.MultistepIntegrator.this.nordsieck == null
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == "matrix must have at least one row"
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == "matrix must have at least one column"
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == "some rows have length {0} while others have length {1}"
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == "no entry at indices ({0}, {1}) in a {2}x{3} matrix"
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == "vector length mismatch: got {0} but expected {1}"
org.apache.commons.math.ode.MultistepIntegrator.this.starter.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.class
org.apache.commons.math.ode.MultistepIntegrator.this.nSteps >= 1
org.apache.commons.math.ode.MultistepIntegrator.this.safety == 0.9
org.apache.commons.math.ode.MultistepIntegrator.this.minReduction == 0.2
org.apache.commons.math.ode.MultistepIntegrator.this.vecAbsoluteTolerance == null
org.apache.commons.math.ode.MultistepIntegrator.this.vecRelativeTolerance == null
org.apache.commons.math.ode.MultistepIntegrator.this.initialStep == -1.0
org.apache.commons.math.ode.MultistepIntegrator.this.minStep one of { 0.0, 1.0E-6 }
org.apache.commons.math.ode.MultistepIntegrator.this.maxStep one of { 0.1, 1.0, 4.0 }
org.apache.commons.math.ode.MultistepIntegrator.this.stepHandlers.getClass().getName() == java.util.ArrayList.class
org.apache.commons.math.ode.MultistepIntegrator.this.stepStart one of { 0.0, Double.NaN }
org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.states[] == []
org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.states[].getClass().getName() == []
org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.states.getClass().getName() == java.util.ArrayList.class
org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.first == null
org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.initialized == false
org.apache.commons.math.ode.MultistepIntegrator.this.name.toString one of { "Adams-Bashforth", "Adams-Moulton" }
org.apache.commons.math.ode.MultistepIntegrator.this.maxEvaluations one of { 650, 2147483647 }
org.apache.commons.math.ode.MultistepIntegrator.this.evaluations >= 0
===========================================================================
org.apache.commons.math.ode.MultistepIntegrator$CountingDifferentialEquations.CountingDifferentialEquations(org.apache.commons.math.ode.MultistepIntegrator, int):::ENTER
org.apache.commons.math.ode.MultistepIntegrator.this.scaled == null
org.apache.commons.math.ode.MultistepIntegrator.this.nordsieck == null
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == "matrix must have at least one row"
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == "matrix must have at least one column"
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == "some rows have length {0} while others have length {1}"
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == "no entry at indices ({0}, {1}) in a {2}x{3} matrix"
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == "vector length mismatch: got {0} but expected {1}"
org.apache.commons.math.ode.MultistepIntegrator.this.starter.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.class
org.apache.commons.math.ode.MultistepIntegrator.this.safety == 0.9
org.apache.commons.math.ode.MultistepIntegrator.this.minReduction == 0.2
org.apache.commons.math.ode.MultistepIntegrator.this.vecAbsoluteTolerance == null
org.apache.commons.math.ode.MultistepIntegrator.this.vecRelativeTolerance == null
org.apache.commons.math.ode.MultistepIntegrator.this.initialStep == -1.0
org.apache.commons.math.ode.MultistepIntegrator.this.minStep one of { 0.0, 1.0E-6 }
org.apache.commons.math.ode.MultistepIntegrator.this.maxStep one of { 0.1, 1.0, 4.0 }
org.apache.commons.math.ode.MultistepIntegrator.this.stepHandlers.getClass().getName() == java.util.ArrayList.class
org.apache.commons.math.ode.MultistepIntegrator.this.stepStart == Double.NaN
org.apache.commons.math.ode.MultistepIntegrator.this.stepSize one of { 0.0, 3.1622776601683794E-4 }
org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.states[] == []
org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.states[].getClass().getName() == []
org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.states.getClass().getName() == java.util.ArrayList.class
org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.first == null
org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.initialized == false
org.apache.commons.math.ode.MultistepIntegrator.this.name.toString one of { "Adams-Bashforth", "Adams-Moulton" }
org.apache.commons.math.ode.MultistepIntegrator.this.maxEvaluations one of { 650, 2147483647 }
org.apache.commons.math.ode.MultistepIntegrator.this.evaluations == 0
dimension one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.MultistepIntegrator$CountingDifferentialEquations.CountingDifferentialEquations(org.apache.commons.math.ode.MultistepIntegrator, int):::EXIT
org.apache.commons.math.ode.MultistepIntegrator.this == orig(org.apache.commons.math.ode.MultistepIntegrator.this)
org.apache.commons.math.ode.MultistepIntegrator.this.getClass().getName() == orig(org.apache.commons.math.ode.MultistepIntegrator.this.getClass().getName())
org.apache.commons.math.ode.MultistepIntegrator.this.scaled == orig(org.apache.commons.math.ode.MultistepIntegrator.this.scaled)
org.apache.commons.math.ode.MultistepIntegrator.this.nordsieck == orig(org.apache.commons.math.ode.MultistepIntegrator.this.nordsieck)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString)
org.apache.commons.math.ode.MultistepIntegrator.this.starter == orig(org.apache.commons.math.ode.MultistepIntegrator.this.starter)
org.apache.commons.math.ode.MultistepIntegrator.this.starter.getClass().getName() == orig(org.apache.commons.math.ode.MultistepIntegrator.this.starter.getClass().getName())
org.apache.commons.math.ode.MultistepIntegrator.this.nSteps == orig(org.apache.commons.math.ode.MultistepIntegrator.this.nSteps)
org.apache.commons.math.ode.MultistepIntegrator.this.exp == orig(org.apache.commons.math.ode.MultistepIntegrator.this.exp)
org.apache.commons.math.ode.MultistepIntegrator.this.safety == orig(org.apache.commons.math.ode.MultistepIntegrator.this.safety)
org.apache.commons.math.ode.MultistepIntegrator.this.minReduction == orig(org.apache.commons.math.ode.MultistepIntegrator.this.minReduction)
org.apache.commons.math.ode.MultistepIntegrator.this.maxGrowth == orig(org.apache.commons.math.ode.MultistepIntegrator.this.maxGrowth)
org.apache.commons.math.ode.MultistepIntegrator.this.scalAbsoluteTolerance == orig(org.apache.commons.math.ode.MultistepIntegrator.this.scalAbsoluteTolerance)
org.apache.commons.math.ode.MultistepIntegrator.this.scalRelativeTolerance == orig(org.apache.commons.math.ode.MultistepIntegrator.this.scalRelativeTolerance)
org.apache.commons.math.ode.MultistepIntegrator.this.vecAbsoluteTolerance == orig(org.apache.commons.math.ode.MultistepIntegrator.this.vecAbsoluteTolerance)
org.apache.commons.math.ode.MultistepIntegrator.this.vecRelativeTolerance == orig(org.apache.commons.math.ode.MultistepIntegrator.this.vecRelativeTolerance)
org.apache.commons.math.ode.MultistepIntegrator.this.initialStep == orig(org.apache.commons.math.ode.MultistepIntegrator.this.initialStep)
org.apache.commons.math.ode.MultistepIntegrator.this.minStep == orig(org.apache.commons.math.ode.MultistepIntegrator.this.minStep)
org.apache.commons.math.ode.MultistepIntegrator.this.maxStep == orig(org.apache.commons.math.ode.MultistepIntegrator.this.maxStep)
org.apache.commons.math.ode.MultistepIntegrator.this.stepHandlers == orig(org.apache.commons.math.ode.MultistepIntegrator.this.stepHandlers)
org.apache.commons.math.ode.MultistepIntegrator.this.stepHandlers.getClass().getName() == orig(org.apache.commons.math.ode.MultistepIntegrator.this.stepHandlers.getClass().getName())
org.apache.commons.math.ode.MultistepIntegrator.this.stepSize == orig(org.apache.commons.math.ode.MultistepIntegrator.this.stepSize)
org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager == orig(org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager)
org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.states == orig(org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.states)
org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.states[] == orig(org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.states[])
org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.states.getClass().getName() == orig(org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.states.getClass().getName())
org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.first == orig(org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.first)
org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.initialized == orig(org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.initialized)
org.apache.commons.math.ode.MultistepIntegrator.this.name == orig(org.apache.commons.math.ode.MultistepIntegrator.this.name)
org.apache.commons.math.ode.MultistepIntegrator.this.name.toString == orig(org.apache.commons.math.ode.MultistepIntegrator.this.name.toString)
org.apache.commons.math.ode.MultistepIntegrator.this.maxEvaluations == orig(org.apache.commons.math.ode.MultistepIntegrator.this.maxEvaluations)
org.apache.commons.math.ode.MultistepIntegrator.this.evaluations == orig(org.apache.commons.math.ode.MultistepIntegrator.this.evaluations)
org.apache.commons.math.ode.MultistepIntegrator.this.equations == orig(org.apache.commons.math.ode.MultistepIntegrator.this.equations)
org.apache.commons.math.ode.MultistepIntegrator.this.equations.getClass().getName() == orig(org.apache.commons.math.ode.MultistepIntegrator.this.equations.getClass().getName())
org.apache.commons.math.ode.MultistepIntegrator.this.stepStart == Double.NaN
org.apache.commons.math.ode.MultistepIntegrator.this.stepSize one of { 0.0, 3.1622776601683794E-4 }
org.apache.commons.math.ode.MultistepIntegrator.this.evaluations == 0
===========================================================================
org.apache.commons.math.ode.MultistepIntegrator$CountingDifferentialEquations.computeDerivatives(double, double[], double[]):::ENTER
size(y[]) one of { 1, 2, 4 }
size(dot[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.MultistepIntegrator$CountingDifferentialEquations.computeDerivatives(double, double[], double[]):::EXIT
this.dimension == orig(this.dimension)
org.apache.commons.math.ode.MultistepIntegrator.this == orig(org.apache.commons.math.ode.MultistepIntegrator.this)
org.apache.commons.math.ode.MultistepIntegrator.this.getClass().getName() == orig(org.apache.commons.math.ode.MultistepIntegrator.this.getClass().getName())
org.apache.commons.math.ode.MultistepIntegrator.this.scaled == orig(org.apache.commons.math.ode.MultistepIntegrator.this.scaled)
org.apache.commons.math.ode.MultistepIntegrator.this.nordsieck == orig(org.apache.commons.math.ode.MultistepIntegrator.this.nordsieck)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString)
org.apache.commons.math.ode.MultistepIntegrator.this.starter == orig(org.apache.commons.math.ode.MultistepIntegrator.this.starter)
org.apache.commons.math.ode.MultistepIntegrator.this.starter.getClass().getName() == orig(org.apache.commons.math.ode.MultistepIntegrator.this.starter.getClass().getName())
org.apache.commons.math.ode.MultistepIntegrator.this.nSteps == orig(org.apache.commons.math.ode.MultistepIntegrator.this.nSteps)
org.apache.commons.math.ode.MultistepIntegrator.this.exp == orig(org.apache.commons.math.ode.MultistepIntegrator.this.exp)
org.apache.commons.math.ode.MultistepIntegrator.this.safety == orig(org.apache.commons.math.ode.MultistepIntegrator.this.safety)
org.apache.commons.math.ode.MultistepIntegrator.this.minReduction == orig(org.apache.commons.math.ode.MultistepIntegrator.this.minReduction)
org.apache.commons.math.ode.MultistepIntegrator.this.maxGrowth == orig(org.apache.commons.math.ode.MultistepIntegrator.this.maxGrowth)
org.apache.commons.math.ode.MultistepIntegrator.this.scalAbsoluteTolerance == orig(org.apache.commons.math.ode.MultistepIntegrator.this.scalAbsoluteTolerance)
org.apache.commons.math.ode.MultistepIntegrator.this.scalRelativeTolerance == orig(org.apache.commons.math.ode.MultistepIntegrator.this.scalRelativeTolerance)
org.apache.commons.math.ode.MultistepIntegrator.this.vecAbsoluteTolerance == orig(org.apache.commons.math.ode.MultistepIntegrator.this.vecAbsoluteTolerance)
org.apache.commons.math.ode.MultistepIntegrator.this.vecRelativeTolerance == orig(org.apache.commons.math.ode.MultistepIntegrator.this.vecRelativeTolerance)
org.apache.commons.math.ode.MultistepIntegrator.this.initialStep == orig(org.apache.commons.math.ode.MultistepIntegrator.this.initialStep)
org.apache.commons.math.ode.MultistepIntegrator.this.minStep == orig(org.apache.commons.math.ode.MultistepIntegrator.this.minStep)
org.apache.commons.math.ode.MultistepIntegrator.this.maxStep == orig(org.apache.commons.math.ode.MultistepIntegrator.this.maxStep)
org.apache.commons.math.ode.MultistepIntegrator.this.stepHandlers == orig(org.apache.commons.math.ode.MultistepIntegrator.this.stepHandlers)
org.apache.commons.math.ode.MultistepIntegrator.this.stepHandlers.getClass().getName() == orig(org.apache.commons.math.ode.MultistepIntegrator.this.stepHandlers.getClass().getName())
org.apache.commons.math.ode.MultistepIntegrator.this.stepSize == orig(org.apache.commons.math.ode.MultistepIntegrator.this.stepSize)
org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager == orig(org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager)
org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.states == orig(org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.states)
org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.states[] == orig(org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.states[])
org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.states.getClass().getName() == orig(org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.states.getClass().getName())
org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.first == orig(org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.first)
org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.initialized == orig(org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.initialized)
org.apache.commons.math.ode.MultistepIntegrator.this.name == orig(org.apache.commons.math.ode.MultistepIntegrator.this.name)
org.apache.commons.math.ode.MultistepIntegrator.this.name.toString == orig(org.apache.commons.math.ode.MultistepIntegrator.this.name.toString)
org.apache.commons.math.ode.MultistepIntegrator.this.maxEvaluations == orig(org.apache.commons.math.ode.MultistepIntegrator.this.maxEvaluations)
org.apache.commons.math.ode.MultistepIntegrator.this.equations == orig(org.apache.commons.math.ode.MultistepIntegrator.this.equations)
org.apache.commons.math.ode.MultistepIntegrator.this.equations.getClass().getName() == orig(org.apache.commons.math.ode.MultistepIntegrator.this.equations.getClass().getName())
y[] == orig(y[])
org.apache.commons.math.ode.MultistepIntegrator.this.evaluations >= 1
org.apache.commons.math.ode.MultistepIntegrator.this.evaluations - orig(org.apache.commons.math.ode.MultistepIntegrator.this.evaluations) - 1 == 0
===========================================================================
org.apache.commons.math.ode.MultistepIntegrator$CountingDifferentialEquations.getDimension():::ENTER
org.apache.commons.math.ode.MultistepIntegrator.this.stepStart == Double.NaN
org.apache.commons.math.ode.MultistepIntegrator.this.stepSize one of { 0.0, 3.1622776601683794E-4 }
org.apache.commons.math.ode.MultistepIntegrator.this.evaluations == 0
===========================================================================
org.apache.commons.math.ode.MultistepIntegrator$CountingDifferentialEquations.getDimension():::EXIT
this.dimension == orig(this.dimension)
org.apache.commons.math.ode.MultistepIntegrator.this == orig(org.apache.commons.math.ode.MultistepIntegrator.this)
org.apache.commons.math.ode.MultistepIntegrator.this.getClass().getName() == orig(org.apache.commons.math.ode.MultistepIntegrator.this.getClass().getName())
org.apache.commons.math.ode.MultistepIntegrator.this.scaled == orig(org.apache.commons.math.ode.MultistepIntegrator.this.scaled)
org.apache.commons.math.ode.MultistepIntegrator.this.nordsieck == orig(org.apache.commons.math.ode.MultistepIntegrator.this.nordsieck)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString)
org.apache.commons.math.ode.MultistepIntegrator.this.starter == orig(org.apache.commons.math.ode.MultistepIntegrator.this.starter)
org.apache.commons.math.ode.MultistepIntegrator.this.starter.getClass().getName() == orig(org.apache.commons.math.ode.MultistepIntegrator.this.starter.getClass().getName())
org.apache.commons.math.ode.MultistepIntegrator.this.nSteps == orig(org.apache.commons.math.ode.MultistepIntegrator.this.nSteps)
org.apache.commons.math.ode.MultistepIntegrator.this.exp == orig(org.apache.commons.math.ode.MultistepIntegrator.this.exp)
org.apache.commons.math.ode.MultistepIntegrator.this.safety == orig(org.apache.commons.math.ode.MultistepIntegrator.this.safety)
org.apache.commons.math.ode.MultistepIntegrator.this.minReduction == orig(org.apache.commons.math.ode.MultistepIntegrator.this.minReduction)
org.apache.commons.math.ode.MultistepIntegrator.this.maxGrowth == orig(org.apache.commons.math.ode.MultistepIntegrator.this.maxGrowth)
org.apache.commons.math.ode.MultistepIntegrator.this.scalAbsoluteTolerance == orig(org.apache.commons.math.ode.MultistepIntegrator.this.scalAbsoluteTolerance)
org.apache.commons.math.ode.MultistepIntegrator.this.scalRelativeTolerance == orig(org.apache.commons.math.ode.MultistepIntegrator.this.scalRelativeTolerance)
org.apache.commons.math.ode.MultistepIntegrator.this.vecAbsoluteTolerance == orig(org.apache.commons.math.ode.MultistepIntegrator.this.vecAbsoluteTolerance)
org.apache.commons.math.ode.MultistepIntegrator.this.vecRelativeTolerance == orig(org.apache.commons.math.ode.MultistepIntegrator.this.vecRelativeTolerance)
org.apache.commons.math.ode.MultistepIntegrator.this.initialStep == orig(org.apache.commons.math.ode.MultistepIntegrator.this.initialStep)
org.apache.commons.math.ode.MultistepIntegrator.this.minStep == orig(org.apache.commons.math.ode.MultistepIntegrator.this.minStep)
org.apache.commons.math.ode.MultistepIntegrator.this.maxStep == orig(org.apache.commons.math.ode.MultistepIntegrator.this.maxStep)
org.apache.commons.math.ode.MultistepIntegrator.this.stepHandlers == orig(org.apache.commons.math.ode.MultistepIntegrator.this.stepHandlers)
org.apache.commons.math.ode.MultistepIntegrator.this.stepHandlers.getClass().getName() == orig(org.apache.commons.math.ode.MultistepIntegrator.this.stepHandlers.getClass().getName())
org.apache.commons.math.ode.MultistepIntegrator.this.stepSize == orig(org.apache.commons.math.ode.MultistepIntegrator.this.stepSize)
org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager == orig(org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager)
org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.states == orig(org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.states)
org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.states[] == orig(org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.states[])
org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.states.getClass().getName() == orig(org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.states.getClass().getName())
org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.first == orig(org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.first)
org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.initialized == orig(org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.initialized)
org.apache.commons.math.ode.MultistepIntegrator.this.name == orig(org.apache.commons.math.ode.MultistepIntegrator.this.name)
org.apache.commons.math.ode.MultistepIntegrator.this.name.toString == orig(org.apache.commons.math.ode.MultistepIntegrator.this.name.toString)
org.apache.commons.math.ode.MultistepIntegrator.this.maxEvaluations == orig(org.apache.commons.math.ode.MultistepIntegrator.this.maxEvaluations)
org.apache.commons.math.ode.MultistepIntegrator.this.evaluations == orig(org.apache.commons.math.ode.MultistepIntegrator.this.evaluations)
org.apache.commons.math.ode.MultistepIntegrator.this.equations == orig(org.apache.commons.math.ode.MultistepIntegrator.this.equations)
org.apache.commons.math.ode.MultistepIntegrator.this.equations.getClass().getName() == orig(org.apache.commons.math.ode.MultistepIntegrator.this.equations.getClass().getName())
org.apache.commons.math.ode.MultistepIntegrator.this.stepStart == Double.NaN
org.apache.commons.math.ode.MultistepIntegrator.this.stepSize one of { 0.0, 3.1622776601683794E-4 }
org.apache.commons.math.ode.MultistepIntegrator.this.evaluations == 0
return one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.MultistepIntegrator$InitializationCompletedMarkerException:::CLASS
===========================================================================
org.apache.commons.math.ode.MultistepIntegrator$InitializationCompletedMarkerException:::OBJECT
this.pattern has only one value
this.pattern.toString == ""
this.arguments.getClass().getName() == java.lang.Object[].class
this.arguments[] == []
this.arguments[].getClass().getName() == []
===========================================================================
org.apache.commons.math.ode.MultistepIntegrator$InitializationCompletedMarkerException.InitializationCompletedMarkerException():::EXIT
===========================================================================
org.apache.commons.math.ode.MultistepIntegrator$NordsieckInitializer:::OBJECT
this.n one of { 1, 2, 4 }
org.apache.commons.math.ode.MultistepIntegrator.this.scaled == null
org.apache.commons.math.ode.MultistepIntegrator.this.nordsieck == null
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == "matrix must have at least one row"
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == "matrix must have at least one column"
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == "some rows have length {0} while others have length {1}"
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == "no entry at indices ({0}, {1}) in a {2}x{3} matrix"
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == "vector length mismatch: got {0} but expected {1}"
org.apache.commons.math.ode.MultistepIntegrator.this.starter.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.class
org.apache.commons.math.ode.MultistepIntegrator.this.safety == 0.9
org.apache.commons.math.ode.MultistepIntegrator.this.minReduction == 0.2
org.apache.commons.math.ode.MultistepIntegrator.this.vecAbsoluteTolerance == null
org.apache.commons.math.ode.MultistepIntegrator.this.vecRelativeTolerance == null
org.apache.commons.math.ode.MultistepIntegrator.this.initialStep == -1.0
org.apache.commons.math.ode.MultistepIntegrator.this.minStep one of { 0.0, 1.0E-6 }
org.apache.commons.math.ode.MultistepIntegrator.this.maxStep one of { 0.1, 1.0, 4.0 }
org.apache.commons.math.ode.MultistepIntegrator.this.stepHandlers.getClass().getName() == java.util.ArrayList.class
org.apache.commons.math.ode.MultistepIntegrator.this.stepStart == Double.NaN
org.apache.commons.math.ode.MultistepIntegrator.this.stepSize one of { 0.0, 3.1622776601683794E-4 }
org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.states[] == []
org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.states[].getClass().getName() == []
org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.states.getClass().getName() == java.util.ArrayList.class
org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.first == null
org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.initialized == false
org.apache.commons.math.ode.MultistepIntegrator.this.name.toString one of { "Adams-Bashforth", "Adams-Moulton" }
org.apache.commons.math.ode.MultistepIntegrator.this.maxEvaluations one of { 650, 2147483647 }
org.apache.commons.math.ode.MultistepIntegrator.this.evaluations == 0
===========================================================================
org.apache.commons.math.ode.MultistepIntegrator$NordsieckInitializer.NordsieckInitializer(org.apache.commons.math.ode.MultistepIntegrator, int):::ENTER
org.apache.commons.math.ode.MultistepIntegrator.this.scaled == null
org.apache.commons.math.ode.MultistepIntegrator.this.nordsieck == null
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == "matrix must have at least one row"
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == "matrix must have at least one column"
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == "some rows have length {0} while others have length {1}"
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == "no entry at indices ({0}, {1}) in a {2}x{3} matrix"
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == "vector length mismatch: got {0} but expected {1}"
org.apache.commons.math.ode.MultistepIntegrator.this.starter.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.class
org.apache.commons.math.ode.MultistepIntegrator.this.safety == 0.9
org.apache.commons.math.ode.MultistepIntegrator.this.minReduction == 0.2
org.apache.commons.math.ode.MultistepIntegrator.this.vecAbsoluteTolerance == null
org.apache.commons.math.ode.MultistepIntegrator.this.vecRelativeTolerance == null
org.apache.commons.math.ode.MultistepIntegrator.this.initialStep == -1.0
org.apache.commons.math.ode.MultistepIntegrator.this.minStep one of { 0.0, 1.0E-6 }
org.apache.commons.math.ode.MultistepIntegrator.this.maxStep one of { 0.1, 1.0, 4.0 }
org.apache.commons.math.ode.MultistepIntegrator.this.stepHandlers.getClass().getName() == java.util.ArrayList.class
org.apache.commons.math.ode.MultistepIntegrator.this.stepStart == Double.NaN
org.apache.commons.math.ode.MultistepIntegrator.this.stepSize one of { 0.0, 3.1622776601683794E-4 }
org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.states[] == []
org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.states[].getClass().getName() == []
org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.states.getClass().getName() == java.util.ArrayList.class
org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.first == null
org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.initialized == false
org.apache.commons.math.ode.MultistepIntegrator.this.name.toString one of { "Adams-Bashforth", "Adams-Moulton" }
org.apache.commons.math.ode.MultistepIntegrator.this.maxEvaluations one of { 650, 2147483647 }
org.apache.commons.math.ode.MultistepIntegrator.this.evaluations == 0
n one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.MultistepIntegrator$NordsieckInitializer.NordsieckInitializer(org.apache.commons.math.ode.MultistepIntegrator, int):::EXIT
org.apache.commons.math.ode.MultistepIntegrator.this == orig(org.apache.commons.math.ode.MultistepIntegrator.this)
org.apache.commons.math.ode.MultistepIntegrator.this.getClass().getName() == orig(org.apache.commons.math.ode.MultistepIntegrator.this.getClass().getName())
org.apache.commons.math.ode.MultistepIntegrator.this.scaled == orig(org.apache.commons.math.ode.MultistepIntegrator.this.scaled)
org.apache.commons.math.ode.MultistepIntegrator.this.nordsieck == orig(org.apache.commons.math.ode.MultistepIntegrator.this.nordsieck)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString)
org.apache.commons.math.ode.MultistepIntegrator.this.starter == orig(org.apache.commons.math.ode.MultistepIntegrator.this.starter)
org.apache.commons.math.ode.MultistepIntegrator.this.starter.getClass().getName() == orig(org.apache.commons.math.ode.MultistepIntegrator.this.starter.getClass().getName())
org.apache.commons.math.ode.MultistepIntegrator.this.nSteps == orig(org.apache.commons.math.ode.MultistepIntegrator.this.nSteps)
org.apache.commons.math.ode.MultistepIntegrator.this.exp == orig(org.apache.commons.math.ode.MultistepIntegrator.this.exp)
org.apache.commons.math.ode.MultistepIntegrator.this.safety == orig(org.apache.commons.math.ode.MultistepIntegrator.this.safety)
org.apache.commons.math.ode.MultistepIntegrator.this.minReduction == orig(org.apache.commons.math.ode.MultistepIntegrator.this.minReduction)
org.apache.commons.math.ode.MultistepIntegrator.this.maxGrowth == orig(org.apache.commons.math.ode.MultistepIntegrator.this.maxGrowth)
org.apache.commons.math.ode.MultistepIntegrator.this.scalAbsoluteTolerance == orig(org.apache.commons.math.ode.MultistepIntegrator.this.scalAbsoluteTolerance)
org.apache.commons.math.ode.MultistepIntegrator.this.scalRelativeTolerance == orig(org.apache.commons.math.ode.MultistepIntegrator.this.scalRelativeTolerance)
org.apache.commons.math.ode.MultistepIntegrator.this.vecAbsoluteTolerance == orig(org.apache.commons.math.ode.MultistepIntegrator.this.vecAbsoluteTolerance)
org.apache.commons.math.ode.MultistepIntegrator.this.vecRelativeTolerance == orig(org.apache.commons.math.ode.MultistepIntegrator.this.vecRelativeTolerance)
org.apache.commons.math.ode.MultistepIntegrator.this.initialStep == orig(org.apache.commons.math.ode.MultistepIntegrator.this.initialStep)
org.apache.commons.math.ode.MultistepIntegrator.this.minStep == orig(org.apache.commons.math.ode.MultistepIntegrator.this.minStep)
org.apache.commons.math.ode.MultistepIntegrator.this.maxStep == orig(org.apache.commons.math.ode.MultistepIntegrator.this.maxStep)
org.apache.commons.math.ode.MultistepIntegrator.this.stepHandlers == orig(org.apache.commons.math.ode.MultistepIntegrator.this.stepHandlers)
org.apache.commons.math.ode.MultistepIntegrator.this.stepHandlers.getClass().getName() == orig(org.apache.commons.math.ode.MultistepIntegrator.this.stepHandlers.getClass().getName())
org.apache.commons.math.ode.MultistepIntegrator.this.stepSize == orig(org.apache.commons.math.ode.MultistepIntegrator.this.stepSize)
org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager == orig(org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager)
org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.states == orig(org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.states)
org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.states[] == orig(org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.states[])
org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.states.getClass().getName() == orig(org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.states.getClass().getName())
org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.first == orig(org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.first)
org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.initialized == orig(org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.initialized)
org.apache.commons.math.ode.MultistepIntegrator.this.name == orig(org.apache.commons.math.ode.MultistepIntegrator.this.name)
org.apache.commons.math.ode.MultistepIntegrator.this.name.toString == orig(org.apache.commons.math.ode.MultistepIntegrator.this.name.toString)
org.apache.commons.math.ode.MultistepIntegrator.this.maxEvaluations == orig(org.apache.commons.math.ode.MultistepIntegrator.this.maxEvaluations)
org.apache.commons.math.ode.MultistepIntegrator.this.evaluations == orig(org.apache.commons.math.ode.MultistepIntegrator.this.evaluations)
org.apache.commons.math.ode.MultistepIntegrator.this.equations == orig(org.apache.commons.math.ode.MultistepIntegrator.this.equations)
org.apache.commons.math.ode.MultistepIntegrator.this.equations.getClass().getName() == orig(org.apache.commons.math.ode.MultistepIntegrator.this.equations.getClass().getName())
===========================================================================
org.apache.commons.math.ode.MultistepIntegrator$NordsieckInitializer.requiresDenseOutput():::ENTER
===========================================================================
org.apache.commons.math.ode.MultistepIntegrator$NordsieckInitializer.requiresDenseOutput():::EXIT
this.n == orig(this.n)
org.apache.commons.math.ode.MultistepIntegrator.this == orig(org.apache.commons.math.ode.MultistepIntegrator.this)
org.apache.commons.math.ode.MultistepIntegrator.this.getClass().getName() == orig(org.apache.commons.math.ode.MultistepIntegrator.this.getClass().getName())
org.apache.commons.math.ode.MultistepIntegrator.this.scaled == orig(org.apache.commons.math.ode.MultistepIntegrator.this.scaled)
org.apache.commons.math.ode.MultistepIntegrator.this.nordsieck == orig(org.apache.commons.math.ode.MultistepIntegrator.this.nordsieck)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString)
org.apache.commons.math.ode.MultistepIntegrator.this.starter == orig(org.apache.commons.math.ode.MultistepIntegrator.this.starter)
org.apache.commons.math.ode.MultistepIntegrator.this.starter.getClass().getName() == orig(org.apache.commons.math.ode.MultistepIntegrator.this.starter.getClass().getName())
org.apache.commons.math.ode.MultistepIntegrator.this.nSteps == orig(org.apache.commons.math.ode.MultistepIntegrator.this.nSteps)
org.apache.commons.math.ode.MultistepIntegrator.this.exp == orig(org.apache.commons.math.ode.MultistepIntegrator.this.exp)
org.apache.commons.math.ode.MultistepIntegrator.this.safety == orig(org.apache.commons.math.ode.MultistepIntegrator.this.safety)
org.apache.commons.math.ode.MultistepIntegrator.this.minReduction == orig(org.apache.commons.math.ode.MultistepIntegrator.this.minReduction)
org.apache.commons.math.ode.MultistepIntegrator.this.maxGrowth == orig(org.apache.commons.math.ode.MultistepIntegrator.this.maxGrowth)
org.apache.commons.math.ode.MultistepIntegrator.this.scalAbsoluteTolerance == orig(org.apache.commons.math.ode.MultistepIntegrator.this.scalAbsoluteTolerance)
org.apache.commons.math.ode.MultistepIntegrator.this.scalRelativeTolerance == orig(org.apache.commons.math.ode.MultistepIntegrator.this.scalRelativeTolerance)
org.apache.commons.math.ode.MultistepIntegrator.this.vecAbsoluteTolerance == orig(org.apache.commons.math.ode.MultistepIntegrator.this.vecAbsoluteTolerance)
org.apache.commons.math.ode.MultistepIntegrator.this.vecRelativeTolerance == orig(org.apache.commons.math.ode.MultistepIntegrator.this.vecRelativeTolerance)
org.apache.commons.math.ode.MultistepIntegrator.this.initialStep == orig(org.apache.commons.math.ode.MultistepIntegrator.this.initialStep)
org.apache.commons.math.ode.MultistepIntegrator.this.minStep == orig(org.apache.commons.math.ode.MultistepIntegrator.this.minStep)
org.apache.commons.math.ode.MultistepIntegrator.this.maxStep == orig(org.apache.commons.math.ode.MultistepIntegrator.this.maxStep)
org.apache.commons.math.ode.MultistepIntegrator.this.stepHandlers == orig(org.apache.commons.math.ode.MultistepIntegrator.this.stepHandlers)
org.apache.commons.math.ode.MultistepIntegrator.this.stepHandlers.getClass().getName() == orig(org.apache.commons.math.ode.MultistepIntegrator.this.stepHandlers.getClass().getName())
org.apache.commons.math.ode.MultistepIntegrator.this.stepSize == orig(org.apache.commons.math.ode.MultistepIntegrator.this.stepSize)
org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager == orig(org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager)
org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.states == orig(org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.states)
org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.states[] == orig(org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.states[])
org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.states.getClass().getName() == orig(org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.states.getClass().getName())
org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.first == orig(org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.first)
org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.initialized == orig(org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.initialized)
org.apache.commons.math.ode.MultistepIntegrator.this.name == orig(org.apache.commons.math.ode.MultistepIntegrator.this.name)
org.apache.commons.math.ode.MultistepIntegrator.this.name.toString == orig(org.apache.commons.math.ode.MultistepIntegrator.this.name.toString)
org.apache.commons.math.ode.MultistepIntegrator.this.maxEvaluations == orig(org.apache.commons.math.ode.MultistepIntegrator.this.maxEvaluations)
org.apache.commons.math.ode.MultistepIntegrator.this.evaluations == orig(org.apache.commons.math.ode.MultistepIntegrator.this.evaluations)
org.apache.commons.math.ode.MultistepIntegrator.this.equations == orig(org.apache.commons.math.ode.MultistepIntegrator.this.equations)
org.apache.commons.math.ode.MultistepIntegrator.this.equations.getClass().getName() == orig(org.apache.commons.math.ode.MultistepIntegrator.this.equations.getClass().getName())
return == true
===========================================================================
org.apache.commons.math.ode.MultistepIntegrator$NordsieckInitializer.requiresDenseOutput():::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math.ode.MultistepIntegrator$NordsieckInitializer.reset():::ENTER
===========================================================================
org.apache.commons.math.ode.MultistepIntegrator$NordsieckInitializer.reset():::EXIT
this.n == orig(this.n)
org.apache.commons.math.ode.MultistepIntegrator.this == orig(org.apache.commons.math.ode.MultistepIntegrator.this)
org.apache.commons.math.ode.MultistepIntegrator.this.getClass().getName() == orig(org.apache.commons.math.ode.MultistepIntegrator.this.getClass().getName())
org.apache.commons.math.ode.MultistepIntegrator.this.scaled == orig(org.apache.commons.math.ode.MultistepIntegrator.this.scaled)
org.apache.commons.math.ode.MultistepIntegrator.this.nordsieck == orig(org.apache.commons.math.ode.MultistepIntegrator.this.nordsieck)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString)
org.apache.commons.math.ode.MultistepIntegrator.this.starter == orig(org.apache.commons.math.ode.MultistepIntegrator.this.starter)
org.apache.commons.math.ode.MultistepIntegrator.this.starter.getClass().getName() == orig(org.apache.commons.math.ode.MultistepIntegrator.this.starter.getClass().getName())
org.apache.commons.math.ode.MultistepIntegrator.this.nSteps == orig(org.apache.commons.math.ode.MultistepIntegrator.this.nSteps)
org.apache.commons.math.ode.MultistepIntegrator.this.exp == orig(org.apache.commons.math.ode.MultistepIntegrator.this.exp)
org.apache.commons.math.ode.MultistepIntegrator.this.safety == orig(org.apache.commons.math.ode.MultistepIntegrator.this.safety)
org.apache.commons.math.ode.MultistepIntegrator.this.minReduction == orig(org.apache.commons.math.ode.MultistepIntegrator.this.minReduction)
org.apache.commons.math.ode.MultistepIntegrator.this.maxGrowth == orig(org.apache.commons.math.ode.MultistepIntegrator.this.maxGrowth)
org.apache.commons.math.ode.MultistepIntegrator.this.scalAbsoluteTolerance == orig(org.apache.commons.math.ode.MultistepIntegrator.this.scalAbsoluteTolerance)
org.apache.commons.math.ode.MultistepIntegrator.this.scalRelativeTolerance == orig(org.apache.commons.math.ode.MultistepIntegrator.this.scalRelativeTolerance)
org.apache.commons.math.ode.MultistepIntegrator.this.vecAbsoluteTolerance == orig(org.apache.commons.math.ode.MultistepIntegrator.this.vecAbsoluteTolerance)
org.apache.commons.math.ode.MultistepIntegrator.this.vecRelativeTolerance == orig(org.apache.commons.math.ode.MultistepIntegrator.this.vecRelativeTolerance)
org.apache.commons.math.ode.MultistepIntegrator.this.initialStep == orig(org.apache.commons.math.ode.MultistepIntegrator.this.initialStep)
org.apache.commons.math.ode.MultistepIntegrator.this.minStep == orig(org.apache.commons.math.ode.MultistepIntegrator.this.minStep)
org.apache.commons.math.ode.MultistepIntegrator.this.maxStep == orig(org.apache.commons.math.ode.MultistepIntegrator.this.maxStep)
org.apache.commons.math.ode.MultistepIntegrator.this.stepHandlers == orig(org.apache.commons.math.ode.MultistepIntegrator.this.stepHandlers)
org.apache.commons.math.ode.MultistepIntegrator.this.stepHandlers.getClass().getName() == orig(org.apache.commons.math.ode.MultistepIntegrator.this.stepHandlers.getClass().getName())
org.apache.commons.math.ode.MultistepIntegrator.this.stepSize == orig(org.apache.commons.math.ode.MultistepIntegrator.this.stepSize)
org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager == orig(org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager)
org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.states == orig(org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.states)
org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.states[] == orig(org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.states[])
org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.states.getClass().getName() == orig(org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.states.getClass().getName())
org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.first == orig(org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.first)
org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.initialized == orig(org.apache.commons.math.ode.MultistepIntegrator.this.eventsHandlersManager.initialized)
org.apache.commons.math.ode.MultistepIntegrator.this.name == orig(org.apache.commons.math.ode.MultistepIntegrator.this.name)
org.apache.commons.math.ode.MultistepIntegrator.this.name.toString == orig(org.apache.commons.math.ode.MultistepIntegrator.this.name.toString)
org.apache.commons.math.ode.MultistepIntegrator.this.maxEvaluations == orig(org.apache.commons.math.ode.MultistepIntegrator.this.maxEvaluations)
org.apache.commons.math.ode.MultistepIntegrator.this.evaluations == orig(org.apache.commons.math.ode.MultistepIntegrator.this.evaluations)
org.apache.commons.math.ode.MultistepIntegrator.this.equations == orig(org.apache.commons.math.ode.MultistepIntegrator.this.equations)
org.apache.commons.math.ode.MultistepIntegrator.this.equations.getClass().getName() == orig(org.apache.commons.math.ode.MultistepIntegrator.this.equations.getClass().getName())
===========================================================================
org.apache.commons.math.ode.MultistepIntegrator:::OBJECT
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == "matrix must have at least one row"
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == "matrix must have at least one column"
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == "some rows have length {0} while others have length {1}"
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == "no entry at indices ({0}, {1}) in a {2}x{3} matrix"
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == "vector length mismatch: got {0} but expected {1}"
this.nordsieck.data.getClass().getName() == double[][].class
this.nordsieck.data[] elements != null
this.nordsieck.lu == null
this.starter.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.class
this.nSteps >= 1
this.exp >= -1.0
this.safety one of { 0.0, 0.9 }
this.minReduction one of { 0.0, 0.2 }
this.maxGrowth <= 2.0
this.scalAbsoluteTolerance >= 1.0E-12
this.scalRelativeTolerance >= 1.0E-14
this.vecAbsoluteTolerance == null
this.vecRelativeTolerance == null
this.initialStep == -1.0
this.minStep one of { 0.0, 1.0E-6 }
this.maxStep one of { 0.1, 1.0, 4.0 }
this.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.states.getClass().getName() == java.util.ArrayList.class
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.name.toString one of { "Adams-Bashforth", "Adams-Moulton" }
this.maxEvaluations one of { 650, 2147483647 }
this.evaluations >= 0
size(this.scaled[]) one of { 1, 2, 4 }
size(this.nordsieck.data[]) >= 1
===========================================================================
org.apache.commons.math.ode.MultistepIntegrator.MultistepIntegrator(java.lang.String, int, int, double, double, double, double):::ENTER
name.toString one of { "Adams-Bashforth", "Adams-Moulton" }
minStep one of { 0.0, 1.0E-6 }
maxStep one of { 0.1, 1.0, 4.0 }
===========================================================================
org.apache.commons.math.ode.MultistepIntegrator.MultistepIntegrator(java.lang.String, int, int, double, double, double, double):::EXIT
name.toString == orig(name.toString)
this.scaled == null
this.nordsieck == null
this.safety == 0.9
this.minReduction == 0.2
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 3.1622776601683794E-4 }
this.maxEvaluations == 2147483647
this.evaluations == 0
this.equations == null
name.toString one of { "Adams-Bashforth", "Adams-Moulton" }
===========================================================================
org.apache.commons.math.ode.MultistepIntegrator.computeStepGrowShrinkFactor(double):::ENTER
this.scaled[] elements != 0
this.safety == 0.9
this.minReduction == 0.2
error >= 0.0
===========================================================================
org.apache.commons.math.ode.MultistepIntegrator.computeStepGrowShrinkFactor(double):::EXIT
this.scaled == orig(this.scaled)
this.scaled[] == orig(this.scaled[])
this.nordsieck == orig(this.nordsieck)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString)
this.nordsieck.data == orig(this.nordsieck.data)
this.nordsieck.data.getClass().getName() == orig(this.nordsieck.data.getClass().getName())
this.nordsieck.data[] == orig(this.nordsieck.data[])
this.nordsieck.lu == orig(this.nordsieck.lu)
this.starter == orig(this.starter)
this.starter.getClass().getName() == orig(this.starter.getClass().getName())
this.nSteps == orig(this.nSteps)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.minReduction == orig(this.minReduction)
this.maxGrowth == orig(this.maxGrowth)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.scaled[] elements != 0
this.safety == 0.9
this.minReduction == 0.2
===========================================================================
org.apache.commons.math.ode.MultistepIntegrator.setMaxGrowth(double):::ENTER
this.scaled == null
this.nordsieck == null
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 0.0
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 3.1622776601683794E-4 }
this.maxEvaluations == 2147483647
this.evaluations == 0
this.equations == null
===========================================================================
org.apache.commons.math.ode.MultistepIntegrator.setMaxGrowth(double):::EXIT
this.scaled == orig(this.scaled)
this.nordsieck == orig(this.nordsieck)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString)
this.starter == orig(this.starter)
this.starter.getClass().getName() == orig(this.starter.getClass().getName())
this.nSteps == orig(this.nSteps)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.minReduction == orig(this.minReduction)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.scaled == null
this.nordsieck == null
this.safety == 0.9
this.minReduction == 0.2
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 3.1622776601683794E-4 }
this.maxEvaluations == 2147483647
this.evaluations == 0
this.equations == null
orig(this.maxGrowth) % this.maxGrowth == 0
this.maxGrowth > orig(this.maxGrowth)
===========================================================================
org.apache.commons.math.ode.MultistepIntegrator.setMinReduction(double):::ENTER
this.scaled == null
this.nordsieck == null
this.safety == 0.9
this.minReduction == 0.0
this.maxGrowth == 0.0
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 3.1622776601683794E-4 }
this.maxEvaluations == 2147483647
this.evaluations == 0
this.equations == null
minReduction == 0.2
===========================================================================
org.apache.commons.math.ode.MultistepIntegrator.setMinReduction(double):::EXIT
this.scaled == orig(this.scaled)
this.nordsieck == orig(this.nordsieck)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString)
this.starter == orig(this.starter)
this.starter.getClass().getName() == orig(this.starter.getClass().getName())
this.nSteps == orig(this.nSteps)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.maxGrowth == orig(this.maxGrowth)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.scaled == null
this.nordsieck == null
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 0.0
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 3.1622776601683794E-4 }
this.maxEvaluations == 2147483647
this.evaluations == 0
this.equations == null
===========================================================================
org.apache.commons.math.ode.MultistepIntegrator.setSafety(double):::ENTER
this.scaled == null
this.nordsieck == null
this.safety == 0.0
this.minReduction == 0.0
this.maxGrowth == 0.0
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 3.1622776601683794E-4 }
this.maxEvaluations == 2147483647
this.evaluations == 0
this.equations == null
safety == 0.9
===========================================================================
org.apache.commons.math.ode.MultistepIntegrator.setSafety(double):::EXIT
this.scaled == orig(this.scaled)
this.nordsieck == orig(this.nordsieck)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString)
this.starter == orig(this.starter)
this.starter.getClass().getName() == orig(this.starter.getClass().getName())
this.nSteps == orig(this.nSteps)
this.exp == orig(this.exp)
this.minReduction == orig(this.minReduction)
this.maxGrowth == orig(this.maxGrowth)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.scaled == null
this.nordsieck == null
this.safety == 0.9
this.minReduction == 0.0
this.maxGrowth == 0.0
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 3.1622776601683794E-4 }
this.maxEvaluations == 2147483647
this.evaluations == 0
this.equations == null
===========================================================================
org.apache.commons.math.ode.MultistepIntegrator.start(double, double[], double):::ENTER
this.scaled == null
this.nordsieck == null
this.safety == 0.9
this.minReduction == 0.2
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 3.1622776601683794E-4 }
this.evaluations == 0
t0 == 0.0
y0[] one of { [-360.0], [0.9, 0.0, 0.0, 1.1055415967851334], [1.0, 0.1] }
size(y0[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.MultistepIntegrator.start(double, double[], double):::EXIT
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString)
this.starter == orig(this.starter)
this.starter.getClass().getName() == orig(this.starter.getClass().getName())
this.nSteps == orig(this.nSteps)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.minReduction == orig(this.minReduction)
this.maxGrowth == orig(this.maxGrowth)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
y0[] == orig(y0[])
this.safety == 0.9
this.minReduction == 0.2
this.stepStart == 0.0
this.evaluations == 20
y0[] one of { [-360.0], [0.9, 0.0, 0.0, 1.1055415967851334], [1.0, 0.1] }
this.stepSize != orig(this.stepSize)
===========================================================================
org.apache.commons.math.ode.TestProblem1:::CLASS
===========================================================================
org.apache.commons.math.ode.TestProblem1:::OBJECT
this.y != null
this.y[] elements >= 0.0
this.y[] sorted by >=
this.n == 2
this.calls >= 0
this.t0 == 0.0
this.y0 != null
this.y0[] == [1.0, 0.1]
this.y0[] elements one of { 0.1, 1.0 }
this.y0[] sorted by >
this.t1 one of { -4.0, 4.0 }
this.t1 != 0
this.errorScale != null
this.errorScale[] == [1.0, 1.0]
this.errorScale[] elements == 1.0
size(this.y[]) == 2
size(this.y0[]) == 2
size(this.errorScale[]) == 2
===========================================================================
org.apache.commons.math.ode.TestProblem1.TestProblem1():::EXIT
this.y[] == [0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
this.t1 == 4.0
===========================================================================
org.apache.commons.math.ode.TestProblem1.TestProblem1(org.apache.commons.math.ode.TestProblem1):::ENTER
problem != null
problem.y != null
problem.y[] == [0.0, 0.0]
problem.y[] elements == 0.0
problem.n == 2
problem.calls == 0
problem.t0 == 0.0
problem.y0 != null
problem.y0[] == [1.0, 0.1]
problem.y0[] elements one of { 0.1, 1.0 }
problem.y0[] sorted by >
problem.t1 == 4.0
problem.errorScale != null
problem.errorScale[] == [1.0, 1.0]
problem.errorScale[] elements == 1.0
size(problem.y[]) == 2
size(problem.y0[]) == 2
size(problem.errorScale[]) == 2
===========================================================================
org.apache.commons.math.ode.TestProblem1.TestProblem1(org.apache.commons.math.ode.TestProblem1):::EXIT
problem.y == orig(problem.y)
problem.y[] == orig(problem.y[])
problem.n == orig(problem.n)
problem.calls == orig(problem.calls)
problem.t0 == orig(problem.t0)
problem.y0 == orig(problem.y0)
problem.y0[] == orig(problem.y0[])
problem.t1 == orig(problem.t1)
problem.errorScale == orig(problem.errorScale)
problem.errorScale[] == orig(problem.errorScale[])
this.y[] == [0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
this.t1 == 4.0
problem.y != null
problem.y[] == [0.0, 0.0]
problem.y[] elements == 0.0
problem.n == 2
problem.calls == 0
problem.t0 == 0.0
problem.y0 != null
problem.y0[] == [1.0, 0.1]
problem.y0[] elements one of { 0.1, 1.0 }
problem.y0[] sorted by >
problem.t1 == 4.0
problem.errorScale != null
problem.errorScale[] == [1.0, 1.0]
problem.errorScale[] elements == 1.0
size(problem.y[]) == 2
size(problem.y0[]) == 2
size(problem.errorScale[]) == 2
===========================================================================
org.apache.commons.math.ode.TestProblem1.computeTheoreticalState(double):::ENTER
this.calls >= 1
===========================================================================
org.apache.commons.math.ode.TestProblem1.computeTheoreticalState(double):::EXIT
this.y == orig(this.y)
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
size(this.y[]) == orig(size(this.y[]))
this.y[] sorted by >
this.calls >= 1
return != null
return[] sorted by >
size(return[]) == 2
===========================================================================
org.apache.commons.math.ode.TestProblem1.copy():::ENTER
this.y[] == [0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
this.t1 == 4.0
===========================================================================
org.apache.commons.math.ode.TestProblem1.copy():::EXIT
this.y == orig(this.y)
this.y[] == orig(this.y[])
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
this.y[] == [0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
this.t1 == 4.0
return != null
return.y != null
return.y[] == [0.0, 0.0]
return.y[] elements == 0.0
return.n == 2
return.calls == 0
return.t0 == 0.0
return.y0 != null
return.y0[] == [1.0, 0.1]
return.y0[] elements one of { 0.1, 1.0 }
return.y0[] sorted by >
return.t1 == 4.0
return.errorScale != null
return.errorScale[] == [1.0, 1.0]
return.errorScale[] elements == 1.0
size(return.y[]) == 2
size(return.y0[]) == 2
size(return.errorScale[]) == 2
===========================================================================
org.apache.commons.math.ode.TestProblem1.doComputeDerivatives(double, double[], double[]):::ENTER
this.calls >= 1
y != null
y[] elements != 0
yDot != null
size(y[]) == 2
size(yDot[]) == 2
===========================================================================
org.apache.commons.math.ode.TestProblem1.doComputeDerivatives(double, double[], double[]):::EXIT
this.y == orig(this.y)
this.y[] == orig(this.y[])
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
y[] == orig(y[])
this.calls >= 1
y[] elements != 0
yDot[] elements != 0
===========================================================================
org.apache.commons.math.ode.TestProblem2:::CLASS
===========================================================================
org.apache.commons.math.ode.TestProblem2:::OBJECT
this.n == size(this.y[])
size(this.y[]) == size(this.y0[])
this.n == 1
this.calls >= 0
this.t0 == 0.0
this.y0[] == [0.0]
this.y0[] elements == 0.0
this.t1 == 1.0
this.errorScale[] == [1.0]
this.errorScale[] elements == 1.0
size(this.y[]) == 1
size(this.errorScale[]) == 1
===========================================================================
org.apache.commons.math.ode.TestProblem2.TestProblem2():::EXIT
this.y has only one value
this.y[] == [0.0]
this.y[] elements == 0.0
this.calls == 0
this.y0 has only one value
this.errorScale has only one value
===========================================================================
org.apache.commons.math.ode.TestProblem2.TestProblem2(org.apache.commons.math.ode.TestProblem2):::ENTER
problem has only one value
problem.y has only one value
problem.y[] == [0.0]
problem.y[] elements == 0.0
problem.n == 1
problem.calls == 0
problem.t0 == 0.0
problem.y0 has only one value
problem.y0[] == [0.0]
problem.y0[] elements == 0.0
problem.t1 == 1.0
problem.errorScale has only one value
problem.errorScale[] == [1.0]
problem.errorScale[] elements == 1.0
size(problem.y[]) == 1
size(problem.y0[]) == 1
size(problem.errorScale[]) == 1
===========================================================================
org.apache.commons.math.ode.TestProblem2.TestProblem2(org.apache.commons.math.ode.TestProblem2):::EXIT
problem.y == orig(problem.y)
problem.y[] == orig(problem.y[])
problem.n == orig(problem.n)
problem.calls == orig(problem.calls)
problem.t0 == orig(problem.t0)
problem.y0 == orig(problem.y0)
problem.y0[] == orig(problem.y0[])
problem.t1 == orig(problem.t1)
problem.errorScale == orig(problem.errorScale)
problem.errorScale[] == orig(problem.errorScale[])
this.y[] == [0.0]
this.y[] elements == 0.0
this.calls == 0
problem.y has only one value
problem.y[] == [0.0]
problem.y[] elements == 0.0
problem.n == 1
problem.calls == 0
problem.t0 == 0.0
problem.y0 has only one value
problem.y0[] == [0.0]
problem.y0[] elements == 0.0
problem.t1 == 1.0
problem.errorScale has only one value
problem.errorScale[] == [1.0]
problem.errorScale[] elements == 1.0
size(problem.y[]) == 1
size(problem.y0[]) == 1
size(problem.errorScale[]) == 1
===========================================================================
org.apache.commons.math.ode.TestProblem2.computeTheoreticalState(double):::ENTER
this.calls >= 1
===========================================================================
org.apache.commons.math.ode.TestProblem2.computeTheoreticalState(double):::EXIT
this.y == orig(this.y)
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
size(this.y[]) == orig(size(this.y[]))
size(this.y[]) == orig(size(this.y0[]))
this.calls >= 1
size(return[]) == 1
===========================================================================
org.apache.commons.math.ode.TestProblem2.copy():::ENTER
this has only one value
this.y has only one value
this.y[] == [0.0]
this.y[] elements == 0.0
this.calls == 0
this.y0 has only one value
this.errorScale has only one value
===========================================================================
org.apache.commons.math.ode.TestProblem2.copy():::EXIT
this.y == orig(this.y)
this.y[] == orig(this.y[])
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
size(this.y[]) == orig(size(this.y0[]))
this.y has only one value
this.y[] == [0.0]
this.y[] elements == 0.0
this.calls == 0
this.y0 has only one value
this.errorScale has only one value
return.y[] == [0.0]
return.y[] elements == 0.0
return.n == 1
return.calls == 0
return.t0 == 0.0
return.y0[] == [0.0]
return.y0[] elements == 0.0
return.t1 == 1.0
return.errorScale[] == [1.0]
return.errorScale[] elements == 1.0
size(return.y[]) == 1
size(return.y0[]) == 1
size(return.errorScale[]) == 1
===========================================================================
org.apache.commons.math.ode.TestProblem2.doComputeDerivatives(double, double[], double[]):::ENTER
this.calls >= 1
size(y[]) == 1
size(yDot[]) == 1
===========================================================================
org.apache.commons.math.ode.TestProblem2.doComputeDerivatives(double, double[], double[]):::EXIT
this.y == orig(this.y)
this.y[] == orig(this.y[])
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
y[] == orig(y[])
size(this.y[]) == orig(size(this.y0[]))
this.calls >= 1
yDot[] >= orig(yDot[]) (elementwise)
===========================================================================
org.apache.commons.math.ode.TestProblem3:::CLASS
===========================================================================
org.apache.commons.math.ode.TestProblem3:::OBJECT
this.e one of { 0.1, 0.9 }
this.n == 4
this.calls >= 0
this.t0 == 0.0
this.y0[] one of { [0.09999999999999998, 0.0, 0.0, 4.358898943540674], [0.9, 0.0, 0.0, 1.1055415967851334] }
this.y0[] elements >= 0.0
this.t1 == 20.0
this.errorScale[] == [1.0, 1.0, 1.0, 1.0]
this.errorScale[] elements == 1.0
size(this.y[]) == 4
size(this.y0[]) == 4
size(this.errorScale[]) == 4
===========================================================================
org.apache.commons.math.ode.TestProblem3.TestProblem3():::EXIT
this.e == 0.1
this.y[] == [0.0, 0.0, 0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
this.y0[] == [0.9, 0.0, 0.0, 1.1055415967851334]
this.y0[] elements one of { 0.0, 0.9, 1.1055415967851334 }
===========================================================================
org.apache.commons.math.ode.TestProblem3.TestProblem3(double):::ENTER
e one of { 0.1, 0.9 }
===========================================================================
org.apache.commons.math.ode.TestProblem3.TestProblem3(double):::EXIT
this.y[] == [0.0, 0.0, 0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
===========================================================================
org.apache.commons.math.ode.TestProblem3.TestProblem3(org.apache.commons.math.ode.TestProblem3):::ENTER
problem has only one value
problem.e == 0.1
problem.y has only one value
problem.y[] == [0.0, 0.0, 0.0, 0.0]
problem.y[] elements == 0.0
problem.n == 4
problem.calls == 0
problem.t0 == 0.0
problem.y0 has only one value
problem.y0[] == [0.9, 0.0, 0.0, 1.1055415967851334]
problem.y0[] elements one of { 0.0, 0.9, 1.1055415967851334 }
problem.t1 == 20.0
problem.errorScale has only one value
problem.errorScale[] == [1.0, 1.0, 1.0, 1.0]
problem.errorScale[] elements == 1.0
size(problem.y[]) == 4
size(problem.y0[]) == 4
size(problem.errorScale[]) == 4
===========================================================================
org.apache.commons.math.ode.TestProblem3.TestProblem3(org.apache.commons.math.ode.TestProblem3):::EXIT
problem.e == orig(problem.e)
problem.y == orig(problem.y)
problem.y[] == orig(problem.y[])
problem.n == orig(problem.n)
problem.calls == orig(problem.calls)
problem.t0 == orig(problem.t0)
problem.y0 == orig(problem.y0)
problem.y0[] == orig(problem.y0[])
problem.t1 == orig(problem.t1)
problem.errorScale == orig(problem.errorScale)
problem.errorScale[] == orig(problem.errorScale[])
this.e == 0.1
this.y[] == [0.0, 0.0, 0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
this.y0[] == [0.9, 0.0, 0.0, 1.1055415967851334]
this.y0[] elements one of { 0.0, 0.9, 1.1055415967851334 }
problem.e == 0.1
problem.y has only one value
problem.y[] == [0.0, 0.0, 0.0, 0.0]
problem.y[] elements == 0.0
problem.n == 4
problem.calls == 0
problem.t0 == 0.0
problem.y0 has only one value
problem.y0[] == [0.9, 0.0, 0.0, 1.1055415967851334]
problem.y0[] elements one of { 0.0, 0.9, 1.1055415967851334 }
problem.t1 == 20.0
problem.errorScale has only one value
problem.errorScale[] == [1.0, 1.0, 1.0, 1.0]
problem.errorScale[] elements == 1.0
size(problem.y[]) == 4
size(problem.y0[]) == 4
size(problem.errorScale[]) == 4
===========================================================================
org.apache.commons.math.ode.TestProblem3.computeTheoreticalState(double):::ENTER
this.calls >= 1
===========================================================================
org.apache.commons.math.ode.TestProblem3.computeTheoreticalState(double):::EXIT
this.e == orig(this.e)
this.y == orig(this.y)
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
size(this.y[]) == orig(size(this.y[]))
this.calls >= 1
size(return[]) == 4
===========================================================================
org.apache.commons.math.ode.TestProblem3.copy():::ENTER
this has only one value
this.e == 0.1
this.y has only one value
this.y[] == [0.0, 0.0, 0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
this.y0 has only one value
this.y0[] == [0.9, 0.0, 0.0, 1.1055415967851334]
this.y0[] elements one of { 0.0, 0.9, 1.1055415967851334 }
this.errorScale has only one value
===========================================================================
org.apache.commons.math.ode.TestProblem3.copy():::EXIT
this.e == orig(this.e)
this.y == orig(this.y)
this.y[] == orig(this.y[])
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
this.e == 0.1
this.y has only one value
this.y[] == [0.0, 0.0, 0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
this.y0 has only one value
this.y0[] == [0.9, 0.0, 0.0, 1.1055415967851334]
this.y0[] elements one of { 0.0, 0.9, 1.1055415967851334 }
this.errorScale has only one value
return.e == 0.1
return.y[] == [0.0, 0.0, 0.0, 0.0]
return.y[] elements == 0.0
return.n == 4
return.calls == 0
return.t0 == 0.0
return.y0[] == [0.9, 0.0, 0.0, 1.1055415967851334]
return.y0[] elements one of { 0.0, 0.9, 1.1055415967851334 }
return.t1 == 20.0
return.errorScale[] == [1.0, 1.0, 1.0, 1.0]
return.errorScale[] elements == 1.0
size(return.y[]) == 4
size(return.y0[]) == 4
size(return.errorScale[]) == 4
===========================================================================
org.apache.commons.math.ode.TestProblem3.doComputeDerivatives(double, double[], double[]):::ENTER
this.calls >= 1
size(y[]) == 4
size(yDot[]) == 4
===========================================================================
org.apache.commons.math.ode.TestProblem3.doComputeDerivatives(double, double[], double[]):::EXIT
this.e == orig(this.e)
this.y == orig(this.y)
this.y[] == orig(this.y[])
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
y[] == orig(y[])
this.calls >= 1
===========================================================================
org.apache.commons.math.ode.TestProblem4$Bounce:::CLASS
===========================================================================
org.apache.commons.math.ode.TestProblem4$Bounce:::OBJECT
this.sign one of { -1, 1 }
===========================================================================
org.apache.commons.math.ode.TestProblem4$Bounce.Bounce():::EXIT
this.sign == 1
===========================================================================
org.apache.commons.math.ode.TestProblem4$Bounce.eventOccurred(double, double[], boolean):::ENTER
y[] sorted by >
size(y[]) == 2
===========================================================================
org.apache.commons.math.ode.TestProblem4$Bounce.eventOccurred(double, double[], boolean):::EXIT
y[] == orig(y[])
y[] sorted by >
return == 1
this.sign != orig(this.sign)
===========================================================================
org.apache.commons.math.ode.TestProblem4$Bounce.g(double, double[]):::ENTER
size(y[]) == 2
===========================================================================
org.apache.commons.math.ode.TestProblem4$Bounce.g(double, double[]):::EXIT
this.sign == orig(this.sign)
y[] == orig(y[])
===========================================================================
org.apache.commons.math.ode.TestProblem4$Bounce.resetState(double, double[]):::ENTER
y[] sorted by >
size(y[]) == 2
===========================================================================
org.apache.commons.math.ode.TestProblem4$Bounce.resetState(double, double[]):::EXIT
this.sign == orig(this.sign)
y[] sorted by <
y[] + orig(y[]) == 0
===========================================================================
org.apache.commons.math.ode.TestProblem4$Stop:::CLASS
===========================================================================
org.apache.commons.math.ode.TestProblem4$Stop:::OBJECT
===========================================================================
org.apache.commons.math.ode.TestProblem4$Stop.Stop():::EXIT
===========================================================================
org.apache.commons.math.ode.TestProblem4$Stop.eventOccurred(double, double[], boolean):::ENTER
t == 12.0
increasing == true
size(y[]) == 2
===========================================================================
org.apache.commons.math.ode.TestProblem4$Stop.eventOccurred(double, double[], boolean):::EXIT
y[] == orig(y[])
return == 0
===========================================================================
org.apache.commons.math.ode.TestProblem4$Stop.g(double, double[]):::ENTER
size(y[]) == 2
===========================================================================
org.apache.commons.math.ode.TestProblem4$Stop.g(double, double[]):::EXIT
y[] == orig(y[])
===========================================================================
org.apache.commons.math.ode.TestProblem4:::CLASS
===========================================================================
org.apache.commons.math.ode.TestProblem4:::OBJECT
this.n == size(this.y[])
this.n == size(this.y0[])
this.a == 1.2
this.y != null
this.n == 2
this.calls >= 0
this.t0 == 0.0
this.y0 != null
this.y0[] == [0.9320390859672263, 0.3623577544766736]
this.y0[] elements one of { 0.3623577544766736, 0.9320390859672263 }
this.y0[] sorted by >
this.t1 == 15.0
this.errorScale != null
this.errorScale[] == [1.0, 0.0]
this.errorScale[] elements one of { 0.0, 1.0 }
this.errorScale[] sorted by >
size(this.errorScale[]) == 2
===========================================================================
org.apache.commons.math.ode.TestProblem4.TestProblem4():::EXIT
this.y[] == [0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
===========================================================================
org.apache.commons.math.ode.TestProblem4.TestProblem4(org.apache.commons.math.ode.TestProblem4):::ENTER
problem has only one value
problem.a == 1.2
problem.y has only one value
problem.y[] == [0.0, 0.0]
problem.y[] elements == 0.0
problem.n == 2
problem.calls == 0
problem.t0 == 0.0
problem.y0 has only one value
problem.y0[] == [0.9320390859672263, 0.3623577544766736]
problem.y0[] elements one of { 0.3623577544766736, 0.9320390859672263 }
problem.y0[] sorted by >
problem.t1 == 15.0
problem.errorScale has only one value
problem.errorScale[] == [1.0, 0.0]
problem.errorScale[] elements one of { 0.0, 1.0 }
problem.errorScale[] sorted by >
size(problem.y[]) == 2
size(problem.y0[]) == 2
size(problem.errorScale[]) == 2
===========================================================================
org.apache.commons.math.ode.TestProblem4.TestProblem4(org.apache.commons.math.ode.TestProblem4):::EXIT
problem.a == orig(problem.a)
problem.y == orig(problem.y)
problem.y[] == orig(problem.y[])
problem.n == orig(problem.n)
problem.calls == orig(problem.calls)
problem.t0 == orig(problem.t0)
problem.y0 == orig(problem.y0)
problem.y0[] == orig(problem.y0[])
problem.t1 == orig(problem.t1)
problem.errorScale == orig(problem.errorScale)
problem.errorScale[] == orig(problem.errorScale[])
this.y[] == [0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
problem.a == 1.2
problem.y has only one value
problem.y[] == [0.0, 0.0]
problem.y[] elements == 0.0
problem.n == 2
problem.calls == 0
problem.t0 == 0.0
problem.y0 has only one value
problem.y0[] == [0.9320390859672263, 0.3623577544766736]
problem.y0[] elements one of { 0.3623577544766736, 0.9320390859672263 }
problem.y0[] sorted by >
problem.t1 == 15.0
problem.errorScale has only one value
problem.errorScale[] == [1.0, 0.0]
problem.errorScale[] elements one of { 0.0, 1.0 }
problem.errorScale[] sorted by >
size(problem.y[]) == 2
size(problem.y0[]) == 2
size(problem.errorScale[]) == 2
===========================================================================
org.apache.commons.math.ode.TestProblem4.computeTheoreticalState(double):::ENTER
this.calls >= 1
===========================================================================
org.apache.commons.math.ode.TestProblem4.computeTheoreticalState(double):::EXIT
this.a == orig(this.a)
this.y == orig(this.y)
this.n == orig(this.n)
this.n == orig(size(this.y[]))
this.n == orig(size(this.y0[]))
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
this.calls >= 1
return != null
size(return[]) == 2
===========================================================================
org.apache.commons.math.ode.TestProblem4.copy():::ENTER
this has only one value
this.y has only one value
this.y[] == [0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
this.y0 has only one value
this.errorScale has only one value
===========================================================================
org.apache.commons.math.ode.TestProblem4.copy():::EXIT
this.a == orig(this.a)
this.y == orig(this.y)
this.y[] == orig(this.y[])
this.n == orig(this.n)
this.n == orig(size(this.y[]))
this.n == orig(size(this.y0[]))
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
this.y has only one value
this.y[] == [0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
this.y0 has only one value
this.errorScale has only one value
return.a == 1.2
return.y[] == [0.0, 0.0]
return.y[] elements == 0.0
return.n == 2
return.calls == 0
return.t0 == 0.0
return.y0[] == [0.9320390859672263, 0.3623577544766736]
return.y0[] elements one of { 0.3623577544766736, 0.9320390859672263 }
return.y0[] sorted by >
return.t1 == 15.0
return.errorScale[] == [1.0, 0.0]
return.errorScale[] elements one of { 0.0, 1.0 }
return.errorScale[] sorted by >
size(return.y[]) == 2
size(return.y0[]) == 2
size(return.errorScale[]) == 2
===========================================================================
org.apache.commons.math.ode.TestProblem4.doComputeDerivatives(double, double[], double[]):::ENTER
this.calls >= 1
y != null
yDot != null
size(y[]) == 2
size(yDot[]) == 2
===========================================================================
org.apache.commons.math.ode.TestProblem4.doComputeDerivatives(double, double[], double[]):::EXIT
this.a == orig(this.a)
this.y == orig(this.y)
this.y[] == orig(this.y[])
this.n == orig(this.n)
this.n == orig(size(this.y[]))
this.n == orig(size(this.y0[]))
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
y[] == orig(y[])
this.calls >= 1
===========================================================================
org.apache.commons.math.ode.TestProblem4.getEventsHandlers():::ENTER
this.y[] == [0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
===========================================================================
org.apache.commons.math.ode.TestProblem4.getEventsHandlers():::EXIT
this.a == orig(this.a)
this.y == orig(this.y)
this.y[] == orig(this.y[])
this.n == orig(this.n)
this.n == orig(size(this.y[]))
this.n == orig(size(this.y0[]))
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
this.y[] == [0.0, 0.0]
this.y[] elements == 0.0
this.calls == 0
return != null
return.getClass().getName() == org.apache.commons.math.ode.events.EventHandler[].class
return[] elements != null
size(return[]) == 2
===========================================================================
org.apache.commons.math.ode.TestProblem5:::CLASS
===========================================================================
org.apache.commons.math.ode.TestProblem5:::OBJECT
this.y != null
this.y[] == [0.0, 0.0]
this.y[] elements == 0.0
this.n == 2
this.calls == 0
this.t0 == 0.0
this.y0 != null
this.y0[] == [1.0, 0.1]
this.y0[] elements one of { 0.1, 1.0 }
this.y0[] sorted by >
this.t1 == -4.0
this.errorScale != null
this.errorScale[] == [1.0, 1.0]
this.errorScale[] elements == 1.0
size(this.y[]) == 2
size(this.y0[]) == 2
size(this.errorScale[]) == 2
===========================================================================
org.apache.commons.math.ode.TestProblem5.TestProblem5():::EXIT
===========================================================================
org.apache.commons.math.ode.TestProblem5.copy():::ENTER
this has only one value
this.y has only one value
this.y0 has only one value
this.errorScale has only one value
===========================================================================
org.apache.commons.math.ode.TestProblem5.copy():::EXIT
this.y == orig(this.y)
this.y[] == orig(this.y[])
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
this.y has only one value
this.y0 has only one value
this.errorScale has only one value
return.y[] == [0.0, 0.0]
return.y[] elements == 0.0
return.n == 2
return.calls == 0
return.t0 == 0.0
return.y0[] == [1.0, 0.1]
return.y0[] elements one of { 0.1, 1.0 }
return.t1 == -4.0
return.errorScale[] == [1.0, 1.0]
return.errorScale[] elements == 1.0
size(return.y[]) == 2
size(return.y0[]) == 2
size(return.errorScale[]) == 2
===========================================================================
org.apache.commons.math.ode.TestProblem6:::CLASS
===========================================================================
org.apache.commons.math.ode.TestProblem6:::OBJECT
this.n == size(this.y[])
size(this.y[]) == size(this.y0[])
this.n == 1
this.calls >= 0
this.t0 == 0.0
this.y0[] == [-360.0]
this.y0[] elements == -360.0
this.t1 == 1.0
this.errorScale[] == [1.0]
this.errorScale[] elements == 1.0
size(this.y[]) == 1
size(this.errorScale[]) == 1
===========================================================================
org.apache.commons.math.ode.TestProblem6.TestProblem6():::EXIT
this.y[] == [0.0]
this.y[] elements == 0.0
this.calls == 0
===========================================================================
org.apache.commons.math.ode.TestProblem6.TestProblem6(org.apache.commons.math.ode.TestProblem6):::ENTER
problem has only one value
problem.y has only one value
problem.y[] == [0.0]
problem.y[] elements == 0.0
problem.n == 1
problem.calls == 0
problem.t0 == 0.0
problem.y0 has only one value
problem.y0[] == [-360.0]
problem.y0[] elements == -360.0
problem.t1 == 1.0
problem.errorScale has only one value
problem.errorScale[] == [1.0]
problem.errorScale[] elements == 1.0
size(problem.y[]) == 1
size(problem.y0[]) == 1
size(problem.errorScale[]) == 1
===========================================================================
org.apache.commons.math.ode.TestProblem6.TestProblem6(org.apache.commons.math.ode.TestProblem6):::EXIT
problem.y == orig(problem.y)
problem.y[] == orig(problem.y[])
problem.n == orig(problem.n)
problem.calls == orig(problem.calls)
problem.t0 == orig(problem.t0)
problem.y0 == orig(problem.y0)
problem.y0[] == orig(problem.y0[])
problem.t1 == orig(problem.t1)
problem.errorScale == orig(problem.errorScale)
problem.errorScale[] == orig(problem.errorScale[])
this.y[] == [0.0]
this.y[] elements == 0.0
this.calls == 0
problem.y has only one value
problem.y[] == [0.0]
problem.y[] elements == 0.0
problem.n == 1
problem.calls == 0
problem.t0 == 0.0
problem.y0 has only one value
problem.y0[] == [-360.0]
problem.y0[] elements == -360.0
problem.t1 == 1.0
problem.errorScale has only one value
problem.errorScale[] == [1.0]
problem.errorScale[] elements == 1.0
size(problem.y[]) == 1
size(problem.y0[]) == 1
size(problem.errorScale[]) == 1
===========================================================================
org.apache.commons.math.ode.TestProblem6.computeTheoreticalState(double):::ENTER
this.calls >= 1
===========================================================================
org.apache.commons.math.ode.TestProblem6.computeTheoreticalState(double):::EXIT
this.y == orig(this.y)
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
size(this.y[]) == orig(size(this.y[]))
size(this.y[]) == orig(size(this.y0[]))
this.calls >= 1
size(return[]) == 1
===========================================================================
org.apache.commons.math.ode.TestProblem6.copy():::ENTER
this has only one value
this.y has only one value
this.y[] == [0.0]
this.y[] elements == 0.0
this.calls == 0
this.y0 has only one value
this.errorScale has only one value
===========================================================================
org.apache.commons.math.ode.TestProblem6.copy():::EXIT
this.y == orig(this.y)
this.y[] == orig(this.y[])
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
size(this.y[]) == orig(size(this.y0[]))
this.y has only one value
this.y[] == [0.0]
this.y[] elements == 0.0
this.calls == 0
this.y0 has only one value
this.errorScale has only one value
return.y[] == [0.0]
return.y[] elements == 0.0
return.n == 1
return.calls == 0
return.t0 == 0.0
return.y0[] == [-360.0]
return.y0[] elements == -360.0
return.t1 == 1.0
return.errorScale[] == [1.0]
return.errorScale[] elements == 1.0
size(return.y[]) == 1
size(return.y0[]) == 1
size(return.errorScale[]) == 1
===========================================================================
org.apache.commons.math.ode.TestProblem6.doComputeDerivatives(double, double[], double[]):::ENTER
this.calls >= 1
size(y[]) == 1
size(yDot[]) == 1
===========================================================================
org.apache.commons.math.ode.TestProblem6.doComputeDerivatives(double, double[], double[]):::EXIT
this.y == orig(this.y)
this.y[] == orig(this.y[])
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
y[] == orig(y[])
size(this.y[]) == orig(size(this.y0[]))
this.calls >= 1
===========================================================================
org.apache.commons.math.ode.TestProblemAbstract:::CLASS
===========================================================================
org.apache.commons.math.ode.TestProblemAbstract:::OBJECT
this.n >= 0
this.calls >= 0
this.t0 == 0.0
this.errorScale[] elements one of { 0.0, 1.0 }
this.errorScale[] sorted by >=
size(this.y0[]) one of { 1, 2, 4 }
size(this.errorScale[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.TestProblemAbstract.TestProblemAbstract():::EXIT
this.n == 0
this.calls == 0
this.y0 == null
this.t1 == 0.0
this.errorScale == null
===========================================================================
org.apache.commons.math.ode.TestProblemAbstract.TestProblemAbstract(org.apache.commons.math.ode.TestProblemAbstract):::ENTER
problem != null
problem.n one of { 1, 2, 4 }
problem.calls == 0
problem.t0 == 0.0
problem.y0 != null
problem.y0[] elements <= 1.1055415967851334
problem.t1 >= 1.0
problem.errorScale != null
problem.errorScale[] elements one of { 0.0, 1.0 }
problem.errorScale[] sorted by >=
size(problem.y0[]) one of { 1, 2, 4 }
size(problem.errorScale[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.TestProblemAbstract.TestProblemAbstract(org.apache.commons.math.ode.TestProblemAbstract):::EXIT
problem.n == orig(problem.n)
problem.calls == orig(problem.calls)
problem.t0 == orig(problem.t0)
problem.y0 == orig(problem.y0)
problem.y0[] == orig(problem.y0[])
problem.t1 == orig(problem.t1)
problem.errorScale == orig(problem.errorScale)
problem.errorScale[] == orig(problem.errorScale[])
this.n one of { 1, 2, 4 }
this.calls == 0
this.y0 != null
this.y0[] elements <= 1.1055415967851334
this.t1 >= 1.0
this.errorScale != null
problem.n one of { 1, 2, 4 }
problem.calls == 0
problem.t0 == 0.0
problem.y0 != null
problem.y0[] elements <= 1.1055415967851334
problem.t1 >= 1.0
problem.errorScale != null
problem.errorScale[] elements one of { 0.0, 1.0 }
problem.errorScale[] sorted by >=
size(problem.y0[]) one of { 1, 2, 4 }
size(problem.errorScale[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.TestProblemAbstract.computeDerivatives(double, double[], double[]):::ENTER
this.n one of { 1, 2, 4 }
this.y0 != null
this.t1 != 0
this.errorScale != null
y != null
yDot != null
size(y[]) one of { 1, 2, 4 }
size(yDot[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.TestProblemAbstract.computeDerivatives(double, double[], double[]):::EXIT
this.n == orig(this.n)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
y[] == orig(y[])
this.n one of { 1, 2, 4 }
this.calls >= 1
this.y0 != null
this.t1 != 0
this.errorScale != null
this.calls - orig(this.calls) - 1 == 0
===========================================================================
org.apache.commons.math.ode.TestProblemAbstract.getCalls():::ENTER
this.n one of { 2, 4 }
this.y0 != null
this.y0[] one of { [0.09999999999999998, 0.0, 0.0, 4.358898943540674], [1.0, 0.1] }
this.t1 one of { 4.0, 20.0 }
this.errorScale != null
this.errorScale[] elements == 1.0
this.errorScale[] one of { [1.0, 1.0], [1.0, 1.0, 1.0, 1.0] }
size(this.y0[]) one of { 2, 4 }
size(this.errorScale[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math.ode.TestProblemAbstract.getCalls():::EXIT
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
this.n one of { 2, 4 }
this.y0 != null
this.y0[] one of { [0.09999999999999998, 0.0, 0.0, 4.358898943540674], [1.0, 0.1] }
this.t1 one of { 4.0, 20.0 }
this.errorScale != null
this.errorScale[] elements == 1.0
this.errorScale[] one of { [1.0, 1.0], [1.0, 1.0, 1.0, 1.0] }
size(this.y0[]) one of { 2, 4 }
size(this.errorScale[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math.ode.TestProblemAbstract.getDimension():::ENTER
this.n one of { 1, 2, 4 }
this.y0 != null
this.t1 != 0
this.errorScale != null
===========================================================================
org.apache.commons.math.ode.TestProblemAbstract.getDimension():::EXIT
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
this.n one of { 1, 2, 4 }
this.y0 != null
this.t1 != 0
this.errorScale != null
return one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.TestProblemAbstract.getErrorScale():::ENTER
this.n one of { 1, 2, 4 }
this.calls >= 1
this.y0 != null
this.y0[] elements <= 1.1055415967851334
this.t1 != 0
this.errorScale != null
===========================================================================
org.apache.commons.math.ode.TestProblemAbstract.getErrorScale():::EXIT
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
this.n one of { 1, 2, 4 }
this.calls >= 1
this.y0 != null
this.y0[] elements <= 1.1055415967851334
this.t1 != 0
this.errorScale != null
return != null
return[] elements one of { 0.0, 1.0 }
return[] sorted by >=
size(return[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.TestProblemAbstract.getEventsHandlers():::ENTER
this.n one of { 1, 2, 4 }
this.calls == 0
this.y0 != null
this.y0[] elements <= 1.1055415967851334
this.errorScale != null
this.errorScale[] elements == 1.0
this.errorScale[] one of { [1.0], [1.0, 1.0], [1.0, 1.0, 1.0, 1.0] }
===========================================================================
org.apache.commons.math.ode.TestProblemAbstract.getEventsHandlers():::EXIT
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
this.n one of { 1, 2, 4 }
this.calls == 0
this.y0 != null
this.y0[] elements <= 1.1055415967851334
this.errorScale != null
this.errorScale[] elements == 1.0
this.errorScale[] one of { [1.0], [1.0, 1.0], [1.0, 1.0, 1.0, 1.0] }
return != null
return.getClass().getName() == org.apache.commons.math.ode.events.EventHandler[].class
return[] == []
===========================================================================
org.apache.commons.math.ode.TestProblemAbstract.getFinalTime():::ENTER
this.n one of { 1, 2, 4 }
this.y0 != null
this.t1 != 0
this.errorScale != null
===========================================================================
org.apache.commons.math.ode.TestProblemAbstract.getFinalTime():::EXIT
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
this.n one of { 1, 2, 4 }
this.y0 != null
this.t1 != 0
this.errorScale != null
return != 0
===========================================================================
org.apache.commons.math.ode.TestProblemAbstract.getInitialState():::ENTER
this.n one of { 1, 2, 4 }
this.y0 != null
this.t1 != 0
this.errorScale != null
===========================================================================
org.apache.commons.math.ode.TestProblemAbstract.getInitialState():::EXIT
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
this.n one of { 1, 2, 4 }
this.y0 != null
this.t1 != 0
this.errorScale != null
return != null
size(return[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.TestProblemAbstract.getInitialTime():::ENTER
this.n one of { 1, 2, 4 }
this.y0 != null
this.t1 != 0
this.errorScale != null
===========================================================================
org.apache.commons.math.ode.TestProblemAbstract.getInitialTime():::EXIT
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
this.n one of { 1, 2, 4 }
this.y0 != null
this.t1 != 0
this.errorScale != null
return == 0.0
===========================================================================
org.apache.commons.math.ode.TestProblemAbstract.setErrorScale(double[]):::ENTER
this.n one of { 1, 2, 4 }
this.calls == 0
this.y0 != null
this.errorScale == null
errorScale != null
errorScale[] elements one of { 0.0, 1.0 }
errorScale[] sorted by >=
size(errorScale[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.TestProblemAbstract.setErrorScale(double[]):::EXIT
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.t1 == orig(this.t1)
errorScale[] == orig(errorScale[])
this.n one of { 1, 2, 4 }
this.calls == 0
this.y0 != null
this.errorScale != null
errorScale[] elements one of { 0.0, 1.0 }
errorScale[] sorted by >=
===========================================================================
org.apache.commons.math.ode.TestProblemAbstract.setFinalConditions(double):::ENTER
this.n one of { 1, 2, 4 }
this.calls == 0
this.y0 != null
this.t1 one of { 0.0, 4.0 }
this.errorScale[] == [1.0, 1.0]
this.errorScale[] elements == 1.0
t1 != 0
size(this.errorScale[]) == 2
===========================================================================
org.apache.commons.math.ode.TestProblemAbstract.setFinalConditions(double):::EXIT
this.n == orig(this.n)
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.y0 == orig(this.y0)
this.y0[] == orig(this.y0[])
this.errorScale == orig(this.errorScale)
this.errorScale[] == orig(this.errorScale[])
this.n one of { 1, 2, 4 }
this.calls == 0
this.y0 != null
this.t1 != 0
this.errorScale[] == [1.0, 1.0]
this.errorScale[] elements == 1.0
size(this.errorScale[]) == 2
orig(this.t1) % this.t1 == 0
this.t1 != orig(this.t1)
===========================================================================
org.apache.commons.math.ode.TestProblemAbstract.setInitialConditions(double, double[]):::ENTER
this.n == 0
this.calls == 0
this.y0 == null
this.t1 == 0.0
this.errorScale == null
t0 == 0.0
y0 != null
size(y0[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.TestProblemAbstract.setInitialConditions(double, double[]):::EXIT
this.calls == orig(this.calls)
this.t0 == orig(this.t0)
this.t1 == orig(this.t1)
this.errorScale == orig(this.errorScale)
y0[] == orig(y0[])
this.n one of { 1, 2, 4 }
this.calls == 0
this.y0 != null
this.t1 == 0.0
this.errorScale == null
this.n > orig(this.n)
===========================================================================
org.apache.commons.math.ode.TestProblemFactory:::CLASS
org.apache.commons.math.ode.TestProblemFactory.pool has only one value
org.apache.commons.math.ode.TestProblemFactory.pool.getClass().getName() == org.apache.commons.math.ode.TestProblemAbstract[].class
org.apache.commons.math.ode.TestProblemFactory.pool[] contains no nulls and has only one value, of length 6
org.apache.commons.math.ode.TestProblemFactory.pool[].getClass().getName() == [org.apache.commons.math.ode.TestProblem1, org.apache.commons.math.ode.TestProblem2, org.apache.commons.math.ode.TestProblem3, org.apache.commons.math.ode.TestProblem4, org.apache.commons.math.ode.TestProblem5, org.apache.commons.math.ode.TestProblem6]
org.apache.commons.math.ode.TestProblemFactory.pool[].n == [2, 1, 4, 2, 2, 1]
org.apache.commons.math.ode.TestProblemFactory.pool[].n elements one of { 1, 2, 4 }
org.apache.commons.math.ode.TestProblemFactory.pool[].calls == [0, 0, 0, 0, 0, 0]
org.apache.commons.math.ode.TestProblemFactory.pool[].calls elements == 0
org.apache.commons.math.ode.TestProblemFactory.pool[].t0 == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
org.apache.commons.math.ode.TestProblemFactory.pool[].t0 elements == 0.0
org.apache.commons.math.ode.TestProblemFactory.pool[].y0 contains no nulls and has only one value, of length 6
org.apache.commons.math.ode.TestProblemFactory.pool[].t1 == [4.0, 1.0, 20.0, 15.0, -4.0, 1.0]
org.apache.commons.math.ode.TestProblemFactory.pool[].errorScale contains no nulls and has only one value, of length 6
size(org.apache.commons.math.ode.TestProblemFactory.pool[]) == 6
===========================================================================
org.apache.commons.math.ode.TestProblemFactory.getProblems():::ENTER
===========================================================================
org.apache.commons.math.ode.TestProblemFactory.getProblems():::EXIT
org.apache.commons.math.ode.TestProblemFactory.pool == orig(org.apache.commons.math.ode.TestProblemFactory.pool)
org.apache.commons.math.ode.TestProblemFactory.pool.getClass().getName() == return.getClass().getName()
org.apache.commons.math.ode.TestProblemFactory.pool.getClass().getName() == orig(org.apache.commons.math.ode.TestProblemFactory.pool.getClass().getName())
org.apache.commons.math.ode.TestProblemFactory.pool[] == orig(org.apache.commons.math.ode.TestProblemFactory.pool[])
org.apache.commons.math.ode.TestProblemFactory.pool[].n == orig(org.apache.commons.math.ode.TestProblemFactory.pool[].n)
org.apache.commons.math.ode.TestProblemFactory.pool[].calls == orig(org.apache.commons.math.ode.TestProblemFactory.pool[].calls)
org.apache.commons.math.ode.TestProblemFactory.pool[].t0 == orig(org.apache.commons.math.ode.TestProblemFactory.pool[].t0)
org.apache.commons.math.ode.TestProblemFactory.pool[].y0 == orig(org.apache.commons.math.ode.TestProblemFactory.pool[].y0)
org.apache.commons.math.ode.TestProblemFactory.pool[].t1 == orig(org.apache.commons.math.ode.TestProblemFactory.pool[].t1)
org.apache.commons.math.ode.TestProblemFactory.pool[].errorScale == orig(org.apache.commons.math.ode.TestProblemFactory.pool[].errorScale)
return has only one value
return[] contains no nulls and has only one value, of length 6
return[].n == [2, 1, 4, 2, 2, 1]
return[].n elements one of { 1, 2, 4 }
return[].calls == [0, 0, 0, 0, 0, 0]
return[].calls elements == 0
return[].t0 == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
return[].t0 elements == 0.0
return[].y0 contains no nulls and has only one value, of length 6
return[].t1 == [4.0, 1.0, 20.0, 15.0, -4.0, 1.0]
return[].errorScale contains no nulls and has only one value, of length 6
size(return[]) == 6
===========================================================================
org.apache.commons.math.ode.TestProblemHandler:::OBJECT
this.problem.n one of { 1, 2, 4 }
this.problem.calls >= 0
this.problem.t0 == 0.0
this.problem.y0[] elements <= 1.1055415967851334
this.problem.errorScale[] elements one of { 0.0, 1.0 }
this.problem.errorScale[] sorted by >=
this.maxValueError >= 0.0
this.maxTimeError == 0.0
this.lastError >= 0.0
size(this.problem.y0[]) one of { 1, 2, 4 }
size(this.problem.errorScale[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.TestProblemHandler.TestProblemHandler(org.apache.commons.math.ode.TestProblemAbstract, org.apache.commons.math.ode.ODEIntegrator):::ENTER
problem.n one of { 1, 2, 4 }
problem.calls >= 0
problem.t0 == 0.0
problem.y0[] elements <= 1.1055415967851334
problem.errorScale[] elements one of { 0.0, 1.0 }
problem.errorScale[] sorted by >=
size(problem.y0[]) one of { 1, 2, 4 }
size(problem.errorScale[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.TestProblemHandler.TestProblemHandler(org.apache.commons.math.ode.TestProblemAbstract, org.apache.commons.math.ode.ODEIntegrator):::EXIT
problem.n == orig(problem.n)
problem.calls == orig(problem.calls)
problem.t0 == orig(problem.t0)
problem.y0 == orig(problem.y0)
problem.y0[] == orig(problem.y0[])
problem.t1 == orig(problem.t1)
problem.errorScale == orig(problem.errorScale)
problem.errorScale[] == orig(problem.errorScale[])
this.maxValueError == 0.0
this.lastError == 0.0
this.lastTime == 0.0
this.expectedStepStart == Double.NaN
problem.n one of { 1, 2, 4 }
problem.calls >= 0
problem.t0 == 0.0
problem.y0[] elements <= 1.1055415967851334
problem.errorScale[] elements one of { 0.0, 1.0 }
problem.errorScale[] sorted by >=
size(problem.y0[]) one of { 1, 2, 4 }
size(problem.errorScale[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.TestProblemHandler.getLastError():::ENTER
this.problem.n == 2
this.problem.y0[] == [1.0, 0.1]
this.problem.y0[] elements one of { 0.1, 1.0 }
this.problem.y0[] sorted by >
this.problem.t1 one of { -4.0, 4.0 }
this.problem.errorScale[] == [1.0, 1.0]
this.problem.errorScale[] elements == 1.0
this.lastTime one of { -4.0000000000000036, 4.000000000000001 }
this.expectedStepStart one of { -4.0000000000000036, 4.000000000000001 }
size(this.problem.y0[]) == 2
size(this.problem.errorScale[]) == 2
===========================================================================
org.apache.commons.math.ode.TestProblemHandler.getLastError():::EXIT
this.problem == orig(this.problem)
this.problem.getClass().getName() == orig(this.problem.getClass().getName())
this.problem.n == orig(this.problem.n)
this.problem.calls == orig(this.problem.calls)
this.problem.t0 == orig(this.problem.t0)
this.problem.y0 == orig(this.problem.y0)
this.problem.y0[] == orig(this.problem.y0[])
this.problem.t1 == orig(this.problem.t1)
this.problem.errorScale == orig(this.problem.errorScale)
this.problem.errorScale[] == orig(this.problem.errorScale[])
this.maxValueError == orig(this.maxValueError)
this.maxTimeError == orig(this.maxTimeError)
this.lastError == orig(this.lastError)
this.lastTime == orig(this.lastTime)
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.expectedStepStart == orig(this.expectedStepStart)
this.problem.n == 2
this.problem.y0[] == [1.0, 0.1]
this.problem.y0[] elements one of { 0.1, 1.0 }
this.problem.y0[] sorted by >
this.problem.t1 one of { -4.0, 4.0 }
this.problem.errorScale[] == [1.0, 1.0]
this.problem.errorScale[] elements == 1.0
this.lastTime one of { -4.0000000000000036, 4.000000000000001 }
this.expectedStepStart one of { -4.0000000000000036, 4.000000000000001 }
size(this.problem.y0[]) == 2
size(this.problem.errorScale[]) == 2
===========================================================================
org.apache.commons.math.ode.TestProblemHandler.getMaximalTimeError():::ENTER
===========================================================================
org.apache.commons.math.ode.TestProblemHandler.getMaximalTimeError():::EXIT
this.problem == orig(this.problem)
this.problem.getClass().getName() == orig(this.problem.getClass().getName())
this.problem.n == orig(this.problem.n)
this.problem.calls == orig(this.problem.calls)
this.problem.t0 == orig(this.problem.t0)
this.problem.y0 == orig(this.problem.y0)
this.problem.y0[] == orig(this.problem.y0[])
this.problem.t1 == orig(this.problem.t1)
this.problem.errorScale == orig(this.problem.errorScale)
this.problem.errorScale[] == orig(this.problem.errorScale[])
this.maxValueError == orig(this.maxValueError)
this.maxTimeError == orig(this.maxTimeError)
this.lastError == orig(this.lastError)
this.lastTime == orig(this.lastTime)
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.expectedStepStart == orig(this.expectedStepStart)
return == 0.0
===========================================================================
org.apache.commons.math.ode.TestProblemHandler.getMaximalValueError():::ENTER
===========================================================================
org.apache.commons.math.ode.TestProblemHandler.getMaximalValueError():::EXIT
this.problem == orig(this.problem)
this.problem.getClass().getName() == orig(this.problem.getClass().getName())
this.problem.n == orig(this.problem.n)
this.problem.calls == orig(this.problem.calls)
this.problem.t0 == orig(this.problem.t0)
this.problem.y0 == orig(this.problem.y0)
this.problem.y0[] == orig(this.problem.y0[])
this.problem.t1 == orig(this.problem.t1)
this.problem.errorScale == orig(this.problem.errorScale)
this.problem.errorScale[] == orig(this.problem.errorScale[])
this.maxValueError == orig(this.maxValueError)
this.maxTimeError == orig(this.maxTimeError)
this.lastError == orig(this.lastError)
this.lastTime == orig(this.lastTime)
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.expectedStepStart == orig(this.expectedStepStart)
===========================================================================
org.apache.commons.math.ode.TestProblemHandler.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::ENTER
this.problem.calls >= 1
this.lastError == 0.0
this.lastTime == 0.0
===========================================================================
org.apache.commons.math.ode.TestProblemHandler.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::EXIT
this.problem == orig(this.problem)
this.problem.getClass().getName() == orig(this.problem.getClass().getName())
this.problem.n == orig(this.problem.n)
this.problem.t0 == orig(this.problem.t0)
this.problem.y0 == orig(this.problem.y0)
this.problem.y0[] == orig(this.problem.y0[])
this.problem.t1 == orig(this.problem.t1)
this.problem.errorScale == orig(this.problem.errorScale)
this.problem.errorScale[] == orig(this.problem.errorScale[])
this.maxTimeError == orig(this.maxTimeError)
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.problem.calls >= 1
this.problem.calls >= orig(this.problem.calls)
this.maxValueError >= orig(this.maxValueError)
this.lastError >= orig(this.lastError)
===========================================================================
org.apache.commons.math.ode.TestProblemHandler.requiresDenseOutput():::ENTER
this.problem.calls == 0
this.maxValueError == 0.0
this.lastError == 0.0
this.lastTime == 0.0
this.expectedStepStart == Double.NaN
===========================================================================
org.apache.commons.math.ode.TestProblemHandler.requiresDenseOutput():::EXIT
this.problem == orig(this.problem)
this.problem.getClass().getName() == orig(this.problem.getClass().getName())
this.problem.n == orig(this.problem.n)
this.problem.calls == orig(this.problem.calls)
this.problem.t0 == orig(this.problem.t0)
this.problem.y0 == orig(this.problem.y0)
this.problem.y0[] == orig(this.problem.y0[])
this.problem.t1 == orig(this.problem.t1)
this.problem.errorScale == orig(this.problem.errorScale)
this.problem.errorScale[] == orig(this.problem.errorScale[])
this.maxValueError == orig(this.maxValueError)
this.maxTimeError == orig(this.maxTimeError)
this.lastError == orig(this.lastError)
this.lastTime == orig(this.lastTime)
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.problem.calls == 0
this.maxValueError == 0.0
this.lastError == 0.0
this.lastTime == 0.0
this.expectedStepStart == Double.NaN
return == true
===========================================================================
org.apache.commons.math.ode.TestProblemHandler.requiresDenseOutput():::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math.ode.TestProblemHandler.reset():::ENTER
this.maxValueError == 0.0
this.lastError == 0.0
this.lastTime == 0.0
this.expectedStepStart one of { 0.0, Double.NaN }
===========================================================================
org.apache.commons.math.ode.TestProblemHandler.reset():::EXIT
this.problem == orig(this.problem)
this.problem.getClass().getName() == orig(this.problem.getClass().getName())
this.problem.n == orig(this.problem.n)
this.problem.calls == orig(this.problem.calls)
this.problem.t0 == orig(this.problem.t0)
this.problem.y0 == orig(this.problem.y0)
this.problem.y0[] == orig(this.problem.y0[])
this.problem.t1 == orig(this.problem.t1)
this.problem.errorScale == orig(this.problem.errorScale)
this.problem.errorScale[] == orig(this.problem.errorScale[])
this.maxValueError == orig(this.maxValueError)
this.maxTimeError == orig(this.maxTimeError)
this.lastError == orig(this.lastError)
this.lastTime == orig(this.lastTime)
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.maxValueError == 0.0
this.lastError == 0.0
this.lastTime == 0.0
this.expectedStepStart == Double.NaN
this.expectedStepStart != orig(this.expectedStepStart)
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager:::OBJECT
this.states != null
this.states[] elements != null
this.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
this.states.getClass().getName() == java.util.ArrayList.class
this.first.handler != null
this.first.maxCheckInterval one of { 1.0, Infinity }
this.first.maxIterationCount one of { 100, 1000 }
this.first.t0 one of { 0.0, 3.141592653589793, 6.283185307179586 }
this.first.g0 != 0
this.first.pendingEvent == true
this.first.pendingEventTime != 0
this.first.nextAction == 3
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.CombinedEventsManager():::EXIT
this.states[] == []
this.states[].getClass().getName() == []
this.first == null
this.initialized == false
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.addEventHandler(org.apache.commons.math.ode.events.EventHandler, double, double, int):::ENTER
this.first == null
this.initialized == false
handler != null
maxCheckInterval one of { 1.0, Infinity }
maxIterationCount one of { 3, 100, 1000 }
size(this.states[]) one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.addEventHandler(org.apache.commons.math.ode.events.EventHandler, double, double, int):::EXIT
this.states == orig(this.states)
this.states.getClass().getName() == orig(this.states.getClass().getName())
this.first == orig(this.first)
this.initialized == orig(this.initialized)
size(this.states[])-1 == orig(size(this.states[]))
this.first == null
this.initialized == false
size(this.states[]) one of { 1, 2, 3 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.clearEventsHandlers():::ENTER
this.states[] == []
this.states[].getClass().getName() == []
this.first == null
this.initialized == false
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.clearEventsHandlers():::EXIT
this.states == orig(this.states)
this.states[] == orig(this.states[])
this.states.getClass().getName() == orig(this.states.getClass().getName())
this.first == orig(this.first)
this.initialized == orig(this.initialized)
this.states[] == []
this.states[].getClass().getName() == []
this.first == null
this.initialized == false
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::ENTER
interpolator != null
size(this.states[]) one of { 1, 2, 3 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT170
(this.first != null)  <==>  (return == true)
(this.first != null)  ==>  (orig(this.first) == null)
(this.first != null)  ==>  (orig(this.initialized) == true)
(this.first != null)  ==>  (this.first.g0 != 0)
(this.first != null)  ==>  (this.first.handler != null)
(this.first != null)  ==>  (this.first.maxCheckInterval one of { 1.0, Infinity })
(this.first != null)  ==>  (this.first.maxIterationCount one of { 100, 1000 })
(this.first != null)  ==>  (this.first.pendingEventTime != 0)
(this.first != null)  ==>  (this.first.t0 one of { 0.0, 3.141592653589793, 6.283185307179586 })
(this.first != null)  ==>  (this.initialized == orig(this.initialized))
(this.first == null)  <==>  (return == false)
(this.first == null)  ==>  (orig(this.first.g0) != 0)
(this.first == null)  ==>  (orig(this.first.handler) != null)
(this.first == null)  ==>  (orig(this.first.maxCheckInterval) one of { 1.0, Infinity })
(this.first == null)  ==>  (orig(this.first.maxIterationCount) one of { 100, 1000 })
(this.first == null)  ==>  (orig(this.first.pendingEventTime) != 0)
(this.first == null)  ==>  (orig(this.first.t0) one of { 0.0, 3.141592653589793, 6.283185307179586 })
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT170;condition="return == true"
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT170;condition="not(return == true)"
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT
this.states == orig(this.states)
this.states[] == orig(this.states[])
this.states.getClass().getName() == orig(this.states.getClass().getName())
(this.first != null)  <==>  (return == true)
(this.first != null)  ==>  (orig(this.first) == null)
(this.first != null)  ==>  (orig(this.initialized) == true)
(this.first != null)  ==>  (this.first.g0 != 0)
(this.first != null)  ==>  (this.first.handler != null)
(this.first != null)  ==>  (this.first.maxCheckInterval one of { 1.0, Infinity })
(this.first != null)  ==>  (this.first.maxIterationCount one of { 100, 1000 })
(this.first != null)  ==>  (this.first.pendingEventTime != 0)
(this.first != null)  ==>  (this.first.t0 one of { 0.0, 3.141592653589793, 6.283185307179586 })
(this.first != null)  ==>  (this.initialized == orig(this.initialized))
(this.first == null)  <==>  (return == false)
(this.first == null)  ==>  (orig(this.first.g0) != 0)
(this.first == null)  ==>  (orig(this.first.handler) != null)
(this.first == null)  ==>  (orig(this.first.maxCheckInterval) one of { 1.0, Infinity })
(this.first == null)  ==>  (orig(this.first.maxIterationCount) one of { 100, 1000 })
(this.first == null)  ==>  (orig(this.first.pendingEventTime) != 0)
(this.first == null)  ==>  (orig(this.first.t0) one of { 0.0, 3.141592653589793, 6.283185307179586 })
this.initialized == true
size(this.states[]) one of { 1, 2, 3 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT;condition="return == true"
this.initialized == orig(this.initialized)
this.first != null
return == true
orig(this.first) == null
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT;condition="not(return == true)"
this.first == null
return == false
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.getEventTime():::ENTER
this.first != null
this.initialized == true
size(this.states[]) one of { 1, 2, 3 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.getEventTime():::EXIT
this.states == orig(this.states)
this.states[] == orig(this.states[])
this.states.getClass().getName() == orig(this.states.getClass().getName())
this.first == orig(this.first)
this.first.handler == orig(this.first.handler)
this.first.handler.getClass().getName() == orig(this.first.handler.getClass().getName())
this.first.maxCheckInterval == orig(this.first.maxCheckInterval)
this.first.convergence == orig(this.first.convergence)
this.first.maxIterationCount == orig(this.first.maxIterationCount)
this.first.t0 == orig(this.first.t0)
this.first.g0 == orig(this.first.g0)
this.first.g0Positive == orig(this.first.g0Positive)
this.first.pendingEvent == orig(this.first.pendingEvent)
this.first.pendingEventTime == orig(this.first.pendingEventTime)
this.first.forward == orig(this.first.forward)
this.first.increasing == orig(this.first.increasing)
this.first.nextAction == orig(this.first.nextAction)
this.initialized == orig(this.initialized)
this.first != null
this.initialized == true
return != 0
size(this.states[]) one of { 1, 2, 3 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.getEventsHandlers():::ENTER
this.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.first == null
this.initialized == false
size(this.states[]) one of { 0, 2 }
size(this.states[])-1 != 0
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.getEventsHandlers():::EXIT
this.states == orig(this.states)
this.states[] == orig(this.states[])
this.states.getClass().getName() == orig(this.states.getClass().getName())
this.first == orig(this.first)
this.initialized == orig(this.initialized)
this.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.first == null
this.initialized == false
return != null
return.getClass().getName() == java.util.Collections$UnmodifiableCollection.class
size(this.states[]) one of { 0, 2 }
size(this.states[])-1 != 0
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.getEventsStates():::ENTER
this.first == null
this.initialized == false
size(this.states[]) one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.getEventsStates():::EXIT
this.states == orig(this.states)
this.states[] == orig(this.states[])
this.states.getClass().getName() == orig(this.states.getClass().getName())
this.first == orig(this.first)
this.initialized == orig(this.initialized)
this.first == null
this.initialized == false
return != null
return.getClass().getName() == java.util.ArrayList.class
size(this.states[]) one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.isEmpty():::ENTER
this.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState] }
this.first == null
this.initialized == false
size(this.states[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.isEmpty():::EXIT
this.states == orig(this.states)
this.states[] == orig(this.states[])
this.states.getClass().getName() == orig(this.states.getClass().getName())
this.first == orig(this.first)
this.initialized == orig(this.initialized)
(this.states[].getClass().getName() == [])  <==>  (return == true)
(this.states[].getClass().getName() == [])  ==>  (this.states[] == [])
(this.states[].getClass().getName() == [org.apache.commons.math.ode.events.EventState])  <==>  (return == false)
(this.states[].getClass().getName() == [org.apache.commons.math.ode.events.EventState])  <==>  (size(this.states[]) == 1)
(this.states[].getClass().getName() == [org.apache.commons.math.ode.events.EventState])  ==>  (this.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class)
this.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState] }
this.first == null
this.initialized == false
size(this.states[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.isEmpty():::EXIT;condition="return == true"
this.states[] == []
this.states[].getClass().getName() == []
return == true
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.isEmpty():::EXIT;condition="not(return == true)"
this.states[].getClass().getName() == [org.apache.commons.math.ode.events.EventState]
return == false
size(this.states[]) == 1
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.reset(double, double[]):::ENTER
this.first == null
this.initialized == true
y != null
size(this.states[]) one of { 1, 2, 3 }
size(y[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.reset(double, double[]):::EXIT
this.states == orig(this.states)
this.states[] == orig(this.states[])
this.states.getClass().getName() == orig(this.states.getClass().getName())
this.first == orig(this.first)
this.initialized == orig(this.initialized)
(return == false)  ==>  (orig(size(y[])) one of { 1, 2, 4 })
(return == false)  ==>  (y[] == orig(y[]))
(return == true)  ==>  (orig(size(y[])) one of { 1, 2 })
(return == true)  ==>  (orig(y[]) sorted by >)
(return == true)  ==>  (y[] + orig(y[]) == 0)
(return == true)  ==>  (y[] sorted by <)
this.first == null
this.initialized == true
size(this.states[]) one of { 1, 2, 3 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.reset(double, double[]):::EXIT;condition="return == true"
y[] sorted by <
return == true
orig(y[]) sorted by >
orig(size(y[])) one of { 1, 2 }
y[] + orig(y[]) == 0
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.reset(double, double[]):::EXIT;condition="not(return == true)"
y[] == orig(y[])
return == false
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.stepAccepted(double, double[]):::ENTER
this.first == null
this.initialized == true
y != null
size(this.states[]) one of { 1, 2, 3 }
size(y[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.stepAccepted(double, double[]):::EXIT
this.states == orig(this.states)
this.states[] == orig(this.states[])
this.states.getClass().getName() == orig(this.states.getClass().getName())
this.first == orig(this.first)
this.initialized == orig(this.initialized)
y[] == orig(y[])
this.first == null
this.initialized == true
size(this.states[]) one of { 1, 2, 3 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.stop():::ENTER
this.first == null
this.initialized == true
size(this.states[]) one of { 1, 2, 3 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.stop():::EXIT217
this.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
return == true
size(this.states[]) one of { 1, 3 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.stop():::EXIT217;condition="return == true"
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.stop():::EXIT220
return == false
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.stop():::EXIT220;condition="not(return == true)"
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.stop():::EXIT
this.states == orig(this.states)
this.states[] == orig(this.states[])
this.states.getClass().getName() == orig(this.states.getClass().getName())
this.first == orig(this.first)
this.initialized == orig(this.initialized)
(return == false)  ==>  (size(this.states[]) one of { 1, 2, 3 })
(return == true)  ==>  (size(this.states[]) one of { 1, 3 })
(return == true)  ==>  (this.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] })
this.first == null
this.initialized == true
size(this.states[]) one of { 1, 2, 3 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.stop():::EXIT;condition="return == true"
this.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
return == true
size(this.states[]) one of { 1, 3 }
===========================================================================
org.apache.commons.math.ode.events.CombinedEventsManager.stop():::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.math.ode.events.EventException:::CLASS
===========================================================================
org.apache.commons.math.ode.events.EventException:::OBJECT
this has only one value
this.pattern has only one value
this.pattern.toString == "Evaluation failed for argument = {0}"
this.arguments has only one value
this.arguments.getClass().getName() == java.lang.Object[].class
this.arguments[] contains no nulls and has only one value, of length 1
this.arguments[] elements has only one value
this.arguments[].getClass().getName() == [java.lang.Double]
this.arguments[].getClass().getName() elements == java.lang.Double.class
size(this.arguments[]) == 1
===========================================================================
org.apache.commons.math.ode.events.EventException.EventException(java.lang.String, java.lang.Object[]):::ENTER
specifier has only one value
specifier.toString == "Evaluation failed for argument = {0}"
parts has only one value
parts.getClass().getName() == java.lang.Object[].class
parts[] contains no nulls and has only one value, of length 1
parts[] elements has only one value
size(parts[]) == 1
===========================================================================
org.apache.commons.math.ode.events.EventException.EventException(java.lang.String, java.lang.Object[]):::EXIT
specifier.toString == orig(specifier.toString)
parts[] == orig(parts[])
specifier.toString == "Evaluation failed for argument = {0}"
parts[] contains no nulls and has only one value, of length 1
parts[] elements has only one value
===========================================================================
org.apache.commons.math.ode.events.EventState$1:::OBJECT
org.apache.commons.math.ode.events.EventState.this.maxCheckInterval one of { 1.0, Infinity }
org.apache.commons.math.ode.events.EventState.this.convergence >= 2.220446049250313E-16
org.apache.commons.math.ode.events.EventState.this.maxIterationCount one of { 3, 100, 1000 }
org.apache.commons.math.ode.events.EventState.this.t0 one of { 0.0, 3.141592653589793, 6.283185307179586 }
org.apache.commons.math.ode.events.EventState.this.nextAction one of { 2, 3 }
===========================================================================
org.apache.commons.math.ode.events.EventState$1.(org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.sampling.StepInterpolator):::ENTER
org.apache.commons.math.ode.events.EventState.this != null
org.apache.commons.math.ode.events.EventState.this.handler != null
org.apache.commons.math.ode.events.EventState.this.maxCheckInterval one of { 1.0, Infinity }
org.apache.commons.math.ode.events.EventState.this.maxIterationCount one of { 3, 100, 1000 }
org.apache.commons.math.ode.events.EventState.this.t0 one of { 0.0, 3.141592653589793, 6.283185307179586 }
org.apache.commons.math.ode.events.EventState.this.pendingEventTime != 0
org.apache.commons.math.ode.events.EventState.this.nextAction one of { 2, 3 }
$hidden$2 != null
===========================================================================
org.apache.commons.math.ode.events.EventState$1.(org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT
org.apache.commons.math.ode.events.EventState.this == orig(org.apache.commons.math.ode.events.EventState.this)
org.apache.commons.math.ode.events.EventState.this.handler == orig(org.apache.commons.math.ode.events.EventState.this.handler)
org.apache.commons.math.ode.events.EventState.this.handler.getClass().getName() == orig(org.apache.commons.math.ode.events.EventState.this.handler.getClass().getName())
org.apache.commons.math.ode.events.EventState.this.maxCheckInterval == orig(org.apache.commons.math.ode.events.EventState.this.maxCheckInterval)
org.apache.commons.math.ode.events.EventState.this.convergence == orig(org.apache.commons.math.ode.events.EventState.this.convergence)
org.apache.commons.math.ode.events.EventState.this.maxIterationCount == orig(org.apache.commons.math.ode.events.EventState.this.maxIterationCount)
org.apache.commons.math.ode.events.EventState.this.t0 == orig(org.apache.commons.math.ode.events.EventState.this.t0)
org.apache.commons.math.ode.events.EventState.this.g0 == orig(org.apache.commons.math.ode.events.EventState.this.g0)
org.apache.commons.math.ode.events.EventState.this.g0Positive == orig(org.apache.commons.math.ode.events.EventState.this.g0Positive)
org.apache.commons.math.ode.events.EventState.this.pendingEvent == orig(org.apache.commons.math.ode.events.EventState.this.pendingEvent)
org.apache.commons.math.ode.events.EventState.this.forward == orig(org.apache.commons.math.ode.events.EventState.this.forward)
org.apache.commons.math.ode.events.EventState.this.increasing == orig(org.apache.commons.math.ode.events.EventState.this.increasing)
org.apache.commons.math.ode.events.EventState.this.nextAction == orig(org.apache.commons.math.ode.events.EventState.this.nextAction)
this.val$interpolator != null
===========================================================================
org.apache.commons.math.ode.events.EventState$1.value(double):::ENTER
===========================================================================
org.apache.commons.math.ode.events.EventState$1.value(double):::EXIT
this.val$interpolator == orig(this.val$interpolator)
this.val$interpolator.getClass().getName() == orig(this.val$interpolator.getClass().getName())
org.apache.commons.math.ode.events.EventState.this == orig(org.apache.commons.math.ode.events.EventState.this)
org.apache.commons.math.ode.events.EventState.this.handler == orig(org.apache.commons.math.ode.events.EventState.this.handler)
org.apache.commons.math.ode.events.EventState.this.handler.getClass().getName() == orig(org.apache.commons.math.ode.events.EventState.this.handler.getClass().getName())
org.apache.commons.math.ode.events.EventState.this.maxCheckInterval == orig(org.apache.commons.math.ode.events.EventState.this.maxCheckInterval)
org.apache.commons.math.ode.events.EventState.this.convergence == orig(org.apache.commons.math.ode.events.EventState.this.convergence)
org.apache.commons.math.ode.events.EventState.this.maxIterationCount == orig(org.apache.commons.math.ode.events.EventState.this.maxIterationCount)
org.apache.commons.math.ode.events.EventState.this.t0 == orig(org.apache.commons.math.ode.events.EventState.this.t0)
org.apache.commons.math.ode.events.EventState.this.g0 == orig(org.apache.commons.math.ode.events.EventState.this.g0)
org.apache.commons.math.ode.events.EventState.this.g0Positive == orig(org.apache.commons.math.ode.events.EventState.this.g0Positive)
org.apache.commons.math.ode.events.EventState.this.pendingEvent == orig(org.apache.commons.math.ode.events.EventState.this.pendingEvent)
org.apache.commons.math.ode.events.EventState.this.forward == orig(org.apache.commons.math.ode.events.EventState.this.forward)
org.apache.commons.math.ode.events.EventState.this.increasing == orig(org.apache.commons.math.ode.events.EventState.this.increasing)
org.apache.commons.math.ode.events.EventState.this.nextAction == orig(org.apache.commons.math.ode.events.EventState.this.nextAction)
===========================================================================
org.apache.commons.math.ode.events.EventState:::OBJECT
this.handler != null
this.maxCheckInterval one of { 1.0, Infinity }
this.convergence <= 9.374999999999999E-7
this.convergence >= 2.220446049250313E-16
this.maxIterationCount one of { 3, 100, 1000 }
this.t0 >= 0.0
this.pendingEventTime != 0
this.nextAction >= 0
===========================================================================
org.apache.commons.math.ode.events.EventState.EventState(org.apache.commons.math.ode.events.EventHandler, double, double, int):::ENTER
handler != null
maxCheckInterval one of { 1.0, Infinity }
maxIterationCount one of { 3, 100, 1000 }
===========================================================================
org.apache.commons.math.ode.events.EventState.EventState(org.apache.commons.math.ode.events.EventHandler, double, double, int):::EXIT
this.t0 == Double.NaN
this.g0 == Double.NaN
this.g0Positive == true
this.pendingEvent == false
this.pendingEventTime == Double.NaN
this.previousEventTime == Double.NaN
this.forward == false
this.increasing == true
this.nextAction == 3
===========================================================================
org.apache.commons.math.ode.events.EventState.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::ENTER
this.t0 one of { 0.0, 3.141592653589793, 6.283185307179586 }
this.nextAction one of { 1, 3 }
interpolator != null
===========================================================================
org.apache.commons.math.ode.events.EventState.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT232
this.pendingEvent == orig(this.pendingEvent)
this.forward == orig(this.forward)
this.increasing == orig(this.increasing)
this.maxIterationCount one of { 100, 1000 }
this.g0 != 0
this.pendingEvent == true
this.nextAction == 3
return == false
this.pendingEventTime <= orig(this.pendingEventTime)
===========================================================================
org.apache.commons.math.ode.events.EventState.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT232;condition="not(return == true)"
===========================================================================
org.apache.commons.math.ode.events.EventState.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT237
this.forward == orig(this.forward)
this.maxIterationCount one of { 100, 1000 }
this.g0 != 0
this.pendingEvent == true
this.nextAction == 3
return == true
orig(this.pendingEvent) == false
orig(this.pendingEventTime) == Double.NaN
this.pendingEventTime != orig(this.pendingEventTime)
===========================================================================
org.apache.commons.math.ode.events.EventState.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT237;condition="return == true"
===========================================================================
org.apache.commons.math.ode.events.EventState.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT251
this.increasing == orig(this.increasing)
this.pendingEvent == false
this.pendingEventTime == Double.NaN
return == false
this.pendingEventTime != orig(this.pendingEventTime)
===========================================================================
org.apache.commons.math.ode.events.EventState.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT251;condition="not(return == true)"
===========================================================================
org.apache.commons.math.ode.events.EventState.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.maxCheckInterval == orig(this.maxCheckInterval)
this.convergence == orig(this.convergence)
this.maxIterationCount == orig(this.maxIterationCount)
this.t0 == orig(this.t0)
this.g0 == orig(this.g0)
this.g0Positive == orig(this.g0Positive)
this.nextAction == orig(this.nextAction)
(return == false)  ==>  (this.increasing == orig(this.increasing))
(return == false)  ==>  (this.maxIterationCount one of { 3, 100, 1000 })
(return == false)  ==>  (this.nextAction one of { 1, 3 })
(return == true)  ==>  (orig(this.pendingEvent) == false)
(return == true)  ==>  (orig(this.pendingEventTime) == Double.NaN)
(return == true)  ==>  (this.forward == orig(this.forward))
(return == true)  ==>  (this.g0 != 0)
(return == true)  ==>  (this.maxIterationCount one of { 100, 1000 })
(return == true)  ==>  (this.nextAction == 3)
(return == true)  ==>  (this.pendingEvent == true)
(return == true)  ==>  (this.pendingEventTime != orig(this.pendingEventTime))
this.t0 one of { 0.0, 3.141592653589793, 6.283185307179586 }
this.nextAction one of { 1, 3 }
===========================================================================
org.apache.commons.math.ode.events.EventState.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT;condition="return == true"
this.forward == orig(this.forward)
this.maxIterationCount one of { 100, 1000 }
this.g0 != 0
this.pendingEvent == true
this.nextAction == 3
return == true
orig(this.pendingEvent) == false
orig(this.pendingEventTime) == Double.NaN
this.pendingEventTime != orig(this.pendingEventTime)
===========================================================================
org.apache.commons.math.ode.events.EventState.evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator):::EXIT;condition="not(return == true)"
this.increasing == orig(this.increasing)
return == false
===========================================================================
org.apache.commons.math.ode.events.EventState.getConvergence():::ENTER
this.maxIterationCount one of { 3, 1000 }
this.t0 == Double.NaN
this.g0 == Double.NaN
this.g0Positive == true
this.pendingEvent == false
this.pendingEventTime == Double.NaN
this.previousEventTime == Double.NaN
this.forward == false
this.increasing == true
this.nextAction == 3
===========================================================================
org.apache.commons.math.ode.events.EventState.getConvergence():::EXIT
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.maxCheckInterval == orig(this.maxCheckInterval)
this.convergence == orig(this.convergence)
this.maxIterationCount == orig(this.maxIterationCount)
this.g0Positive == orig(this.g0Positive)
this.pendingEvent == orig(this.pendingEvent)
this.forward == orig(this.forward)
this.increasing == orig(this.increasing)
this.nextAction == orig(this.nextAction)
this.maxIterationCount one of { 3, 1000 }
this.t0 == Double.NaN
this.g0 == Double.NaN
this.g0Positive == true
this.pendingEvent == false
this.pendingEventTime == Double.NaN
this.previousEventTime == Double.NaN
this.forward == false
this.increasing == true
this.nextAction == 3
===========================================================================
org.apache.commons.math.ode.events.EventState.getEventHandler():::ENTER
this.maxIterationCount one of { 3, 1000 }
this.t0 == Double.NaN
this.g0 == Double.NaN
this.g0Positive == true
this.pendingEvent == false
this.pendingEventTime == Double.NaN
this.previousEventTime == Double.NaN
this.forward == false
this.increasing == true
this.nextAction == 3
===========================================================================
org.apache.commons.math.ode.events.EventState.getEventHandler():::EXIT
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.maxCheckInterval == orig(this.maxCheckInterval)
this.convergence == orig(this.convergence)
this.maxIterationCount == orig(this.maxIterationCount)
this.g0Positive == orig(this.g0Positive)
this.pendingEvent == orig(this.pendingEvent)
this.forward == orig(this.forward)
this.increasing == orig(this.increasing)
this.nextAction == orig(this.nextAction)
this.maxIterationCount one of { 3, 1000 }
this.t0 == Double.NaN
this.g0 == Double.NaN
this.g0Positive == true
this.pendingEvent == false
this.pendingEventTime == Double.NaN
this.previousEventTime == Double.NaN
this.forward == false
this.increasing == true
this.nextAction == 3
return != null
===========================================================================
org.apache.commons.math.ode.events.EventState.getEventTime():::ENTER
this.maxIterationCount one of { 100, 1000 }
this.t0 one of { 0.0, 3.141592653589793, 6.283185307179586 }
this.g0 != 0
this.pendingEvent == true
this.nextAction == 3
===========================================================================
org.apache.commons.math.ode.events.EventState.getEventTime():::EXIT
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.maxCheckInterval == orig(this.maxCheckInterval)
this.convergence == orig(this.convergence)
this.maxIterationCount == orig(this.maxIterationCount)
this.t0 == orig(this.t0)
this.g0 == orig(this.g0)
this.g0Positive == orig(this.g0Positive)
this.pendingEvent == orig(this.pendingEvent)
this.pendingEventTime == orig(this.pendingEventTime)
this.forward == orig(this.forward)
this.increasing == orig(this.increasing)
this.nextAction == orig(this.nextAction)
this.maxIterationCount one of { 100, 1000 }
this.t0 one of { 0.0, 3.141592653589793, 6.283185307179586 }
this.g0 != 0
this.pendingEvent == true
this.nextAction == 3
return != 0
===========================================================================
org.apache.commons.math.ode.events.EventState.getMaxCheckInterval():::ENTER
this.maxIterationCount one of { 3, 1000 }
this.t0 == Double.NaN
this.g0 == Double.NaN
this.g0Positive == true
this.pendingEvent == false
this.pendingEventTime == Double.NaN
this.previousEventTime == Double.NaN
this.forward == false
this.increasing == true
this.nextAction == 3
===========================================================================
org.apache.commons.math.ode.events.EventState.getMaxCheckInterval():::EXIT
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.maxCheckInterval == orig(this.maxCheckInterval)
this.convergence == orig(this.convergence)
this.maxIterationCount == orig(this.maxIterationCount)
this.g0Positive == orig(this.g0Positive)
this.pendingEvent == orig(this.pendingEvent)
this.forward == orig(this.forward)
this.increasing == orig(this.increasing)
this.nextAction == orig(this.nextAction)
this.maxIterationCount one of { 3, 1000 }
this.t0 == Double.NaN
this.g0 == Double.NaN
this.g0Positive == true
this.pendingEvent == false
this.pendingEventTime == Double.NaN
this.previousEventTime == Double.NaN
this.forward == false
this.increasing == true
this.nextAction == 3
return one of { 1.0, Infinity }
===========================================================================
org.apache.commons.math.ode.events.EventState.getMaxIterationCount():::ENTER
this.maxIterationCount one of { 3, 1000 }
this.t0 == Double.NaN
this.g0 == Double.NaN
this.g0Positive == true
this.pendingEvent == false
this.pendingEventTime == Double.NaN
this.previousEventTime == Double.NaN
this.forward == false
this.increasing == true
this.nextAction == 3
===========================================================================
org.apache.commons.math.ode.events.EventState.getMaxIterationCount():::EXIT
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.maxCheckInterval == orig(this.maxCheckInterval)
this.convergence == orig(this.convergence)
this.maxIterationCount == orig(this.maxIterationCount)
this.g0Positive == orig(this.g0Positive)
this.pendingEvent == orig(this.pendingEvent)
this.forward == orig(this.forward)
this.increasing == orig(this.increasing)
this.nextAction == orig(this.nextAction)
this.maxIterationCount one of { 3, 1000 }
this.t0 == Double.NaN
this.g0 == Double.NaN
this.g0Positive == true
this.pendingEvent == false
this.pendingEventTime == Double.NaN
this.previousEventTime == Double.NaN
this.forward == false
this.increasing == true
this.nextAction == 3
return one of { 3, 1000 }
===========================================================================
org.apache.commons.math.ode.events.EventState.reinitializeBegin(double, double[]):::ENTER
this.t0 == Double.NaN
this.g0 == Double.NaN
this.g0Positive == true
this.pendingEvent == false
this.pendingEventTime == Double.NaN
this.previousEventTime == Double.NaN
this.forward == false
this.increasing == true
this.nextAction == 3
tStart one of { 0.0, 3.141592653589793, 6.283185307179586 }
yStart != null
size(yStart[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.events.EventState.reinitializeBegin(double, double[]):::EXIT
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.maxCheckInterval == orig(this.maxCheckInterval)
this.convergence == orig(this.convergence)
this.maxIterationCount == orig(this.maxIterationCount)
this.pendingEvent == orig(this.pendingEvent)
this.forward == orig(this.forward)
this.increasing == orig(this.increasing)
this.nextAction == orig(this.nextAction)
yStart[] == orig(yStart[])
this.t0 one of { 0.0, 3.141592653589793, 6.283185307179586 }
this.g0 != 0
this.pendingEvent == false
this.pendingEventTime == Double.NaN
this.previousEventTime == Double.NaN
this.forward == false
this.increasing == true
this.nextAction == 3
this.t0 != orig(this.t0)
this.g0 != orig(this.g0)
===========================================================================
org.apache.commons.math.ode.events.EventState.reset(double, double[]):::ENTER
this.t0 one of { 0.0, 3.141592653589793, 6.283185307179586 }
y != null
size(y[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.events.EventState.reset(double, double[]):::EXIT319
this.pendingEvent == orig(this.pendingEvent)
y[] == orig(y[])
this.g0 != 0
this.nextAction == 3
return == false
orig(this.pendingEventTime) == Double.NaN
orig(t) != 0
===========================================================================
org.apache.commons.math.ode.events.EventState.reset(double, double[]):::EXIT319;condition="not(return == true)"
===========================================================================
org.apache.commons.math.ode.events.EventState.reset(double, double[]):::EXIT328
this.previousEventTime == orig(this.previousEventTime)
this.maxIterationCount one of { 100, 1000 }
this.nextAction one of { 0, 1, 2 }
orig(this.pendingEvent) == true
===========================================================================
org.apache.commons.math.ode.events.EventState.reset(double, double[]):::EXIT328;condition="return == true"
===========================================================================
org.apache.commons.math.ode.events.EventState.reset(double, double[]):::EXIT328;condition="not(return == true)"
this.maxCheckInterval == Infinity
this.nextAction == 0
===========================================================================
org.apache.commons.math.ode.events.EventState.reset(double, double[]):::EXIT
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.maxCheckInterval == orig(this.maxCheckInterval)
this.convergence == orig(this.convergence)
this.maxIterationCount == orig(this.maxIterationCount)
this.t0 == orig(this.t0)
this.g0 == orig(this.g0)
this.g0Positive == orig(this.g0Positive)
this.forward == orig(this.forward)
this.increasing == orig(this.increasing)
this.nextAction == orig(this.nextAction)
this.t0 one of { 0.0, 3.141592653589793, 6.283185307179586 }
this.pendingEvent == false
this.pendingEventTime == Double.NaN
this.pendingEventTime != orig(this.pendingEventTime)
===========================================================================
org.apache.commons.math.ode.events.EventState.reset(double, double[]):::EXIT;condition="return == true"
this.previousEventTime == orig(this.previousEventTime)
this.maxIterationCount == 1000
this.t0 == 0.0
this.forward == true
this.nextAction one of { 1, 2 }
y[] sorted by <
return == true
orig(this.pendingEvent) == true
orig(y[]) sorted by >
orig(size(y[])) one of { 1, 2 }
y[] + orig(y[]) == 0
===========================================================================
org.apache.commons.math.ode.events.EventState.reset(double, double[]):::EXIT;condition="not(return == true)"
y[] == orig(y[])
this.nextAction one of { 0, 3 }
return == false
===========================================================================
org.apache.commons.math.ode.events.EventState.stepAccepted(double, double[]):::ENTER
this.t0 one of { 0.0, 3.141592653589793, 6.283185307179586 }
this.nextAction one of { 1, 3 }
y != null
size(y[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.events.EventState.stepAccepted(double, double[]):::EXIT
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.maxCheckInterval == orig(this.maxCheckInterval)
this.convergence == orig(this.convergence)
this.maxIterationCount == orig(this.maxIterationCount)
this.t0 == orig(this.t0)
this.pendingEvent == orig(this.pendingEvent)
this.forward == orig(this.forward)
this.increasing == orig(this.increasing)
y[] == orig(y[])
this.t0 one of { 0.0, 3.141592653589793, 6.283185307179586 }
===========================================================================
org.apache.commons.math.ode.events.EventState.stop():::ENTER
this.t0 one of { 0.0, 3.141592653589793, 6.283185307179586 }
===========================================================================
org.apache.commons.math.ode.events.EventState.stop():::EXIT
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.maxCheckInterval == orig(this.maxCheckInterval)
this.convergence == orig(this.convergence)
this.maxIterationCount == orig(this.maxIterationCount)
this.t0 == orig(this.t0)
this.g0 == orig(this.g0)
this.g0Positive == orig(this.g0Positive)
this.pendingEvent == orig(this.pendingEvent)
this.forward == orig(this.forward)
this.increasing == orig(this.increasing)
this.nextAction == orig(this.nextAction)
(this.nextAction == 0)  <==>  (return == true)
(this.nextAction == 0)  ==>  (this.maxCheckInterval == Infinity)
(this.nextAction == 0)  ==>  (this.maxIterationCount one of { 100, 1000 })
(this.nextAction == 0)  ==>  (this.pendingEvent == true)
(this.nextAction == 0)  ==>  (this.pendingEventTime == orig(this.pendingEventTime))
(this.nextAction == 0)  ==>  (this.previousEventTime == orig(this.previousEventTime))
(this.nextAction one of { 1, 2, 3 })  <==>  (return == false)
(this.nextAction one of { 1, 2, 3 })  ==>  (this.maxCheckInterval one of { 1.0, Infinity })
(this.nextAction one of { 1, 2, 3 })  ==>  (this.maxIterationCount one of { 3, 100, 1000 })
this.t0 one of { 0.0, 3.141592653589793, 6.283185307179586 }
===========================================================================
org.apache.commons.math.ode.events.EventState.stop():::EXIT;condition="return == true"
this.pendingEventTime == orig(this.pendingEventTime)
this.previousEventTime == orig(this.previousEventTime)
this.maxCheckInterval == Infinity
this.maxIterationCount one of { 100, 1000 }
this.pendingEvent == true
this.nextAction == 0
return == true
===========================================================================
org.apache.commons.math.ode.events.EventState.stop():::EXIT;condition="not(return == true)"
this.nextAction one of { 1, 2, 3 }
return == false
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator:::OBJECT
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE has only one value
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName() == java.util.HashMap.class
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == "matrix must have at least one row"
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == "matrix must have at least one column"
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == "some rows have length {0} while others have length {1}"
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == "no entry at indices ({0}, {1}) in a {2}x{3} matrix"
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == "vector length mismatch: got {0} but expected {1}"
this.transformer.initialization.data.getClass().getName() == double[][].class
this.transformer.initialization.data[] elements != null
this.transformer.initialization.lu == null
this.transformer.update.data.getClass().getName() == double[][].class
this.transformer.update.data[] elements != null
this.transformer.update.lu == null
this.transformer.c1[] sorted by <
this.nordsieck.data.getClass().getName() == double[][].class
this.nordsieck.data[] elements != null
this.nordsieck.lu == null
this.starter.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.class
this.safety == 0.9
this.minReduction == 0.2
this.vecAbsoluteTolerance == null
this.vecRelativeTolerance == null
this.initialStep == -1.0
this.minStep one of { 0.0, 1.0E-6 }
this.maxStep one of { 0.1, 1.0, 4.0 }
this.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 3.1622776601683794E-4, Double.NaN }
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.states.getClass().getName() == java.util.ArrayList.class
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.name has only one value
this.name.toString == "Adams-Bashforth"
this.maxEvaluations == 2147483647
this.evaluations >= 0
size(this.scaled[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator.AdamsBashforthIntegrator(int, double, double, double, double):::ENTER
minStep one of { 0.0, 1.0E-6 }
maxStep one of { 0.1, 1.0, 4.0 }
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator.AdamsBashforthIntegrator(int, double, double, double, double):::EXIT
this.scaled == null
this.nordsieck == null
this.stepSize one of { 0.0, 3.1622776601683794E-4 }
this.evaluations == 0
this.equations == null
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator.integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double, double[], double, double[]):::ENTER
this.scaled == null
this.nordsieck == null
this.stepSize one of { 0.0, 3.1622776601683794E-4 }
this.evaluations == 0
this.equations == null
t0 == 0.0
y0[] one of { [-360.0], [0.9, 0.0, 0.0, 1.1055415967851334], [1.0, 0.1] }
y[] elements == 0.0
y[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
size(y0[]) one of { 1, 2, 4 }
size(y[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator.integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double, double[], double, double[]):::EXIT
this.transformer == orig(this.transformer)
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE == orig(org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE)
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName())
this.transformer.initialization == orig(this.transformer.initialization)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString)
this.transformer.initialization.data == orig(this.transformer.initialization.data)
this.transformer.initialization.data.getClass().getName() == orig(this.transformer.initialization.data.getClass().getName())
this.transformer.initialization.data[] == orig(this.transformer.initialization.data[])
this.transformer.initialization.lu == orig(this.transformer.initialization.lu)
this.transformer.update == orig(this.transformer.update)
this.transformer.update.data == orig(this.transformer.update.data)
this.transformer.update.data.getClass().getName() == orig(this.transformer.update.data.getClass().getName())
this.transformer.update.data[] == orig(this.transformer.update.data[])
this.transformer.update.lu == orig(this.transformer.update.lu)
this.transformer.c1 == orig(this.transformer.c1)
this.transformer.c1[] == orig(this.transformer.c1[])
this.starter == orig(this.starter)
this.starter.getClass().getName() == orig(this.starter.getClass().getName())
this.nSteps == orig(this.nSteps)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.minReduction == orig(this.minReduction)
this.maxGrowth == orig(this.maxGrowth)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
y0[] == orig(y0[])
this.stepSize == Double.NaN
y0[] one of { [-360.0], [0.9, 0.0, 0.0, 1.1055415967851334], [1.0, 0.1] }
this.stepSize != orig(this.stepSize)
orig(this.evaluations) % this.evaluations == 0
this.evaluations > orig(this.evaluations)
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest:::OBJECT
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest.AdamsBashforthIntegratorTest():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest.backward():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest.backward():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest.polynomial():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest.polynomial():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest.testIncreasingTolerance():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest.testIncreasingTolerance():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsIntegrator:::OBJECT
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE has only one value
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName() == java.util.HashMap.class
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == "matrix must have at least one row"
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == "matrix must have at least one column"
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == "some rows have length {0} while others have length {1}"
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == "no entry at indices ({0}, {1}) in a {2}x{3} matrix"
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == "vector length mismatch: got {0} but expected {1}"
this.transformer.initialization.data.getClass().getName() == double[][].class
this.transformer.initialization.data[] elements != null
this.transformer.initialization.lu == null
this.transformer.update.data.getClass().getName() == double[][].class
this.transformer.update.data[] elements != null
this.transformer.update.lu == null
this.transformer.c1[] sorted by <
this.nordsieck.data.getClass().getName() == double[][].class
this.nordsieck.data[] elements != null
this.nordsieck.lu == null
this.starter.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.class
this.nSteps >= 1
this.exp >= -1.0
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth <= 2.0
this.scalAbsoluteTolerance >= 1.0E-12
this.scalRelativeTolerance >= 1.0E-14
this.vecAbsoluteTolerance == null
this.vecRelativeTolerance == null
this.initialStep == -1.0
this.minStep one of { 0.0, 1.0E-6 }
this.maxStep one of { 0.1, 1.0, 4.0 }
this.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.states.getClass().getName() == java.util.ArrayList.class
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.name.toString one of { "Adams-Bashforth", "Adams-Moulton" }
this.maxEvaluations one of { 650, 2147483647 }
this.evaluations >= 0
size(this.transformer.initialization.data[]) >= 1
size(this.transformer.update.data[]) >= 1
size(this.transformer.c1[]) >= 1
size(this.scaled[]) one of { 1, 2, 4 }
size(this.nordsieck.data[]) >= 1
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsIntegrator.AdamsIntegrator(java.lang.String, int, int, double, double, double, double):::ENTER
name.toString one of { "Adams-Bashforth", "Adams-Moulton" }
minStep one of { 0.0, 1.0E-6 }
maxStep one of { 0.1, 1.0, 4.0 }
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsIntegrator.AdamsIntegrator(java.lang.String, int, int, double, double, double, double):::EXIT
name.toString == orig(name.toString)
this.scaled == null
this.nordsieck == null
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 3.1622776601683794E-4 }
this.maxEvaluations == 2147483647
this.evaluations == 0
this.equations == null
name.toString one of { "Adams-Bashforth", "Adams-Moulton" }
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsIntegrator.initializeHighOrderDerivatives(double[], double[][]):::ENTER
this.nordsieck == null
this.stepStart == 0.0
this.evaluations == 20
multistep.getClass().getName() == double[][].class
multistep[] elements != null
size(first[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsIntegrator.initializeHighOrderDerivatives(double[], double[][]):::EXIT
this.transformer == orig(this.transformer)
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE == orig(org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE)
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName())
this.transformer.initialization == orig(this.transformer.initialization)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString)
this.transformer.initialization.data == orig(this.transformer.initialization.data)
this.transformer.initialization.data.getClass().getName() == orig(this.transformer.initialization.data.getClass().getName())
this.transformer.initialization.data[] == orig(this.transformer.initialization.data[])
this.transformer.initialization.lu == orig(this.transformer.initialization.lu)
this.transformer.update == orig(this.transformer.update)
this.transformer.update.data == orig(this.transformer.update.data)
this.transformer.update.data.getClass().getName() == orig(this.transformer.update.data.getClass().getName())
this.transformer.update.data[] == orig(this.transformer.update.data[])
this.transformer.update.lu == orig(this.transformer.update.lu)
this.transformer.c1 == orig(this.transformer.c1)
this.transformer.c1[] == orig(this.transformer.c1[])
this.scaled == orig(this.scaled)
this.scaled[] == orig(this.scaled[])
this.nordsieck == orig(this.nordsieck)
this.starter == orig(this.starter)
this.starter.getClass().getName() == orig(this.starter.getClass().getName())
this.nSteps == orig(this.nSteps)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.minReduction == orig(this.minReduction)
this.maxGrowth == orig(this.maxGrowth)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
first[] == orig(first[])
multistep[] == orig(multistep[])
this.nordsieck == null
this.stepStart == 0.0
this.evaluations == 20
multistep[] elements != null
return.data.getClass().getName() == double[][].class
return.data[] elements != null
return.lu == null
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsIntegrator.updateHighOrderDerivativesPhase1(org.apache.commons.math.linear.Array2DRowRealMatrix):::ENTER
highOrder.data.getClass().getName() == double[][].class
highOrder.data[] elements != null
highOrder.lu == null
size(highOrder.data[]) >= 1
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsIntegrator.updateHighOrderDerivativesPhase1(org.apache.commons.math.linear.Array2DRowRealMatrix):::EXIT
this.transformer == orig(this.transformer)
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE == orig(org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE)
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName())
this.transformer.initialization == orig(this.transformer.initialization)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString)
this.transformer.initialization.data == orig(this.transformer.initialization.data)
this.transformer.initialization.data.getClass().getName() == orig(this.transformer.initialization.data.getClass().getName())
this.transformer.initialization.data[] == orig(this.transformer.initialization.data[])
this.transformer.initialization.lu == orig(this.transformer.initialization.lu)
this.transformer.update == orig(this.transformer.update)
this.transformer.update.data == orig(this.transformer.update.data)
this.transformer.update.data.getClass().getName() == orig(this.transformer.update.data.getClass().getName())
this.transformer.update.data[] == orig(this.transformer.update.data[])
this.transformer.update.lu == orig(this.transformer.update.lu)
this.transformer.c1 == orig(this.transformer.c1)
this.transformer.c1[] == orig(this.transformer.c1[])
this.scaled == orig(this.scaled)
this.scaled[] == orig(this.scaled[])
this.nordsieck == orig(this.nordsieck)
this.nordsieck.data == orig(this.nordsieck.data)
this.nordsieck.data.getClass().getName() == orig(this.nordsieck.data.getClass().getName())
this.nordsieck.data[] == orig(this.nordsieck.data[])
this.nordsieck.lu == orig(this.nordsieck.lu)
this.starter == orig(this.starter)
this.starter.getClass().getName() == orig(this.starter.getClass().getName())
this.nSteps == orig(this.nSteps)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.minReduction == orig(this.minReduction)
this.maxGrowth == orig(this.maxGrowth)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
highOrder.data == orig(highOrder.data)
highOrder.data.getClass().getName() == orig(highOrder.data.getClass().getName())
highOrder.data[] == orig(highOrder.data[])
highOrder.lu == orig(highOrder.lu)
highOrder.data.getClass().getName() == double[][].class
highOrder.data[] elements != null
highOrder.lu == null
return.data.getClass().getName() == double[][].class
return.data[] elements != null
return.lu == null
size(highOrder.data[]) >= 1
size(return.data[]) >= 1
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsIntegrator.updateHighOrderDerivativesPhase2(double[], double[], org.apache.commons.math.linear.Array2DRowRealMatrix):::ENTER
end[] elements != 0
highOrder.data.getClass().getName() == double[][].class
highOrder.data[] elements != null
highOrder.lu == null
size(start[]) one of { 1, 2, 4 }
size(end[]) one of { 1, 2, 4 }
size(highOrder.data[]) >= 1
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsIntegrator.updateHighOrderDerivativesPhase2(double[], double[], org.apache.commons.math.linear.Array2DRowRealMatrix):::EXIT
this.transformer == orig(this.transformer)
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE == orig(org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE)
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName())
this.transformer.initialization == orig(this.transformer.initialization)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString)
this.transformer.initialization.data == orig(this.transformer.initialization.data)
this.transformer.initialization.data.getClass().getName() == orig(this.transformer.initialization.data.getClass().getName())
this.transformer.initialization.data[] == orig(this.transformer.initialization.data[])
this.transformer.initialization.lu == orig(this.transformer.initialization.lu)
this.transformer.update == orig(this.transformer.update)
this.transformer.update.data == orig(this.transformer.update.data)
this.transformer.update.data.getClass().getName() == orig(this.transformer.update.data.getClass().getName())
this.transformer.update.data[] == orig(this.transformer.update.data[])
this.transformer.update.lu == orig(this.transformer.update.lu)
this.transformer.c1 == orig(this.transformer.c1)
this.transformer.c1[] == orig(this.transformer.c1[])
this.scaled == orig(this.scaled)
this.scaled[] == orig(this.scaled[])
this.nordsieck == orig(this.nordsieck)
this.nordsieck.data == orig(this.nordsieck.data)
this.nordsieck.data.getClass().getName() == orig(this.nordsieck.data.getClass().getName())
this.nordsieck.data[] == orig(this.nordsieck.data[])
this.nordsieck.lu == orig(this.nordsieck.lu)
this.starter == orig(this.starter)
this.starter.getClass().getName() == orig(this.starter.getClass().getName())
this.nSteps == orig(this.nSteps)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.minReduction == orig(this.minReduction)
this.maxGrowth == orig(this.maxGrowth)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
start[] == orig(start[])
end[] == orig(end[])
highOrder.data == orig(highOrder.data)
highOrder.data.getClass().getName() == orig(highOrder.data.getClass().getName())
highOrder.data[] == orig(highOrder.data[])
highOrder.lu == orig(highOrder.lu)
end[] elements != 0
highOrder.data.getClass().getName() == double[][].class
highOrder.data[] elements != null
highOrder.lu == null
size(highOrder.data[]) >= 1
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector:::OBJECT
this.previous[] elements != 0
this.previous[] sorted by >
this.scaled[] elements != 0
this.before[] elements != 0
this.before[] sorted by >
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE has only one value
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName() == java.util.HashMap.class
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.c1[] sorted by <
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.scaled[] elements != 0
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == "matrix must have at least one row"
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == "matrix must have at least one column"
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == "some rows have length {0} while others have length {1}"
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == "no entry at indices ({0}, {1}) in a {2}x{3} matrix"
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == "vector length mismatch: got {0} but expected {1}"
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data.getClass().getName() == double[][].class
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data[] elements != null
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.lu == null
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.starter.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.class
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nSteps >= 1
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.exp >= -0.5
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.safety == 0.9
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.minReduction == 0.2
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.maxGrowth <= 1.4142135623730951
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.maxGrowth >= 1.1040895136738123
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.scalAbsoluteTolerance >= 1.0E-12
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.scalRelativeTolerance >= 1.0E-14
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.vecAbsoluteTolerance == null
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.vecRelativeTolerance == null
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.initialStep == -1.0
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.minStep one of { 0.0, 1.0E-6 }
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.maxStep one of { 0.1, 4.0 }
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.stepHandlers.getClass().getName() == java.util.ArrayList.class
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager.states[] == []
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager.states[].getClass().getName() == []
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager.states.getClass().getName() == java.util.ArrayList.class
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager.first == null
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager.initialized == false
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.name has only one value
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.name.toString == "Adams-Moulton"
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.maxEvaluations one of { 650, 2147483647 }
size(this.previous[]) one of { 1, 2 }
size(this.scaled[]) one of { 1, 2 }
size(this.before[]) one of { 1, 2 }
size(this.after[]) one of { 1, 2 }
size(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.c1[]) >= 1
size(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.scaled[]) one of { 1, 2 }
size(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data[]) >= 1
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector.Corrector(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator, double[], double[], double[]):::ENTER
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE has only one value
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName() == java.util.HashMap.class
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.c1[] sorted by <
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.scaled[] elements != 0
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == "matrix must have at least one row"
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == "matrix must have at least one column"
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == "some rows have length {0} while others have length {1}"
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == "no entry at indices ({0}, {1}) in a {2}x{3} matrix"
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == "vector length mismatch: got {0} but expected {1}"
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data.getClass().getName() == double[][].class
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data[] elements != null
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.lu == null
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.starter.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.class
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nSteps >= 1
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.exp >= -0.5
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.safety == 0.9
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.minReduction == 0.2
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.maxGrowth <= 1.4142135623730951
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.scalAbsoluteTolerance >= 1.0E-12
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.vecAbsoluteTolerance == null
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.vecRelativeTolerance == null
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.initialStep == -1.0
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.minStep one of { 0.0, 1.0E-6 }
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.maxStep one of { 0.1, 4.0 }
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.stepHandlers.getClass().getName() == java.util.ArrayList.class
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager.states[] == []
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager.states[].getClass().getName() == []
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager.states.getClass().getName() == java.util.ArrayList.class
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager.first == null
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager.initialized == false
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.name has only one value
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.name.toString == "Adams-Moulton"
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.maxEvaluations one of { 650, 2147483647 }
previous[] elements != 0
previous[] sorted by >
scaled[] elements != 0
state[] elements != 0
state[] sorted by >
size(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.c1[]) >= 1
size(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.scaled[]) one of { 1, 2 }
size(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data[]) >= 1
size(previous[]) one of { 1, 2 }
size(scaled[]) one of { 1, 2 }
size(state[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector.Corrector(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator, double[], double[], double[]):::EXIT
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.transformer == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.transformer)
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE == orig(org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE)
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName())
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.initialization == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.initialization)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.update == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.update)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.c1 == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.c1)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.c1[] == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.c1[])
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.scaled == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.scaled)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.scaled[] == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.scaled[])
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data.getClass().getName())
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data[] == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data[])
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.lu == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.lu)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.starter == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.starter)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.starter.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.starter.getClass().getName())
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nSteps == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nSteps)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.exp == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.exp)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.safety == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.safety)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.minReduction == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.minReduction)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.maxGrowth == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.maxGrowth)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.scalAbsoluteTolerance == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.scalAbsoluteTolerance)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.scalRelativeTolerance == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.scalRelativeTolerance)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.vecAbsoluteTolerance == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.vecAbsoluteTolerance)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.vecRelativeTolerance == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.vecRelativeTolerance)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.initialStep == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.initialStep)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.minStep == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.minStep)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.maxStep == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.maxStep)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.stepHandlers == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.stepHandlers)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.stepHandlers.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.stepHandlers.getClass().getName())
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.stepStart == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.stepStart)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.stepSize == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.stepSize)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager.states == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager.states)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager.states[] == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager.states[])
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager.states.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager.states.getClass().getName())
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager.first == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager.first)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager.initialized == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager.initialized)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.name == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.name)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.name.toString == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.name.toString)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.maxEvaluations == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.maxEvaluations)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.evaluations == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.evaluations)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.equations == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.equations)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.equations.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.equations.getClass().getName())
previous[] == orig(previous[])
scaled[] == orig(scaled[])
state[] == orig(state[])
this.after[] elements != 0
this.after[] sorted by >
previous[] elements != 0
previous[] sorted by >
scaled[] elements != 0
state[] elements != 0
state[] sorted by >
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector.end():::ENTER
this.after[] elements != 0
this.after[] sorted by <
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector.end():::EXIT
this.previous == orig(this.previous)
this.previous[] == orig(this.previous[])
this.scaled == orig(this.scaled)
this.scaled[] == orig(this.scaled[])
this.before == orig(this.before)
this.before[] == orig(this.before[])
this.after == orig(this.after)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.transformer == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.transformer)
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE == orig(org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE)
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName())
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.initialization == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.initialization)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.update == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.update)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.c1 == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.c1)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.c1[] == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.c1[])
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.scaled == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.scaled)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.scaled[] == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.scaled[])
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data.getClass().getName())
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data[] == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data[])
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.lu == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.lu)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.starter == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.starter)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.starter.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.starter.getClass().getName())
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nSteps == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nSteps)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.exp == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.exp)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.safety == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.safety)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.minReduction == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.minReduction)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.maxGrowth == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.maxGrowth)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.scalAbsoluteTolerance == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.scalAbsoluteTolerance)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.scalRelativeTolerance == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.scalRelativeTolerance)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.vecAbsoluteTolerance == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.vecAbsoluteTolerance)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.vecRelativeTolerance == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.vecRelativeTolerance)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.initialStep == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.initialStep)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.minStep == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.minStep)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.maxStep == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.maxStep)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.stepHandlers == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.stepHandlers)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.stepHandlers.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.stepHandlers.getClass().getName())
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.stepStart == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.stepStart)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.stepSize == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.stepSize)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager.states == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager.states)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager.states[] == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager.states[])
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager.states.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager.states.getClass().getName())
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager.first == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager.first)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager.initialized == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager.initialized)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.name == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.name)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.name.toString == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.name.toString)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.maxEvaluations == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.maxEvaluations)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.evaluations == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.evaluations)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.equations == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.equations)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.equations.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.equations.getClass().getName())
size(this.after[]) == orig(size(this.after[]))
this.after[] elements != 0
this.after[] sorted by >
return >= 0.0
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector.start(int, int, int, int, int, int):::ENTER
this.after[] elements != 0
this.after[] sorted by >
rows >= 1
columns one of { 1, 2 }
startRow == 0
endRow >= 0
startColumn == 0
endColumn one of { 0, 1 }
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector.start(int, int, int, int, int, int):::EXIT
this.previous == orig(this.previous)
this.previous[] == orig(this.previous[])
this.scaled == orig(this.scaled)
this.scaled[] == orig(this.scaled[])
this.before == orig(this.before)
this.before[] == orig(this.before[])
this.after == orig(this.after)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.transformer == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.transformer)
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE == orig(org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE)
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName())
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.initialization == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.initialization)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.update == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.update)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.c1 == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.c1)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.c1[] == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.c1[])
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.scaled == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.scaled)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.scaled[] == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.scaled[])
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data.getClass().getName())
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data[] == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data[])
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.lu == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.lu)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.starter == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.starter)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.starter.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.starter.getClass().getName())
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nSteps == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nSteps)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.exp == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.exp)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.safety == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.safety)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.minReduction == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.minReduction)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.maxGrowth == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.maxGrowth)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.scalAbsoluteTolerance == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.scalAbsoluteTolerance)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.scalRelativeTolerance == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.scalRelativeTolerance)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.vecAbsoluteTolerance == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.vecAbsoluteTolerance)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.vecRelativeTolerance == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.vecRelativeTolerance)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.initialStep == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.initialStep)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.minStep == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.minStep)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.maxStep == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.maxStep)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.stepHandlers == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.stepHandlers)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.stepHandlers.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.stepHandlers.getClass().getName())
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.stepStart == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.stepStart)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.stepSize == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.stepSize)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager.states == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager.states)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager.states[] == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager.states[])
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager.states.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager.states.getClass().getName())
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager.first == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager.first)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager.initialized == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager.initialized)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.name == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.name)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.name.toString == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.name.toString)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.maxEvaluations == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.maxEvaluations)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.evaluations == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.evaluations)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.equations == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.equations)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.equations.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.equations.getClass().getName())
size(this.after[]) == orig(size(this.after[]))
this.after[] elements == 0.0
this.after[] one of { [0.0], [0.0, 0.0] }
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector.visit(int, int, double):::ENTER
this.after[] sorted by <=
row >= 0
column one of { 0, 1 }
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector.visit(int, int, double):::EXIT
this.previous == orig(this.previous)
this.previous[] == orig(this.previous[])
this.scaled == orig(this.scaled)
this.scaled[] == orig(this.scaled[])
this.before == orig(this.before)
this.before[] == orig(this.before[])
this.after == orig(this.after)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.transformer == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.transformer)
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE == orig(org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE)
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName())
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.initialization == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.initialization)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.update == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.update)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.c1 == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.c1)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.c1[] == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.transformer.c1[])
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.scaled == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.scaled)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.scaled[] == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.scaled[])
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data.getClass().getName())
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data[] == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.data[])
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.lu == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nordsieck.lu)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.starter == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.starter)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.starter.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.starter.getClass().getName())
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nSteps == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.nSteps)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.exp == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.exp)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.safety == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.safety)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.minReduction == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.minReduction)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.maxGrowth == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.maxGrowth)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.scalAbsoluteTolerance == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.scalAbsoluteTolerance)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.scalRelativeTolerance == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.scalRelativeTolerance)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.vecAbsoluteTolerance == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.vecAbsoluteTolerance)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.vecRelativeTolerance == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.vecRelativeTolerance)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.initialStep == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.initialStep)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.minStep == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.minStep)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.maxStep == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.maxStep)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.stepHandlers == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.stepHandlers)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.stepHandlers.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.stepHandlers.getClass().getName())
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.stepStart == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.stepStart)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.stepSize == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.stepSize)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager.states == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager.states)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager.states[] == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager.states[])
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager.states.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager.states.getClass().getName())
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager.first == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager.first)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager.initialized == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.eventsHandlersManager.initialized)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.name == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.name)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.name.toString == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.name.toString)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.maxEvaluations == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.maxEvaluations)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.evaluations == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.evaluations)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.equations == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.equations)
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.equations.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.this.equations.getClass().getName())
size(this.after[]) == orig(size(this.after[]))
this.after[] sorted by <
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator:::OBJECT
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE has only one value
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName() == java.util.HashMap.class
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == "matrix must have at least one row"
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == "matrix must have at least one column"
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == "some rows have length {0} while others have length {1}"
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == "no entry at indices ({0}, {1}) in a {2}x{3} matrix"
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == "vector length mismatch: got {0} but expected {1}"
this.transformer.initialization.data.getClass().getName() == double[][].class
this.transformer.initialization.data[] elements != null
this.transformer.initialization.lu == null
this.transformer.update.data.getClass().getName() == double[][].class
this.transformer.update.data[] elements != null
this.transformer.update.lu == null
this.transformer.c1[] sorted by <
this.nordsieck.data.getClass().getName() == double[][].class
this.nordsieck.data[] elements != null
this.nordsieck.lu == null
this.starter.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.class
this.safety == 0.9
this.minReduction == 0.2
this.vecAbsoluteTolerance == null
this.vecRelativeTolerance == null
this.initialStep == -1.0
this.minStep one of { 0.0, 1.0E-6 }
this.maxStep one of { 0.1, 4.0 }
this.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 3.1622776601683794E-4, Double.NaN }
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.states.getClass().getName() == java.util.ArrayList.class
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.name has only one value
this.name.toString == "Adams-Moulton"
this.maxEvaluations == 2147483647
this.evaluations >= 0
size(this.scaled[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.AdamsMoultonIntegrator(int, double, double, double, double):::ENTER
minStep one of { 0.0, 1.0E-6 }
maxStep one of { 0.1, 4.0 }
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.AdamsMoultonIntegrator(int, double, double, double, double):::EXIT
this.scaled == null
this.nordsieck == null
this.stepSize one of { 0.0, 3.1622776601683794E-4 }
this.evaluations == 0
this.equations == null
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double, double[], double, double[]):::ENTER
this.scaled == null
this.nordsieck == null
this.stepSize one of { 0.0, 3.1622776601683794E-4 }
this.evaluations == 0
this.equations == null
t0 == 0.0
y0[] elements one of { -360.0, 0.1, 1.0 }
y0[] one of { [-360.0], [1.0, 0.1] }
y0[] sorted by >
t one of { -4.0, 1.0, 4.0 }
y[] elements == 0.0
y[] one of { [0.0], [0.0, 0.0] }
size(y0[]) one of { 1, 2 }
size(y[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double, double[], double, double[]):::EXIT
this.transformer == orig(this.transformer)
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE == orig(org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE)
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName())
this.transformer.initialization == orig(this.transformer.initialization)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString)
this.transformer.initialization.data == orig(this.transformer.initialization.data)
this.transformer.initialization.data.getClass().getName() == orig(this.transformer.initialization.data.getClass().getName())
this.transformer.initialization.data[] == orig(this.transformer.initialization.data[])
this.transformer.initialization.lu == orig(this.transformer.initialization.lu)
this.transformer.update == orig(this.transformer.update)
this.transformer.update.data == orig(this.transformer.update.data)
this.transformer.update.data.getClass().getName() == orig(this.transformer.update.data.getClass().getName())
this.transformer.update.data[] == orig(this.transformer.update.data[])
this.transformer.update.lu == orig(this.transformer.update.lu)
this.transformer.c1 == orig(this.transformer.c1)
this.transformer.c1[] == orig(this.transformer.c1[])
this.starter == orig(this.starter)
this.starter.getClass().getName() == orig(this.starter.getClass().getName())
this.nSteps == orig(this.nSteps)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.minReduction == orig(this.minReduction)
this.maxGrowth == orig(this.maxGrowth)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
y0[] == orig(y0[])
this.stepSize == Double.NaN
y0[] elements one of { -360.0, 0.1, 1.0 }
y0[] one of { [-360.0], [1.0, 0.1] }
y0[] sorted by >
y[] sorted by >
return one of { -4.0, 1.0, 4.0 }
this.stepSize != orig(this.stepSize)
orig(this.evaluations) % this.evaluations == 0
this.evaluations > orig(this.evaluations)
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest:::OBJECT
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest.AdamsMoultonIntegratorTest():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest.backward():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest.backward():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest.polynomial():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest.polynomial():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest.testIncreasingTolerance():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest.testIncreasingTolerance():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer$1:::OBJECT
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE has only one value
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName() == java.util.HashMap.class
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.this.initialization == null
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == "matrix must have at least one row"
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == "matrix must have at least one column"
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == "some rows have length {0} while others have length {1}"
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == "no entry at indices ({0}, {1}) in a {2}x{3} matrix"
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == "vector length mismatch: got {0} but expected {1}"
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.this.update == null
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.this.c1 == null
this.zero has only one value
this.zero.getClass().getName() == org.apache.commons.math.fraction.BigFraction.class
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer$1.(org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer, org.apache.commons.math.fraction.BigFraction):::ENTER
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE has only one value
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName() == java.util.HashMap.class
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.this.initialization == null
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == "matrix must have at least one row"
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == "matrix must have at least one column"
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == "some rows have length {0} while others have length {1}"
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == "no entry at indices ({0}, {1}) in a {2}x{3} matrix"
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == "vector length mismatch: got {0} but expected {1}"
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.this.update == null
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.this.c1 == null
x0 has only one value
org.apache.commons.math.fraction.BigFraction.TWO has only one value
org.apache.commons.math.fraction.BigFraction.ONE has only one value
org.apache.commons.math.fraction.BigFraction.ZERO has only one value
org.apache.commons.math.fraction.BigFraction.MINUS_ONE has only one value
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS has only one value
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH has only one value
org.apache.commons.math.fraction.BigFraction.ONE_HALF has only one value
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER has only one value
org.apache.commons.math.fraction.BigFraction.ONE_THIRD has only one value
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS has only one value
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS has only one value
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS has only one value
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS has only one value
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS has only one value
org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR has only one value
org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR.toString == "denominator must be different from 0"
org.apache.commons.math.fraction.BigFraction.ONE_HUNDRED_DOUBLE has only one value
org.apache.commons.math.fraction.BigFraction.TWO.numerator has only one value
org.apache.commons.math.fraction.BigFraction.TWO.denominator has only one value
org.apache.commons.math.fraction.BigFraction.ONE.numerator has only one value
org.apache.commons.math.fraction.BigFraction.ONE.denominator has only one value
org.apache.commons.math.fraction.BigFraction.ZERO.numerator has only one value
org.apache.commons.math.fraction.BigFraction.ZERO.denominator has only one value
org.apache.commons.math.fraction.BigFraction.MINUS_ONE.numerator has only one value
org.apache.commons.math.fraction.BigFraction.MINUS_ONE.denominator has only one value
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.numerator has only one value
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.denominator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.numerator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.denominator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_HALF.numerator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_HALF.denominator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.numerator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.denominator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_THIRD.numerator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_THIRD.denominator has only one value
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.numerator has only one value
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.denominator has only one value
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.numerator has only one value
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.denominator has only one value
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.numerator has only one value
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.denominator has only one value
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.numerator has only one value
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.denominator has only one value
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.numerator has only one value
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.denominator has only one value
x0.numerator has only one value
x0.denominator has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer$1.(org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer, org.apache.commons.math.fraction.BigFraction):::EXIT
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.this == orig(org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.this)
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE == orig(org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE)
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName())
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.this.initialization == orig(org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.this.initialization)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString)
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.this.update == orig(org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.this.update)
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.this.c1 == orig(org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.this.c1)
org.apache.commons.math.fraction.BigFraction.TWO == orig(org.apache.commons.math.fraction.BigFraction.TWO)
org.apache.commons.math.fraction.BigFraction.ONE == orig(org.apache.commons.math.fraction.BigFraction.ONE)
org.apache.commons.math.fraction.BigFraction.ZERO == orig(org.apache.commons.math.fraction.BigFraction.ZERO)
org.apache.commons.math.fraction.BigFraction.MINUS_ONE == orig(org.apache.commons.math.fraction.BigFraction.MINUS_ONE)
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS == orig(org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS)
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH == orig(org.apache.commons.math.fraction.BigFraction.ONE_FIFTH)
org.apache.commons.math.fraction.BigFraction.ONE_HALF == orig(org.apache.commons.math.fraction.BigFraction.ONE_HALF)
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER == orig(org.apache.commons.math.fraction.BigFraction.ONE_QUARTER)
org.apache.commons.math.fraction.BigFraction.ONE_THIRD == orig(org.apache.commons.math.fraction.BigFraction.ONE_THIRD)
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS == orig(org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS)
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS == orig(org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS)
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS == orig(org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS)
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS == orig(org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS)
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS == orig(org.apache.commons.math.fraction.BigFraction.TWO_THIRDS)
org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR == orig(org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR)
org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR.toString == orig(org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR.toString)
org.apache.commons.math.fraction.BigFraction.ONE_HUNDRED_DOUBLE == orig(org.apache.commons.math.fraction.BigFraction.ONE_HUNDRED_DOUBLE)
org.apache.commons.math.fraction.BigFraction.TWO.numerator == orig(org.apache.commons.math.fraction.BigFraction.TWO.numerator)
org.apache.commons.math.fraction.BigFraction.TWO.denominator == orig(org.apache.commons.math.fraction.BigFraction.TWO.denominator)
org.apache.commons.math.fraction.BigFraction.ONE.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE.numerator)
org.apache.commons.math.fraction.BigFraction.ONE.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE.denominator)
org.apache.commons.math.fraction.BigFraction.ZERO.numerator == orig(org.apache.commons.math.fraction.BigFraction.ZERO.numerator)
org.apache.commons.math.fraction.BigFraction.ZERO.denominator == orig(org.apache.commons.math.fraction.BigFraction.ZERO.denominator)
org.apache.commons.math.fraction.BigFraction.MINUS_ONE.numerator == orig(org.apache.commons.math.fraction.BigFraction.MINUS_ONE.numerator)
org.apache.commons.math.fraction.BigFraction.MINUS_ONE.denominator == orig(org.apache.commons.math.fraction.BigFraction.MINUS_ONE.denominator)
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.numerator == orig(org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.numerator)
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.denominator == orig(org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.denominator)
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.numerator)
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.denominator)
org.apache.commons.math.fraction.BigFraction.ONE_HALF.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE_HALF.numerator)
org.apache.commons.math.fraction.BigFraction.ONE_HALF.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE_HALF.denominator)
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.numerator)
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.denominator)
org.apache.commons.math.fraction.BigFraction.ONE_THIRD.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE_THIRD.numerator)
org.apache.commons.math.fraction.BigFraction.ONE_THIRD.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE_THIRD.denominator)
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.numerator == orig(org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.numerator)
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.denominator == orig(org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.denominator)
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.numerator == orig(org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.numerator)
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.denominator == orig(org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.denominator)
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.numerator == orig(org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.numerator)
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.denominator == orig(org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.denominator)
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.numerator == orig(org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.numerator)
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.denominator == orig(org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.denominator)
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.numerator == orig(org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.numerator)
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.denominator == orig(org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.denominator)
x0.numerator == orig(x0.numerator)
x0.denominator == orig(x0.denominator)
org.apache.commons.math.fraction.BigFraction.TWO has only one value
org.apache.commons.math.fraction.BigFraction.ONE has only one value
org.apache.commons.math.fraction.BigFraction.ZERO has only one value
org.apache.commons.math.fraction.BigFraction.MINUS_ONE has only one value
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS has only one value
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH has only one value
org.apache.commons.math.fraction.BigFraction.ONE_HALF has only one value
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER has only one value
org.apache.commons.math.fraction.BigFraction.ONE_THIRD has only one value
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS has only one value
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS has only one value
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS has only one value
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS has only one value
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS has only one value
org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR has only one value
org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR.toString == "denominator must be different from 0"
org.apache.commons.math.fraction.BigFraction.ONE_HUNDRED_DOUBLE has only one value
org.apache.commons.math.fraction.BigFraction.TWO.numerator has only one value
org.apache.commons.math.fraction.BigFraction.TWO.denominator has only one value
org.apache.commons.math.fraction.BigFraction.ONE.numerator has only one value
org.apache.commons.math.fraction.BigFraction.ONE.denominator has only one value
org.apache.commons.math.fraction.BigFraction.ZERO.numerator has only one value
org.apache.commons.math.fraction.BigFraction.ZERO.denominator has only one value
org.apache.commons.math.fraction.BigFraction.MINUS_ONE.numerator has only one value
org.apache.commons.math.fraction.BigFraction.MINUS_ONE.denominator has only one value
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.numerator has only one value
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.denominator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.numerator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.denominator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_HALF.numerator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_HALF.denominator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.numerator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.denominator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_THIRD.numerator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_THIRD.denominator has only one value
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.numerator has only one value
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.denominator has only one value
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.numerator has only one value
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.denominator has only one value
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.numerator has only one value
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.denominator has only one value
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.numerator has only one value
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.denominator has only one value
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.numerator has only one value
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.denominator has only one value
x0.numerator has only one value
x0.denominator has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer$1.visit(int, int, org.apache.commons.math.fraction.BigFraction):::ENTER
row >= 0
column >= 0
org.apache.commons.math.fraction.BigFraction.TWO has only one value
org.apache.commons.math.fraction.BigFraction.ONE has only one value
org.apache.commons.math.fraction.BigFraction.ZERO has only one value
org.apache.commons.math.fraction.BigFraction.MINUS_ONE has only one value
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS has only one value
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH has only one value
org.apache.commons.math.fraction.BigFraction.ONE_HALF has only one value
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER has only one value
org.apache.commons.math.fraction.BigFraction.ONE_THIRD has only one value
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS has only one value
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS has only one value
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS has only one value
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS has only one value
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS has only one value
org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR has only one value
org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR.toString == "denominator must be different from 0"
org.apache.commons.math.fraction.BigFraction.ONE_HUNDRED_DOUBLE has only one value
org.apache.commons.math.fraction.BigFraction.TWO.numerator has only one value
org.apache.commons.math.fraction.BigFraction.TWO.denominator has only one value
org.apache.commons.math.fraction.BigFraction.ONE.numerator has only one value
org.apache.commons.math.fraction.BigFraction.ONE.denominator has only one value
org.apache.commons.math.fraction.BigFraction.ZERO.numerator has only one value
org.apache.commons.math.fraction.BigFraction.ZERO.denominator has only one value
org.apache.commons.math.fraction.BigFraction.MINUS_ONE.numerator has only one value
org.apache.commons.math.fraction.BigFraction.MINUS_ONE.denominator has only one value
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.numerator has only one value
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.denominator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.numerator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.denominator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_HALF.numerator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_HALF.denominator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.numerator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.denominator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_THIRD.numerator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_THIRD.denominator has only one value
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.numerator has only one value
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.denominator has only one value
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.numerator has only one value
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.denominator has only one value
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.numerator has only one value
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.denominator has only one value
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.numerator has only one value
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.denominator has only one value
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.numerator has only one value
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.denominator has only one value
value.denominator has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer$1.visit(int, int, org.apache.commons.math.fraction.BigFraction):::EXIT
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.this == orig(org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.this)
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE == orig(org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE)
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName())
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.this.initialization == orig(org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.this.initialization)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString)
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.this.update == orig(org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.this.update)
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.this.c1 == orig(org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.this.c1)
this.zero == orig(this.zero)
this.zero.getClass().getName() == orig(this.zero.getClass().getName())
org.apache.commons.math.fraction.BigFraction.TWO == orig(org.apache.commons.math.fraction.BigFraction.TWO)
org.apache.commons.math.fraction.BigFraction.ONE == orig(org.apache.commons.math.fraction.BigFraction.ONE)
org.apache.commons.math.fraction.BigFraction.ZERO == orig(org.apache.commons.math.fraction.BigFraction.ZERO)
org.apache.commons.math.fraction.BigFraction.MINUS_ONE == orig(org.apache.commons.math.fraction.BigFraction.MINUS_ONE)
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS == orig(org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS)
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH == orig(org.apache.commons.math.fraction.BigFraction.ONE_FIFTH)
org.apache.commons.math.fraction.BigFraction.ONE_HALF == orig(org.apache.commons.math.fraction.BigFraction.ONE_HALF)
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER == orig(org.apache.commons.math.fraction.BigFraction.ONE_QUARTER)
org.apache.commons.math.fraction.BigFraction.ONE_THIRD == orig(org.apache.commons.math.fraction.BigFraction.ONE_THIRD)
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS == orig(org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS)
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS == orig(org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS)
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS == orig(org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS)
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS == orig(org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS)
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS == orig(org.apache.commons.math.fraction.BigFraction.TWO_THIRDS)
org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR == orig(org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR)
org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR.toString == orig(org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR.toString)
org.apache.commons.math.fraction.BigFraction.ONE_HUNDRED_DOUBLE == orig(org.apache.commons.math.fraction.BigFraction.ONE_HUNDRED_DOUBLE)
org.apache.commons.math.fraction.BigFraction.TWO.numerator == orig(org.apache.commons.math.fraction.BigFraction.TWO.numerator)
org.apache.commons.math.fraction.BigFraction.TWO.denominator == orig(org.apache.commons.math.fraction.BigFraction.TWO.denominator)
org.apache.commons.math.fraction.BigFraction.ONE.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE.numerator)
org.apache.commons.math.fraction.BigFraction.ONE.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE.denominator)
org.apache.commons.math.fraction.BigFraction.ZERO.numerator == orig(org.apache.commons.math.fraction.BigFraction.ZERO.numerator)
org.apache.commons.math.fraction.BigFraction.ZERO.denominator == orig(org.apache.commons.math.fraction.BigFraction.ZERO.denominator)
org.apache.commons.math.fraction.BigFraction.MINUS_ONE.numerator == orig(org.apache.commons.math.fraction.BigFraction.MINUS_ONE.numerator)
org.apache.commons.math.fraction.BigFraction.MINUS_ONE.denominator == orig(org.apache.commons.math.fraction.BigFraction.MINUS_ONE.denominator)
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.numerator == orig(org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.numerator)
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.denominator == orig(org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.denominator)
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.numerator)
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.denominator)
org.apache.commons.math.fraction.BigFraction.ONE_HALF.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE_HALF.numerator)
org.apache.commons.math.fraction.BigFraction.ONE_HALF.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE_HALF.denominator)
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.numerator)
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.denominator)
org.apache.commons.math.fraction.BigFraction.ONE_THIRD.numerator == orig(org.apache.commons.math.fraction.BigFraction.ONE_THIRD.numerator)
org.apache.commons.math.fraction.BigFraction.ONE_THIRD.denominator == orig(org.apache.commons.math.fraction.BigFraction.ONE_THIRD.denominator)
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.numerator == orig(org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.numerator)
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.denominator == orig(org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.denominator)
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.numerator == orig(org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.numerator)
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.denominator == orig(org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.denominator)
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.numerator == orig(org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.numerator)
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.denominator == orig(org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.denominator)
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.numerator == orig(org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.numerator)
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.denominator == orig(org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.denominator)
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.numerator == orig(org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.numerator)
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.denominator == orig(org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.denominator)
value.numerator == orig(value.numerator)
value.denominator == orig(value.denominator)
org.apache.commons.math.fraction.BigFraction.TWO has only one value
org.apache.commons.math.fraction.BigFraction.ONE has only one value
org.apache.commons.math.fraction.BigFraction.ZERO has only one value
org.apache.commons.math.fraction.BigFraction.MINUS_ONE has only one value
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS has only one value
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH has only one value
org.apache.commons.math.fraction.BigFraction.ONE_HALF has only one value
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER has only one value
org.apache.commons.math.fraction.BigFraction.ONE_THIRD has only one value
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS has only one value
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS has only one value
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS has only one value
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS has only one value
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS has only one value
org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR has only one value
org.apache.commons.math.fraction.BigFraction.FORBIDDEN_ZERO_DENOMINATOR.toString == "denominator must be different from 0"
org.apache.commons.math.fraction.BigFraction.ONE_HUNDRED_DOUBLE has only one value
org.apache.commons.math.fraction.BigFraction.TWO.numerator has only one value
org.apache.commons.math.fraction.BigFraction.TWO.denominator has only one value
org.apache.commons.math.fraction.BigFraction.ONE.numerator has only one value
org.apache.commons.math.fraction.BigFraction.ONE.denominator has only one value
org.apache.commons.math.fraction.BigFraction.ZERO.numerator has only one value
org.apache.commons.math.fraction.BigFraction.ZERO.denominator has only one value
org.apache.commons.math.fraction.BigFraction.MINUS_ONE.numerator has only one value
org.apache.commons.math.fraction.BigFraction.MINUS_ONE.denominator has only one value
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.numerator has only one value
org.apache.commons.math.fraction.BigFraction.FOUR_FIFTHS.denominator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.numerator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_FIFTH.denominator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_HALF.numerator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_HALF.denominator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.numerator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_QUARTER.denominator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_THIRD.numerator has only one value
org.apache.commons.math.fraction.BigFraction.ONE_THIRD.denominator has only one value
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.numerator has only one value
org.apache.commons.math.fraction.BigFraction.THREE_FIFTHS.denominator has only one value
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.numerator has only one value
org.apache.commons.math.fraction.BigFraction.THREE_QUARTERS.denominator has only one value
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.numerator has only one value
org.apache.commons.math.fraction.BigFraction.TWO_FIFTHS.denominator has only one value
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.numerator has only one value
org.apache.commons.math.fraction.BigFraction.TWO_QUARTERS.denominator has only one value
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.numerator has only one value
org.apache.commons.math.fraction.BigFraction.TWO_THIRDS.denominator has only one value
value.denominator has only one value
return.denominator has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer:::CLASS
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE has only one value
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName() == java.util.HashMap.class
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer:::OBJECT
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == "matrix must have at least one row"
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == "matrix must have at least one column"
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == "some rows have length {0} while others have length {1}"
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == "no entry at indices ({0}, {1}) in a {2}x{3} matrix"
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == "vector length mismatch: got {0} but expected {1}"
this.initialization.data.getClass().getName() == double[][].class
this.initialization.data[] elements != null
this.initialization.lu == null
this.update.data.getClass().getName() == double[][].class
this.update.data[] elements != null
this.update.lu == null
this.c1[] sorted by <
size(this.initialization.data[]) >= 1
size(this.update.data[]) >= 1
size(this.c1[]) >= 1
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.AdamsNordsieckTransformer(int):::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.AdamsNordsieckTransformer(int):::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.buildP(int):::ENTER
this.initialization == null
this.update == null
this.c1 == null
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.buildP(int):::EXIT
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE == orig(org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE)
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName())
this.initialization == orig(this.initialization)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString)
this.update == orig(this.update)
this.c1 == orig(this.c1)
this.initialization == null
this.update == null
this.c1 == null
return.getClass().getName() == org.apache.commons.math.linear.Array2DRowFieldMatrix.class
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.getInstance(int):::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.getInstance(int):::EXIT
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE == orig(org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE)
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName())
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == "matrix must have at least one row"
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == "matrix must have at least one column"
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == "some rows have length {0} while others have length {1}"
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == "no entry at indices ({0}, {1}) in a {2}x{3} matrix"
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == "vector length mismatch: got {0} but expected {1}"
return.initialization.data.getClass().getName() == double[][].class
return.initialization.data[] elements != null
return.initialization.lu == null
return.update.data.getClass().getName() == double[][].class
return.update.data[] elements != null
return.update.lu == null
return.c1[] sorted by <
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.initializeHighOrderDerivatives(double[], double[][]):::ENTER
multistep.getClass().getName() == double[][].class
multistep[] elements != null
size(first[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.initializeHighOrderDerivatives(double[], double[][]):::EXIT
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE == orig(org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE)
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName())
this.initialization == orig(this.initialization)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString)
this.initialization.data == orig(this.initialization.data)
this.initialization.data.getClass().getName() == orig(this.initialization.data.getClass().getName())
this.initialization.data[] == orig(this.initialization.data[])
this.initialization.lu == orig(this.initialization.lu)
this.update == orig(this.update)
this.update.data == orig(this.update.data)
this.update.data.getClass().getName() == orig(this.update.data.getClass().getName())
this.update.data[] == orig(this.update.data[])
this.update.lu == orig(this.update.lu)
this.c1 == orig(this.c1)
this.c1[] == orig(this.c1[])
first[] == orig(first[])
multistep[] == orig(multistep[])
multistep[] elements != null
return.data.getClass().getName() == double[][].class
return.data[] elements != null
return.lu == null
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.updateHighOrderDerivativesPhase1(org.apache.commons.math.linear.Array2DRowRealMatrix):::ENTER
highOrder.data.getClass().getName() == double[][].class
highOrder.data[] elements != null
highOrder.lu == null
size(highOrder.data[]) >= 1
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.updateHighOrderDerivativesPhase1(org.apache.commons.math.linear.Array2DRowRealMatrix):::EXIT
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE == orig(org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE)
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName())
this.initialization == orig(this.initialization)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString)
this.initialization.data == orig(this.initialization.data)
this.initialization.data.getClass().getName() == orig(this.initialization.data.getClass().getName())
this.initialization.data[] == orig(this.initialization.data[])
this.initialization.lu == orig(this.initialization.lu)
this.update == orig(this.update)
this.update.data == orig(this.update.data)
this.update.data.getClass().getName() == orig(this.update.data.getClass().getName())
this.update.data[] == orig(this.update.data[])
this.update.lu == orig(this.update.lu)
this.c1 == orig(this.c1)
this.c1[] == orig(this.c1[])
highOrder.data == orig(highOrder.data)
highOrder.data.getClass().getName() == orig(highOrder.data.getClass().getName())
highOrder.data[] == orig(highOrder.data[])
highOrder.lu == orig(highOrder.lu)
highOrder.data.getClass().getName() == double[][].class
highOrder.data[] elements != null
highOrder.lu == null
return.data.getClass().getName() == double[][].class
return.data[] elements != null
return.lu == null
size(highOrder.data[]) >= 1
size(return.data[]) >= 1
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.updateHighOrderDerivativesPhase2(double[], double[], org.apache.commons.math.linear.Array2DRowRealMatrix):::ENTER
end[] elements != 0
highOrder.data.getClass().getName() == double[][].class
highOrder.data[] elements != null
highOrder.lu == null
size(start[]) one of { 1, 2, 4 }
size(end[]) one of { 1, 2, 4 }
size(highOrder.data[]) >= 1
===========================================================================
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.updateHighOrderDerivativesPhase2(double[], double[], org.apache.commons.math.linear.Array2DRowRealMatrix):::EXIT
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE == orig(org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE)
org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer.CACHE.getClass().getName())
this.initialization == orig(this.initialization)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString)
this.initialization.data == orig(this.initialization.data)
this.initialization.data.getClass().getName() == orig(this.initialization.data.getClass().getName())
this.initialization.data[] == orig(this.initialization.data[])
this.initialization.lu == orig(this.initialization.lu)
this.update == orig(this.update)
this.update.data == orig(this.update.data)
this.update.data.getClass().getName() == orig(this.update.data.getClass().getName())
this.update.data[] == orig(this.update.data[])
this.update.lu == orig(this.update.lu)
this.c1 == orig(this.c1)
this.c1[] == orig(this.c1[])
start[] == orig(start[])
end[] == orig(end[])
highOrder.data == orig(highOrder.data)
highOrder.data.getClass().getName() == orig(highOrder.data.getClass().getName())
highOrder.data[] == orig(highOrder.data[])
highOrder.lu == orig(highOrder.lu)
end[] elements != 0
highOrder.data.getClass().getName() == double[][].class
highOrder.data[] elements != null
highOrder.lu == null
size(highOrder.data[]) >= 1
===========================================================================
org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator:::OBJECT
this.scalAbsoluteTolerance >= 0.0
this.scalRelativeTolerance >= 0.0
this.vecAbsoluteTolerance[] == [1.0E-8, 1.0E-8, 1.0E-10, 1.0E-10]
this.vecAbsoluteTolerance[] elements one of { 1.0E-10, 1.0E-8 }
this.vecAbsoluteTolerance[] sorted by >=
this.vecRelativeTolerance[] == [1.0E-10, 1.0E-10, 1.0E-8, 1.0E-8]
this.vecRelativeTolerance[] elements one of { 1.0E-10, 1.0E-8 }
this.vecRelativeTolerance[] sorted by <=
this.initialStep one of { -1.0, 1.7 }
this.initialStep != 0
this.minStep >= 0.0
this.maxStep >= 0.1
this.stepHandlers != null
this.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.eventsHandlersManager != null
this.eventsHandlersManager.states != null
this.eventsHandlersManager.states[] elements != null
this.eventsHandlersManager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
this.eventsHandlersManager.states.getClass().getName() == java.util.ArrayList.class
this.eventsHandlersManager.first.handler != null
this.eventsHandlersManager.first.maxCheckInterval one of { 1.0, Infinity }
this.eventsHandlersManager.first.convergence one of { 1.0E-12, 1.5E-7 }
this.eventsHandlersManager.first.maxIterationCount == 1000
this.eventsHandlersManager.first.t0 == 0.0
this.eventsHandlersManager.first.g0 one of { -1.122260016953696, 0.3325666164775135 }
this.eventsHandlersManager.first.g0 != 0
this.eventsHandlersManager.first.pendingEvent == true
this.eventsHandlersManager.first.pendingEventTime one of { 1.9415926557285343, 2.0 }
this.eventsHandlersManager.first.previousEventTime == Double.NaN
this.eventsHandlersManager.first.forward == true
this.eventsHandlersManager.first.nextAction == 3
this.name != null
this.maxEvaluations one of { 650, 2147483647 }
this.evaluations >= 0
size(this.vecAbsoluteTolerance[]) == 4
size(this.vecRelativeTolerance[]) == 4
size(this.eventsHandlersManager.states[]) one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.AdaptiveStepsizeIntegrator(java.lang.String, double, double, double, double):::ENTER
name != null
maxStep != 0
===========================================================================
org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.AdaptiveStepsizeIntegrator(java.lang.String, double, double, double, double):::EXIT
name.toString == orig(name.toString)
this.vecAbsoluteTolerance == null
this.vecRelativeTolerance == null
this.initialStep == -1.0
this.stepStart == Double.NaN
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.maxEvaluations == 2147483647
this.evaluations == 0
this.equations == null
===========================================================================
org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.AdaptiveStepsizeIntegrator(java.lang.String, double, double, double[], double[]):::ENTER
name has only one value
name.toString == "Higham-Hall 5(4)"
minStep == 0.0
maxStep == 20.0
vecAbsoluteTolerance has only one value
vecAbsoluteTolerance[] == [1.0E-8, 1.0E-8, 1.0E-10, 1.0E-10]
vecAbsoluteTolerance[] elements one of { 1.0E-10, 1.0E-8 }
vecRelativeTolerance has only one value
vecRelativeTolerance[] == [1.0E-10, 1.0E-10, 1.0E-8, 1.0E-8]
vecRelativeTolerance[] elements one of { 1.0E-10, 1.0E-8 }
size(vecAbsoluteTolerance[]) == 4
size(vecRelativeTolerance[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.AdaptiveStepsizeIntegrator(java.lang.String, double, double, double[], double[]):::EXIT
name.toString == orig(name.toString)
vecAbsoluteTolerance[] == orig(vecAbsoluteTolerance[])
vecRelativeTolerance[] == orig(vecRelativeTolerance[])
this.scalAbsoluteTolerance == 0.0
this.scalRelativeTolerance == 0.0
this.vecAbsoluteTolerance has only one value
this.vecRelativeTolerance has only one value
this.initialStep == -1.0
this.minStep == 0.0
this.maxStep == 20.0
this.stepHandlers has only one value
this.stepStart == Double.NaN
this.stepSize == 0.0
this.eventsHandlersManager has only one value
this.eventsHandlersManager.states has only one value
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.name has only one value
this.name.toString == "Higham-Hall 5(4)"
this.maxEvaluations == 2147483647
this.evaluations == 0
this.equations == null
name.toString == "Higham-Hall 5(4)"
vecAbsoluteTolerance[] == [1.0E-8, 1.0E-8, 1.0E-10, 1.0E-10]
vecAbsoluteTolerance[] elements one of { 1.0E-10, 1.0E-8 }
vecRelativeTolerance[] == [1.0E-10, 1.0E-10, 1.0E-8, 1.0E-8]
vecRelativeTolerance[] elements one of { 1.0E-10, 1.0E-8 }
===========================================================================
org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.filterStep(double, boolean, boolean):::ENTER
this.stepSize != 0
this.equations != null
h != 0
===========================================================================
org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.filterStep(double, boolean, boolean):::EXIT
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecAbsoluteTolerance[] == orig(this.vecAbsoluteTolerance[])
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.vecRelativeTolerance[] == orig(this.vecRelativeTolerance[])
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.first.handler == orig(this.eventsHandlersManager.first.handler)
this.eventsHandlersManager.first.handler.getClass().getName() == orig(this.eventsHandlersManager.first.handler.getClass().getName())
this.eventsHandlersManager.first.maxCheckInterval == orig(this.eventsHandlersManager.first.maxCheckInterval)
this.eventsHandlersManager.first.convergence == orig(this.eventsHandlersManager.first.convergence)
this.eventsHandlersManager.first.maxIterationCount == orig(this.eventsHandlersManager.first.maxIterationCount)
this.eventsHandlersManager.first.t0 == orig(this.eventsHandlersManager.first.t0)
this.eventsHandlersManager.first.g0 == orig(this.eventsHandlersManager.first.g0)
this.eventsHandlersManager.first.g0Positive == orig(this.eventsHandlersManager.first.g0Positive)
this.eventsHandlersManager.first.pendingEvent == orig(this.eventsHandlersManager.first.pendingEvent)
this.eventsHandlersManager.first.pendingEventTime == orig(this.eventsHandlersManager.first.pendingEventTime)
this.eventsHandlersManager.first.forward == orig(this.eventsHandlersManager.first.forward)
this.eventsHandlersManager.first.increasing == orig(this.eventsHandlersManager.first.increasing)
this.eventsHandlersManager.first.nextAction == orig(this.eventsHandlersManager.first.nextAction)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.stepSize != 0
this.equations != null
return != 0
===========================================================================
org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.getCurrentStepStart():::ENTER
this.scalAbsoluteTolerance >= 1.0E-12
this.scalRelativeTolerance >= 1.0E-14
this.vecAbsoluteTolerance == null
this.vecRelativeTolerance == null
this.initialStep == -1.0
this.minStep one of { 0.0, 1.0E-6 }
this.maxStep one of { 0.1, 4.0, 15.0 }
this.stepSize != 0
this.eventsHandlersManager.first == null
this.equations != null
===========================================================================
org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.getCurrentStepStart():::EXIT
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.scalAbsoluteTolerance >= 1.0E-12
this.scalRelativeTolerance >= 1.0E-14
this.vecAbsoluteTolerance == null
this.vecRelativeTolerance == null
this.initialStep == -1.0
this.minStep one of { 0.0, 1.0E-6 }
this.maxStep one of { 0.1, 4.0, 15.0 }
this.stepSize != 0
this.eventsHandlersManager.first == null
this.equations != null
===========================================================================
org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.getMaxStep():::ENTER
this.initialStep == -1.0
this.stepStart >= 0.0
this.stepSize >= 0.0
this.maxEvaluations == 2147483647
this.evaluations >= 2
this.equations != null
===========================================================================
org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.getMaxStep():::EXIT
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecAbsoluteTolerance[] == orig(this.vecAbsoluteTolerance[])
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.vecRelativeTolerance[] == orig(this.vecRelativeTolerance[])
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.first.handler == orig(this.eventsHandlersManager.first.handler)
this.eventsHandlersManager.first.handler.getClass().getName() == orig(this.eventsHandlersManager.first.handler.getClass().getName())
this.eventsHandlersManager.first.maxCheckInterval == orig(this.eventsHandlersManager.first.maxCheckInterval)
this.eventsHandlersManager.first.convergence == orig(this.eventsHandlersManager.first.convergence)
this.eventsHandlersManager.first.maxIterationCount == orig(this.eventsHandlersManager.first.maxIterationCount)
this.eventsHandlersManager.first.t0 == orig(this.eventsHandlersManager.first.t0)
this.eventsHandlersManager.first.g0 == orig(this.eventsHandlersManager.first.g0)
this.eventsHandlersManager.first.g0Positive == orig(this.eventsHandlersManager.first.g0Positive)
this.eventsHandlersManager.first.pendingEvent == orig(this.eventsHandlersManager.first.pendingEvent)
this.eventsHandlersManager.first.pendingEventTime == orig(this.eventsHandlersManager.first.pendingEventTime)
this.eventsHandlersManager.first.forward == orig(this.eventsHandlersManager.first.forward)
this.eventsHandlersManager.first.increasing == orig(this.eventsHandlersManager.first.increasing)
this.eventsHandlersManager.first.nextAction == orig(this.eventsHandlersManager.first.nextAction)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.initialStep == -1.0
this.stepStart >= 0.0
this.stepSize >= 0.0
this.maxEvaluations == 2147483647
this.evaluations >= 2
this.equations != null
===========================================================================
org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.getMinStep():::ENTER
this.initialStep == -1.0
this.stepStart one of { 0.0, 3.141592653589793, 6.283185307179586 }
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.maxEvaluations == 2147483647
this.evaluations == 2
this.equations != null
===========================================================================
org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.getMinStep():::EXIT
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecAbsoluteTolerance[] == orig(this.vecAbsoluteTolerance[])
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.vecRelativeTolerance[] == orig(this.vecRelativeTolerance[])
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.initialStep == -1.0
this.stepStart one of { 0.0, 3.141592653589793, 6.283185307179586 }
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.maxEvaluations == 2147483647
this.evaluations == 2
this.equations != null
===========================================================================
org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.initializeStep(org.apache.commons.math.ode.FirstOrderDifferentialEquations, boolean, int, double[], double, double[], double[], double[], double[]):::ENTER
this.stepStart one of { 0.0, 3.141592653589793, 6.283185307179586 }
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.maxEvaluations == 2147483647
this.evaluations == 1
this.equations != null
equations != null
order one of { 5, 8, 13 }
scale != null
scale[] sorted by >=
t0 one of { 0.0, 3.141592653589793, 6.283185307179586 }
y0 != null
yDot0 != null
y1 != null
y1[] elements == 0.0
y1[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
yDot1 != null
yDot1[] elements == 0.0
yDot1[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
size(scale[]) one of { 1, 2, 4 }
size(y0[]) one of { 1, 2, 4 }
size(yDot0[]) one of { 1, 2, 4 }
size(y1[]) one of { 1, 2, 4 }
size(yDot1[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.initializeStep(org.apache.commons.math.ode.FirstOrderDifferentialEquations, boolean, int, double[], double, double[], double[], double[], double[]):::EXIT211
this.evaluations == orig(this.evaluations)
y1[] == orig(y1[])
yDot1[] == orig(yDot1[])
this.scalAbsoluteTolerance == 6.0E-4
this.scalRelativeTolerance == 6.0E-4
this.vecAbsoluteTolerance == null
this.vecRelativeTolerance == null
this.initialStep == 1.7
this.minStep == 1.25
this.maxStep == 4.0
this.stepHandlers has only one value
this.stepStart == 0.0
this.stepSize == 2.23606797749979
this.eventsHandlersManager has only one value
this.eventsHandlersManager.states has only one value
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.name has only one value
this.name.toString == "Dormand-Prince 5(4)"
this.evaluations == 1
this.equations has only one value
this.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem5.class
scale[] == [6.0E-4, 6.0E-4]
scale[] elements == 6.0E-4
y0[] == [1.0, 0.1]
y0[] elements one of { 0.1, 1.0 }
yDot0[] == [-1.0, -0.1]
yDot0[] elements one of { -1.0, -0.1 }
y1[] == [0.0, 0.0]
y1[] elements == 0.0
yDot1[] == [0.0, 0.0]
yDot1[] elements == 0.0
return == -1.7
orig(this) has only one value
orig(this.getClass().getName()) == org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.class
orig(equations) has only one value
orig(equations.getClass().getName()) == org.apache.commons.math.ode.TestProblem5.class
orig(forward) == false
orig(order) == 5
orig(scale) has only one value
orig(t0) == 0.0
orig(y0) has only one value
orig(yDot0) has only one value
orig(y1) has only one value
orig(yDot1) has only one value
orig(size(scale[])) == 2
orig(size(y0[])) == 2
orig(size(yDot0[])) == 2
orig(size(y1[])) == 2
orig(size(yDot1[])) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.initializeStep(org.apache.commons.math.ode.FirstOrderDifferentialEquations, boolean, int, double[], double, double[], double[], double[], double[]):::EXIT264
this.initialStep == -1.0
this.evaluations == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.initializeStep(org.apache.commons.math.ode.FirstOrderDifferentialEquations, boolean, int, double[], double, double[], double[], double[], double[]):::EXIT
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecAbsoluteTolerance[] == orig(this.vecAbsoluteTolerance[])
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.vecRelativeTolerance[] == orig(this.vecRelativeTolerance[])
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
scale[] == orig(scale[])
y0[] == orig(y0[])
yDot0[] == orig(yDot0[])
(this.scalRelativeTolerance == 6.0E-4)  <==>  (this.evaluations == 1)
(this.scalRelativeTolerance == 6.0E-4)  <==>  (this.evaluations == orig(this.evaluations))
(this.scalRelativeTolerance == 6.0E-4)  <==>  (this.initialStep == 1.7)
(this.scalRelativeTolerance == 6.0E-4)  <==>  (this.minStep == 1.25)
(this.scalRelativeTolerance == 6.0E-4)  <==>  (this.stepSize == 2.23606797749979)
(this.scalRelativeTolerance == 6.0E-4)  ==>  (orig(equations) has only one value)
(this.scalRelativeTolerance == 6.0E-4)  ==>  (orig(equations.getClass().getName()) == org.apache.commons.math.ode.TestProblem5.class)
(this.scalRelativeTolerance == 6.0E-4)  ==>  (orig(forward) == false)
(this.scalRelativeTolerance == 6.0E-4)  ==>  (orig(order) == 5)
(this.scalRelativeTolerance == 6.0E-4)  ==>  (orig(scale) has only one value)
(this.scalRelativeTolerance == 6.0E-4)  ==>  (orig(size(scale[])) == 2)
(this.scalRelativeTolerance == 6.0E-4)  ==>  (orig(size(y0[])) == 2)
(this.scalRelativeTolerance == 6.0E-4)  ==>  (orig(size(y1[])) == 2)
(this.scalRelativeTolerance == 6.0E-4)  ==>  (orig(size(yDot0[])) == 2)
(this.scalRelativeTolerance == 6.0E-4)  ==>  (orig(size(yDot1[])) == 2)
(this.scalRelativeTolerance == 6.0E-4)  ==>  (orig(t0) == 0.0)
(this.scalRelativeTolerance == 6.0E-4)  ==>  (orig(this) has only one value)
(this.scalRelativeTolerance == 6.0E-4)  ==>  (orig(this.getClass().getName()) == org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.class)
(this.scalRelativeTolerance == 6.0E-4)  ==>  (orig(y0) has only one value)
(this.scalRelativeTolerance == 6.0E-4)  ==>  (orig(y1) has only one value)
(this.scalRelativeTolerance == 6.0E-4)  ==>  (orig(y1[]) == [0.0, 0.0])
(this.scalRelativeTolerance == 6.0E-4)  ==>  (orig(yDot0) has only one value)
(this.scalRelativeTolerance == 6.0E-4)  ==>  (orig(yDot1) has only one value)
(this.scalRelativeTolerance == 6.0E-4)  ==>  (orig(yDot1[]) == [0.0, 0.0])
(this.scalRelativeTolerance == 6.0E-4)  ==>  (return == -1.7)
(this.scalRelativeTolerance == 6.0E-4)  ==>  (scale[] == [6.0E-4, 6.0E-4])
(this.scalRelativeTolerance == 6.0E-4)  ==>  (scale[] elements == 6.0E-4)
(this.scalRelativeTolerance == 6.0E-4)  ==>  (this.equations has only one value)
(this.scalRelativeTolerance == 6.0E-4)  ==>  (this.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem5.class)
(this.scalRelativeTolerance == 6.0E-4)  ==>  (this.eventsHandlersManager has only one value)
(this.scalRelativeTolerance == 6.0E-4)  ==>  (this.eventsHandlersManager.states has only one value)
(this.scalRelativeTolerance == 6.0E-4)  ==>  (this.eventsHandlersManager.states[] == [])
(this.scalRelativeTolerance == 6.0E-4)  ==>  (this.eventsHandlersManager.states[].getClass().getName() == [])
(this.scalRelativeTolerance == 6.0E-4)  ==>  (this.maxStep == 4.0)
(this.scalRelativeTolerance == 6.0E-4)  ==>  (this.name has only one value)
(this.scalRelativeTolerance == 6.0E-4)  ==>  (this.name.toString == "Dormand-Prince 5(4)")
(this.scalRelativeTolerance == 6.0E-4)  ==>  (this.scalAbsoluteTolerance == 6.0E-4)
(this.scalRelativeTolerance == 6.0E-4)  ==>  (this.stepHandlers has only one value)
(this.scalRelativeTolerance == 6.0E-4)  ==>  (this.stepStart == 0.0)
(this.scalRelativeTolerance == 6.0E-4)  ==>  (this.vecAbsoluteTolerance == null)
(this.scalRelativeTolerance == 6.0E-4)  ==>  (this.vecRelativeTolerance == null)
(this.scalRelativeTolerance == 6.0E-4)  ==>  (y0[] == [1.0, 0.1])
(this.scalRelativeTolerance == 6.0E-4)  ==>  (y0[] elements one of { 0.1, 1.0 })
(this.scalRelativeTolerance == 6.0E-4)  ==>  (y1[] == [0.0, 0.0])
(this.scalRelativeTolerance == 6.0E-4)  ==>  (y1[] elements == 0.0)
(this.scalRelativeTolerance == 6.0E-4)  ==>  (yDot0[] == [-1.0, -0.1])
(this.scalRelativeTolerance == 6.0E-4)  ==>  (yDot0[] elements one of { -1.0, -0.1 })
(this.scalRelativeTolerance == 6.0E-4)  ==>  (yDot1[] == [0.0, 0.0])
(this.scalRelativeTolerance == 6.0E-4)  ==>  (yDot1[] elements == 0.0)
this.stepStart one of { 0.0, 3.141592653589793, 6.283185307179586 }
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.maxEvaluations == 2147483647
this.evaluations one of { 1, 2 }
this.equations != null
scale[] sorted by >=
return != 0
this.evaluations >= orig(this.evaluations)
===========================================================================
org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.resetInternalState():::ENTER
this.stepSize != 0
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.maxEvaluations == 2147483647
===========================================================================
org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.resetInternalState():::EXIT
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecAbsoluteTolerance[] == orig(this.vecAbsoluteTolerance[])
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.vecRelativeTolerance[] == orig(this.vecRelativeTolerance[])
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.stepStart == Double.NaN
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.maxEvaluations == 2147483647
this.stepStart != orig(this.stepStart)
this.stepSize != orig(this.stepSize)
===========================================================================
org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.sanityChecks(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double, double[], double, double[]):::ENTER
this.stepStart == Double.NaN
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.evaluations one of { 0, 50 }
this.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem1.class
equations != null
t0 one of { 0.0, 3.141592653589793, 6.283185307179586 }
y0 != null
y != null
y[] elements one of { 0.0, Double.NaN }
y[] sorted by ==
size(y0[]) one of { 1, 2, 4 }
size(y[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.sanityChecks(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double, double[], double, double[]):::EXIT
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecAbsoluteTolerance[] == orig(this.vecAbsoluteTolerance[])
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.vecRelativeTolerance[] == orig(this.vecRelativeTolerance[])
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
y0[] == orig(y0[])
y[] == orig(y[])
this.stepStart == Double.NaN
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.evaluations one of { 0, 50 }
this.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem1.class
y[] elements one of { 0.0, Double.NaN }
y[] sorted by ==
===========================================================================
org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.setInitialStepSize(double):::ENTER
this has only one value
this.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.class
this.scalAbsoluteTolerance == 6.0E-4
this.scalRelativeTolerance == 6.0E-4
this.vecAbsoluteTolerance == null
this.vecRelativeTolerance == null
this.initialStep == -1.0
this.minStep == 1.25
this.maxStep == 4.0
this.stepHandlers has only one value
this.stepStart == Double.NaN
this.stepSize == 2.23606797749979
this.eventsHandlersManager has only one value
this.eventsHandlersManager.states has only one value
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.name has only one value
this.name.toString == "Dormand-Prince 5(4)"
this.maxEvaluations == 2147483647
this.evaluations == 0
this.equations == null
initialStepSize == 1.7
===========================================================================
org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator.setInitialStepSize(double):::EXIT
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.scalAbsoluteTolerance == 6.0E-4
this.scalRelativeTolerance == 6.0E-4
this.vecAbsoluteTolerance == null
this.vecRelativeTolerance == null
this.initialStep == 1.7
this.minStep == 1.25
this.maxStep == 4.0
this.stepHandlers has only one value
this.stepStart == Double.NaN
this.stepSize == 2.23606797749979
this.eventsHandlersManager has only one value
this.eventsHandlersManager.states has only one value
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.name has only one value
this.name.toString == "Dormand-Prince 5(4)"
this.maxEvaluations == 2147483647
this.evaluations == 0
this.equations == null
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator:::CLASS
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_C has only one value
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_C[] == [0.5, 0.5, 1.0]
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_C[] elements one of { 0.5, 1.0 }
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_C[] sorted by <=
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_A has only one value
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_A.getClass().getName() == double[][].class
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_A[] contains no nulls and has only one value, of length 3
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_A[] elements != null
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_B has only one value
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_B[] == [0.16666666666666666, 0.3333333333333333, 0.3333333333333333, 0.16666666666666666]
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_B[] elements one of { 0.16666666666666666, 0.3333333333333333 }
size(org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_C[]) == 3
size(org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_A[]) == 3
size(org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_B[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator:::OBJECT
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_A.getClass().getName() == this.a.getClass().getName()
this.stepHandlers.getClass().getName() == this.eventsHandlersManager.states.getClass().getName()
this.c has only one value
this.c[] == [0.5, 0.5, 1.0]
this.c[] elements one of { 0.5, 1.0 }
this.c[] sorted by <=
this.a has only one value
this.a[] contains no nulls and has only one value, of length 3
this.a[] elements != null
this.b has only one value
this.b[] == [0.16666666666666666, 0.3333333333333333, 0.3333333333333333, 0.16666666666666666]
this.b[] elements one of { 0.16666666666666666, 0.3333333333333333 }
this.prototype.getClass().getName() == org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.class
this.prototype.yDotK == null
this.prototype.integrator == null
this.prototype.previousTime == Double.NaN
this.prototype.currentTime == Double.NaN
this.prototype.h == Double.NaN
this.prototype.currentState == null
this.prototype.interpolatedTime == Double.NaN
this.prototype.interpolatedState == null
this.prototype.interpolatedDerivatives == null
this.prototype.finalized == false
this.prototype.forward == true
this.prototype.dirtyState == true
this.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.name has only one value
this.name.toString == "classical Runge-Kutta"
this.maxEvaluations == 2147483647
this.evaluations == 0
this.equations == null
size(this.c[]) == 3
size(this.a[]) == 3
size(this.b[]) == 4
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_A.getClass().getName() != this.prototype.getClass().getName()
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.STATIC_A.getClass().getName() != this.stepHandlers.getClass().getName()
this.prototype.getClass().getName() != this.stepHandlers.getClass().getName()
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.ClassicalRungeKuttaIntegrator(double):::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.ClassicalRungeKuttaIntegrator(double):::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$1:::OBJECT
this has only one value
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$1.(org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest):::ENTER
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$1.(org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest):::EXIT
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this)
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$1.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::ENTER
interpolator has only one value
interpolator.getClass().getName() == org.apache.commons.math.ode.sampling.DummyStepInterpolator.class
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$1.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::EXIT
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this)
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$1.requiresDenseOutput():::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$1.requiresDenseOutput():::EXIT
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this)
return == false
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$1.requiresDenseOutput():::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$1.reset():::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$1.reset():::EXIT
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this)
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$2:::CLASS
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$2:::OBJECT
this has only one value
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$2.(org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest):::ENTER
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$2.(org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest):::EXIT
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this)
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$2.computeDerivatives(double, double[], double[]):::ENTER
dot[] elements one of { 0.0, 1.0 }
dot[] one of { [0.0], [1.0] }
size(y[]) == 1
size(dot[]) == 1
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$2.computeDerivatives(double, double[], double[]):::EXIT
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this)
y[] == orig(y[])
dot[] == [1.0]
dot[] elements == 1.0
dot[] >= orig(dot[]) (elementwise)
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$2.getDimension():::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$2.getDimension():::EXIT
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.this)
return == 1
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$KeplerHandler:::OBJECT
this has only one value
this.pb has only one value
this.pb.e == 0.9
this.pb.y has only one value
this.pb.n == 4
this.pb.calls >= 0
this.pb.t0 == 0.0
this.pb.y0 has only one value
this.pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
this.pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
this.pb.t1 == 20.0
this.pb.errorScale has only one value
this.pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
this.pb.errorScale[] elements == 1.0
size(this.pb.y[]) == 4
size(this.pb.y0[]) == 4
size(this.pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$KeplerHandler.KeplerHandler(org.apache.commons.math.ode.TestProblem3):::ENTER
pb has only one value
pb.e == 0.9
pb.y has only one value
pb.y[] == [0.0, 0.0, 0.0, 0.0]
pb.y[] elements == 0.0
pb.n == 4
pb.calls == 0
pb.t0 == 0.0
pb.y0 has only one value
pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
pb.t1 == 20.0
pb.errorScale has only one value
pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
pb.errorScale[] elements == 1.0
size(pb.y[]) == 4
size(pb.y0[]) == 4
size(pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$KeplerHandler.KeplerHandler(org.apache.commons.math.ode.TestProblem3):::EXIT
pb.e == orig(pb.e)
pb.y == orig(pb.y)
pb.y[] == orig(pb.y[])
pb.n == orig(pb.n)
pb.calls == orig(pb.calls)
pb.t0 == orig(pb.t0)
pb.y0 == orig(pb.y0)
pb.y0[] == orig(pb.y0[])
pb.t1 == orig(pb.t1)
pb.errorScale == orig(pb.errorScale)
pb.errorScale[] == orig(pb.errorScale[])
this.maxError == 0.0
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
pb.e == 0.9
pb.y has only one value
pb.y[] == [0.0, 0.0, 0.0, 0.0]
pb.y[] elements == 0.0
pb.n == 4
pb.calls == 0
pb.t0 == 0.0
pb.y0 has only one value
pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
pb.t1 == 20.0
pb.errorScale has only one value
pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
pb.errorScale[] elements == 1.0
size(pb.y[]) == 4
size(pb.y0[]) == 4
size(pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$KeplerHandler.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::ENTER
interpolator has only one value
interpolator.getClass().getName() == org.apache.commons.math.ode.sampling.DummyStepInterpolator.class
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$KeplerHandler.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::EXIT
this.pb == orig(this.pb)
this.pb.e == orig(this.pb.e)
this.pb.y == orig(this.pb.y)
this.pb.n == orig(this.pb.n)
this.pb.calls == orig(this.pb.calls)
this.pb.t0 == orig(this.pb.t0)
this.pb.y0 == orig(this.pb.y0)
this.pb.y0[] == orig(this.pb.y0[])
this.pb.t1 == orig(this.pb.t1)
this.pb.errorScale == orig(this.pb.errorScale)
this.pb.errorScale[] == orig(this.pb.errorScale[])
size(this.pb.y[]) == orig(size(this.pb.y[]))
this.pb.y[] elements != 0
this.maxError >= orig(this.maxError)
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$KeplerHandler.requiresDenseOutput():::ENTER
this.maxError == 0.0
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$KeplerHandler.requiresDenseOutput():::EXIT
this.maxError == orig(this.maxError)
this.pb == orig(this.pb)
this.pb.e == orig(this.pb.e)
this.pb.y == orig(this.pb.y)
this.pb.y[] == orig(this.pb.y[])
this.pb.n == orig(this.pb.n)
this.pb.calls == orig(this.pb.calls)
this.pb.t0 == orig(this.pb.t0)
this.pb.y0 == orig(this.pb.y0)
this.pb.y0[] == orig(this.pb.y0[])
this.pb.t1 == orig(this.pb.t1)
this.pb.errorScale == orig(this.pb.errorScale)
this.pb.errorScale[] == orig(this.pb.errorScale[])
this.maxError == 0.0
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
return == false
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$KeplerHandler.requiresDenseOutput():::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$KeplerHandler.reset():::ENTER
this.maxError == 0.0
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest$KeplerHandler.reset():::EXIT
this.maxError == orig(this.maxError)
this.pb == orig(this.pb)
this.pb.e == orig(this.pb.e)
this.pb.y == orig(this.pb.y)
this.pb.y[] == orig(this.pb.y[])
this.pb.n == orig(this.pb.n)
this.pb.calls == orig(this.pb.calls)
this.pb.t0 == orig(this.pb.t0)
this.pb.y0 == orig(this.pb.y0)
this.pb.y0[] == orig(this.pb.y0[])
this.pb.t1 == orig(this.pb.t1)
this.pb.errorScale == orig(this.pb.errorScale)
this.pb.errorScale[] == orig(this.pb.errorScale[])
this.maxError == 0.0
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest:::OBJECT
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.ClassicalRungeKuttaIntegratorTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.ClassicalRungeKuttaIntegratorTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.suite():::EXIT
return.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testBackward():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testBackward():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testBigStep():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testBigStep():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testKepler():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testKepler():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testSmallStep():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testSmallStep():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testStepSize():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testStepSize():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator:::CLASS
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator:::OBJECT
this.yDotK.getClass().getName() == double[][].class
this.yDotK[] elements != null
this.integrator.getClass().getName() == org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.class
this.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.integrator.eventsHandlersManager.states[] elements != null
this.integrator.eventsHandlersManager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
this.integrator.eventsHandlersManager.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.integrator.eventsHandlersManager.states.getClass().getName() == java.util.ArrayList.class
this.integrator.eventsHandlersManager.first == null
this.integrator.eventsHandlersManager.initialized == false
this.integrator.name has only one value
this.integrator.name.toString == "classical Runge-Kutta"
this.integrator.maxEvaluations == 2147483647
this.dirtyState == true
size(this.yDotK[]) == 4
size(this.integrator.eventsHandlersManager.states[]) one of { 0, 2 }
size(this.integrator.eventsHandlersManager.states[])-1 != 0
size(this.currentState[]) one of { 1, 2, 4 }
size(this.interpolatedState[]) one of { 1, 2, 4 }
size(this.interpolatedDerivatives[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.ClassicalRungeKuttaStepInterpolator():::EXIT
this.yDotK == null
this.integrator == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.finalized == false
this.forward == true
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.ClassicalRungeKuttaStepInterpolator(org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator):::ENTER
interpolator.yDotK.getClass().getName() == double[][].class
interpolator.yDotK[] contains no nulls and has only one value, of length 4
interpolator.yDotK[] elements != null
interpolator.integrator.getClass().getName() == org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.class
interpolator.integrator.stepHandlers has only one value
interpolator.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.stepSize one of { 0.0019999999994659845, 0.005999999999999999 }
interpolator.integrator.eventsHandlersManager has only one value
interpolator.integrator.name has only one value
interpolator.integrator.name.toString == "classical Runge-Kutta"
interpolator.integrator.maxEvaluations == 2147483647
interpolator.integrator.equations has only one value
interpolator.integrator.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem3.class
interpolator.h one of { 0.0019999999994659845, 0.005999999999999999, Double.NaN }
interpolator.h <= 0.006000000000000227
interpolator.currentState[] elements != 0
interpolator.interpolatedState[] elements != 0
interpolator.interpolatedDerivatives[] elements != 0
interpolator.finalized == true
interpolator.forward == true
interpolator.dirtyState == true
size(interpolator.yDotK[]) == 4
size(interpolator.currentState[]) == 4
size(interpolator.interpolatedState[]) == 4
size(interpolator.interpolatedDerivatives[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.ClassicalRungeKuttaStepInterpolator(org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator):::EXIT
interpolator.yDotK == orig(interpolator.yDotK)
interpolator.yDotK.getClass().getName() == orig(interpolator.yDotK.getClass().getName())
interpolator.yDotK[] == orig(interpolator.yDotK[])
interpolator.integrator == orig(interpolator.integrator)
interpolator.integrator.getClass().getName() == orig(interpolator.integrator.getClass().getName())
interpolator.integrator.stepHandlers == orig(interpolator.integrator.stepHandlers)
interpolator.integrator.stepHandlers.getClass().getName() == orig(interpolator.integrator.stepHandlers.getClass().getName())
interpolator.integrator.stepStart == orig(interpolator.integrator.stepStart)
interpolator.integrator.stepSize == orig(interpolator.integrator.stepSize)
interpolator.integrator.eventsHandlersManager == orig(interpolator.integrator.eventsHandlersManager)
interpolator.integrator.name == orig(interpolator.integrator.name)
interpolator.integrator.name.toString == orig(interpolator.integrator.name.toString)
interpolator.integrator.maxEvaluations == orig(interpolator.integrator.maxEvaluations)
interpolator.integrator.evaluations == orig(interpolator.integrator.evaluations)
interpolator.integrator.equations == orig(interpolator.integrator.equations)
interpolator.integrator.equations.getClass().getName() == orig(interpolator.integrator.equations.getClass().getName())
interpolator.currentState == orig(interpolator.currentState)
interpolator.currentState[] == orig(interpolator.currentState[])
interpolator.interpolatedState == orig(interpolator.interpolatedState)
interpolator.interpolatedState[] == orig(interpolator.interpolatedState[])
interpolator.interpolatedDerivatives == orig(interpolator.interpolatedDerivatives)
interpolator.interpolatedDerivatives[] == orig(interpolator.interpolatedDerivatives[])
interpolator.finalized == orig(interpolator.finalized)
interpolator.forward == orig(interpolator.forward)
interpolator.dirtyState == orig(interpolator.dirtyState)
this.integrator == null
this.h one of { 0.0019999999994659845, 0.005999999999999999, Double.NaN }
this.h <= 0.006000000000000227
this.currentState[] elements != 0
this.interpolatedState[] elements != 0
this.interpolatedDerivatives[] elements != 0
this.finalized == true
this.forward == true
interpolator.yDotK.getClass().getName() == double[][].class
interpolator.yDotK[] contains no nulls and has only one value, of length 4
interpolator.yDotK[] elements != null
interpolator.integrator.getClass().getName() == org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator.class
interpolator.integrator.stepHandlers has only one value
interpolator.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.stepSize one of { 0.0019999999994659845, 0.005999999999999999 }
interpolator.integrator.eventsHandlersManager has only one value
interpolator.integrator.name has only one value
interpolator.integrator.name.toString == "classical Runge-Kutta"
interpolator.integrator.maxEvaluations == 2147483647
interpolator.integrator.equations has only one value
interpolator.integrator.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem3.class
interpolator.h one of { 0.0019999999994659845, 0.005999999999999999, Double.NaN }
interpolator.h <= 0.006000000000000227
interpolator.currentState[] elements != 0
interpolator.interpolatedState[] elements != 0
interpolator.interpolatedDerivatives[] elements != 0
interpolator.finalized == true
interpolator.forward == true
interpolator.dirtyState == true
size(this.currentState[]) == 4
size(this.interpolatedState[]) == 4
size(this.interpolatedDerivatives[]) == 4
size(interpolator.yDotK[]) == 4
size(interpolator.currentState[]) == 4
size(interpolator.interpolatedState[]) == 4
size(interpolator.interpolatedDerivatives[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::ENTER
theta <= 1.0225287055469947
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::EXIT
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.integrator.stepHandlers == orig(this.integrator.stepHandlers)
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.stepHandlers.getClass().getName())
this.integrator.stepStart == orig(this.integrator.stepStart)
this.integrator.stepSize == orig(this.integrator.stepSize)
this.integrator.eventsHandlersManager == orig(this.integrator.eventsHandlersManager)
this.integrator.eventsHandlersManager.states == orig(this.integrator.eventsHandlersManager.states)
this.integrator.eventsHandlersManager.states[] == orig(this.integrator.eventsHandlersManager.states[])
this.integrator.eventsHandlersManager.states.getClass().getName() == orig(this.integrator.eventsHandlersManager.states.getClass().getName())
this.integrator.eventsHandlersManager.first == orig(this.integrator.eventsHandlersManager.first)
this.integrator.eventsHandlersManager.initialized == orig(this.integrator.eventsHandlersManager.initialized)
this.integrator.name == orig(this.integrator.name)
this.integrator.name.toString == orig(this.integrator.name.toString)
this.integrator.maxEvaluations == orig(this.integrator.maxEvaluations)
this.integrator.evaluations == orig(this.integrator.evaluations)
this.integrator.equations == orig(this.integrator.equations)
this.integrator.equations.getClass().getName() == orig(this.integrator.equations.getClass().getName())
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
size(this.interpolatedState[]) == orig(size(this.interpolatedState[]))
size(this.interpolatedDerivatives[]) == orig(size(this.interpolatedDerivatives[]))
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.doCopy():::ENTER
this.yDotK[] contains no nulls and has only one value, of length 4
this.integrator.stepHandlers has only one value
this.integrator.stepSize one of { 0.0019999999994659845, 0.005999999999999999 }
this.integrator.eventsHandlersManager has only one value
this.integrator.eventsHandlersManager.states has only one value
this.integrator.eventsHandlersManager.states[] == []
this.integrator.eventsHandlersManager.states[].getClass().getName() == []
this.integrator.equations has only one value
this.integrator.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem3.class
this.h one of { 0.0019999999994659845, 0.005999999999999999, Double.NaN }
this.h <= 0.006000000000000227
this.currentState[] elements != 0
this.interpolatedState[] elements != 0
this.interpolatedDerivatives[] elements != 0
this.finalized == true
this.forward == true
size(this.currentState[]) == 4
size(this.interpolatedState[]) == 4
size(this.interpolatedDerivatives[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.doCopy():::EXIT
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.integrator.stepHandlers == orig(this.integrator.stepHandlers)
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.stepHandlers.getClass().getName())
this.integrator.stepStart == orig(this.integrator.stepStart)
this.integrator.stepSize == orig(this.integrator.stepSize)
this.integrator.eventsHandlersManager == orig(this.integrator.eventsHandlersManager)
this.integrator.eventsHandlersManager.states == orig(this.integrator.eventsHandlersManager.states)
this.integrator.eventsHandlersManager.states[] == orig(this.integrator.eventsHandlersManager.states[])
this.integrator.eventsHandlersManager.states.getClass().getName() == orig(this.integrator.eventsHandlersManager.states.getClass().getName())
this.integrator.eventsHandlersManager.first == orig(this.integrator.eventsHandlersManager.first)
this.integrator.eventsHandlersManager.initialized == orig(this.integrator.eventsHandlersManager.initialized)
this.integrator.name == orig(this.integrator.name)
this.integrator.name.toString == orig(this.integrator.name.toString)
this.integrator.maxEvaluations == orig(this.integrator.maxEvaluations)
this.integrator.evaluations == orig(this.integrator.evaluations)
this.integrator.equations == orig(this.integrator.equations)
this.integrator.equations.getClass().getName() == orig(this.integrator.equations.getClass().getName())
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.yDotK[] contains no nulls and has only one value, of length 4
this.integrator.stepHandlers has only one value
this.integrator.stepSize one of { 0.0019999999994659845, 0.005999999999999999 }
this.integrator.eventsHandlersManager has only one value
this.integrator.eventsHandlersManager.states has only one value
this.integrator.eventsHandlersManager.states[] == []
this.integrator.eventsHandlersManager.states[].getClass().getName() == []
this.integrator.equations has only one value
this.integrator.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem3.class
this.h one of { 0.0019999999994659845, 0.005999999999999999, Double.NaN }
this.h <= 0.006000000000000227
this.currentState[] elements != 0
this.interpolatedState[] elements != 0
this.interpolatedDerivatives[] elements != 0
this.finalized == true
this.forward == true
return.getClass().getName() == org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolator.class
size(this.currentState[]) == 4
size(this.interpolatedState[]) == 4
size(this.interpolatedDerivatives[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest:::OBJECT
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest.ClassicalRungeKuttaStepInterpolatorTest():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest.derivativesConsistency():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest.derivativesConsistency():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest.serialization():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest.serialization():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator:::CLASS
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.METHOD_NAME has only one value
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.METHOD_NAME.toString == "Dormand-Prince 5(4)"
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_C has only one value
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_C[] == [0.2, 0.3, 0.8, 0.8888888888888888, 1.0, 1.0]
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_C[] elements <= 1.0
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_C[] elements >= 0.2
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_C[] sorted by <=
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_A has only one value
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_A.getClass().getName() == double[][].class
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_A[] contains no nulls and has only one value, of length 6
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_A[] elements != null
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_B has only one value
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_B[] == [0.09114583333333333, 0.0, 0.44923629829290207, 0.6510416666666666, -0.322376179245283, 0.13095238095238096, 0.0]
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_B[] elements <= 0.6510416666666666
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_B[] elements >= -0.322376179245283
size(org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_C[]) == 6
size(org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_A[]) == 6
size(org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_B[]) == 7
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator:::OBJECT
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.METHOD_NAME == this.name
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_C == this.c
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_A == this.a
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_A.getClass().getName() == this.a.getClass().getName()
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_B == this.b
this.stepHandlers.getClass().getName() == this.eventsHandlersManager.states.getClass().getName()
this.fsal == true
this.c[] == [0.2, 0.3, 0.8, 0.8888888888888888, 1.0, 1.0]
this.c[] elements <= 1.0
this.c[] elements >= 0.2
this.c[] sorted by <=
this.a[] contains no nulls and has only one value, of length 6
this.a[] elements != null
this.b[] == [0.09114583333333333, 0.0, 0.44923629829290207, 0.6510416666666666, -0.322376179245283, 0.13095238095238096, 0.0]
this.b[] elements <= 0.6510416666666666
this.b[] elements >= -0.322376179245283
this.prototype.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator.class
this.prototype.yDotK == null
this.prototype.integrator == null
this.prototype.previousTime == Double.NaN
this.prototype.currentTime == Double.NaN
this.prototype.h == Double.NaN
this.prototype.currentState == null
this.prototype.interpolatedTime == Double.NaN
this.prototype.interpolatedState == null
this.prototype.interpolatedDerivatives == null
this.prototype.forward == true
this.prototype.dirtyState == true
this.exp one of { -0.2, 0.0 }
this.safety one of { 0.0, 0.8, 0.9 }
this.minReduction one of { 0.0, 0.2, 0.3 }
this.maxGrowth one of { 0.0, 5.0, 10.0 }
this.vecAbsoluteTolerance == null
this.vecRelativeTolerance == null
this.initialStep one of { -1.0, 1.7 }
this.minStep one of { 0.0, 1.25 }
this.maxStep one of { 4.0, 15.0, 20.0 }
this.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.eventsHandlersManager.states[] elements != null
this.eventsHandlersManager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
this.eventsHandlersManager.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.name.toString == "Dormand-Prince 5(4)"
this.maxEvaluations == 2147483647
this.evaluations >= 0
size(this.c[]) == 6
size(this.a[]) == 6
size(this.b[]) == 7
size(this.eventsHandlersManager.states[]) one of { 0, 2 }
size(this.eventsHandlersManager.states[])-1 != 0
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_A.getClass().getName() != this.prototype.getClass().getName()
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_A.getClass().getName() != this.stepHandlers.getClass().getName()
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_A.getClass().getName() != this.equations.getClass().getName()
this.prototype.getClass().getName() != this.stepHandlers.getClass().getName()
this.prototype.getClass().getName() != this.equations.getClass().getName()
this.minStep < this.maxStep
this.stepHandlers.getClass().getName() != this.equations.getClass().getName()
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.DormandPrince54Integrator(double, double, double, double):::ENTER
minStep one of { 0.0, 1.25 }
minStep != maxStep
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.DormandPrince54Integrator(double, double, double, double):::EXIT
this.scalAbsoluteTolerance == orig(scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(scalRelativeTolerance)
this.minStep == orig(minStep)
this.prototype.finalized == false
this.exp == -0.2
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 10.0
this.initialStep == -1.0
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 2.23606797749979 }
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.evaluations == 0
this.equations == null
this.minStep != orig(maxStep)
orig(maxStep) % this.maxStep == 0
this.maxStep % orig(maxStep) == 0
this.maxStep >= orig(maxStep)
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.estimateError(double[][], double[], double[], double):::ENTER
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_A.getClass().getName() == yDotK.getClass().getName()
this.exp == -0.2
this.safety one of { 0.8, 0.9 }
this.minReduction one of { 0.2, 0.3 }
this.maxGrowth one of { 5.0, 10.0 }
yDotK[] elements != null
y1[] elements != 0
size(yDotK[]) == 7
size(y0[]) one of { 2, 4 }
size(y1[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.estimateError(double[][], double[], double[], double):::EXIT
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.METHOD_NAME == orig(org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.METHOD_NAME)
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.METHOD_NAME == orig(this.name)
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.METHOD_NAME.toString == orig(org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.METHOD_NAME.toString)
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_C == orig(org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_C)
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_C == orig(this.c)
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_C[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_C[])
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_A == orig(org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_A)
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_A == orig(this.a)
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_A.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_A.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_A.getClass().getName() == orig(this.a.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_A.getClass().getName() == orig(yDotK.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_A[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_A[])
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_B == orig(org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_B)
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_B == orig(this.b)
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_B[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_B[])
this.fsal == orig(this.fsal)
this.c[] == orig(this.c[])
this.a[] == orig(this.a[])
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.integrator == orig(this.prototype.integrator)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.interpolatedDerivatives == orig(this.prototype.interpolatedDerivatives)
this.prototype.finalized == orig(this.prototype.finalized)
this.prototype.forward == orig(this.prototype.forward)
this.prototype.dirtyState == orig(this.prototype.dirtyState)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.minReduction == orig(this.minReduction)
this.maxGrowth == orig(this.maxGrowth)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepHandlers.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
yDotK[] == orig(yDotK[])
y0[] == orig(y0[])
y1[] == orig(y1[])
this.exp == -0.2
this.safety one of { 0.8, 0.9 }
this.minReduction one of { 0.2, 0.3 }
this.maxGrowth one of { 5.0, 10.0 }
yDotK[] elements != null
y1[] elements != 0
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.getOrder():::ENTER
this.stepStart one of { 0.0, Double.NaN }
this.stepSize one of { 0.0, 2.23606797749979 }
this.evaluations one of { 0, 1 }
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.getOrder():::EXIT
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.METHOD_NAME == orig(org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.METHOD_NAME)
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.METHOD_NAME == orig(this.name)
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.METHOD_NAME.toString == orig(org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.METHOD_NAME.toString)
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_C == orig(org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_C)
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_C == orig(this.c)
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_C[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_C[])
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_A == orig(org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_A)
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_A == orig(this.a)
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_A.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_A.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_A.getClass().getName() == orig(this.a.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_A[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_A[])
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_B == orig(org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_B)
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_B == orig(this.b)
org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_B[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.STATIC_B[])
this.fsal == orig(this.fsal)
this.c[] == orig(this.c[])
this.a[] == orig(this.a[])
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.integrator == orig(this.prototype.integrator)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.interpolatedDerivatives == orig(this.prototype.interpolatedDerivatives)
this.prototype.finalized == orig(this.prototype.finalized)
this.prototype.forward == orig(this.prototype.forward)
this.prototype.dirtyState == orig(this.prototype.dirtyState)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.minReduction == orig(this.minReduction)
this.maxGrowth == orig(this.maxGrowth)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepHandlers.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.stepStart one of { 0.0, Double.NaN }
this.stepSize one of { 0.0, 2.23606797749979 }
this.evaluations one of { 0, 1 }
return == 5
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest$DP54SmallLastHandler:::OBJECT
this has only one value
this.minStep == 1.25
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest$DP54SmallLastHandler.DP54SmallLastHandler(double):::ENTER
minStep == 1.25
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest$DP54SmallLastHandler.DP54SmallLastHandler(double):::EXIT
this.lastSeen == false
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest$DP54SmallLastHandler.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::ENTER
this.lastSeen == false
interpolator has only one value
interpolator.getClass().getName() == org.apache.commons.math.ode.sampling.DummyStepInterpolator.class
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest$DP54SmallLastHandler.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::EXIT
this.minStep == orig(this.minStep)
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest$DP54SmallLastHandler.requiresDenseOutput():::ENTER
this.lastSeen == false
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest$DP54SmallLastHandler.requiresDenseOutput():::EXIT
this.lastSeen == orig(this.lastSeen)
this.minStep == orig(this.minStep)
this.lastSeen == false
return == false
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest$DP54SmallLastHandler.requiresDenseOutput():::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest$DP54SmallLastHandler.reset():::ENTER
this.lastSeen == false
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest$DP54SmallLastHandler.reset():::EXIT
this.lastSeen == orig(this.lastSeen)
this.minStep == orig(this.minStep)
this.lastSeen == false
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest$DP54SmallLastHandler.wasLastSeen():::ENTER
this.lastSeen == true
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest$DP54SmallLastHandler.wasLastSeen():::EXIT
this.lastSeen == orig(this.lastSeen)
this.minStep == orig(this.minStep)
this.lastSeen == true
return == true
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest$DP54SmallLastHandler.wasLastSeen():::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest$KeplerHandler:::OBJECT
this has only one value
this.nbSteps >= 0
this.pb has only one value
this.pb.e == 0.9
this.pb.y has only one value
this.pb.n == 4
this.pb.calls >= 0
this.pb.t0 == 0.0
this.pb.y0 has only one value
this.pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
this.pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
this.pb.t1 == 20.0
this.pb.errorScale has only one value
this.pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
this.pb.errorScale[] elements == 1.0
size(this.pb.y[]) == 4
size(this.pb.y0[]) == 4
size(this.pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest$KeplerHandler.KeplerHandler(org.apache.commons.math.ode.TestProblem3):::ENTER
pb has only one value
pb.e == 0.9
pb.y has only one value
pb.y[] == [0.0, 0.0, 0.0, 0.0]
pb.y[] elements == 0.0
pb.n == 4
pb.calls == 0
pb.t0 == 0.0
pb.y0 has only one value
pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
pb.t1 == 20.0
pb.errorScale has only one value
pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
pb.errorScale[] elements == 1.0
size(pb.y[]) == 4
size(pb.y0[]) == 4
size(pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest$KeplerHandler.KeplerHandler(org.apache.commons.math.ode.TestProblem3):::EXIT
pb.e == orig(pb.e)
pb.y == orig(pb.y)
pb.y[] == orig(pb.y[])
pb.n == orig(pb.n)
pb.calls == orig(pb.calls)
pb.t0 == orig(pb.t0)
pb.y0 == orig(pb.y0)
pb.y0[] == orig(pb.y0[])
pb.t1 == orig(pb.t1)
pb.errorScale == orig(pb.errorScale)
pb.errorScale[] == orig(pb.errorScale[])
this.nbSteps == 0
this.maxError == 0.0
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
pb.e == 0.9
pb.y has only one value
pb.y[] == [0.0, 0.0, 0.0, 0.0]
pb.y[] elements == 0.0
pb.n == 4
pb.calls == 0
pb.t0 == 0.0
pb.y0 has only one value
pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
pb.t1 == 20.0
pb.errorScale has only one value
pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
pb.errorScale[] elements == 1.0
size(pb.y[]) == 4
size(pb.y0[]) == 4
size(pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest$KeplerHandler.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::ENTER
this.maxError == 0.0
interpolator has only one value
interpolator.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator.class
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest$KeplerHandler.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::EXIT
this.pb == orig(this.pb)
this.pb.e == orig(this.pb.e)
this.pb.y == orig(this.pb.y)
this.pb.n == orig(this.pb.n)
this.pb.calls == orig(this.pb.calls)
this.pb.t0 == orig(this.pb.t0)
this.pb.y0 == orig(this.pb.y0)
this.pb.y0[] == orig(this.pb.y0[])
this.pb.t1 == orig(this.pb.t1)
this.pb.errorScale == orig(this.pb.errorScale)
this.pb.errorScale[] == orig(this.pb.errorScale[])
size(this.pb.y[]) == orig(size(this.pb.y[]))
this.pb.y[] elements != 0
this.nbSteps - orig(this.nbSteps) - 1 == 0
orig(this.maxError) % this.maxError == 0
this.maxError >= orig(this.maxError)
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest$KeplerHandler.requiresDenseOutput():::ENTER
this.nbSteps == 0
this.maxError == 0.0
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest$KeplerHandler.requiresDenseOutput():::EXIT
this.nbSteps == orig(this.nbSteps)
this.maxError == orig(this.maxError)
this.pb == orig(this.pb)
this.pb.e == orig(this.pb.e)
this.pb.y == orig(this.pb.y)
this.pb.y[] == orig(this.pb.y[])
this.pb.n == orig(this.pb.n)
this.pb.calls == orig(this.pb.calls)
this.pb.t0 == orig(this.pb.t0)
this.pb.y0 == orig(this.pb.y0)
this.pb.y0[] == orig(this.pb.y0[])
this.pb.t1 == orig(this.pb.t1)
this.pb.errorScale == orig(this.pb.errorScale)
this.pb.errorScale[] == orig(this.pb.errorScale[])
this.nbSteps == 0
this.maxError == 0.0
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
return == true
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest$KeplerHandler.requiresDenseOutput():::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest$KeplerHandler.reset():::ENTER
this.nbSteps == 0
this.maxError == 0.0
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest$KeplerHandler.reset():::EXIT
this.nbSteps == orig(this.nbSteps)
this.maxError == orig(this.maxError)
this.pb == orig(this.pb)
this.pb.e == orig(this.pb.e)
this.pb.y == orig(this.pb.y)
this.pb.y[] == orig(this.pb.y[])
this.pb.n == orig(this.pb.n)
this.pb.calls == orig(this.pb.calls)
this.pb.t0 == orig(this.pb.t0)
this.pb.y0 == orig(this.pb.y0)
this.pb.y0[] == orig(this.pb.y0[])
this.pb.t1 == orig(this.pb.t1)
this.pb.errorScale == orig(this.pb.errorScale)
this.pb.errorScale[] == orig(this.pb.errorScale[])
this.nbSteps == 0
this.maxError == 0.0
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest$VariableHandler:::OBJECT
this has only one value
this.minStep one of { 0.0, 0.0018711711981388478 }
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest$VariableHandler.VariableHandler():::EXIT
this.firstTime == true
this.minStep == 0.0
this.maxStep == 0.0
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest$VariableHandler.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::ENTER
interpolator has only one value
interpolator.getClass().getName() == org.apache.commons.math.ode.sampling.DummyStepInterpolator.class
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest$VariableHandler.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::EXIT
this.firstTime == false
this.minStep == 0.0018711711981388478
this.minStep >= orig(this.minStep)
this.maxStep >= orig(this.maxStep)
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest$VariableHandler.requiresDenseOutput():::ENTER
this.firstTime == true
this.minStep == 0.0
this.maxStep == 0.0
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest$VariableHandler.requiresDenseOutput():::EXIT
this.firstTime == orig(this.firstTime)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.firstTime == true
this.minStep == 0.0
this.maxStep == 0.0
return == false
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest$VariableHandler.requiresDenseOutput():::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest$VariableHandler.reset():::ENTER
this.firstTime == true
this.minStep == 0.0
this.maxStep == 0.0
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest$VariableHandler.reset():::EXIT
this.firstTime == orig(this.firstTime)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.firstTime == true
this.minStep == 0.0
this.maxStep == 0.0
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest:::OBJECT
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest.DormandPrince54IntegratorTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest.DormandPrince54IntegratorTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest.suite():::EXIT
return.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest.testBackward():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest.testBackward():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest.testIncreasingTolerance():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest.testIncreasingTolerance():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest.testKepler():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest.testKepler():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest.testSmallLastStep():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest.testSmallLastStep():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest.testVariableSteps():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest.testVariableSteps():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator:::CLASS
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator:::OBJECT
this.integrator.stepHandlers.getClass().getName() == this.integrator.eventsHandlersManager.states.getClass().getName()
this.v1[] elements != 0
this.v2[] elements != 0
this.yDotK.getClass().getName() == double[][].class
this.yDotK[] elements != null
this.integrator.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.class
this.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.integrator.eventsHandlersManager.states[] elements != null
this.integrator.eventsHandlersManager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
this.integrator.eventsHandlersManager.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.integrator.eventsHandlersManager.first == null
this.integrator.eventsHandlersManager.initialized == false
this.integrator.name has only one value
this.integrator.name.toString == "Dormand-Prince 5(4)"
this.integrator.maxEvaluations == 2147483647
this.integrator.evaluations >= 0
size(this.v1[]) one of { 2, 4 }
size(this.v2[]) one of { 2, 4 }
size(this.v3[]) one of { 2, 4 }
size(this.v4[]) one of { 2, 4 }
size(this.yDotK[]) == 7
size(this.integrator.eventsHandlersManager.states[]) one of { 0, 2 }
size(this.integrator.eventsHandlersManager.states[])-1 != 0
size(this.currentState[]) one of { 2, 4 }
size(this.interpolatedState[]) one of { 2, 4 }
size(this.interpolatedDerivatives[]) one of { 2, 4 }
this.yDotK.getClass().getName() != this.integrator.getClass().getName()
this.yDotK.getClass().getName() != this.integrator.stepHandlers.getClass().getName()
this.yDotK.getClass().getName() != this.integrator.equations.getClass().getName()
this.integrator.getClass().getName() != this.integrator.stepHandlers.getClass().getName()
this.integrator.getClass().getName() != this.integrator.equations.getClass().getName()
this.integrator.stepHandlers.getClass().getName() != this.integrator.equations.getClass().getName()
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator.DormandPrince54StepInterpolator():::EXIT
this.v1 == null
this.v2 == null
this.v3 == null
this.v4 == null
this.vectorsInitialized == false
this.yDotK == null
this.integrator == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.finalized == false
this.forward == true
this.dirtyState == true
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator.DormandPrince54StepInterpolator(org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator):::ENTER
interpolator.v1[] elements != 0
interpolator.v2[] elements != 0
interpolator.v3[] elements != 0
interpolator.v4[] elements != 0
interpolator.vectorsInitialized == false
interpolator.yDotK.getClass().getName() == double[][].class
interpolator.yDotK[] elements != null
interpolator.integrator.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.class
interpolator.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.name has only one value
interpolator.integrator.name.toString == "Dormand-Prince 5(4)"
interpolator.integrator.maxEvaluations == 2147483647
interpolator.integrator.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem3.class
interpolator.currentState[] elements != 0
interpolator.interpolatedState[] elements != 0
interpolator.interpolatedDerivatives[] elements != 0
interpolator.finalized == true
interpolator.forward == true
interpolator.dirtyState == true
size(interpolator.v1[]) == 4
size(interpolator.v2[]) == 4
size(interpolator.v3[]) == 4
size(interpolator.v4[]) == 4
size(interpolator.yDotK[]) == 7
size(interpolator.currentState[]) == 4
size(interpolator.interpolatedState[]) == 4
size(interpolator.interpolatedDerivatives[]) == 4
interpolator.yDotK.getClass().getName() != interpolator.integrator.getClass().getName()
interpolator.yDotK.getClass().getName() != interpolator.integrator.stepHandlers.getClass().getName()
interpolator.yDotK.getClass().getName() != interpolator.integrator.equations.getClass().getName()
interpolator.integrator.getClass().getName() != interpolator.integrator.stepHandlers.getClass().getName()
interpolator.integrator.getClass().getName() != interpolator.integrator.equations.getClass().getName()
interpolator.integrator.stepHandlers.getClass().getName() != interpolator.integrator.equations.getClass().getName()
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator.DormandPrince54StepInterpolator(org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator):::EXIT
this.yDotK.getClass().getName() == interpolator.yDotK.getClass().getName()
this.yDotK.getClass().getName() == orig(interpolator.yDotK.getClass().getName())
interpolator.v1 == orig(interpolator.v1)
interpolator.v1[] == orig(interpolator.v1[])
interpolator.v2 == orig(interpolator.v2)
interpolator.v2[] == orig(interpolator.v2[])
interpolator.v3 == orig(interpolator.v3)
interpolator.v3[] == orig(interpolator.v3[])
interpolator.v4 == orig(interpolator.v4)
interpolator.v4[] == orig(interpolator.v4[])
interpolator.vectorsInitialized == orig(interpolator.vectorsInitialized)
interpolator.yDotK == orig(interpolator.yDotK)
interpolator.yDotK[] == orig(interpolator.yDotK[])
interpolator.integrator == orig(interpolator.integrator)
interpolator.integrator.getClass().getName() == orig(interpolator.integrator.getClass().getName())
interpolator.integrator.stepHandlers == orig(interpolator.integrator.stepHandlers)
interpolator.integrator.stepHandlers.getClass().getName() == orig(interpolator.integrator.stepHandlers.getClass().getName())
interpolator.integrator.stepStart == orig(interpolator.integrator.stepStart)
interpolator.integrator.stepSize == orig(interpolator.integrator.stepSize)
interpolator.integrator.eventsHandlersManager == orig(interpolator.integrator.eventsHandlersManager)
interpolator.integrator.name == orig(interpolator.integrator.name)
interpolator.integrator.name.toString == orig(interpolator.integrator.name.toString)
interpolator.integrator.maxEvaluations == orig(interpolator.integrator.maxEvaluations)
interpolator.integrator.evaluations == orig(interpolator.integrator.evaluations)
interpolator.integrator.equations == orig(interpolator.integrator.equations)
interpolator.integrator.equations.getClass().getName() == orig(interpolator.integrator.equations.getClass().getName())
interpolator.currentState == orig(interpolator.currentState)
interpolator.currentState[] == orig(interpolator.currentState[])
interpolator.interpolatedState == orig(interpolator.interpolatedState)
interpolator.interpolatedState[] == orig(interpolator.interpolatedState[])
interpolator.interpolatedDerivatives == orig(interpolator.interpolatedDerivatives)
interpolator.interpolatedDerivatives[] == orig(interpolator.interpolatedDerivatives[])
interpolator.finalized == orig(interpolator.finalized)
interpolator.forward == orig(interpolator.forward)
interpolator.dirtyState == orig(interpolator.dirtyState)
this.v3[] elements != 0
this.v4[] elements != 0
this.vectorsInitialized == false
this.integrator == null
this.currentState[] elements != 0
this.interpolatedState[] elements != 0
this.interpolatedDerivatives[] elements != 0
this.finalized == true
this.forward == true
this.dirtyState == true
interpolator.v1[] elements != 0
interpolator.v2[] elements != 0
interpolator.v3[] elements != 0
interpolator.v4[] elements != 0
interpolator.vectorsInitialized == false
interpolator.yDotK[] elements != null
interpolator.integrator.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.class
interpolator.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.name has only one value
interpolator.integrator.name.toString == "Dormand-Prince 5(4)"
interpolator.integrator.maxEvaluations == 2147483647
interpolator.integrator.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem3.class
interpolator.currentState[] elements != 0
interpolator.interpolatedState[] elements != 0
interpolator.interpolatedDerivatives[] elements != 0
interpolator.finalized == true
interpolator.forward == true
interpolator.dirtyState == true
size(this.v1[]) == 4
size(this.v2[]) == 4
size(this.v3[]) == 4
size(this.v4[]) == 4
size(this.currentState[]) == 4
size(this.interpolatedState[]) == 4
size(this.interpolatedDerivatives[]) == 4
size(interpolator.v1[]) == 4
size(interpolator.v2[]) == 4
size(interpolator.v3[]) == 4
size(interpolator.v4[]) == 4
size(interpolator.yDotK[]) == 7
size(interpolator.currentState[]) == 4
size(interpolator.interpolatedState[]) == 4
size(interpolator.interpolatedDerivatives[]) == 4
this.yDotK.getClass().getName() != interpolator.integrator.getClass().getName()
this.yDotK.getClass().getName() != interpolator.integrator.stepHandlers.getClass().getName()
this.yDotK.getClass().getName() != interpolator.integrator.equations.getClass().getName()
interpolator.integrator.getClass().getName() != interpolator.integrator.stepHandlers.getClass().getName()
interpolator.integrator.getClass().getName() != interpolator.integrator.equations.getClass().getName()
interpolator.integrator.stepHandlers.getClass().getName() != interpolator.integrator.equations.getClass().getName()
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::ENTER
this.currentState[] elements != 0
this.dirtyState == true
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::EXIT
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.integrator.stepHandlers == orig(this.integrator.stepHandlers)
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.stepHandlers.getClass().getName())
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.eventsHandlersManager.states.getClass().getName())
this.integrator.stepStart == orig(this.integrator.stepStart)
this.integrator.stepSize == orig(this.integrator.stepSize)
this.integrator.eventsHandlersManager == orig(this.integrator.eventsHandlersManager)
this.integrator.eventsHandlersManager.states == orig(this.integrator.eventsHandlersManager.states)
this.integrator.eventsHandlersManager.states[] == orig(this.integrator.eventsHandlersManager.states[])
this.integrator.eventsHandlersManager.first == orig(this.integrator.eventsHandlersManager.first)
this.integrator.eventsHandlersManager.initialized == orig(this.integrator.eventsHandlersManager.initialized)
this.integrator.name == orig(this.integrator.name)
this.integrator.name.toString == orig(this.integrator.name.toString)
this.integrator.maxEvaluations == orig(this.integrator.maxEvaluations)
this.integrator.evaluations == orig(this.integrator.evaluations)
this.integrator.equations == orig(this.integrator.equations)
this.integrator.equations.getClass().getName() == orig(this.integrator.equations.getClass().getName())
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
size(this.v1[]) == orig(size(this.v1[]))
size(this.v2[]) == orig(size(this.v2[]))
size(this.v3[]) == orig(size(this.v3[]))
size(this.v4[]) == orig(size(this.v4[]))
size(this.interpolatedState[]) == orig(size(this.interpolatedState[]))
size(this.interpolatedDerivatives[]) == orig(size(this.interpolatedDerivatives[]))
this.vectorsInitialized == true
this.currentState[] elements != 0
this.dirtyState == true
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator.doCopy():::ENTER
this.v3[] elements != 0
this.v4[] elements != 0
this.vectorsInitialized == false
this.integrator.eventsHandlersManager.states[] == []
this.integrator.eventsHandlersManager.states[].getClass().getName() == []
this.integrator.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem3.class
this.currentState[] elements != 0
this.interpolatedState[] elements != 0
this.interpolatedDerivatives[] elements != 0
this.finalized == true
this.forward == true
this.dirtyState == true
size(this.v1[]) == 4
size(this.v2[]) == 4
size(this.v3[]) == 4
size(this.v4[]) == 4
size(this.currentState[]) == 4
size(this.interpolatedState[]) == 4
size(this.interpolatedDerivatives[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator.doCopy():::EXIT
this.v1 == orig(this.v1)
this.v1[] == orig(this.v1[])
this.v2 == orig(this.v2)
this.v2[] == orig(this.v2[])
this.v3 == orig(this.v3)
this.v3[] == orig(this.v3[])
this.v4 == orig(this.v4)
this.v4[] == orig(this.v4[])
this.vectorsInitialized == orig(this.vectorsInitialized)
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.integrator.stepHandlers == orig(this.integrator.stepHandlers)
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.stepHandlers.getClass().getName())
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.eventsHandlersManager.states.getClass().getName())
this.integrator.stepStart == orig(this.integrator.stepStart)
this.integrator.stepSize == orig(this.integrator.stepSize)
this.integrator.eventsHandlersManager == orig(this.integrator.eventsHandlersManager)
this.integrator.eventsHandlersManager.states == orig(this.integrator.eventsHandlersManager.states)
this.integrator.eventsHandlersManager.states[] == orig(this.integrator.eventsHandlersManager.states[])
this.integrator.eventsHandlersManager.first == orig(this.integrator.eventsHandlersManager.first)
this.integrator.eventsHandlersManager.initialized == orig(this.integrator.eventsHandlersManager.initialized)
this.integrator.name == orig(this.integrator.name)
this.integrator.name.toString == orig(this.integrator.name.toString)
this.integrator.maxEvaluations == orig(this.integrator.maxEvaluations)
this.integrator.evaluations == orig(this.integrator.evaluations)
this.integrator.equations == orig(this.integrator.equations)
this.integrator.equations.getClass().getName() == orig(this.integrator.equations.getClass().getName())
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.v3[] elements != 0
this.v4[] elements != 0
this.vectorsInitialized == false
this.integrator.eventsHandlersManager.states[] == []
this.integrator.eventsHandlersManager.states[].getClass().getName() == []
this.integrator.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem3.class
this.currentState[] elements != 0
this.interpolatedState[] elements != 0
this.interpolatedDerivatives[] elements != 0
this.finalized == true
this.forward == true
this.dirtyState == true
return.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator.class
size(this.v1[]) == 4
size(this.v2[]) == 4
size(this.v3[]) == 4
size(this.v4[]) == 4
size(this.currentState[]) == 4
size(this.interpolatedState[]) == 4
size(this.interpolatedDerivatives[]) == 4
this.yDotK.getClass().getName() != return.getClass().getName()
this.integrator.getClass().getName() != return.getClass().getName()
this.integrator.stepHandlers.getClass().getName() != return.getClass().getName()
this.integrator.equations.getClass().getName() != return.getClass().getName()
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator.reinitialize(org.apache.commons.math.ode.AbstractIntegrator, double[], double[][], boolean):::ENTER
integrator.stepHandlers.getClass().getName() == integrator.eventsHandlersManager.states.getClass().getName()
this.v1 == null
this.v2 == null
this.v3 == null
this.v4 == null
this.vectorsInitialized == false
this.yDotK == null
this.integrator == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.finalized == true
this.forward == true
this.dirtyState == true
integrator.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.class
integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
integrator.stepStart == Double.NaN
integrator.stepSize == 0.0
integrator.eventsHandlersManager.states[] elements != null
integrator.eventsHandlersManager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
integrator.eventsHandlersManager.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
integrator.eventsHandlersManager.first == null
integrator.eventsHandlersManager.initialized == false
integrator.name has only one value
integrator.name.toString == "Dormand-Prince 5(4)"
integrator.maxEvaluations == 2147483647
integrator.evaluations == 0
y[] elements == 0.0
y[] one of { [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
yDotK.getClass().getName() == double[][].class
yDotK[] elements != null
size(integrator.eventsHandlersManager.states[]) one of { 0, 2 }
size(integrator.eventsHandlersManager.states[])-1 != 0
size(y[]) one of { 2, 4 }
size(yDotK[]) == 7
integrator.getClass().getName() != integrator.stepHandlers.getClass().getName()
integrator.getClass().getName() != integrator.equations.getClass().getName()
integrator.getClass().getName() != yDotK.getClass().getName()
integrator.stepHandlers.getClass().getName() != integrator.equations.getClass().getName()
integrator.stepHandlers.getClass().getName() != yDotK.getClass().getName()
integrator.equations.getClass().getName() != yDotK.getClass().getName()
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator.reinitialize(org.apache.commons.math.ode.AbstractIntegrator, double[], double[][], boolean):::EXIT
this.v1 == orig(this.v1)
this.v2 == orig(this.v2)
this.v3 == orig(this.v3)
this.v4 == orig(this.v4)
this.vectorsInitialized == orig(this.vectorsInitialized)
this.yDotK.getClass().getName() == orig(yDotK.getClass().getName())
this.integrator.getClass().getName() == orig(integrator.getClass().getName())
this.integrator.stepHandlers.getClass().getName() == integrator.stepHandlers.getClass().getName()
this.integrator.eventsHandlersManager.states.getClass().getName() == integrator.stepHandlers.getClass().getName()
this.integrator.equations.getClass().getName() == integrator.equations.getClass().getName()
this.dirtyState == orig(this.dirtyState)
integrator.stepHandlers == orig(integrator.stepHandlers)
integrator.stepHandlers.getClass().getName() == integrator.eventsHandlersManager.states.getClass().getName()
integrator.stepHandlers.getClass().getName() == orig(integrator.stepHandlers.getClass().getName())
integrator.stepHandlers.getClass().getName() == orig(integrator.eventsHandlersManager.states.getClass().getName())
integrator.stepSize == orig(integrator.stepSize)
integrator.eventsHandlersManager == orig(integrator.eventsHandlersManager)
integrator.eventsHandlersManager.states == orig(integrator.eventsHandlersManager.states)
integrator.eventsHandlersManager.states[] == orig(integrator.eventsHandlersManager.states[])
integrator.eventsHandlersManager.first == orig(integrator.eventsHandlersManager.first)
integrator.eventsHandlersManager.initialized == orig(integrator.eventsHandlersManager.initialized)
integrator.name == orig(integrator.name)
integrator.name.toString == orig(integrator.name.toString)
integrator.maxEvaluations == orig(integrator.maxEvaluations)
integrator.evaluations == orig(integrator.evaluations)
integrator.equations == orig(integrator.equations)
integrator.equations.getClass().getName() == orig(integrator.equations.getClass().getName())
y[] == orig(y[])
yDotK[] == orig(yDotK[])
this.v1 == null
this.v2 == null
this.v3 == null
this.v4 == null
this.vectorsInitialized == false
this.integrator.stepStart == Double.NaN
this.integrator.stepSize == 0.0
this.integrator.evaluations == 0
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState[] elements == 0.0
this.currentState[] one of { [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.interpolatedTime == Double.NaN
this.interpolatedState[] elements == 0.0
this.interpolatedState[] one of { [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.interpolatedDerivatives[] elements == 0.0
this.interpolatedDerivatives[] one of { [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.finalized == false
this.dirtyState == true
integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
integrator.stepStart == Double.NaN
integrator.stepSize == 0.0
integrator.eventsHandlersManager.states[] elements != null
integrator.eventsHandlersManager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
integrator.eventsHandlersManager.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
integrator.eventsHandlersManager.first == null
integrator.eventsHandlersManager.initialized == false
integrator.name has only one value
integrator.name.toString == "Dormand-Prince 5(4)"
integrator.maxEvaluations == 2147483647
integrator.evaluations == 0
y[] elements == 0.0
y[] one of { [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
yDotK[] elements != null
size(integrator.eventsHandlersManager.states[]) one of { 0, 2 }
size(integrator.eventsHandlersManager.states[])-1 != 0
this.yDotK.getClass().getName() != integrator.stepHandlers.getClass().getName()
this.yDotK.getClass().getName() != integrator.equations.getClass().getName()
this.integrator.getClass().getName() != integrator.stepHandlers.getClass().getName()
this.integrator.getClass().getName() != integrator.equations.getClass().getName()
integrator.stepHandlers.getClass().getName() != integrator.equations.getClass().getName()
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator.storeTime(double):::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator.storeTime(double):::EXIT
this.v1 == orig(this.v1)
this.v1[] == orig(this.v1[])
this.v2 == orig(this.v2)
this.v2[] == orig(this.v2[])
this.v3 == orig(this.v3)
this.v3[] == orig(this.v3[])
this.v4 == orig(this.v4)
this.v4[] == orig(this.v4[])
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.integrator.stepHandlers == orig(this.integrator.stepHandlers)
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.stepHandlers.getClass().getName())
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.eventsHandlersManager.states.getClass().getName())
this.integrator.stepSize == orig(this.integrator.stepSize)
this.integrator.eventsHandlersManager == orig(this.integrator.eventsHandlersManager)
this.integrator.eventsHandlersManager.states == orig(this.integrator.eventsHandlersManager.states)
this.integrator.eventsHandlersManager.states[] == orig(this.integrator.eventsHandlersManager.states[])
this.integrator.eventsHandlersManager.first == orig(this.integrator.eventsHandlersManager.first)
this.integrator.eventsHandlersManager.initialized == orig(this.integrator.eventsHandlersManager.initialized)
this.integrator.name == orig(this.integrator.name)
this.integrator.name.toString == orig(this.integrator.name.toString)
this.integrator.maxEvaluations == orig(this.integrator.maxEvaluations)
this.integrator.evaluations == orig(this.integrator.evaluations)
this.integrator.equations == orig(this.integrator.equations)
this.integrator.equations.getClass().getName() == orig(this.integrator.equations.getClass().getName())
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.forward == orig(this.forward)
this.vectorsInitialized == false
this.finalized == false
this.dirtyState == true
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest$1:::OBJECT
this has only one value
org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest.this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest$1.(org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest):::ENTER
org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest.this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest$1.(org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest):::EXIT
org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest.this == orig(org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest.this)
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest$1.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::ENTER
interpolator has only one value
interpolator.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator.class
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest$1.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::EXIT
org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest.this == orig(org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest.this)
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest$1.requiresDenseOutput():::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest$1.requiresDenseOutput():::EXIT
org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest.this == orig(org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest.this)
return == true
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest$1.requiresDenseOutput():::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest$1.reset():::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest$1.reset():::EXIT
org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest.this == orig(org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest.this)
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest:::OBJECT
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest.DormandPrince54StepInterpolatorTest():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest.checkClone():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest.checkClone():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest.derivativesConsistency():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest.derivativesConsistency():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest.serialization():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest.serialization():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator:::CLASS
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.METHOD_NAME has only one value
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.METHOD_NAME != null
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.METHOD_NAME.toString == "Dormand-Prince 8 (5, 3)"
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_C has only one value
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_C != null
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_C[] == [0.05260015195876774, 0.0789002279381516, 0.1183503419072274, 0.28164965809277265, 0.3333333333333333, 0.25, 0.3076923076923077, 0.6512820512820513, 0.6, 0.8571428571428571, 1.0, 1.0]
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_C[] elements <= 1.0
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_C[] elements >= 0.05260015195876774
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A has only one value
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A != null
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A.getClass().getName() == double[][].class
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A[] contains no nulls and has only one value, of length 12
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A[] elements != null
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_B has only one value
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_B != null
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_B[] == [0.054293734116568765, 0.0, 0.0, 0.0, 0.0, 4.450312892752409, 1.8915178993145003, -5.801203960010585, 0.3111643669578199, -0.1521609496625161, 0.20136540080403034, 0.04471061572777259, 0.0]
size(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_C[]) == 12
size(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A[]) == 12
size(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_B[]) == 13
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator:::OBJECT
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A.getClass().getName() == this.a.getClass().getName()
this.stepHandlers.getClass().getName() == this.eventsHandlersManager.states.getClass().getName()
this.fsal == true
this.c has only one value
this.c != null
this.c[] == [0.05260015195876774, 0.0789002279381516, 0.1183503419072274, 0.28164965809277265, 0.3333333333333333, 0.25, 0.3076923076923077, 0.6512820512820513, 0.6, 0.8571428571428571, 1.0, 1.0]
this.c[] elements <= 1.0
this.c[] elements >= 0.05260015195876774
this.a has only one value
this.a != null
this.a[] contains no nulls and has only one value, of length 12
this.a[] elements != null
this.b has only one value
this.b != null
this.b[] == [0.054293734116568765, 0.0, 0.0, 0.0, 0.0, 4.450312892752409, 1.8915178993145003, -5.801203960010585, 0.3111643669578199, -0.1521609496625161, 0.20136540080403034, 0.04471061572777259, 0.0]
this.prototype != null
this.prototype.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.class
this.prototype.yDotK == null
this.prototype.integrator == null
this.prototype.previousTime == Double.NaN
this.prototype.currentTime == Double.NaN
this.prototype.h == Double.NaN
this.prototype.currentState == null
this.prototype.interpolatedTime == Double.NaN
this.prototype.interpolatedState == null
this.prototype.interpolatedDerivatives == null
this.prototype.forward == true
this.prototype.dirtyState == true
this.exp one of { -0.125, 0.0 }
this.safety one of { 0.0, 0.9 }
this.minReduction one of { 0.0, 0.2 }
this.maxGrowth one of { 0.0, 10.0 }
this.vecAbsoluteTolerance == null
this.vecRelativeTolerance == null
this.initialStep == -1.0
this.minStep >= 0.0
this.stepHandlers != null
this.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.eventsHandlersManager != null
this.eventsHandlersManager.states != null
this.eventsHandlersManager.states[] elements != null
this.eventsHandlersManager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.name has only one value
this.name != null
this.name.toString == "Dormand-Prince 8 (5, 3)"
this.maxEvaluations == 2147483647
this.evaluations >= 0
size(this.c[]) == 12
size(this.a[]) == 12
size(this.b[]) == 13
size(this.eventsHandlersManager.states[]) one of { 0, 1, 2 }
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A.getClass().getName() != this.prototype.getClass().getName()
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A.getClass().getName() != this.stepHandlers.getClass().getName()
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A.getClass().getName() != this.equations.getClass().getName()
this.prototype.getClass().getName() != this.stepHandlers.getClass().getName()
this.prototype.getClass().getName() != this.equations.getClass().getName()
this.stepHandlers.getClass().getName() != this.equations.getClass().getName()
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.DormandPrince853Integrator(double, double, double, double):::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.DormandPrince853Integrator(double, double, double, double):::EXIT
this.prototype.finalized == false
this.exp == -0.125
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 10.0
this.stepStart == Double.NaN
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.evaluations == 0
this.equations == null
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.estimateError(double[][], double[], double[], double):::ENTER
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A.getClass().getName() == yDotK.getClass().getName()
this.exp == -0.125
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 10.0
this.stepSize != 0
this.equations != null
yDotK != null
yDotK[] elements != null
y0 != null
y1 != null
h != 0
size(yDotK[]) == 13
size(y0[]) one of { 1, 2, 4 }
size(y1[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.estimateError(double[][], double[], double[], double):::EXIT
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.METHOD_NAME == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.METHOD_NAME)
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.METHOD_NAME.toString == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.METHOD_NAME.toString)
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_C == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_C)
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_C[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_C[])
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A)
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A.getClass().getName() == orig(this.a.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A.getClass().getName() == orig(yDotK.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A[])
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_B == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_B)
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_B[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_B[])
this.fsal == orig(this.fsal)
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.integrator == orig(this.prototype.integrator)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.interpolatedDerivatives == orig(this.prototype.interpolatedDerivatives)
this.prototype.finalized == orig(this.prototype.finalized)
this.prototype.forward == orig(this.prototype.forward)
this.prototype.dirtyState == orig(this.prototype.dirtyState)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.minReduction == orig(this.minReduction)
this.maxGrowth == orig(this.maxGrowth)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepHandlers.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
yDotK[] == orig(yDotK[])
y0[] == orig(y0[])
y1[] == orig(y1[])
this.exp == -0.125
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 10.0
this.stepSize != 0
this.equations != null
yDotK[] elements != null
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.getOrder():::ENTER
this.evaluations one of { 0, 1 }
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.getOrder():::EXIT
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.METHOD_NAME == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.METHOD_NAME)
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.METHOD_NAME.toString == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.METHOD_NAME.toString)
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_C == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_C)
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_C[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_C[])
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A)
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A.getClass().getName() == orig(this.a.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_A[])
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_B == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_B)
org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_B[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.STATIC_B[])
this.fsal == orig(this.fsal)
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.integrator == orig(this.prototype.integrator)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.interpolatedDerivatives == orig(this.prototype.interpolatedDerivatives)
this.prototype.finalized == orig(this.prototype.finalized)
this.prototype.forward == orig(this.prototype.forward)
this.prototype.dirtyState == orig(this.prototype.dirtyState)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.minReduction == orig(this.minReduction)
this.maxGrowth == orig(this.maxGrowth)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepHandlers.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.evaluations one of { 0, 1 }
return == 8
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest$InterpolatingStepHandler:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest$InterpolatingStepHandler.InterpolatingStepHandler():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest$InterpolatingStepHandler.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::ENTER
interpolator has only one value
interpolator.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.class
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest$InterpolatingStepHandler.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest$InterpolatingStepHandler.requiresDenseOutput():::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest$InterpolatingStepHandler.requiresDenseOutput():::EXIT
return == true
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest$InterpolatingStepHandler.requiresDenseOutput():::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest$InterpolatingStepHandler.reset():::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest$InterpolatingStepHandler.reset():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest$KeplerHandler:::OBJECT
this has only one value
this.nbSteps >= 0
this.pb has only one value
this.pb.e == 0.9
this.pb.y has only one value
this.pb.n == 4
this.pb.calls >= 0
this.pb.t0 == 0.0
this.pb.y0 has only one value
this.pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
this.pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
this.pb.t1 == 20.0
this.pb.errorScale has only one value
this.pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
this.pb.errorScale[] elements == 1.0
size(this.pb.y[]) == 4
size(this.pb.y0[]) == 4
size(this.pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest$KeplerHandler.KeplerHandler(org.apache.commons.math.ode.TestProblem3):::ENTER
pb has only one value
pb.e == 0.9
pb.y has only one value
pb.y[] == [0.0, 0.0, 0.0, 0.0]
pb.y[] elements == 0.0
pb.n == 4
pb.calls == 0
pb.t0 == 0.0
pb.y0 has only one value
pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
pb.t1 == 20.0
pb.errorScale has only one value
pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
pb.errorScale[] elements == 1.0
size(pb.y[]) == 4
size(pb.y0[]) == 4
size(pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest$KeplerHandler.KeplerHandler(org.apache.commons.math.ode.TestProblem3):::EXIT
pb.e == orig(pb.e)
pb.y == orig(pb.y)
pb.y[] == orig(pb.y[])
pb.n == orig(pb.n)
pb.calls == orig(pb.calls)
pb.t0 == orig(pb.t0)
pb.y0 == orig(pb.y0)
pb.y0[] == orig(pb.y0[])
pb.t1 == orig(pb.t1)
pb.errorScale == orig(pb.errorScale)
pb.errorScale[] == orig(pb.errorScale[])
this.nbSteps == 0
this.maxError == 0.0
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
pb.e == 0.9
pb.y has only one value
pb.y[] == [0.0, 0.0, 0.0, 0.0]
pb.y[] elements == 0.0
pb.n == 4
pb.calls == 0
pb.t0 == 0.0
pb.y0 has only one value
pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
pb.t1 == 20.0
pb.errorScale has only one value
pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
pb.errorScale[] elements == 1.0
size(pb.y[]) == 4
size(pb.y0[]) == 4
size(pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest$KeplerHandler.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::ENTER
this.maxError == 0.0
interpolator has only one value
interpolator.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.class
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest$KeplerHandler.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::EXIT
this.pb == orig(this.pb)
this.pb.e == orig(this.pb.e)
this.pb.y == orig(this.pb.y)
this.pb.n == orig(this.pb.n)
this.pb.t0 == orig(this.pb.t0)
this.pb.y0 == orig(this.pb.y0)
this.pb.y0[] == orig(this.pb.y0[])
this.pb.t1 == orig(this.pb.t1)
this.pb.errorScale == orig(this.pb.errorScale)
this.pb.errorScale[] == orig(this.pb.errorScale[])
size(this.pb.y[]) == orig(size(this.pb.y[]))
this.pb.y[] elements != 0
this.nbSteps - orig(this.nbSteps) - 1 == 0
orig(this.maxError) % this.maxError == 0
this.maxError >= orig(this.maxError)
this.pb.calls - orig(this.pb.calls) - 3 == 0
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest$KeplerHandler.requiresDenseOutput():::ENTER
this.nbSteps == 0
this.maxError == 0.0
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest$KeplerHandler.requiresDenseOutput():::EXIT
this.nbSteps == orig(this.nbSteps)
this.maxError == orig(this.maxError)
this.pb == orig(this.pb)
this.pb.e == orig(this.pb.e)
this.pb.y == orig(this.pb.y)
this.pb.y[] == orig(this.pb.y[])
this.pb.n == orig(this.pb.n)
this.pb.calls == orig(this.pb.calls)
this.pb.t0 == orig(this.pb.t0)
this.pb.y0 == orig(this.pb.y0)
this.pb.y0[] == orig(this.pb.y0[])
this.pb.t1 == orig(this.pb.t1)
this.pb.errorScale == orig(this.pb.errorScale)
this.pb.errorScale[] == orig(this.pb.errorScale[])
this.nbSteps == 0
this.maxError == 0.0
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
return == true
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest$KeplerHandler.requiresDenseOutput():::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest$KeplerHandler.reset():::ENTER
this.nbSteps == 0
this.maxError == 0.0
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest$KeplerHandler.reset():::EXIT
this.nbSteps == orig(this.nbSteps)
this.maxError == orig(this.maxError)
this.pb == orig(this.pb)
this.pb.e == orig(this.pb.e)
this.pb.y == orig(this.pb.y)
this.pb.y[] == orig(this.pb.y[])
this.pb.n == orig(this.pb.n)
this.pb.calls == orig(this.pb.calls)
this.pb.t0 == orig(this.pb.t0)
this.pb.y0 == orig(this.pb.y0)
this.pb.y0[] == orig(this.pb.y0[])
this.pb.t1 == orig(this.pb.t1)
this.pb.errorScale == orig(this.pb.errorScale)
this.pb.errorScale[] == orig(this.pb.errorScale[])
this.nbSteps == 0
this.maxError == 0.0
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest$VariableHandler:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest$VariableHandler.VariableHandler():::EXIT
this.firstTime == true
this.minStep == 0.0
this.maxStep == 0.0
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest$VariableHandler.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::ENTER
interpolator has only one value
interpolator.getClass().getName() == org.apache.commons.math.ode.sampling.DummyStepInterpolator.class
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest$VariableHandler.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::EXIT
this.firstTime == false
this.minStep one of { 0.007574481973407821, 0.007642558010058293, 0.00843952776559862 }
this.maxStep >= orig(this.maxStep)
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest$VariableHandler.requiresDenseOutput():::ENTER
this.firstTime == true
this.minStep == 0.0
this.maxStep == 0.0
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest$VariableHandler.requiresDenseOutput():::EXIT
this.firstTime == orig(this.firstTime)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.firstTime == true
this.minStep == 0.0
this.maxStep == 0.0
return == false
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest$VariableHandler.requiresDenseOutput():::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest$VariableHandler.reset():::ENTER
this.firstTime == true
this.minStep == 0.0
this.maxStep == 0.0
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest$VariableHandler.reset():::EXIT
this.firstTime == orig(this.firstTime)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.firstTime == true
this.minStep == 0.0
this.maxStep == 0.0
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest:::OBJECT
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.DormandPrince853IntegratorTest(java.lang.String):::ENTER
name != null
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.DormandPrince853IntegratorTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.suite():::EXIT
return.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.testBackward():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.testBackward():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.testIncreasingTolerance():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.testIncreasingTolerance():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.testKepler():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.testKepler():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.testNoDenseOutput():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.testNoDenseOutput():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.testVariableSteps():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.testVariableSteps():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator:::CLASS
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D has only one value
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D != null
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == double[][].class
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[] contains no nulls and has only one value, of length 4
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[] elements != null
size(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator:::OBJECT
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == this.yDotKLast.getClass().getName()
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == this.v.getClass().getName()
this.yDotKLast.getClass().getName() == this.v.getClass().getName()
this.yDotKLast.getClass().getName() == this.yDotK.getClass().getName()
this.integrator.stepHandlers.getClass().getName() == this.integrator.eventsHandlersManager.states.getClass().getName()
this.yDotKLast.getClass().getName() == double[][].class
this.yDotKLast[] elements != null
this.v.getClass().getName() == double[][].class
this.v[] elements != null
this.yDotK[] elements != null
this.integrator.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.class
this.integrator.stepHandlers != null
this.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.integrator.eventsHandlersManager != null
this.integrator.eventsHandlersManager.states != null
this.integrator.eventsHandlersManager.states[] elements != null
this.integrator.eventsHandlersManager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
this.integrator.eventsHandlersManager.first == null
this.integrator.eventsHandlersManager.initialized == false
this.integrator.name has only one value
this.integrator.name != null
this.integrator.name.toString == "Dormand-Prince 8 (5, 3)"
this.integrator.maxEvaluations == 2147483647
this.integrator.evaluations >= 0
this.integrator.equations != null
this.h != 0
size(this.yDotKLast[]) == 3
size(this.v[]) == 7
size(this.yDotK[]) == 13
size(this.integrator.eventsHandlersManager.states[]) one of { 0, 1, 2 }
size(this.currentState[]) one of { 1, 2, 4 }
size(this.interpolatedState[]) one of { 1, 2, 4 }
size(this.interpolatedDerivatives[]) one of { 1, 2, 4 }
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() != this.integrator.getClass().getName()
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() != this.integrator.stepHandlers.getClass().getName()
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() != this.integrator.equations.getClass().getName()
this.yDotKLast.getClass().getName() != this.integrator.getClass().getName()
this.yDotKLast.getClass().getName() != this.integrator.stepHandlers.getClass().getName()
this.yDotKLast.getClass().getName() != this.integrator.equations.getClass().getName()
this.v.getClass().getName() != this.integrator.getClass().getName()
this.v.getClass().getName() != this.integrator.stepHandlers.getClass().getName()
this.v.getClass().getName() != this.integrator.equations.getClass().getName()
this.integrator.getClass().getName() != this.integrator.stepHandlers.getClass().getName()
this.integrator.getClass().getName() != this.integrator.equations.getClass().getName()
this.integrator.stepHandlers.getClass().getName() != this.integrator.equations.getClass().getName()
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.DormandPrince853StepInterpolator():::EXIT
this.yDotKLast == null
this.v == null
this.vectorsInitialized == false
this.yDotK == null
this.integrator == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.finalized == false
this.forward == true
this.dirtyState == true
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.DormandPrince853StepInterpolator(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator):::ENTER
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == interpolator.yDotKLast.getClass().getName()
interpolator.yDotKLast.getClass().getName() == interpolator.v.getClass().getName()
interpolator.yDotKLast.getClass().getName() == interpolator.yDotK.getClass().getName()
interpolator != null
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D has only one value
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D != null
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == double[][].class
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[] contains no nulls and has only one value, of length 4
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[] elements != null
interpolator.yDotKLast.getClass().getName() == double[][].class
interpolator.yDotKLast[] elements != null
interpolator.v[] elements != null
interpolator.yDotK[] elements != null
interpolator.integrator.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.class
interpolator.integrator.stepHandlers != null
interpolator.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.stepSize != 0
interpolator.integrator.eventsHandlersManager != null
interpolator.integrator.name has only one value
interpolator.integrator.name != null
interpolator.integrator.name.toString == "Dormand-Prince 8 (5, 3)"
interpolator.integrator.maxEvaluations == 2147483647
interpolator.integrator.equations != null
interpolator.h != 0
interpolator.finalized == true
size(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[]) == 4
size(interpolator.yDotKLast[]) == 3
size(interpolator.v[]) == 7
size(interpolator.yDotK[]) == 13
size(interpolator.currentState[]) one of { 2, 4 }
size(interpolator.interpolatedState[]) one of { 2, 4 }
size(interpolator.interpolatedDerivatives[]) one of { 2, 4 }
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() != interpolator.integrator.getClass().getName()
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() != interpolator.integrator.stepHandlers.getClass().getName()
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() != interpolator.integrator.equations.getClass().getName()
interpolator.yDotKLast.getClass().getName() != interpolator.integrator.getClass().getName()
interpolator.yDotKLast.getClass().getName() != interpolator.integrator.stepHandlers.getClass().getName()
interpolator.yDotKLast.getClass().getName() != interpolator.integrator.equations.getClass().getName()
interpolator.integrator.getClass().getName() != interpolator.integrator.stepHandlers.getClass().getName()
interpolator.integrator.getClass().getName() != interpolator.integrator.equations.getClass().getName()
interpolator.integrator.stepHandlers.getClass().getName() != interpolator.integrator.equations.getClass().getName()
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.DormandPrince853StepInterpolator(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator):::EXIT
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D)
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[])
this.yDotKLast.getClass().getName() == interpolator.yDotKLast.getClass().getName()
this.yDotKLast.getClass().getName() == interpolator.v.getClass().getName()
this.yDotKLast.getClass().getName() == interpolator.yDotK.getClass().getName()
this.yDotKLast.getClass().getName() == orig(interpolator.yDotKLast.getClass().getName())
this.yDotKLast.getClass().getName() == orig(interpolator.v.getClass().getName())
this.yDotKLast.getClass().getName() == orig(interpolator.yDotK.getClass().getName())
interpolator.yDotKLast == orig(interpolator.yDotKLast)
interpolator.yDotKLast[] == orig(interpolator.yDotKLast[])
interpolator.v == orig(interpolator.v)
interpolator.v[] == orig(interpolator.v[])
interpolator.vectorsInitialized == orig(interpolator.vectorsInitialized)
interpolator.yDotK == orig(interpolator.yDotK)
interpolator.yDotK[] == orig(interpolator.yDotK[])
interpolator.integrator == orig(interpolator.integrator)
interpolator.integrator.getClass().getName() == orig(interpolator.integrator.getClass().getName())
interpolator.integrator.stepHandlers == orig(interpolator.integrator.stepHandlers)
interpolator.integrator.stepHandlers.getClass().getName() == orig(interpolator.integrator.stepHandlers.getClass().getName())
interpolator.integrator.stepStart == orig(interpolator.integrator.stepStart)
interpolator.integrator.stepSize == orig(interpolator.integrator.stepSize)
interpolator.integrator.eventsHandlersManager == orig(interpolator.integrator.eventsHandlersManager)
interpolator.integrator.name == orig(interpolator.integrator.name)
interpolator.integrator.name.toString == orig(interpolator.integrator.name.toString)
interpolator.integrator.maxEvaluations == orig(interpolator.integrator.maxEvaluations)
interpolator.integrator.evaluations == orig(interpolator.integrator.evaluations)
interpolator.integrator.equations == orig(interpolator.integrator.equations)
interpolator.integrator.equations.getClass().getName() == orig(interpolator.integrator.equations.getClass().getName())
interpolator.currentState == orig(interpolator.currentState)
interpolator.currentState[] == orig(interpolator.currentState[])
interpolator.interpolatedState == orig(interpolator.interpolatedState)
interpolator.interpolatedState[] == orig(interpolator.interpolatedState[])
interpolator.interpolatedDerivatives == orig(interpolator.interpolatedDerivatives)
interpolator.interpolatedDerivatives[] == orig(interpolator.interpolatedDerivatives[])
interpolator.finalized == orig(interpolator.finalized)
interpolator.forward == orig(interpolator.forward)
interpolator.dirtyState == orig(interpolator.dirtyState)
this.integrator == null
this.finalized == true
interpolator.yDotKLast[] elements != null
interpolator.v[] elements != null
interpolator.yDotK[] elements != null
interpolator.integrator.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.class
interpolator.integrator.stepHandlers != null
interpolator.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.stepSize != 0
interpolator.integrator.eventsHandlersManager != null
interpolator.integrator.name has only one value
interpolator.integrator.name != null
interpolator.integrator.name.toString == "Dormand-Prince 8 (5, 3)"
interpolator.integrator.maxEvaluations == 2147483647
interpolator.integrator.equations != null
interpolator.h != 0
interpolator.finalized == true
size(this.currentState[]) one of { 2, 4 }
size(this.interpolatedState[]) one of { 2, 4 }
size(this.interpolatedDerivatives[]) one of { 2, 4 }
size(interpolator.yDotKLast[]) == 3
size(interpolator.v[]) == 7
size(interpolator.yDotK[]) == 13
size(interpolator.currentState[]) one of { 2, 4 }
size(interpolator.interpolatedState[]) one of { 2, 4 }
size(interpolator.interpolatedDerivatives[]) one of { 2, 4 }
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() != interpolator.integrator.getClass().getName()
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() != interpolator.integrator.stepHandlers.getClass().getName()
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() != interpolator.integrator.equations.getClass().getName()
this.yDotKLast.getClass().getName() != interpolator.integrator.getClass().getName()
this.yDotKLast.getClass().getName() != interpolator.integrator.stepHandlers.getClass().getName()
this.yDotKLast.getClass().getName() != interpolator.integrator.equations.getClass().getName()
interpolator.integrator.getClass().getName() != interpolator.integrator.stepHandlers.getClass().getName()
interpolator.integrator.getClass().getName() != interpolator.integrator.equations.getClass().getName()
interpolator.integrator.stepHandlers.getClass().getName() != interpolator.integrator.equations.getClass().getName()
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::ENTER
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == this.yDotK.getClass().getName()
this.yDotKLast != null
this.yDotK != null
this.integrator.stepSize != 0
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.dirtyState == true
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::EXIT
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D)
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == this.yDotK.getClass().getName()
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == orig(this.yDotKLast.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == orig(this.v.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == orig(this.yDotK.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[])
this.yDotKLast == orig(this.yDotKLast)
this.yDotKLast[] == orig(this.yDotKLast[])
this.yDotK == orig(this.yDotK)
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.integrator.stepHandlers == orig(this.integrator.stepHandlers)
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.stepHandlers.getClass().getName())
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.eventsHandlersManager.states.getClass().getName())
this.integrator.stepStart == orig(this.integrator.stepStart)
this.integrator.stepSize == orig(this.integrator.stepSize)
this.integrator.eventsHandlersManager == orig(this.integrator.eventsHandlersManager)
this.integrator.eventsHandlersManager.states == orig(this.integrator.eventsHandlersManager.states)
this.integrator.eventsHandlersManager.states[] == orig(this.integrator.eventsHandlersManager.states[])
this.integrator.eventsHandlersManager.first == orig(this.integrator.eventsHandlersManager.first)
this.integrator.eventsHandlersManager.initialized == orig(this.integrator.eventsHandlersManager.initialized)
this.integrator.name == orig(this.integrator.name)
this.integrator.name.toString == orig(this.integrator.name.toString)
this.integrator.maxEvaluations == orig(this.integrator.maxEvaluations)
this.integrator.equations == orig(this.integrator.equations)
this.integrator.equations.getClass().getName() == orig(this.integrator.equations.getClass().getName())
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
size(this.interpolatedState[]) == orig(size(this.interpolatedState[]))
size(this.interpolatedDerivatives[]) == orig(size(this.interpolatedDerivatives[]))
this.yDotKLast != null
this.v != null
this.vectorsInitialized == true
this.yDotK != null
this.integrator.stepSize != 0
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.finalized == true
this.dirtyState == true
this.v[] == orig(this.v[]) (elementwise)
this.integrator.getClass().getName() != orig(this.v.getClass().getName())
this.integrator.stepHandlers.getClass().getName() != orig(this.v.getClass().getName())
this.integrator.evaluations >= orig(this.integrator.evaluations)
this.integrator.equations.getClass().getName() != orig(this.v.getClass().getName())
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.doCopy():::ENTER
this.integrator.stepSize != 0
this.integrator.eventsHandlersManager.states[] == []
this.integrator.eventsHandlersManager.states[].getClass().getName() == []
this.finalized == true
size(this.currentState[]) one of { 2, 4 }
size(this.interpolatedState[]) one of { 2, 4 }
size(this.interpolatedDerivatives[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.doCopy():::EXIT
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D)
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[])
this.yDotKLast == orig(this.yDotKLast)
this.yDotKLast.getClass().getName() == orig(this.yDotKLast.getClass().getName())
this.yDotKLast.getClass().getName() == orig(this.v.getClass().getName())
this.yDotKLast.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotKLast[] == orig(this.yDotKLast[])
this.v == orig(this.v)
this.v[] == orig(this.v[])
this.vectorsInitialized == orig(this.vectorsInitialized)
this.yDotK == orig(this.yDotK)
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.integrator.stepHandlers == orig(this.integrator.stepHandlers)
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.stepHandlers.getClass().getName())
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.eventsHandlersManager.states.getClass().getName())
this.integrator.stepStart == orig(this.integrator.stepStart)
this.integrator.stepSize == orig(this.integrator.stepSize)
this.integrator.eventsHandlersManager == orig(this.integrator.eventsHandlersManager)
this.integrator.eventsHandlersManager.states == orig(this.integrator.eventsHandlersManager.states)
this.integrator.eventsHandlersManager.states[] == orig(this.integrator.eventsHandlersManager.states[])
this.integrator.eventsHandlersManager.first == orig(this.integrator.eventsHandlersManager.first)
this.integrator.eventsHandlersManager.initialized == orig(this.integrator.eventsHandlersManager.initialized)
this.integrator.name == orig(this.integrator.name)
this.integrator.name.toString == orig(this.integrator.name.toString)
this.integrator.maxEvaluations == orig(this.integrator.maxEvaluations)
this.integrator.evaluations == orig(this.integrator.evaluations)
this.integrator.equations == orig(this.integrator.equations)
this.integrator.equations.getClass().getName() == orig(this.integrator.equations.getClass().getName())
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.integrator.stepSize != 0
this.integrator.eventsHandlersManager.states[] == []
this.integrator.eventsHandlersManager.states[].getClass().getName() == []
this.finalized == true
return != null
return.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.class
size(this.currentState[]) one of { 2, 4 }
size(this.interpolatedState[]) one of { 2, 4 }
size(this.interpolatedDerivatives[]) one of { 2, 4 }
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() != return.getClass().getName()
this.yDotKLast.getClass().getName() != return.getClass().getName()
this.integrator.getClass().getName() != return.getClass().getName()
this.integrator.stepHandlers.getClass().getName() != return.getClass().getName()
this.integrator.equations.getClass().getName() != return.getClass().getName()
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.doFinalize():::ENTER
this.vectorsInitialized == false
this.integrator.stepSize != 0
this.finalized == false
this.dirtyState == true
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.doFinalize():::EXIT394
this.yDotKLast == null
this.v == null
this.yDotK == null
this.integrator == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.forward == true
orig(this.previousTime) == Double.NaN
orig(this.currentTime) == Double.NaN
orig(this.h) == Double.NaN
orig(this.interpolatedTime) == Double.NaN
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.doFinalize():::EXIT429
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == this.v.getClass().getName()
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == this.yDotK.getClass().getName()
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == orig(this.yDotKLast.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == orig(this.v.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == orig(this.yDotK.getClass().getName())
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.interpolatedTime == orig(this.interpolatedTime)
this.yDotKLast != null
this.v != null
this.yDotK != null
this.integrator != null
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.doFinalize():::EXIT
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D)
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[])
this.yDotKLast == orig(this.yDotKLast)
this.yDotKLast.getClass().getName() == orig(this.yDotKLast.getClass().getName())
this.yDotKLast.getClass().getName() == orig(this.v.getClass().getName())
this.yDotKLast.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotKLast[] == orig(this.yDotKLast[])
this.v == orig(this.v)
this.v[] == orig(this.v[])
this.vectorsInitialized == orig(this.vectorsInitialized)
this.yDotK == orig(this.yDotK)
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.integrator.stepHandlers == orig(this.integrator.stepHandlers)
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.stepHandlers.getClass().getName())
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.eventsHandlersManager.states.getClass().getName())
this.integrator.stepStart == orig(this.integrator.stepStart)
this.integrator.stepSize == orig(this.integrator.stepSize)
this.integrator.eventsHandlersManager == orig(this.integrator.eventsHandlersManager)
this.integrator.eventsHandlersManager.states == orig(this.integrator.eventsHandlersManager.states)
this.integrator.eventsHandlersManager.states[] == orig(this.integrator.eventsHandlersManager.states[])
this.integrator.eventsHandlersManager.first == orig(this.integrator.eventsHandlersManager.first)
this.integrator.eventsHandlersManager.initialized == orig(this.integrator.eventsHandlersManager.initialized)
this.integrator.name == orig(this.integrator.name)
this.integrator.name.toString == orig(this.integrator.name.toString)
this.integrator.maxEvaluations == orig(this.integrator.maxEvaluations)
this.integrator.equations == orig(this.integrator.equations)
this.integrator.equations.getClass().getName() == orig(this.integrator.equations.getClass().getName())
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
(this.yDotKLast != null)  <==>  (this.currentState != null)
(this.yDotKLast != null)  <==>  (this.currentTime == orig(this.currentTime))
(this.yDotKLast != null)  <==>  (this.h == orig(this.h))
(this.yDotKLast != null)  <==>  (this.integrator != null)
(this.yDotKLast != null)  <==>  (this.interpolatedDerivatives != null)
(this.yDotKLast != null)  <==>  (this.interpolatedState != null)
(this.yDotKLast != null)  <==>  (this.interpolatedTime == orig(this.interpolatedTime))
(this.yDotKLast != null)  <==>  (this.previousTime == orig(this.previousTime))
(this.yDotKLast != null)  <==>  (this.v != null)
(this.yDotKLast != null)  <==>  (this.yDotK != null)
(this.yDotKLast != null)  ==>  (org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() != this.integrator.equations.getClass().getName())
(this.yDotKLast != null)  ==>  (org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() != this.integrator.getClass().getName())
(this.yDotKLast != null)  ==>  (org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() != this.integrator.stepHandlers.getClass().getName())
(this.yDotKLast != null)  ==>  (org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == this.yDotKLast.getClass().getName())
(this.yDotKLast != null)  ==>  (size(this.currentState[]) one of { 1, 2, 4 })
(this.yDotKLast != null)  ==>  (size(this.integrator.eventsHandlersManager.states[]) one of { 0, 1, 2 })
(this.yDotKLast != null)  ==>  (size(this.interpolatedDerivatives[]) one of { 1, 2, 4 })
(this.yDotKLast != null)  ==>  (size(this.interpolatedState[]) one of { 1, 2, 4 })
(this.yDotKLast != null)  ==>  (this.integrator.equations != null)
(this.yDotKLast != null)  ==>  (this.integrator.evaluations - orig(this.integrator.evaluations) - 3 == 0)
(this.yDotKLast != null)  ==>  (this.integrator.eventsHandlersManager != null)
(this.yDotKLast != null)  ==>  (this.integrator.eventsHandlersManager.first == null)
(this.yDotKLast != null)  ==>  (this.integrator.eventsHandlersManager.states != null)
(this.yDotKLast != null)  ==>  (this.integrator.eventsHandlersManager.states[] elements != null)
(this.yDotKLast != null)  ==>  (this.integrator.eventsHandlersManager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class)
(this.yDotKLast != null)  ==>  (this.integrator.getClass().getName() != this.integrator.equations.getClass().getName())
(this.yDotKLast != null)  ==>  (this.integrator.getClass().getName() != this.integrator.stepHandlers.getClass().getName())
(this.yDotKLast != null)  ==>  (this.integrator.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.class)
(this.yDotKLast != null)  ==>  (this.integrator.name != null)
(this.yDotKLast != null)  ==>  (this.integrator.name has only one value)
(this.yDotKLast != null)  ==>  (this.integrator.name.toString == "Dormand-Prince 8 (5, 3)")
(this.yDotKLast != null)  ==>  (this.integrator.stepHandlers != null)
(this.yDotKLast != null)  ==>  (this.integrator.stepHandlers.getClass().getName() != this.integrator.equations.getClass().getName())
(this.yDotKLast != null)  ==>  (this.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class)
(this.yDotKLast != null)  ==>  (this.integrator.stepSize != 0)
(this.yDotKLast != null)  ==>  (this.v[] elements != null)
(this.yDotKLast != null)  ==>  (this.yDotKLast.getClass().getName() != this.integrator.equations.getClass().getName())
(this.yDotKLast != null)  ==>  (this.yDotKLast.getClass().getName() != this.integrator.getClass().getName())
(this.yDotKLast != null)  ==>  (this.yDotKLast.getClass().getName() != this.integrator.stepHandlers.getClass().getName())
(this.yDotKLast != null)  ==>  (this.yDotKLast.getClass().getName() == double[][].class)
(this.yDotKLast != null)  ==>  (this.yDotKLast[] elements != null)
(this.yDotKLast != null)  ==>  (this.yDotK[] elements != null)
(this.yDotKLast == null)  <==>  (this.currentState == null)
(this.yDotKLast == null)  <==>  (this.currentTime != orig(this.currentTime))
(this.yDotKLast == null)  <==>  (this.h != orig(this.h))
(this.yDotKLast == null)  <==>  (this.integrator == null)
(this.yDotKLast == null)  <==>  (this.interpolatedDerivatives == null)
(this.yDotKLast == null)  <==>  (this.interpolatedState == null)
(this.yDotKLast == null)  <==>  (this.interpolatedTime != orig(this.interpolatedTime))
(this.yDotKLast == null)  <==>  (this.previousTime != orig(this.previousTime))
(this.yDotKLast == null)  <==>  (this.v == null)
(this.yDotKLast == null)  <==>  (this.yDotK == null)
(this.yDotKLast == null)  ==>  (orig(this.currentTime) == Double.NaN)
(this.yDotKLast == null)  ==>  (orig(this.h) == Double.NaN)
(this.yDotKLast == null)  ==>  (orig(this.interpolatedTime) == Double.NaN)
(this.yDotKLast == null)  ==>  (orig(this.previousTime) == Double.NaN)
(this.yDotKLast == null)  ==>  (this.currentTime == Double.NaN)
(this.yDotKLast == null)  ==>  (this.forward == true)
(this.yDotKLast == null)  ==>  (this.h == Double.NaN)
(this.yDotKLast == null)  ==>  (this.interpolatedTime == Double.NaN)
(this.yDotKLast == null)  ==>  (this.previousTime == Double.NaN)
this.vectorsInitialized == false
this.integrator.stepSize != 0
this.finalized == false
this.dirtyState == true
this.integrator.evaluations - orig(this.integrator.evaluations) - 3 == 0
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.readExternal(java.io.ObjectInput):::ENTER
this.yDotKLast == null
this.v == null
this.vectorsInitialized == false
this.yDotK == null
this.integrator == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.finalized == false
this.forward == true
this.dirtyState == true
in has only one value
in != null
in.getClass().getName() == java.io.ObjectInputStream.class
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() != in.getClass().getName()
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.readExternal(java.io.ObjectInput):::EXIT
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D)
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == this.yDotK.getClass().getName()
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[])
this.v == orig(this.v)
this.vectorsInitialized == orig(this.vectorsInitialized)
this.integrator == orig(this.integrator)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.yDotKLast != null
this.v == null
this.vectorsInitialized == false
this.yDotK != null
this.integrator == null
this.currentState != null
this.currentState[] elements != 0
this.interpolatedState != null
this.interpolatedState[] == [0.0, 0.0, 0.0, 0.0]
this.interpolatedState[] elements == 0.0
this.interpolatedDerivatives != null
this.interpolatedDerivatives[] == [0.0, 0.0, 0.0, 0.0]
this.interpolatedDerivatives[] elements == 0.0
this.finalized == true
this.forward == true
this.dirtyState == true
size(this.currentState[]) == 4
size(this.interpolatedState[]) == 4
size(this.interpolatedDerivatives[]) == 4
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() != orig(in.getClass().getName())
this.previousTime != orig(this.previousTime)
this.currentTime != orig(this.currentTime)
this.h != orig(this.h)
this.interpolatedTime != orig(this.interpolatedTime)
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.reinitialize(org.apache.commons.math.ode.AbstractIntegrator, double[], double[][], boolean):::ENTER
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == yDotK.getClass().getName()
integrator.stepHandlers.getClass().getName() == integrator.eventsHandlersManager.states.getClass().getName()
this.yDotKLast == null
this.v == null
this.vectorsInitialized == false
this.yDotK == null
this.integrator == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.finalized == true
this.forward == true
this.dirtyState == true
integrator != null
integrator.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator.class
integrator.stepHandlers != null
integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
integrator.stepStart == Double.NaN
integrator.eventsHandlersManager != null
integrator.eventsHandlersManager.states != null
integrator.eventsHandlersManager.states[] elements != null
integrator.eventsHandlersManager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
integrator.eventsHandlersManager.first == null
integrator.eventsHandlersManager.initialized == false
integrator.name has only one value
integrator.name != null
integrator.name.toString == "Dormand-Prince 8 (5, 3)"
integrator.maxEvaluations == 2147483647
integrator.evaluations == 0
integrator.equations != null
y != null
y[] elements == 0.0
y[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
yDotK != null
yDotK[] elements != null
size(integrator.eventsHandlersManager.states[]) one of { 0, 1, 2 }
size(y[]) one of { 1, 2, 4 }
size(yDotK[]) == 13
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() != integrator.getClass().getName()
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() != integrator.stepHandlers.getClass().getName()
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() != integrator.equations.getClass().getName()
integrator.getClass().getName() != integrator.stepHandlers.getClass().getName()
integrator.getClass().getName() != integrator.equations.getClass().getName()
integrator.stepHandlers.getClass().getName() != integrator.equations.getClass().getName()
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.reinitialize(org.apache.commons.math.ode.AbstractIntegrator, double[], double[][], boolean):::EXIT
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D)
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == this.yDotK.getClass().getName()
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == orig(yDotK.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[])
this.vectorsInitialized == orig(this.vectorsInitialized)
this.integrator.getClass().getName() == orig(integrator.getClass().getName())
this.integrator.stepHandlers.getClass().getName() == integrator.stepHandlers.getClass().getName()
this.integrator.eventsHandlersManager.states.getClass().getName() == integrator.stepHandlers.getClass().getName()
this.integrator.equations.getClass().getName() == integrator.equations.getClass().getName()
this.dirtyState == orig(this.dirtyState)
integrator.stepHandlers == orig(integrator.stepHandlers)
integrator.stepHandlers.getClass().getName() == integrator.eventsHandlersManager.states.getClass().getName()
integrator.stepHandlers.getClass().getName() == orig(integrator.stepHandlers.getClass().getName())
integrator.stepHandlers.getClass().getName() == orig(integrator.eventsHandlersManager.states.getClass().getName())
integrator.stepSize == orig(integrator.stepSize)
integrator.eventsHandlersManager == orig(integrator.eventsHandlersManager)
integrator.eventsHandlersManager.states == orig(integrator.eventsHandlersManager.states)
integrator.eventsHandlersManager.states[] == orig(integrator.eventsHandlersManager.states[])
integrator.eventsHandlersManager.first == orig(integrator.eventsHandlersManager.first)
integrator.eventsHandlersManager.initialized == orig(integrator.eventsHandlersManager.initialized)
integrator.name == orig(integrator.name)
integrator.name.toString == orig(integrator.name.toString)
integrator.maxEvaluations == orig(integrator.maxEvaluations)
integrator.evaluations == orig(integrator.evaluations)
integrator.equations == orig(integrator.equations)
integrator.equations.getClass().getName() == orig(integrator.equations.getClass().getName())
y[] == orig(y[])
yDotK[] == orig(yDotK[])
this.yDotKLast != null
this.v != null
this.vectorsInitialized == false
this.yDotK != null
this.integrator != null
this.integrator.stepStart == Double.NaN
this.integrator.evaluations == 0
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState != null
this.currentState[] elements == 0.0
this.currentState[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.interpolatedTime == Double.NaN
this.interpolatedState != null
this.interpolatedState[] elements == 0.0
this.interpolatedState[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.interpolatedDerivatives != null
this.interpolatedDerivatives[] elements == 0.0
this.interpolatedDerivatives[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.finalized == false
this.dirtyState == true
integrator.stepHandlers != null
integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
integrator.stepStart == Double.NaN
integrator.eventsHandlersManager != null
integrator.eventsHandlersManager.states != null
integrator.eventsHandlersManager.states[] elements != null
integrator.eventsHandlersManager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
integrator.eventsHandlersManager.first == null
integrator.eventsHandlersManager.initialized == false
integrator.name has only one value
integrator.name != null
integrator.name.toString == "Dormand-Prince 8 (5, 3)"
integrator.maxEvaluations == 2147483647
integrator.evaluations == 0
integrator.equations != null
y[] elements == 0.0
y[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
yDotK[] elements != null
size(integrator.eventsHandlersManager.states[]) one of { 0, 1, 2 }
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() != integrator.stepHandlers.getClass().getName()
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() != integrator.equations.getClass().getName()
this.integrator.getClass().getName() != integrator.stepHandlers.getClass().getName()
this.integrator.getClass().getName() != integrator.equations.getClass().getName()
integrator.stepHandlers.getClass().getName() != integrator.equations.getClass().getName()
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.storeTime(double):::ENTER
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == this.yDotK.getClass().getName()
this.yDotKLast != null
this.v != null
this.yDotK != null
this.integrator != null
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.storeTime(double):::EXIT
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D)
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == this.yDotK.getClass().getName()
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == orig(this.yDotKLast.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == orig(this.v.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == orig(this.yDotK.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[])
this.yDotKLast == orig(this.yDotKLast)
this.yDotKLast[] == orig(this.yDotKLast[])
this.v == orig(this.v)
this.v[] == orig(this.v[])
this.yDotK == orig(this.yDotK)
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.integrator.stepHandlers == orig(this.integrator.stepHandlers)
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.stepHandlers.getClass().getName())
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.eventsHandlersManager.states.getClass().getName())
this.integrator.stepSize == orig(this.integrator.stepSize)
this.integrator.eventsHandlersManager == orig(this.integrator.eventsHandlersManager)
this.integrator.eventsHandlersManager.states == orig(this.integrator.eventsHandlersManager.states)
this.integrator.eventsHandlersManager.states[] == orig(this.integrator.eventsHandlersManager.states[])
this.integrator.eventsHandlersManager.first == orig(this.integrator.eventsHandlersManager.first)
this.integrator.eventsHandlersManager.initialized == orig(this.integrator.eventsHandlersManager.initialized)
this.integrator.name == orig(this.integrator.name)
this.integrator.name.toString == orig(this.integrator.name.toString)
this.integrator.maxEvaluations == orig(this.integrator.maxEvaluations)
this.integrator.evaluations == orig(this.integrator.evaluations)
this.integrator.equations == orig(this.integrator.equations)
this.integrator.equations.getClass().getName() == orig(this.integrator.equations.getClass().getName())
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.forward == orig(this.forward)
this.yDotKLast != null
this.v != null
this.vectorsInitialized == false
this.yDotK != null
this.integrator != null
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.finalized == false
this.dirtyState == true
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.writeExternal(java.io.ObjectOutput):::ENTER
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == this.yDotK.getClass().getName()
this.yDotKLast != null
this.v != null
this.vectorsInitialized == false
this.yDotK != null
this.integrator == null
this.currentState != null
this.currentState[] elements != 0
this.interpolatedState != null
this.interpolatedState[] elements != 0
this.interpolatedDerivatives != null
this.finalized == true
this.forward == true
this.dirtyState == true
out has only one value
out != null
out.getClass().getName() == java.io.ObjectOutputStream.class
size(this.currentState[]) == 4
size(this.interpolatedState[]) == 4
size(this.interpolatedDerivatives[]) == 4
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() != out.getClass().getName()
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.writeExternal(java.io.ObjectOutput):::EXIT
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D)
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == this.yDotK.getClass().getName()
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == orig(this.yDotKLast.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == orig(this.v.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() == orig(this.yDotK.getClass().getName())
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[] == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D[])
this.yDotKLast == orig(this.yDotKLast)
this.yDotKLast[] == orig(this.yDotKLast[])
this.v == orig(this.v)
this.v[] == orig(this.v[])
this.vectorsInitialized == orig(this.vectorsInitialized)
this.yDotK == orig(this.yDotK)
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.yDotKLast != null
this.v != null
this.vectorsInitialized == false
this.yDotK != null
this.integrator == null
this.currentState != null
this.currentState[] elements != 0
this.interpolatedState != null
this.interpolatedState[] elements != 0
this.interpolatedDerivatives != null
this.finalized == true
this.forward == true
this.dirtyState == true
size(this.currentState[]) == 4
size(this.interpolatedState[]) == 4
size(this.interpolatedDerivatives[]) == 4
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.D.getClass().getName() != orig(out.getClass().getName())
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest$1:::OBJECT
this has only one value
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest.this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest$1.(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest):::ENTER
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest.this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest$1.(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest):::EXIT
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest.this == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest.this)
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest$1.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::ENTER
interpolator has only one value
interpolator.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator.class
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest$1.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::EXIT
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest.this == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest.this)
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest$1.requiresDenseOutput():::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest$1.requiresDenseOutput():::EXIT
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest.this == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest.this)
return == true
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest$1.requiresDenseOutput():::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest$1.reset():::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest$1.reset():::EXIT
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest.this == orig(org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest.this)
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest:::OBJECT
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest.DormandPrince853StepInterpolatorTest():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest.checklone():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest.checklone():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest.derivativesConsistency():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest.derivativesConsistency():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest.serialization():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest.serialization():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:::OBJECT
this.c != null
this.c[] one of { [0.05260015195876774, 0.0789002279381516, 0.1183503419072274, 0.28164965809277265, 0.3333333333333333, 0.25, 0.3076923076923077, 0.6512820512820513, 0.6, 0.8571428571428571, 1.0, 1.0], [0.2, 0.3, 0.8, 0.8888888888888888, 1.0, 1.0], [0.2222222222222222, 0.3333333333333333, 0.5, 0.6, 1.0, 1.0] }
this.c[] elements <= 1.0
this.a != null
this.a.getClass().getName() == double[][].class
this.a[] elements != null
this.b != null
this.b[] one of { [0.054293734116568765, 0.0, 0.0, 0.0, 0.0, 4.450312892752409, 1.8915178993145003, -5.801203960010585, 0.3111643669578199, -0.1521609496625161, 0.20136540080403034, 0.04471061572777259, 0.0], [0.08333333333333333, 0.0, 0.84375, -1.3333333333333333, 1.3020833333333333, 0.10416666666666667, 0.0], [0.09114583333333333, 0.0, 0.44923629829290207, 0.6510416666666666, -0.322376179245283, 0.13095238095238096, 0.0] }
this.prototype != null
this.prototype.yDotK == null
this.prototype.integrator == null
this.prototype.previousTime == Double.NaN
this.prototype.currentTime == Double.NaN
this.prototype.h == Double.NaN
this.prototype.currentState == null
this.prototype.interpolatedTime == Double.NaN
this.prototype.interpolatedState == null
this.prototype.interpolatedDerivatives == null
this.prototype.forward == true
this.prototype.dirtyState == true
this.exp one of { -0.2, -0.125 }
this.safety one of { 0.0, 0.8, 0.9 }
this.minReduction one of { 0.0, 0.2, 0.3 }
this.maxGrowth one of { 0.0, 5.0, 10.0 }
this.vecAbsoluteTolerance[] == [1.0E-8, 1.0E-8, 1.0E-10, 1.0E-10]
this.vecAbsoluteTolerance[] elements one of { 1.0E-10, 1.0E-8 }
this.vecAbsoluteTolerance[] sorted by >=
this.vecRelativeTolerance[] == [1.0E-10, 1.0E-10, 1.0E-8, 1.0E-8]
this.vecRelativeTolerance[] elements one of { 1.0E-10, 1.0E-8 }
this.vecRelativeTolerance[] sorted by <=
this.initialStep one of { -1.0, 1.7 }
this.initialStep != 0
this.minStep >= 0.0
this.stepHandlers != null
this.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.stepStart == Double.NaN
this.stepSize >= 0.0
this.eventsHandlersManager != null
this.eventsHandlersManager.states != null
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.states.getClass().getName() == java.util.ArrayList.class
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.name != null
this.name.toString one of { "Dormand-Prince 5(4)", "Dormand-Prince 8 (5, 3)", "Higham-Hall 5(4)" }
this.maxEvaluations == 2147483647
this.evaluations >= 0
size(this.c[]) one of { 6, 12 }
size(this.a[]) one of { 6, 12 }
size(this.b[]) one of { 7, 13 }
size(this.vecAbsoluteTolerance[]) == 4
size(this.vecRelativeTolerance[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.EmbeddedRungeKuttaIntegrator(java.lang.String, boolean, double[], double[][], double[], org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator, double, double, double, double):::ENTER
name != null
name.toString one of { "Dormand-Prince 5(4)", "Dormand-Prince 8 (5, 3)", "Higham-Hall 5(4)" }
c != null
c[] one of { [0.05260015195876774, 0.0789002279381516, 0.1183503419072274, 0.28164965809277265, 0.3333333333333333, 0.25, 0.3076923076923077, 0.6512820512820513, 0.6, 0.8571428571428571, 1.0, 1.0], [0.2, 0.3, 0.8, 0.8888888888888888, 1.0, 1.0], [0.2222222222222222, 0.3333333333333333, 0.5, 0.6, 1.0, 1.0] }
a != null
a.getClass().getName() == double[][].class
a[] elements != null
b != null
b[] one of { [0.054293734116568765, 0.0, 0.0, 0.0, 0.0, 4.450312892752409, 1.8915178993145003, -5.801203960010585, 0.3111643669578199, -0.1521609496625161, 0.20136540080403034, 0.04471061572777259, 0.0], [0.08333333333333333, 0.0, 0.84375, -1.3333333333333333, 1.3020833333333333, 0.10416666666666667, 0.0], [0.09114583333333333, 0.0, 0.44923629829290207, 0.6510416666666666, -0.322376179245283, 0.13095238095238096, 0.0] }
prototype != null
prototype.yDotK == null
prototype.integrator == null
prototype.previousTime == Double.NaN
prototype.currentTime == Double.NaN
prototype.h == Double.NaN
prototype.currentState == null
prototype.interpolatedTime == Double.NaN
prototype.interpolatedState == null
prototype.interpolatedDerivatives == null
prototype.finalized == false
prototype.forward == true
prototype.dirtyState == true
size(c[]) one of { 6, 12 }
size(a[]) one of { 6, 12 }
size(b[]) one of { 7, 13 }
===========================================================================
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.EmbeddedRungeKuttaIntegrator(java.lang.String, boolean, double[], double[][], double[], org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator, double, double, double, double):::EXIT
name.toString == orig(name.toString)
c[] == orig(c[])
a[] == orig(a[])
b[] == orig(b[])
prototype.yDotK == orig(prototype.yDotK)
prototype.integrator == orig(prototype.integrator)
prototype.currentState == orig(prototype.currentState)
prototype.interpolatedState == orig(prototype.interpolatedState)
prototype.interpolatedDerivatives == orig(prototype.interpolatedDerivatives)
prototype.finalized == orig(prototype.finalized)
prototype.forward == orig(prototype.forward)
prototype.dirtyState == orig(prototype.dirtyState)
this.prototype.finalized == false
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 10.0
this.vecAbsoluteTolerance == null
this.vecRelativeTolerance == null
this.initialStep == -1.0
this.evaluations == 0
this.equations == null
name.toString one of { "Dormand-Prince 5(4)", "Dormand-Prince 8 (5, 3)", "Higham-Hall 5(4)" }
c[] one of { [0.05260015195876774, 0.0789002279381516, 0.1183503419072274, 0.28164965809277265, 0.3333333333333333, 0.25, 0.3076923076923077, 0.6512820512820513, 0.6, 0.8571428571428571, 1.0, 1.0], [0.2, 0.3, 0.8, 0.8888888888888888, 1.0, 1.0], [0.2222222222222222, 0.3333333333333333, 0.5, 0.6, 1.0, 1.0] }
a[] elements != null
b[] one of { [0.054293734116568765, 0.0, 0.0, 0.0, 0.0, 4.450312892752409, 1.8915178993145003, -5.801203960010585, 0.3111643669578199, -0.1521609496625161, 0.20136540080403034, 0.04471061572777259, 0.0], [0.08333333333333333, 0.0, 0.84375, -1.3333333333333333, 1.3020833333333333, 0.10416666666666667, 0.0], [0.09114583333333333, 0.0, 0.44923629829290207, 0.6510416666666666, -0.322376179245283, 0.13095238095238096, 0.0] }
prototype.yDotK == null
prototype.integrator == null
prototype.previousTime == Double.NaN
prototype.currentTime == Double.NaN
prototype.h == Double.NaN
prototype.currentState == null
prototype.interpolatedTime == Double.NaN
prototype.interpolatedState == null
prototype.interpolatedDerivatives == null
prototype.finalized == false
prototype.forward == true
prototype.dirtyState == true
===========================================================================
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.EmbeddedRungeKuttaIntegrator(java.lang.String, boolean, double[], double[][], double[], org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator, double, double, double[], double[]):::ENTER
name has only one value
name.toString == "Higham-Hall 5(4)"
fsal == false
c has only one value
c[] == [0.2222222222222222, 0.3333333333333333, 0.5, 0.6, 1.0, 1.0]
a has only one value
a.getClass().getName() == double[][].class
a[] contains no nulls and has only one value, of length 6
b has only one value
b[] == [0.08333333333333333, 0.0, 0.84375, -1.3333333333333333, 1.3020833333333333, 0.10416666666666667, 0.0]
prototype has only one value
prototype.getClass().getName() == org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolator.class
prototype.yDotK == null
prototype.integrator == null
prototype.previousTime == Double.NaN
prototype.currentTime == Double.NaN
prototype.h == Double.NaN
prototype.currentState == null
prototype.interpolatedTime == Double.NaN
prototype.interpolatedState == null
prototype.interpolatedDerivatives == null
prototype.finalized == false
prototype.forward == true
prototype.dirtyState == true
minStep == 0.0
maxStep == 20.0
vecAbsoluteTolerance has only one value
vecAbsoluteTolerance[] == [1.0E-8, 1.0E-8, 1.0E-10, 1.0E-10]
vecAbsoluteTolerance[] elements one of { 1.0E-10, 1.0E-8 }
vecRelativeTolerance has only one value
vecRelativeTolerance[] == [1.0E-10, 1.0E-10, 1.0E-8, 1.0E-8]
vecRelativeTolerance[] elements one of { 1.0E-10, 1.0E-8 }
size(c[]) == 6
size(a[]) == 6
size(b[]) == 7
size(vecAbsoluteTolerance[]) == 4
size(vecRelativeTolerance[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.EmbeddedRungeKuttaIntegrator(java.lang.String, boolean, double[], double[][], double[], org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator, double, double, double[], double[]):::EXIT
name.toString == orig(name.toString)
c[] == orig(c[])
a[] == orig(a[])
b[] == orig(b[])
prototype.yDotK == orig(prototype.yDotK)
prototype.integrator == orig(prototype.integrator)
prototype.currentState == orig(prototype.currentState)
prototype.interpolatedState == orig(prototype.interpolatedState)
prototype.interpolatedDerivatives == orig(prototype.interpolatedDerivatives)
prototype.finalized == orig(prototype.finalized)
prototype.forward == orig(prototype.forward)
prototype.dirtyState == orig(prototype.dirtyState)
vecAbsoluteTolerance[] == orig(vecAbsoluteTolerance[])
vecRelativeTolerance[] == orig(vecRelativeTolerance[])
this.fsal == false
this.c has only one value
this.c[] == [0.2222222222222222, 0.3333333333333333, 0.5, 0.6, 1.0, 1.0]
this.a has only one value
this.a[] contains no nulls and has only one value, of length 6
this.b has only one value
this.b[] == [0.08333333333333333, 0.0, 0.84375, -1.3333333333333333, 1.3020833333333333, 0.10416666666666667, 0.0]
this.prototype has only one value
this.prototype.getClass().getName() == org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolator.class
this.prototype.finalized == false
this.exp == -0.2
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 10.0
this.scalAbsoluteTolerance == 0.0
this.scalRelativeTolerance == 0.0
this.vecAbsoluteTolerance has only one value
this.vecRelativeTolerance has only one value
this.initialStep == -1.0
this.minStep == 0.0
this.maxStep == 20.0
this.stepHandlers has only one value
this.stepSize == 0.0
this.eventsHandlersManager has only one value
this.eventsHandlersManager.states has only one value
this.name has only one value
this.name.toString == "Higham-Hall 5(4)"
this.evaluations == 0
this.equations == null
name.toString == "Higham-Hall 5(4)"
c[] == [0.2222222222222222, 0.3333333333333333, 0.5, 0.6, 1.0, 1.0]
a[] contains no nulls and has only one value, of length 6
b[] == [0.08333333333333333, 0.0, 0.84375, -1.3333333333333333, 1.3020833333333333, 0.10416666666666667, 0.0]
prototype.yDotK == null
prototype.integrator == null
prototype.previousTime == Double.NaN
prototype.currentTime == Double.NaN
prototype.h == Double.NaN
prototype.currentState == null
prototype.interpolatedTime == Double.NaN
prototype.interpolatedState == null
prototype.interpolatedDerivatives == null
prototype.finalized == false
prototype.forward == true
prototype.dirtyState == true
vecAbsoluteTolerance[] == [1.0E-8, 1.0E-8, 1.0E-10, 1.0E-10]
vecAbsoluteTolerance[] elements one of { 1.0E-10, 1.0E-8 }
vecRelativeTolerance[] == [1.0E-10, 1.0E-10, 1.0E-8, 1.0E-8]
vecRelativeTolerance[] elements one of { 1.0E-10, 1.0E-8 }
size(this.c[]) == 6
size(this.a[]) == 6
size(this.b[]) == 7
===========================================================================
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.getMaxGrowth():::ENTER
this.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.class
this.fsal == true
this.c has only one value
this.c[] == [0.2, 0.3, 0.8, 0.8888888888888888, 1.0, 1.0]
this.c[] sorted by <=
this.a has only one value
this.a[] contains no nulls and has only one value, of length 6
this.b has only one value
this.b[] == [0.09114583333333333, 0.0, 0.44923629829290207, 0.6510416666666666, -0.322376179245283, 0.13095238095238096, 0.0]
this.prototype.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator.class
this.prototype.finalized == true
this.exp == -0.2
this.safety == 0.8
this.minReduction == 0.3
this.maxGrowth == 5.0
this.vecAbsoluteTolerance == null
this.vecRelativeTolerance == null
this.initialStep == -1.0
this.minStep == 0.0
this.maxStep == 4.0
this.stepSize == 0.0
this.name has only one value
this.name.toString == "Dormand-Prince 5(4)"
this.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem1.class
size(this.c[]) == 6
size(this.a[]) == 6
size(this.b[]) == 7
===========================================================================
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.getMaxGrowth():::EXIT
this.fsal == orig(this.fsal)
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a.getClass().getName() == orig(this.a.getClass().getName())
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.integrator == orig(this.prototype.integrator)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.interpolatedDerivatives == orig(this.prototype.interpolatedDerivatives)
this.prototype.finalized == orig(this.prototype.finalized)
this.prototype.forward == orig(this.prototype.forward)
this.prototype.dirtyState == orig(this.prototype.dirtyState)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.minReduction == orig(this.minReduction)
this.maxGrowth == orig(this.maxGrowth)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.fsal == true
this.c has only one value
this.c[] == [0.2, 0.3, 0.8, 0.8888888888888888, 1.0, 1.0]
this.c[] sorted by <=
this.a has only one value
this.a[] contains no nulls and has only one value, of length 6
this.b has only one value
this.b[] == [0.09114583333333333, 0.0, 0.44923629829290207, 0.6510416666666666, -0.322376179245283, 0.13095238095238096, 0.0]
this.prototype.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator.class
this.prototype.finalized == true
this.exp == -0.2
this.safety == 0.8
this.minReduction == 0.3
this.maxGrowth == 5.0
this.vecAbsoluteTolerance == null
this.vecRelativeTolerance == null
this.initialStep == -1.0
this.minStep == 0.0
this.maxStep == 4.0
this.stepSize == 0.0
this.name has only one value
this.name.toString == "Dormand-Prince 5(4)"
this.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem1.class
return == 5.0
size(this.c[]) == 6
size(this.a[]) == 6
size(this.b[]) == 7
===========================================================================
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.getMinReduction():::ENTER
this.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.class
this.fsal == true
this.c has only one value
this.c[] == [0.2, 0.3, 0.8, 0.8888888888888888, 1.0, 1.0]
this.c[] sorted by <=
this.a has only one value
this.a[] contains no nulls and has only one value, of length 6
this.b has only one value
this.b[] == [0.09114583333333333, 0.0, 0.44923629829290207, 0.6510416666666666, -0.322376179245283, 0.13095238095238096, 0.0]
this.prototype.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator.class
this.prototype.finalized == true
this.exp == -0.2
this.safety == 0.8
this.minReduction == 0.3
this.maxGrowth == 5.0
this.vecAbsoluteTolerance == null
this.vecRelativeTolerance == null
this.initialStep == -1.0
this.minStep == 0.0
this.maxStep == 4.0
this.stepSize == 0.0
this.name has only one value
this.name.toString == "Dormand-Prince 5(4)"
this.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem1.class
size(this.c[]) == 6
size(this.a[]) == 6
size(this.b[]) == 7
===========================================================================
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.getMinReduction():::EXIT
this.fsal == orig(this.fsal)
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a.getClass().getName() == orig(this.a.getClass().getName())
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.integrator == orig(this.prototype.integrator)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.interpolatedDerivatives == orig(this.prototype.interpolatedDerivatives)
this.prototype.finalized == orig(this.prototype.finalized)
this.prototype.forward == orig(this.prototype.forward)
this.prototype.dirtyState == orig(this.prototype.dirtyState)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.minReduction == orig(this.minReduction)
this.maxGrowth == orig(this.maxGrowth)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.fsal == true
this.c has only one value
this.c[] == [0.2, 0.3, 0.8, 0.8888888888888888, 1.0, 1.0]
this.c[] sorted by <=
this.a has only one value
this.a[] contains no nulls and has only one value, of length 6
this.b has only one value
this.b[] == [0.09114583333333333, 0.0, 0.44923629829290207, 0.6510416666666666, -0.322376179245283, 0.13095238095238096, 0.0]
this.prototype.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator.class
this.prototype.finalized == true
this.exp == -0.2
this.safety == 0.8
this.minReduction == 0.3
this.maxGrowth == 5.0
this.vecAbsoluteTolerance == null
this.vecRelativeTolerance == null
this.initialStep == -1.0
this.minStep == 0.0
this.maxStep == 4.0
this.stepSize == 0.0
this.name has only one value
this.name.toString == "Dormand-Prince 5(4)"
this.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem1.class
return == 0.3
size(this.c[]) == 6
size(this.a[]) == 6
size(this.b[]) == 7
===========================================================================
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.getSafety():::ENTER
this.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.class
this.fsal == true
this.c has only one value
this.c[] == [0.2, 0.3, 0.8, 0.8888888888888888, 1.0, 1.0]
this.c[] sorted by <=
this.a has only one value
this.a[] contains no nulls and has only one value, of length 6
this.b has only one value
this.b[] == [0.09114583333333333, 0.0, 0.44923629829290207, 0.6510416666666666, -0.322376179245283, 0.13095238095238096, 0.0]
this.prototype.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator.class
this.prototype.finalized == true
this.exp == -0.2
this.safety == 0.8
this.minReduction == 0.3
this.maxGrowth == 5.0
this.vecAbsoluteTolerance == null
this.vecRelativeTolerance == null
this.initialStep == -1.0
this.minStep == 0.0
this.maxStep == 4.0
this.stepSize == 0.0
this.name has only one value
this.name.toString == "Dormand-Prince 5(4)"
this.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem1.class
size(this.c[]) == 6
size(this.a[]) == 6
size(this.b[]) == 7
===========================================================================
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.getSafety():::EXIT
this.fsal == orig(this.fsal)
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a.getClass().getName() == orig(this.a.getClass().getName())
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.integrator == orig(this.prototype.integrator)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.interpolatedDerivatives == orig(this.prototype.interpolatedDerivatives)
this.prototype.finalized == orig(this.prototype.finalized)
this.prototype.forward == orig(this.prototype.forward)
this.prototype.dirtyState == orig(this.prototype.dirtyState)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.minReduction == orig(this.minReduction)
this.maxGrowth == orig(this.maxGrowth)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.fsal == true
this.c has only one value
this.c[] == [0.2, 0.3, 0.8, 0.8888888888888888, 1.0, 1.0]
this.c[] sorted by <=
this.a has only one value
this.a[] contains no nulls and has only one value, of length 6
this.b has only one value
this.b[] == [0.09114583333333333, 0.0, 0.44923629829290207, 0.6510416666666666, -0.322376179245283, 0.13095238095238096, 0.0]
this.prototype.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator.class
this.prototype.finalized == true
this.exp == -0.2
this.safety == 0.8
this.minReduction == 0.3
this.maxGrowth == 5.0
this.vecAbsoluteTolerance == null
this.vecRelativeTolerance == null
this.initialStep == -1.0
this.minStep == 0.0
this.maxStep == 4.0
this.stepSize == 0.0
this.name has only one value
this.name.toString == "Dormand-Prince 5(4)"
this.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem1.class
return == 0.8
size(this.c[]) == 6
size(this.a[]) == 6
size(this.b[]) == 7
===========================================================================
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double, double[], double, double[]):::ENTER
this.prototype.finalized == false
this.safety one of { 0.8, 0.9 }
this.minReduction one of { 0.2, 0.3 }
this.maxGrowth one of { 5.0, 10.0 }
this.minStep one of { 0.0, 0.4, 1.25 }
this.stepSize one of { 0.0, 1.2649110640673518, 2.23606797749979 }
this.evaluations one of { 0, 50 }
this.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem1.class
equations != null
t0 one of { 0.0, 3.141592653589793, 6.283185307179586 }
y0 != null
y != null
y[] elements == 0.0
y[] one of { [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
size(y0[]) one of { 2, 4 }
size(y[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double, double[], double, double[]):::EXIT
this.fsal == orig(this.fsal)
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a.getClass().getName() == orig(this.a.getClass().getName())
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.integrator == orig(this.prototype.integrator)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.interpolatedDerivatives == orig(this.prototype.interpolatedDerivatives)
this.prototype.forward == orig(this.prototype.forward)
this.prototype.dirtyState == orig(this.prototype.dirtyState)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.minReduction == orig(this.minReduction)
this.maxGrowth == orig(this.maxGrowth)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecAbsoluteTolerance[] == orig(this.vecAbsoluteTolerance[])
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.vecRelativeTolerance[] == orig(this.vecRelativeTolerance[])
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
y0[] == orig(y0[])
this.safety one of { 0.8, 0.9 }
this.minReduction one of { 0.2, 0.3 }
this.maxGrowth one of { 5.0, 10.0 }
this.minStep one of { 0.0, 0.4, 1.25 }
this.stepSize one of { 0.0, 1.2649110640673518, 2.23606797749979 }
this.equations != null
this.evaluations > orig(this.evaluations)
===========================================================================
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.setMaxGrowth(double):::ENTER
this.prototype.finalized == false
this.safety one of { 0.8, 0.9 }
this.minReduction == 0.2
this.maxGrowth one of { 0.0, 10.0 }
this.initialStep == -1.0
this.evaluations == 0
this.equations == null
maxGrowth one of { 5.0, 10.0 }
===========================================================================
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.setMaxGrowth(double):::EXIT
this.fsal == orig(this.fsal)
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a.getClass().getName() == orig(this.a.getClass().getName())
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.integrator == orig(this.prototype.integrator)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.interpolatedDerivatives == orig(this.prototype.interpolatedDerivatives)
this.prototype.finalized == orig(this.prototype.finalized)
this.prototype.forward == orig(this.prototype.forward)
this.prototype.dirtyState == orig(this.prototype.dirtyState)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.minReduction == orig(this.minReduction)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecAbsoluteTolerance[] == orig(this.vecAbsoluteTolerance[])
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.vecRelativeTolerance[] == orig(this.vecRelativeTolerance[])
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.prototype.finalized == false
this.safety one of { 0.8, 0.9 }
this.minReduction == 0.2
this.maxGrowth one of { 5.0, 10.0 }
this.initialStep == -1.0
this.evaluations == 0
this.equations == null
this.maxGrowth != orig(this.maxGrowth)
===========================================================================
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.setMinReduction(double):::ENTER
this.prototype.finalized == false
this.safety one of { 0.8, 0.9 }
this.minReduction one of { 0.0, 0.2 }
this.maxGrowth one of { 0.0, 5.0 }
this.initialStep == -1.0
this.evaluations == 0
this.equations == null
minReduction one of { 0.2, 0.3 }
===========================================================================
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.setMinReduction(double):::EXIT
this.fsal == orig(this.fsal)
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a.getClass().getName() == orig(this.a.getClass().getName())
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.integrator == orig(this.prototype.integrator)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.interpolatedDerivatives == orig(this.prototype.interpolatedDerivatives)
this.prototype.finalized == orig(this.prototype.finalized)
this.prototype.forward == orig(this.prototype.forward)
this.prototype.dirtyState == orig(this.prototype.dirtyState)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.maxGrowth == orig(this.maxGrowth)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecAbsoluteTolerance[] == orig(this.vecAbsoluteTolerance[])
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.vecRelativeTolerance[] == orig(this.vecRelativeTolerance[])
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.prototype.finalized == false
this.safety one of { 0.8, 0.9 }
this.minReduction one of { 0.2, 0.3 }
this.maxGrowth one of { 0.0, 5.0 }
this.initialStep == -1.0
this.evaluations == 0
this.equations == null
this.minReduction > orig(this.minReduction)
===========================================================================
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.setSafety(double):::ENTER
this.prototype.finalized == false
this.safety one of { 0.0, 0.9 }
this.minReduction one of { 0.0, 0.2 }
this.maxGrowth one of { 0.0, 10.0 }
this.initialStep == -1.0
this.evaluations == 0
this.equations == null
safety one of { 0.8, 0.9 }
===========================================================================
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.setSafety(double):::EXIT
this.fsal == orig(this.fsal)
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a.getClass().getName() == orig(this.a.getClass().getName())
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.integrator == orig(this.prototype.integrator)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.interpolatedDerivatives == orig(this.prototype.interpolatedDerivatives)
this.prototype.finalized == orig(this.prototype.finalized)
this.prototype.forward == orig(this.prototype.forward)
this.prototype.dirtyState == orig(this.prototype.dirtyState)
this.exp == orig(this.exp)
this.minReduction == orig(this.minReduction)
this.maxGrowth == orig(this.maxGrowth)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecAbsoluteTolerance[] == orig(this.vecAbsoluteTolerance[])
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.vecRelativeTolerance[] == orig(this.vecRelativeTolerance[])
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.prototype.finalized == false
this.safety one of { 0.8, 0.9 }
this.minReduction one of { 0.0, 0.2 }
this.maxGrowth one of { 0.0, 10.0 }
this.initialStep == -1.0
this.evaluations == 0
this.equations == null
this.safety != orig(this.safety)
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegrator:::CLASS
org.apache.commons.math.ode.nonstiff.EulerIntegrator.STATIC_C has only one value
org.apache.commons.math.ode.nonstiff.EulerIntegrator.STATIC_C[] == []
org.apache.commons.math.ode.nonstiff.EulerIntegrator.STATIC_A has only one value
org.apache.commons.math.ode.nonstiff.EulerIntegrator.STATIC_A.getClass().getName() == double[][].class
org.apache.commons.math.ode.nonstiff.EulerIntegrator.STATIC_A[] == []
org.apache.commons.math.ode.nonstiff.EulerIntegrator.STATIC_B has only one value
org.apache.commons.math.ode.nonstiff.EulerIntegrator.STATIC_B[] == [1.0]
org.apache.commons.math.ode.nonstiff.EulerIntegrator.STATIC_B[] elements == 1.0
size(org.apache.commons.math.ode.nonstiff.EulerIntegrator.STATIC_B[]) == 1
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegrator:::OBJECT
org.apache.commons.math.ode.nonstiff.EulerIntegrator.STATIC_A.getClass().getName() == this.a.getClass().getName()
this.stepHandlers.getClass().getName() == this.eventsHandlersManager.states.getClass().getName()
this.c has only one value
this.c[] == []
this.a has only one value
this.a[] == []
this.b has only one value
this.b[] == [1.0]
this.b[] elements == 1.0
this.prototype.getClass().getName() == org.apache.commons.math.ode.nonstiff.EulerStepInterpolator.class
this.prototype.yDotK == null
this.prototype.integrator == null
this.prototype.previousTime == Double.NaN
this.prototype.currentTime == Double.NaN
this.prototype.h == Double.NaN
this.prototype.currentState == null
this.prototype.interpolatedTime == Double.NaN
this.prototype.interpolatedState == null
this.prototype.interpolatedDerivatives == null
this.prototype.finalized == false
this.prototype.forward == true
this.prototype.dirtyState == true
this.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.name has only one value
this.name.toString == "Euler"
this.maxEvaluations == 2147483647
this.evaluations == 0
this.equations == null
size(this.b[]) == 1
org.apache.commons.math.ode.nonstiff.EulerIntegrator.STATIC_A.getClass().getName() != this.prototype.getClass().getName()
org.apache.commons.math.ode.nonstiff.EulerIntegrator.STATIC_A.getClass().getName() != this.stepHandlers.getClass().getName()
this.prototype.getClass().getName() != this.stepHandlers.getClass().getName()
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegrator.EulerIntegrator(double):::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegrator.EulerIntegrator(double):::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest$1:::OBJECT
this has only one value
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest$1.(org.apache.commons.math.ode.nonstiff.EulerIntegratorTest):::ENTER
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest$1.(org.apache.commons.math.ode.nonstiff.EulerIntegratorTest):::EXIT
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.this)
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest$1.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::ENTER
interpolator has only one value
interpolator.getClass().getName() == org.apache.commons.math.ode.sampling.DummyStepInterpolator.class
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest$1.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::EXIT
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.this)
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest$1.requiresDenseOutput():::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest$1.requiresDenseOutput():::EXIT
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.this)
return == false
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest$1.requiresDenseOutput():::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest$1.reset():::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest$1.reset():::EXIT
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.this)
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest$2:::CLASS
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest$2:::OBJECT
this has only one value
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest$2.(org.apache.commons.math.ode.nonstiff.EulerIntegratorTest):::ENTER
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest$2.(org.apache.commons.math.ode.nonstiff.EulerIntegratorTest):::EXIT
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.this)
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest$2.computeDerivatives(double, double[], double[]):::ENTER
y has only one value
dot has only one value
dot[] elements one of { 0.0, 1.0 }
dot[] one of { [0.0], [1.0] }
size(y[]) == 1
size(dot[]) == 1
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest$2.computeDerivatives(double, double[], double[]):::EXIT
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.this)
y[] == orig(y[])
dot[] == [1.0]
dot[] elements == 1.0
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest$2.getDimension():::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest$2.getDimension():::EXIT
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.this)
return == 1
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest:::OBJECT
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.EulerIntegratorTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.EulerIntegratorTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.suite():::EXIT
return.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.testBackward():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.testBackward():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.testBigStep():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.testBigStep():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.testDecreasingSteps():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.testDecreasingSteps():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.testSmallStep():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.testSmallStep():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.testStepSize():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerIntegratorTest.testStepSize():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerStepInterpolator:::CLASS
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerStepInterpolator:::OBJECT
this.yDotK.getClass().getName() == double[][].class
this.yDotK[] elements != null
this.integrator.getClass().getName() == org.apache.commons.math.ode.nonstiff.EulerIntegrator.class
this.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.integrator.eventsHandlersManager.states[] elements != null
this.integrator.eventsHandlersManager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
this.integrator.eventsHandlersManager.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.integrator.eventsHandlersManager.states.getClass().getName() == java.util.ArrayList.class
this.integrator.eventsHandlersManager.first == null
this.integrator.eventsHandlersManager.initialized == false
this.integrator.name has only one value
this.integrator.name.toString == "Euler"
this.integrator.maxEvaluations == 2147483647
this.integrator.evaluations >= 1
this.dirtyState == true
size(this.yDotK[]) == 1
size(this.integrator.eventsHandlersManager.states[]) one of { 0, 2 }
size(this.integrator.eventsHandlersManager.states[])-1 != 0
size(this.currentState[]) one of { 1, 2, 4 }
size(this.interpolatedState[]) one of { 1, 2, 4 }
size(this.interpolatedDerivatives[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerStepInterpolator.EulerStepInterpolator():::EXIT
this.yDotK == null
this.integrator == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.finalized == false
this.forward == true
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerStepInterpolator.EulerStepInterpolator(org.apache.commons.math.ode.nonstiff.EulerStepInterpolator):::ENTER
interpolator.yDotK.getClass().getName() == double[][].class
interpolator.yDotK[] contains no nulls and has only one value, of length 1
interpolator.yDotK[] elements has only one value
interpolator.yDotK[] elements != null
interpolator.integrator.getClass().getName() == org.apache.commons.math.ode.nonstiff.EulerIntegrator.class
interpolator.integrator.stepHandlers has only one value
interpolator.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.stepSize == 0.004
interpolator.integrator.eventsHandlersManager has only one value
interpolator.integrator.name has only one value
interpolator.integrator.name.toString == "Euler"
interpolator.integrator.maxEvaluations == 2147483647
interpolator.integrator.equations has only one value
interpolator.integrator.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem1.class
interpolator.h one of { 0.004, Double.NaN }
interpolator.currentState[] sorted by >
interpolator.interpolatedState[] sorted by >
interpolator.interpolatedDerivatives[] sorted by <
interpolator.finalized == true
interpolator.forward == true
interpolator.dirtyState == true
size(interpolator.yDotK[]) == 1
size(interpolator.currentState[]) == 2
size(interpolator.interpolatedState[]) == 2
size(interpolator.interpolatedDerivatives[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerStepInterpolator.EulerStepInterpolator(org.apache.commons.math.ode.nonstiff.EulerStepInterpolator):::EXIT
interpolator.yDotK == orig(interpolator.yDotK)
interpolator.yDotK.getClass().getName() == orig(interpolator.yDotK.getClass().getName())
interpolator.yDotK[] == orig(interpolator.yDotK[])
interpolator.integrator == orig(interpolator.integrator)
interpolator.integrator.getClass().getName() == orig(interpolator.integrator.getClass().getName())
interpolator.integrator.stepHandlers == orig(interpolator.integrator.stepHandlers)
interpolator.integrator.stepHandlers.getClass().getName() == orig(interpolator.integrator.stepHandlers.getClass().getName())
interpolator.integrator.stepStart == orig(interpolator.integrator.stepStart)
interpolator.integrator.stepSize == orig(interpolator.integrator.stepSize)
interpolator.integrator.eventsHandlersManager == orig(interpolator.integrator.eventsHandlersManager)
interpolator.integrator.name == orig(interpolator.integrator.name)
interpolator.integrator.name.toString == orig(interpolator.integrator.name.toString)
interpolator.integrator.maxEvaluations == orig(interpolator.integrator.maxEvaluations)
interpolator.integrator.evaluations == orig(interpolator.integrator.evaluations)
interpolator.integrator.equations == orig(interpolator.integrator.equations)
interpolator.integrator.equations.getClass().getName() == orig(interpolator.integrator.equations.getClass().getName())
interpolator.currentState == orig(interpolator.currentState)
interpolator.currentState[] == orig(interpolator.currentState[])
interpolator.interpolatedState == orig(interpolator.interpolatedState)
interpolator.interpolatedState[] == orig(interpolator.interpolatedState[])
interpolator.interpolatedDerivatives == orig(interpolator.interpolatedDerivatives)
interpolator.interpolatedDerivatives[] == orig(interpolator.interpolatedDerivatives[])
interpolator.finalized == orig(interpolator.finalized)
interpolator.forward == orig(interpolator.forward)
interpolator.dirtyState == orig(interpolator.dirtyState)
this.integrator == null
this.h one of { 0.004, Double.NaN }
this.currentState[] sorted by >
this.interpolatedState[] sorted by >
this.interpolatedDerivatives[] sorted by <
this.finalized == true
this.forward == true
interpolator.yDotK.getClass().getName() == double[][].class
interpolator.yDotK[] contains no nulls and has only one value, of length 1
interpolator.yDotK[] elements has only one value
interpolator.yDotK[] elements != null
interpolator.integrator.getClass().getName() == org.apache.commons.math.ode.nonstiff.EulerIntegrator.class
interpolator.integrator.stepHandlers has only one value
interpolator.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.stepSize == 0.004
interpolator.integrator.eventsHandlersManager has only one value
interpolator.integrator.name has only one value
interpolator.integrator.name.toString == "Euler"
interpolator.integrator.maxEvaluations == 2147483647
interpolator.integrator.equations has only one value
interpolator.integrator.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem1.class
interpolator.h one of { 0.004, Double.NaN }
interpolator.currentState[] sorted by >
interpolator.interpolatedState[] sorted by >
interpolator.interpolatedDerivatives[] sorted by <
interpolator.finalized == true
interpolator.forward == true
interpolator.dirtyState == true
size(this.currentState[]) == 2
size(this.interpolatedState[]) == 2
size(this.interpolatedDerivatives[]) == 2
size(interpolator.yDotK[]) == 1
size(interpolator.currentState[]) == 2
size(interpolator.interpolatedState[]) == 2
size(interpolator.interpolatedDerivatives[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerStepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerStepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::EXIT
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.integrator.stepHandlers == orig(this.integrator.stepHandlers)
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.stepHandlers.getClass().getName())
this.integrator.stepStart == orig(this.integrator.stepStart)
this.integrator.stepSize == orig(this.integrator.stepSize)
this.integrator.eventsHandlersManager == orig(this.integrator.eventsHandlersManager)
this.integrator.eventsHandlersManager.states == orig(this.integrator.eventsHandlersManager.states)
this.integrator.eventsHandlersManager.states[] == orig(this.integrator.eventsHandlersManager.states[])
this.integrator.eventsHandlersManager.states.getClass().getName() == orig(this.integrator.eventsHandlersManager.states.getClass().getName())
this.integrator.eventsHandlersManager.first == orig(this.integrator.eventsHandlersManager.first)
this.integrator.eventsHandlersManager.initialized == orig(this.integrator.eventsHandlersManager.initialized)
this.integrator.name == orig(this.integrator.name)
this.integrator.name.toString == orig(this.integrator.name.toString)
this.integrator.maxEvaluations == orig(this.integrator.maxEvaluations)
this.integrator.evaluations == orig(this.integrator.evaluations)
this.integrator.equations == orig(this.integrator.equations)
this.integrator.equations.getClass().getName() == orig(this.integrator.equations.getClass().getName())
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
size(this.interpolatedState[]) == orig(size(this.interpolatedState[]))
size(this.interpolatedDerivatives[]) == orig(size(this.interpolatedDerivatives[]))
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerStepInterpolator.doCopy():::ENTER
this.yDotK[] contains no nulls and has only one value, of length 1
this.yDotK[] elements has only one value
this.integrator.stepHandlers has only one value
this.integrator.stepSize == 0.004
this.integrator.eventsHandlersManager has only one value
this.integrator.eventsHandlersManager.states has only one value
this.integrator.eventsHandlersManager.states[] == []
this.integrator.eventsHandlersManager.states[].getClass().getName() == []
this.integrator.equations has only one value
this.integrator.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem1.class
this.h one of { 0.004, Double.NaN }
this.currentState[] sorted by >
this.interpolatedState[] sorted by >
this.interpolatedDerivatives[] sorted by <
this.finalized == true
this.forward == true
size(this.currentState[]) == 2
size(this.interpolatedState[]) == 2
size(this.interpolatedDerivatives[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerStepInterpolator.doCopy():::EXIT
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.integrator.stepHandlers == orig(this.integrator.stepHandlers)
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.stepHandlers.getClass().getName())
this.integrator.stepStart == orig(this.integrator.stepStart)
this.integrator.stepSize == orig(this.integrator.stepSize)
this.integrator.eventsHandlersManager == orig(this.integrator.eventsHandlersManager)
this.integrator.eventsHandlersManager.states == orig(this.integrator.eventsHandlersManager.states)
this.integrator.eventsHandlersManager.states[] == orig(this.integrator.eventsHandlersManager.states[])
this.integrator.eventsHandlersManager.states.getClass().getName() == orig(this.integrator.eventsHandlersManager.states.getClass().getName())
this.integrator.eventsHandlersManager.first == orig(this.integrator.eventsHandlersManager.first)
this.integrator.eventsHandlersManager.initialized == orig(this.integrator.eventsHandlersManager.initialized)
this.integrator.name == orig(this.integrator.name)
this.integrator.name.toString == orig(this.integrator.name.toString)
this.integrator.maxEvaluations == orig(this.integrator.maxEvaluations)
this.integrator.evaluations == orig(this.integrator.evaluations)
this.integrator.equations == orig(this.integrator.equations)
this.integrator.equations.getClass().getName() == orig(this.integrator.equations.getClass().getName())
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.yDotK[] contains no nulls and has only one value, of length 1
this.yDotK[] elements has only one value
this.integrator.stepHandlers has only one value
this.integrator.stepSize == 0.004
this.integrator.eventsHandlersManager has only one value
this.integrator.eventsHandlersManager.states has only one value
this.integrator.eventsHandlersManager.states[] == []
this.integrator.eventsHandlersManager.states[].getClass().getName() == []
this.integrator.equations has only one value
this.integrator.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem1.class
this.h one of { 0.004, Double.NaN }
this.currentState[] sorted by >
this.interpolatedState[] sorted by >
this.interpolatedDerivatives[] sorted by <
this.finalized == true
this.forward == true
return.getClass().getName() == org.apache.commons.math.ode.nonstiff.EulerStepInterpolator.class
size(this.currentState[]) == 2
size(this.interpolatedState[]) == 2
size(this.interpolatedDerivatives[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest:::OBJECT
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest.EulerStepInterpolatorTest():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest.derivativesConsistency():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest.derivativesConsistency():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest.serialization():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest.serialization():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegrator:::CLASS
org.apache.commons.math.ode.nonstiff.GillIntegrator.STATIC_C has only one value
org.apache.commons.math.ode.nonstiff.GillIntegrator.STATIC_C[] == [0.5, 0.5, 1.0]
org.apache.commons.math.ode.nonstiff.GillIntegrator.STATIC_C[] elements one of { 0.5, 1.0 }
org.apache.commons.math.ode.nonstiff.GillIntegrator.STATIC_C[] sorted by <=
org.apache.commons.math.ode.nonstiff.GillIntegrator.STATIC_A has only one value
org.apache.commons.math.ode.nonstiff.GillIntegrator.STATIC_A.getClass().getName() == double[][].class
org.apache.commons.math.ode.nonstiff.GillIntegrator.STATIC_A[] contains no nulls and has only one value, of length 3
org.apache.commons.math.ode.nonstiff.GillIntegrator.STATIC_A[] elements != null
org.apache.commons.math.ode.nonstiff.GillIntegrator.STATIC_B has only one value
org.apache.commons.math.ode.nonstiff.GillIntegrator.STATIC_B[] == [0.16666666666666666, 0.09763107293781748, 0.5690355937288492, 0.16666666666666666]
org.apache.commons.math.ode.nonstiff.GillIntegrator.STATIC_B[] elements one of { 0.09763107293781748, 0.16666666666666666, 0.5690355937288492 }
size(org.apache.commons.math.ode.nonstiff.GillIntegrator.STATIC_C[]) == 3
size(org.apache.commons.math.ode.nonstiff.GillIntegrator.STATIC_A[]) == 3
size(org.apache.commons.math.ode.nonstiff.GillIntegrator.STATIC_B[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegrator:::OBJECT
org.apache.commons.math.ode.nonstiff.GillIntegrator.STATIC_A.getClass().getName() == this.a.getClass().getName()
this.stepHandlers.getClass().getName() == this.eventsHandlersManager.states.getClass().getName()
this.c has only one value
this.c[] == [0.5, 0.5, 1.0]
this.c[] elements one of { 0.5, 1.0 }
this.c[] sorted by <=
this.a has only one value
this.a[] contains no nulls and has only one value, of length 3
this.a[] elements != null
this.b has only one value
this.b[] == [0.16666666666666666, 0.09763107293781748, 0.5690355937288492, 0.16666666666666666]
this.b[] elements one of { 0.09763107293781748, 0.16666666666666666, 0.5690355937288492 }
this.prototype.getClass().getName() == org.apache.commons.math.ode.nonstiff.GillStepInterpolator.class
this.prototype.yDotK == null
this.prototype.integrator == null
this.prototype.previousTime == Double.NaN
this.prototype.currentTime == Double.NaN
this.prototype.h == Double.NaN
this.prototype.currentState == null
this.prototype.interpolatedTime == Double.NaN
this.prototype.interpolatedState == null
this.prototype.interpolatedDerivatives == null
this.prototype.finalized == false
this.prototype.forward == true
this.prototype.dirtyState == true
this.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.name has only one value
this.name.toString == "Gill"
this.maxEvaluations == 2147483647
this.evaluations == 0
this.equations == null
size(this.c[]) == 3
size(this.a[]) == 3
size(this.b[]) == 4
org.apache.commons.math.ode.nonstiff.GillIntegrator.STATIC_A.getClass().getName() != this.prototype.getClass().getName()
org.apache.commons.math.ode.nonstiff.GillIntegrator.STATIC_A.getClass().getName() != this.stepHandlers.getClass().getName()
this.prototype.getClass().getName() != this.stepHandlers.getClass().getName()
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegrator.GillIntegrator(double):::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegrator.GillIntegrator(double):::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest$1:::OBJECT
this has only one value
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest$1.(org.apache.commons.math.ode.nonstiff.GillIntegratorTest):::ENTER
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest$1.(org.apache.commons.math.ode.nonstiff.GillIntegratorTest):::EXIT
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.GillIntegratorTest.this)
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest$1.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::ENTER
interpolator has only one value
interpolator.getClass().getName() == org.apache.commons.math.ode.sampling.DummyStepInterpolator.class
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest$1.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::EXIT
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.GillIntegratorTest.this)
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest$1.requiresDenseOutput():::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest$1.requiresDenseOutput():::EXIT
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.GillIntegratorTest.this)
return == false
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest$1.requiresDenseOutput():::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest$1.reset():::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest$1.reset():::EXIT
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.GillIntegratorTest.this)
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest$2:::CLASS
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest$2:::OBJECT
this has only one value
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest$2.(org.apache.commons.math.ode.nonstiff.GillIntegratorTest):::ENTER
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest$2.(org.apache.commons.math.ode.nonstiff.GillIntegratorTest):::EXIT
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.GillIntegratorTest.this)
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest$2.computeDerivatives(double, double[], double[]):::ENTER
dot[] elements one of { 0.0, 1.0 }
dot[] one of { [0.0], [1.0] }
size(y[]) == 1
size(dot[]) == 1
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest$2.computeDerivatives(double, double[], double[]):::EXIT
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.GillIntegratorTest.this)
y[] == orig(y[])
dot[] == [1.0]
dot[] elements == 1.0
dot[] >= orig(dot[]) (elementwise)
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest$2.getDimension():::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest$2.getDimension():::EXIT
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.GillIntegratorTest.this)
return == 1
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest$KeplerStepHandler:::OBJECT
this has only one value
this.pb has only one value
this.pb.e == 0.9
this.pb.y has only one value
this.pb.n == 4
this.pb.calls >= 0
this.pb.t0 == 0.0
this.pb.y0 has only one value
this.pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
this.pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
this.pb.t1 == 20.0
this.pb.errorScale has only one value
this.pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
this.pb.errorScale[] elements == 1.0
size(this.pb.y[]) == 4
size(this.pb.y0[]) == 4
size(this.pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest$KeplerStepHandler.KeplerStepHandler(org.apache.commons.math.ode.TestProblem3):::ENTER
pb has only one value
pb.e == 0.9
pb.y has only one value
pb.y[] == [0.0, 0.0, 0.0, 0.0]
pb.y[] elements == 0.0
pb.n == 4
pb.calls == 0
pb.t0 == 0.0
pb.y0 has only one value
pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
pb.t1 == 20.0
pb.errorScale has only one value
pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
pb.errorScale[] elements == 1.0
size(pb.y[]) == 4
size(pb.y0[]) == 4
size(pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest$KeplerStepHandler.KeplerStepHandler(org.apache.commons.math.ode.TestProblem3):::EXIT
pb.e == orig(pb.e)
pb.y == orig(pb.y)
pb.y[] == orig(pb.y[])
pb.n == orig(pb.n)
pb.calls == orig(pb.calls)
pb.t0 == orig(pb.t0)
pb.y0 == orig(pb.y0)
pb.y0[] == orig(pb.y0[])
pb.t1 == orig(pb.t1)
pb.errorScale == orig(pb.errorScale)
pb.errorScale[] == orig(pb.errorScale[])
this.maxError == 0.0
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
pb.e == 0.9
pb.y has only one value
pb.y[] == [0.0, 0.0, 0.0, 0.0]
pb.y[] elements == 0.0
pb.n == 4
pb.calls == 0
pb.t0 == 0.0
pb.y0 has only one value
pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
pb.t1 == 20.0
pb.errorScale has only one value
pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
pb.errorScale[] elements == 1.0
size(pb.y[]) == 4
size(pb.y0[]) == 4
size(pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest$KeplerStepHandler.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::ENTER
interpolator has only one value
interpolator.getClass().getName() == org.apache.commons.math.ode.sampling.DummyStepInterpolator.class
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest$KeplerStepHandler.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::EXIT
this.pb == orig(this.pb)
this.pb.e == orig(this.pb.e)
this.pb.y == orig(this.pb.y)
this.pb.n == orig(this.pb.n)
this.pb.calls == orig(this.pb.calls)
this.pb.t0 == orig(this.pb.t0)
this.pb.y0 == orig(this.pb.y0)
this.pb.y0[] == orig(this.pb.y0[])
this.pb.t1 == orig(this.pb.t1)
this.pb.errorScale == orig(this.pb.errorScale)
this.pb.errorScale[] == orig(this.pb.errorScale[])
size(this.pb.y[]) == orig(size(this.pb.y[]))
this.pb.y[] elements != 0
this.maxError >= orig(this.maxError)
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest$KeplerStepHandler.requiresDenseOutput():::ENTER
this.maxError == 0.0
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest$KeplerStepHandler.requiresDenseOutput():::EXIT
this.maxError == orig(this.maxError)
this.pb == orig(this.pb)
this.pb.e == orig(this.pb.e)
this.pb.y == orig(this.pb.y)
this.pb.y[] == orig(this.pb.y[])
this.pb.n == orig(this.pb.n)
this.pb.calls == orig(this.pb.calls)
this.pb.t0 == orig(this.pb.t0)
this.pb.y0 == orig(this.pb.y0)
this.pb.y0[] == orig(this.pb.y0[])
this.pb.t1 == orig(this.pb.t1)
this.pb.errorScale == orig(this.pb.errorScale)
this.pb.errorScale[] == orig(this.pb.errorScale[])
this.maxError == 0.0
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
return == false
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest$KeplerStepHandler.requiresDenseOutput():::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest$KeplerStepHandler.reset():::ENTER
this.maxError == 0.0
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest$KeplerStepHandler.reset():::EXIT
this.maxError == orig(this.maxError)
this.pb == orig(this.pb)
this.pb.e == orig(this.pb.e)
this.pb.y == orig(this.pb.y)
this.pb.y[] == orig(this.pb.y[])
this.pb.n == orig(this.pb.n)
this.pb.calls == orig(this.pb.calls)
this.pb.t0 == orig(this.pb.t0)
this.pb.y0 == orig(this.pb.y0)
this.pb.y0[] == orig(this.pb.y0[])
this.pb.t1 == orig(this.pb.t1)
this.pb.errorScale == orig(this.pb.errorScale)
this.pb.errorScale[] == orig(this.pb.errorScale[])
this.maxError == 0.0
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest:::OBJECT
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.GillIntegratorTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.GillIntegratorTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.suite():::EXIT
return.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.testBackward():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.testBackward():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.testBigStep():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.testBigStep():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.testKepler():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.testKepler():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.testSmallStep():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.testSmallStep():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.testStepSize():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.GillIntegratorTest.testStepSize():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.GillStepInterpolator:::CLASS
org.apache.commons.math.ode.nonstiff.GillStepInterpolator.TWO_MINUS_SQRT_2 == 0.5857864376269049
org.apache.commons.math.ode.nonstiff.GillStepInterpolator.TWO_PLUS_SQRT_2 == 3.414213562373095
===========================================================================
org.apache.commons.math.ode.nonstiff.GillStepInterpolator:::OBJECT
this.integrator.stepHandlers.getClass().getName() == this.integrator.eventsHandlersManager.states.getClass().getName()
this.yDotK.getClass().getName() == double[][].class
this.yDotK[] elements != null
this.integrator.getClass().getName() == org.apache.commons.math.ode.nonstiff.GillIntegrator.class
this.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.integrator.eventsHandlersManager.states[] elements != null
this.integrator.eventsHandlersManager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
this.integrator.eventsHandlersManager.first == null
this.integrator.eventsHandlersManager.initialized == false
this.integrator.name has only one value
this.integrator.name.toString == "Gill"
this.integrator.maxEvaluations == 2147483647
this.dirtyState == true
size(this.yDotK[]) == 4
size(this.integrator.eventsHandlersManager.states[]) one of { 0, 1, 2 }
size(this.currentState[]) one of { 1, 2, 4 }
size(this.interpolatedState[]) one of { 1, 2, 4 }
size(this.interpolatedDerivatives[]) one of { 1, 2, 4 }
this.yDotK.getClass().getName() != this.integrator.getClass().getName()
this.yDotK.getClass().getName() != this.integrator.stepHandlers.getClass().getName()
this.yDotK.getClass().getName() != this.integrator.equations.getClass().getName()
this.integrator.getClass().getName() != this.integrator.stepHandlers.getClass().getName()
this.integrator.getClass().getName() != this.integrator.equations.getClass().getName()
this.integrator.stepHandlers.getClass().getName() != this.integrator.equations.getClass().getName()
===========================================================================
org.apache.commons.math.ode.nonstiff.GillStepInterpolator.GillStepInterpolator():::EXIT
this.yDotK == null
this.integrator == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.finalized == false
this.forward == true
===========================================================================
org.apache.commons.math.ode.nonstiff.GillStepInterpolator.GillStepInterpolator(org.apache.commons.math.ode.nonstiff.GillStepInterpolator):::ENTER
org.apache.commons.math.ode.nonstiff.GillStepInterpolator.TWO_MINUS_SQRT_2 == 0.5857864376269049
org.apache.commons.math.ode.nonstiff.GillStepInterpolator.TWO_PLUS_SQRT_2 == 3.414213562373095
interpolator.yDotK.getClass().getName() == double[][].class
interpolator.yDotK[] contains no nulls and has only one value, of length 4
interpolator.yDotK[] elements != null
interpolator.integrator.getClass().getName() == org.apache.commons.math.ode.nonstiff.GillIntegrator.class
interpolator.integrator.stepHandlers has only one value
interpolator.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.stepSize one of { 0.0019999999994659845, 0.005999999999999999 }
interpolator.integrator.eventsHandlersManager has only one value
interpolator.integrator.name has only one value
interpolator.integrator.name.toString == "Gill"
interpolator.integrator.maxEvaluations == 2147483647
interpolator.integrator.equations has only one value
interpolator.integrator.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem3.class
interpolator.h one of { 0.0019999999994659845, 0.005999999999999999, Double.NaN }
interpolator.h <= 0.006000000000000227
interpolator.currentState[] elements != 0
interpolator.interpolatedState[] elements != 0
interpolator.interpolatedDerivatives[] elements != 0
interpolator.finalized == true
interpolator.forward == true
interpolator.dirtyState == true
size(interpolator.yDotK[]) == 4
size(interpolator.currentState[]) == 4
size(interpolator.interpolatedState[]) == 4
size(interpolator.interpolatedDerivatives[]) == 4
interpolator.yDotK.getClass().getName() != interpolator.integrator.getClass().getName()
interpolator.yDotK.getClass().getName() != interpolator.integrator.stepHandlers.getClass().getName()
interpolator.yDotK.getClass().getName() != interpolator.integrator.equations.getClass().getName()
interpolator.integrator.getClass().getName() != interpolator.integrator.stepHandlers.getClass().getName()
interpolator.integrator.getClass().getName() != interpolator.integrator.equations.getClass().getName()
interpolator.integrator.stepHandlers.getClass().getName() != interpolator.integrator.equations.getClass().getName()
===========================================================================
org.apache.commons.math.ode.nonstiff.GillStepInterpolator.GillStepInterpolator(org.apache.commons.math.ode.nonstiff.GillStepInterpolator):::EXIT
org.apache.commons.math.ode.nonstiff.GillStepInterpolator.TWO_MINUS_SQRT_2 == orig(org.apache.commons.math.ode.nonstiff.GillStepInterpolator.TWO_MINUS_SQRT_2)
org.apache.commons.math.ode.nonstiff.GillStepInterpolator.TWO_PLUS_SQRT_2 == orig(org.apache.commons.math.ode.nonstiff.GillStepInterpolator.TWO_PLUS_SQRT_2)
this.yDotK.getClass().getName() == interpolator.yDotK.getClass().getName()
this.yDotK.getClass().getName() == orig(interpolator.yDotK.getClass().getName())
interpolator.yDotK == orig(interpolator.yDotK)
interpolator.yDotK[] == orig(interpolator.yDotK[])
interpolator.integrator == orig(interpolator.integrator)
interpolator.integrator.getClass().getName() == orig(interpolator.integrator.getClass().getName())
interpolator.integrator.stepHandlers == orig(interpolator.integrator.stepHandlers)
interpolator.integrator.stepHandlers.getClass().getName() == orig(interpolator.integrator.stepHandlers.getClass().getName())
interpolator.integrator.stepStart == orig(interpolator.integrator.stepStart)
interpolator.integrator.stepSize == orig(interpolator.integrator.stepSize)
interpolator.integrator.eventsHandlersManager == orig(interpolator.integrator.eventsHandlersManager)
interpolator.integrator.name == orig(interpolator.integrator.name)
interpolator.integrator.name.toString == orig(interpolator.integrator.name.toString)
interpolator.integrator.maxEvaluations == orig(interpolator.integrator.maxEvaluations)
interpolator.integrator.evaluations == orig(interpolator.integrator.evaluations)
interpolator.integrator.equations == orig(interpolator.integrator.equations)
interpolator.integrator.equations.getClass().getName() == orig(interpolator.integrator.equations.getClass().getName())
interpolator.currentState == orig(interpolator.currentState)
interpolator.currentState[] == orig(interpolator.currentState[])
interpolator.interpolatedState == orig(interpolator.interpolatedState)
interpolator.interpolatedState[] == orig(interpolator.interpolatedState[])
interpolator.interpolatedDerivatives == orig(interpolator.interpolatedDerivatives)
interpolator.interpolatedDerivatives[] == orig(interpolator.interpolatedDerivatives[])
interpolator.finalized == orig(interpolator.finalized)
interpolator.forward == orig(interpolator.forward)
interpolator.dirtyState == orig(interpolator.dirtyState)
this.integrator == null
this.h one of { 0.0019999999994659845, 0.005999999999999999, Double.NaN }
this.h <= 0.006000000000000227
this.currentState[] elements != 0
this.interpolatedState[] elements != 0
this.interpolatedDerivatives[] elements != 0
this.finalized == true
this.forward == true
interpolator.yDotK[] contains no nulls and has only one value, of length 4
interpolator.yDotK[] elements != null
interpolator.integrator.getClass().getName() == org.apache.commons.math.ode.nonstiff.GillIntegrator.class
interpolator.integrator.stepHandlers has only one value
interpolator.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.stepSize one of { 0.0019999999994659845, 0.005999999999999999 }
interpolator.integrator.eventsHandlersManager has only one value
interpolator.integrator.name has only one value
interpolator.integrator.name.toString == "Gill"
interpolator.integrator.maxEvaluations == 2147483647
interpolator.integrator.equations has only one value
interpolator.integrator.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem3.class
interpolator.h one of { 0.0019999999994659845, 0.005999999999999999, Double.NaN }
interpolator.h <= 0.006000000000000227
interpolator.currentState[] elements != 0
interpolator.interpolatedState[] elements != 0
interpolator.interpolatedDerivatives[] elements != 0
interpolator.finalized == true
interpolator.forward == true
interpolator.dirtyState == true
size(this.currentState[]) == 4
size(this.interpolatedState[]) == 4
size(this.interpolatedDerivatives[]) == 4
size(interpolator.yDotK[]) == 4
size(interpolator.currentState[]) == 4
size(interpolator.interpolatedState[]) == 4
size(interpolator.interpolatedDerivatives[]) == 4
this.yDotK.getClass().getName() != interpolator.integrator.getClass().getName()
this.yDotK.getClass().getName() != interpolator.integrator.stepHandlers.getClass().getName()
this.yDotK.getClass().getName() != interpolator.integrator.equations.getClass().getName()
interpolator.integrator.getClass().getName() != interpolator.integrator.stepHandlers.getClass().getName()
interpolator.integrator.getClass().getName() != interpolator.integrator.equations.getClass().getName()
interpolator.integrator.stepHandlers.getClass().getName() != interpolator.integrator.equations.getClass().getName()
===========================================================================
org.apache.commons.math.ode.nonstiff.GillStepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::ENTER
theta <= 1.0687565205428862
===========================================================================
org.apache.commons.math.ode.nonstiff.GillStepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::EXIT
org.apache.commons.math.ode.nonstiff.GillStepInterpolator.TWO_MINUS_SQRT_2 == orig(org.apache.commons.math.ode.nonstiff.GillStepInterpolator.TWO_MINUS_SQRT_2)
org.apache.commons.math.ode.nonstiff.GillStepInterpolator.TWO_PLUS_SQRT_2 == orig(org.apache.commons.math.ode.nonstiff.GillStepInterpolator.TWO_PLUS_SQRT_2)
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.integrator.stepHandlers == orig(this.integrator.stepHandlers)
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.stepHandlers.getClass().getName())
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.eventsHandlersManager.states.getClass().getName())
this.integrator.stepStart == orig(this.integrator.stepStart)
this.integrator.stepSize == orig(this.integrator.stepSize)
this.integrator.eventsHandlersManager == orig(this.integrator.eventsHandlersManager)
this.integrator.eventsHandlersManager.states == orig(this.integrator.eventsHandlersManager.states)
this.integrator.eventsHandlersManager.states[] == orig(this.integrator.eventsHandlersManager.states[])
this.integrator.eventsHandlersManager.first == orig(this.integrator.eventsHandlersManager.first)
this.integrator.eventsHandlersManager.initialized == orig(this.integrator.eventsHandlersManager.initialized)
this.integrator.name == orig(this.integrator.name)
this.integrator.name.toString == orig(this.integrator.name.toString)
this.integrator.maxEvaluations == orig(this.integrator.maxEvaluations)
this.integrator.evaluations == orig(this.integrator.evaluations)
this.integrator.equations == orig(this.integrator.equations)
this.integrator.equations.getClass().getName() == orig(this.integrator.equations.getClass().getName())
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
size(this.interpolatedState[]) == orig(size(this.interpolatedState[]))
size(this.interpolatedDerivatives[]) == orig(size(this.interpolatedDerivatives[]))
===========================================================================
org.apache.commons.math.ode.nonstiff.GillStepInterpolator.doCopy():::ENTER
this.yDotK[] contains no nulls and has only one value, of length 4
this.integrator.stepHandlers has only one value
this.integrator.stepSize one of { 0.0019999999994659845, 0.005999999999999999 }
this.integrator.eventsHandlersManager has only one value
this.integrator.eventsHandlersManager.states has only one value
this.integrator.eventsHandlersManager.states[] == []
this.integrator.eventsHandlersManager.states[].getClass().getName() == []
this.integrator.equations has only one value
this.integrator.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem3.class
this.h one of { 0.0019999999994659845, 0.005999999999999999, Double.NaN }
this.h <= 0.006000000000000227
this.currentState[] elements != 0
this.interpolatedState[] elements != 0
this.interpolatedDerivatives[] elements != 0
this.finalized == true
this.forward == true
size(this.currentState[]) == 4
size(this.interpolatedState[]) == 4
size(this.interpolatedDerivatives[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.GillStepInterpolator.doCopy():::EXIT
org.apache.commons.math.ode.nonstiff.GillStepInterpolator.TWO_MINUS_SQRT_2 == orig(org.apache.commons.math.ode.nonstiff.GillStepInterpolator.TWO_MINUS_SQRT_2)
org.apache.commons.math.ode.nonstiff.GillStepInterpolator.TWO_PLUS_SQRT_2 == orig(org.apache.commons.math.ode.nonstiff.GillStepInterpolator.TWO_PLUS_SQRT_2)
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.integrator.stepHandlers == orig(this.integrator.stepHandlers)
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.stepHandlers.getClass().getName())
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.eventsHandlersManager.states.getClass().getName())
this.integrator.stepStart == orig(this.integrator.stepStart)
this.integrator.stepSize == orig(this.integrator.stepSize)
this.integrator.eventsHandlersManager == orig(this.integrator.eventsHandlersManager)
this.integrator.eventsHandlersManager.states == orig(this.integrator.eventsHandlersManager.states)
this.integrator.eventsHandlersManager.states[] == orig(this.integrator.eventsHandlersManager.states[])
this.integrator.eventsHandlersManager.first == orig(this.integrator.eventsHandlersManager.first)
this.integrator.eventsHandlersManager.initialized == orig(this.integrator.eventsHandlersManager.initialized)
this.integrator.name == orig(this.integrator.name)
this.integrator.name.toString == orig(this.integrator.name.toString)
this.integrator.maxEvaluations == orig(this.integrator.maxEvaluations)
this.integrator.evaluations == orig(this.integrator.evaluations)
this.integrator.equations == orig(this.integrator.equations)
this.integrator.equations.getClass().getName() == orig(this.integrator.equations.getClass().getName())
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.yDotK[] contains no nulls and has only one value, of length 4
this.integrator.stepHandlers has only one value
this.integrator.stepSize one of { 0.0019999999994659845, 0.005999999999999999 }
this.integrator.eventsHandlersManager has only one value
this.integrator.eventsHandlersManager.states has only one value
this.integrator.eventsHandlersManager.states[] == []
this.integrator.eventsHandlersManager.states[].getClass().getName() == []
this.integrator.equations has only one value
this.integrator.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem3.class
this.h one of { 0.0019999999994659845, 0.005999999999999999, Double.NaN }
this.h <= 0.006000000000000227
this.currentState[] elements != 0
this.interpolatedState[] elements != 0
this.interpolatedDerivatives[] elements != 0
this.finalized == true
this.forward == true
return.getClass().getName() == org.apache.commons.math.ode.nonstiff.GillStepInterpolator.class
size(this.currentState[]) == 4
size(this.interpolatedState[]) == 4
size(this.interpolatedDerivatives[]) == 4
this.yDotK.getClass().getName() != return.getClass().getName()
this.integrator.getClass().getName() != return.getClass().getName()
this.integrator.stepHandlers.getClass().getName() != return.getClass().getName()
this.integrator.equations.getClass().getName() != return.getClass().getName()
===========================================================================
org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest:::OBJECT
===========================================================================
org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest.GillStepInterpolatorTest():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest.serialization():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest.serialization():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest.testDerivativesConsistency():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest.testDerivativesConsistency():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator:::CLASS
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME has only one value
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME.toString == "Gragg-Bulirsch-Stoer"
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator:::OBJECT
this.maxOrder one of { 0, 18 }
this.sequence[] one of { [2, 4, 6, 8, 10, 12, 14, 16, 18], [2, 6, 10, 14, 18, 22, 26, 30, 34] }
this.sequence[] elements >= 2
this.sequence[] sorted by <
this.costPerStep[] one of { [3, 7, 13, 21, 31, 43, 57, 73, 91], [3, 9, 19, 33, 51, 73, 99, 129, 163] }
this.costPerStep[] sorted by <
this.costPerTimeUnit[] elements >= 0.0
this.optimalStep[] elements >= 0.0
this.coeff.getClass().getName() == double[][].class
this.maxChecks one of { 0, 1 }
this.maxIter one of { 0, 2 }
this.stabilityReduction one of { 0.0, 0.5 }
this.stepControl1 one of { 0.0, 0.65 }
this.stepControl2 one of { 0.0, 0.94 }
this.stepControl3 one of { 0.0, 0.02 }
this.stepControl4 one of { 0.0, 4.0 }
this.orderControl1 one of { 0.0, 0.8 }
this.orderControl2 one of { 0.0, 0.9 }
this.mudif one of { 0, 4 }
this.scalAbsoluteTolerance one of { 1.0E-12, 1.0E-10 }
this.scalRelativeTolerance == 0.0
this.vecAbsoluteTolerance == null
this.vecRelativeTolerance == null
this.initialStep == -1.0
this.minStep one of { 0.0, 0.1 }
this.maxStep one of { 10.0, 15.0 }
this.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.eventsHandlersManager.states[] elements != null
this.eventsHandlersManager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
this.eventsHandlersManager.states.getClass().getName() == java.util.ArrayList.class
this.eventsHandlersManager.first.maxCheckInterval one of { 1.0, Infinity }
this.eventsHandlersManager.first.convergence one of { 1.0E-12, 1.5E-7 }
this.eventsHandlersManager.first.maxIterationCount == 1000
this.eventsHandlersManager.first.t0 == 0.0
this.eventsHandlersManager.first.g0 one of { -1.122260016953696, 0.3325666164775135 }
this.eventsHandlersManager.first.pendingEvent == true
this.eventsHandlersManager.first.pendingEventTime one of { 1.9415926557285343, 2.0 }
this.eventsHandlersManager.first.previousEventTime == Double.NaN
this.eventsHandlersManager.first.forward == true
this.eventsHandlersManager.first.nextAction == 3
this.name has only one value
this.name.toString == "Gragg-Bulirsch-Stoer"
this.maxEvaluations == 2147483647
this.evaluations >= 0
size(this.sequence[]) == 9
size(this.costPerStep[]) == 9
size(this.costPerTimeUnit[]) == 9
size(this.optimalStep[]) == 9
size(this.coeff[]) == 9
size(this.eventsHandlersManager.states[]) one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.GraggBulirschStoerIntegrator(double, double, double, double):::ENTER
minStep one of { 0.0, 0.1 }
maxStep one of { 10.0, 15.0 }
scalAbsoluteTolerance one of { 1.0E-12, 1.0E-10 }
scalRelativeTolerance == 0.0
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.GraggBulirschStoerIntegrator(double, double, double, double):::EXIT
this.maxOrder == 18
this.sequence[] == [2, 4, 6, 8, 10, 12, 14, 16, 18]
this.costPerStep[] == [3, 7, 13, 21, 31, 43, 57, 73, 91]
this.costPerTimeUnit[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.costPerTimeUnit[] elements == 0.0
this.optimalStep[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.optimalStep[] elements == 0.0
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction == 0.5
this.stepControl1 == 0.65
this.stepControl2 == 0.94
this.stepControl3 == 0.02
this.stepControl4 == 4.0
this.orderControl1 == 0.8
this.orderControl2 == 0.9
this.denseOutput == false
this.useInterpolationError == true
this.mudif == 4
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 1.0 }
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.evaluations == 0
this.equations == null
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.addEventHandler(org.apache.commons.math.ode.events.EventHandler, double, double, int):::ENTER
this.maxOrder == 18
this.costPerTimeUnit[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.costPerTimeUnit[] elements == 0.0
this.optimalStep[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.optimalStep[] elements == 0.0
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction == 0.5
this.stepControl1 == 0.65
this.stepControl2 == 0.94
this.stepControl3 == 0.02
this.stepControl4 == 4.0
this.orderControl1 == 0.8
this.orderControl2 == 0.9
this.useInterpolationError == true
this.mudif == 4
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 1.0 }
this.eventsHandlersManager.states[] elements has only one value
this.eventsHandlersManager.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState] }
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.evaluations == 0
this.equations == null
maxCheckInterval one of { 1.0, Infinity }
convergence one of { 1.0E-12, 1.5E-7 }
maxIterationCount == 1000
size(this.eventsHandlersManager.states[]) one of { 0, 1 }
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.addEventHandler(org.apache.commons.math.ode.events.EventHandler, double, double, int):::EXIT
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME == orig(org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME)
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME.toString == orig(org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME.toString)
this.maxOrder == orig(this.maxOrder)
this.sequence == orig(this.sequence)
this.costPerStep == orig(this.costPerStep)
this.costPerTimeUnit == orig(this.costPerTimeUnit)
this.costPerTimeUnit[] == orig(this.costPerTimeUnit[])
this.optimalStep == orig(this.optimalStep)
this.optimalStep[] == orig(this.optimalStep[])
this.coeff == orig(this.coeff)
this.coeff.getClass().getName() == orig(this.coeff.getClass().getName())
this.performTest == orig(this.performTest)
this.maxChecks == orig(this.maxChecks)
this.maxIter == orig(this.maxIter)
this.stabilityReduction == orig(this.stabilityReduction)
this.stepControl1 == orig(this.stepControl1)
this.stepControl2 == orig(this.stepControl2)
this.stepControl3 == orig(this.stepControl3)
this.stepControl4 == orig(this.stepControl4)
this.orderControl1 == orig(this.orderControl1)
this.orderControl2 == orig(this.orderControl2)
this.useInterpolationError == orig(this.useInterpolationError)
this.mudif == orig(this.mudif)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
size(this.sequence[]) == orig(size(this.sequence[]))
size(this.costPerStep[]) == orig(size(this.costPerStep[]))
size(this.coeff[]) == orig(size(this.coeff[]))
size(this.eventsHandlersManager.states[])-1 == orig(size(this.eventsHandlersManager.states[]))
this.maxOrder == 18
this.sequence[] == [2, 6, 10, 14, 18, 22, 26, 30, 34]
this.costPerStep[] == [3, 9, 19, 33, 51, 73, 99, 129, 163]
this.costPerTimeUnit[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.costPerTimeUnit[] elements == 0.0
this.optimalStep[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.optimalStep[] elements == 0.0
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction == 0.5
this.stepControl1 == 0.65
this.stepControl2 == 0.94
this.stepControl3 == 0.02
this.stepControl4 == 4.0
this.orderControl1 == 0.8
this.orderControl2 == 0.9
this.denseOutput == true
this.useInterpolationError == true
this.mudif == 4
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 1.0 }
this.eventsHandlersManager.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.evaluations == 0
this.equations == null
size(this.eventsHandlersManager.states[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.addStepHandler(org.apache.commons.math.ode.sampling.StepHandler):::ENTER
this has only one value
this.maxOrder == 18
this.sequence has only one value
this.sequence[] == [2, 4, 6, 8, 10, 12, 14, 16, 18]
this.costPerStep has only one value
this.costPerStep[] == [3, 7, 13, 21, 31, 43, 57, 73, 91]
this.costPerTimeUnit has only one value
this.costPerTimeUnit[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.costPerTimeUnit[] elements == 0.0
this.optimalStep has only one value
this.optimalStep[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.optimalStep[] elements == 0.0
this.coeff has only one value
this.coeff[] has only one value, of length 9
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction == 0.5
this.stepControl1 == 0.65
this.stepControl2 == 0.94
this.stepControl3 == 0.02
this.stepControl4 == 4.0
this.orderControl1 == 0.8
this.orderControl2 == 0.9
this.denseOutput == false
this.useInterpolationError == true
this.mudif == 4
this.scalAbsoluteTolerance == 1.0E-10
this.minStep == 0.0
this.maxStep == 15.0
this.stepHandlers has only one value
this.stepStart == Double.NaN
this.stepSize == 0.0
this.eventsHandlersManager has only one value
this.eventsHandlersManager.states has only one value
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.evaluations == 0
this.equations == null
handler has only one value
handler.getClass().getName() == org.apache.commons.math.ode.TestProblemHandler.class
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.addStepHandler(org.apache.commons.math.ode.sampling.StepHandler):::EXIT
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME == orig(org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME)
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME.toString == orig(org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME.toString)
this.maxOrder == orig(this.maxOrder)
this.sequence == orig(this.sequence)
this.costPerStep == orig(this.costPerStep)
this.costPerTimeUnit == orig(this.costPerTimeUnit)
this.costPerTimeUnit[] == orig(this.costPerTimeUnit[])
this.optimalStep == orig(this.optimalStep)
this.optimalStep[] == orig(this.optimalStep[])
this.coeff == orig(this.coeff)
this.coeff.getClass().getName() == orig(this.coeff.getClass().getName())
this.performTest == orig(this.performTest)
this.maxChecks == orig(this.maxChecks)
this.maxIter == orig(this.maxIter)
this.stabilityReduction == orig(this.stabilityReduction)
this.stepControl1 == orig(this.stepControl1)
this.stepControl2 == orig(this.stepControl2)
this.stepControl3 == orig(this.stepControl3)
this.stepControl4 == orig(this.stepControl4)
this.orderControl1 == orig(this.orderControl1)
this.orderControl2 == orig(this.orderControl2)
this.useInterpolationError == orig(this.useInterpolationError)
this.mudif == orig(this.mudif)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
size(this.sequence[]) == orig(size(this.sequence[]))
size(this.costPerStep[]) == orig(size(this.costPerStep[]))
size(this.coeff[]) == orig(size(this.coeff[]))
this.maxOrder == 18
this.sequence has only one value
this.sequence[] == [2, 6, 10, 14, 18, 22, 26, 30, 34]
this.costPerStep has only one value
this.costPerStep[] == [3, 9, 19, 33, 51, 73, 99, 129, 163]
this.costPerTimeUnit has only one value
this.costPerTimeUnit[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.costPerTimeUnit[] elements == 0.0
this.optimalStep has only one value
this.optimalStep[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.optimalStep[] elements == 0.0
this.coeff has only one value
this.coeff[] has only one value, of length 9
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction == 0.5
this.stepControl1 == 0.65
this.stepControl2 == 0.94
this.stepControl3 == 0.02
this.stepControl4 == 4.0
this.orderControl1 == 0.8
this.orderControl2 == 0.9
this.denseOutput == true
this.useInterpolationError == true
this.mudif == 4
this.scalAbsoluteTolerance == 1.0E-10
this.minStep == 0.0
this.maxStep == 15.0
this.stepHandlers has only one value
this.stepStart == Double.NaN
this.stepSize == 0.0
this.eventsHandlersManager has only one value
this.eventsHandlersManager.states has only one value
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.evaluations == 0
this.equations == null
this.sequence[] - 2 * orig(this.sequence[]) + 2 == 0
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.extrapolate(int, int, double[][], double[]):::ENTER
this.maxOrder == 18
this.sequence[] == [2, 6, 10, 14, 18, 22, 26, 30, 34]
this.costPerStep[] == [3, 9, 19, 33, 51, 73, 99, 129, 163]
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction == 0.5
this.stepControl1 == 0.65
this.stepControl2 == 0.94
this.stepControl3 == 0.02
this.stepControl4 == 4.0
this.orderControl1 == 0.8
this.orderControl2 == 0.9
this.denseOutput == true
this.useInterpolationError == true
this.mudif == 4
this.eventsHandlersManager.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
offset >= 0
k >= 1
diag.getClass().getName() == double[][].class
diag[] elements != null
size(this.eventsHandlersManager.states[]) one of { 1, 2 }
size(diag[]) == 8
size(last[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.extrapolate(int, int, double[][], double[]):::EXIT
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME == orig(org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME)
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME.toString == orig(org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME.toString)
this.maxOrder == orig(this.maxOrder)
this.sequence == orig(this.sequence)
this.sequence[] == orig(this.sequence[])
this.costPerStep == orig(this.costPerStep)
this.costPerStep[] == orig(this.costPerStep[])
this.costPerTimeUnit == orig(this.costPerTimeUnit)
this.costPerTimeUnit[] == orig(this.costPerTimeUnit[])
this.optimalStep == orig(this.optimalStep)
this.optimalStep[] == orig(this.optimalStep[])
this.coeff == orig(this.coeff)
this.coeff.getClass().getName() == orig(this.coeff.getClass().getName())
this.coeff[] == orig(this.coeff[])
this.performTest == orig(this.performTest)
this.maxChecks == orig(this.maxChecks)
this.maxIter == orig(this.maxIter)
this.stabilityReduction == orig(this.stabilityReduction)
this.stepControl1 == orig(this.stepControl1)
this.stepControl2 == orig(this.stepControl2)
this.stepControl3 == orig(this.stepControl3)
this.stepControl4 == orig(this.stepControl4)
this.orderControl1 == orig(this.orderControl1)
this.orderControl2 == orig(this.orderControl2)
this.denseOutput == orig(this.denseOutput)
this.useInterpolationError == orig(this.useInterpolationError)
this.mudif == orig(this.mudif)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.first.handler == orig(this.eventsHandlersManager.first.handler)
this.eventsHandlersManager.first.handler.getClass().getName() == orig(this.eventsHandlersManager.first.handler.getClass().getName())
this.eventsHandlersManager.first.maxCheckInterval == orig(this.eventsHandlersManager.first.maxCheckInterval)
this.eventsHandlersManager.first.convergence == orig(this.eventsHandlersManager.first.convergence)
this.eventsHandlersManager.first.maxIterationCount == orig(this.eventsHandlersManager.first.maxIterationCount)
this.eventsHandlersManager.first.t0 == orig(this.eventsHandlersManager.first.t0)
this.eventsHandlersManager.first.g0 == orig(this.eventsHandlersManager.first.g0)
this.eventsHandlersManager.first.g0Positive == orig(this.eventsHandlersManager.first.g0Positive)
this.eventsHandlersManager.first.pendingEvent == orig(this.eventsHandlersManager.first.pendingEvent)
this.eventsHandlersManager.first.pendingEventTime == orig(this.eventsHandlersManager.first.pendingEventTime)
this.eventsHandlersManager.first.forward == orig(this.eventsHandlersManager.first.forward)
this.eventsHandlersManager.first.increasing == orig(this.eventsHandlersManager.first.increasing)
this.eventsHandlersManager.first.nextAction == orig(this.eventsHandlersManager.first.nextAction)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
diag[] == orig(diag[])
this.maxOrder == 18
this.sequence[] == [2, 6, 10, 14, 18, 22, 26, 30, 34]
this.costPerStep[] == [3, 9, 19, 33, 51, 73, 99, 129, 163]
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction == 0.5
this.stepControl1 == 0.65
this.stepControl2 == 0.94
this.stepControl3 == 0.02
this.stepControl4 == 4.0
this.orderControl1 == 0.8
this.orderControl2 == 0.9
this.denseOutput == true
this.useInterpolationError == true
this.mudif == 4
this.eventsHandlersManager.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
diag[] elements != null
size(this.eventsHandlersManager.states[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.initializeArrays():::ENTER
this.maxOrder == 18
this.costPerTimeUnit[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.costPerTimeUnit[] elements == 0.0
this.optimalStep[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.optimalStep[] elements == 0.0
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction == 0.5
this.stepControl1 == 0.65
this.stepControl2 == 0.94
this.stepControl3 == 0.02
this.stepControl4 == 4.0
this.orderControl1 == 0.8
this.orderControl2 == 0.9
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 1.0 }
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.evaluations == 0
this.equations == null
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.initializeArrays():::EXIT
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME == orig(org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME)
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME.toString == orig(org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME.toString)
this.maxOrder == orig(this.maxOrder)
this.coeff.getClass().getName() == orig(this.coeff.getClass().getName())
this.performTest == orig(this.performTest)
this.maxChecks == orig(this.maxChecks)
this.maxIter == orig(this.maxIter)
this.stabilityReduction == orig(this.stabilityReduction)
this.stepControl1 == orig(this.stepControl1)
this.stepControl2 == orig(this.stepControl2)
this.stepControl3 == orig(this.stepControl3)
this.stepControl4 == orig(this.stepControl4)
this.orderControl1 == orig(this.orderControl1)
this.orderControl2 == orig(this.orderControl2)
this.denseOutput == orig(this.denseOutput)
this.useInterpolationError == orig(this.useInterpolationError)
this.mudif == orig(this.mudif)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
size(this.sequence[]) == orig(size(this.sequence[]))
size(this.costPerStep[]) == orig(size(this.costPerStep[]))
size(this.coeff[]) == orig(size(this.coeff[]))
this.maxOrder == 18
this.costPerTimeUnit[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.costPerTimeUnit[] elements == 0.0
this.optimalStep[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.optimalStep[] elements == 0.0
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction == 0.5
this.stepControl1 == 0.65
this.stepControl2 == 0.94
this.stepControl3 == 0.02
this.stepControl4 == 4.0
this.orderControl1 == 0.8
this.orderControl2 == 0.9
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 1.0 }
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.evaluations == 0
this.equations == null
this.costPerTimeUnit[] == orig(this.costPerTimeUnit[]) (elementwise)
this.costPerTimeUnit[] is the reverse of orig(this.costPerTimeUnit[])
this.optimalStep[] == orig(this.optimalStep[]) (elementwise)
this.optimalStep[] is the reverse of orig(this.optimalStep[])
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.rescale(double[], double[], double[]):::ENTER
this.maxOrder == 18
this.sequence[] == [2, 6, 10, 14, 18, 22, 26, 30, 34]
this.costPerStep[] == [3, 9, 19, 33, 51, 73, 99, 129, 163]
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction == 0.5
this.stepControl1 == 0.65
this.stepControl2 == 0.94
this.stepControl3 == 0.02
this.stepControl4 == 4.0
this.orderControl1 == 0.8
this.orderControl2 == 0.9
this.denseOutput == true
this.useInterpolationError == true
this.mudif == 4
this.eventsHandlersManager.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
y1[] sorted by >
y2[] sorted by >
scale[] elements == 0.0
size(this.eventsHandlersManager.states[]) one of { 1, 2 }
size(y1[]) one of { 1, 2 }
size(y2[]) one of { 1, 2 }
size(scale[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.rescale(double[], double[], double[]):::EXIT
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME == orig(org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME)
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME.toString == orig(org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME.toString)
this.maxOrder == orig(this.maxOrder)
this.sequence == orig(this.sequence)
this.sequence[] == orig(this.sequence[])
this.costPerStep == orig(this.costPerStep)
this.costPerStep[] == orig(this.costPerStep[])
this.costPerTimeUnit == orig(this.costPerTimeUnit)
this.costPerTimeUnit[] == orig(this.costPerTimeUnit[])
this.optimalStep == orig(this.optimalStep)
this.optimalStep[] == orig(this.optimalStep[])
this.coeff == orig(this.coeff)
this.coeff.getClass().getName() == orig(this.coeff.getClass().getName())
this.coeff[] == orig(this.coeff[])
this.performTest == orig(this.performTest)
this.maxChecks == orig(this.maxChecks)
this.maxIter == orig(this.maxIter)
this.stabilityReduction == orig(this.stabilityReduction)
this.stepControl1 == orig(this.stepControl1)
this.stepControl2 == orig(this.stepControl2)
this.stepControl3 == orig(this.stepControl3)
this.stepControl4 == orig(this.stepControl4)
this.orderControl1 == orig(this.orderControl1)
this.orderControl2 == orig(this.orderControl2)
this.denseOutput == orig(this.denseOutput)
this.useInterpolationError == orig(this.useInterpolationError)
this.mudif == orig(this.mudif)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.first.handler == orig(this.eventsHandlersManager.first.handler)
this.eventsHandlersManager.first.handler.getClass().getName() == orig(this.eventsHandlersManager.first.handler.getClass().getName())
this.eventsHandlersManager.first.maxCheckInterval == orig(this.eventsHandlersManager.first.maxCheckInterval)
this.eventsHandlersManager.first.convergence == orig(this.eventsHandlersManager.first.convergence)
this.eventsHandlersManager.first.maxIterationCount == orig(this.eventsHandlersManager.first.maxIterationCount)
this.eventsHandlersManager.first.t0 == orig(this.eventsHandlersManager.first.t0)
this.eventsHandlersManager.first.g0 == orig(this.eventsHandlersManager.first.g0)
this.eventsHandlersManager.first.g0Positive == orig(this.eventsHandlersManager.first.g0Positive)
this.eventsHandlersManager.first.pendingEvent == orig(this.eventsHandlersManager.first.pendingEvent)
this.eventsHandlersManager.first.pendingEventTime == orig(this.eventsHandlersManager.first.pendingEventTime)
this.eventsHandlersManager.first.forward == orig(this.eventsHandlersManager.first.forward)
this.eventsHandlersManager.first.increasing == orig(this.eventsHandlersManager.first.increasing)
this.eventsHandlersManager.first.nextAction == orig(this.eventsHandlersManager.first.nextAction)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
y1[] == orig(y1[])
y2[] == orig(y2[])
this.maxOrder == 18
this.sequence[] == [2, 6, 10, 14, 18, 22, 26, 30, 34]
this.costPerStep[] == [3, 9, 19, 33, 51, 73, 99, 129, 163]
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction == 0.5
this.stepControl1 == 0.65
this.stepControl2 == 0.94
this.stepControl3 == 0.02
this.stepControl4 == 4.0
this.orderControl1 == 0.8
this.orderControl2 == 0.9
this.denseOutput == true
this.useInterpolationError == true
this.mudif == 4
this.eventsHandlersManager.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
y1[] sorted by >
y2[] sorted by >
size(this.eventsHandlersManager.states[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.setInterpolationControl(boolean, int):::ENTER
this.maxOrder == 18
this.sequence[] == [2, 4, 6, 8, 10, 12, 14, 16, 18]
this.costPerStep[] == [3, 7, 13, 21, 31, 43, 57, 73, 91]
this.costPerTimeUnit[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.costPerTimeUnit[] elements == 0.0
this.optimalStep[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.optimalStep[] elements == 0.0
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction == 0.5
this.stepControl1 == 0.65
this.stepControl2 == 0.94
this.stepControl3 == 0.02
this.stepControl4 == 4.0
this.orderControl1 == 0.8
this.orderControl2 == 0.9
this.denseOutput == false
this.useInterpolationError == false
this.mudif == 0
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 1.0 }
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.evaluations == 0
this.equations == null
useInterpolationErrorForControl == true
mudifControlParameter == -1
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.setInterpolationControl(boolean, int):::EXIT
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME == orig(org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME)
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME.toString == orig(org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME.toString)
this.maxOrder == orig(this.maxOrder)
this.sequence == orig(this.sequence)
this.sequence[] == orig(this.sequence[])
this.costPerStep == orig(this.costPerStep)
this.costPerStep[] == orig(this.costPerStep[])
this.costPerTimeUnit == orig(this.costPerTimeUnit)
this.costPerTimeUnit[] == orig(this.costPerTimeUnit[])
this.optimalStep == orig(this.optimalStep)
this.optimalStep[] == orig(this.optimalStep[])
this.coeff == orig(this.coeff)
this.coeff.getClass().getName() == orig(this.coeff.getClass().getName())
this.coeff[] == orig(this.coeff[])
this.performTest == orig(this.performTest)
this.maxChecks == orig(this.maxChecks)
this.maxIter == orig(this.maxIter)
this.stabilityReduction == orig(this.stabilityReduction)
this.stepControl1 == orig(this.stepControl1)
this.stepControl2 == orig(this.stepControl2)
this.stepControl3 == orig(this.stepControl3)
this.stepControl4 == orig(this.stepControl4)
this.orderControl1 == orig(this.orderControl1)
this.orderControl2 == orig(this.orderControl2)
this.denseOutput == orig(this.denseOutput)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.maxOrder == 18
this.sequence[] == [2, 4, 6, 8, 10, 12, 14, 16, 18]
this.costPerStep[] == [3, 7, 13, 21, 31, 43, 57, 73, 91]
this.costPerTimeUnit[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.costPerTimeUnit[] elements == 0.0
this.optimalStep[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.optimalStep[] elements == 0.0
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction == 0.5
this.stepControl1 == 0.65
this.stepControl2 == 0.94
this.stepControl3 == 0.02
this.stepControl4 == 4.0
this.orderControl1 == 0.8
this.orderControl2 == 0.9
this.denseOutput == false
this.useInterpolationError == true
this.mudif == 4
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 1.0 }
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.evaluations == 0
this.equations == null
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.setOrderControl(int, double, double):::ENTER
this.maxOrder == 0
this.sequence == null
this.costPerStep == null
this.costPerTimeUnit == null
this.optimalStep == null
this.coeff == null
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction == 0.5
this.stepControl1 == 0.65
this.stepControl2 == 0.94
this.stepControl3 == 0.02
this.stepControl4 == 4.0
this.orderControl1 == 0.0
this.orderControl2 == 0.0
this.denseOutput == false
this.useInterpolationError == false
this.mudif == 0
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 1.0 }
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.evaluations == 0
this.equations == null
maximalOrder == -1
control1 == -1.0
control2 == -1.0
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.setOrderControl(int, double, double):::EXIT
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME == orig(org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME)
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME.toString == orig(org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME.toString)
this.performTest == orig(this.performTest)
this.maxChecks == orig(this.maxChecks)
this.maxIter == orig(this.maxIter)
this.stabilityReduction == orig(this.stabilityReduction)
this.stepControl1 == orig(this.stepControl1)
this.stepControl2 == orig(this.stepControl2)
this.stepControl3 == orig(this.stepControl3)
this.stepControl4 == orig(this.stepControl4)
this.denseOutput == orig(this.denseOutput)
this.useInterpolationError == orig(this.useInterpolationError)
this.mudif == orig(this.mudif)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.maxOrder == 18
this.sequence[] == [2, 4, 6, 8, 10, 12, 14, 16, 18]
this.costPerStep[] == [3, 7, 13, 21, 31, 43, 57, 73, 91]
this.costPerTimeUnit[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.costPerTimeUnit[] elements == 0.0
this.optimalStep[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.optimalStep[] elements == 0.0
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction == 0.5
this.stepControl1 == 0.65
this.stepControl2 == 0.94
this.stepControl3 == 0.02
this.stepControl4 == 4.0
this.orderControl1 == 0.8
this.orderControl2 == 0.9
this.denseOutput == false
this.useInterpolationError == false
this.mudif == 0
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 1.0 }
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.evaluations == 0
this.equations == null
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.setStabilityCheck(boolean, int, int, double):::ENTER
this.maxOrder == 0
this.sequence == null
this.costPerStep == null
this.costPerTimeUnit == null
this.optimalStep == null
this.coeff == null
this.performTest == false
this.maxChecks == 0
this.maxIter == 0
this.stabilityReduction == 0.0
this.stepControl1 == 0.0
this.stepControl2 == 0.0
this.stepControl3 == 0.0
this.stepControl4 == 0.0
this.orderControl1 == 0.0
this.orderControl2 == 0.0
this.denseOutput == false
this.useInterpolationError == false
this.mudif == 0
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 1.0 }
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.evaluations == 0
this.equations == null
performStabilityCheck == true
maxNumIter == -1
maxNumChecks == -1
stepsizeReductionFactor == -1.0
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.setStabilityCheck(boolean, int, int, double):::EXIT
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME == orig(org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME)
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME.toString == orig(org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME.toString)
this.maxOrder == orig(this.maxOrder)
this.sequence == orig(this.sequence)
this.costPerStep == orig(this.costPerStep)
this.costPerTimeUnit == orig(this.costPerTimeUnit)
this.optimalStep == orig(this.optimalStep)
this.coeff == orig(this.coeff)
this.stepControl1 == orig(this.stepControl1)
this.stepControl2 == orig(this.stepControl2)
this.stepControl3 == orig(this.stepControl3)
this.stepControl4 == orig(this.stepControl4)
this.orderControl1 == orig(this.orderControl1)
this.orderControl2 == orig(this.orderControl2)
this.denseOutput == orig(this.denseOutput)
this.useInterpolationError == orig(this.useInterpolationError)
this.mudif == orig(this.mudif)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.maxOrder == 0
this.sequence == null
this.costPerStep == null
this.costPerTimeUnit == null
this.optimalStep == null
this.coeff == null
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction == 0.5
this.stepControl1 == 0.0
this.stepControl2 == 0.0
this.stepControl3 == 0.0
this.stepControl4 == 0.0
this.orderControl1 == 0.0
this.orderControl2 == 0.0
this.denseOutput == false
this.useInterpolationError == false
this.mudif == 0
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 1.0 }
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.evaluations == 0
this.equations == null
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.setStepsizeControl(double, double, double, double):::ENTER
this.maxOrder == 0
this.sequence == null
this.costPerStep == null
this.costPerTimeUnit == null
this.optimalStep == null
this.coeff == null
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction == 0.5
this.stepControl1 == 0.0
this.stepControl2 == 0.0
this.stepControl3 == 0.0
this.stepControl4 == 0.0
this.orderControl1 == 0.0
this.orderControl2 == 0.0
this.denseOutput == false
this.useInterpolationError == false
this.mudif == 0
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 1.0 }
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.evaluations == 0
this.equations == null
control1 == -1.0
control2 == -1.0
control3 == -1.0
control4 == -1.0
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.setStepsizeControl(double, double, double, double):::EXIT
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME == orig(org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME)
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME.toString == orig(org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME.toString)
this.maxOrder == orig(this.maxOrder)
this.sequence == orig(this.sequence)
this.costPerStep == orig(this.costPerStep)
this.costPerTimeUnit == orig(this.costPerTimeUnit)
this.optimalStep == orig(this.optimalStep)
this.coeff == orig(this.coeff)
this.performTest == orig(this.performTest)
this.maxChecks == orig(this.maxChecks)
this.maxIter == orig(this.maxIter)
this.stabilityReduction == orig(this.stabilityReduction)
this.orderControl1 == orig(this.orderControl1)
this.orderControl2 == orig(this.orderControl2)
this.denseOutput == orig(this.denseOutput)
this.useInterpolationError == orig(this.useInterpolationError)
this.mudif == orig(this.mudif)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.maxOrder == 0
this.sequence == null
this.costPerStep == null
this.costPerTimeUnit == null
this.optimalStep == null
this.coeff == null
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction == 0.5
this.stepControl1 == 0.65
this.stepControl2 == 0.94
this.stepControl3 == 0.02
this.stepControl4 == 4.0
this.orderControl1 == 0.0
this.orderControl2 == 0.0
this.denseOutput == false
this.useInterpolationError == false
this.mudif == 0
this.stepStart == Double.NaN
this.stepSize one of { 0.0, 1.0 }
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.evaluations == 0
this.equations == null
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.tryStep(double, double[], double, int, double[], double[][], double[], double[], double[]):::ENTER
this.maxOrder == 18
this.sequence[] == [2, 6, 10, 14, 18, 22, 26, 30, 34]
this.costPerStep[] == [3, 9, 19, 33, 51, 73, 99, 129, 163]
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction == 0.5
this.stepControl1 == 0.65
this.stepControl2 == 0.94
this.stepControl3 == 0.02
this.stepControl4 == 4.0
this.orderControl1 == 0.8
this.orderControl2 == 0.9
this.denseOutput == true
this.useInterpolationError == true
this.mudif == 4
this.eventsHandlersManager.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
y0[] sorted by >
k >= 0
f.getClass().getName() == double[][].class
f[] elements != null
yTmp[] sorted by >
size(this.eventsHandlersManager.states[]) one of { 1, 2 }
size(y0[]) one of { 1, 2 }
size(scale[]) one of { 1, 2 }
size(yMiddle[]) one of { 1, 2 }
size(yEnd[]) one of { 1, 2 }
size(yTmp[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.tryStep(double, double[], double, int, double[], double[][], double[], double[], double[]):::EXIT513
this.sequence has only one value
this.costPerStep has only one value
this.costPerTimeUnit has only one value
this.costPerTimeUnit[] == [0.0, 129.87069575844808, 162.73948031087588, 109.15357887491346, 68.29878807920053, 53.068100913144285, 0.0, 0.0, 0.0]
this.optimalStep has only one value
this.optimalStep[] == [0.0, 0.06929969803765028, 0.11675101803019725, 0.30232632168494405, 0.7467189599449329, 1.3755909622520304, 0.0, 0.0, 0.0]
this.coeff has only one value
this.coeff[] has only one value, of length 9
this.scalAbsoluteTolerance == 1.0E-10
this.minStep == 0.0
this.maxStep == 15.0
this.stepHandlers has only one value
this.stepStart == 1.6025688533820936
this.stepSize == 1.865527469355493
this.eventsHandlersManager has only one value
this.eventsHandlersManager.states has only one value
this.eventsHandlersManager.states[] contains no nulls and has only one value, of length 2
this.eventsHandlersManager.states[].getClass().getName() == [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState]
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == true
this.evaluations == 161
this.equations has only one value
this.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem4.class
y0[] == [0.3325666164775135, -0.943079766299793]
y0[] elements one of { -0.943079766299793, 0.3325666164775135 }
scale[] == [1.0097791330381111E-10, 1.009430797662998E-10]
scale[] elements one of { 1.009430797662998E-10, 1.0097791330381111E-10 }
f[] contains no nulls and has only one value, of length 3
yMiddle[] == [-0.5471039884352977, -1.2532858455145002]
yMiddle[] elements one of { -1.2532858455145002, -0.5471039884352977 }
yEnd[] == [-2.0054725552842116, 0.07755775272020493]
yEnd[] elements one of { -2.0054725552842116, 0.07755775272020493 }
yTmp[] == [-0.5471039884352977, -1.2532858455145002]
yTmp[] elements one of { -1.2532858455145002, -0.5471039884352977 }
return == false
orig(this) has only one value
orig(this.evaluations) == 159
orig(t0) == 1.6025688533820936
orig(y0) has only one value
orig(step) == 1.865527469355493
orig(k) == 0
orig(scale) has only one value
orig(f) has only one value
orig(yMiddle) has only one value
orig(yMiddle[]) == [0.7510350646094359, -0.6602623203893759]
orig(yMiddle[]) elements one of { -0.6602623203893759, 0.7510350646094359 }
orig(yEnd) has only one value
orig(yEnd[]) == [0.3325666164775135, -0.943079766299793]
orig(yEnd[]) elements one of { -0.943079766299793, 0.3325666164775135 }
orig(yTmp) has only one value
orig(yTmp[]) == [0.3762364463803898, -0.9268904197618257]
orig(yTmp[]) elements one of { -0.9268904197618257, 0.3762364463803898 }
size(this.eventsHandlersManager.states[]) == 2
orig(size(y0[])) == 2
orig(size(scale[])) == 2
orig(size(f[])) == 3
orig(size(yMiddle[])) == 2
orig(size(yEnd[])) == 2
orig(size(yTmp[])) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.tryStep(double, double[], double, int, double[], double[][], double[], double[], double[]):::EXIT513;condition="not(return == true)"
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.tryStep(double, double[], double, int, double[], double[][], double[], double[], double[]):::EXIT524
yEnd[] sorted by >
return == true
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.tryStep(double, double[], double, int, double[], double[][], double[], double[], double[]):::EXIT524;condition="return == true"
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.tryStep(double, double[], double, int, double[], double[][], double[], double[], double[]):::EXIT
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME == orig(org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME)
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME.toString == orig(org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.METHOD_NAME.toString)
this.maxOrder == orig(this.maxOrder)
this.sequence == orig(this.sequence)
this.sequence[] == orig(this.sequence[])
this.costPerStep == orig(this.costPerStep)
this.costPerStep[] == orig(this.costPerStep[])
this.costPerTimeUnit == orig(this.costPerTimeUnit)
this.costPerTimeUnit[] == orig(this.costPerTimeUnit[])
this.optimalStep == orig(this.optimalStep)
this.optimalStep[] == orig(this.optimalStep[])
this.coeff == orig(this.coeff)
this.coeff.getClass().getName() == orig(this.coeff.getClass().getName())
this.coeff[] == orig(this.coeff[])
this.performTest == orig(this.performTest)
this.maxChecks == orig(this.maxChecks)
this.maxIter == orig(this.maxIter)
this.stabilityReduction == orig(this.stabilityReduction)
this.stepControl1 == orig(this.stepControl1)
this.stepControl2 == orig(this.stepControl2)
this.stepControl3 == orig(this.stepControl3)
this.stepControl4 == orig(this.stepControl4)
this.orderControl1 == orig(this.orderControl1)
this.orderControl2 == orig(this.orderControl2)
this.denseOutput == orig(this.denseOutput)
this.useInterpolationError == orig(this.useInterpolationError)
this.mudif == orig(this.mudif)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.first.handler == orig(this.eventsHandlersManager.first.handler)
this.eventsHandlersManager.first.handler.getClass().getName() == orig(this.eventsHandlersManager.first.handler.getClass().getName())
this.eventsHandlersManager.first.maxCheckInterval == orig(this.eventsHandlersManager.first.maxCheckInterval)
this.eventsHandlersManager.first.convergence == orig(this.eventsHandlersManager.first.convergence)
this.eventsHandlersManager.first.maxIterationCount == orig(this.eventsHandlersManager.first.maxIterationCount)
this.eventsHandlersManager.first.t0 == orig(this.eventsHandlersManager.first.t0)
this.eventsHandlersManager.first.g0 == orig(this.eventsHandlersManager.first.g0)
this.eventsHandlersManager.first.g0Positive == orig(this.eventsHandlersManager.first.g0Positive)
this.eventsHandlersManager.first.pendingEvent == orig(this.eventsHandlersManager.first.pendingEvent)
this.eventsHandlersManager.first.pendingEventTime == orig(this.eventsHandlersManager.first.pendingEventTime)
this.eventsHandlersManager.first.forward == orig(this.eventsHandlersManager.first.forward)
this.eventsHandlersManager.first.increasing == orig(this.eventsHandlersManager.first.increasing)
this.eventsHandlersManager.first.nextAction == orig(this.eventsHandlersManager.first.nextAction)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
y0[] == orig(y0[])
scale[] == orig(scale[])
f[] == orig(f[])
(return == false)  ==>  (f[] contains no nulls and has only one value, of length 3)
(return == false)  ==>  (orig(f) has only one value)
(return == false)  ==>  (orig(k) == 0)
(return == false)  ==>  (orig(scale) has only one value)
(return == false)  ==>  (orig(size(f[])) == 3)
(return == false)  ==>  (orig(size(scale[])) == 2)
(return == false)  ==>  (orig(size(y0[])) == 2)
(return == false)  ==>  (orig(size(yEnd[])) == 2)
(return == false)  ==>  (orig(size(yMiddle[])) == 2)
(return == false)  ==>  (orig(size(yTmp[])) == 2)
(return == false)  ==>  (orig(step) == 1.865527469355493)
(return == false)  ==>  (orig(t0) == 1.6025688533820936)
(return == false)  ==>  (orig(this) has only one value)
(return == false)  ==>  (orig(this.evaluations) == 159)
(return == false)  ==>  (orig(y0) has only one value)
(return == false)  ==>  (orig(yEnd) has only one value)
(return == false)  ==>  (orig(yEnd[]) == [0.3325666164775135, -0.943079766299793])
(return == false)  ==>  (orig(yEnd[]) elements one of { -0.943079766299793, 0.3325666164775135 })
(return == false)  ==>  (orig(yMiddle) has only one value)
(return == false)  ==>  (orig(yMiddle[]) == [0.7510350646094359, -0.6602623203893759])
(return == false)  ==>  (orig(yMiddle[]) elements one of { -0.6602623203893759, 0.7510350646094359 })
(return == false)  ==>  (orig(yTmp) has only one value)
(return == false)  ==>  (orig(yTmp[]) == [0.3762364463803898, -0.9268904197618257])
(return == false)  ==>  (orig(yTmp[]) elements one of { -0.9268904197618257, 0.3762364463803898 })
(return == false)  ==>  (scale[] == [1.0097791330381111E-10, 1.009430797662998E-10])
(return == false)  ==>  (scale[] elements one of { 1.009430797662998E-10, 1.0097791330381111E-10 })
(return == false)  ==>  (size(this.eventsHandlersManager.states[]) == 2)
(return == false)  ==>  (this.coeff has only one value)
(return == false)  ==>  (this.coeff[] has only one value, of length 9)
(return == false)  ==>  (this.costPerStep has only one value)
(return == false)  ==>  (this.costPerTimeUnit has only one value)
(return == false)  ==>  (this.costPerTimeUnit[] == [0.0, 129.87069575844808, 162.73948031087588, 109.15357887491346, 68.29878807920053, 53.068100913144285, 0.0, 0.0, 0.0])
(return == false)  ==>  (this.equations has only one value)
(return == false)  ==>  (this.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem4.class)
(return == false)  ==>  (this.evaluations == 161)
(return == false)  ==>  (this.eventsHandlersManager has only one value)
(return == false)  ==>  (this.eventsHandlersManager.first == null)
(return == false)  ==>  (this.eventsHandlersManager.initialized == true)
(return == false)  ==>  (this.eventsHandlersManager.states has only one value)
(return == false)  ==>  (this.eventsHandlersManager.states[] contains no nulls and has only one value, of length 2)
(return == false)  ==>  (this.eventsHandlersManager.states[].getClass().getName() == [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState])
(return == false)  ==>  (this.maxStep == 15.0)
(return == false)  ==>  (this.minStep == 0.0)
(return == false)  ==>  (this.optimalStep has only one value)
(return == false)  ==>  (this.optimalStep[] == [0.0, 0.06929969803765028, 0.11675101803019725, 0.30232632168494405, 0.7467189599449329, 1.3755909622520304, 0.0, 0.0, 0.0])
(return == false)  ==>  (this.scalAbsoluteTolerance == 1.0E-10)
(return == false)  ==>  (this.sequence has only one value)
(return == false)  ==>  (this.stepHandlers has only one value)
(return == false)  ==>  (this.stepSize == 1.865527469355493)
(return == false)  ==>  (this.stepStart == 1.6025688533820936)
(return == false)  ==>  (y0[] == [0.3325666164775135, -0.943079766299793])
(return == false)  ==>  (y0[] elements one of { -0.943079766299793, 0.3325666164775135 })
(return == false)  ==>  (yEnd[] == [-2.0054725552842116, 0.07755775272020493])
(return == false)  ==>  (yEnd[] elements one of { -2.0054725552842116, 0.07755775272020493 })
(return == false)  ==>  (yMiddle[] == [-0.5471039884352977, -1.2532858455145002])
(return == false)  ==>  (yMiddle[] elements one of { -1.2532858455145002, -0.5471039884352977 })
(return == false)  ==>  (yTmp[] == [-0.5471039884352977, -1.2532858455145002])
(return == false)  ==>  (yTmp[] elements one of { -1.2532858455145002, -0.5471039884352977 })
(this.scalRelativeTolerance == 0.0)  <==>  (return == true)
(this.scalRelativeTolerance == 0.0)  ==>  (orig(size(scale[])) one of { 1, 2 })
(this.scalRelativeTolerance == 0.0)  ==>  (orig(size(y0[])) one of { 1, 2 })
(this.scalRelativeTolerance == 0.0)  ==>  (orig(size(yEnd[])) one of { 1, 2 })
(this.scalRelativeTolerance == 0.0)  ==>  (orig(size(yMiddle[])) one of { 1, 2 })
(this.scalRelativeTolerance == 0.0)  ==>  (orig(size(yTmp[])) one of { 1, 2 })
(this.scalRelativeTolerance == 0.0)  ==>  (size(this.eventsHandlersManager.states[]) one of { 1, 2 })
(this.scalRelativeTolerance == 0.0)  ==>  (this.eventsHandlersManager.first.convergence one of { 1.0E-12, 1.5E-7 })
(this.scalRelativeTolerance == 0.0)  ==>  (this.eventsHandlersManager.first.g0 one of { -1.122260016953696, 0.3325666164775135 })
(this.scalRelativeTolerance == 0.0)  ==>  (this.eventsHandlersManager.first.maxCheckInterval one of { 1.0, Infinity })
(this.scalRelativeTolerance == 0.0)  ==>  (this.eventsHandlersManager.first.pendingEventTime one of { 1.9415926557285343, 2.0 })
(this.scalRelativeTolerance == 0.0)  ==>  (this.eventsHandlersManager.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] })
(this.scalRelativeTolerance == 0.0)  ==>  (this.maxStep one of { 10.0, 15.0 })
(this.scalRelativeTolerance == 0.0)  ==>  (this.minStep one of { 0.0, 0.1 })
(this.scalRelativeTolerance == 0.0)  ==>  (this.scalAbsoluteTolerance one of { 1.0E-12, 1.0E-10 })
(this.scalRelativeTolerance == 0.0)  ==>  (yEnd[] sorted by >)
this.maxOrder == 18
this.sequence[] == [2, 6, 10, 14, 18, 22, 26, 30, 34]
this.costPerStep[] == [3, 9, 19, 33, 51, 73, 99, 129, 163]
this.performTest == true
this.maxChecks == 1
this.maxIter == 2
this.stabilityReduction == 0.5
this.stepControl1 == 0.65
this.stepControl2 == 0.94
this.stepControl3 == 0.02
this.stepControl4 == 4.0
this.orderControl1 == 0.8
this.orderControl2 == 0.9
this.denseOutput == true
this.useInterpolationError == true
this.mudif == 4
this.eventsHandlersManager.states[].getClass().getName() one of { [org.apache.commons.math.ode.events.EventState], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
y0[] sorted by >
f[] elements != null
yMiddle[] sorted by >
yTmp[] sorted by >
size(this.eventsHandlersManager.states[]) one of { 1, 2 }
this.evaluations > orig(this.evaluations)
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.tryStep(double, double[], double, int, double[], double[][], double[], double[], double[]):::EXIT;condition="return == true"
yEnd[] sorted by >
return == true
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator.tryStep(double, double[], double, int, double[], double[][], double[], double[], double[]):::EXIT;condition="not(return == true)"
this.sequence has only one value
this.costPerStep has only one value
this.costPerTimeUnit has only one value
this.costPerTimeUnit[] == [0.0, 129.87069575844808, 162.73948031087588, 109.15357887491346, 68.29878807920053, 53.068100913144285, 0.0, 0.0, 0.0]
this.optimalStep has only one value
this.optimalStep[] == [0.0, 0.06929969803765028, 0.11675101803019725, 0.30232632168494405, 0.7467189599449329, 1.3755909622520304, 0.0, 0.0, 0.0]
this.coeff has only one value
this.coeff[] has only one value, of length 9
this.scalAbsoluteTolerance == 1.0E-10
this.minStep == 0.0
this.maxStep == 15.0
this.stepHandlers has only one value
this.stepStart == 1.6025688533820936
this.stepSize == 1.865527469355493
this.eventsHandlersManager has only one value
this.eventsHandlersManager.states has only one value
this.eventsHandlersManager.states[] contains no nulls and has only one value, of length 2
this.eventsHandlersManager.states[].getClass().getName() == [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState]
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == true
this.evaluations == 161
this.equations has only one value
this.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem4.class
y0[] == [0.3325666164775135, -0.943079766299793]
y0[] elements one of { -0.943079766299793, 0.3325666164775135 }
scale[] == [1.0097791330381111E-10, 1.009430797662998E-10]
scale[] elements one of { 1.009430797662998E-10, 1.0097791330381111E-10 }
f[] contains no nulls and has only one value, of length 3
yMiddle[] == [-0.5471039884352977, -1.2532858455145002]
yMiddle[] elements one of { -1.2532858455145002, -0.5471039884352977 }
yEnd[] == [-2.0054725552842116, 0.07755775272020493]
yEnd[] elements one of { -2.0054725552842116, 0.07755775272020493 }
yTmp[] == [-0.5471039884352977, -1.2532858455145002]
yTmp[] elements one of { -1.2532858455145002, -0.5471039884352977 }
return == false
orig(this) has only one value
orig(this.evaluations) == 159
orig(t0) == 1.6025688533820936
orig(y0) has only one value
orig(step) == 1.865527469355493
orig(k) == 0
orig(scale) has only one value
orig(f) has only one value
orig(yMiddle) has only one value
orig(yMiddle[]) == [0.7510350646094359, -0.6602623203893759]
orig(yMiddle[]) elements one of { -0.6602623203893759, 0.7510350646094359 }
orig(yEnd) has only one value
orig(yEnd[]) == [0.3325666164775135, -0.943079766299793]
orig(yEnd[]) elements one of { -0.943079766299793, 0.3325666164775135 }
orig(yTmp) has only one value
orig(yTmp[]) == [0.3762364463803898, -0.9268904197618257]
orig(yTmp[]) elements one of { -0.9268904197618257, 0.3762364463803898 }
size(this.eventsHandlersManager.states[]) == 2
orig(size(y0[])) == 2
orig(size(scale[])) == 2
orig(size(f[])) == 3
orig(size(yMiddle[])) == 2
orig(size(yEnd[])) == 2
orig(size(yTmp[])) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest:::OBJECT
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest.GraggBulirschStoerIntegratorTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest.GraggBulirschStoerIntegratorTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest.suite():::EXIT
return.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolator:::CLASS
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolator:::OBJECT
this.y1[] sorted by >=
this.yMidDots.getClass().getName() == double[][].class
this.yMidDots[] elements != null
this.polynoms.getClass().getName() == double[][].class
this.polynoms[] elements != null
this.errfac[] == [0.00894427190999916, 0.0011574074074074071, 1.1928820530393167E-4, 1.0172526041666671E-5, 7.396095223550401E-7, 4.687500000000003E-8, 2.633557867380915E-9, 1.3289602249221588E-10, 6.087325272458579E-12, 2.552940897844902E-13, 9.873921158055867E-15, 3.543485851063354E-16, 1.1861666197290292E-17, 3.720620824064976E-19, 1.0979326186189016E-20, 3.0588654927279263E-22, 8.071138420780447E-24, 2.0226564078181777E-25, 4.8264138216340184E-27]
this.errfac[] sorted by >
this.currentState[] sorted by >
this.finalized == false
this.forward == true
size(this.y0Dot[]) one of { 1, 2 }
size(this.y1[]) one of { 1, 2 }
size(this.y1Dot[]) one of { 1, 2 }
size(this.yMidDots[]) == 19
size(this.polynoms[]) == 24
size(this.errfac[]) == 19
size(this.currentState[]) one of { 1, 2 }
size(this.interpolatedState[]) one of { 1, 2 }
size(this.interpolatedDerivatives[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolator.GraggBulirschStoerStepInterpolator(double[], double[], double[], double[], double[][], boolean):::ENTER
y[] elements one of { 0.0, 0.3623577544766736, 0.9320390859672263 }
y[] one of { [0.0], [0.9320390859672263, 0.3623577544766736] }
y0Dot[] elements == 0.0
y0Dot[] one of { [0.0], [0.0, 0.0] }
y1[] elements == 0.0
y1[] one of { [0.0], [0.0, 0.0] }
y1Dot[] elements == 0.0
y1Dot[] one of { [0.0], [0.0, 0.0] }
yMidDots.getClass().getName() == double[][].class
forward == true
size(y[]) one of { 1, 2 }
size(y0Dot[]) one of { 1, 2 }
size(y1[]) one of { 1, 2 }
size(y1Dot[]) one of { 1, 2 }
size(yMidDots[]) == 19
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolator.GraggBulirschStoerStepInterpolator(double[], double[], double[], double[], double[][], boolean):::EXIT
y[] == orig(y[])
y0Dot[] == orig(y0Dot[])
y1[] == orig(y1[])
y1Dot[] == orig(y1Dot[])
yMidDots[] == orig(yMidDots[])
this.y0Dot[] elements == 0.0
this.y0Dot[] one of { [0.0], [0.0, 0.0] }
this.y1[] elements == 0.0
this.y1[] one of { [0.0], [0.0, 0.0] }
this.y1Dot[] elements == 0.0
this.y1Dot[] one of { [0.0], [0.0, 0.0] }
this.currentDegree == 0
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState[] elements one of { 0.0, 0.3623577544766736, 0.9320390859672263 }
this.currentState[] one of { [0.0], [0.9320390859672263, 0.3623577544766736] }
this.interpolatedTime == Double.NaN
this.interpolatedState[] elements == 0.0
this.interpolatedState[] one of { [0.0], [0.0, 0.0] }
this.interpolatedDerivatives[] elements == 0.0
this.interpolatedDerivatives[] one of { [0.0], [0.0, 0.0] }
this.dirtyState == true
y[] elements one of { 0.0, 0.3623577544766736, 0.9320390859672263 }
y[] one of { [0.0], [0.9320390859672263, 0.3623577544766736] }
y0Dot[] elements == 0.0
y0Dot[] one of { [0.0], [0.0, 0.0] }
y1[] elements == 0.0
y1[] one of { [0.0], [0.0, 0.0] }
y1Dot[] elements == 0.0
y1Dot[] one of { [0.0], [0.0, 0.0] }
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolator.computeCoefficients(int, double):::ENTER
this.y1[] sorted by >
this.interpolatedState[] sorted by >=
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolator.computeCoefficients(int, double):::EXIT291
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolator.computeCoefficients(int, double):::EXIT
this.y0Dot == orig(this.y0Dot)
this.y0Dot[] == orig(this.y0Dot[])
this.y1 == orig(this.y1)
this.y1[] == orig(this.y1[])
this.y1Dot == orig(this.y1Dot)
this.y1Dot[] == orig(this.y1Dot[])
this.yMidDots == orig(this.yMidDots)
this.yMidDots.getClass().getName() == orig(this.yMidDots.getClass().getName())
this.yMidDots[] == orig(this.yMidDots[])
this.polynoms == orig(this.polynoms)
this.polynoms.getClass().getName() == orig(this.polynoms.getClass().getName())
this.polynoms[] == orig(this.polynoms[])
this.errfac == orig(this.errfac)
this.errfac[] == orig(this.errfac[])
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.y1[] sorted by >
this.interpolatedState[] sorted by >=
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::ENTER
this.y1[] sorted by >
this.dirtyState == true
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::EXIT
this.y0Dot == orig(this.y0Dot)
this.y0Dot[] == orig(this.y0Dot[])
this.y1 == orig(this.y1)
this.y1[] == orig(this.y1[])
this.y1Dot == orig(this.y1Dot)
this.y1Dot[] == orig(this.y1Dot[])
this.yMidDots == orig(this.yMidDots)
this.yMidDots.getClass().getName() == orig(this.yMidDots.getClass().getName())
this.yMidDots[] == orig(this.yMidDots[])
this.polynoms == orig(this.polynoms)
this.polynoms.getClass().getName() == orig(this.polynoms.getClass().getName())
this.polynoms[] == orig(this.polynoms[])
this.errfac == orig(this.errfac)
this.errfac[] == orig(this.errfac[])
this.currentDegree == orig(this.currentDegree)
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
size(this.interpolatedState[]) == orig(size(this.interpolatedState[]))
size(this.interpolatedDerivatives[]) == orig(size(this.interpolatedDerivatives[]))
this.y1[] sorted by >
this.dirtyState == true
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolator.estimateError(double[]):::ENTER
this.y1[] sorted by >
this.interpolatedState[] sorted by >=
size(scale[]) one of { 1, 2 }
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolator.estimateError(double[]):::EXIT
this.y0Dot == orig(this.y0Dot)
this.y0Dot[] == orig(this.y0Dot[])
this.y1 == orig(this.y1)
this.y1[] == orig(this.y1[])
this.y1Dot == orig(this.y1Dot)
this.y1Dot[] == orig(this.y1Dot[])
this.yMidDots == orig(this.yMidDots)
this.yMidDots.getClass().getName() == orig(this.yMidDots.getClass().getName())
this.yMidDots[] == orig(this.yMidDots[])
this.polynoms == orig(this.polynoms)
this.polynoms.getClass().getName() == orig(this.polynoms.getClass().getName())
this.polynoms[] == orig(this.polynoms[])
this.errfac == orig(this.errfac)
this.errfac[] == orig(this.errfac[])
this.currentDegree == orig(this.currentDegree)
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
scale[] == orig(scale[])
this.y1[] sorted by >
this.interpolatedState[] sorted by >=
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolator.resetTables(int):::ENTER
this.y0Dot[] elements == 0.0
this.y0Dot[] one of { [0.0], [0.0, 0.0] }
this.y1[] elements == 0.0
this.y1[] one of { [0.0], [0.0, 0.0] }
this.y1Dot[] elements == 0.0
this.y1Dot[] one of { [0.0], [0.0, 0.0] }
this.polynoms == null
this.errfac == null
this.currentDegree == 0
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState[] elements one of { 0.0, 0.3623577544766736, 0.9320390859672263 }
this.currentState[] one of { [0.0], [0.9320390859672263, 0.3623577544766736] }
this.interpolatedTime == Double.NaN
this.interpolatedState[] elements == 0.0
this.interpolatedState[] one of { [0.0], [0.0, 0.0] }
this.interpolatedDerivatives[] elements == 0.0
this.interpolatedDerivatives[] one of { [0.0], [0.0, 0.0] }
this.dirtyState == true
maxDegree == 23
===========================================================================
org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolator.resetTables(int):::EXIT
this.y0Dot == orig(this.y0Dot)
this.y0Dot[] == orig(this.y0Dot[])
this.y1 == orig(this.y1)
this.y1[] == orig(this.y1[])
this.y1Dot == orig(this.y1Dot)
this.y1Dot[] == orig(this.y1Dot[])
this.yMidDots == orig(this.yMidDots)
this.yMidDots.getClass().getName() == orig(this.yMidDots.getClass().getName())
this.yMidDots[] == orig(this.yMidDots[])
this.currentDegree == orig(this.currentDegree)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.y0Dot[] elements == 0.0
this.y0Dot[] one of { [0.0], [0.0, 0.0] }
this.y1[] elements == 0.0
this.y1[] one of { [0.0], [0.0, 0.0] }
this.y1Dot[] elements == 0.0
this.y1Dot[] one of { [0.0], [0.0, 0.0] }
this.currentDegree == 0
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState[] elements one of { 0.0, 0.3623577544766736, 0.9320390859672263 }
this.currentState[] one of { [0.0], [0.9320390859672263, 0.3623577544766736] }
this.interpolatedTime == Double.NaN
this.interpolatedState[] elements == 0.0
this.interpolatedState[] one of { [0.0], [0.0, 0.0] }
this.interpolatedDerivatives[] elements == 0.0
this.interpolatedDerivatives[] one of { [0.0], [0.0, 0.0] }
this.dirtyState == true
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator:::CLASS
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.METHOD_NAME has only one value
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.METHOD_NAME.toString == "Higham-Hall 5(4)"
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_C has only one value
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_C[] == [0.2222222222222222, 0.3333333333333333, 0.5, 0.6, 1.0, 1.0]
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_C[] elements <= 1.0
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_C[] elements >= 0.2222222222222222
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_C[] sorted by <=
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_A has only one value
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_A.getClass().getName() == double[][].class
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_A[] contains no nulls and has only one value, of length 6
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_A[] elements != null
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_B has only one value
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_B[] == [0.08333333333333333, 0.0, 0.84375, -1.3333333333333333, 1.3020833333333333, 0.10416666666666667, 0.0]
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_B[] elements <= 1.3020833333333333
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_E has only one value
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_E[] == [-0.05, 0.0, 0.50625, -1.2, 0.78125, 0.0625, -0.1]
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_E[] elements <= 0.78125
size(org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_C[]) == 6
size(org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_A[]) == 6
size(org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_B[]) == 7
size(org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_E[]) == 7
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator:::OBJECT
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_A.getClass().getName() == this.a.getClass().getName()
this.stepHandlers.getClass().getName() == this.eventsHandlersManager.states.getClass().getName()
this.fsal == false
this.c has only one value
this.c[] == [0.2222222222222222, 0.3333333333333333, 0.5, 0.6, 1.0, 1.0]
this.c[] elements <= 1.0
this.c[] elements >= 0.2222222222222222
this.c[] sorted by <=
this.a has only one value
this.a[] contains no nulls and has only one value, of length 6
this.a[] elements != null
this.b has only one value
this.b[] == [0.08333333333333333, 0.0, 0.84375, -1.3333333333333333, 1.3020833333333333, 0.10416666666666667, 0.0]
this.b[] elements <= 1.3020833333333333
this.prototype.getClass().getName() == org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolator.class
this.prototype.yDotK == null
this.prototype.integrator == null
this.prototype.previousTime == Double.NaN
this.prototype.currentTime == Double.NaN
this.prototype.h == Double.NaN
this.prototype.currentState == null
this.prototype.interpolatedTime == Double.NaN
this.prototype.interpolatedState == null
this.prototype.interpolatedDerivatives == null
this.prototype.forward == true
this.prototype.dirtyState == true
this.exp one of { -0.2, 0.0 }
this.safety one of { 0.0, 0.9 }
this.minReduction one of { 0.0, 0.2 }
this.maxGrowth one of { 0.0, 10.0 }
this.scalAbsoluteTolerance >= 0.0
this.scalRelativeTolerance >= 0.0
this.vecAbsoluteTolerance[] == [1.0E-8, 1.0E-8, 1.0E-10, 1.0E-10]
this.vecAbsoluteTolerance[] elements one of { 1.0E-10, 1.0E-8 }
this.vecAbsoluteTolerance[] sorted by >=
this.vecRelativeTolerance[] == [1.0E-10, 1.0E-10, 1.0E-8, 1.0E-8]
this.vecRelativeTolerance[] elements one of { 1.0E-10, 1.0E-8 }
this.vecRelativeTolerance[] sorted by <=
this.initialStep == -1.0
this.minStep == 0.0
this.maxStep one of { 4.0, 15.0, 20.0 }
this.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.eventsHandlersManager.states[] elements != null
this.eventsHandlersManager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.name has only one value
this.name.toString == "Higham-Hall 5(4)"
this.maxEvaluations == 2147483647
this.evaluations >= 0
size(this.c[]) == 6
size(this.a[]) == 6
size(this.b[]) == 7
size(this.vecAbsoluteTolerance[]) == 4
size(this.vecRelativeTolerance[]) == 4
size(this.eventsHandlersManager.states[]) one of { 0, 1, 2 }
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_A.getClass().getName() != this.prototype.getClass().getName()
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_A.getClass().getName() != this.stepHandlers.getClass().getName()
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_A.getClass().getName() != this.equations.getClass().getName()
this.prototype.getClass().getName() != this.stepHandlers.getClass().getName()
this.prototype.getClass().getName() != this.equations.getClass().getName()
this.stepHandlers.getClass().getName() != this.equations.getClass().getName()
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.HighamHall54Integrator(double, double, double, double):::ENTER
minStep == 0.0
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.HighamHall54Integrator(double, double, double, double):::EXIT
this.prototype.finalized == false
this.exp == -0.2
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 10.0
this.vecAbsoluteTolerance == null
this.vecRelativeTolerance == null
this.stepStart == Double.NaN
this.stepSize == 0.0
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.evaluations == 0
this.equations == null
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.HighamHall54Integrator(double, double, double[], double[]):::ENTER
minStep == 0.0
maxStep == 20.0
vecAbsoluteTolerance has only one value
vecAbsoluteTolerance[] == [1.0E-8, 1.0E-8, 1.0E-10, 1.0E-10]
vecAbsoluteTolerance[] elements one of { 1.0E-10, 1.0E-8 }
vecRelativeTolerance has only one value
vecRelativeTolerance[] == [1.0E-10, 1.0E-10, 1.0E-8, 1.0E-8]
vecRelativeTolerance[] elements one of { 1.0E-10, 1.0E-8 }
size(vecAbsoluteTolerance[]) == 4
size(vecRelativeTolerance[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.HighamHall54Integrator(double, double, double[], double[]):::EXIT
vecAbsoluteTolerance[] == orig(vecAbsoluteTolerance[])
vecRelativeTolerance[] == orig(vecRelativeTolerance[])
this.prototype has only one value
this.prototype.finalized == false
this.exp == -0.2
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 10.0
this.scalAbsoluteTolerance == 0.0
this.scalRelativeTolerance == 0.0
this.vecAbsoluteTolerance has only one value
this.vecRelativeTolerance has only one value
this.maxStep == 20.0
this.stepHandlers has only one value
this.stepStart == Double.NaN
this.stepSize == 0.0
this.eventsHandlersManager has only one value
this.eventsHandlersManager.states has only one value
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.evaluations == 0
this.equations == null
vecAbsoluteTolerance[] == [1.0E-8, 1.0E-8, 1.0E-10, 1.0E-10]
vecAbsoluteTolerance[] elements one of { 1.0E-10, 1.0E-8 }
vecRelativeTolerance[] == [1.0E-10, 1.0E-10, 1.0E-8, 1.0E-8]
vecRelativeTolerance[] elements one of { 1.0E-10, 1.0E-8 }
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.estimateError(double[][], double[], double[], double):::ENTER
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_A.getClass().getName() == yDotK.getClass().getName()
this.exp == -0.2
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 10.0
yDotK[] elements != null
y1[] elements != 0
size(yDotK[]) == 7
size(y0[]) one of { 2, 4 }
size(y1[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.estimateError(double[][], double[], double[], double):::EXIT
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.METHOD_NAME == orig(org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.METHOD_NAME)
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.METHOD_NAME.toString == orig(org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.METHOD_NAME.toString)
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_C == orig(org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_C)
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_C[] == orig(org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_C[])
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_A == orig(org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_A)
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_A.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_A.getClass().getName())
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_A.getClass().getName() == orig(this.a.getClass().getName())
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_A.getClass().getName() == orig(yDotK.getClass().getName())
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_A[] == orig(org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_A[])
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_B == orig(org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_B)
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_B[] == orig(org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_B[])
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_E == orig(org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_E)
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_E[] == orig(org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_E[])
this.fsal == orig(this.fsal)
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.integrator == orig(this.prototype.integrator)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.interpolatedDerivatives == orig(this.prototype.interpolatedDerivatives)
this.prototype.finalized == orig(this.prototype.finalized)
this.prototype.forward == orig(this.prototype.forward)
this.prototype.dirtyState == orig(this.prototype.dirtyState)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.minReduction == orig(this.minReduction)
this.maxGrowth == orig(this.maxGrowth)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecAbsoluteTolerance[] == orig(this.vecAbsoluteTolerance[])
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.vecRelativeTolerance[] == orig(this.vecRelativeTolerance[])
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepHandlers.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.stepStart == orig(this.stepStart)
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
yDotK[] == orig(yDotK[])
y0[] == orig(y0[])
y1[] == orig(y1[])
this.exp == -0.2
this.safety == 0.9
this.minReduction == 0.2
this.maxGrowth == 10.0
yDotK[] elements != null
y1[] elements != 0
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.getOrder():::ENTER
this.stepStart one of { 0.0, Double.NaN }
this.stepSize == 0.0
this.evaluations one of { 0, 1 }
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.getOrder():::EXIT
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.METHOD_NAME == orig(org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.METHOD_NAME)
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.METHOD_NAME.toString == orig(org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.METHOD_NAME.toString)
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_C == orig(org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_C)
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_C[] == orig(org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_C[])
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_A == orig(org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_A)
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_A.getClass().getName() == orig(org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_A.getClass().getName())
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_A.getClass().getName() == orig(this.a.getClass().getName())
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_A[] == orig(org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_A[])
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_B == orig(org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_B)
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_B[] == orig(org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_B[])
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_E == orig(org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_E)
org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_E[] == orig(org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.STATIC_E[])
this.fsal == orig(this.fsal)
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.integrator == orig(this.prototype.integrator)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.interpolatedDerivatives == orig(this.prototype.interpolatedDerivatives)
this.prototype.finalized == orig(this.prototype.finalized)
this.prototype.forward == orig(this.prototype.forward)
this.prototype.dirtyState == orig(this.prototype.dirtyState)
this.exp == orig(this.exp)
this.safety == orig(this.safety)
this.minReduction == orig(this.minReduction)
this.maxGrowth == orig(this.maxGrowth)
this.scalAbsoluteTolerance == orig(this.scalAbsoluteTolerance)
this.scalRelativeTolerance == orig(this.scalRelativeTolerance)
this.vecAbsoluteTolerance == orig(this.vecAbsoluteTolerance)
this.vecAbsoluteTolerance[] == orig(this.vecAbsoluteTolerance[])
this.vecRelativeTolerance == orig(this.vecRelativeTolerance)
this.vecRelativeTolerance[] == orig(this.vecRelativeTolerance[])
this.initialStep == orig(this.initialStep)
this.minStep == orig(this.minStep)
this.maxStep == orig(this.maxStep)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.stepHandlers.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.stepSize == orig(this.stepSize)
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
this.evaluations == orig(this.evaluations)
this.equations == orig(this.equations)
this.equations.getClass().getName() == orig(this.equations.getClass().getName())
this.stepStart one of { 0.0, Double.NaN }
this.stepSize == 0.0
this.evaluations one of { 0, 1 }
return == 5
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest$2:::CLASS
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest$2:::OBJECT
this has only one value
this.val$pb has only one value
this.val$pb.y has only one value
this.val$pb.y[] sorted by >=
this.val$pb.n == 2
this.val$pb.t0 == 0.0
this.val$pb.y0 has only one value
this.val$pb.y0[] == [1.0, 0.1]
this.val$pb.y0[] elements one of { 0.1, 1.0 }
this.val$pb.y0[] sorted by >
this.val$pb.t1 == 4.0
this.val$pb.errorScale has only one value
this.val$pb.errorScale[] == [1.0, 1.0]
this.val$pb.errorScale[] elements == 1.0
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest.this has only one value
size(this.val$pb.y[]) == 2
size(this.val$pb.y0[]) == 2
size(this.val$pb.errorScale[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest$2.(org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math.ode.TestProblem1):::ENTER
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest.this has only one value
$hidden$2 has only one value
$hidden$2.y has only one value
$hidden$2.y[] == [0.0, 0.0]
$hidden$2.y[] elements == 0.0
$hidden$2.n == 2
$hidden$2.calls == 0
$hidden$2.t0 == 0.0
$hidden$2.y0 has only one value
$hidden$2.y0[] == [1.0, 0.1]
$hidden$2.y0[] elements one of { 0.1, 1.0 }
$hidden$2.t1 == 4.0
$hidden$2.errorScale has only one value
$hidden$2.errorScale[] == [1.0, 1.0]
$hidden$2.errorScale[] elements == 1.0
size($hidden$2.y[]) == 2
size($hidden$2.y0[]) == 2
size($hidden$2.errorScale[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest$2.(org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math.ode.TestProblem1):::EXIT
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest.this)
$hidden$2.y == orig($hidden$2.y)
$hidden$2.y[] == orig($hidden$2.y[])
$hidden$2.n == orig($hidden$2.n)
$hidden$2.calls == orig($hidden$2.calls)
$hidden$2.t0 == orig($hidden$2.t0)
$hidden$2.y0 == orig($hidden$2.y0)
$hidden$2.y0[] == orig($hidden$2.y0[])
$hidden$2.t1 == orig($hidden$2.t1)
$hidden$2.errorScale == orig($hidden$2.errorScale)
$hidden$2.errorScale[] == orig($hidden$2.errorScale[])
this.val$pb.y[] == [0.0, 0.0]
this.val$pb.y[] elements == 0.0
this.val$pb.calls == 0
$hidden$2.y has only one value
$hidden$2.y[] == [0.0, 0.0]
$hidden$2.y[] elements == 0.0
$hidden$2.n == 2
$hidden$2.calls == 0
$hidden$2.t0 == 0.0
$hidden$2.y0 has only one value
$hidden$2.y0[] == [1.0, 0.1]
$hidden$2.y0[] elements one of { 0.1, 1.0 }
$hidden$2.t1 == 4.0
$hidden$2.errorScale has only one value
$hidden$2.errorScale[] == [1.0, 1.0]
$hidden$2.errorScale[] elements == 1.0
size($hidden$2.y[]) == 2
size($hidden$2.y0[]) == 2
size($hidden$2.errorScale[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest$2.g(double, double[]):::ENTER
y[] sorted by >
size(y[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest$2.g(double, double[]):::EXIT
this.val$pb == orig(this.val$pb)
this.val$pb.y == orig(this.val$pb.y)
this.val$pb.y[] == orig(this.val$pb.y[])
this.val$pb.n == orig(this.val$pb.n)
this.val$pb.calls == orig(this.val$pb.calls)
this.val$pb.t0 == orig(this.val$pb.t0)
this.val$pb.y0 == orig(this.val$pb.y0)
this.val$pb.y0[] == orig(this.val$pb.y0[])
this.val$pb.t1 == orig(this.val$pb.t1)
this.val$pb.errorScale == orig(this.val$pb.errorScale)
this.val$pb.errorScale[] == orig(this.val$pb.errorScale[])
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest.this)
y[] == orig(y[])
y[] sorted by >
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest$3:::CLASS
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest$3:::OBJECT
this has only one value
this.val$pb has only one value
this.val$pb.y has only one value
this.val$pb.y[] sorted by >=
this.val$pb.n == 2
this.val$pb.t0 == 0.0
this.val$pb.y0 has only one value
this.val$pb.y0[] == [1.0, 0.1]
this.val$pb.y0[] elements one of { 0.1, 1.0 }
this.val$pb.y0[] sorted by >
this.val$pb.t1 == 4.0
this.val$pb.errorScale has only one value
this.val$pb.errorScale[] == [1.0, 1.0]
this.val$pb.errorScale[] elements == 1.0
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest.this has only one value
size(this.val$pb.y[]) == 2
size(this.val$pb.y0[]) == 2
size(this.val$pb.errorScale[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest$3.(org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math.ode.TestProblem1):::ENTER
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest.this has only one value
$hidden$2 has only one value
$hidden$2.y has only one value
$hidden$2.y[] == [0.0, 0.0]
$hidden$2.y[] elements == 0.0
$hidden$2.n == 2
$hidden$2.calls == 0
$hidden$2.t0 == 0.0
$hidden$2.y0 has only one value
$hidden$2.y0[] == [1.0, 0.1]
$hidden$2.y0[] elements one of { 0.1, 1.0 }
$hidden$2.t1 == 4.0
$hidden$2.errorScale has only one value
$hidden$2.errorScale[] == [1.0, 1.0]
$hidden$2.errorScale[] elements == 1.0
size($hidden$2.y[]) == 2
size($hidden$2.y0[]) == 2
size($hidden$2.errorScale[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest$3.(org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math.ode.TestProblem1):::EXIT
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest.this)
$hidden$2.y == orig($hidden$2.y)
$hidden$2.y[] == orig($hidden$2.y[])
$hidden$2.n == orig($hidden$2.n)
$hidden$2.calls == orig($hidden$2.calls)
$hidden$2.t0 == orig($hidden$2.t0)
$hidden$2.y0 == orig($hidden$2.y0)
$hidden$2.y0[] == orig($hidden$2.y0[])
$hidden$2.t1 == orig($hidden$2.t1)
$hidden$2.errorScale == orig($hidden$2.errorScale)
$hidden$2.errorScale[] == orig($hidden$2.errorScale[])
this.val$pb.y[] == [0.0, 0.0]
this.val$pb.y[] elements == 0.0
this.val$pb.calls == 0
$hidden$2.y has only one value
$hidden$2.y[] == [0.0, 0.0]
$hidden$2.y[] elements == 0.0
$hidden$2.n == 2
$hidden$2.calls == 0
$hidden$2.t0 == 0.0
$hidden$2.y0 has only one value
$hidden$2.y0[] == [1.0, 0.1]
$hidden$2.y0[] elements one of { 0.1, 1.0 }
$hidden$2.t1 == 4.0
$hidden$2.errorScale has only one value
$hidden$2.errorScale[] == [1.0, 1.0]
$hidden$2.errorScale[] elements == 1.0
size($hidden$2.y[]) == 2
size($hidden$2.y0[]) == 2
size($hidden$2.errorScale[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest$3.g(double, double[]):::ENTER
y[] sorted by >
size(y[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest$3.g(double, double[]):::EXIT
this.val$pb == orig(this.val$pb)
this.val$pb.y == orig(this.val$pb.y)
this.val$pb.y[] == orig(this.val$pb.y[])
this.val$pb.n == orig(this.val$pb.n)
this.val$pb.calls == orig(this.val$pb.calls)
this.val$pb.t0 == orig(this.val$pb.t0)
this.val$pb.y0 == orig(this.val$pb.y0)
this.val$pb.y0[] == orig(this.val$pb.y0[])
this.val$pb.t1 == orig(this.val$pb.t1)
this.val$pb.errorScale == orig(this.val$pb.errorScale)
this.val$pb.errorScale[] == orig(this.val$pb.errorScale[])
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest.this)
y[] == orig(y[])
y[] sorted by >
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest$KeplerHandler:::OBJECT
this has only one value
this.pb has only one value
this.pb.e == 0.9
this.pb.y has only one value
this.pb.n == 4
this.pb.calls >= 0
this.pb.t0 == 0.0
this.pb.y0 has only one value
this.pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
this.pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
this.pb.t1 == 20.0
this.pb.errorScale has only one value
this.pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
this.pb.errorScale[] elements == 1.0
this.nbSteps >= 0
size(this.pb.y[]) == 4
size(this.pb.y0[]) == 4
size(this.pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest$KeplerHandler.KeplerHandler(org.apache.commons.math.ode.TestProblem3):::ENTER
pb has only one value
pb.e == 0.9
pb.y has only one value
pb.y[] == [0.0, 0.0, 0.0, 0.0]
pb.y[] elements == 0.0
pb.n == 4
pb.calls == 0
pb.t0 == 0.0
pb.y0 has only one value
pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
pb.t1 == 20.0
pb.errorScale has only one value
pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
pb.errorScale[] elements == 1.0
size(pb.y[]) == 4
size(pb.y0[]) == 4
size(pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest$KeplerHandler.KeplerHandler(org.apache.commons.math.ode.TestProblem3):::EXIT
pb.e == orig(pb.e)
pb.y == orig(pb.y)
pb.y[] == orig(pb.y[])
pb.n == orig(pb.n)
pb.calls == orig(pb.calls)
pb.t0 == orig(pb.t0)
pb.y0 == orig(pb.y0)
pb.y0[] == orig(pb.y0[])
pb.t1 == orig(pb.t1)
pb.errorScale == orig(pb.errorScale)
pb.errorScale[] == orig(pb.errorScale[])
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
this.nbSteps == 0
this.maxError == 0.0
pb.e == 0.9
pb.y has only one value
pb.y[] == [0.0, 0.0, 0.0, 0.0]
pb.y[] elements == 0.0
pb.n == 4
pb.calls == 0
pb.t0 == 0.0
pb.y0 has only one value
pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
pb.t1 == 20.0
pb.errorScale has only one value
pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
pb.errorScale[] elements == 1.0
size(pb.y[]) == 4
size(pb.y0[]) == 4
size(pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest$KeplerHandler.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::ENTER
this.maxError == 0.0
interpolator has only one value
interpolator.getClass().getName() == org.apache.commons.math.ode.sampling.DummyStepInterpolator.class
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest$KeplerHandler.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::EXIT
this.pb == orig(this.pb)
this.pb.e == orig(this.pb.e)
this.pb.y == orig(this.pb.y)
this.pb.n == orig(this.pb.n)
this.pb.calls == orig(this.pb.calls)
this.pb.t0 == orig(this.pb.t0)
this.pb.y0 == orig(this.pb.y0)
this.pb.y0[] == orig(this.pb.y0[])
this.pb.t1 == orig(this.pb.t1)
this.pb.errorScale == orig(this.pb.errorScale)
this.pb.errorScale[] == orig(this.pb.errorScale[])
size(this.pb.y[]) == orig(size(this.pb.y[]))
this.pb.y[] elements != 0
this.nbSteps - orig(this.nbSteps) - 1 == 0
orig(this.maxError) % this.maxError == 0
this.maxError >= orig(this.maxError)
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest$KeplerHandler.requiresDenseOutput():::ENTER
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
this.nbSteps == 0
this.maxError == 0.0
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest$KeplerHandler.requiresDenseOutput():::EXIT
this.pb == orig(this.pb)
this.pb.e == orig(this.pb.e)
this.pb.y == orig(this.pb.y)
this.pb.y[] == orig(this.pb.y[])
this.pb.n == orig(this.pb.n)
this.pb.calls == orig(this.pb.calls)
this.pb.t0 == orig(this.pb.t0)
this.pb.y0 == orig(this.pb.y0)
this.pb.y0[] == orig(this.pb.y0[])
this.pb.t1 == orig(this.pb.t1)
this.pb.errorScale == orig(this.pb.errorScale)
this.pb.errorScale[] == orig(this.pb.errorScale[])
this.nbSteps == orig(this.nbSteps)
this.maxError == orig(this.maxError)
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
this.nbSteps == 0
this.maxError == 0.0
return == false
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest$KeplerHandler.requiresDenseOutput():::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest$KeplerHandler.reset():::ENTER
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
this.nbSteps == 0
this.maxError == 0.0
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest$KeplerHandler.reset():::EXIT
this.pb == orig(this.pb)
this.pb.e == orig(this.pb.e)
this.pb.y == orig(this.pb.y)
this.pb.y[] == orig(this.pb.y[])
this.pb.n == orig(this.pb.n)
this.pb.calls == orig(this.pb.calls)
this.pb.t0 == orig(this.pb.t0)
this.pb.y0 == orig(this.pb.y0)
this.pb.y0[] == orig(this.pb.y0[])
this.pb.t1 == orig(this.pb.t1)
this.pb.errorScale == orig(this.pb.errorScale)
this.pb.errorScale[] == orig(this.pb.errorScale[])
this.nbSteps == orig(this.nbSteps)
this.maxError == orig(this.maxError)
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
this.nbSteps == 0
this.maxError == 0.0
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest:::OBJECT
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest.HighamHall54IntegratorTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest.HighamHall54IntegratorTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest.suite():::EXIT
return.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest.testBackward():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest.testBackward():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest.testEventsErrors():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest.testEventsErrors():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest.testEventsNoConvergence():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest.testEventsNoConvergence():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest.testIncreasingTolerance():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest.testIncreasingTolerance():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest.testKepler():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest.testKepler():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolator:::CLASS
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolator:::OBJECT
this.yDotK.getClass().getName() == double[][].class
this.yDotK[] elements != null
this.integrator.getClass().getName() == org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.class
this.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.integrator.eventsHandlersManager.states[] elements != null
this.integrator.eventsHandlersManager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
this.integrator.eventsHandlersManager.states.getClass().getName() == java.util.ArrayList.class
this.integrator.eventsHandlersManager.first == null
this.integrator.eventsHandlersManager.initialized == false
this.integrator.name has only one value
this.integrator.name.toString == "Higham-Hall 5(4)"
this.integrator.maxEvaluations == 2147483647
this.currentState[] elements != 0
this.dirtyState == true
size(this.yDotK[]) == 7
size(this.integrator.eventsHandlersManager.states[]) one of { 0, 1, 2 }
size(this.currentState[]) one of { 2, 4 }
size(this.interpolatedState[]) one of { 2, 4 }
size(this.interpolatedDerivatives[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolator.HighamHall54StepInterpolator():::EXIT
this.yDotK == null
this.integrator == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.finalized == false
this.forward == true
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolator.HighamHall54StepInterpolator(org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolator):::ENTER
interpolator.yDotK.getClass().getName() == double[][].class
interpolator.yDotK[] elements != null
interpolator.integrator.getClass().getName() == org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.class
interpolator.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.name has only one value
interpolator.integrator.name.toString == "Higham-Hall 5(4)"
interpolator.integrator.maxEvaluations == 2147483647
interpolator.integrator.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem3.class
interpolator.currentState[] elements != 0
interpolator.interpolatedState[] elements != 0
interpolator.interpolatedDerivatives[] elements != 0
interpolator.finalized == true
interpolator.forward == true
interpolator.dirtyState == true
size(interpolator.yDotK[]) == 7
size(interpolator.currentState[]) == 4
size(interpolator.interpolatedState[]) == 4
size(interpolator.interpolatedDerivatives[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolator.HighamHall54StepInterpolator(org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolator):::EXIT
interpolator.yDotK == orig(interpolator.yDotK)
interpolator.yDotK.getClass().getName() == orig(interpolator.yDotK.getClass().getName())
interpolator.yDotK[] == orig(interpolator.yDotK[])
interpolator.integrator == orig(interpolator.integrator)
interpolator.integrator.getClass().getName() == orig(interpolator.integrator.getClass().getName())
interpolator.integrator.stepHandlers == orig(interpolator.integrator.stepHandlers)
interpolator.integrator.stepHandlers.getClass().getName() == orig(interpolator.integrator.stepHandlers.getClass().getName())
interpolator.integrator.stepStart == orig(interpolator.integrator.stepStart)
interpolator.integrator.stepSize == orig(interpolator.integrator.stepSize)
interpolator.integrator.eventsHandlersManager == orig(interpolator.integrator.eventsHandlersManager)
interpolator.integrator.name == orig(interpolator.integrator.name)
interpolator.integrator.name.toString == orig(interpolator.integrator.name.toString)
interpolator.integrator.maxEvaluations == orig(interpolator.integrator.maxEvaluations)
interpolator.integrator.evaluations == orig(interpolator.integrator.evaluations)
interpolator.integrator.equations == orig(interpolator.integrator.equations)
interpolator.integrator.equations.getClass().getName() == orig(interpolator.integrator.equations.getClass().getName())
interpolator.currentState == orig(interpolator.currentState)
interpolator.currentState[] == orig(interpolator.currentState[])
interpolator.interpolatedState == orig(interpolator.interpolatedState)
interpolator.interpolatedState[] == orig(interpolator.interpolatedState[])
interpolator.interpolatedDerivatives == orig(interpolator.interpolatedDerivatives)
interpolator.interpolatedDerivatives[] == orig(interpolator.interpolatedDerivatives[])
interpolator.finalized == orig(interpolator.finalized)
interpolator.forward == orig(interpolator.forward)
interpolator.dirtyState == orig(interpolator.dirtyState)
this.integrator == null
this.interpolatedState[] elements != 0
this.interpolatedDerivatives[] elements != 0
this.finalized == true
this.forward == true
interpolator.yDotK.getClass().getName() == double[][].class
interpolator.yDotK[] elements != null
interpolator.integrator.getClass().getName() == org.apache.commons.math.ode.nonstiff.HighamHall54Integrator.class
interpolator.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.name has only one value
interpolator.integrator.name.toString == "Higham-Hall 5(4)"
interpolator.integrator.maxEvaluations == 2147483647
interpolator.integrator.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem3.class
interpolator.currentState[] elements != 0
interpolator.interpolatedState[] elements != 0
interpolator.interpolatedDerivatives[] elements != 0
interpolator.finalized == true
interpolator.forward == true
interpolator.dirtyState == true
size(this.currentState[]) == 4
size(this.interpolatedState[]) == 4
size(this.interpolatedDerivatives[]) == 4
size(interpolator.yDotK[]) == 7
size(interpolator.currentState[]) == 4
size(interpolator.interpolatedState[]) == 4
size(interpolator.interpolatedDerivatives[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::EXIT
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.integrator.stepHandlers == orig(this.integrator.stepHandlers)
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.stepHandlers.getClass().getName())
this.integrator.stepStart == orig(this.integrator.stepStart)
this.integrator.stepSize == orig(this.integrator.stepSize)
this.integrator.eventsHandlersManager == orig(this.integrator.eventsHandlersManager)
this.integrator.eventsHandlersManager.states == orig(this.integrator.eventsHandlersManager.states)
this.integrator.eventsHandlersManager.states[] == orig(this.integrator.eventsHandlersManager.states[])
this.integrator.eventsHandlersManager.states.getClass().getName() == orig(this.integrator.eventsHandlersManager.states.getClass().getName())
this.integrator.eventsHandlersManager.first == orig(this.integrator.eventsHandlersManager.first)
this.integrator.eventsHandlersManager.initialized == orig(this.integrator.eventsHandlersManager.initialized)
this.integrator.name == orig(this.integrator.name)
this.integrator.name.toString == orig(this.integrator.name.toString)
this.integrator.maxEvaluations == orig(this.integrator.maxEvaluations)
this.integrator.evaluations == orig(this.integrator.evaluations)
this.integrator.equations == orig(this.integrator.equations)
this.integrator.equations.getClass().getName() == orig(this.integrator.equations.getClass().getName())
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
size(this.interpolatedState[]) == orig(size(this.interpolatedState[]))
size(this.interpolatedDerivatives[]) == orig(size(this.interpolatedDerivatives[]))
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolator.doCopy():::ENTER
this.integrator.eventsHandlersManager.states[] == []
this.integrator.eventsHandlersManager.states[].getClass().getName() == []
this.integrator.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem3.class
this.interpolatedState[] elements != 0
this.interpolatedDerivatives[] elements != 0
this.finalized == true
this.forward == true
size(this.currentState[]) == 4
size(this.interpolatedState[]) == 4
size(this.interpolatedDerivatives[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolator.doCopy():::EXIT
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.integrator.stepHandlers == orig(this.integrator.stepHandlers)
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.stepHandlers.getClass().getName())
this.integrator.stepStart == orig(this.integrator.stepStart)
this.integrator.stepSize == orig(this.integrator.stepSize)
this.integrator.eventsHandlersManager == orig(this.integrator.eventsHandlersManager)
this.integrator.eventsHandlersManager.states == orig(this.integrator.eventsHandlersManager.states)
this.integrator.eventsHandlersManager.states[] == orig(this.integrator.eventsHandlersManager.states[])
this.integrator.eventsHandlersManager.states.getClass().getName() == orig(this.integrator.eventsHandlersManager.states.getClass().getName())
this.integrator.eventsHandlersManager.first == orig(this.integrator.eventsHandlersManager.first)
this.integrator.eventsHandlersManager.initialized == orig(this.integrator.eventsHandlersManager.initialized)
this.integrator.name == orig(this.integrator.name)
this.integrator.name.toString == orig(this.integrator.name.toString)
this.integrator.maxEvaluations == orig(this.integrator.maxEvaluations)
this.integrator.evaluations == orig(this.integrator.evaluations)
this.integrator.equations == orig(this.integrator.equations)
this.integrator.equations.getClass().getName() == orig(this.integrator.equations.getClass().getName())
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.integrator.eventsHandlersManager.states[] == []
this.integrator.eventsHandlersManager.states[].getClass().getName() == []
this.integrator.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem3.class
this.interpolatedState[] elements != 0
this.interpolatedDerivatives[] elements != 0
this.finalized == true
this.forward == true
return.getClass().getName() == org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolator.class
size(this.currentState[]) == 4
size(this.interpolatedState[]) == 4
size(this.interpolatedDerivatives[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest$1:::OBJECT
this has only one value
org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest.this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest$1.(org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest):::ENTER
org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest.this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest$1.(org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest):::EXIT
org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest.this == orig(org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest.this)
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest$1.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::ENTER
interpolator has only one value
interpolator.getClass().getName() == org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolator.class
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest$1.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::EXIT
org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest.this == orig(org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest.this)
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest$1.requiresDenseOutput():::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest$1.requiresDenseOutput():::EXIT
org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest.this == orig(org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest.this)
return == true
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest$1.requiresDenseOutput():::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest$1.reset():::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest$1.reset():::EXIT
org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest.this == orig(org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest.this)
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest:::OBJECT
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest.HighamHall54StepInterpolatorTest():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest.checkClone():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest.checkClone():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest.derivativesConsistency():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest.derivativesConsistency():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest.serialization():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest.serialization():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegrator:::CLASS
org.apache.commons.math.ode.nonstiff.MidpointIntegrator.STATIC_C has only one value
org.apache.commons.math.ode.nonstiff.MidpointIntegrator.STATIC_C[] == [0.5]
org.apache.commons.math.ode.nonstiff.MidpointIntegrator.STATIC_C[] elements == 0.5
org.apache.commons.math.ode.nonstiff.MidpointIntegrator.STATIC_A has only one value
org.apache.commons.math.ode.nonstiff.MidpointIntegrator.STATIC_A.getClass().getName() == double[][].class
org.apache.commons.math.ode.nonstiff.MidpointIntegrator.STATIC_A[] contains no nulls and has only one value, of length 1
org.apache.commons.math.ode.nonstiff.MidpointIntegrator.STATIC_A[] elements has only one value
org.apache.commons.math.ode.nonstiff.MidpointIntegrator.STATIC_A[] elements != null
org.apache.commons.math.ode.nonstiff.MidpointIntegrator.STATIC_B has only one value
org.apache.commons.math.ode.nonstiff.MidpointIntegrator.STATIC_B[] == [0.0, 1.0]
org.apache.commons.math.ode.nonstiff.MidpointIntegrator.STATIC_B[] elements one of { 0.0, 1.0 }
org.apache.commons.math.ode.nonstiff.MidpointIntegrator.STATIC_B[] sorted by <
size(org.apache.commons.math.ode.nonstiff.MidpointIntegrator.STATIC_C[]) == 1
size(org.apache.commons.math.ode.nonstiff.MidpointIntegrator.STATIC_A[]) == 1
size(org.apache.commons.math.ode.nonstiff.MidpointIntegrator.STATIC_B[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegrator:::OBJECT
org.apache.commons.math.ode.nonstiff.MidpointIntegrator.STATIC_A.getClass().getName() == this.a.getClass().getName()
this.stepHandlers.getClass().getName() == this.eventsHandlersManager.states.getClass().getName()
this.c has only one value
this.c[] == [0.5]
this.c[] elements == 0.5
this.a has only one value
this.a[] contains no nulls and has only one value, of length 1
this.a[] elements has only one value
this.a[] elements != null
this.b has only one value
this.b[] == [0.0, 1.0]
this.b[] elements one of { 0.0, 1.0 }
this.b[] sorted by <
this.prototype.getClass().getName() == org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator.class
this.prototype.yDotK == null
this.prototype.integrator == null
this.prototype.previousTime == Double.NaN
this.prototype.currentTime == Double.NaN
this.prototype.h == Double.NaN
this.prototype.currentState == null
this.prototype.interpolatedTime == Double.NaN
this.prototype.interpolatedState == null
this.prototype.interpolatedDerivatives == null
this.prototype.finalized == false
this.prototype.forward == true
this.prototype.dirtyState == true
this.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.name has only one value
this.name.toString == "midpoint"
this.maxEvaluations == 2147483647
this.evaluations == 0
this.equations == null
size(this.c[]) == 1
size(this.a[]) == 1
size(this.b[]) == 2
org.apache.commons.math.ode.nonstiff.MidpointIntegrator.STATIC_A.getClass().getName() != this.prototype.getClass().getName()
org.apache.commons.math.ode.nonstiff.MidpointIntegrator.STATIC_A.getClass().getName() != this.stepHandlers.getClass().getName()
this.prototype.getClass().getName() != this.stepHandlers.getClass().getName()
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegrator.MidpointIntegrator(double):::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegrator.MidpointIntegrator(double):::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest$1:::OBJECT
this has only one value
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest$1.(org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest):::ENTER
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest$1.(org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest):::EXIT
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.this)
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest$1.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::ENTER
interpolator has only one value
interpolator.getClass().getName() == org.apache.commons.math.ode.sampling.DummyStepInterpolator.class
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest$1.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::EXIT
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.this)
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest$1.requiresDenseOutput():::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest$1.requiresDenseOutput():::EXIT
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.this)
return == false
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest$1.requiresDenseOutput():::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest$1.reset():::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest$1.reset():::EXIT
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.this)
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest$2:::CLASS
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest$2:::OBJECT
this has only one value
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest$2.(org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest):::ENTER
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest$2.(org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest):::EXIT
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.this)
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest$2.computeDerivatives(double, double[], double[]):::ENTER
dot[] elements one of { 0.0, 1.0 }
dot[] one of { [0.0], [1.0] }
size(y[]) == 1
size(dot[]) == 1
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest$2.computeDerivatives(double, double[], double[]):::EXIT
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.this)
y[] == orig(y[])
dot[] == [1.0]
dot[] elements == 1.0
dot[] >= orig(dot[]) (elementwise)
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest$2.getDimension():::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest$2.getDimension():::EXIT
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.this)
return == 1
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest:::OBJECT
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.MidpointIntegratorTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.MidpointIntegratorTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.suite():::EXIT
return.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.testBackward():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.testBackward():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.testBigStep():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.testBigStep():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.testSmallStep():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.testSmallStep():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.testStepSize():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest.testStepSize():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator:::CLASS
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator:::OBJECT
this.yDotK.getClass().getName() == double[][].class
this.yDotK[] elements != null
this.integrator.getClass().getName() == org.apache.commons.math.ode.nonstiff.MidpointIntegrator.class
this.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.integrator.eventsHandlersManager.states[] elements != null
this.integrator.eventsHandlersManager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
this.integrator.eventsHandlersManager.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.integrator.eventsHandlersManager.states.getClass().getName() == java.util.ArrayList.class
this.integrator.eventsHandlersManager.first == null
this.integrator.eventsHandlersManager.initialized == false
this.integrator.name has only one value
this.integrator.name.toString == "midpoint"
this.integrator.maxEvaluations == 2147483647
this.integrator.evaluations >= 2
this.dirtyState == true
size(this.yDotK[]) == 2
size(this.integrator.eventsHandlersManager.states[]) one of { 0, 2 }
size(this.integrator.eventsHandlersManager.states[])-1 != 0
size(this.currentState[]) one of { 1, 2, 4 }
size(this.interpolatedState[]) one of { 1, 2, 4 }
size(this.interpolatedDerivatives[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator.MidpointStepInterpolator():::EXIT
this.yDotK == null
this.integrator == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.finalized == false
this.forward == true
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator.MidpointStepInterpolator(org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator):::ENTER
interpolator.yDotK.getClass().getName() == double[][].class
interpolator.yDotK[] contains no nulls and has only one value, of length 2
interpolator.yDotK[] elements != null
interpolator.integrator.getClass().getName() == org.apache.commons.math.ode.nonstiff.MidpointIntegrator.class
interpolator.integrator.stepHandlers has only one value
interpolator.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.stepSize == 0.004
interpolator.integrator.eventsHandlersManager has only one value
interpolator.integrator.name has only one value
interpolator.integrator.name.toString == "midpoint"
interpolator.integrator.maxEvaluations == 2147483647
interpolator.integrator.equations has only one value
interpolator.integrator.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem1.class
interpolator.h one of { 0.004, Double.NaN }
interpolator.currentState[] sorted by >
interpolator.interpolatedState[] sorted by >
interpolator.interpolatedDerivatives[] sorted by <
interpolator.finalized == true
interpolator.forward == true
interpolator.dirtyState == true
size(interpolator.yDotK[]) == 2
size(interpolator.currentState[]) == 2
size(interpolator.interpolatedState[]) == 2
size(interpolator.interpolatedDerivatives[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator.MidpointStepInterpolator(org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator):::EXIT
interpolator.yDotK == orig(interpolator.yDotK)
interpolator.yDotK.getClass().getName() == orig(interpolator.yDotK.getClass().getName())
interpolator.yDotK[] == orig(interpolator.yDotK[])
interpolator.integrator == orig(interpolator.integrator)
interpolator.integrator.getClass().getName() == orig(interpolator.integrator.getClass().getName())
interpolator.integrator.stepHandlers == orig(interpolator.integrator.stepHandlers)
interpolator.integrator.stepHandlers.getClass().getName() == orig(interpolator.integrator.stepHandlers.getClass().getName())
interpolator.integrator.stepStart == orig(interpolator.integrator.stepStart)
interpolator.integrator.stepSize == orig(interpolator.integrator.stepSize)
interpolator.integrator.eventsHandlersManager == orig(interpolator.integrator.eventsHandlersManager)
interpolator.integrator.name == orig(interpolator.integrator.name)
interpolator.integrator.name.toString == orig(interpolator.integrator.name.toString)
interpolator.integrator.maxEvaluations == orig(interpolator.integrator.maxEvaluations)
interpolator.integrator.evaluations == orig(interpolator.integrator.evaluations)
interpolator.integrator.equations == orig(interpolator.integrator.equations)
interpolator.integrator.equations.getClass().getName() == orig(interpolator.integrator.equations.getClass().getName())
interpolator.currentState == orig(interpolator.currentState)
interpolator.currentState[] == orig(interpolator.currentState[])
interpolator.interpolatedState == orig(interpolator.interpolatedState)
interpolator.interpolatedState[] == orig(interpolator.interpolatedState[])
interpolator.interpolatedDerivatives == orig(interpolator.interpolatedDerivatives)
interpolator.interpolatedDerivatives[] == orig(interpolator.interpolatedDerivatives[])
interpolator.finalized == orig(interpolator.finalized)
interpolator.forward == orig(interpolator.forward)
interpolator.dirtyState == orig(interpolator.dirtyState)
this.integrator == null
this.h one of { 0.004, Double.NaN }
this.currentState[] sorted by >
this.interpolatedState[] sorted by >
this.interpolatedDerivatives[] sorted by <
this.finalized == true
this.forward == true
interpolator.yDotK.getClass().getName() == double[][].class
interpolator.yDotK[] contains no nulls and has only one value, of length 2
interpolator.yDotK[] elements != null
interpolator.integrator.getClass().getName() == org.apache.commons.math.ode.nonstiff.MidpointIntegrator.class
interpolator.integrator.stepHandlers has only one value
interpolator.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.stepSize == 0.004
interpolator.integrator.eventsHandlersManager has only one value
interpolator.integrator.name has only one value
interpolator.integrator.name.toString == "midpoint"
interpolator.integrator.maxEvaluations == 2147483647
interpolator.integrator.equations has only one value
interpolator.integrator.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem1.class
interpolator.h one of { 0.004, Double.NaN }
interpolator.currentState[] sorted by >
interpolator.interpolatedState[] sorted by >
interpolator.interpolatedDerivatives[] sorted by <
interpolator.finalized == true
interpolator.forward == true
interpolator.dirtyState == true
size(this.currentState[]) == 2
size(this.interpolatedState[]) == 2
size(this.interpolatedDerivatives[]) == 2
size(interpolator.yDotK[]) == 2
size(interpolator.currentState[]) == 2
size(interpolator.interpolatedState[]) == 2
size(interpolator.interpolatedDerivatives[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::EXIT
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.integrator.stepHandlers == orig(this.integrator.stepHandlers)
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.stepHandlers.getClass().getName())
this.integrator.stepStart == orig(this.integrator.stepStart)
this.integrator.stepSize == orig(this.integrator.stepSize)
this.integrator.eventsHandlersManager == orig(this.integrator.eventsHandlersManager)
this.integrator.eventsHandlersManager.states == orig(this.integrator.eventsHandlersManager.states)
this.integrator.eventsHandlersManager.states[] == orig(this.integrator.eventsHandlersManager.states[])
this.integrator.eventsHandlersManager.states.getClass().getName() == orig(this.integrator.eventsHandlersManager.states.getClass().getName())
this.integrator.eventsHandlersManager.first == orig(this.integrator.eventsHandlersManager.first)
this.integrator.eventsHandlersManager.initialized == orig(this.integrator.eventsHandlersManager.initialized)
this.integrator.name == orig(this.integrator.name)
this.integrator.name.toString == orig(this.integrator.name.toString)
this.integrator.maxEvaluations == orig(this.integrator.maxEvaluations)
this.integrator.evaluations == orig(this.integrator.evaluations)
this.integrator.equations == orig(this.integrator.equations)
this.integrator.equations.getClass().getName() == orig(this.integrator.equations.getClass().getName())
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
size(this.interpolatedState[]) == orig(size(this.interpolatedState[]))
size(this.interpolatedDerivatives[]) == orig(size(this.interpolatedDerivatives[]))
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator.doCopy():::ENTER
this.yDotK[] contains no nulls and has only one value, of length 2
this.integrator.stepHandlers has only one value
this.integrator.stepSize == 0.004
this.integrator.eventsHandlersManager has only one value
this.integrator.eventsHandlersManager.states has only one value
this.integrator.eventsHandlersManager.states[] == []
this.integrator.eventsHandlersManager.states[].getClass().getName() == []
this.integrator.equations has only one value
this.integrator.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem1.class
this.h one of { 0.004, Double.NaN }
this.currentState[] sorted by >
this.interpolatedState[] sorted by >
this.interpolatedDerivatives[] sorted by <
this.finalized == true
this.forward == true
size(this.currentState[]) == 2
size(this.interpolatedState[]) == 2
size(this.interpolatedDerivatives[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator.doCopy():::EXIT
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.integrator.stepHandlers == orig(this.integrator.stepHandlers)
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.stepHandlers.getClass().getName())
this.integrator.stepStart == orig(this.integrator.stepStart)
this.integrator.stepSize == orig(this.integrator.stepSize)
this.integrator.eventsHandlersManager == orig(this.integrator.eventsHandlersManager)
this.integrator.eventsHandlersManager.states == orig(this.integrator.eventsHandlersManager.states)
this.integrator.eventsHandlersManager.states[] == orig(this.integrator.eventsHandlersManager.states[])
this.integrator.eventsHandlersManager.states.getClass().getName() == orig(this.integrator.eventsHandlersManager.states.getClass().getName())
this.integrator.eventsHandlersManager.first == orig(this.integrator.eventsHandlersManager.first)
this.integrator.eventsHandlersManager.initialized == orig(this.integrator.eventsHandlersManager.initialized)
this.integrator.name == orig(this.integrator.name)
this.integrator.name.toString == orig(this.integrator.name.toString)
this.integrator.maxEvaluations == orig(this.integrator.maxEvaluations)
this.integrator.evaluations == orig(this.integrator.evaluations)
this.integrator.equations == orig(this.integrator.equations)
this.integrator.equations.getClass().getName() == orig(this.integrator.equations.getClass().getName())
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.yDotK[] contains no nulls and has only one value, of length 2
this.integrator.stepHandlers has only one value
this.integrator.stepSize == 0.004
this.integrator.eventsHandlersManager has only one value
this.integrator.eventsHandlersManager.states has only one value
this.integrator.eventsHandlersManager.states[] == []
this.integrator.eventsHandlersManager.states[].getClass().getName() == []
this.integrator.equations has only one value
this.integrator.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem1.class
this.h one of { 0.004, Double.NaN }
this.currentState[] sorted by >
this.interpolatedState[] sorted by >
this.interpolatedDerivatives[] sorted by <
this.finalized == true
this.forward == true
return.getClass().getName() == org.apache.commons.math.ode.nonstiff.MidpointStepInterpolator.class
size(this.currentState[]) == 2
size(this.interpolatedState[]) == 2
size(this.interpolatedDerivatives[]) == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest:::OBJECT
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest.MidpointStepInterpolatorTest():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest.serialization():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest.serialization():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest.testDerivativesConsistency():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest.testDerivativesConsistency():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator:::OBJECT
this.c[] sorted by <=
this.a.getClass().getName() == double[][].class
this.a[] elements != null
this.prototype.yDotK == null
this.prototype.integrator == null
this.prototype.previousTime == Double.NaN
this.prototype.currentTime == Double.NaN
this.prototype.h == Double.NaN
this.prototype.currentState == null
this.prototype.interpolatedTime == Double.NaN
this.prototype.interpolatedState == null
this.prototype.interpolatedDerivatives == null
this.prototype.forward == true
this.prototype.dirtyState == true
this.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.eventsHandlersManager.states[] elements != null
this.eventsHandlersManager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
this.eventsHandlersManager.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.eventsHandlersManager.states.getClass().getName() == java.util.ArrayList.class
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.maxEvaluations == 2147483647
this.evaluations >= 0
size(this.c[]) one of { 0, 1, 3 }
size(this.a[]) one of { 0, 1, 3 }
size(this.b[]) one of { 1, 2, 4 }
size(this.eventsHandlersManager.states[]) one of { 0, 2 }
size(this.eventsHandlersManager.states[])-1 != 0
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator.RungeKuttaIntegrator(java.lang.String, double[], double[][], double[], org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator, double):::ENTER
c[] sorted by <=
a.getClass().getName() == double[][].class
a[] elements != null
prototype.yDotK == null
prototype.integrator == null
prototype.previousTime == Double.NaN
prototype.currentTime == Double.NaN
prototype.h == Double.NaN
prototype.currentState == null
prototype.interpolatedTime == Double.NaN
prototype.interpolatedState == null
prototype.interpolatedDerivatives == null
prototype.finalized == false
prototype.forward == true
prototype.dirtyState == true
size(c[]) one of { 0, 1, 3 }
size(a[]) one of { 0, 1, 3 }
size(b[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator.RungeKuttaIntegrator(java.lang.String, double[], double[][], double[], org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator, double):::EXIT
name.toString == orig(name.toString)
c[] == orig(c[])
a[] == orig(a[])
b[] == orig(b[])
prototype.yDotK == orig(prototype.yDotK)
prototype.integrator == orig(prototype.integrator)
prototype.currentState == orig(prototype.currentState)
prototype.interpolatedState == orig(prototype.interpolatedState)
prototype.interpolatedDerivatives == orig(prototype.interpolatedDerivatives)
prototype.finalized == orig(prototype.finalized)
prototype.forward == orig(prototype.forward)
prototype.dirtyState == orig(prototype.dirtyState)
this.prototype.finalized == false
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.evaluations == 0
this.equations == null
c[] sorted by <=
a[] elements != null
prototype.yDotK == null
prototype.integrator == null
prototype.previousTime == Double.NaN
prototype.currentTime == Double.NaN
prototype.h == Double.NaN
prototype.currentState == null
prototype.interpolatedTime == Double.NaN
prototype.interpolatedState == null
prototype.interpolatedDerivatives == null
prototype.finalized == false
prototype.forward == true
prototype.dirtyState == true
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator.integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double, double[], double, double[]):::ENTER
this.prototype.finalized == false
this.evaluations == 0
this.equations == null
t0 == 0.0
y[] elements == 0.0
y[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
size(y0[]) one of { 1, 2, 4 }
size(y[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator.integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double, double[], double, double[]):::EXIT
this.c == orig(this.c)
this.c[] == orig(this.c[])
this.a == orig(this.a)
this.a.getClass().getName() == orig(this.a.getClass().getName())
this.a[] == orig(this.a[])
this.b == orig(this.b)
this.b[] == orig(this.b[])
this.prototype == orig(this.prototype)
this.prototype.getClass().getName() == orig(this.prototype.getClass().getName())
this.prototype.yDotK == orig(this.prototype.yDotK)
this.prototype.integrator == orig(this.prototype.integrator)
this.prototype.currentState == orig(this.prototype.currentState)
this.prototype.interpolatedState == orig(this.prototype.interpolatedState)
this.prototype.interpolatedDerivatives == orig(this.prototype.interpolatedDerivatives)
this.prototype.forward == orig(this.prototype.forward)
this.prototype.dirtyState == orig(this.prototype.dirtyState)
this.step == orig(this.step)
this.stepHandlers == orig(this.stepHandlers)
this.stepHandlers.getClass().getName() == orig(this.stepHandlers.getClass().getName())
this.eventsHandlersManager == orig(this.eventsHandlersManager)
this.eventsHandlersManager.states == orig(this.eventsHandlersManager.states)
this.eventsHandlersManager.states[] == orig(this.eventsHandlersManager.states[])
this.eventsHandlersManager.states.getClass().getName() == orig(this.eventsHandlersManager.states.getClass().getName())
this.eventsHandlersManager.first == orig(this.eventsHandlersManager.first)
this.eventsHandlersManager.initialized == orig(this.eventsHandlersManager.initialized)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.maxEvaluations == orig(this.maxEvaluations)
y0[] == orig(y0[])
orig(this.evaluations) % this.evaluations == 0
this.evaluations > orig(this.evaluations)
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator:::OBJECT
this.yDotK.getClass().getName() == double[][].class
this.yDotK[] elements != null
this.integrator.stepHandlers != null
this.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.integrator.stepStart == Double.NaN
this.integrator.eventsHandlersManager != null
this.integrator.eventsHandlersManager.states != null
this.integrator.eventsHandlersManager.states[] elements != null
this.integrator.eventsHandlersManager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
this.integrator.eventsHandlersManager.states.getClass().getName() == java.util.ArrayList.class
this.integrator.eventsHandlersManager.first == null
this.integrator.eventsHandlersManager.initialized == false
this.integrator.name != null
this.integrator.maxEvaluations == 2147483647
this.integrator.evaluations == 0
this.integrator.equations != null
this.h != 0
size(this.yDotK[]) >= 1
size(this.integrator.eventsHandlersManager.states[]) one of { 0, 1, 2 }
size(this.currentState[]) one of { 1, 2, 4 }
size(this.interpolatedState[]) one of { 1, 2, 4 }
size(this.interpolatedDerivatives[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator.RungeKuttaStepInterpolator():::EXIT
this.yDotK == null
this.integrator == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.finalized == false
this.forward == true
this.dirtyState == true
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator.RungeKuttaStepInterpolator(org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator):::ENTER
interpolator != null
interpolator.yDotK.getClass().getName() == double[][].class
interpolator.yDotK[] elements != null
interpolator.integrator.stepHandlers != null
interpolator.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.stepSize != 0
interpolator.integrator.eventsHandlersManager != null
interpolator.integrator.name != null
interpolator.integrator.maxEvaluations == 2147483647
interpolator.integrator.equations != null
interpolator.h != 0
interpolator.finalized == true
size(interpolator.yDotK[]) >= 1
size(interpolator.currentState[]) one of { 2, 4 }
size(interpolator.interpolatedState[]) one of { 2, 4 }
size(interpolator.interpolatedDerivatives[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator.RungeKuttaStepInterpolator(org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator):::EXIT
interpolator.yDotK == orig(interpolator.yDotK)
interpolator.yDotK.getClass().getName() == orig(interpolator.yDotK.getClass().getName())
interpolator.yDotK[] == orig(interpolator.yDotK[])
interpolator.integrator == orig(interpolator.integrator)
interpolator.integrator.getClass().getName() == orig(interpolator.integrator.getClass().getName())
interpolator.integrator.stepHandlers == orig(interpolator.integrator.stepHandlers)
interpolator.integrator.stepHandlers.getClass().getName() == orig(interpolator.integrator.stepHandlers.getClass().getName())
interpolator.integrator.stepStart == orig(interpolator.integrator.stepStart)
interpolator.integrator.stepSize == orig(interpolator.integrator.stepSize)
interpolator.integrator.eventsHandlersManager == orig(interpolator.integrator.eventsHandlersManager)
interpolator.integrator.name == orig(interpolator.integrator.name)
interpolator.integrator.name.toString == orig(interpolator.integrator.name.toString)
interpolator.integrator.maxEvaluations == orig(interpolator.integrator.maxEvaluations)
interpolator.integrator.evaluations == orig(interpolator.integrator.evaluations)
interpolator.integrator.equations == orig(interpolator.integrator.equations)
interpolator.integrator.equations.getClass().getName() == orig(interpolator.integrator.equations.getClass().getName())
interpolator.currentState == orig(interpolator.currentState)
interpolator.currentState[] == orig(interpolator.currentState[])
interpolator.interpolatedState == orig(interpolator.interpolatedState)
interpolator.interpolatedState[] == orig(interpolator.interpolatedState[])
interpolator.interpolatedDerivatives == orig(interpolator.interpolatedDerivatives)
interpolator.interpolatedDerivatives[] == orig(interpolator.interpolatedDerivatives[])
interpolator.finalized == orig(interpolator.finalized)
interpolator.forward == orig(interpolator.forward)
interpolator.dirtyState == orig(interpolator.dirtyState)
this.integrator == null
this.finalized == true
interpolator.yDotK.getClass().getName() == double[][].class
interpolator.yDotK[] elements != null
interpolator.integrator.stepHandlers != null
interpolator.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.stepSize != 0
interpolator.integrator.eventsHandlersManager != null
interpolator.integrator.name != null
interpolator.integrator.maxEvaluations == 2147483647
interpolator.integrator.equations != null
interpolator.h != 0
interpolator.finalized == true
size(this.currentState[]) one of { 2, 4 }
size(this.interpolatedState[]) one of { 2, 4 }
size(this.interpolatedDerivatives[]) one of { 2, 4 }
size(interpolator.yDotK[]) >= 1
size(interpolator.currentState[]) one of { 2, 4 }
size(interpolator.interpolatedState[]) one of { 2, 4 }
size(interpolator.interpolatedDerivatives[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator.readExternal(java.io.ObjectInput):::ENTER
this.yDotK == null
this.integrator == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.finalized == false
this.forward == true
this.dirtyState == true
in != null
in.getClass().getName() == java.io.ObjectInputStream.class
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator.readExternal(java.io.ObjectInput):::EXIT
this.integrator == orig(this.integrator)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.yDotK != null
this.integrator == null
this.currentState != null
this.currentState[] elements != 0
this.interpolatedState != null
this.interpolatedState[] elements == 0.0
this.interpolatedState[] one of { [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.interpolatedDerivatives != null
this.interpolatedDerivatives[] elements == 0.0
this.interpolatedDerivatives[] one of { [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.finalized == true
this.forward == true
this.dirtyState == true
size(this.currentState[]) one of { 2, 4 }
size(this.interpolatedState[]) one of { 2, 4 }
size(this.interpolatedDerivatives[]) one of { 2, 4 }
this.previousTime != orig(this.previousTime)
this.currentTime != orig(this.currentTime)
this.h != orig(this.h)
this.interpolatedTime != orig(this.interpolatedTime)
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator.reinitialize(org.apache.commons.math.ode.AbstractIntegrator, double[], double[][], boolean):::ENTER
this.yDotK == null
this.integrator == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.finalized == true
this.forward == true
this.dirtyState == true
rkIntegrator != null
rkIntegrator.stepHandlers != null
rkIntegrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
rkIntegrator.stepStart == Double.NaN
rkIntegrator.eventsHandlersManager != null
rkIntegrator.eventsHandlersManager.states != null
rkIntegrator.eventsHandlersManager.states[] elements != null
rkIntegrator.eventsHandlersManager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
rkIntegrator.eventsHandlersManager.states.getClass().getName() == java.util.ArrayList.class
rkIntegrator.eventsHandlersManager.first == null
rkIntegrator.eventsHandlersManager.initialized == false
rkIntegrator.name != null
rkIntegrator.maxEvaluations == 2147483647
rkIntegrator.evaluations == 0
rkIntegrator.equations != null
y != null
y[] elements == 0.0
y[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
yDotArray != null
yDotArray.getClass().getName() == double[][].class
yDotArray[] elements != null
size(rkIntegrator.eventsHandlersManager.states[]) one of { 0, 1, 2 }
size(y[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator.reinitialize(org.apache.commons.math.ode.AbstractIntegrator, double[], double[][], boolean):::EXIT
this.dirtyState == orig(this.dirtyState)
rkIntegrator.stepHandlers == orig(rkIntegrator.stepHandlers)
rkIntegrator.stepHandlers.getClass().getName() == orig(rkIntegrator.stepHandlers.getClass().getName())
rkIntegrator.eventsHandlersManager == orig(rkIntegrator.eventsHandlersManager)
rkIntegrator.eventsHandlersManager.states == orig(rkIntegrator.eventsHandlersManager.states)
rkIntegrator.eventsHandlersManager.states[] == orig(rkIntegrator.eventsHandlersManager.states[])
rkIntegrator.eventsHandlersManager.states.getClass().getName() == orig(rkIntegrator.eventsHandlersManager.states.getClass().getName())
rkIntegrator.eventsHandlersManager.first == orig(rkIntegrator.eventsHandlersManager.first)
rkIntegrator.eventsHandlersManager.initialized == orig(rkIntegrator.eventsHandlersManager.initialized)
rkIntegrator.name == orig(rkIntegrator.name)
rkIntegrator.name.toString == orig(rkIntegrator.name.toString)
rkIntegrator.maxEvaluations == orig(rkIntegrator.maxEvaluations)
rkIntegrator.evaluations == orig(rkIntegrator.evaluations)
rkIntegrator.equations == orig(rkIntegrator.equations)
rkIntegrator.equations.getClass().getName() == orig(rkIntegrator.equations.getClass().getName())
y[] == orig(y[])
yDotArray[] == orig(yDotArray[])
this.yDotK != null
this.integrator != null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState != null
this.currentState[] elements == 0.0
this.currentState[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.interpolatedTime == Double.NaN
this.interpolatedState != null
this.interpolatedState[] elements == 0.0
this.interpolatedState[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.interpolatedDerivatives != null
this.interpolatedDerivatives[] elements == 0.0
this.interpolatedDerivatives[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.finalized == false
this.dirtyState == true
rkIntegrator.stepHandlers != null
rkIntegrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
rkIntegrator.stepStart == Double.NaN
rkIntegrator.eventsHandlersManager != null
rkIntegrator.eventsHandlersManager.states != null
rkIntegrator.eventsHandlersManager.states[] elements != null
rkIntegrator.eventsHandlersManager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
rkIntegrator.eventsHandlersManager.states.getClass().getName() == java.util.ArrayList.class
rkIntegrator.eventsHandlersManager.first == null
rkIntegrator.eventsHandlersManager.initialized == false
rkIntegrator.name != null
rkIntegrator.maxEvaluations == 2147483647
rkIntegrator.evaluations == 0
rkIntegrator.equations != null
y[] elements == 0.0
y[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
yDotArray[] elements != null
size(rkIntegrator.eventsHandlersManager.states[]) one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator.writeExternal(java.io.ObjectOutput):::ENTER
this.yDotK != null
this.integrator == null
this.currentState != null
this.currentState[] elements != 0
this.interpolatedState != null
this.interpolatedState[] elements != 0
this.interpolatedDerivatives != null
this.interpolatedDerivatives[] elements != 0
this.finalized == true
this.forward == true
this.dirtyState == true
out != null
out.getClass().getName() == java.io.ObjectOutputStream.class
size(this.currentState[]) one of { 2, 4 }
size(this.interpolatedState[]) one of { 2, 4 }
size(this.interpolatedDerivatives[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator.writeExternal(java.io.ObjectOutput):::EXIT
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.yDotK != null
this.integrator == null
this.currentState != null
this.currentState[] elements != 0
this.interpolatedState != null
this.interpolatedState[] elements != 0
this.interpolatedDerivatives != null
this.interpolatedDerivatives[] elements != 0
this.finalized == true
this.forward == true
this.dirtyState == true
size(this.currentState[]) one of { 2, 4 }
size(this.interpolatedState[]) one of { 2, 4 }
size(this.interpolatedDerivatives[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.StepProblem:::CLASS
===========================================================================
org.apache.commons.math.ode.nonstiff.StepProblem:::OBJECT
this.rate one of { 0.0, 1.0 }
this.rateAfter == 1.0
this.switchTime == 2.0
===========================================================================
org.apache.commons.math.ode.nonstiff.StepProblem.StepProblem(double, double, double):::ENTER
rateBefore == 0.0
rateAfter == 1.0
switchTime == 2.0
===========================================================================
org.apache.commons.math.ode.nonstiff.StepProblem.StepProblem(double, double, double):::EXIT
this.rate == 0.0
===========================================================================
org.apache.commons.math.ode.nonstiff.StepProblem.computeDerivatives(double, double[], double[]):::ENTER
y != null
y[] elements >= 0.0
yDot != null
yDot[] elements one of { 0.0, 1.0 }
yDot[] one of { [0.0], [1.0] }
size(y[]) == 1
size(yDot[]) == 1
===========================================================================
org.apache.commons.math.ode.nonstiff.StepProblem.computeDerivatives(double, double[], double[]):::EXIT
this.rate == orig(this.rate)
this.rateAfter == orig(this.rateAfter)
this.switchTime == orig(this.switchTime)
y[] == orig(y[])
y[] elements >= 0.0
yDot[] elements one of { 0.0, 1.0 }
yDot[] one of { [0.0], [1.0] }
yDot[] >= orig(yDot[]) (elementwise)
===========================================================================
org.apache.commons.math.ode.nonstiff.StepProblem.eventOccurred(double, double[], boolean):::ENTER
this.rate == 0.0
t == 2.0
y[] == [0.0]
y[] elements == 0.0
increasing == true
size(y[]) == 1
===========================================================================
org.apache.commons.math.ode.nonstiff.StepProblem.eventOccurred(double, double[], boolean):::EXIT
this.rateAfter == orig(this.rateAfter)
this.switchTime == orig(this.switchTime)
y[] == orig(y[])
this.rate == 1.0
y[] == [0.0]
y[] elements == 0.0
return == 2
===========================================================================
org.apache.commons.math.ode.nonstiff.StepProblem.g(double, double[]):::ENTER
y != null
size(y[]) == 1
===========================================================================
org.apache.commons.math.ode.nonstiff.StepProblem.g(double, double[]):::EXIT
this.rate == orig(this.rate)
this.rateAfter == orig(this.rateAfter)
this.switchTime == orig(this.switchTime)
y[] == orig(y[])
===========================================================================
org.apache.commons.math.ode.nonstiff.StepProblem.getDimension():::ENTER
this.rate == 0.0
===========================================================================
org.apache.commons.math.ode.nonstiff.StepProblem.getDimension():::EXIT
this.rate == orig(this.rate)
this.rateAfter == orig(this.rateAfter)
this.switchTime == orig(this.switchTime)
this.rate == 0.0
return == 1
===========================================================================
org.apache.commons.math.ode.nonstiff.StepProblem.setRate(double):::ENTER
this.rate == 0.0
rate one of { 0.0, 1.0 }
===========================================================================
org.apache.commons.math.ode.nonstiff.StepProblem.setRate(double):::EXIT
this.rateAfter == orig(this.rateAfter)
this.switchTime == orig(this.switchTime)
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator:::CLASS
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.STATIC_C has only one value
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.STATIC_C[] == [0.3333333333333333, 0.6666666666666666, 1.0]
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.STATIC_C[] elements one of { 0.3333333333333333, 0.6666666666666666, 1.0 }
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.STATIC_C[] sorted by <
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.STATIC_A has only one value
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.STATIC_A.getClass().getName() == double[][].class
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.STATIC_A[] contains no nulls and has only one value, of length 3
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.STATIC_A[] elements != null
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.STATIC_B has only one value
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.STATIC_B[] == [0.125, 0.375, 0.375, 0.125]
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.STATIC_B[] elements one of { 0.125, 0.375 }
size(org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.STATIC_C[]) == 3
size(org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.STATIC_A[]) == 3
size(org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.STATIC_B[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator:::OBJECT
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.STATIC_A.getClass().getName() == this.a.getClass().getName()
this.stepHandlers.getClass().getName() == this.eventsHandlersManager.states.getClass().getName()
this.c has only one value
this.c[] == [0.3333333333333333, 0.6666666666666666, 1.0]
this.c[] elements one of { 0.3333333333333333, 0.6666666666666666, 1.0 }
this.c[] sorted by <
this.a has only one value
this.a[] contains no nulls and has only one value, of length 3
this.a[] elements != null
this.b has only one value
this.b[] == [0.125, 0.375, 0.375, 0.125]
this.b[] elements one of { 0.125, 0.375 }
this.prototype.getClass().getName() == org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolator.class
this.prototype.yDotK == null
this.prototype.integrator == null
this.prototype.previousTime == Double.NaN
this.prototype.currentTime == Double.NaN
this.prototype.h == Double.NaN
this.prototype.currentState == null
this.prototype.interpolatedTime == Double.NaN
this.prototype.interpolatedState == null
this.prototype.interpolatedDerivatives == null
this.prototype.finalized == false
this.prototype.forward == true
this.prototype.dirtyState == true
this.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.stepStart == Double.NaN
this.stepSize == Double.NaN
this.eventsHandlersManager.states[] == []
this.eventsHandlersManager.states[].getClass().getName() == []
this.eventsHandlersManager.first == null
this.eventsHandlersManager.initialized == false
this.name has only one value
this.name.toString == "3/8"
this.maxEvaluations == 2147483647
this.evaluations == 0
this.equations == null
size(this.c[]) == 3
size(this.a[]) == 3
size(this.b[]) == 4
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.STATIC_A.getClass().getName() != this.prototype.getClass().getName()
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.STATIC_A.getClass().getName() != this.stepHandlers.getClass().getName()
this.prototype.getClass().getName() != this.stepHandlers.getClass().getName()
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.ThreeEighthesIntegrator(double):::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.ThreeEighthesIntegrator(double):::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest$1:::OBJECT
this has only one value
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest$1.(org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest):::ENTER
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest$1.(org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest):::EXIT
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.this)
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest$1.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::ENTER
interpolator has only one value
interpolator.getClass().getName() == org.apache.commons.math.ode.sampling.DummyStepInterpolator.class
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest$1.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::EXIT
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.this)
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest$1.requiresDenseOutput():::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest$1.requiresDenseOutput():::EXIT
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.this)
return == false
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest$1.requiresDenseOutput():::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest$1.reset():::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest$1.reset():::EXIT
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.this)
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest$2:::OBJECT
this has only one value
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest$2.(org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest):::ENTER
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest$2.(org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest):::EXIT
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.this)
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest$2.computeDerivatives(double, double[], double[]):::ENTER
dot[] elements one of { 0.0, 1.0 }
dot[] one of { [0.0], [1.0] }
size(y[]) == 1
size(dot[]) == 1
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest$2.computeDerivatives(double, double[], double[]):::EXIT
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.this)
y[] == orig(y[])
dot[] == [1.0]
dot[] elements == 1.0
dot[] >= orig(dot[]) (elementwise)
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest$2.getDimension():::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest$2.getDimension():::EXIT
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.this == orig(org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.this)
return == 1
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest$KeplerHandler:::OBJECT
this has only one value
this.pb has only one value
this.pb.e == 0.9
this.pb.y has only one value
this.pb.n == 4
this.pb.calls >= 0
this.pb.t0 == 0.0
this.pb.y0 has only one value
this.pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
this.pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
this.pb.t1 == 20.0
this.pb.errorScale has only one value
this.pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
this.pb.errorScale[] elements == 1.0
size(this.pb.y[]) == 4
size(this.pb.y0[]) == 4
size(this.pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest$KeplerHandler.KeplerHandler(org.apache.commons.math.ode.TestProblem3):::ENTER
pb has only one value
pb.e == 0.9
pb.y has only one value
pb.y[] == [0.0, 0.0, 0.0, 0.0]
pb.y[] elements == 0.0
pb.n == 4
pb.calls == 0
pb.t0 == 0.0
pb.y0 has only one value
pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
pb.t1 == 20.0
pb.errorScale has only one value
pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
pb.errorScale[] elements == 1.0
size(pb.y[]) == 4
size(pb.y0[]) == 4
size(pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest$KeplerHandler.KeplerHandler(org.apache.commons.math.ode.TestProblem3):::EXIT
pb.e == orig(pb.e)
pb.y == orig(pb.y)
pb.y[] == orig(pb.y[])
pb.n == orig(pb.n)
pb.calls == orig(pb.calls)
pb.t0 == orig(pb.t0)
pb.y0 == orig(pb.y0)
pb.y0[] == orig(pb.y0[])
pb.t1 == orig(pb.t1)
pb.errorScale == orig(pb.errorScale)
pb.errorScale[] == orig(pb.errorScale[])
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
this.maxError == 0.0
pb.e == 0.9
pb.y has only one value
pb.y[] == [0.0, 0.0, 0.0, 0.0]
pb.y[] elements == 0.0
pb.n == 4
pb.calls == 0
pb.t0 == 0.0
pb.y0 has only one value
pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
pb.t1 == 20.0
pb.errorScale has only one value
pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
pb.errorScale[] elements == 1.0
size(pb.y[]) == 4
size(pb.y0[]) == 4
size(pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest$KeplerHandler.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::ENTER
interpolator has only one value
interpolator.getClass().getName() == org.apache.commons.math.ode.sampling.DummyStepInterpolator.class
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest$KeplerHandler.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::EXIT
this.pb == orig(this.pb)
this.pb.e == orig(this.pb.e)
this.pb.y == orig(this.pb.y)
this.pb.n == orig(this.pb.n)
this.pb.calls == orig(this.pb.calls)
this.pb.t0 == orig(this.pb.t0)
this.pb.y0 == orig(this.pb.y0)
this.pb.y0[] == orig(this.pb.y0[])
this.pb.t1 == orig(this.pb.t1)
this.pb.errorScale == orig(this.pb.errorScale)
this.pb.errorScale[] == orig(this.pb.errorScale[])
size(this.pb.y[]) == orig(size(this.pb.y[]))
this.pb.y[] elements != 0
this.maxError >= orig(this.maxError)
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest$KeplerHandler.requiresDenseOutput():::ENTER
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
this.maxError == 0.0
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest$KeplerHandler.requiresDenseOutput():::EXIT
this.pb == orig(this.pb)
this.pb.e == orig(this.pb.e)
this.pb.y == orig(this.pb.y)
this.pb.y[] == orig(this.pb.y[])
this.pb.n == orig(this.pb.n)
this.pb.calls == orig(this.pb.calls)
this.pb.t0 == orig(this.pb.t0)
this.pb.y0 == orig(this.pb.y0)
this.pb.y0[] == orig(this.pb.y0[])
this.pb.t1 == orig(this.pb.t1)
this.pb.errorScale == orig(this.pb.errorScale)
this.pb.errorScale[] == orig(this.pb.errorScale[])
this.maxError == orig(this.maxError)
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
this.maxError == 0.0
return == false
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest$KeplerHandler.requiresDenseOutput():::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest$KeplerHandler.reset():::ENTER
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
this.maxError == 0.0
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest$KeplerHandler.reset():::EXIT
this.pb == orig(this.pb)
this.pb.e == orig(this.pb.e)
this.pb.y == orig(this.pb.y)
this.pb.y[] == orig(this.pb.y[])
this.pb.n == orig(this.pb.n)
this.pb.calls == orig(this.pb.calls)
this.pb.t0 == orig(this.pb.t0)
this.pb.y0 == orig(this.pb.y0)
this.pb.y0[] == orig(this.pb.y0[])
this.pb.t1 == orig(this.pb.t1)
this.pb.errorScale == orig(this.pb.errorScale)
this.pb.errorScale[] == orig(this.pb.errorScale[])
this.maxError == orig(this.maxError)
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.calls == 0
this.maxError == 0.0
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest:::OBJECT
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.ThreeEighthesIntegratorTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.ThreeEighthesIntegratorTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.suite():::EXIT
return.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.testBackward():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.testBackward():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.testBigStep():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.testBigStep():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.testKepler():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.testKepler():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.testSmallStep():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.testSmallStep():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.testStepSize():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest.testStepSize():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolator:::CLASS
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolator:::OBJECT
this.yDotK.getClass().getName() == double[][].class
this.yDotK[] elements != null
this.integrator.getClass().getName() == org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.class
this.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
this.integrator.eventsHandlersManager.states[] elements != null
this.integrator.eventsHandlersManager.states[].getClass().getName() elements == org.apache.commons.math.ode.events.EventState.class
this.integrator.eventsHandlersManager.states[].getClass().getName() one of { [], [org.apache.commons.math.ode.events.EventState, org.apache.commons.math.ode.events.EventState] }
this.integrator.eventsHandlersManager.states.getClass().getName() == java.util.ArrayList.class
this.integrator.eventsHandlersManager.first == null
this.integrator.eventsHandlersManager.initialized == false
this.integrator.name has only one value
this.integrator.name.toString == "3/8"
this.integrator.maxEvaluations == 2147483647
this.dirtyState == true
size(this.yDotK[]) == 4
size(this.integrator.eventsHandlersManager.states[]) one of { 0, 2 }
size(this.integrator.eventsHandlersManager.states[])-1 != 0
size(this.currentState[]) one of { 1, 2, 4 }
size(this.interpolatedState[]) one of { 1, 2, 4 }
size(this.interpolatedDerivatives[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolator.ThreeEighthesStepInterpolator():::EXIT
this.yDotK == null
this.integrator == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.finalized == false
this.forward == true
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolator.ThreeEighthesStepInterpolator(org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolator):::ENTER
interpolator.yDotK.getClass().getName() == double[][].class
interpolator.yDotK[] contains no nulls and has only one value, of length 4
interpolator.yDotK[] elements != null
interpolator.integrator.getClass().getName() == org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.class
interpolator.integrator.stepHandlers has only one value
interpolator.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.stepSize one of { 0.0019999999994659845, 0.005999999999999999 }
interpolator.integrator.eventsHandlersManager has only one value
interpolator.integrator.name has only one value
interpolator.integrator.name.toString == "3/8"
interpolator.integrator.maxEvaluations == 2147483647
interpolator.integrator.equations has only one value
interpolator.integrator.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem3.class
interpolator.h one of { 0.0019999999994659845, 0.005999999999999999, Double.NaN }
interpolator.h <= 0.006000000000000227
interpolator.currentState[] elements != 0
interpolator.interpolatedState[] elements != 0
interpolator.interpolatedDerivatives[] elements != 0
interpolator.finalized == true
interpolator.forward == true
interpolator.dirtyState == true
size(interpolator.yDotK[]) == 4
size(interpolator.currentState[]) == 4
size(interpolator.interpolatedState[]) == 4
size(interpolator.interpolatedDerivatives[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolator.ThreeEighthesStepInterpolator(org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolator):::EXIT
interpolator.yDotK == orig(interpolator.yDotK)
interpolator.yDotK.getClass().getName() == orig(interpolator.yDotK.getClass().getName())
interpolator.yDotK[] == orig(interpolator.yDotK[])
interpolator.integrator == orig(interpolator.integrator)
interpolator.integrator.getClass().getName() == orig(interpolator.integrator.getClass().getName())
interpolator.integrator.stepHandlers == orig(interpolator.integrator.stepHandlers)
interpolator.integrator.stepHandlers.getClass().getName() == orig(interpolator.integrator.stepHandlers.getClass().getName())
interpolator.integrator.stepStart == orig(interpolator.integrator.stepStart)
interpolator.integrator.stepSize == orig(interpolator.integrator.stepSize)
interpolator.integrator.eventsHandlersManager == orig(interpolator.integrator.eventsHandlersManager)
interpolator.integrator.name == orig(interpolator.integrator.name)
interpolator.integrator.name.toString == orig(interpolator.integrator.name.toString)
interpolator.integrator.maxEvaluations == orig(interpolator.integrator.maxEvaluations)
interpolator.integrator.evaluations == orig(interpolator.integrator.evaluations)
interpolator.integrator.equations == orig(interpolator.integrator.equations)
interpolator.integrator.equations.getClass().getName() == orig(interpolator.integrator.equations.getClass().getName())
interpolator.currentState == orig(interpolator.currentState)
interpolator.currentState[] == orig(interpolator.currentState[])
interpolator.interpolatedState == orig(interpolator.interpolatedState)
interpolator.interpolatedState[] == orig(interpolator.interpolatedState[])
interpolator.interpolatedDerivatives == orig(interpolator.interpolatedDerivatives)
interpolator.interpolatedDerivatives[] == orig(interpolator.interpolatedDerivatives[])
interpolator.finalized == orig(interpolator.finalized)
interpolator.forward == orig(interpolator.forward)
interpolator.dirtyState == orig(interpolator.dirtyState)
this.integrator == null
this.h one of { 0.0019999999994659845, 0.005999999999999999, Double.NaN }
this.h <= 0.006000000000000227
this.currentState[] elements != 0
this.interpolatedState[] elements != 0
this.interpolatedDerivatives[] elements != 0
this.finalized == true
this.forward == true
interpolator.yDotK.getClass().getName() == double[][].class
interpolator.yDotK[] contains no nulls and has only one value, of length 4
interpolator.yDotK[] elements != null
interpolator.integrator.getClass().getName() == org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator.class
interpolator.integrator.stepHandlers has only one value
interpolator.integrator.stepHandlers.getClass().getName() == java.util.ArrayList.class
interpolator.integrator.stepSize one of { 0.0019999999994659845, 0.005999999999999999 }
interpolator.integrator.eventsHandlersManager has only one value
interpolator.integrator.name has only one value
interpolator.integrator.name.toString == "3/8"
interpolator.integrator.maxEvaluations == 2147483647
interpolator.integrator.equations has only one value
interpolator.integrator.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem3.class
interpolator.h one of { 0.0019999999994659845, 0.005999999999999999, Double.NaN }
interpolator.h <= 0.006000000000000227
interpolator.currentState[] elements != 0
interpolator.interpolatedState[] elements != 0
interpolator.interpolatedDerivatives[] elements != 0
interpolator.finalized == true
interpolator.forward == true
interpolator.dirtyState == true
size(this.currentState[]) == 4
size(this.interpolatedState[]) == 4
size(this.interpolatedDerivatives[]) == 4
size(interpolator.yDotK[]) == 4
size(interpolator.currentState[]) == 4
size(interpolator.interpolatedState[]) == 4
size(interpolator.interpolatedDerivatives[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::ENTER
theta <= 1.0225287055467542
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::EXIT
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.integrator.stepHandlers == orig(this.integrator.stepHandlers)
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.stepHandlers.getClass().getName())
this.integrator.stepStart == orig(this.integrator.stepStart)
this.integrator.stepSize == orig(this.integrator.stepSize)
this.integrator.eventsHandlersManager == orig(this.integrator.eventsHandlersManager)
this.integrator.eventsHandlersManager.states == orig(this.integrator.eventsHandlersManager.states)
this.integrator.eventsHandlersManager.states[] == orig(this.integrator.eventsHandlersManager.states[])
this.integrator.eventsHandlersManager.states.getClass().getName() == orig(this.integrator.eventsHandlersManager.states.getClass().getName())
this.integrator.eventsHandlersManager.first == orig(this.integrator.eventsHandlersManager.first)
this.integrator.eventsHandlersManager.initialized == orig(this.integrator.eventsHandlersManager.initialized)
this.integrator.name == orig(this.integrator.name)
this.integrator.name.toString == orig(this.integrator.name.toString)
this.integrator.maxEvaluations == orig(this.integrator.maxEvaluations)
this.integrator.evaluations == orig(this.integrator.evaluations)
this.integrator.equations == orig(this.integrator.equations)
this.integrator.equations.getClass().getName() == orig(this.integrator.equations.getClass().getName())
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
size(this.interpolatedState[]) == orig(size(this.interpolatedState[]))
size(this.interpolatedDerivatives[]) == orig(size(this.interpolatedDerivatives[]))
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolator.doCopy():::ENTER
this.yDotK[] contains no nulls and has only one value, of length 4
this.integrator.stepHandlers has only one value
this.integrator.stepSize one of { 0.0019999999994659845, 0.005999999999999999 }
this.integrator.eventsHandlersManager has only one value
this.integrator.eventsHandlersManager.states has only one value
this.integrator.eventsHandlersManager.states[] == []
this.integrator.eventsHandlersManager.states[].getClass().getName() == []
this.integrator.equations has only one value
this.integrator.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem3.class
this.h one of { 0.0019999999994659845, 0.005999999999999999, Double.NaN }
this.h <= 0.006000000000000227
this.currentState[] elements != 0
this.interpolatedState[] elements != 0
this.interpolatedDerivatives[] elements != 0
this.finalized == true
this.forward == true
size(this.currentState[]) == 4
size(this.interpolatedState[]) == 4
size(this.interpolatedDerivatives[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolator.doCopy():::EXIT
this.yDotK == orig(this.yDotK)
this.yDotK.getClass().getName() == orig(this.yDotK.getClass().getName())
this.yDotK[] == orig(this.yDotK[])
this.integrator == orig(this.integrator)
this.integrator.getClass().getName() == orig(this.integrator.getClass().getName())
this.integrator.stepHandlers == orig(this.integrator.stepHandlers)
this.integrator.stepHandlers.getClass().getName() == orig(this.integrator.stepHandlers.getClass().getName())
this.integrator.stepStart == orig(this.integrator.stepStart)
this.integrator.stepSize == orig(this.integrator.stepSize)
this.integrator.eventsHandlersManager == orig(this.integrator.eventsHandlersManager)
this.integrator.eventsHandlersManager.states == orig(this.integrator.eventsHandlersManager.states)
this.integrator.eventsHandlersManager.states[] == orig(this.integrator.eventsHandlersManager.states[])
this.integrator.eventsHandlersManager.states.getClass().getName() == orig(this.integrator.eventsHandlersManager.states.getClass().getName())
this.integrator.eventsHandlersManager.first == orig(this.integrator.eventsHandlersManager.first)
this.integrator.eventsHandlersManager.initialized == orig(this.integrator.eventsHandlersManager.initialized)
this.integrator.name == orig(this.integrator.name)
this.integrator.name.toString == orig(this.integrator.name.toString)
this.integrator.maxEvaluations == orig(this.integrator.maxEvaluations)
this.integrator.evaluations == orig(this.integrator.evaluations)
this.integrator.equations == orig(this.integrator.equations)
this.integrator.equations.getClass().getName() == orig(this.integrator.equations.getClass().getName())
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.yDotK[] contains no nulls and has only one value, of length 4
this.integrator.stepHandlers has only one value
this.integrator.stepSize one of { 0.0019999999994659845, 0.005999999999999999 }
this.integrator.eventsHandlersManager has only one value
this.integrator.eventsHandlersManager.states has only one value
this.integrator.eventsHandlersManager.states[] == []
this.integrator.eventsHandlersManager.states[].getClass().getName() == []
this.integrator.equations has only one value
this.integrator.equations.getClass().getName() == org.apache.commons.math.ode.TestProblem3.class
this.h one of { 0.0019999999994659845, 0.005999999999999999, Double.NaN }
this.h <= 0.006000000000000227
this.currentState[] elements != 0
this.interpolatedState[] elements != 0
this.interpolatedDerivatives[] elements != 0
this.finalized == true
this.forward == true
return.getClass().getName() == org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolator.class
size(this.currentState[]) == 4
size(this.interpolatedState[]) == 4
size(this.interpolatedDerivatives[]) == 4
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest:::OBJECT
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest.ThreeEighthesStepInterpolatorTest():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest.derivativesConsistency():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest.derivativesConsistency():::EXIT
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest.serialization():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest.serialization():::EXIT
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator:::OBJECT
size(this.currentState[]) one of { 1, 2, 4 }
size(this.interpolatedState[]) one of { 1, 2, 4 }
size(this.interpolatedDerivatives[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.AbstractStepInterpolator():::EXIT
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.finalized == false
this.forward == true
this.dirtyState == true
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.AbstractStepInterpolator(double[], boolean):::ENTER
y != null
y[] elements one of { 0.0, 0.3623577544766736, 0.9320390859672263 }
y[] sorted by >=
size(y[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.AbstractStepInterpolator(double[], boolean):::EXIT
y[] == orig(y[])
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState != null
this.currentState[] elements one of { 0.0, 0.3623577544766736, 0.9320390859672263 }
this.currentState[] sorted by >=
this.interpolatedTime == Double.NaN
this.interpolatedState != null
this.interpolatedState[] elements == 0.0
this.interpolatedState[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.interpolatedDerivatives != null
this.interpolatedDerivatives[] elements == 0.0
this.interpolatedDerivatives[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.finalized == false
this.dirtyState == true
y[] elements one of { 0.0, 0.3623577544766736, 0.9320390859672263 }
y[] sorted by >=
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.AbstractStepInterpolator(org.apache.commons.math.ode.sampling.AbstractStepInterpolator):::ENTER
interpolator != null
interpolator.h != 0
interpolator.finalized == true
size(interpolator.currentState[]) one of { 2, 4 }
size(interpolator.interpolatedState[]) one of { 2, 4 }
size(interpolator.interpolatedDerivatives[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.AbstractStepInterpolator(org.apache.commons.math.ode.sampling.AbstractStepInterpolator):::EXIT
interpolator.currentState == orig(interpolator.currentState)
interpolator.currentState[] == orig(interpolator.currentState[])
interpolator.interpolatedState == orig(interpolator.interpolatedState)
interpolator.interpolatedState[] == orig(interpolator.interpolatedState[])
interpolator.interpolatedDerivatives == orig(interpolator.interpolatedDerivatives)
interpolator.interpolatedDerivatives[] == orig(interpolator.interpolatedDerivatives[])
interpolator.finalized == orig(interpolator.finalized)
interpolator.forward == orig(interpolator.forward)
interpolator.dirtyState == orig(interpolator.dirtyState)
this.h != 0
this.finalized == true
interpolator.h != 0
interpolator.finalized == true
size(this.currentState[]) one of { 2, 4 }
size(this.interpolatedState[]) one of { 2, 4 }
size(this.interpolatedDerivatives[]) one of { 2, 4 }
size(interpolator.currentState[]) one of { 2, 4 }
size(interpolator.interpolatedState[]) one of { 2, 4 }
size(interpolator.interpolatedDerivatives[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.copy():::ENTER
this.h != 0
size(this.currentState[]) one of { 2, 4 }
size(this.interpolatedState[]) one of { 2, 4 }
size(this.interpolatedDerivatives[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.copy():::EXIT
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.h != 0
this.finalized == true
return != null
size(this.currentState[]) one of { 2, 4 }
size(this.interpolatedState[]) one of { 2, 4 }
size(this.interpolatedDerivatives[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.doFinalize():::ENTER
this.currentState[] elements != 0
this.interpolatedState[] elements != 0
this.interpolatedDerivatives[] elements != 0
this.finalized == false
this.forward == true
this.dirtyState == true
size(this.currentState[]) one of { 2, 4 }
size(this.interpolatedState[]) one of { 2, 4 }
size(this.interpolatedDerivatives[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.doFinalize():::EXIT
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.currentState[] elements != 0
this.interpolatedState[] elements != 0
this.interpolatedDerivatives[] elements != 0
this.finalized == false
this.forward == true
this.dirtyState == true
size(this.currentState[]) one of { 2, 4 }
size(this.interpolatedState[]) one of { 2, 4 }
size(this.interpolatedDerivatives[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.finalizeStep():::ENTER
this.h != 0
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.finalizeStep():::EXIT
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.h != 0
this.finalized == true
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.getCurrentTime():::ENTER
this.h != 0
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.getCurrentTime():::EXIT
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.h != 0
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.getInterpolatedDerivatives():::ENTER
this.currentTime != 0
this.h != 0
this.currentState != null
this.currentState[] elements != 0
this.interpolatedState != null
this.interpolatedDerivatives != null
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.getInterpolatedDerivatives():::EXIT
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.forward == orig(this.forward)
size(this.interpolatedState[]) == orig(size(this.interpolatedState[]))
size(this.interpolatedDerivatives[]) == orig(size(this.interpolatedDerivatives[]))
this.currentTime != 0
this.h != 0
this.currentState != null
this.currentState[] elements != 0
this.interpolatedState != null
this.interpolatedDerivatives != null
this.dirtyState == false
return != null
size(return[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.getInterpolatedState():::ENTER
this.h != 0
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.dirtyState == true
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.getInterpolatedState():::EXIT
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.forward == orig(this.forward)
size(this.interpolatedState[]) == orig(size(this.interpolatedState[]))
size(this.interpolatedDerivatives[]) == orig(size(this.interpolatedDerivatives[]))
this.h != 0
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.dirtyState == false
return != null
size(return[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.getInterpolatedTime():::ENTER
this.h != 0
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.getInterpolatedTime():::EXIT
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.h != 0
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.getPreviousTime():::ENTER
this.h != 0
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.getPreviousTime():::EXIT
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.h != 0
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.isForward():::ENTER
this.h != 0
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.isForward():::EXIT
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.h != 0
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.isForward():::EXIT;condition="return == true"
this.previousTime >= 0.0
this.interpolatedTime >= 0.0
this.forward == true
return == true
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.isForward():::EXIT;condition="not(return == true)"
this.forward == false
return == false
size(this.currentState[]) == 2
size(this.interpolatedState[]) == 2
size(this.interpolatedDerivatives[]) == 2
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.readBaseExternal(java.io.ObjectInput):::ENTER
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.finalized == false
this.forward == true
this.dirtyState == true
in != null
in.getClass().getName() == java.io.ObjectInputStream.class
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.readBaseExternal(java.io.ObjectInput):::EXIT
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.currentState != null
this.currentState[] elements != 0
this.interpolatedTime == Double.NaN
this.interpolatedState != null
this.interpolatedState[] elements == 0.0
this.interpolatedState[] one of { [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.interpolatedDerivatives != null
this.interpolatedDerivatives[] elements == 0.0
this.interpolatedDerivatives[] one of { [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.finalized == true
this.forward == true
this.dirtyState == true
size(this.currentState[]) one of { 2, 4 }
size(this.interpolatedState[]) one of { 2, 4 }
size(this.interpolatedDerivatives[]) one of { 2, 4 }
this.previousTime != orig(this.previousTime)
this.currentTime != orig(this.currentTime)
this.h != orig(this.h)
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.reinitialize(double[], boolean):::ENTER
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.forward == true
this.dirtyState == true
y != null
size(y[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.reinitialize(double[], boolean):::EXIT
this.dirtyState == orig(this.dirtyState)
y[] == orig(y[])
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState != null
this.interpolatedTime == Double.NaN
this.interpolatedState != null
this.interpolatedState[] elements == 0.0
this.interpolatedState[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.interpolatedDerivatives != null
this.interpolatedDerivatives[] elements == 0.0
this.interpolatedDerivatives[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.finalized == false
this.dirtyState == true
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.setInterpolatedTime(double):::ENTER
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.setInterpolatedTime(double):::EXIT
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.dirtyState == true
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.shift():::ENTER
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.shift():::EXIT
this.currentTime == orig(this.currentTime)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.storeTime(double):::ENTER
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.storeTime(double):::EXIT
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.forward == orig(this.forward)
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.finalized == false
this.dirtyState == true
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.writeBaseExternal(java.io.ObjectOutput):::ENTER
this.currentState != null
this.currentState[] elements != 0
this.interpolatedState != null
this.interpolatedState[] elements != 0
this.interpolatedDerivatives != null
this.interpolatedDerivatives[] elements != 0
this.finalized == true
this.forward == true
this.dirtyState == true
out != null
out.getClass().getName() == java.io.ObjectOutputStream.class
size(this.currentState[]) one of { 2, 4 }
size(this.interpolatedState[]) one of { 2, 4 }
size(this.interpolatedDerivatives[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math.ode.sampling.AbstractStepInterpolator.writeBaseExternal(java.io.ObjectOutput):::EXIT
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.currentState != null
this.currentState[] elements != 0
this.interpolatedState != null
this.interpolatedState[] elements != 0
this.interpolatedDerivatives != null
this.interpolatedDerivatives[] elements != 0
this.finalized == true
this.forward == true
this.dirtyState == true
size(this.currentState[]) one of { 2, 4 }
size(this.interpolatedState[]) one of { 2, 4 }
size(this.interpolatedDerivatives[]) one of { 2, 4 }
===========================================================================
org.apache.commons.math.ode.sampling.DummyStepHandler:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math.ode.sampling.DummyStepHandler.DummyStepHandler():::EXIT
===========================================================================
org.apache.commons.math.ode.sampling.DummyStepHandler.getInstance():::EXIT
return has only one value
===========================================================================
org.apache.commons.math.ode.sampling.DummyStepHandler.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::ENTER
===========================================================================
org.apache.commons.math.ode.sampling.DummyStepHandler.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::EXIT
===========================================================================
org.apache.commons.math.ode.sampling.DummyStepHandler.requiresDenseOutput():::ENTER
===========================================================================
org.apache.commons.math.ode.sampling.DummyStepHandler.requiresDenseOutput():::EXIT
return == false
===========================================================================
org.apache.commons.math.ode.sampling.DummyStepHandler.requiresDenseOutput():::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.math.ode.sampling.DummyStepHandler.reset():::ENTER
===========================================================================
org.apache.commons.math.ode.sampling.DummyStepHandler.reset():::EXIT
===========================================================================
org.apache.commons.math.ode.sampling.DummyStepInterpolator:::CLASS
===========================================================================
org.apache.commons.math.ode.sampling.DummyStepInterpolator:::OBJECT
this.currentTime != 0
this.h != 0
this.currentState != null
this.interpolatedState != null
this.interpolatedDerivatives != null
this.interpolatedDerivatives[] elements == 0.0
this.interpolatedDerivatives[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.finalized == false
this.dirtyState == true
size(this.currentState[]) one of { 1, 2, 4 }
size(this.interpolatedState[]) one of { 1, 2, 4 }
size(this.interpolatedDerivatives[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.sampling.DummyStepInterpolator.DummyStepInterpolator(double[], boolean):::ENTER
y != null
y[] elements == 0.0
y[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
size(y[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.sampling.DummyStepInterpolator.DummyStepInterpolator(double[], boolean):::EXIT
y[] == orig(y[])
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState[] elements == 0.0
this.currentState[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.interpolatedTime == Double.NaN
this.interpolatedState[] elements == 0.0
this.interpolatedState[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
y[] elements == 0.0
y[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
===========================================================================
org.apache.commons.math.ode.sampling.DummyStepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::ENTER
this.currentState[] elements != 0
===========================================================================
org.apache.commons.math.ode.sampling.DummyStepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::EXIT
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
size(this.interpolatedState[]) == orig(size(this.interpolatedState[]))
this.currentState[] elements != 0
this.interpolatedState[] elements != 0
===========================================================================
org.apache.commons.math.ode.sampling.NordsieckStepInterpolator:::CLASS
===========================================================================
org.apache.commons.math.ode.sampling.NordsieckStepInterpolator:::OBJECT
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == "matrix must have at least one row"
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == "matrix must have at least one column"
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == "some rows have length {0} while others have length {1}"
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == "no entry at indices ({0}, {1}) in a {2}x{3} matrix"
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == "vector length mismatch: got {0} but expected {1}"
this.nordsieck.data.getClass().getName() == double[][].class
this.nordsieck.data[] elements != null
this.nordsieck.lu == null
size(this.stateVariation[]) one of { 1, 2, 4 }
size(this.scaled[]) one of { 1, 2, 4 }
size(this.nordsieck.data[]) >= 1
size(this.currentState[]) one of { 1, 2, 4 }
size(this.interpolatedState[]) one of { 1, 2, 4 }
size(this.interpolatedDerivatives[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.sampling.NordsieckStepInterpolator.NordsieckStepInterpolator():::EXIT
this.stateVariation == null
this.scalingH == 0.0
this.referenceTime == 0.0
this.scaled == null
this.nordsieck == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.finalized == false
this.forward == true
this.dirtyState == true
===========================================================================
org.apache.commons.math.ode.sampling.NordsieckStepInterpolator.NordsieckStepInterpolator(org.apache.commons.math.ode.sampling.NordsieckStepInterpolator):::ENTER
interpolator has only one value
interpolator.stateVariation has only one value
interpolator.stateVariation[] sorted by <
interpolator.scaled[] sorted by <
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == "matrix must have at least one row"
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == "matrix must have at least one column"
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == "some rows have length {0} while others have length {1}"
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == "no entry at indices ({0}, {1}) in a {2}x{3} matrix"
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH has only one value
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == "vector length mismatch: got {0} but expected {1}"
interpolator.nordsieck.data.getClass().getName() == double[][].class
interpolator.nordsieck.data[] elements != null
interpolator.nordsieck.lu == null
interpolator.currentState has only one value
interpolator.currentState[] sorted by >
interpolator.interpolatedState has only one value
interpolator.interpolatedState[] sorted by >
interpolator.interpolatedDerivatives has only one value
interpolator.interpolatedDerivatives[] sorted by <
interpolator.finalized == true
interpolator.forward == true
interpolator.dirtyState == true
size(interpolator.stateVariation[]) == 2
size(interpolator.scaled[]) == 2
size(interpolator.nordsieck.data[]) == 4
size(interpolator.currentState[]) == 2
size(interpolator.interpolatedState[]) == 2
size(interpolator.interpolatedDerivatives[]) == 2
===========================================================================
org.apache.commons.math.ode.sampling.NordsieckStepInterpolator.NordsieckStepInterpolator(org.apache.commons.math.ode.sampling.NordsieckStepInterpolator):::EXIT
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString)
interpolator.stateVariation == orig(interpolator.stateVariation)
interpolator.stateVariation[] == orig(interpolator.stateVariation[])
interpolator.scalingH == orig(interpolator.scalingH)
interpolator.referenceTime == orig(interpolator.referenceTime)
interpolator.scaled == orig(interpolator.scaled)
interpolator.scaled[] == orig(interpolator.scaled[])
interpolator.nordsieck == orig(interpolator.nordsieck)
interpolator.nordsieck.data == orig(interpolator.nordsieck.data)
interpolator.nordsieck.data.getClass().getName() == orig(interpolator.nordsieck.data.getClass().getName())
interpolator.nordsieck.data[] == orig(interpolator.nordsieck.data[])
interpolator.nordsieck.lu == orig(interpolator.nordsieck.lu)
interpolator.previousTime == orig(interpolator.previousTime)
interpolator.currentTime == orig(interpolator.currentTime)
interpolator.h == orig(interpolator.h)
interpolator.currentState == orig(interpolator.currentState)
interpolator.currentState[] == orig(interpolator.currentState[])
interpolator.interpolatedTime == orig(interpolator.interpolatedTime)
interpolator.interpolatedState == orig(interpolator.interpolatedState)
interpolator.interpolatedState[] == orig(interpolator.interpolatedState[])
interpolator.interpolatedDerivatives == orig(interpolator.interpolatedDerivatives)
interpolator.interpolatedDerivatives[] == orig(interpolator.interpolatedDerivatives[])
interpolator.finalized == orig(interpolator.finalized)
interpolator.forward == orig(interpolator.forward)
interpolator.dirtyState == orig(interpolator.dirtyState)
this.stateVariation[] sorted by <
this.scaled[] sorted by <
this.currentState[] sorted by >
this.interpolatedState[] sorted by >
this.interpolatedDerivatives[] sorted by <
this.finalized == true
this.forward == true
this.dirtyState == true
interpolator.stateVariation has only one value
interpolator.stateVariation[] sorted by <
interpolator.scaled[] sorted by <
interpolator.nordsieck.data.getClass().getName() == double[][].class
interpolator.nordsieck.data[] elements != null
interpolator.nordsieck.lu == null
interpolator.currentState has only one value
interpolator.currentState[] sorted by >
interpolator.interpolatedState has only one value
interpolator.interpolatedState[] sorted by >
interpolator.interpolatedDerivatives has only one value
interpolator.interpolatedDerivatives[] sorted by <
interpolator.finalized == true
interpolator.forward == true
interpolator.dirtyState == true
size(this.stateVariation[]) == 2
size(this.scaled[]) == 2
size(this.nordsieck.data[]) == 4
size(this.currentState[]) == 2
size(this.interpolatedState[]) == 2
size(this.interpolatedDerivatives[]) == 2
size(interpolator.stateVariation[]) == 2
size(interpolator.scaled[]) == 2
size(interpolator.nordsieck.data[]) == 4
size(interpolator.currentState[]) == 2
size(interpolator.interpolatedState[]) == 2
size(interpolator.interpolatedDerivatives[]) == 2
===========================================================================
org.apache.commons.math.ode.sampling.NordsieckStepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::ENTER
this.dirtyState == true
===========================================================================
org.apache.commons.math.ode.sampling.NordsieckStepInterpolator.computeInterpolatedStateAndDerivatives(double, double):::EXIT
this.stateVariation == orig(this.stateVariation)
this.scalingH == orig(this.scalingH)
this.referenceTime == orig(this.referenceTime)
this.scaled == orig(this.scaled)
this.scaled[] == orig(this.scaled[])
this.nordsieck == orig(this.nordsieck)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString)
this.nordsieck.data == orig(this.nordsieck.data)
this.nordsieck.data.getClass().getName() == orig(this.nordsieck.data.getClass().getName())
this.nordsieck.data[] == orig(this.nordsieck.data[])
this.nordsieck.lu == orig(this.nordsieck.lu)
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
size(this.stateVariation[]) == orig(size(this.stateVariation[]))
size(this.interpolatedState[]) == orig(size(this.interpolatedState[]))
size(this.interpolatedDerivatives[]) == orig(size(this.interpolatedDerivatives[]))
this.dirtyState == true
===========================================================================
org.apache.commons.math.ode.sampling.NordsieckStepInterpolator.doCopy():::ENTER
this has only one value
this.stateVariation has only one value
this.stateVariation[] sorted by <
this.scaled[] sorted by <
this.currentState has only one value
this.currentState[] sorted by >
this.interpolatedState has only one value
this.interpolatedState[] sorted by >
this.interpolatedDerivatives has only one value
this.interpolatedDerivatives[] sorted by <
this.finalized == true
this.forward == true
this.dirtyState == true
size(this.stateVariation[]) == 2
size(this.scaled[]) == 2
size(this.nordsieck.data[]) == 4
size(this.currentState[]) == 2
size(this.interpolatedState[]) == 2
size(this.interpolatedDerivatives[]) == 2
===========================================================================
org.apache.commons.math.ode.sampling.NordsieckStepInterpolator.doCopy():::EXIT
this.stateVariation == orig(this.stateVariation)
this.stateVariation[] == orig(this.stateVariation[])
this.scalingH == orig(this.scalingH)
this.referenceTime == orig(this.referenceTime)
this.scaled == orig(this.scaled)
this.scaled[] == orig(this.scaled[])
this.nordsieck == orig(this.nordsieck)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString)
this.nordsieck.data == orig(this.nordsieck.data)
this.nordsieck.data.getClass().getName() == orig(this.nordsieck.data.getClass().getName())
this.nordsieck.data[] == orig(this.nordsieck.data[])
this.nordsieck.lu == orig(this.nordsieck.lu)
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.stateVariation has only one value
this.stateVariation[] sorted by <
this.scaled[] sorted by <
this.currentState has only one value
this.currentState[] sorted by >
this.interpolatedState has only one value
this.interpolatedState[] sorted by >
this.interpolatedDerivatives has only one value
this.interpolatedDerivatives[] sorted by <
this.finalized == true
this.forward == true
this.dirtyState == true
return.getClass().getName() == org.apache.commons.math.ode.sampling.NordsieckStepInterpolator.class
size(this.stateVariation[]) == 2
size(this.scaled[]) == 2
size(this.nordsieck.data[]) == 4
size(this.currentState[]) == 2
size(this.interpolatedState[]) == 2
size(this.interpolatedDerivatives[]) == 2
===========================================================================
org.apache.commons.math.ode.sampling.NordsieckStepInterpolator.readExternal(java.io.ObjectInput):::ENTER
this.stateVariation == null
this.scalingH == 0.0
this.referenceTime == 0.0
this.scaled == null
this.nordsieck == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.finalized == false
this.forward == true
this.dirtyState == true
in has only one value
in.getClass().getName() == java.io.ObjectInputStream.class
===========================================================================
org.apache.commons.math.ode.sampling.NordsieckStepInterpolator.readExternal(java.io.ObjectInput):::EXIT
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.stateVariation[] == [0.0, 0.0]
this.stateVariation[] elements == 0.0
this.scaled[] sorted by <
this.currentState[] sorted by >
this.interpolatedState[] == [0.0, 0.0]
this.interpolatedState[] elements == 0.0
this.interpolatedDerivatives[] == [0.0, 0.0]
this.interpolatedDerivatives[] elements == 0.0
this.finalized == true
this.forward == true
this.dirtyState == true
size(this.stateVariation[]) == 2
size(this.scaled[]) == 2
size(this.nordsieck.data[]) == 4
size(this.currentState[]) == 2
size(this.interpolatedState[]) == 2
size(this.interpolatedDerivatives[]) == 2
orig(this.scalingH) % this.scalingH == 0
this.scalingH > orig(this.scalingH)
orig(this.referenceTime) % this.referenceTime == 0
this.referenceTime > orig(this.referenceTime)
this.previousTime != orig(this.previousTime)
this.currentTime != orig(this.currentTime)
this.h != orig(this.h)
this.interpolatedTime != orig(this.interpolatedTime)
===========================================================================
org.apache.commons.math.ode.sampling.NordsieckStepInterpolator.reinitialize(double, double, double[], org.apache.commons.math.linear.Array2DRowRealMatrix):::ENTER
nordsieckVector.data.getClass().getName() == double[][].class
nordsieckVector.data[] elements != null
nordsieckVector.lu == null
size(scaledDerivative[]) one of { 1, 2, 4 }
size(nordsieckVector.data[]) >= 1
===========================================================================
org.apache.commons.math.ode.sampling.NordsieckStepInterpolator.reinitialize(double, double, double[], org.apache.commons.math.linear.Array2DRowRealMatrix):::EXIT
this.stateVariation == orig(this.stateVariation)
this.stateVariation[] == orig(this.stateVariation[])
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString)
this.nordsieck.data.getClass().getName() == orig(this.nordsieck.data.getClass().getName())
this.nordsieck.lu == orig(this.nordsieck.lu)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
scaledDerivative[] == orig(scaledDerivative[])
nordsieckVector.data == orig(nordsieckVector.data)
nordsieckVector.data.getClass().getName() == orig(nordsieckVector.data.getClass().getName())
nordsieckVector.data[] == orig(nordsieckVector.data[])
nordsieckVector.lu == orig(nordsieckVector.lu)
size(this.scaled[]) == orig(size(this.scaled[]))
size(this.nordsieck.data[]) == orig(size(this.nordsieck.data[]))
this.dirtyState == true
nordsieckVector.data.getClass().getName() == double[][].class
nordsieckVector.data[] elements != null
nordsieckVector.lu == null
size(nordsieckVector.data[]) >= 1
===========================================================================
org.apache.commons.math.ode.sampling.NordsieckStepInterpolator.reinitialize(double[], boolean):::ENTER
this.stateVariation == null
this.scalingH == 0.0
this.referenceTime == 0.0
this.scaled == null
this.nordsieck == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.currentState == null
this.interpolatedTime == Double.NaN
this.interpolatedState == null
this.interpolatedDerivatives == null
this.finalized == false
this.forward == true
this.dirtyState == true
size(y[]) one of { 1, 2, 4 }
===========================================================================
org.apache.commons.math.ode.sampling.NordsieckStepInterpolator.reinitialize(double[], boolean):::EXIT
this.scalingH == orig(this.scalingH)
this.referenceTime == orig(this.referenceTime)
this.scaled == orig(this.scaled)
this.nordsieck == orig(this.nordsieck)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString)
this.finalized == orig(this.finalized)
this.dirtyState == orig(this.dirtyState)
y[] == orig(y[])
this.stateVariation[] elements == 0.0
this.stateVariation[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.scalingH == 0.0
this.referenceTime == 0.0
this.scaled == null
this.nordsieck == null
this.previousTime == Double.NaN
this.currentTime == Double.NaN
this.h == Double.NaN
this.interpolatedTime == Double.NaN
this.interpolatedState[] elements == 0.0
this.interpolatedState[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.interpolatedDerivatives[] elements == 0.0
this.interpolatedDerivatives[] one of { [0.0], [0.0, 0.0], [0.0, 0.0, 0.0, 0.0] }
this.finalized == false
this.dirtyState == true
===========================================================================
org.apache.commons.math.ode.sampling.NordsieckStepInterpolator.rescale(double):::ENTER
===========================================================================
org.apache.commons.math.ode.sampling.NordsieckStepInterpolator.rescale(double):::EXIT
this.stateVariation == orig(this.stateVariation)
this.stateVariation[] == orig(this.stateVariation[])
this.referenceTime == orig(this.referenceTime)
this.scaled == orig(this.scaled)
this.nordsieck == orig(this.nordsieck)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString)
this.nordsieck.data == orig(this.nordsieck.data)
this.nordsieck.data.getClass().getName() == orig(this.nordsieck.data.getClass().getName())
this.nordsieck.data[] == orig(this.nordsieck.data[])
this.nordsieck.lu == orig(this.nordsieck.lu)
this.currentTime == orig(this.currentTime)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
size(this.scaled[]) == orig(size(this.scaled[]))
===========================================================================
org.apache.commons.math.ode.sampling.NordsieckStepInterpolator.writeExternal(java.io.ObjectOutput):::ENTER
this.stateVariation[] sorted by <
this.scaled[] sorted by <
this.currentState[] sorted by >
this.interpolatedState[] sorted by >
this.interpolatedDerivatives[] sorted by <
this.finalized == true
this.forward == true
this.dirtyState == true
out has only one value
out.getClass().getName() == java.io.ObjectOutputStream.class
size(this.stateVariation[]) == 2
size(this.scaled[]) == 2
size(this.nordsieck.data[]) == 4
size(this.currentState[]) == 2
size(this.interpolatedState[]) == 2
size(this.interpolatedDerivatives[]) == 2
===========================================================================
org.apache.commons.math.ode.sampling.NordsieckStepInterpolator.writeExternal(java.io.ObjectOutput):::EXIT
this.stateVariation == orig(this.stateVariation)
this.stateVariation[] == orig(this.stateVariation[])
this.scalingH == orig(this.scalingH)
this.referenceTime == orig(this.referenceTime)
this.scaled == orig(this.scaled)
this.scaled[] == orig(this.scaled[])
this.nordsieck == orig(this.nordsieck)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_ROW_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.AT_LEAST_ONE_COLUMN_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.DIFFERENT_ROWS_LENGTHS_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE)
org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.NO_ENTRY_MESSAGE.toString)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH)
org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString == orig(org.apache.commons.math.linear.Array2DRowRealMatrix.VECTOR_LENGTHS_MISMATCH.toString)
this.nordsieck.data == orig(this.nordsieck.data)
this.nordsieck.data.getClass().getName() == orig(this.nordsieck.data.getClass().getName())
this.nordsieck.data[] == orig(this.nordsieck.data[])
this.nordsieck.lu == orig(this.nordsieck.lu)
this.previousTime == orig(this.previousTime)
this.currentTime == orig(this.currentTime)
this.h == orig(this.h)
this.currentState == orig(this.currentState)
this.currentState[] == orig(this.currentState[])
this.interpolatedTime == orig(this.interpolatedTime)
this.interpolatedState == orig(this.interpolatedState)
this.interpolatedState[] == orig(this.interpolatedState[])
this.interpolatedDerivatives == orig(this.interpolatedDerivatives)
this.interpolatedDerivatives[] == orig(this.interpolatedDerivatives[])
this.finalized == orig(this.finalized)
this.forward == orig(this.forward)
this.dirtyState == orig(this.dirtyState)
this.stateVariation[] sorted by <
this.scaled[] sorted by <
this.currentState[] sorted by >
this.interpolatedState[] sorted by >
this.interpolatedDerivatives[] sorted by <
this.finalized == true
this.forward == true
this.dirtyState == true
size(this.stateVariation[]) == 2
size(this.scaled[]) == 2
size(this.nordsieck.data[]) == 4
size(this.currentState[]) == 2
size(this.interpolatedState[]) == 2
size(this.interpolatedDerivatives[]) == 2
===========================================================================
org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest:::OBJECT
===========================================================================
org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest.NordsieckStepInterpolatorTest():::EXIT
===========================================================================
org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest.derivativesConsistency():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest.derivativesConsistency():::EXIT
===========================================================================
org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest.serialization():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest.serialization():::EXIT
===========================================================================
org.apache.commons.math.ode.sampling.StepInterpolatorTestUtils$1:::OBJECT
this.val$threshold one of { 1.0E-10, 7.0E-10 }
===========================================================================
org.apache.commons.math.ode.sampling.StepInterpolatorTestUtils$1.(double):::ENTER
$hidden$1 one of { 1.0E-10, 7.0E-10 }
===========================================================================
org.apache.commons.math.ode.sampling.StepInterpolatorTestUtils$1.(double):::EXIT
===========================================================================
org.apache.commons.math.ode.sampling.StepInterpolatorTestUtils$1.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::ENTER
===========================================================================
org.apache.commons.math.ode.sampling.StepInterpolatorTestUtils$1.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::EXIT45
this.val$threshold == 1.0E-10
orig(isLast) == true
===========================================================================
org.apache.commons.math.ode.sampling.StepInterpolatorTestUtils$1.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::EXIT76
===========================================================================
org.apache.commons.math.ode.sampling.StepInterpolatorTestUtils$1.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::EXIT
this.val$threshold == orig(this.val$threshold)
===========================================================================
org.apache.commons.math.ode.sampling.StepInterpolatorTestUtils$1.requiresDenseOutput():::ENTER
this.val$threshold == 1.0E-10
===========================================================================
org.apache.commons.math.ode.sampling.StepInterpolatorTestUtils$1.requiresDenseOutput():::EXIT
this.val$threshold == orig(this.val$threshold)
this.val$threshold == 1.0E-10
return == true
===========================================================================
org.apache.commons.math.ode.sampling.StepInterpolatorTestUtils$1.requiresDenseOutput():::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math.ode.sampling.StepInterpolatorTestUtils$1.reset():::ENTER
===========================================================================
org.apache.commons.math.ode.sampling.StepInterpolatorTestUtils$1.reset():::EXIT
this.val$threshold == orig(this.val$threshold)
===========================================================================
org.apache.commons.math.ode.sampling.StepInterpolatorTestUtils.checkDerivativesConsistency(org.apache.commons.math.ode.FirstOrderIntegrator, org.apache.commons.math.ode.TestProblemAbstract, double):::ENTER
problem.getClass().getName() == org.apache.commons.math.ode.TestProblem3.class
problem.n == 4
problem.calls == 0
problem.t0 == 0.0
problem.y0[] == [0.9, 0.0, 0.0, 1.1055415967851334]
problem.y0[] elements one of { 0.0, 0.9, 1.1055415967851334 }
problem.t1 == 20.0
problem.errorScale[] == [1.0, 1.0, 1.0, 1.0]
problem.errorScale[] elements == 1.0
threshold one of { 1.0E-10, 7.0E-10 }
size(problem.y0[]) == 4
size(problem.errorScale[]) == 4
===========================================================================
org.apache.commons.math.ode.sampling.StepInterpolatorTestUtils.checkDerivativesConsistency(org.apache.commons.math.ode.FirstOrderIntegrator, org.apache.commons.math.ode.TestProblemAbstract, double):::EXIT
problem.n == orig(problem.n)
problem.t0 == orig(problem.t0)
problem.y0 == orig(problem.y0)
problem.y0[] == orig(problem.y0[])
problem.t1 == orig(problem.t1)
problem.errorScale == orig(problem.errorScale)
problem.errorScale[] == orig(problem.errorScale[])
problem.n == 4
problem.t0 == 0.0
problem.y0[] == [0.9, 0.0, 0.0, 1.1055415967851334]
problem.y0[] elements one of { 0.0, 0.9, 1.1055415967851334 }
problem.t1 == 20.0
problem.errorScale[] == [1.0, 1.0, 1.0, 1.0]
problem.errorScale[] elements == 1.0
size(problem.y0[]) == 4
size(problem.errorScale[]) == 4
orig(problem.calls) % problem.calls == 0
problem.calls > orig(problem.calls)
===========================================================================
org.apache.commons.math.ode.sampling.StepNormalizer:::OBJECT
this.h one of { 1.9047619047619047, 2.0 }
size(this.lastState[]) == 4
size(this.lastDerivatives[]) == 4
===========================================================================
org.apache.commons.math.ode.sampling.StepNormalizer.StepNormalizer(double, org.apache.commons.math.ode.sampling.FixedStepHandler):::ENTER
h one of { 1.9047619047619047, 2.0 }
===========================================================================
org.apache.commons.math.ode.sampling.StepNormalizer.StepNormalizer(double, org.apache.commons.math.ode.sampling.FixedStepHandler):::EXIT
this.lastTime == Double.NaN
this.lastState == null
this.lastDerivatives == null
this.forward == true
===========================================================================
org.apache.commons.math.ode.sampling.StepNormalizer.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::ENTER
this.forward == true
interpolator.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolator.class
===========================================================================
org.apache.commons.math.ode.sampling.StepNormalizer.handleStep(org.apache.commons.math.ode.sampling.StepInterpolator, boolean):::EXIT
this.h == orig(this.h)
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.forward == orig(this.forward)
size(this.lastState[]) == orig(size(this.lastState[]))
size(this.lastDerivatives[]) == orig(size(this.lastDerivatives[]))
this.forward == true
===========================================================================
org.apache.commons.math.ode.sampling.StepNormalizer.requiresDenseOutput():::ENTER
this.lastTime == Double.NaN
this.lastState == null
this.lastDerivatives == null
this.forward == true
===========================================================================
org.apache.commons.math.ode.sampling.StepNormalizer.requiresDenseOutput():::EXIT
this.h == orig(this.h)
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.lastState == orig(this.lastState)
this.lastDerivatives == orig(this.lastDerivatives)
this.forward == orig(this.forward)
this.lastTime == Double.NaN
this.lastState == null
this.lastDerivatives == null
this.forward == true
return == true
===========================================================================
org.apache.commons.math.ode.sampling.StepNormalizer.requiresDenseOutput():::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math.ode.sampling.StepNormalizer.reset():::ENTER
this.lastTime one of { 0.0, Double.NaN }
this.lastState == null
this.lastDerivatives == null
===========================================================================
org.apache.commons.math.ode.sampling.StepNormalizer.reset():::EXIT
this.h == orig(this.h)
this.handler == orig(this.handler)
this.handler.getClass().getName() == orig(this.handler.getClass().getName())
this.lastState == orig(this.lastState)
this.lastDerivatives == orig(this.lastDerivatives)
this.lastTime == Double.NaN
this.lastState == null
this.lastDerivatives == null
this.forward == true
===========================================================================
org.apache.commons.math.ode.sampling.StepNormalizerTest$1:::CLASS
===========================================================================
org.apache.commons.math.ode.sampling.StepNormalizerTest$1:::OBJECT
this has only one value
org.apache.commons.math.ode.sampling.StepNormalizerTest.this has only one value
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb has only one value
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.e == 0.9
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y has only one value
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y[] elements == 0.0
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.n == 4
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.t0 == 0.0
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y0 has only one value
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.t1 == 20.0
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.errorScale has only one value
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.errorScale[] elements == 1.0
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.integ has only one value
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.integ.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.class
size(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y[]) == 4
size(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y0[]) == 4
size(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math.ode.sampling.StepNormalizerTest$1.(org.apache.commons.math.ode.sampling.StepNormalizerTest):::ENTER
org.apache.commons.math.ode.sampling.StepNormalizerTest.this has only one value
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb has only one value
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.e == 0.9
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y has only one value
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y[] elements == 0.0
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.n == 4
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.calls == 0
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.t0 == 0.0
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y0 has only one value
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.t1 == 20.0
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.errorScale has only one value
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.errorScale[] elements == 1.0
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.integ has only one value
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.integ.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.class
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.lastSeen == false
size(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y[]) == 4
size(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y0[]) == 4
size(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math.ode.sampling.StepNormalizerTest$1.(org.apache.commons.math.ode.sampling.StepNormalizerTest):::EXIT
org.apache.commons.math.ode.sampling.StepNormalizerTest.this == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this)
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb)
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.e == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.e)
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y)
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y[] == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y[])
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.n == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.n)
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.calls == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.calls)
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.t0 == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.t0)
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y0 == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y0)
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y0[] == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y0[])
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.t1 == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.t1)
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.errorScale == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.errorScale)
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.errorScale[] == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.errorScale[])
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.integ == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.integ)
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.integ.getClass().getName() == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.integ.getClass().getName())
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.lastSeen == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.lastSeen)
this.firstCall == true
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.calls == 0
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.lastSeen == false
===========================================================================
org.apache.commons.math.ode.sampling.StepNormalizerTest$1.handleStep(double, double[], double[], boolean):::ENTER
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.lastSeen == false
y has only one value
yDot has only one value
size(y[]) == 4
size(yDot[]) == 4
===========================================================================
org.apache.commons.math.ode.sampling.StepNormalizerTest$1.handleStep(double, double[], double[], boolean):::EXIT
org.apache.commons.math.ode.sampling.StepNormalizerTest.this == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this)
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb)
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.e == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.e)
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y)
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y[] == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y[])
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.n == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.n)
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.calls == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.calls)
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.t0 == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.t0)
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y0 == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y0)
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y0[] == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y0[])
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.t1 == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.t1)
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.errorScale == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.errorScale)
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.errorScale[] == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.errorScale[])
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.integ == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.integ)
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.integ.getClass().getName() == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.integ.getClass().getName())
y[] == orig(y[])
yDot[] == orig(yDot[])
this.firstCall == false
===========================================================================
org.apache.commons.math.ode.sampling.StepNormalizerTest$2:::CLASS
===========================================================================
org.apache.commons.math.ode.sampling.StepNormalizerTest$2:::OBJECT
this has only one value
this.val$range == 20.0
org.apache.commons.math.ode.sampling.StepNormalizerTest.this has only one value
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb has only one value
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.e == 0.9
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y has only one value
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y[] elements == 0.0
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.n == 4
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.t0 == 0.0
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y0 has only one value
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.t1 == 20.0
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.errorScale has only one value
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.errorScale[] elements == 1.0
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.integ has only one value
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.integ.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.class
size(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y[]) == 4
size(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y0[]) == 4
size(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math.ode.sampling.StepNormalizerTest$2.(org.apache.commons.math.ode.sampling.StepNormalizerTest, double):::ENTER
org.apache.commons.math.ode.sampling.StepNormalizerTest.this has only one value
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb has only one value
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.e == 0.9
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y has only one value
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y[] elements == 0.0
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.n == 4
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.calls == 0
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.t0 == 0.0
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y0 has only one value
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.t1 == 20.0
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.errorScale has only one value
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.errorScale[] elements == 1.0
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.integ has only one value
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.integ.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.class
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.lastSeen == false
$hidden$2 == 20.0
size(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y[]) == 4
size(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y0[]) == 4
size(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math.ode.sampling.StepNormalizerTest$2.(org.apache.commons.math.ode.sampling.StepNormalizerTest, double):::EXIT
org.apache.commons.math.ode.sampling.StepNormalizerTest.this == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this)
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb)
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.e == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.e)
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y)
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y[] == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y[])
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.n == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.n)
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.calls == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.calls)
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.t0 == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.t0)
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y0 == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y0)
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y0[] == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y0[])
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.t1 == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.t1)
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.errorScale == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.errorScale)
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.errorScale[] == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.errorScale[])
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.integ == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.integ)
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.integ.getClass().getName() == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.integ.getClass().getName())
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.lastSeen == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.lastSeen)
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.calls == 0
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.lastSeen == false
===========================================================================
org.apache.commons.math.ode.sampling.StepNormalizerTest$2.handleStep(double, double[], double[], boolean):::ENTER
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.lastSeen == false
y has only one value
yDot has only one value
size(y[]) == 4
size(yDot[]) == 4
===========================================================================
org.apache.commons.math.ode.sampling.StepNormalizerTest$2.handleStep(double, double[], double[], boolean):::EXIT
this.val$range == orig(this.val$range)
org.apache.commons.math.ode.sampling.StepNormalizerTest.this == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this)
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb)
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.e == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.e)
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y)
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y[] == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y[])
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.n == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.n)
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.calls == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.calls)
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.t0 == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.t0)
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y0 == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y0)
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y0[] == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.y0[])
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.t1 == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.t1)
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.errorScale == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.errorScale)
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.errorScale[] == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.pb.errorScale[])
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.integ == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.integ)
org.apache.commons.math.ode.sampling.StepNormalizerTest.this.integ.getClass().getName() == orig(org.apache.commons.math.ode.sampling.StepNormalizerTest.this.integ.getClass().getName())
y[] == orig(y[])
yDot[] == orig(yDot[])
===========================================================================
org.apache.commons.math.ode.sampling.StepNormalizerTest:::OBJECT
this.pb.n == size(this.pb.y[])
size(this.pb.y[]) == size(this.pb.y0[])
this.pb.e == 0.9
this.pb.y[] == [0.0, 0.0, 0.0, 0.0]
this.pb.y[] elements == 0.0
this.pb.n == 4
this.pb.calls one of { 0, 242, 2204 }
this.pb.t0 == 0.0
this.pb.y0[] == [0.09999999999999998, 0.0, 0.0, 4.358898943540674]
this.pb.y0[] elements one of { 0.0, 0.09999999999999998, 4.358898943540674 }
this.pb.t1 == 20.0
this.pb.errorScale[] == [1.0, 1.0, 1.0, 1.0]
this.pb.errorScale[] elements == 1.0
this.integ.getClass().getName() == org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator.class
size(this.pb.y[]) == 4
size(this.pb.errorScale[]) == 4
===========================================================================
org.apache.commons.math.ode.sampling.StepNormalizerTest.StepNormalizerTest(java.lang.String):::ENTER
name.toString one of { "testBeforeEnd", "testBoundaries" }
===========================================================================
org.apache.commons.math.ode.sampling.StepNormalizerTest.StepNormalizerTest(java.lang.String):::EXIT
name.toString == orig(name.toString)
this.pb == null
this.integ == null
this.lastSeen == false
name.toString one of { "testBeforeEnd", "testBoundaries" }
===========================================================================
org.apache.commons.math.ode.sampling.StepNormalizerTest.checkValue(double, double):::ENTER
this.pb.calls one of { 242, 2204 }
value one of { 0.0, 19.047619047619047, 20.0 }
reference one of { 0.0, 19.047619047619047, 20.0 }
===========================================================================
org.apache.commons.math.ode.sampling.StepNormalizerTest.checkValue(double, double):::EXIT
this.pb == orig(this.pb)
this.pb.e == orig(this.pb.e)
this.pb.y == orig(this.pb.y)
this.pb.y[] == orig(this.pb.y[])
this.pb.n == orig(this.pb.n)
this.pb.calls == orig(this.pb.calls)
this.pb.t0 == orig(this.pb.t0)
this.pb.y0 == orig(this.pb.y0)
this.pb.y0[] == orig(this.pb.y0[])
this.pb.t1 == orig(this.pb.t1)
this.pb.errorScale == orig(this.pb.errorScale)
this.pb.errorScale[] == orig(this.pb.errorScale[])
this.integ == orig(this.integ)
this.integ.getClass().getName() == orig(this.integ.getClass().getName())
this.lastSeen == orig(this.lastSeen)
size(this.pb.y[]) == orig(size(this.pb.y0[]))
this.pb.calls one of { 242, 2204 }
===========================================================================
org.apache.commons.math.ode.sampling.StepNormalizerTest.setLastSeen(boolean):::ENTER
this.pb.calls one of { 0, 2204 }
this.lastSeen == false
===========================================================================
org.apache.commons.math.ode.sampling.StepNormalizerTest.setLastSeen(boolean):::EXIT
this.pb == orig(this.pb)
this.pb.e == orig(this.pb.e)
this.pb.y == orig(this.pb.y)
this.pb.y[] == orig(this.pb.y[])
this.pb.n == orig(this.pb.n)
this.pb.calls == orig(this.pb.calls)
this.pb.t0 == orig(this.pb.t0)
this.pb.y0 == orig(this.pb.y0)
this.pb.y0[] == orig(this.pb.y0[])
this.pb.t1 == orig(this.pb.t1)
this.pb.errorScale == orig(this.pb.errorScale)
this.pb.errorScale[] == orig(this.pb.errorScale[])
this.integ == orig(this.integ)
this.integ.getClass().getName() == orig(this.integ.getClass().getName())
size(this.pb.y[]) == orig(size(this.pb.y0[]))
this.pb.calls one of { 0, 2204 }
===========================================================================
org.apache.commons.math.ode.sampling.StepNormalizerTest.setUp():::ENTER
this.pb == null
this.integ == null
this.lastSeen == false
===========================================================================
org.apache.commons.math.ode.sampling.StepNormalizerTest.setUp():::EXIT
this.lastSeen == orig(this.lastSeen)
this.pb.calls == 0
this.lastSeen == false
===========================================================================
org.apache.commons.math.ode.sampling.StepNormalizerTest.suite():::EXIT
return.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
org.apache.commons.math.ode.sampling.StepNormalizerTest.tearDown():::ENTER
this.pb.calls == 2204
this.lastSeen == true
===========================================================================
org.apache.commons.math.ode.sampling.StepNormalizerTest.tearDown():::EXIT
this.lastSeen == orig(this.lastSeen)
this.pb == null
this.integ == null
this.lastSeen == true
===========================================================================
org.apache.commons.math.ode.sampling.StepNormalizerTest.testBeforeEnd():::ENTER
this has only one value
this.pb has only one value
this.pb.y has only one value
this.pb.calls == 0
this.pb.y0 has only one value
this.pb.errorScale has only one value
this.integ has only one value
this.lastSeen == false
===========================================================================
org.apache.commons.math.ode.sampling.StepNormalizerTest.testBeforeEnd():::EXIT
this.pb == orig(this.pb)
this.pb.e == orig(this.pb.e)
this.pb.y == orig(this.pb.y)
this.pb.y[] == orig(this.pb.y[])
this.pb.n == orig(this.pb.n)
this.pb.t0 == orig(this.pb.t0)
this.pb.y0 == orig(this.pb.y0)
this.pb.y0[] == orig(this.pb.y0[])
this.pb.t1 == orig(this.pb.t1)
this.pb.errorScale == orig(this.pb.errorScale)
this.pb.errorScale[] == orig(this.pb.errorScale[])
this.integ == orig(this.integ)
this.integ.getClass().getName() == orig(this.integ.getClass().getName())
size(this.pb.y[]) == orig(size(this.pb.y0[]))
this.pb has only one value
this.pb.y has only one value
this.pb.calls == 2204
this.pb.y0 has only one value
this.pb.errorScale has only one value
this.integ has only one value
this.lastSeen == true
===========================================================================
org.apache.commons.math.ode.sampling.StepNormalizerTest.testBoundaries():::ENTER
this has only one value
this.pb has only one value
this.pb.y has only one value
this.pb.calls == 0
this.pb.y0 has only one value
this.pb.errorScale has only one value
this.integ has only one value
this.lastSeen == false
===========================================================================
org.apache.commons.math.ode.sampling.StepNormalizerTest.testBoundaries():::EXIT
this.pb == orig(this.pb)
this.pb.e == orig(this.pb.e)
this.pb.y == orig(this.pb.y)
this.pb.y[] == orig(this.pb.y[])
this.pb.n == orig(this.pb.n)
this.pb.t0 == orig(this.pb.t0)
this.pb.y0 == orig(this.pb.y0)
this.pb.y0[] == orig(this.pb.y0[])
this.pb.t1 == orig(this.pb.t1)
this.pb.errorScale == orig(this.pb.errorScale)
this.pb.errorScale[] == orig(this.pb.errorScale[])
this.integ == orig(this.integ)
this.integ.getClass().getName() == orig(this.integ.getClass().getName())
size(this.pb.y[]) == orig(size(this.pb.y0[]))
this.pb has only one value
this.pb.y has only one value
this.pb.calls == 2204
this.pb.y0 has only one value
this.pb.errorScale has only one value
this.integ has only one value
this.lastSeen == true
